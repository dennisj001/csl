//logOn
//_dbgOn 
//ukseOn
//optimizeOff
5 // stack checking marker
#define DEBUG_ON 0
scOn 
Debug
// higher debugLevel turns on more debugging
: d0 debugLevel 0 = ;  // use a possibly user set level : a debugWord has special behavior : doesn't interfere with optimization
: d1 debugLevel 1 = ;  // use a possibly user set level : a debugWord has special behavior : doesn't interfere with optimization
: d2 debugLevel 2 = ;  // use a possibly user set level : a debugWord has special behavior : doesn't interfere with optimization
: d: _dbgOn d0 dbgSourceCodeOn ; immediate debugWord // use a possibly user set level : a debugWord has special behavior : doesn't interfere with optimization
: d1: _dbgOn d1 dbgSourceCodeOn ; immediate debugWord // a debugWord has special behavior : doesn't interfere with optimization
: d2: _dbgOn d2 dbgSourceCodeOn ; immediate debugWord // a debugWord has special behavior : doesn't interfere with optimization

Root 
"OptimizeOn" variable
OptimizeOn 1 = 
#if OptimizeOn @
optimizeOn inlineOn
#else
optimizeOff inlineOff
#endif

typecheckOn dbgTypecheckOn
: sp1 stack pause ;
: sp0 ;
#if 0
: sp stack pause ; 
: include dup "\tincluding ..." printString printString sp _include ;
#else
: sp ; //stack pause ; 
: include _include ; //dup "\tincluding ..." printString printString stack pause _include ;
#endif
verbosity 1 = 
sp
Root 
'find '_findUsing _findUsing alias immediate 
: findAny _findAny ; immediate 
'tick ' _tick find alias immediate
: ' _tick ; immediate
'ndrop '_ndrop find alias immediate 
'forth 'postfixOn find alias
'c_syntaxOn '_c_syntaxOn find alias immediate
'C_On 'c_syntaxOn find alias
'C_Off 'c_syntaxOff find alias
'_cOn '_c_syntaxOn find alias
'cOn 'c_syntaxOn find alias
'cOff 'c_syntaxOff find alias
'fOn 'forthSyntaxOn find alias
'fOff 'forthSyntaxOff find alias
"log" variable 
'n- 'namespaces find alias
Root
"User" namespace 
Io Int
: _ps printString ; inline
: ps space _ps ; "S.V" typeSignature
: prints _ps ;
: pn intPrint ;
: _p intPrint ;
: p space intPrint ;
'_hp 'hexIntPrint find alias
: hp space _hp ;
: dp space decimal intPrint ; 
: print space intPrint ;
"nl" ' newline find alias keyword
: _logWrite "csl.log" logWrite ;
: _logAppend "csl.log" logAppend ;
sp
// aliases 
User
"const" ' constant find alias
"_const" ' _constant find alias
"var" ' variable find alias
"_var" ' _variable find alias
'cd ' changeDirectory find alias
#define ll $ls -al 
Debug
//"dbg" '_dbg find alias immediate debugWord
"dbrk" ' <dbg> find alias debugWord
"locals" 'localsShow find alias
"regs" 'cpuStateShow find alias
't: 'dbgTypecheckOn find alias 
';t 'dbgTypecheckOff find alias
'tcOn 'typecheckOn find alias 
'tcOff 'typecheckOff find alias
'nt 'namespaceTreeWithWords find alias
'dscOn 'dbgSourceCodeOn find alias
'dscOff 'dbgSourceCodeOff find alias
'scOn 'dscOn find alias
'scOff 'dscOff find alias
scOn 

'tcOnv var 
tcOnv 1 =
#if tcOnv
tcOn
#endif

: v4 verbosity 4 = ; 
: v1 verbosity 1 = ;

User
"wdis" ' wordDisassemble find alias
'ts 'showTypeWordStack find alias
's 'stack find alias
: p space intPrint ;
'streol 'getStringToEndOfLine find alias
Root 
'dbgOnVar var 
'dbOn 'dbgOnVar find alias
: dbgOn dbgOnVar 1 = ; immediate
: dbgOff dbgOnVar 0 = ; immediate
: Is_DebugOn dbgOnVar @ ;
'C_ 'C_Syntax find alias
'_C_ 'C_Syntax find alias
'_C 'C_Syntax find alias

// === controls ===
Root 

User
sp
Combinators
"ix" ' call find alias immediate
"qEval" ' call find alias immediate
"ifte" ' tf3 find alias
"ifElse" ' tf3 find alias
Root
'startupMacros 1 constant
User
#if startupMacros
: _SMN_ "StartupMacros" ;                           // _SMN_ : string startup macros namespace 
"StartupMacros" namespace                           // create a namespace for string macros to be used 
StartupMacros                                       // switch to that namespace
// create string words in StartupMacros namespace
: Delimiters "/" ;                                  // set delimiters to be used with string macros
: namespaces { "init.csl" fexists } { "namespaces" } { "/usr/local/lib/csl/namespaces" } ifElse ;
                                                   // our currently only ?!overloaded!? string macro allowing
                                                    // us to parameterize the startup; can be properly started 
                                                    // in any directory now if it is installed with 'make install' 
                                                    // in "/usr/local/lib/csl"
//stringMacrosOn                                    // turn on the macros; doesn't work if not initialized like eg. above initialization
                                                    // nb. we don't turn it on here until about line 497
// stringMacrosOff                                  // turn off the macros
#endif
Lexer User 

// nb. there is still some (alot of) old junk here and especially in the test files and some of the comments may not apply anymore ...
// echoOn
// verbosity 1 = 
//autoVarOn
Debug
"DebugFlag" variable
DebugFlag 0 =
: dbiOn dbi 1 = ;
: DbiOn dbi 2 = ;
: dbiOff dbi 0 = ;
sp
Compiler 
// nb :: .'"[] :: these five characters - dot, tick, quote left bracket, right bracket - .'"[] - are character macros including the brackets they work at the char level in readline
// set up some traditional Forth words from internal primitives
// core internal c defined words : begin _end token _tick _immediate definition compile constant variable alias compileModeOn wordInit wordAdd wordFinish
//quote ' quote quote find alias _immediate
"'" quote quote find alias _immediate
"immediate" ' _immediate find alias _immediate
"compileWord" ' _compileWord find alias immediate
"compileCall" ' _compileCall find alias immediate
"swap" ' _swap find alias immediate
"compilable" 'immediateOff find alias

Interpreter 
// core words 
"{" ' begin find alias immediate keyword
"end" ' _end find alias immediate
"}" ' end find alias keyword
"xt@" { xt @ } word immediate // ' definition alias immediate
"_semi" wordNew { xt= wordFinish } xt= wordFinish 
"semi" wordNew { _end _semi } _semi 
";" ' semi find alias immediate syntactic
'i; '; find alias
';i '; find alias
: word swap wordNew swap _semi ;  //'word wordDisassemble pause
: word ( name block ) name @ wordNew block @ _semi ;  // works but it is 10 bytes more code
":" { compileModeOn sourceCodeInit token wordNew begin } word // immediate // begin is not an immediate word
: ;; ' ; find compileWord ' _prefix find compileWord ; immediate

C
: ;; semi _prefix ; immediate syntactic
c_syntaxOn 
type int8 ; int8.size = 1 ;
type uint8 ; uint8.size = 1 ;
type byte ; byte.size = 1 ;
type int16 ; int16.size = 2 ;
type uint16 ; uint16.size = 2 ;
type int32 ; int32.size = 4 ;
type uint32 ; uint32.size = 4 ;
type int64 ; int64.size = 8 ;
type uint64 ; uint64.size = 8 ;
type void ; void.size = 0 ;
type char ; char.size = 1 ;
type int ; int.size = 8 ;
type long ; long.size = 8 ;
type quad ; quad.size = 16 ;
type Boolean ; Boolean.size = 1 ;
type Pointer ; Pointer.size = 8 ;
type block ; block.size = 8 ;
C
"Dlsym" namespace 
Dlsym 
#define LIBC "/lib/libc.so.6"
"libc" namespace 
libc
dlsym: printf LIBC ; void_return
dlsym: strcmp LIBC ; rax_return
dlsym: sprintf LIBC ; void_return
dlsym: strcat LIBC ; void_return
//dlsym: strlen LIBC ; rax_return
dlsym: memset LIBC ; void_return
dlsym: sscanf LIBC ; void_return
dlsym: atoi LIBC ; rax_return
//int _strlen ( s ) { return strlen ( s ); }
c_syntaxOff
Root  
sp0
System
//: bnInit1 ( width ) width @ bnInit ; 
//: bigNumOff "BigNum" notUsing ;
//: bigNumOn BigNum 32 bnInit ;
//d: : bigNumOn do> 32 BigNum.bnInit does> BigNum <does ;

'bnOn 'bigNumOn find alias
'bnOff 'bigNumOff find alias
BigNum
: fprint space _bfprint ;
'p 'fprint find alias
: eprint space _beprint ;
// pPrecision : this sets the number of digits to be printed after the decimal point" 
// pWidth : sets the "Minimum number of characters to be printed. If the value to be printed is shorter than this number, 
// the result is padded with blank spaces. The value is not truncated even if the result is larger."
: bnInit ( precision width ) precision @ pPrecision width @ pWidth ;; 
//'bnInit find wdis 
bnOn
: _bassert ( n m ) { n @ m @ != } { nl "error" ps _info pause } if2 ; 
bnOff

Compiler String
scOn 
#if 0
: var: { token dup ";var" strcmp } { _var } while drop ;  // nb : no quotation marks around variable names with var: ... ; 
#else
Forth
: var: begin token dup ";var" strcmp while _var repeat drop ;  // nb : no quotation marks around variable names with var: ... ; 
#endif
//'var: find wdis //pause
var: DebugFlag classTestRead doInit1 doDemo doTest doLisp testing testLisp x ;var sp0 // _TestDone_ ; 
"mod" 'modulo find alias

Namespace
Combinators
: using: { token dup ";" strcmp } { usingFirst } while drop ; // eg - "using: User Lisp ;"
: notUsing: { token dup ";" strcmp } { notUsing } while drop ; 
: usingLast: { token dup ";" strcmp } { usingLast } while drop ; 
notUsing: PrefixCombinators C Lisp ; sp0

System
"Black" 0 const
"Red" 1 const
"Green" 2 const
"Yellow" 3 const
"Blue" 4 const
"Magenta" 5 const
"Cyan" 6 const
"White" 7 const
"Default" 9 const
//: netbeans Blue Default setDebugColors ; : nnb Blue Black setDebugColors ; // netbeans // nnb

Root 
"fr" 'fullRestart find alias
"ri" 'restartInit find alias
'purge 'purgeWordName find alias
'purgeAll 'purgeWordIfContainsName find alias
System
"true" 1 const
"false" 0 const
"T" 1 const
"F" 0 const

Debug Macro
// make immediate/word immediate - compile time versions of some words
: _s stack ; 
: s stack ; immediate
'rdi 'recycleDebugInfo find alias
: rdim rdi mem ;
Word 
: code definition ;
C
System
: location filename ps space decimal lineNumber _p "." _ps charNumber _p ;
: pdl  "-----------------------------" ps ;
: pel  "=============================" ps ;
: _source ( addToHistoryFlag  pword )
    { addToHistoryFlag @ } { pword @ sourceAdd } { pword @ sourceDontAdd } ifElse 
;
: _wdiss ( addToHistoryFlag pword ) 
    nl pel 
    addToHistoryFlag @ pword @ _source 
    nl pdl 
    pword @ setSourceCodeWord
    pword @ wdis 
#if 0
    { pword @ } 
    { nl "Word :" _ps hex pword @ p ":: Compiled at :" ps pword @ definition p decimal } if2
#else // Forth control
    pword @ 
    if
        nl "Word :" _ps hex pword @ p ":: Compiled at :" ps pword @ definition p decimal 
    endif
#endif
    nl pel decimal 
    nl "::> 'wdiss' was called at" _ps location "<::" ps nl
;
: wdiss ( pword ) 0 pword @ _wdiss ; //debugWord      // don't add wdiss words to history list
: wdissl ( pword ) logOn 0 pword @ _wdiss logOff ; //debugWord      // don't add wdiss words to history list
'wi ' wdiss find alias
: pwdiss tokenQID _findAny wdiss ; // nb. a prefix function
: pwdissu tokenQID _findUsing wdiss ; // nb. a prefix function
'pwi 'pwdiss find alias
'pwu 'pwdissu find alias
//pwi _wdiss //pause
: fload ftoken include ;
: sys mem stateAll words stack namespaces in ; 
'aw 'allWords find alias
: stk stack ; //debugWord 
: ti timerInit ;
: ahalt stop ;
: vb ( n ) verbosity n @ = ;  : vb5 5 vb ; : vb4 4 vb ; : vb3 3 vb ; : vb2 2 vb ; : vb1 1 vb ; : vb0 0 vb ;
: sOff vb1 inlineOff optimizeOff ;
: sOn vb3 inlineOn optimizeOn ;
"ahOn" ' addToHistoryOn find alias
"ahOff" ' addToHistoryOff find alias
: adps ( s ) alertColors s @ ps defaultColors ;
: ddps ( s ) debugColors s @ ps defaultColors ;
Debug C
: logWrite ( str ) _logWrite nl str @ ps nl ;
: logAppend ( str ) _logAppend nl str @ ps nl ;

//#if Is_DebugOn
dscOn 

//verbosity 2 =
: debugTest3 ( n ) n @ 1 2 + + p <dbg> stack ;
//: debugTest3 1 2 + p <dbg> stack ;
//' debugTest3 find wdiss
: debugTest2 1 2 + p debugTest3 ;
: debugTest1 1 2 + p debugTest2 ;
: debugTest 1 2 + p debugTest1 ;

: _assert1dbg ( n m str ) { n @ m @ != } { str @ ? str @ ps : drop "error" ps _info stack _pause } { debugTest } ifElse ; 
: _assert1 ( n m str ) { n @ m @ != } { nl location hex n @ p "!=" ps m @ p "<:" ps "Assert Inconsistency?!" adps _info _pause } { str @ ps " : ok\n" ps nl } ifElse ; debugWord
: ctloc do> locationPush does> locationPrint <does ; immediate // compile time location
: _assert0 ( n m ) { n @ m @ != } { nl location nl hex n @ p "!=" ps m @ p "<:" ps "Assert Inconsistency?!" adps stack _info _pause } if2 ; 
//pwi _assert0 sp0 //{ str @ ps " : ok\n" ps nl } ifElse ; // no "ok" with this word
: _assert ( n m ) nl  nl "_assert ::" ps { n @ m @ != } { n @ p "!=" ps m @ p "<:" ps "Assert Inconsistency?!" adps _info _pause } 
    { " ok\n" ps nl } ifElse ; //pwi _assert sp0
: assert1s ( s1 s2 str ) { s1 @ s2 @ strcmp } { nl str @ ps "error" ps _info _pause } if2 ;
: assert0 ( n m ) { n @ m @ != } { nl "error" ps _info stack _pause } if2 ; 
"assert" ' _assert1 find alias debugWord
'assert1 ' _assert1dbg find alias debugWord
'assert1 ' _assert1 find alias debugWord
"_assert" ' _assert0 find alias debugWord
#if 0
: _assertStkChk0 ( n m | str )  
    { verbosity @ } 
    {
        { DebugFlag @ } 
        { 
            debugColors
            str "\n assertStkChk ::" = 
            { n @ m @  == }
            { nl location ":" ps str @ ps "ok : " ps n @ p "==" ps m @ p nl } //stack pause } 
            { tab nl location ":" ps str @ ps alertColors "\n Error!\n" ps n @ p "!=" ps m @ p nl stack pause nl } //quit } 
            ifElse 
            defaultColors 
        } 
        { 
            //"\nassertStkChk : " ps n @ p m @ p 
            n @ m @ _assert0
        }
        ifElse
    } if2
    //stack pause
; 
//' _assertStkChk0 find wdiss sp0
#else // forth control
: _assertStkChk ( n m | str )  
    verbosity @ 
    if
        DebugFlag @ 
        if 
            debugColors str "\n assertStkChk ::" = 
            n @ m @  == 
            if
                nl location ":" ps str @ ps "ok : " ps n @ p "==" ps m @ p nl //stack pause  
            else
                tab nl location ":" ps str @ ps alertColors "\n Error!\n" ps n @ p "!=" ps m @ p nl stack pause nl  
            endif 
            defaultColors 
        else 
            n @ m @ _assert0
        endif 
    endif
; 
#endif
//' _assertStkChk find wdiss //pause
#if 0
: assertStkChk "\n_assertStkChk : " ps _assertStkChk stack pause ; 
#else
: assertStkChk _assertStkChk ; //"\n_assertStkChk : " ps stack pause ; 
#endif
Root Io
: Error "\nerror :" ps location pause ;
: tCSL "namespaces/ninit.csl" include ; // namespaces init
: tc 2 ti 1 ti lispOff tCSL rtw ;
cOn Root
#if OptimizeOn
int64 StringEqual ( a b ) { return ( ! strcmp ( a, b ) ) ; } //remember : strcmp returns a diff => returns 0 when there is no difference
StringEqual ( "hi" "hi" ) != 0 ? noop : abort // remember : so StringEqual returns true (1) when strings are equal
StringEqual ( "hi" "hi" ) == 0 ? abort : noop
StringEqual ( "hi" "hi" ) ? noop : abort
StringEqual ("hi" "hey") != 0 ? abort : noop
StringEqual ("hi" "hey") == 0 ? noop : abort
#endif
cOn Dlsym libc 
void pbAssert ( argin ) 
{
    byte * pb = pbc () ; 
    if ( StringEqual ( pb, argin ) ) ps ( "\npbAssert : ok\n") ; 
    else 
    {   
        int64 la = Strlen ( argin ), lp = Strlen ( pb ) ; 
        printf ( "\nargIn != pbc" ) ; 
        ps ("\npbc :" ) ;
        dump ( pb, lp  ) ;
        ps ("\nargIn :" ) ;
        dump ( argin, la  ) ;
        printf ( "\nStrlen ( argin ) = %d :: Strlen ( pb ) = %d", la, lp ) ;
        printf ( "\nargIn  = \'%s\' \n!= pbc = \'%s\'", argin, pb ) ; 
        Error () ; 
    }  
    pbclr () ;
} 
//pwi pbAssert
cOff
sp
sp0
User 
: pause nl _pause ;
: opOff optimizeOff inlineOff state ;
: opOn1 optimizeOn inlineOn { verbosity @ 1 > } { state } if2 ; //'opOn1 find wdiss //pause
: vck ( n str ) { verbosity @ n @ != } { verbosity n @ = str @ _findUsing wordRun } if2 ; // for testing
//'vck find wdiss //pause
: opOn ( n )
    optimizeOn inlineOn 
    //n @ 'state literal vck  // literal pops the stack and turns 'state into a string -- for testing
    n @ "state" vck  // literal pops the stack and turns 'state into a string -- for testing
;
//' opOn find winfo //pause 2 opOn 1 opOn 

"s" ' stack find alias
"istring" ' interpretString find alias 
"def" ' word find alias 
Compiler

Root C
"allot" ' allocateMem find alias
: include1 _dup debugColors "\n'include'" ps ps " :: at :" ps location nl defaultColors sp include  ;
Debug
#if ( DebugFlag @ )
: s stack alertColors location defaultColors ;
: include include1 debugColors "location :" ps location nl defaultColors ;
vb3
#endif
Interpreter
'_defined '_findUsing find alias 
//' defined '_findUsing find alias immediate 
C Compiler Int Lexer

: orpfile ( name | file input result )
    input 0 =
    "open/read/print :: " ps name @ ps nl
    file name @ fopen =
    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile 
    file @ fclose
; prefix
//'orpfile find wdiss sp0
Root
: license orpfile ( "./LICENSE" ) ;
//license sp0
Lisp OpenVmTil
: lispOff "Lisp" notUsing "LispTemp" notUsing "LispDefines" notUsing ; //lcReset ;
: lispOn lcOn ;
: ld: lcDbOn ; immediate // a debugWord has special behavior : doesn't interfere with optimization
: ;ld lcDbOff ; immediate // a debugWord has special behavior : doesn't interfere with optimization
postfixOn 
Root
 
#if 1 // this works
bnOn cOn 
void ctof ( c ) { c = c * 1.8 ; c = c + 32 ; nl ; p (c) ; } //ctof0 ( 11.41) ;
void ctof ( c ) { c *= 1.8 ; c += 32 ; nl ; p (c) ; } //ctof1 ( 11.41) ;
cOff 
: ctof ( c ) c 1.8 *=  c 32 += nl c @ p ; //11.41 ctof 
: ftoc ( f ) f 32 -= f 1.8 /= f @ p ; //60 ftoc 
bnOff
: ctof ( c ) c 18 *=  c 10 /= c 32 += nl c @ p ; 
: ftoc ( f ) f 32 -= f 10 *= f 18 /= f @ p ; //60 ftoc 
sp0
#endif
//: ash _sh ; prefix

//================================================================================

Root
// rtw : recycle some test/debug words 
: rtw "test" purgeAll "hi" purge "hey" purge "heey" purgeAll "hey1" purge "hey2" purge "heey1" purge "heey2" purge "sp" purge "moe" purge ;
#if OptimizeOn @
: atoi ( s | i ) i libc.atoi (s) = return ( i @ ) ; prefixable 
//pwi atoi 
//"7" atoi 7 _assert 
Root.atoi ( "7" ) 7 _assert //pause
#endif
#if startupMacros
stringMacrosOn
#endif
: tCSL "namespaces/ninit.csl" include ; // namespaces init
: tc 7 ti lispOff tCSL rtw ;
: x64 "namespaces/test/compiler/x64.csl" include ; 
: bx "namespaces/test/bigNum.test.csl" include ;
: TODO ( str ) nl nl pdl nl str @ adps location nl pdl nl nl { dbgOnVar @ } { sp } if2 ;; //pause ;;
lispOff
: mrm mem rdi mem ; 
: mem2 verbosity 2 = mem verbosity 1 = ; 
#ifndef INCLUDES 
#define INCLUDES
//: typesInclude "namespaces/types.csl" include ;
//: minc vb2 _c_syntaxOn "/home/dennisj/csl-code/archive/maru-2.4/eval.c" include ;
//: minc2 vb2 cOn includesOnlyOn minc cOff includesOnlyOff ;
//: mci "namespaces/test/compiler/machineCode.c" include ;
: iinc "./init.csl" include ;
: interpT "namespaces/test/compiler/interpreter.csl" include ;
: itest _TestDone_ @ { "namespaces/test/initTest.csl" include } if1 ;
: classTest "namespaces/test/classTest.csl" include ;
: arrayTest "namespaces/test/arrayTest.csl" include ;
: localsTest "namespaces/test/localsTest.csl" include ;
: bigNumTest "namespaces/test/bigNum.csl" include ;
: stackTest "namespaces/test/stack.csl" include ;
: controlTest "namespaces/test/control.csl" include ;
: objectTest "namespaces/test/dobject.csl" include ;
: c_SyntaxTest "namespaces/test/compiler/c_syntax.csl" include ;
: syntaxTest "namespaces/test/compiler/syntax.csl" include ;
: preprocessorTest "namespaces/test/compiler/preprocessor.csl" include ;
: test "namespaces/test/test.csl" include ;
: dT0 "namespaces/test/dev0.csl" include ;
: dT2 "namespaces/test/dev2.csl" include ;
: dT3 "namespaces/test/dev3.csl" include ;
: loT "namespaces/test/logic.csl" include ;
: dT "namespaces/test/dev.csl" include ; inline
: dT2 "namespaces/test/dev2.csl" include ;
: mT "namespaces/test/math.csl" include ;
: fT "namespaces/test/file.csl" include ;
: sT "namespaces/test/compiler/syntax.csl" include ;
: nT "namespaces/test/namespace.csl" include ;
: sysT "namespaces/test/system.csl" include ;
: lispTest "namespaces/test/lisp.csl" include ;
: oldL "namespaces/test/oldLisp.csl" include ;
: stT stackTest ;
: bT bigNumTest ;
: locT localsTest ;
: aT arrayTest ;
: cT classTest ;
: cntT controlTest ;
: oT objectTest ;
: cST c_SyntaxTest ;
: ppT preprocessorTest ;
: lT lispTest ;
#endif
: libInit "namespaces/libInit.csl" include ;
'li 'libInit find alias

// === startup extra controls ===
Root 
'todo 0 const  
'doX64 1 const
'doTX64 1 const
'doScript 1 const
'doScript2 1 const
'forStarters 0 const 
'_doDemo 1 const
'_doTest 1 const
doLisp 0 =
'doLispTest var doLispTest 0 =
'doBigNum 1 const 
    
// ========controls===========

Root
: startupNamespaces setAllStateNotUsing lbforth Root PreProcessor Experimental Locals MemorySpace Array Logic Bits Asm File System Colors Memory 
    OpenVmTil Stack List DObject Reserved Compiler Compiling StartupMacros User String Forth Namespace Combinators Macro Word 
    Io byte C int64 Debug Interpreter Int Lexer Class void Dlsym Defines libc Shell int X64 uint64 uint8 Ar1 DLLNodeAlloc 
    DLLNode Buffer ;
: lispInitNamespace "namespaces/test/compiler/lcinit.csl" ;
: lisp lispInitNamespace _lisp ;  // demo of another way 
//: lisp "namespaces/test/compiler/lcinit.csl" _lisp ;  

//lisp
//scOn
#if DEBUG_ON 
dbgOn
#else
dbgOff
#endif 
//l9
//lisp
//tc

// ===========================
// extra, debug, testing, etc.
// ===========================
#if Is_DebugOn forStarters ||

#if todo
: _TODO ( str ) TODO ( str @ ) ;;
: TODO ( str ) _TODO ( str @ ) pause ;;
#endif

System C
//fload test.txt 

#if _doTest
tc
#endif

#if 0 //doLisp @
lisp 
lcOff    
doLispTest 0 =
//pause
#endif

#if _doDemo 
//demo 
#else 
mem //pause
#endif //dT0
//rtw

//stringMacrosOff

#else // !Is_DebugOn : of course you can trim this file to your needs and put your extra init code maybe here if you like
: mct "namespaces/test/compiler/machineCode.csl" include ;

#endif // Is_DebugOn
bnOff
Shell
rtw

'test 'tc find alias //nb! after rtw which removes all words "test", etc.

#if forStarters 
d: : hi0 ( n m ) n @ m @ - dup <dbg> p return tos ; pwi hi0 13 2 d: hi0 11 _assert
#if 1
: hi ( n m | x ) x n @ m @ - = x @ p return ( x @ ) ; pwi hi 13 2 hi 11 _assert
cOn
d: int fac5 ( REG n | REG facc )  {  facc = 1 ; while ( n > 1 )  { facc = facc * (n --) ; } return facc ; } 
fac5 ( 7 ) ; p
//
pwi fac5    
cOff
#endif 
#endif    

//tc demo lisp

//stringMacrosOff
//mem
//scOn d: : hipt ( a b | c ) a @ b @ + c ! c @ p return ( c @ ) ; pwi hipt 2 3 hipt 5 _assert 
;d
#if 0 //DEBUG_ON 
Forth
: _fib1cr ( n ) n 2 < if n @ else n  n @ 1 - = _fib1cr n n @ 2 - = _fib1cr + endif ;
c_syntaxOn
int _fib1c ( n ) { if ( n < 2 ) { n ; } else { _fib1c ( n - 1 ) + _fib1c ( n - 2 ) ; }  }
pwi _fib1c
pwi _fib1cr
_fib1c (20) ; dup p 6765 _assert
pwi _fib1cr 
//_fib1cr (20) ; dup p 6765 _assert // not working
c_syntaxOff
//#endif
C
scOn
cOn 
int64
fd ( int64 koc | int64 rtrn )
//fd ( REG int64 koc | REG int64 rtrn )
{
   //int64 rtrn ;
   if ( koc == 1) rtrn = 1 ;
   else if ( koc == 2) rtrn = 5 ;
   else if ( koc == 3) rtrn = 10 ;
   else if ( koc == 4) rtrn = 25 ;
   else if ( koc == 5) rtrn = 50 ;
   return rtrn ;
}
pwi fd sp0
/*
(define (cc amount kinds-of-coins)                                                                                                                        
  (cond ((= amount 0) 1)                                                                                                                                  
        ((or (< amount 0) (= kinds-of-coins 0)) 0)                                                                                                        
        (else (+ (cc amount                                                                                                                               
                     (- kinds-of-coins 1))                                                                                                                
                 (cc (- amount (first-denomination kinds-of-coins))
                     kinds-of-coins)
))))
*/
//cc1 ( REG amount, REG koc | REG rtrn ) //, REG one, REG int64 two ) 
//cc1 ( REG amount, REG koc | REG rtrn ) // gives wrong result ??
//cc1 ( REG amount, REG koc) // doesn't work ??
#if 1
int64
cc1 ( int64 amount, int64 koc | rtrn, one, two )
#else
int64
cc1 ( REG amount, REG koc | REG rtrn, REG one, REG two ) // gives wrong result ??
#endif
{
    if (amount == 0) rtrn = 1  ;
    else if ( ( amount < 0) || ( koc == 0) ) rtrn = 0 ;
    else 
    {
#if 0
        rtrn = cc1 ( amount, koc - 1) + cc1 (amount - fd (koc), koc) ; //stack () ;// compiles with REGs but gives wrong result
#else // no REGs this works
        one = cc1 ( amount, koc - 1) ;
        two = cc1 (amount - fd (koc), koc) ;
        rtrn = one + two ;
#endif
    }
    //oPrintf ( "\nId %ld :: amount = %ld : koc = %ld :: one = %ld : two = %ld : rtrn = %ld", callerId, amount, koc, one, two, rtrn ) ;
    //oPrintf ( "\namount = %ld : koc = %ld :: one = %ld : two = %ld : rtrn = %ld", amount, koc, one, two, rtrn ) ;
    return rtrn ;
}

//vb(1) ;
pwi cc1 //pause
//pwi countChangec
int64 
countChange ( int amount)
{
  int64 rtrn = cc1 ( amount, 5)  ;
  return rtrn ;
}
//pwi countchange
void
CountChange ( int64 amount )
{
    int64 value0 ;
    value0 = countChange ( amount ) ;
    oPrintf ( "\n%ld", value0 ) ;
}
//logOn
//stack pause
CountChange (100) ; stack //pause
countChangec (100 ) ; drop //pause
pwi countChangec pause
ti(4) ; countChangec (1000 ) ; drop time(4) ;
//ti(4) ; countChangec (10000 ) ; drop time(4) ;
ti(4) ; CountChange (1000) ; time(4) ; stack
//ti(4) ; CountChange (10000) ; time(4) ; stack
//logOff
cOff
pause
#endif // ifdef _DEV_H_
//$gcc --version
#if 0
: qexp dup 1 <= if else dup -- qexp * endif ; 'qexp find wdiss 7 qexp dup p 5040 _assert 
: qexp2 dup 1 <= if else dup -- qexp2 * endif ; 7 qexp2 dup p 5040 _assert
: bexp ( n ) n @ 1 > if n @ dup -- bexp * else 1 endif ; 7 bexp dup p 5040 _assert
: qexp5 dup 1 <= if  else dup -- qexp5 * endif ; 'qexp5 find wdiss 7 qexp5 dup p 5040 _assert 
: qexp3 dup 1 <= if else dup -- qexp3 * endif ; 7 qexp3 dup p 5040 _assert
: bexp4 ( n ) n @ 1 > if n @ dup -- bexp4 * else 1 endif ; 7 bexp4 dup p 5040 _assert
: bexp2 ( n ) { n @ 1 > } { n @ dup -- bexp2 * } { 1 } ifElse ; 7 bexp2 dup p 5040 _assert
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 *  } { 1 } ifElse ;
7 bexp3 dup nl p 5040 _assert sp0
: t if 1 p else 0 p then ; 0 t 1 t nl //pause
: t1 dup dup dup if 1 p t t t else 0 p t t t then ; 0 t1 nl 1 t1 //pause
pwi t1 pwi t
#endif
#if 0
Forth 
: tr ( x ) begin x @ 10 < while x x @ 1 + = x @ p repeat ; pwi tr 0 tr 
: tu ( x ) begin x @ p x x @ 1 + = x @ 10 > until ;  pwi tu 0 tu
cOn
int
fibPTC4? ( REG n | REG fn, REG fn1, REG fn2 )
{
    fn = 0, fn1 = 0, fn2 = 1 ; 
    do 
    {   
        fn1 = fn2 ;
        fn2 = fn ;
        fn = fn1 + fn2 ; 
        n -- ;
    }
    while ( n > 0 ) ;
    return fn ;
}
pwi fibPTC4? 
fibPTC4? (20) ; 
c_syntaxOff
dup p 6765 _assert sp0 //pause
cOff
Forth
: fibPTC5 ( REG n | REG fn REG fn1 REG fn2 )
    fn 0 = fn1 0 = fn2 1 = 
    begin 
        fn1 fn2 @ =
        fn2 fn @ =
        fn fn1 @ fn2 @ + = 
        n n @ 1 - = 
        n @ 0 > 
    while
    repeat
    return fn @ 
;
pwi fibPTC5 
20 fibPTC5 dup p 6765 _assert
Combinators
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
pwi factorial2 
7 factorial2 dup p 5040 _assert //pause
fOn scOn
: factorial3 ( REG n | REG rec ) 
    rec 1 = 
    begin rec rec @ n @ * = n n @ 1 - =  n @ 1 > doWhile  
    return rec @ 
;
pwi factorial3 
7 factorial3 dup p 5040 _assert //pause
fOff
Combinators
#endif
#if 0
fOn 
: tr ( x ) begin x @ 10 < while x x @ 1 + = x @ p repeat ; pwi tr 0 tr 
: tu ( x ) begin x @ p x x @ 1 + = x @ 10 > until ;  pwi tu 0 tu
: tfor ( n | x ) x n @ =  begin x @ 0 > while x @ p x x @ 1 - = repeat ; pwi tfor 10 tfor        
: factorial3 ( REG n | REG rec ) 
    rec 1 = 
    begin rec rec @ n @ * = n --  n @ 1 > doWhile  
    //begin rec rec @ n @ * = n n @ 1 - =  n @ 1 > doWhile  
    return rec @ 
;
pwi factorial3 
7 factorial3 dup p 5040 _assert //pause
: fibPTC5 ( REG n | REG fn REG fn1 REG fn2 )
    fn 0 = fn1 0 = fn2 1 = 
    begin 
        fn1 fn2 @ =
        fn2 fn @ =
        fn fn1 @ fn2 @ + = 
        n n @ 1 - = 
        n @ 0 > 
    doWhile
    return fn @ 
;
pwi fibPTC5 
20 fibPTC5 dup p 6765 _assert                                                                                   
: factorial5n ( REG n | REG rec ) 
    rec 1 = 
    //n @ 1 > if begin rec rec @ n @ * = n n @ 1 - = n @ 1 > doWhile endif
    begin rec rec @ n @ * = n n @ 1 - = n @ 1 > doWhile
    return rec @ 
;
pwi factorial5n 
7 factorial5n dup p 5040 _assert 
fOff
#endif

#if 0
cOn
//typecheckOn
C
'Experimental3 namespace
C.Experimental3 
typedef struct _byteTest 
{
    byte a8_123 ; 
    int64 a64_123 ;
    byte b8_123 ;
    byte c8_123 ; // test comment
    union // offset 11
    {
        int64 u64_123 ;
        int32 u32_123 ;
        int8 u8_123 ;
    } ; //size = 8 
    int32 a32_123 ; // offset 19
    byte d8_123 ;
    int16 a16_123 ; 
} byteTest, abyteTest ; // size = 26 + (26 % 4) = 28 
byteTest 'bt new ;
//byteTest new ('bt )
pwi byteTest 
ps ( "\nbt.size =" ) ; p ( bt.size ) ;
void 
bttt ( byteTest * xbt | btt byte bbtt) 
{ 
    oPrintf ( "\nbtt" ) ;
    dump ( &xbt, xbt.size ) ; 
    //wordStructPrint ( xbt find ('byteTest) ;
    //d: xbt.a8_123 = 598 ; // check typechecking
    xbt.a8_123 = 'a' ; 
    bbtt = xbt.a8_123 ; 
    oPrintf ( "\nbtt = %c", bbtt ) ; 
    xbt.a64_123 = 0x123456789abcdef ; 
    xbt.b8_123 = 'b' ; 
    xbt.c8_123 = 'c' ; 
    xbt.a16_123 = 0x1234 ; 
    xbt.a32_123 = 0x12345678 ; //pause
    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;
    xbt.d8_123 = 'd' ;
    oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ; 
    oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ; 
    oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ; 
    oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ; 
    oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ; 
    oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ; 
    oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ; 
    oPrintf ( "\nbt.d8_123 = %c ", xbt.d8_123 ) ; 
    oPrintf ( "\nbtt = %lx", btt ) ; 
    dump ( &xbt, xbt.size ) ; 
    hp ( &xbt.a8_123 ) ;
} 
byteTest 'bt new ;
pwi bttt 
bttt ( bt ) 
cOff
nl
bt 'byteTest find wordStructPrint 
cOff
nl bt.a32_123 32@ hp    
nl bt.u32_123 32@ hp 
#endif
2 + 7 assertStkChk // stack checking
//rdim 
//logOff
