[dennisj@infinity-a5 csl]$ cx

including ./init.csl at <command line> : 0.21 ...

System Startup [ 0 ] : elapsed time = 0.017218788 seconds
OVT Startup : elapsed time = 0.023512223 seconds
version 0.940.140
<: tc

including namespaces/ninit.csl at <command line> : 1.3 ...

including namespaces/test/initTest.csl at namespaces/ninit.csl : 10.23 ...

before testAll 
test nested elif 1 - correct 

including namespaces/compiler/preprocessor.csl at namespaces/test/initTest.csl : 86.41 ...
 
preprocessor test ok1
 
preprocessor test ok2
 
ppx = 2 
ppxe = 0
including namespaces/test/logic.csl at namespaces/test/initTest.csl : 86.41 ...
 1 0
 =============================
Bits.lnt <:> csl compiled word
SourceCode for Bits.lnt :> 
: lnt ( n ) n @ 7 < dup p return tos ; 
Source code file location of lnt : "namespaces/test/logic.csl" : 12.2 :: we are now at : namespaces/test/logic.csl : 13.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b013d -- code size = 66 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.lnt : definition = 0x0000757b488b013d : disassembly at namespaces/test/logic.csl : 13.17 :
0x757b488b013d    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0141    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0145    4981c608000000          add r14, 0x8                                           
 ..                           : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x757b488b014c    49837ff807              cmp qword [r15-0x8], 0x7                               
0x757b488b0151    0f9cc0                  setl al                                                
0x757b488b0154    480fb6c0                movzx rax, al                                          
0x757b488b0158    4983c610                add r14, 0x10                                          
0x757b488b015c    498906                  mov [r14], rax                                         
 ..                   : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x757b488b015f    498946f8                mov [r14-0x8], rax                                     
 ..               : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x757b488b0163    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b016d    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..             : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x757b488b0170    498b06                  mov rax, [r14]                                         
0x757b488b0173    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0177    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b017b    498906                  mov [r14], rax                                         
 ..  : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x757b488b017e    c3                      ret                                                    
Word_Disassemble : word - 'lnt' :: codeSize = 66
Word : 0x0000757b484d6a07 :: Compiled at : 0x0000757b488b013d
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 13.17 <::
 1 0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 1 0
 =============================
Bits.lnt2 <:> csl compiled word
SourceCode for Bits.lnt2 :> 
: lnt2 ( n m ) n @ m @ >= dup p return tos ; 
Source code file location of lnt2 : "namespaces/test/logic.csl" : 25.2 :: we are now at : namespaces/test/logic.csl : 26.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b034c -- code size = 76 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.lnt2 : definition = 0x0000757b488b034c : disassembly at namespaces/test/logic.csl : 26.18 :
0x757b488b034c    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0350    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0354    4981c608000000          add r14, 0x8                                           
 ..                        : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x757b488b035b    498b47f0                mov rax, [r15-0x10]                                    
 ..                    : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x757b488b035f    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x757b488b0363    483bc1                  cmp rax, rcx                                           
0x757b488b0366    0f9dc0                  setge al                                               
0x757b488b0369    480fb6c0                movzx rax, al                                          
0x757b488b036d    4983c610                add r14, 0x10                                          
0x757b488b0371    498906                  mov [r14], rax                                         
 ..             : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x757b488b0374    498946f8                mov [r14-0x8], rax                                     
 ..         : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x757b488b0378    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b0382    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..       : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x757b488b0385    498b06                  mov rax, [r14]                                         
0x757b488b0388    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b038c    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b0390    4983ee08                sub r14, 0x8                                           
0x757b488b0394    498906                  mov [r14], rax                                         
 .. 2 ( n m ) n @ m @ >= dup p return tos ; 
0x757b488b0397    c3                      ret                                                    
Word_Disassemble : word - 'lnt2' :: codeSize = 76
Word : 0x0000757b484df417 :: Compiled at : 0x0000757b488b034c
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 26.18 <::

 0 0 1 1 0 0 0 0 1 1
 1 0 0
 =============================
Bits.tnot <:> csl compiled word
SourceCode for Bits.tnot :> 
: tnot ( n ) n @ not dup n store n @ dup p return tos ; 
Source code file location of tnot : "namespaces/test/logic.csl" : 46.2 :: we are now at : namespaces/test/logic.csl : 47.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b068a -- code size = 101 bytes
TypeSignature : Integer -> Integer 
 -----------------------------
Word :: Bits.tnot : definition = 0x0000757b488b068a : disassembly at namespaces/test/logic.csl : 47.18 :
0x757b488b068a    4d897e08                mov [r14+0x8], r15                                     
0x757b488b068e    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0692    4981c608000000          add r14, 0x8                                           
 ..                          : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b0699    498b47f8                mov rax, [r15-0x8]                                     
 ..                      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b069d    4883f800                cmp rax, 0x0                                           
0x757b488b06a1    0f94c0                  setz al                                                
0x757b488b06a4    480fb6c0                movzx rax, al                                          
0x757b488b06a8    4983c610                add r14, 0x10                                          
0x757b488b06ac    498906                  mov [r14], rax                                         
 ..                  : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b06af    498946f8                mov [r14-0x8], rax                                     
0x757b488b06b3    498d47f8                lea rax, [r15-0x8]                                     
 ..              : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b06b7    488bc8                  mov rcx, rax                                           
0x757b488b06ba    498b06                  mov rax, [r14]                                         
0x757b488b06bd    4983ee08                sub r14, 0x8                                           
 ..            : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b06c1    488901                  mov [rcx], rax                                         
 ..      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b06c4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b06c8    4983c610                add r14, 0x10                                          
0x757b488b06cc    498906                  mov [r14], rax                                         
 ..  : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b06cf    498946f8                mov [r14-0x8], rax                                     
 : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x757b488b06d3    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b06dd    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. t ( n ) n @ not dup n store n @ dup p return tos ; 
0x757b488b06e0    498b06                  mov rax, [r14]                                         
0x757b488b06e3    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b06e7    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b06eb    498906                  mov [r14], rax                                         
 ..  not dup n store n @ dup p return tos ; 
0x757b488b06ee    c3                      ret                                                    
Word_Disassemble : word - 'tnot' :: codeSize = 101
Word : 0x0000757b484eb217 :: Compiled at : 0x0000757b488b068a
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 47.18 <::
 tnot1_assert  : ok

 tnot2_assert  : ok

 1 tnot3_assert  : ok

 0 tnot4_assert  : ok


 =============================
Bits.tnot2 <:> csl compiled word
SourceCode for Bits.tnot2 :> 
: tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
Source code file location of tnot2 : "namespaces/test/logic.csl" : 53.2 :: we are now at : namespaces/test/logic.csl : 54.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b06f4 -- code size = 98 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.tnot2 : definition = 0x0000757b488b06f4 : disassembly at namespaces/test/logic.csl : 54.19 :
0x757b488b06f4    4d897e08                mov [r14+0x8], r15                                     
0x757b488b06f8    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b06fc    4981c610000000          add r14, 0x10                                          
 ..                   : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b0703    498b47f0                mov rax, [r15-0x10]                                    
 ..               : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b0707    498b4ff8                mov rcx, [r15-0x8]                                     
 ..           : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b070b    480bc1                  or rax, rcx                                            
 ..         : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b070e    4883f800                cmp rax, 0x0                                           
0x757b488b0712    0f94c0                  setz al                                                
0x757b488b0715    480fb6c0                movzx rax, al                                          
0x757b488b0719    4983c610                add r14, 0x10                                          
0x757b488b071d    498906                  mov [r14], rax                                         
 ..     : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b0720    498946f8                mov [r14-0x8], rax                                     
0x757b488b0724    498d4708                lea rax, [r15+0x8]                                     
 .. : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b0728    488bc8                  mov rcx, rax                                           
0x757b488b072b    498b06                  mov rax, [r14]                                         
0x757b488b072e    4983ee08                sub r14, 0x8                                           
  : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x757b488b0732    488901                  mov [rcx], rax                                         
 .. ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
0x757b488b0735    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b073f    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
0x757b488b0742    498b4708                mov rax, [r15+0x8]                                     
0x757b488b0746    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b074a    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b074e    4983ee08                sub r14, 0x8                                           
 ..  n @ m @ | not dup v store p return ( v @ ) ; 
0x757b488b0752    498906                  mov [r14], rax                                         
 ..  @ | not dup v store p return ( v @ ) ; 
0x757b488b0755    c3                      ret                                                    
Word_Disassemble : word - 'tnot2' :: codeSize = 98
Word : 0x0000757b484eca27 :: Compiled at : 0x0000757b488b06f4
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 54.19 <::
 1 0
 =============================
Bits.tnot3 <:> csl compiled word
SourceCode for Bits.tnot3 :> 
: tnot3 ( n ) n @ not dup p return tos ; 
Source code file location of tnot3 : "namespaces/test/logic.csl" : 57.2 :: we are now at : namespaces/test/logic.csl : 58.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b075b -- code size = 69 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.tnot3 : definition = 0x0000757b488b075b : disassembly at namespaces/test/logic.csl : 58.19 :
0x757b488b075b    4d897e08                mov [r14+0x8], r15                                     
0x757b488b075f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0763    4981c608000000          add r14, 0x8                                           
 ..                         : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x757b488b076a    498b47f8                mov rax, [r15-0x8]                                     
 ..                     : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x757b488b076e    4883f800                cmp rax, 0x0                                           
0x757b488b0772    0f94c0                  setz al                                                
0x757b488b0775    480fb6c0                movzx rax, al                                          
0x757b488b0779    4983c610                add r14, 0x10                                          
0x757b488b077d    498906                  mov [r14], rax                                         
 ..                 : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x757b488b0780    498946f8                mov [r14-0x8], rax                                     
 ..             : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x757b488b0784    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b078e    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..           : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x757b488b0791    498b06                  mov rax, [r14]                                         
0x757b488b0794    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0798    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b079c    498906                  mov [r14], rax                                         
   : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x757b488b079f    c3                      ret                                                    
Word_Disassemble : word - 'tnot3' :: codeSize = 69
Word : 0x0000757b484ee597 :: Compiled at : 0x0000757b488b075b
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 58.19 <::
 0
 =============================
Bits.tAnd <:> csl compiled word
SourceCode for Bits.tAnd :> 
: tAnd ( n m ) n @ m @ && dup p return tos ; 
Source code file location of tAnd : "namespaces/test/logic.csl" : 61.2 :: we are now at : namespaces/test/logic.csl : 62.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b07a5 -- code size = 121 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Bits.tAnd : definition = 0x0000757b488b07a5 : disassembly at namespaces/test/logic.csl : 62.18 :
0x757b488b07a5    4d897e08                mov [r14+0x8], r15                                     
0x757b488b07a9    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b07ad    4981c608000000          add r14, 0x8                                           
 ..                        : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x757b488b07b4    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b07b8    4983c608                add r14, 0x8                                           
0x757b488b07bc    498906                  mov [r14], rax                                         
 ..                    : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x757b488b07bf    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b07c3    4983c608                add r14, 0x8                                           
0x757b488b07c7    498906                  mov [r14], rax                                         
 ..                : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x757b488b07ca    498bc6                  mov rax, r14                                           
0x757b488b07cd    4983ee08                sub r14, 0x8                                           
0x757b488b07d1    48833800                cmp qword [rax], 0x0                                   
0x757b488b07d5    7410                    jz 0x488b07e7                 < Bits.tAnd+66 >
0x757b488b07d7    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b07dc    7409                    jz 0x488b07e7                 < Bits.tAnd+66 >
0x757b488b07de    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b07e5    eb07                    jmp 0x757b488b07ee            < Bits.tAnd+73 >
0x757b488b07e7    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b07ee    0f8400000000            jz 0x757b488b07f4             < Bits.tAnd+79 >
 ..             : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x757b488b07f4    498b06                  mov rax, [r14]                                         
0x757b488b07f7    4983c608                add r14, 0x8                                           
0x757b488b07fb    498906                  mov [r14], rax                                         
 ..         : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x757b488b07fe    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b0808    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..       : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x757b488b080b    498b06                  mov rax, [r14]                                         
0x757b488b080e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0812    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b0816    4983ee08                sub r14, 0x8                                           
0x757b488b081a    498906                  mov [r14], rax                                         
 .. d ( n m ) n @ m @ && dup p return tos ; 
0x757b488b081d    c3                      ret                                                    
Word_Disassemble : word - 'tAnd' :: codeSize = 121
Word : 0x0000757b484ef6e7 :: Compiled at : 0x0000757b488b07a5
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 62.18 <::
 0 1 0  : ok

 1 1 1  : ok

 0 0 0  : ok

 0 0 1  : ok


 =============================
Bits.tNotAnd <:> csl compiled word
SourceCode for Bits.tNotAnd :> 
: tNotAnd ( n m ) n @ m @ not && dup p return tos ; 
Source code file location of tNotAnd : "namespaces/test/logic.csl" : 68.2 :: we are now at : namespaces/test/logic.csl : 69.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b0823 -- code size = 132 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Bits.tNotAnd : definition = 0x0000757b488b0823 : disassembly at namespaces/test/logic.csl : 69.21 :
0x757b488b0823    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0827    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b082b    4981c608000000          add r14, 0x8                                           
 ..                     : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b0832    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b0836    4983c608                add r14, 0x8                                           
0x757b488b083a    498906                  mov [r14], rax                                         
 ..                 : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b083d    498b47f8                mov rax, [r15-0x8]                                     
 ..             : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b0841    4883f800                cmp rax, 0x0                                           
0x757b488b0845    0f94c0                  setz al                                                
0x757b488b0848    480fb6c0                movzx rax, al                                          
0x757b488b084c    4983c608                add r14, 0x8                                           
0x757b488b0850    498906                  mov [r14], rax                                         
 ..         : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b0853    498bc6                  mov rax, r14                                           
0x757b488b0856    4983ee08                sub r14, 0x8                                           
0x757b488b085a    48833800                cmp qword [rax], 0x0                                   
0x757b488b085e    7410                    jz 0x488b0870                 < Bits.tNotAnd+77 >
0x757b488b0860    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b0865    7409                    jz 0x488b0870                 < Bits.tNotAnd+77 >
0x757b488b0867    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b086e    eb07                    jmp 0x757b488b0877            < Bits.tNotAnd+84 >
0x757b488b0870    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b0877    0f8400000000            jz 0x757b488b087d             < Bits.tNotAnd+90 >
 ..      : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b087d    498b06                  mov rax, [r14]                                         
0x757b488b0880    4983c608                add r14, 0x8                                           
0x757b488b0884    498906                  mov [r14], rax                                         
 ..  : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b0887    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b0891    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
   : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x757b488b0894    498b06                  mov rax, [r14]                                         
0x757b488b0897    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b089b    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b089f    4983ee08                sub r14, 0x8                                           
0x757b488b08a3    498906                  mov [r14], rax                                         
 .. n m ) n @ m @ not && dup p return tos ; 
0x757b488b08a6    c3                      ret                                                    
Word_Disassemble : word - 'tNotAnd' :: codeSize = 132
Word : 0x0000757b484f0b97 :: Compiled at : 0x0000757b488b0823
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 69.21 <::
 1 tNotAnd1 1 0  : ok

 0 tNotAnd2 1 1  : ok

 0 tNotAnd3 0 0  : ok

 0 tNotAnd4 0 1  : ok


 0x0000000100000000  >  0x00000000ffffffff 1
DataStack at : namespaces/test/logic.csl : 77.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 0x00000000ffffffff  >  0x0000000100000000 0
 =============================
Logic.nt <:> csl compiled word
SourceCode for Logic.nt :> 
: nt ( n ) n @ ! ! ! return tos ; 
Source code file location of nt : "namespaces/test/logic.csl" : 80.2 :: we are now at : namespaces/test/logic.csl : 83.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b0962 -- code size = 42 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.nt : definition = 0x0000757b488b0962 : disassembly at namespaces/test/logic.csl : 83.15 :
0x757b488b0962    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0966    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b096a    4981c608000000          add r14, 0x8                                           
 ..                            : nt ( n ) n @ ! ! ! return tos ;  .. 
0x757b488b0971    498b47f8                mov rax, [r15-0x8]                                     
 ..                        : nt ( n ) n @ ! ! ! return tos ;  .. 
0x757b488b0975    4883f800                cmp rax, 0x0                                           
0x757b488b0979    0f94c0                  setz al                                                
0x757b488b097c    480fb6c0                movzx rax, al                                          
 ..                    : nt ( n ) n @ ! ! ! return tos ;  .. 
0x757b488b0980    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0984    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b0988    498906                  mov [r14], rax                                         
 ..       : nt ( n ) n @ ! ! ! return tos ;  .. 
0x757b488b098b    c3                      ret                                                    
Word_Disassemble : word - 'nt' :: codeSize = 42
Word : 0x0000757b484f4427 :: Compiled at : 0x0000757b488b0962
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 83.15 <::
 1 0 1 0 0 1 0 1 
 1 0 1 0 0 1 0 1 : above line should show
 1 0 1 0 0 1 0 1 
 1 0 1 0 0 1 0 1 : above line should show
 =============================
C_Syntax.l001 <:> csl compiled word
SourceCode for C_Syntax.l001 :> 
void l001 ( a b c d ) { if ( a || b || c || d ) return 1 ; else return 0 ; } 
Source code file location of l001 : "namespaces/test/logic.csl" : 107.10 :: we are now at : namespaces/test/logic.csl : 112.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b0b4b -- code size = 104 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l001 : definition = 0x0000757b488b0b4b : disassembly at namespaces/test/logic.csl : 112.9 :
0x757b488b0b4b    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0b4f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0b53    4981c608000000          add r14, 0x8                                           
 ..     void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0b5a    498b47e0                mov rax, [r15-0x20]                                    
0x757b488b0b5e    4883f800                cmp rax, 0x0                                           
0x757b488b0b62    0f852a000000            jnz 0x757b488b0b92            < C_Syntax.l001+71 >
   void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0b68    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b0b6c    4883f800                cmp rax, 0x0                                           
0x757b488b0b70    0f851c000000            jnz 0x757b488b0b92            < C_Syntax.l001+71 >
 .. 001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x757b488b0b76    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b0b7a    4883f800                cmp rax, 0x0                                           
0x757b488b0b7e    0f850e000000            jnz 0x757b488b0b92            < C_Syntax.l001+71 >
 ..  a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x757b488b0b84    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b0b88    4883f800                cmp rax, 0x0                                           
0x757b488b0b8c    0f840a000000            jz 0x757b488b0b9c             < C_Syntax.l001+81 >
 ..  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x757b488b0b92    b801000000              mov eax, 0x1                                           
 ..     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x757b488b0b97    e907000000              jmp 0x757b488b0ba3            < C_Syntax.l001+88 >
0x757b488b0b9c    48c7c000000000          mov rax, 0x0                                           
0x757b488b0ba3    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0ba7    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b0bab    4983ee18                sub r14, 0x18                                          
 .. c || d ) return 1  ;      else return 0 ;  } 
0x757b488b0baf    498906                  mov [r14], rax                                         
 .. d ) return 1  ;      else return 0 ;  } 
0x757b488b0bb2    c3                      ret                                                    
Word_Disassemble : word - 'l001' :: codeSize = 104
Word : 0x0000757b484f84b7 :: Compiled at : 0x0000757b488b0b4b
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 112.9 <::

 =============================
C_Syntax.l0010 <:> csl compiled word
SourceCode for C_Syntax.l0010 :> 
void l0010 ( a b c d ) { if ( a && b && c && d ) return 1 ; else return 0 ; } 
Source code file location of l0010 : "namespaces/test/logic.csl" : 123.11 :: we are now at : namespaces/test/logic.csl : 128.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b0bb8 -- code size = 230 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0010 : definition = 0x0000757b488b0bb8 : disassembly at namespaces/test/logic.csl : 128.10 :
0x757b488b0bb8    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0bbc    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0bc0    4981c608000000          add r14, 0x8                                           
 ..    void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0bc7    498b47e0                mov rax, [r15-0x20]                                    
0x757b488b0bcb    4883f800                cmp rax, 0x0                                           
0x757b488b0bcf    0f84b2000000            jz 0x757b488b0c87             < C_Syntax.l0010+207 >
  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0bd5    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b0bd9    4883f800                cmp rax, 0x0                                           
0x757b488b0bdd    0f84a4000000            jz 0x757b488b0c87             < C_Syntax.l0010+207 >
 ..  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0be3    498bc6                  mov rax, r14                                           
0x757b488b0be6    4983ee08                sub r14, 0x8                                           
0x757b488b0bea    48833800                cmp qword [rax], 0x0                                   
0x757b488b0bee    7410                    jz 0x488b0c00                 < C_Syntax.l0010+72 >
0x757b488b0bf0    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b0bf5    7409                    jz 0x488b0c00                 < C_Syntax.l0010+72 >
0x757b488b0bf7    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b0bfe    eb07                    jmp 0x757b488b0c07            < C_Syntax.l0010+79 >
0x757b488b0c00    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b0c07    747e                    jz 0x488b0c87                 < C_Syntax.l0010+207 >
0x757b488b0c09    0f1f4000                nop [rax]                                              
 .. 010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x757b488b0c0d    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b0c11    4883f800                cmp rax, 0x0                                           
0x757b488b0c15    7470                    jz 0x488b0c87                 < C_Syntax.l0010+207 >
0x757b488b0c17    0f1f4000                nop [rax]                                              
void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0c1b    498bc6                  mov rax, r14                                           
0x757b488b0c1e    4983ee08                sub r14, 0x8                                           
0x757b488b0c22    48833800                cmp qword [rax], 0x0                                   
0x757b488b0c26    7410                    jz 0x488b0c38                 < C_Syntax.l0010+128 >
0x757b488b0c28    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b0c2d    7409                    jz 0x488b0c38                 < C_Syntax.l0010+128 >
0x757b488b0c2f    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b0c36    eb07                    jmp 0x757b488b0c3f            < C_Syntax.l0010+135 >
0x757b488b0c38    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b0c3f    7446                    jz 0x488b0c87                 < C_Syntax.l0010+207 >
0x757b488b0c41    0f1f4000                nop [rax]                                              
 ..  a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x757b488b0c45    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b0c49    4883f800                cmp rax, 0x0                                           
0x757b488b0c4d    7438                    jz 0x488b0c87                 < C_Syntax.l0010+207 >
0x757b488b0c4f    0f1f4000                nop [rax]                                              
 .. 0 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x757b488b0c53    498bc6                  mov rax, r14                                           
0x757b488b0c56    4983ee08                sub r14, 0x8                                           
0x757b488b0c5a    48833800                cmp qword [rax], 0x0                                   
0x757b488b0c5e    7410                    jz 0x488b0c70                 < C_Syntax.l0010+184 >
0x757b488b0c60    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b0c65    7409                    jz 0x488b0c70                 < C_Syntax.l0010+184 >
0x757b488b0c67    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b0c6e    eb07                    jmp 0x757b488b0c77            < C_Syntax.l0010+191 >
0x757b488b0c70    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b0c77    740e                    jz 0x488b0c87                 < C_Syntax.l0010+207 >
0x757b488b0c79    0f1f4000                nop [rax]                                              
 ..  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x757b488b0c7d    b801000000              mov eax, 0x1                                           
 ..     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x757b488b0c82    e907000000              jmp 0x757b488b0c8e            < C_Syntax.l0010+214 >
0x757b488b0c87    48c7c000000000          mov rax, 0x0                                           
0x757b488b0c8e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0c92    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b0c96    4983ee18                sub r14, 0x18                                          
 .. c && d ) return 1  ;      else return 0 ;  } 
0x757b488b0c9a    498906                  mov [r14], rax                                         
 .. d ) return 1  ;      else return 0 ;  } 
0x757b488b0c9d    c3                      ret                                                    
Word_Disassemble : word - 'l0010' :: codeSize = 230
Word : 0x0000757b484fa537 :: Compiled at : 0x0000757b488b0bb8
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 128.10 <::

 =============================
C_Syntax.l0041 <:> csl compiled word
SourceCode for C_Syntax.l0041 :> 
void l0041 ( a b c ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1 ; else return 0 ; } 
Source code file location of l0041 : "namespaces/test/logic.csl" : 187.11 :: we are now at : namespaces/test/logic.csl : 192.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b0e63 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0041 : definition = 0x0000757b488b0e63 : disassembly at namespaces/test/logic.csl : 192.10 :
0x757b488b0e63    4d897e08                mov [r14+0x8], r15                                     
0x757b488b0e67    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b0e6b    4981c608000000          add r14, 0x8                                           
 ..    void l0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }  .. 
0x757b488b0e72    49837fe801              cmp qword [r15-0x18], 0x1                              
0x757b488b0e77    0f8535000000            jnz 0x757b488b0eb2            < C_Syntax.l0041+79 >
 .. ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x757b488b0e7d    49837ff001              cmp qword [r15-0x10], 0x1                              
0x757b488b0e82    0f8435000000            jz 0x757b488b0ebd             < C_Syntax.l0041+90 >
 .. 0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x757b488b0e88    498bc6                  mov rax, r14                                           
0x757b488b0e8b    4983ee08                sub r14, 0x8                                           
0x757b488b0e8f    48833800                cmp qword [rax], 0x0                                   
0x757b488b0e93    7410                    jz 0x488b0ea5                 < C_Syntax.l0041+66 >
0x757b488b0e95    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b0e9a    7409                    jz 0x488b0ea5                 < C_Syntax.l0041+66 >
0x757b488b0e9c    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b0ea3    eb07                    jmp 0x757b488b0eac            < C_Syntax.l0041+73 >
0x757b488b0ea5    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b0eac    0f8400000000            jz 0x757b488b0eb2             < C_Syntax.l0041+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x757b488b0eb2    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488b0eb7    0f850a000000            jnz 0x757b488b0ec7            < C_Syntax.l0041+100 >
 ..  && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x757b488b0ebd    b801000000              mov eax, 0x1                                           
 ..  ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x757b488b0ec2    e907000000              jmp 0x757b488b0ece            < C_Syntax.l0041+107 >
0x757b488b0ec7    48c7c000000000          mov rax, 0x0                                           
0x757b488b0ece    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b0ed2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b0ed6    4983ee10                sub r14, 0x10                                          
 .. == 1 ) ) return 1  ;      else return 0 ;  } 
0x757b488b0eda    498906                  mov [r14], rax                                         
 .. ) ) return 1  ;      else return 0 ;  } 
0x757b488b0edd    c3                      ret                                                    
Word_Disassemble : word - 'l0041' :: codeSize = 123
Word : 0x0000757b48507177 :: Compiled at : 0x0000757b488b0e63
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 192.10 <::

 =============================
C_Syntax.l0030 <:> csl compiled word
SourceCode for C_Syntax.l0030 :> 
void l0030 ( a b c d ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ; else return 0 ; } 
Source code file location of l0030 : "namespaces/test/logic.csl" : 287.11 :: we are now at : namespaces/test/logic.csl : 292.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b11a3 -- code size = 176 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0030 : definition = 0x0000757b488b11a3 : disassembly at namespaces/test/logic.csl : 292.10 :
0x757b488b11a3    4d897e08                mov [r14+0x8], r15                                     
0x757b488b11a7    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b11ab    4981c608000000          add r14, 0x8                                           
 ..  void l0030 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }  .. 
0x757b488b11b2    49837fe001              cmp qword [r15-0x20], 0x1                              
0x757b488b11b7    0f8535000000            jnz 0x757b488b11f2            < C_Syntax.l0030+79 >
 .. a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b11bd    49837fe801              cmp qword [r15-0x18], 0x1                              
0x757b488b11c2    0f8435000000            jz 0x757b488b11fd             < C_Syntax.l0030+90 >
 .. 30 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b11c8    498bc6                  mov rax, r14                                           
0x757b488b11cb    4983ee08                sub r14, 0x8                                           
0x757b488b11cf    48833800                cmp qword [rax], 0x0                                   
0x757b488b11d3    7410                    jz 0x488b11e5                 < C_Syntax.l0030+66 >
0x757b488b11d5    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b11da    7409                    jz 0x488b11e5                 < C_Syntax.l0030+66 >
0x757b488b11dc    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b11e3    eb07                    jmp 0x757b488b11ec            < C_Syntax.l0030+73 >
0x757b488b11e5    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b11ec    0f8400000000            jz 0x757b488b11f2             < C_Syntax.l0030+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b11f2    49837ff001              cmp qword [r15-0x10], 0x1                              
0x757b488b11f7    0f853f000000            jnz 0x757b488b123c            < C_Syntax.l0030+153 >
 ..  1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b11fd    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488b1202    0f8534000000            jnz 0x757b488b123c            < C_Syntax.l0030+153 >
 ..  a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b1208    498bc6                  mov rax, r14                                           
0x757b488b120b    4983ee08                sub r14, 0x8                                           
0x757b488b120f    48833800                cmp qword [rax], 0x0                                   
0x757b488b1213    7410                    jz 0x488b1225                 < C_Syntax.l0030+130 >
0x757b488b1215    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b121a    7409                    jz 0x488b1225                 < C_Syntax.l0030+130 >
0x757b488b121c    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b1223    eb07                    jmp 0x757b488b122c            < C_Syntax.l0030+137 >
0x757b488b1225    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b122c    0f840a000000            jz 0x757b488b123c             < C_Syntax.l0030+153 >
 ..  || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b1232    b801000000              mov eax, 0x1                                           
 .. | ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b1237    e907000000              jmp 0x757b488b1243            < C_Syntax.l0030+160 >
0x757b488b123c    48c7c000000000          mov rax, 0x0                                           
0x757b488b1243    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b1247    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b124b    4983ee18                sub r14, 0x18                                          
 ..  == 1 ) ) return 1 ;      else return 0 ;  } 
0x757b488b124f    498906                  mov [r14], rax                                         
 ..  ) ) return 1 ;      else return 0 ;  } 
0x757b488b1252    c3                      ret                                                    
Word_Disassemble : word - 'l0030' :: codeSize = 176
Word : 0x0000757b4851c237 :: Compiled at : 0x0000757b488b11a3
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 292.10 <::

 =============================
Logic.l0031 <:> csl compiled word
SourceCode for Logic.l0031 :> 
: l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1 } { return 0 } ifElse ; 
Source code file location of l0031 : "namespaces/test/logic.csl" : 310.2 :: we are now at : namespaces/test/logic.csl : 311.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b1258 -- code size = 222 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.l0031 : definition = 0x0000757b488b1258 : disassembly at namespaces/test/logic.csl : 311.10 :
0x757b488b1258    4d897e08                mov [r14+0x8], r15                                     
0x757b488b125c    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b1260    4981c608000000          add r14, 0x8                                           
 ..                 : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x757b488b1267    49837fe001              cmp qword [r15-0x20], 0x1                              
0x757b488b126c    0f94c0                  setz al                                                
0x757b488b126f    480fb6c0                movzx rax, al                                          
0x757b488b1273    4983c608                add r14, 0x8                                           
 ..             : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x757b488b1277    498906                  mov [r14], rax                                         
 ..        : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x757b488b127a    49837fe801              cmp qword [r15-0x18], 0x1                              
0x757b488b127f    0f94c0                  setz al                                                
0x757b488b1282    480fb6c0                movzx rax, al                                          
0x757b488b1286    4983c608                add r14, 0x8                                           
 ..    : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x757b488b128a    498906                  mov [r14], rax                                         
  : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x757b488b128d    498bc6                  mov rax, r14                                           
0x757b488b1290    4983ee08                sub r14, 0x8                                           
0x757b488b1294    48833800                cmp qword [rax], 0x0                                   
0x757b488b1298    7410                    jz 0x488b12aa                 < Logic.l0031+82 >
0x757b488b129a    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b129f    7409                    jz 0x488b12aa                 < Logic.l0031+82 >
0x757b488b12a1    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b12a8    eb07                    jmp 0x757b488b12b1            < Logic.l0031+89 >
0x757b488b12aa    49c70600000000          mov qword [r14], 0x0                                   
 .. 31 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b12b1    49837ff001              cmp qword [r15-0x10], 0x1                              
0x757b488b12b6    0f94c0                  setz al                                                
0x757b488b12b9    480fb6c0                movzx rax, al                                          
 ..  b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b12bd    488bc8                  mov rcx, rax                                           
0x757b488b12c0    498b06                  mov rax, [r14]                                         
0x757b488b12c3    4983ee08                sub r14, 0x8                                           
 .. c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b12c7    480bc1                  or rax, rcx                                            
0x757b488b12ca    0f95c0                  setnz al                                               
0x757b488b12cd    480fb6c0                movzx rax, al                                          
0x757b488b12d1    4983c608                add r14, 0x8                                           
0x757b488b12d5    498906                  mov [r14], rax                                         
 ..  ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b12d8    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488b12dd    0f94c0                  setz al                                                
0x757b488b12e0    480fb6c0                movzx rax, al                                          
0x757b488b12e4    4983c608                add r14, 0x8                                           
 ..  a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b12e8    498906                  mov [r14], rax                                         
 .. 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b12eb    498bc6                  mov rax, r14                                           
0x757b488b12ee    4983ee08                sub r14, 0x8                                           
0x757b488b12f2    48833800                cmp qword [rax], 0x0                                   
0x757b488b12f6    7410                    jz 0x488b1308                 < Logic.l0031+176 >
0x757b488b12f8    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b12fd    7409                    jz 0x488b1308                 < Logic.l0031+176 >
0x757b488b12ff    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b1306    eb07                    jmp 0x757b488b130f            < Logic.l0031+183 >
0x757b488b1308    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b130f    0f840a000000            jz 0x757b488b131f             < Logic.l0031+199 >
 .. && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b1315    b801000000              mov eax, 0x1                                           
 .. c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b131a    e907000000              jmp 0x757b488b1326            < Logic.l0031+206 >
 .. 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b131f    48c7c000000000          mov rax, 0x0                                           
0x757b488b1326    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b132a    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b132e    4983ee18                sub r14, 0x18                                          
 ..  d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x757b488b1332    498906                  mov [r14], rax                                         
 ..  } { return 1  } { return 0  } ifElse ; 
0x757b488b1335    c3                      ret                                                    
Word_Disassemble : word - 'l0031' :: codeSize = 222
Word : 0x0000757b4851fdb7 :: Compiled at : 0x0000757b488b1258
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 311.10 <::

n = 1
n = 2
n = 3
n = 4
n = 5
n = 6 
pbAssert : ok

including namespaces/test/namespace.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Test.hey <:> csl compiled word
SourceCode for Test.hey :> 
: hey test hi test2.hi hi ; 
Source code file location of hey : "namespaces/test/namespace.csl" : 20.2 :: we are now at : namespaces/test/namespace.csl : 22.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b1552 -- code size = 40 bytes
TypeSignature : 
 -----------------------------
Word :: Test.hey : definition = 0x0000757b488b1552 : disassembly at namespaces/test/namespace.csl : 22.8 :
 ..                            : hey test hi test2.hi hi ;  .. 
0x757b488b1552    49baf6148b487b750000    mov r10, 0x757b488b14f6                                
0x757b488b155c    49ffd2                  call r10                      < test.hi : 0x0000757b488b14f6 >
 ..                   : hey test hi test2.hi hi ;  .. 
0x757b488b155f    49ba24158b487b750000    mov r10, 0x757b488b1524                                
0x757b488b1569    49ffd2                  call r10                      < test2.hi : 0x0000757b488b1524 >
 ..                : hey test hi test2.hi hi ;  .. 
0x757b488b156c    49baf6148b487b750000    mov r10, 0x757b488b14f6                                
0x757b488b1576    49ffd2                  call r10                      < test.hi : 0x0000757b488b14f6 >
 ..             : hey test hi test2.hi hi ;  .. 
0x757b488b1579    c3                      ret                                                    
Word_Disassemble : word - 'hey' :: codeSize = 40
Word : 0x0000757b4852dcf7 :: Compiled at : 0x0000757b488b1552
 =============================
::> 'wdiss' was called at namespaces/test/namespace.csl 22.8 <::
 3 4 3 3 7 7 
pbAssert : ok
 
above line should show : 3 4 3 3 7 7
 3 4 3 3 7 7 
pbAssert : ok
 
above line should show : 3 4 3 3 7 7
including namespaces/test/bigNum.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 16.2 :: we are now at : namespaces/test/bigNum.csl : 17.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b15df -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x0000757b488b15df : disassembly at namespaces/test/bigNum.csl : 17.22 :
 ..                           : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x757b488b15df    498b3e                  mov rdi, [r14]                                         
 .. : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x757b488b15e2    be01000000              mov esi, 0x1                                           
 .. l ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488b15e7    4883ff01                cmp rdi, 0x1                                           
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488b15eb    7e11                    jle 0x488b15fe                < C.factorial+31 >
0x757b488b15ed    0f1f4000                nop [rax]                                              
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488b15f1    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488b15f5    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488b15f8    4883ff01                cmp rdi, 0x1                                           
0x757b488b15fc    7ff3                    jg 0x488b15f1                 < C.factorial+18 >
 .. n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488b15fe    498936                  mov [r14], rsi                                         
 .. c store n -- } while return ( rec @ ) ; 
0x757b488b1601    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 35
Word : 0x0000757b4852f137 :: Compiled at : 0x0000757b488b15df
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 17.22 <::
 5040 factorial  : ok

 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 25.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b1607 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x0000757b488b1607 : disassembly at namespaces/test/bigNum.csl : 25.14 :
0x757b488b1607    4d897e08                mov [r14+0x8], r15                                     
0x757b488b160b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b160f    4981c610000000          add r14, 0x10                                          
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  .. 
0x757b488b1616    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b161e    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1623    7e1f                    jle 0x488b1644                < C.factorial+61 >
0x757b488b1625    0f1f4000                nop [rax]                                              
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1629    498b47f8                mov rax, [r15-0x8]                                     
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b162d    498b4f08                mov rcx, [r15+0x8]                                     
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1631    480fafc1                imul rax, rcx                                          
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1635    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1639    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b163d    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488b1642    7fe5                    jg 0x488b1629                 < C.factorial+34 >
 .. @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1644    498b4708                mov rax, [r15+0x8]                                     
0x757b488b1648    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b164c    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * fac store n -- } while      return fac @ ; 
0x757b488b1650    498906                  mov [r14], rax                                         
 ..  store n -- } while      return fac @ ; 
0x757b488b1653    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 77
Word : 0x0000757b48531d87 :: Compiled at : 0x0000757b488b1607
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 25.14 <::
 5040 factorial  : ok


 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 40.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b1607 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x0000757b488b1607 : disassembly at namespaces/test/bigNum.csl : 40.14 :
0x757b488b1607    4d897e08                mov [r14+0x8], r15                                     
0x757b488b160b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b160f    4981c610000000          add r14, 0x10                                          
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  .. 
0x757b488b1616    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b161e    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1623    7e1f                    jle 0x488b1644                < C.factorial+61 >
0x757b488b1625    0f1f4000                nop [rax]                                              
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1629    498b47f8                mov rax, [r15-0x8]                                     
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b162d    498b4f08                mov rcx, [r15+0x8]                                     
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1631    480fafc1                imul rax, rcx                                          
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1635    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1639    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b163d    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488b1642    7fe5                    jg 0x488b1629                 < C.factorial+34 >
 .. @ fac @ * fac store n -- } while      return fac @ ; 
0x757b488b1644    498b4708                mov rax, [r15+0x8]                                     
0x757b488b1648    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b164c    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * fac store n -- } while      return fac @ ; 
0x757b488b1650    498906                  mov [r14], rax                                         
 ..  store n -- } while      return fac @ ; 
0x757b488b1653    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 77
Word : 0x0000757b48531d87 :: Compiled at : 0x0000757b488b1607
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 40.14 <::
 5040 5040 5040
 =============================
BigNum.qexp <:> csl compiled word
SourceCode for BigNum.qexp :> 
: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ; 
Source code file location of qexp : "namespaces/test/bigNum.csl" : 67.2 :: we are now at : namespaces/test/bigNum.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b170c -- code size = 155 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.qexp : definition = 0x0000757b488b170c : disassembly at namespaces/test/bigNum.csl : 68.17 :
 ..                              : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b170c    498b06                  mov rax, [r14]                                         
0x757b488b170f    4983c608                add r14, 0x8                                           
0x757b488b1713    498906                  mov [r14], rax                                         
 ..                          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b1716    48b8c8e11f487b750000    mov rax, 0x757b481fe1c8                                
0x757b488b1720    4983c608                add r14, 0x8                                           
0x757b488b1724    498906                  mov [r14], rax                                         
 ..                        : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b1727    49bb1038e7a65f5b0000    mov r11, 0x5b5fa6e73810                                
0x757b488b1731    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b173b    49ffd2                  call r10                      < BigNum.>= : 0x00005b5fa6e73810 >
 ..                     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b173e    498b06                  mov rax, [r14]                                         
0x757b488b1741    4983ee08                sub r14, 0x8                                           
0x757b488b1745    4883f800                cmp rax, 0x0                                           
0x757b488b1749    7446                    jz 0x488b1791                 < BigNum.qexp+133 >
0x757b488b174b    0f1f4000                nop [rax]                                              
 ..                 : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b174f    498b06                  mov rax, [r14]                                         
0x757b488b1752    4983c608                add r14, 0x8                                           
0x757b488b1756    498906                  mov [r14], rax                                         
 ..             : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b1759    49bb9035e7a65f5b0000    mov r11, 0x5b5fa6e73590                                
0x757b488b1763    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b176d    49ffd2                  call r10                      < BigNum.-- : 0x00005b5fa6e73590 >
 ..          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b1770    e897ffffff              call 0x757b488b170c           < BigNum.qexp : 0x0000757b488b170c >
 ..     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b1775    49bbf02fe7a65f5b0000    mov r11, 0x5b5fa6e72ff0                                
0x757b488b177f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1789    49ffd2                  call r10                      < BigNum.* : 0x00005b5fa6e72ff0 >
 ..   : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b178c    e915000000              jmp 0x757b488b17a6            < BigNum.qexp+154 >
  : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x757b488b1791    4983ee08                sub r14, 0x8                                           
 .. { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ; 
0x757b488b1795    48b8e8e11f487b750000    mov rax, 0x757b481fe1e8                                
0x757b488b179f    4983c608                add r14, 0x8                                           
0x757b488b17a3    498906                  mov [r14], rax                                         
 .. } { dup -- qexp * } { drop 1 } ifElse ; 
0x757b488b17a6    c3                      ret                                                    
Word_Disassemble : word - 'qexp' :: codeSize = 155
Word : 0x0000757b4853a277 :: Compiled at : 0x0000757b488b170c
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 68.17 <::
  5040.00000000000000000000000000000000
 3 ! =   6.00000000000000000000000000000000

 64 ! =   126886932185884165437806897585122925290119029064705209778508545103477590511637067401789440.00000000000000000000000000000000

 1000 ! =   402387260077093317429838470612651212102966544163507701660266720704119769806989908398209100071577186893068783090923128165735185588027950353406889129247368414891358045299136715953285063420682021387062794693734409198431464246127206235813045990002520274575909913104326478290225140523401539128692178502019758932379457660249046286531112392122380536653533830469747019332630736468271962539511539517441084091548395205048568212151444266888000138311891331566327132041056785317671646218089496261058757458787888541256427910203949128089206098055125528721518540745206161392721407919025351918548714416743327782559176825452026920939896650865615375932384088669573776686670230120401967406703221961478508625793738568876894309533382821706462209404383271115048542505623589393244859172067791463260443310322632277086216651948161974359681932191356240096436367728220552696578891140360197109166205168814488843752507533608852420430013930971847404190565644080893716664167484606779509284725356307607453587140866090513556602389786314751645178165892536096487015707711106075548237758750720237969870741884999152710615300248006635156934216386533604180800310044427576766526698205875054102420138835953783455601875460666959726091571753923250888678519341775500944897553109652505576219868712943936816004071499019660567823510797715276436660145634137500784272753784426136757887964608313021469311145437608977653284416534488769657576551428116889055034143916030868893389979589311091787747753219895109769658109225123470666446036735269784453370721503321062189796734101265733985144495303980387714235857934638061903831020065022291748914637789230739688113987278630835326137898889409963697611934221880018811713177314813564661145933534317386414684061553856935609663369047123517526541585122825292881833314108423140887719392737182402316020908137071516792711706047934013431336843979924451761308238654898682984005419308645871979362328241353332225797576735874429116813731278034586920918899118608957379765314107649804799427092368500214215026155655045463410885162072371026890934825997956670061525624894885363999426927042531844766438019218864096423481135872477323129779559975108350645074636085739110547195349803925936614194372873277654120733612780634323002524104511888215344901671044835044792618211134128152728410000993830277064175810066870964517723058282768208805399871089529259410156036114796318882403031559180723928162345304700421054310769024829129647665165341148171035020178261641554401108640147151436811311148320263879332249366165087443125790648495729573323524293680134965188784846657625841212990509177684364910061642842112.00000000000000000000000000000000

 =============================
BigNum.aexp <:> csl compiled word
SourceCode for BigNum.aexp :> 
: aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
Source code file location of aexp : "namespaces/test/bigNum.csl" : 77.2 :: we are now at : namespaces/test/bigNum.csl : 78.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b17bb -- code size = 155 bytes
TypeSignature : BigNum -> BigNum 
 -----------------------------
Word :: BigNum.aexp : definition = 0x0000757b488b17bb : disassembly at namespaces/test/bigNum.csl : 78.17 :
 ..                   : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b17bb    498b06                  mov rax, [r14]                                         
0x757b488b17be    4983c608                add r14, 0x8                                           
0x757b488b17c2    498906                  mov [r14], rax                                         
 ..               : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b17c5    48b808e21f487b750000    mov rax, 0x757b481fe208                                
0x757b488b17cf    4983c608                add r14, 0x8                                           
0x757b488b17d3    498906                  mov [r14], rax                                         
 ..             : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b17d6    49bbb037e7a65f5b0000    mov r11, 0x5b5fa6e737b0                                
0x757b488b17e0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b17ea    49ffd2                  call r10                      < BigNum.<= : 0x00005b5fa6e737b0 >
 ..          : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b17ed    498b06                  mov rax, [r14]                                         
0x757b488b17f0    4983ee08                sub r14, 0x8                                           
0x757b488b17f4    4883f800                cmp rax, 0x0                                           
0x757b488b17f8    741e                    jz 0x488b1818                 < BigNum.aexp+93 >
0x757b488b17fa    0f1f4000                nop [rax]                                              
 ..      : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b17fe    4983ee08                sub r14, 0x8                                           
 .. : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b1802    48b828e21f487b750000    mov rax, 0x757b481fe228                                
0x757b488b180c    4983c608                add r14, 0x8                                           
0x757b488b1810    498906                  mov [r14], rax                                         
  : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x757b488b1813    e93d000000              jmp 0x757b488b1855            < BigNum.aexp+154 >
 ..  ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x757b488b1818    498b06                  mov rax, [r14]                                         
0x757b488b181b    4983c608                add r14, 0x8                                           
0x757b488b181f    498906                  mov [r14], rax                                         
 .. t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x757b488b1822    49bb9035e7a65f5b0000    mov r11, 0x5b5fa6e73590                                
0x757b488b182c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1836    49ffd2                  call r10                      < BigNum.-- : 0x00005b5fa6e73590 >
 .. .N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x757b488b1839    e87dffffff              call 0x757b488b17bb           < BigNum.aexp : 0x0000757b488b17bb >
 .. { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x757b488b183e    49bbf02fe7a65f5b0000    mov r11, 0x5b5fa6e72ff0                                
0x757b488b1848    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1852    49ffd2                  call r10                      < BigNum.* : 0x00005b5fa6e72ff0 >
 .. } { drop 1 } { dup -- aexp * } ifElse ; 
0x757b488b1855    c3                      ret                                                    
Word_Disassemble : word - 'aexp' :: codeSize = 155
Word : 0x0000757b4853bd77 :: Compiled at : 0x0000757b488b17bb
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 78.17 <::

 =============================
BigNum.bexp <:> csl compiled word
SourceCode for BigNum.bexp :> 
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
Source code file location of bexp : "namespaces/test/bigNum.csl" : 79.2 :: we are now at : namespaces/test/bigNum.csl : 81.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b185b -- code size = 203 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexp : definition = 0x0000757b488b185b : disassembly at namespaces/test/bigNum.csl : 81.9 :
0x757b488b185b    4d897e08                mov [r14+0x8], r15                                     
0x757b488b185f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b1863    4981c608000000          add r14, 0x8                                           
 ..                        : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b186a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b186e    4983c608                add r14, 0x8                                           
0x757b488b1872    498906                  mov [r14], rax                                         
 ..                    : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b1875    48b848e21f487b750000    mov rax, 0x757b481fe248                                
0x757b488b187f    4983c608                add r14, 0x8                                           
0x757b488b1883    498906                  mov [r14], rax                                         
0x757b488b1886    49bbb037e7a65f5b0000    mov r11, 0x5b5fa6e737b0                                
0x757b488b1890    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b189a    49ffd2                  call r10                      < BigNum.<= : 0x00005b5fa6e737b0 >
 ..               : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b189d    498b06                  mov rax, [r14]                                         
0x757b488b18a0    4983ee08                sub r14, 0x8                                           
0x757b488b18a4    4883f800                cmp rax, 0x0                                           
0x757b488b18a8    741a                    jz 0x488b18c4                 < BigNum.bexp+105 >
0x757b488b18aa    0f1f4000                nop [rax]                                              
 ..           : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b18ae    48b868e21f487b750000    mov rax, 0x757b481fe268                                
0x757b488b18b8    4983c608                add r14, 0x8                                           
0x757b488b18bc    498906                  mov [r14], rax                                         
 ..         : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b18bf    e953000000              jmp 0x757b488b1917            < BigNum.bexp+188 >
 ..     : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b18c4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b18c8    4983c610                add r14, 0x10                                          
0x757b488b18cc    498906                  mov [r14], rax                                         
 .. : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b18cf    498946f8                mov [r14-0x8], rax                                     
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x757b488b18d3    48b888e21f487b750000    mov rax, 0x757b481fe288                                
0x757b488b18dd    4983c608                add r14, 0x8                                           
0x757b488b18e1    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x757b488b18e4    49bb3031e7a65f5b0000    mov r11, 0x5b5fa6e73130                                
0x757b488b18ee    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b18f8    49ffd2                  call r10                      < BigNum.- : 0x00005b5fa6e73130 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x757b488b18fb    e85bffffff              call 0x757b488b185b           < BigNum.bexp : 0x0000757b488b185b >
0x757b488b1900    49bbf02fe7a65f5b0000    mov r11, 0x5b5fa6e72ff0                                
0x757b488b190a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1914    49ffd2                  call r10                      < BigNum.* : 0x00005b5fa6e72ff0 >
 .. } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x757b488b1917    498b06                  mov rax, [r14]                                         
0x757b488b191a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b191e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b1922    498906                  mov [r14], rax                                         
 ..  @ dup 1 - bexp * } ifElse return tos ; 
0x757b488b1925    c3                      ret                                                    
Word_Disassemble : word - 'bexp' :: codeSize = 203
Word : 0x0000757b4853d8e7 :: Compiled at : 0x0000757b488b185b
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.9 <::

 =============================
BigNum.bexp0 <:> csl compiled word
SourceCode for BigNum.bexp0 :> 
: bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
Source code file location of bexp0 : "namespaces/test/bigNum.csl" : 80.2 :: we are now at : namespaces/test/bigNum.csl : 81.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b192b -- code size = 186 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexp0 : definition = 0x0000757b488b192b : disassembly at namespaces/test/bigNum.csl : 81.19 :
0x757b488b192b    4d897e08                mov [r14+0x8], r15                                     
0x757b488b192f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b1933    4981c608000000          add r14, 0x8                                           
 ..                       : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b193a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b193e    4983c608                add r14, 0x8                                           
0x757b488b1942    498906                  mov [r14], rax                                         
 ..                   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b1945    48b8a8e21f487b750000    mov rax, 0x757b481fe2a8                                
0x757b488b194f    4983c608                add r14, 0x8                                           
0x757b488b1953    498906                  mov [r14], rax                                         
 ..                 : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b1956    49bbb037e7a65f5b0000    mov r11, 0x5b5fa6e737b0                                
0x757b488b1960    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b196a    49ffd2                  call r10                      < BigNum.<= : 0x00005b5fa6e737b0 >
 ..              : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b196d    498b06                  mov rax, [r14]                                         
0x757b488b1970    4983ee08                sub r14, 0x8                                           
0x757b488b1974    4883f800                cmp rax, 0x0                                           
0x757b488b1978    741a                    jz 0x488b1994                 < BigNum.bexp0+105 >
0x757b488b197a    0f1f4000                nop [rax]                                              
 ..          : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b197e    48b8c8e21f487b750000    mov rax, 0x757b481fe2c8                                
0x757b488b1988    4983c608                add r14, 0x8                                           
0x757b488b198c    498906                  mov [r14], rax                                         
 ..        : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b198f    e942000000              jmp 0x757b488b19d6            < BigNum.bexp0+171 >
 ..    : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b1994    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b1998    4983c610                add r14, 0x10                                          
0x757b488b199c    498906                  mov [r14], rax                                         
   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x757b488b199f    498946f8                mov [r14-0x8], rax                                     
 .. p0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x757b488b19a3    49bb9035e7a65f5b0000    mov r11, 0x5b5fa6e73590                                
0x757b488b19ad    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b19b7    49ffd2                  call r10                      < BigNum.-- : 0x00005b5fa6e73590 >
 .. ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x757b488b19ba    e86cffffff              call 0x757b488b192b           < BigNum.bexp0 : 0x0000757b488b192b >
 .. { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x757b488b19bf    49bbf02fe7a65f5b0000    mov r11, 0x5b5fa6e72ff0                                
0x757b488b19c9    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b19d3    49ffd2                  call r10                      < BigNum.* : 0x00005b5fa6e72ff0 >
 .. } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x757b488b19d6    498b06                  mov rax, [r14]                                         
0x757b488b19d9    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b19dd    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b19e1    498906                  mov [r14], rax                                         
 ..  @ dup -- bexp0 * } ifElse return tos ; 
0x757b488b19e4    c3                      ret                                                    
Word_Disassemble : word - 'bexp0' :: codeSize = 186
Word : 0x0000757b4853fb17 :: Compiled at : 0x0000757b488b192b
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.19 <::
  5040.00000000000000000000000000000000  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000  40320.00000000000000000000000000000000
  5040.00000000000000000000000000000000  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000
 =============================
BigNum.!! <:> csl compiled word
SourceCode for BigNum.!! :> 
: !! ! p nl ; 
Source code file location of !! : "namespaces/test/bigNum.csl" : 91.2 :: we are now at : namespaces/test/bigNum.csl : 92.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b19f9 -- code size = 50 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.!! : definition = 0x0000757b488b19f9 : disassembly at namespaces/test/bigNum.csl : 92.15 :
 ..                                  : !! ! p nl ;  .. 
0x757b488b19f9    49ba2b198b487b750000    mov r10, 0x757b488b192b                                
0x757b488b1a03    49ffd2                  call r10                      < BigNum.bexp0 : 0x0000757b488b192b >
 ..                                : !! ! p nl ;  .. 
0x757b488b1a06    49ba9eca8a487b750000    mov r10, 0x757b488aca9e                                
0x757b488b1a10    49ffd2                  call r10                      < BigNum.fprint : 0x0000757b488aca9e >
 ..                              : !! ! p nl ;  .. 
0x757b488b1a13    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b1a1d    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1a27    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..                           : !! ! p nl ;  .. 
0x757b488b1a2a    c3                      ret                                                    
Word_Disassemble : word - '!!' :: codeSize = 50
Word : 0x0000757b48541d47 :: Compiled at : 0x0000757b488b19f9
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 92.15 <::
  5040.00000000000000000000000000000000
  40320.00000000000000000000000000000000
  40320.00000000000000000000000000000000

 =============================
BigNum.bexpl <:> csl compiled word
SourceCode for BigNum.bexpl :> 
: bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
Source code file location of bexpl : "namespaces/test/bigNum.csl" : 101.2 :: we are now at : namespaces/test/bigNum.csl : 102.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b1a30 -- code size = 203 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexpl : definition = 0x0000757b488b1a30 : disassembly at namespaces/test/bigNum.csl : 102.10 :
0x757b488b1a30    4d897e08                mov [r14+0x8], r15                                     
0x757b488b1a34    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b1a38    4981c608000000          add r14, 0x8                                           
 ..                       : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a3f    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b1a43    4983c608                add r14, 0x8                                           
0x757b488b1a47    498906                  mov [r14], rax                                         
 ..                   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a4a    48b8e8e21f487b750000    mov rax, 0x757b481fe2e8                                
0x757b488b1a54    4983c608                add r14, 0x8                                           
0x757b488b1a58    498906                  mov [r14], rax                                         
 ..                 : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a5b    49bbb037e7a65f5b0000    mov r11, 0x5b5fa6e737b0                                
0x757b488b1a65    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1a6f    49ffd2                  call r10                      < BigNum.<= : 0x00005b5fa6e737b0 >
 ..              : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a72    498b06                  mov rax, [r14]                                         
0x757b488b1a75    4983ee08                sub r14, 0x8                                           
0x757b488b1a79    4883f800                cmp rax, 0x0                                           
0x757b488b1a7d    741a                    jz 0x488b1a99                 < BigNum.bexpl+105 >
0x757b488b1a7f    0f1f4000                nop [rax]                                              
 ..          : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a83    48b808e31f487b750000    mov rax, 0x757b481fe308                                
0x757b488b1a8d    4983c608                add r14, 0x8                                           
0x757b488b1a91    498906                  mov [r14], rax                                         
 ..        : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a94    e953000000              jmp 0x757b488b1aec            < BigNum.bexpl+188 >
 ..    : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1a99    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b1a9d    4983c610                add r14, 0x10                                          
0x757b488b1aa1    498906                  mov [r14], rax                                         
   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x757b488b1aa4    498946f8                mov [r14-0x8], rax                                     
 .. pl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x757b488b1aa8    48b828e31f487b750000    mov rax, 0x757b481fe328                                
0x757b488b1ab2    4983c608                add r14, 0x8                                           
0x757b488b1ab6    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x757b488b1ab9    49bb3031e7a65f5b0000    mov r11, 0x5b5fa6e73130                                
0x757b488b1ac3    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1acd    49ffd2                  call r10                      < BigNum.- : 0x00005b5fa6e73130 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x757b488b1ad0    e85bffffff              call 0x757b488b1a30           < BigNum.bexpl : 0x0000757b488b1a30 >
 ..  n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x757b488b1ad5    49bbf02fe7a65f5b0000    mov r11, 0x5b5fa6e72ff0                                
0x757b488b1adf    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1ae9    49ffd2                  call r10                      < BigNum.* : 0x00005b5fa6e72ff0 >
 ..  { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x757b488b1aec    498b06                  mov rax, [r14]                                         
0x757b488b1aef    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b1af3    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b1af7    498906                  mov [r14], rax                                         
 .. @ dup 1 - bexpl * } ifElse return tos ; 
0x757b488b1afa    c3                      ret                                                    
Word_Disassemble : word - 'bexpl' :: codeSize = 203
Word : 0x0000757b485425b7 :: Compiled at : 0x0000757b488b1a30
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 102.10 <::
  5040.00000000000000000000000000000000
 starting BigNum
  0.33333333333333331482961625624739  1.73205080756887719317660412343685  2.99999999999999955591079014993738  9.00000000000000000000000000000000  : should be 9
 
fib  200.00000000000000000000000000000000 =  280571172992510158789853658433108939112448.00000000000000000000000000000000
 =============================
BigNum.tfib3 <:> csl compiled word
SourceCode for BigNum.tfib3 :> 
: tfib3 ( n | m ) "locals fibBN : " ps { m 1 = } { m @ n @ <= } { m 1 += } { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } for ; 
Source code file location of tfib3 : "namespaces/test/bigNum.csl" : 129.2 :: we are now at : namespaces/test/bigNum.csl : 135.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x488b1d09 -- code size = 386 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.tfib3 : definition = 0x0000757b488b1d09 : disassembly at namespaces/test/bigNum.csl : 135.10 :
0x757b488b1d09    4d897e08                mov [r14+0x8], r15                                     
0x757b488b1d0d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b1d11    4981c610000000          add r14, 0x10                                          
0x757b488b1d18    48b8a55d10487b750000    mov rax, 0x757b48105da5       < string : 'locals fibBN : ' >
0x757b488b1d22    4983c608                add r14, 0x8                                           
0x757b488b1d26    498906                  mov [r14], rax                                         
: tfib3 ( n | m )       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," .. 
0x757b488b1d29    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b1d33    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }   .. 
0x757b488b1d36    49ba28e41f487b750000    mov r10, 0x757b481fe428                                
0x757b488b1d40    4d895708                mov [r15+0x8], r10                                     
 .. "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      fo .. 
0x757b488b1d44    498b4708                mov rax, [r15+0x8]                                     
0x757b488b1d48    4983c608                add r14, 0x8                                           
0x757b488b1d4c    498906                  mov [r14], rax                                         
 .. als fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d4f    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b1d53    4983c608                add r14, 0x8                                           
0x757b488b1d57    498906                  mov [r14], rax                                         
 .. fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d5a    49bbb037e7a65f5b0000    mov r11, 0x5b5fa6e737b0                                
0x757b488b1d64    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1d6e    49ffd2                  call r10                      < BigNum.<= : 0x00005b5fa6e737b0 >
 .. BN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d71    498b06                  mov rax, [r14]                                         
0x757b488b1d74    4983ee08                sub r14, 0x8                                           
0x757b488b1d78    4883f800                cmp rax, 0x0                                           
0x757b488b1d7c    0f84fc000000            jz 0x757b488b1e7e             < BigNum.tfib3+373 >
 .. = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d82    498b4708                mov rax, [r15+0x8]                                     
0x757b488b1d86    4983c610                add r14, 0x10                                          
0x757b488b1d8a    498906                  mov [r14], rax                                         
 .. { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d8d    498946f8                mov [r14-0x8], rax                                     
 .. @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d91    49ba9eca8a487b750000    mov r10, 0x757b488aca9e                                
0x757b488b1d9b    49ffd2                  call r10                      < BigNum.fprint : 0x0000757b488aca9e >
 .. n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1d9e    48b8d15d10487b750000    mov rax, 0x757b48105dd1       < string : ' : ' >
0x757b488b1da8    4983c608                add r14, 0x8                                           
0x757b488b1dac    498906                  mov [r14], rax                                         
 ..  } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1daf    49bbb0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfb0                                
0x757b488b1db9    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1dc3    49ffd2                  call r10                      < Io.printString : 0x00005b5fa6e9dfb0 >
 ..  m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1dc6    49bad81b8b487b750000    mov r10, 0x757b488b1bd8                                
0x757b488b1dd0    49ffd2                  call r10                      < BigNum.fibBN : 0x0000757b488b1bd8 >
 .. =  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1dd3    49ba9eca8a487b750000    mov r10, 0x757b488aca9e                                
0x757b488b1ddd    49ffd2                  call r10                      < BigNum.fprint : 0x0000757b488aca9e >
 ..       { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1de0    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b1de4    4983c608                add r14, 0x8                                           
0x757b488b1de8    498906                  mov [r14], rax                                         
 ..   { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1deb    498b4708                mov rax, [r15+0x8]                                     
0x757b488b1def    4983c608                add r14, 0x8                                           
0x757b488b1df3    498906                  mov [r14], rax                                         
 .. m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1df6    49bbe037e7a65f5b0000    mov r11, 0x5b5fa6e737e0                                
0x757b488b1e00    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1e0a    49ffd2                  call r10                      < BigNum.> : 0x00005b5fa6e737e0 >
 .. @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e0d    498b06                  mov rax, [r14]                                         
0x757b488b1e10    4983ee08                sub r14, 0x8                                           
0x757b488b1e14    4883f800                cmp rax, 0x0                                           
0x757b488b1e18    742c                    jz 0x488b1e46                 < BigNum.tfib3+317 >
0x757b488b1e1a    0f1f4000                nop [rax]                                              
 .. p p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e1e    48b8df5d10487b750000    mov rax, 0x757b48105ddf       < string : ',' >
0x757b488b1e28    4983c608                add r14, 0x8                                           
0x757b488b1e2c    498906                  mov [r14], rax                                         
 .. " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e2f    49bbb0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfb0                                
0x757b488b1e39    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1e43    49ffd2                  call r10                      < Io.printString : 0x00005b5fa6e9dfb0 >
 ..  " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e46    498d4708                lea rax, [r15+0x8]                                     
0x757b488b1e4a    4983c608                add r14, 0x8                                           
0x757b488b1e4e    498906                  mov [r14], rax                                         
 ..  ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e51    48b848e41f487b750000    mov rax, 0x757b481fe448                                
0x757b488b1e5b    4983c608                add r14, 0x8                                           
0x757b488b1e5f    498906                  mov [r14], rax                                         
 .. s      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e62    49bb7032e7a65f5b0000    mov r11, 0x5b5fa6e73270                                
0x757b488b1e6c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b1e76    49ffd2                  call r10                      < BigNum.+= : 0x00005b5fa6e73270 >
 ..    { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e79    e9c6feffff              jmp 0x757b488b1d44            < BigNum.tfib3+59 >
0x757b488b1e7e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b1e82    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b1e86    4983ee08                sub r14, 0x8                                           
 ..  @ m @ > } { "," _ps } if2 }      for ;  .. 
0x757b488b1e8a    c3                      ret                                                    
Word_Disassemble : word - 'tfib3' :: codeSize = 386
Word : 0x0000757b4854bee7 :: Compiled at : 0x0000757b488b1d09
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 135.10 <::


 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000

 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000
  52.53799999999999670308170607313514  11.40999999999999836575170775176957
 51
 =============================
void.ctof <:> csl compiled word
SourceCode for void.ctof :> 
: ctof ( c ) c 18 *= c 10 /= c 32 += nl return ( c @ ) ; 
Source code file location of ctof : "namespaces/test/bigNum.csl" : 145.2 :: we are now at : namespaces/test/bigNum.csl : 146.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2167 -- code size = 99 bytes
TypeSignature : 
 -----------------------------
Word :: void.ctof : definition = 0x0000757b488b2167 : disassembly at namespaces/test/bigNum.csl : 146.9 :
0x757b488b2167    4d897e08                mov [r14+0x8], r15                                     
0x757b488b216b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b216f    4981c608000000          add r14, 0x8                                           
 ..                        : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b2176    b912000000              mov ecx, 0x12                                          
 ..                          : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b217b    498b47f8                mov rax, [r15-0x8]                                     
 ..                     : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b217f    480fafc1                imul rax, rcx                                          
0x757b488b2183    498947f8                mov [r15-0x8], rax                                     
 ..               : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b2187    b90a000000              mov ecx, 0xa                                           
 ..                 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b218c    498b47f8                mov rax, [r15-0x8]                                     
 ..            : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b2190    48c7c200000000          mov rdx, 0x0                                           
0x757b488b2197    48f7f9                  idiv rcx                                               
0x757b488b219a    498947f8                mov [r15-0x8], rax                                     
 ..         : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b219e    498347f820              add qword [r15-0x8], 0x20                              
 .. : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b21a3    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b21ad    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b21b7    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x757b488b21ba    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b21be    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b21c2    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  c 18 *=  c 10 /= c 32 += nl return ( c @ ) ; 
0x757b488b21c6    498906                  mov [r14], rax                                         
 .. *=  c 10 /= c 32 += nl return ( c @ ) ; 
0x757b488b21c9    c3                      ret                                                    
Word_Disassemble : word - 'ctof' :: codeSize = 99
Word : 0x0000757b48556317 :: Compiled at : 0x0000757b488b2167
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 146.9 <::
 11
 =============================
void.ftoc <:> csl compiled word
SourceCode for void.ftoc :> 
: ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ; 
Source code file location of ftoc : "namespaces/test/bigNum.csl" : 147.2 :: we are now at : namespaces/test/bigNum.csl : 148.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b21cf -- code size = 76 bytes
TypeSignature : 
 -----------------------------
Word :: void.ftoc : definition = 0x0000757b488b21cf : disassembly at namespaces/test/bigNum.csl : 148.9 :
0x757b488b21cf    4d897e08                mov [r14+0x8], r15                                     
0x757b488b21d3    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b21d7    4981c608000000          add r14, 0x8                                           
 ..                          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21de    49836ff820              sub qword [r15-0x8], 0x20                              
 ..                : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21e3    b90a000000              mov ecx, 0xa                                           
 ..                  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21e8    498b47f8                mov rax, [r15-0x8]                                     
 ..             : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21ec    480fafc1                imul rax, rcx                                          
0x757b488b21f0    498947f8                mov [r15-0x8], rax                                     
 ..        : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21f4    b912000000              mov ecx, 0x12                                          
 ..          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21f9    498b47f8                mov rax, [r15-0x8]                                     
 ..     : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b21fd    48c7c200000000          mov rdx, 0x0                                           
0x757b488b2204    48f7f9                  idiv rcx                                               
0x757b488b2207    498947f8                mov [r15-0x8], rax                                     
 ..  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x757b488b220b    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b220f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b2213    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ; 
0x757b488b2217    498906                  mov [r14], rax                                         
 ..  32 -= f 10 *= f 18 /= return ( f @ ) ; 
0x757b488b221a    c3                      ret                                                    
Word_Disassemble : word - 'ftoc' :: codeSize = 76
Word : 0x0000757b48558037 :: Compiled at : 0x0000757b488b21cf
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 148.9 <::
 fibc2

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :> 
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
Source code file location of fibc2 : "namespaces/test/bigNum.csl" : 155.100 :: we are now at : namespaces/test/bigNum.csl : 156.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488b2220 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x0000757b488b2220 : disassembly at namespaces/test/bigNum.csl : 156.10 :
0x757b488b2220    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2224    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b2228    4981c608000000          add r14, 0x8                                           
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x757b488b222f    49837ff802              cmp qword [r15-0x8], 0x2                               
  (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x757b488b2234    7d14                    jge 0x488b224a                < LispDefines.fibc2+42 >
0x757b488b2236    0f1f4000                nop [rax]                                              
 .. e fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b223a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b223e    4983c608                add r14, 0x8                                           
0x757b488b2242    498906                  mov [r14], rax                                         
 .. bc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b2245    e945000000              jmp 0x757b488b228f            < LispDefines.fibc2+111 >
 ..  ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b224a    498b47f8                mov rax, [r15-0x8]                                     
 ..  ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b224e    b901000000              mov ecx, 0x1                                           
 ..  ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b2253    482bc1                  sub rax, rcx                                           
0x757b488b2256    4983c608                add r14, 0x8                                           
0x757b488b225a    498906                  mov [r14], rax                                         
 .. mbda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b225d    e8beffffff              call 0x757b488b2220           < LispDefines.fibc2 : 0x0000757b488b2220 >
 .. n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b2262    498b47f8                mov rax, [r15-0x8]                                     
 .. ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b2266    b902000000              mov ecx, 0x2                                           
 .. ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b226b    482bc1                  sub rax, rcx                                           
0x757b488b226e    4983c608                add r14, 0x8                                           
0x757b488b2272    498906                  mov [r14], rax                                         
 .. ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x757b488b2275    e8a6ffffff              call 0x757b488b2220           < LispDefines.fibc2 : 0x0000757b488b2220 >
0x757b488b227a    498b0e                  mov rcx, [r14]                                         
0x757b488b227d    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b2281    4983ee10                sub r14, 0x10                                          
0x757b488b2285    4803c1                  add rax, rcx                                           
0x757b488b2288    4983c608                add r14, 0x8                                           
0x757b488b228c    498906                  mov [r14], rax                                         
0x757b488b228f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b2293    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b2297    498906                  mov [r14], rax                                         
 ..        (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x757b488b229a    c3                      ret                                                    
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x0000757b48303330 :: Compiled at : 0x0000757b488b2220
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 156.10 <::
 6765
 fibbc
 6765
 x7

 ( 1 2 3 x7 )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 7 8 9 45 )

 ( 1 2 3 7 8 9 45 )

 77
 77
 77
 alist
 ( 1 2 3 7 8 9 45 )
 yfac45
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac

 =============================
LispDefines.yfac <:> variableyfac <:> lambdaCalculus defined word
SourceCode for LispDefines.yfac :> 
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1))))))
Source code file location of yfac : "namespaces/test/bigNum.csl" : 218.65 :: we are now at : namespaces/test/bigNum.csl : 219.21
Lambda Calculus word : interpreted not compiled
TypeSignature : 
 -----------------------------
Word :: LispDefines.yfac : definition = 0x0000000000000000 : disassembly at namespaces/test/bigNum.csl : 219.21 :
Word : 0x0000757b483bc7e8 :: Compiled at : 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 219.21 <::
 3628800

 yfacc
 3628800

 5040

 yfac
 3628800

 yfacc
 3628800

 5040

 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ff
 ( ( /\ "let" 129172344452593 ) 6 )
 ( ( /\ "let" 129172344452593 ) ( ( /\ y 129172350466109 ) 4 ) )
 7

 h36
 ( n09 my6 n09 my6 n09 n09 my6 my6 )
 
 should show : ( n09 my6 n09 my6 n09 n09 my6 my6 )
 n09
 my6
 ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 
 should show : ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 id
 ( "the" "the" b b )
 id1
 ( 7 7 11 11 7 7 )
 swch
 ( 11 7 )
 swch2
 ( ( 7 11 ) ( 11 7 ) )
 id2
 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) )
 id3
 ( 7 7 11 7 11 11 7 7 )
 swch3
 id4
 ( 7 7 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) ) 11 11 7 7 )
 x
 ( ( 3 4 ) ( 4 3 ) )
 x
 7
 x
 11
 7
 7
 7
 7

 namespaces/test/bigNum.csl 285.9
'7'
'( ( lambda ( a b ) ( + a b ) ) 3 4 )'

'( ( lambda ( a b ) ( + a b ) ) 3 4 )'
'7'

'7'

 =============================
List.bexp3 <:> csl compiled word
SourceCode for List.bexp3 :> 
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 * } { 1 } ifElse ; 
Source code file location of bexp3 : "namespaces/test/bigNum.csl" : 289.2 :: we are now at : namespaces/test/bigNum.csl : 290.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b234c -- code size = 107 bytes
 -----------------------------
Word :: List.bexp3 : definition = 0x0000757b488b234c : disassembly at namespaces/test/bigNum.csl : 290.18 :
0x757b488b234c    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2350    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b2354    4981c608000000          add r14, 0x8                                           
0x757b488b235b    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488b2360    7e3d                    jle 0x488b239f                < List.bexp3+83 >
0x757b488b2362    0f1f4000                nop [rax]                                              
0x757b488b2366    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b236a    4983c608                add r14, 0x8                                           
0x757b488b236e    498906                  mov [r14], rax                                         
0x757b488b2371    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b2375    48ffc8                  dec rax                                                
0x757b488b2378    4983c608                add r14, 0x8                                           
0x757b488b237c    498906                  mov [r14], rax                                         
0x757b488b237f    e8c8ffffff              call 0x757b488b234c           < List.bexp3 : 0x0000757b488b234c >
0x757b488b2384    498b0e                  mov rcx, [r14]                                         
0x757b488b2387    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b238b    4983ee10                sub r14, 0x10                                          
0x757b488b238f    480fafc1                imul rax, rcx                                          
0x757b488b2393    4983c608                add r14, 0x8                                           
0x757b488b2397    498906                  mov [r14], rax                                         
0x757b488b239a    e90c000000              jmp 0x757b488b23ab            < List.bexp3+95 >
0x757b488b239f    b801000000              mov eax, 0x1                                           
0x757b488b23a4    4983c608                add r14, 0x8                                           
0x757b488b23a8    498906                  mov [r14], rax                                         
0x757b488b23ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b23af    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b23b3    498906                  mov [r14], rax                                         
0x757b488b23b6    c3                      ret                                                    
Word_Disassemble : word - 'bexp3' :: codeSize = 107
Word : 0x0000757b4856bd57 :: Compiled at : 0x0000757b488b234c
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 290.18 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word, prefix
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; } 
Source code file location of fac5 : "namespaces/test/bigNum.csl" : 293.5 :: we are now at : namespaces/test/bigNum.csl : 306.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b23cb -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x0000757b488b23cb : disassembly at namespaces/test/bigNum.csl : 306.21 :
0x757b488b23cb    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x757b488b23ce    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x757b488b23d3    4883ff01                cmp rdi, 0x1                                           
0x757b488b23d7    7e11                    jle 0x488b23ea                < C_Syntax.fac5+31 >
0x757b488b23d9    0f1f4000                nop [rax]                                              
 ..   while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x757b488b23dd    480faff7                imul rsi, rdi                                          
 .. le ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x757b488b23e1    48ffcf                  dec rdi                                                
0x757b488b23e4    4883ff01                cmp rdi, 0x1                                           
0x757b488b23e8    7ff3                    jg 0x488b23dd                 < C_Syntax.fac5+18 >
 ..       facc *= n -- ;     }     return facc ; } 
0x757b488b23ea    498936                  mov [r14], rsi                                         
 .. acc *= n -- ;     }     return facc ; } 
0x757b488b23ed    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 35
Word : 0x0000757b4856e137 :: Compiled at : 0x0000757b488b23cb
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 306.21 <::
 5040
 =============================
C_Syntax.cpow <:> csl compiled word, prefix
SourceCode for C_Syntax.cpow :> 
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
Source code file location of cpow : "namespaces/test/bigNum.csl" : 312.9 :: we are now at : namespaces/test/bigNum.csl : 314.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b23f3 -- code size = 88 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x0000757b488b23f3 : disassembly at namespaces/test/bigNum.csl : 314.9 :
0x757b488b23f3    4d897e08                mov [r14+0x8], r15                                     
0x757b488b23f7    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b23fb    4981c610000000          add r14, 0x10                                          
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }  .. 
0x757b488b2402    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b240a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b240e    4883f800                cmp rax, 0x0                                           
0x757b488b2412    7423                    jz 0x488b2437                 < C_Syntax.cpow+68 >
0x757b488b2414    0f1f4000                nop [rax]                                              
 .. ut = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b2418    498b4708                mov rax, [r15+0x8]                                     
 ..  ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b241c    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b2420    480fafc1                imul rax, rcx                                          
 .. or ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b2424    49894708                mov [r15+0x8], rax                                     
 ..  ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b2428    49836ff801              sub qword [r15-0x8], 0x1                               
 ..  { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b242d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b2431    4883f800                cmp rax, 0x0                                           
0x757b488b2435    75e1                    jnz 0x488b2418                < C_Syntax.cpow+37 >
 .. ; power -= 1 ) { out = out * base ; } return out } 
0x757b488b2437    498b4708                mov rax, [r15+0x8]                                     
0x757b488b243b    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b243f    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b2443    4983ee08                sub r14, 0x8                                           
 ..  -= 1 ) { out = out * base ; } return out } 
0x757b488b2447    498906                  mov [r14], rax                                         
 .. 1 ) { out = out * base ; } return out } 
0x757b488b244a    c3                      ret                                                    
Word_Disassemble : word - 'cpow' :: codeSize = 88
Word : 0x0000757b48570d87 :: Compiled at : 0x0000757b488b23f3
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 314.9 <::
 2 ^ 30 :  1073741824
 =============================
Root.pow0 <:> csl compiled word
SourceCode for Root.pow0 :> 
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
Source code file location of pow0 : "namespaces/test/bigNum.csl" : 318.2 :: we are now at : namespaces/test/bigNum.csl : 321.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2450 -- code size = 133 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.pow0 : definition = 0x0000757b488b2450 : disassembly at namespaces/test/bigNum.csl : 321.9 :
0x757b488b2450    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2454    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b2458    4981c610000000          add r14, 0x10                                          
 ..   : pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  .. 
0x757b488b245f    49c7470801000000        mov qword [r15+0x8], 0x1                               
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  .. 
0x757b488b2467    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. wer | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b246c    7e53                    jle 0x488b24c1                < Root.pow0+113 >
0x757b488b246e    0f1f4000                nop [rax]                                              
 .. wer @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b2472    498d4708                lea rax, [r15+0x8]                                     
 .. power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b2476    4983c608                add r14, 0x8                                           
0x757b488b247a    498906                  mov [r14], rax                                         
 .. @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b247d    498b4708                mov rax, [r15+0x8]                                     
 .. } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b2481    498b4ff0                mov rcx, [r15-0x10]                                    
0x757b488b2485    480fafc1                imul rax, rcx                                          
 .. er power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b2489    488bc8                  mov rcx, rax                                           
0x757b488b248c    498b06                  mov rax, [r14]                                         
0x757b488b248f    4983ee08                sub r14, 0x8                                           
 ..  power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b2493    488908                  mov [rax], rcx                                         
 .. | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b2496    498d47f8                lea rax, [r15-0x8]                                     
0x757b488b249a    4983c608                add r14, 0x8                                           
0x757b488b249e    498906                  mov [r14], rax                                         
 .. ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b24a1    498b47f8                mov rax, [r15-0x8]                                     
 .. 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b24a5    b901000000              mov ecx, 0x1                                           
0x757b488b24aa    482bc1                  sub rax, rcx                                           
 .. = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b24ad    488bc8                  mov rcx, rax                                           
0x757b488b24b0    498b06                  mov rax, [r14]                                         
0x757b488b24b3    4983ee08                sub r14, 0x8                                           
 .. } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b24b7    488908                  mov [rax], rcx                                         
 .. { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b24ba    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488b24bf    7fb1                    jg 0x488b2472                 < Root.pow0+34 >
 ..  1 - = } { out out @ base @ * = } for return out @ ; 
0x757b488b24c1    498b4708                mov rax, [r15+0x8]                                     
0x757b488b24c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b24c9    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b24cd    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488b24d1    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488b24d4    c3                      ret                                                    
Word_Disassemble : word - 'pow0' :: codeSize = 133
Word : 0x0000757b48574097 :: Compiled at : 0x0000757b488b2450
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 321.9 <::
 1073741824 1073741824 xyfac
 yfac
 
yfac : 10 factorial =  3628800.00000000000000000000000000000000
 yfacc
 3628800

 5040

 yfac
 3628800
 yfacc
 3628800

 5040

 fib
 fib2
 55
 55
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )

 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 379.2 :: we are now at : namespaces/test/bigNum.csl : 390.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2664 -- code size = 135 bytes
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b2664 : disassembly at namespaces/test/bigNum.csl : 390.10 :
0x757b488b2664    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2668    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b266c    4981c620000000          add r14, 0x20                                          
0x757b488b2673    49c7470800000000        mov qword [r15+0x8], 0x0                               
0x757b488b267b    49c7471000000000        mov qword [r15+0x10], 0x0                              
0x757b488b2683    49c7471801000000        mov qword [r15+0x18], 0x1                              
0x757b488b268b    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488b2690    7e49                    jle 0x488b26db                < Root.fib01+119 >
0x757b488b2692    0f1f4000                nop [rax]                                              
0x757b488b2696    498d4710                lea rax, [r15+0x10]                                    
0x757b488b269a    498b4f18                mov rcx, [r15+0x18]                                    
0x757b488b269e    488908                  mov [rax], rcx                                         
0x757b488b26a1    498d4718                lea rax, [r15+0x18]                                    
0x757b488b26a5    498b4f08                mov rcx, [r15+0x8]                                     
0x757b488b26a9    488908                  mov [rax], rcx                                         
0x757b488b26ac    498d4708                lea rax, [r15+0x8]                                     
0x757b488b26b0    4983c608                add r14, 0x8                                           
0x757b488b26b4    498906                  mov [r14], rax                                         
0x757b488b26b7    498b4710                mov rax, [r15+0x10]                                    
0x757b488b26bb    498b4f18                mov rcx, [r15+0x18]                                    
0x757b488b26bf    4803c1                  add rax, rcx                                           
0x757b488b26c2    488bc8                  mov rcx, rax                                           
0x757b488b26c5    498b06                  mov rax, [r14]                                         
0x757b488b26c8    4983ee08                sub r14, 0x8                                           
0x757b488b26cc    488908                  mov [rax], rcx                                         
0x757b488b26cf    49836ff801              sub qword [r15-0x8], 0x1                               
0x757b488b26d4    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488b26d9    7fbb                    jg 0x488b2696                 < Root.fib01+50 >
0x757b488b26db    498b4708                mov rax, [r15+0x8]                                     
0x757b488b26df    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b26e3    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b26e7    498906                  mov [r14], rax                                         
0x757b488b26ea    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 135
Word : 0x0000757b48582b47 :: Compiled at : 0x0000757b488b2664
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 390.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn REG fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 392.2 :: we are now at : namespaces/test/bigNum.csl : 403.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b26f0 -- code size = 126 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b26f0 : disassembly at namespaces/test/bigNum.csl : 403.10 :
0x757b488b26f0    4d897e08                mov [r14+0x8], r15                                     
0x757b488b26f4    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b26f8    4981c618000000          add r14, 0x18                                          
 .. 01 ( n | fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488b26ff    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488b2707    48c7c700000000          mov rdi, 0x0                                           
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488b270e    49c7471001000000        mov qword [r15+0x10], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x757b488b2716    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488b271b    7e41                    jle 0x488b275e                < Root.fib01+110 >
0x757b488b271d    0f1f4000                nop [rax]                                              
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2721    498b4f10                mov rcx, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2725    488bf9                  mov rdi, rcx                                           
0x757b488b2728    498d4710                lea rax, [r15+0x10]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b272c    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2730    488908                  mov [rax], rcx                                         
0x757b488b2733    498d4708                lea rax, [r15+0x8]                                     
0x757b488b2737    4983c608                add r14, 0x8                                           
0x757b488b273b    498906                  mov [r14], rax                                         
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b273e    498b4f10                mov rcx, [r15+0x10]                                    
0x757b488b2742    4803f9                  add rdi, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2745    488bc8                  mov rcx, rax                                           
0x757b488b2748    498b06                  mov rax, [r14]                                         
0x757b488b274b    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b274f    488938                  mov [rax], rdi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488b2752    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488b2757    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488b275c    7fc3                    jg 0x488b2721                 < Root.fib01+49 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b275e    498b4708                mov rax, [r15+0x8]                                     
0x757b488b2762    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b2766    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488b276a    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488b276d    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 126
Word : 0x0000757b48587957 :: Compiled at : 0x0000757b488b26f0
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 403.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn, REG fn1, REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 405.2 :: we are now at : namespaces/test/bigNum.csl : 416.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2773 -- code size = 111 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b2773 : disassembly at namespaces/test/bigNum.csl : 416.10 :
0x757b488b2773    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2777    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b277b    4981c610000000          add r14, 0x10                                          
 ..  | fn, REG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488b2782    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. EG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488b278a    48c7c700000000          mov rdi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488b2791    be01000000              mov esi, 0x1                                           
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x757b488b2796    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488b279b    7e35                    jle 0x488b27d2                < Root.fib01+95 >
0x757b488b279d    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27a1    488bfe                  mov rdi, rsi                                           
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27a4    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27a8    488bf1                  mov rsi, rcx                                           
0x757b488b27ab    498d4708                lea rax, [r15+0x8]                                     
0x757b488b27af    4983c608                add r14, 0x8                                           
0x757b488b27b3    498906                  mov [r14], rax                                         
0x757b488b27b6    4803fe                  add rdi, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27b9    488bc8                  mov rcx, rax                                           
0x757b488b27bc    498b06                  mov rax, [r14]                                         
0x757b488b27bf    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27c3    488938                  mov [rax], rdi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488b27c6    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488b27cb    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488b27d0    7fcf                    jg 0x488b27a1                 < Root.fib01+46 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27d2    498b4708                mov rax, [r15+0x8]                                     
0x757b488b27d6    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b27da    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488b27de    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488b27e1    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 111
Word : 0x0000757b4858c767 :: Compiled at : 0x0000757b488b2773
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 416.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | REG fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 419.2 :: we are now at : namespaces/test/bigNum.csl : 430.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b27e7 -- code size = 84 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b27e7 : disassembly at namespaces/test/bigNum.csl : 430.10 :
0x757b488b27e7    4d897e08                mov [r14+0x8], r15                                     
0x757b488b27eb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b27ef    4981c608000000          add r14, 0x8                                           
 ..  REG fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488b27f6    48c7c700000000          mov rdi, 0x0                                           
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488b27fd    48c7c600000000          mov rsi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488b2804    ba01000000              mov edx, 0x1                                           
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x757b488b2809    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488b280e    7e1f                    jle 0x488b282f                < Root.fib01+72 >
0x757b488b2810    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2814    488bf2                  mov rsi, rdx                                           
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2817    488bd7                  mov rdx, rdi                                           
0x757b488b281a    488bc7                  mov rax, rdi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b281d    4803f2                  add rsi, rdx                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2820    488bfe                  mov rdi, rsi                                           
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488b2823    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488b2828    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488b282d    7fe5                    jg 0x488b2814                 < Root.fib01+45 >
0x757b488b282f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b2833    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2837    49893e                  mov [r14], rdi                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488b283a    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 84
Word : 0x0000757b48591577 :: Compiled at : 0x0000757b488b27e7
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 430.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 433.2 :: we are now at : namespaces/test/bigNum.csl : 444.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2840 -- code size = 121 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b2840 : disassembly at namespaces/test/bigNum.csl : 444.10 :
0x757b488b2840    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2844    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b2848    4981c618000000          add r14, 0x18                                          
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            .. 
0x757b488b284f    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488b2853    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488b285b    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488b2863    be01000000              mov esi, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x757b488b2868    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488b286c    7e3b                    jle 0x488b28a9                < Root.fib01+105 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x757b488b286e    0f1f4000                nop [rax]                                              
0x757b488b2872    498d4710                lea rax, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2876    488930                  mov [rax], rsi                                         
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2879    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b287d    488bf1                  mov rsi, rcx                                           
0x757b488b2880    498d4708                lea rax, [r15+0x8]                                     
0x757b488b2884    4983c608                add r14, 0x8                                           
0x757b488b2888    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b288b    498b4710                mov rax, [r15+0x10]                                    
0x757b488b288f    4803c6                  add rax, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2892    488bc8                  mov rcx, rax                                           
0x757b488b2895    498b06                  mov rax, [r14]                                         
0x757b488b2898    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b289c    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488b289f    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488b28a3    4883ff00                cmp rdi, 0x0                                           
0x757b488b28a7    7fc9                    jg 0x488b2872                 < Root.fib01+50 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b28a9    498b4708                mov rax, [r15+0x8]                                     
0x757b488b28ad    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b28b1    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488b28b5    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488b28b8    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 121
Word : 0x0000757b48596387 :: Compiled at : 0x0000757b488b2840
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 444.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 446.2 :: we are now at : namespaces/test/bigNum.csl : 457.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b28be -- code size = 112 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b28be : disassembly at namespaces/test/bigNum.csl : 457.10 :
0x757b488b28be    4d897e08                mov [r14+0x8], r15                                     
0x757b488b28c2    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b28c6    4981c610000000          add r14, 0x10                                          
 ..                               : fib01 ( REG n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {        .. 
0x757b488b28cd    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488b28d1    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488b28d9    48c7c600000000          mov rsi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488b28e0    ba01000000              mov edx, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x757b488b28e5    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488b28e9    7e33                    jle 0x488b291e                < Root.fib01+96 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x757b488b28eb    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b28ef    488bf2                  mov rsi, rdx                                           
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b28f2    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b28f6    488bd1                  mov rdx, rcx                                           
0x757b488b28f9    498d4708                lea rax, [r15+0x8]                                     
0x757b488b28fd    4983c608                add r14, 0x8                                           
0x757b488b2901    498906                  mov [r14], rax                                         
0x757b488b2904    4803f2                  add rsi, rdx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2907    488bc8                  mov rcx, rax                                           
0x757b488b290a    498b06                  mov rax, [r14]                                         
0x757b488b290d    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2911    488930                  mov [rax], rsi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488b2914    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488b2918    4883ff00                cmp rdi, 0x0                                           
0x757b488b291c    7fd1                    jg 0x488b28ef                 < Root.fib01+49 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b291e    498b4708                mov rax, [r15+0x8]                                     
0x757b488b2922    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b2926    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488b292a    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488b292d    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 112
Word : 0x0000757b4859b197 :: Compiled at : 0x0000757b488b28be
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 457.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 459.2 :: we are now at : namespaces/test/bigNum.csl : 470.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2933 -- code size = 126 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x0000757b488b2933 : disassembly at namespaces/test/bigNum.csl : 470.10 :
0x757b488b2933    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2937    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b293b    4981c618000000          add r14, 0x18                                          
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            .. 
0x757b488b2942    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488b2946    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488b294e    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488b2956    be01000000              mov esi, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x757b488b295b    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488b295f    7e3b                    jle 0x488b299c                < Root.fib01+105 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x757b488b2961    0f1f4000                nop [rax]                                              
0x757b488b2965    498d4710                lea rax, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2969    488930                  mov [rax], rsi                                         
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b296c    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2970    488bf1                  mov rsi, rcx                                           
0x757b488b2973    498d4708                lea rax, [r15+0x8]                                     
0x757b488b2977    4983c608                add r14, 0x8                                           
0x757b488b297b    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b297e    498b4710                mov rax, [r15+0x10]                                    
0x757b488b2982    4803c6                  add rax, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b2985    488bc8                  mov rcx, rax                                           
0x757b488b2988    498b06                  mov rax, [r14]                                         
0x757b488b298b    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b298f    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488b2992    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488b2996    4883ff00                cmp rdi, 0x0                                           
0x757b488b299a    7fc9                    jg 0x488b2965                 < Root.fib01+50 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488b299c    498b4708                mov rax, [r15+0x8]                                     
0x757b488b29a0    e900000000              jmp 0x757b488b29a5            < Root.fib01+114 >
0x757b488b29a5    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b29a9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488b29ad    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488b29b0    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 126
Word : 0x0000757b4859ffa7 :: Compiled at : 0x0000757b488b2933
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 470.10 <::
 6765
including namespaces/test/classTest.csl at namespaces/test/initTest.csl : 86.41 ...
 
classTest.csl
Using Namespaces :> C Root Class Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

Pointer.size =  8

Integer size =  8

Using Namespaces :> Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 34.18 : token = class : cloneFlag = 0
Using Namespaces :> Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

Buffer size =  256

_ClassTypedef : at namespaces/test/classTest.csl : 40.3 : token = class : cloneFlag = 0
Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

DLLNode size =  16

_ClassTypedef : at namespaces/test/classTest.csl : 47.3 : token = :{ : cloneFlag = 0
DLLNode size =  18

Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 55.3 : token = :{ : cloneFlag = 0
DLLNode size =  16

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 65.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 16
Dump at : namespaces/test/classTest.csl : 66.51 :
Dump : Address = 0x0000757b481fe568 : Number = 16 :: (little endian dump)
0x0000757b481fe568 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/classTest.csl : 67.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

_ClassTypedef : at namespaces/test/classTest.csl : 71.3 : token = class : cloneFlag = 0
 =============================
DLList.init <:> csl compiled word
SourceCode for DLList.init :> 
: init ( this ) this.HeadNode.AfterReference this.TailNode.BeforeReference = this.TailNode.BeforeReference this.HeadNode.AfterReference = this.HeadNode.BeforeReference 1 = this.TailNode.AfterReference 2 = ; 
Source code file location of init : "namespaces/test/classTest.csl" : 77.2 :: we are now at : namespaces/test/classTest.csl : 83.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b29cb -- code size = 109 bytes
TypeSignature : 
 -----------------------------
Word :: DLList.init : definition = 0x0000757b488b29cb : disassembly at namespaces/test/classTest.csl : 83.18 :
0x757b488b29cb    4d897e08                mov [r14+0x8], r15                                     
0x757b488b29cf    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b29d3    4981c608000000          add r14, 0x8                                           
 ..                   : init ( this )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this .. 
0x757b488b29da    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b29de    4881c000000000          add rax, 0x0                                           
 .. is )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =    .. 
0x757b488b29e5    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b29e9    4881c118000000          add rcx, 0x18                                          
 .. ference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReferenc .. 
0x757b488b29f0    488908                  mov [rax], rcx                                         
 .. e this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =  .. 
0x757b488b29f3    498b47f8                mov rax, [r15-0x8]                                     
 .. e.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailN .. 
0x757b488b29f7    4881c018000000          add rax, 0x18                                          
 .. e =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReferen .. 
0x757b488b29fe    498b4ff8                mov rcx, [r15-0x8]                                     
 .. eference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a02    488908                  mov [rax], rcx                                         
 .. ce this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a05    498b47f8                mov rax, [r15-0x8]                                     
 .. de.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a09    4881c008000000          add rax, 0x8                                           
0x757b488b2a10    b901000000              mov ecx, 0x1                                           
 .. =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a15    488908                  mov [rax], rcx                                         
 .. this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a18    498b47f8                mov rax, [r15-0x8]                                     
 .. HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a1c    4881c010000000          add rax, 0x10                                          
0x757b488b2a23    b902000000              mov ecx, 0x2                                           
 .. =     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a28    488908                  mov [rax], rcx                                         
0x757b488b2a2b    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b2a2f    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b2a33    4983ee08                sub r14, 0x8                                           
 ..     this.TailNode.AfterReference  2 = ;  .. 
0x757b488b2a37    c3                      ret                                                    
Word_Disassemble : word - 'init' :: codeSize = 109
Word : 0x0000757b485a7cd7 :: Compiled at : 0x0000757b488b29cb
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 83.18 <::

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 32
Dump at : namespaces/test/classTest.csl : 86.36 :
Dump : Address = 0x0000757b481fe578 : Number = 32 :: (little endian dump)
0x0000757b481fe578 :  90 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe588 :  02 00 00 00 00 00 00 00  78 e5 1f 48 7b 75 00 00  ........ x..H{u.. 
 class init test :   : ok

 15 15 15 15 15 
yada yada yada yada neti 
 below line should show several 15's
 15 15 15 15 15
 
 above line should show several 15's
Using Namespaces :> DLList DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 97.4 : token =  : cloneFlag = 1
 =============================
DLListClone.init <:> csl compiled word
SourceCode for DLListClone.init :> 
: init ( this ) this.Category 12 = this.Three 3 = this.Prototype this.Three @ = this.Prototype @ dup p 3 "init_assert1" assert this.Prototype @ p this.Sum 0 = this.Four 4 = this.Twelve 12 = this.Accum this.Sum @ = this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert this.Accum this.Three @ this.Four @ * this.Three @ / = this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * this.Category @ - = this.Sum @ dup hex p 24 "init_assert5" assert decimal nl this.Category @ dup p 12 "init_assert7" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert this.Sum this.Category @ this.Prototype @ - dup p = this.Sum this.Category @ this.Prototype @ && dup p = this.Sum this.Category @ this.Prototype @ & dup p = this.Accum this.Prototype @ = this.Sum this.Category @ this.Prototype @ | dup p = this.Sum this.Category @ this.Prototype @ || dup p = this.Sum this.Category @ this.Prototype @ / dup p = this.Category @ dup p 12 _assert this.Sum @ p this.Prototype @ p "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps hex "\nthis = " ps this p "\nthis @ = " ps this @ p "\nthis.size = " ps this.size @ p nl this dup p this.size @ dump this.Accum this.Prototype @ dup p = this this.size @ dump decimal this.Accum @ dup 3 "\nAccum should be 3 : assert9 =" assert p this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p; 
Source code file location of init : "namespaces/test/classTest.csl" : 107.2 :: we are now at : namespaces/test/classTest.csl : 162.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b2bdb -- code size = 2648 bytes
TypeSignature : 
 -----------------------------
Word :: DLListClone.init : definition = 0x0000757b488b2bdb : disassembly at namespaces/test/classTest.csl : 162.18 :
0x757b488b2bdb    4d897e08                mov [r14+0x8], r15                                     
0x757b488b2bdf    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b2be3    4981c608000000          add r14, 0x8                                           
 ..                   : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p  .. 
0x757b488b2bea    498b47f8                mov rax, [r15-0x8]                                     
 ..              : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "in .. 
0x757b488b2bee    4881c020000000          add rax, 0x20                                          
0x757b488b2bf5    b90c000000              mov ecx, 0xc                                           
 ..  : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1"  .. 
0x757b488b2bfa    488908                  mov [rax], rcx                                         
 .. t ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert .. 
0x757b488b2bfd    498b47f8                mov rax, [r15-0x8]                                     
 .. his )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      .. 
0x757b488b2c01    4881c040000000          add rax, 0x40                                          
0x757b488b2c08    b903000000              mov ecx, 0x3                                           
 ..   this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Pr .. 
0x757b488b2c0d    488908                  mov [rax], rcx                                         
 .. Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype .. 
0x757b488b2c10    498b47f8                mov rax, [r15-0x8]                                     
 .. ory 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p  .. 
0x757b488b2c14    4881c028000000          add rax, 0x28                                          
 ..    this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this. .. 
0x757b488b2c1b    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2c1f    4881c140000000          add rcx, 0x40                                          
 .. is.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 .. 
0x757b488b2c26    488b09                  mov rcx, [rcx]                                         
 ..  3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     t .. 
0x757b488b2c29    488908                  mov [rax], rcx                                         
 ..      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.F .. 
0x757b488b2c2c    498b47f8                mov rax, [r15-0x8]                                     
 .. this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 .. 
0x757b488b2c30    4881c028000000          add rax, 0x28                                          
0x757b488b2c37    488b00                  mov rax, [rax]                                         
0x757b488b2c3a    4983c610                add r14, 0x10                                          
0x757b488b2c3e    498906                  mov [r14], rax                                         
 .. pe this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this .. 
0x757b488b2c41    498946f8                mov [r14-0x8], rax                                     
 .. his.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twe .. 
0x757b488b2c45    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b2c4f    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. s.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelv .. 
0x757b488b2c52    b803000000              mov eax, 0x3                                           
0x757b488b2c57    4983c608                add r14, 0x8                                           
0x757b488b2c5b    498906                  mov [r14], rax                                         
 .. Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve  .. 
0x757b488b2c5e    48b89ca210487b750000    mov rax, 0x757b4810a29c       < string : 'init_assert1' >
0x757b488b2c68    4983c608                add r14, 0x8                                           
0x757b488b2c6c    498906                  mov [r14], rax                                         
0x757b488b2c6f    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b2c79    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..  @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Su .. 
0x757b488b2c7c    498b47f8                mov rax, [r15-0x8]                                     
 .. p p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ = .. 
0x757b488b2c80    4881c028000000          add rax, 0x28                                          
0x757b488b2c87    488b00                  mov rax, [rax]                                         
0x757b488b2c8a    4983c608                add r14, 0x8                                           
0x757b488b2c8e    498906                  mov [r14], rax                                         
 .. assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this. .. 
0x757b488b2c91    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b2c9b    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. " assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum thi .. 
0x757b488b2c9e    498b47f8                mov rax, [r15-0x8]                                     
 .. ert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Cat .. 
0x757b488b2ca2    4881c030000000          add rax, 0x30                                          
0x757b488b2ca9    48c7c100000000          mov rcx, 0x0                                           
 ..    this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category  .. 
0x757b488b2cb0    488908                  mov [rax], rcx                                         
 .. s.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 +  .. 
0x757b488b2cb3    498b47f8                mov rax, [r15-0x8]                                     
 .. totype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this. .. 
0x757b488b2cb7    4881c048000000          add rax, 0x48                                          
0x757b488b2cbe    b904000000              mov ecx, 0x4                                           
 .. @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototy .. 
0x757b488b2cc3    488908                  mov [rax], rcx                                         
 ..   this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ &  .. 
0x757b488b2cc6    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = thi .. 
0x757b488b2cca    4881c038000000          add rax, 0x38                                          
0x757b488b2cd1    b90c000000              mov ecx, 0xc                                           
 ..     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3  .. 
0x757b488b2cd6    488908                  mov [rax], rcx                                         
 .. is.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_ .. 
0x757b488b2cd9    498b47f8                mov rax, [r15-0x8]                                     
 .. ur 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_asser .. 
0x757b488b2cdd    4881c050000000          add rax, 0x50                                          
 ..       this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| .. 
0x757b488b2ce4    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2ce8    4881c130000000          add rcx, 0x30                                          
 ..  this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| loca .. 
0x757b488b2cef    488b09                  mov rcx, [rcx]                                         
 .. Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPu .. 
0x757b488b2cf2    488908                  mov [rax], rcx                                         
 .. 2 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} lo .. 
0x757b488b2cf5    498b47f8                mov rax, [r15-0x8]                                     
 ..    this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locatio .. 
0x757b488b2cf9    4881c030000000          add rax, 0x30                                          
0x757b488b2d00    4983c608                add r14, 0x8                                           
0x757b488b2d04    498906                  mov [r14], rax                                         
 .. his.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPri .. 
0x757b488b2d07    498b47f8                mov rax, [r15-0x8]                                     
 .. ccum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint as .. 
0x757b488b2d0b    4881c020000000          add rax, 0x20                                          
0x757b488b2d12    488b00                  mov rax, [rax]                                         
 .. um @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     th .. 
0x757b488b2d15    b903000000              mov ecx, 0x3                                           
 ..  @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this .. 
0x757b488b2d1a    4803c1                  add rax, rcx                                           
 ..  =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.A .. 
0x757b488b2d1d    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2d21    4881c128000000          add rcx, 0x28                                          
 ..     this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum  .. 
0x757b488b2d28    488b09                  mov rcx, [rcx]                                         
0x757b488b2d2b    4823c1                  and rax, rcx                                           
 ..  this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ .. 
0x757b488b2d2e    488bc8                  mov rcx, rax                                           
0x757b488b2d31    498b06                  mov rax, [r14]                                         
0x757b488b2d34    4983ee08                sub r14, 0x8                                           
 .. his.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ t .. 
0x757b488b2d38    488908                  mov [rax], rcx                                         
 .. s.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ thi .. 
0x757b488b2d3b    498b47f8                mov rax, [r15-0x8]                                     
 .. egory @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Fou .. 
0x757b488b2d3f    4881c030000000          add rax, 0x30                                          
0x757b488b2d46    488b00                  mov rax, [rax]                                         
0x757b488b2d49    4983c608                add r14, 0x8                                           
0x757b488b2d4d    498906                  mov [r14], rax                                         
 .. @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ *  .. 
0x757b488b2d50    b803000000              mov eax, 0x3                                           
0x757b488b2d55    4983c608                add r14, 0x8                                           
0x757b488b2d59    498906                  mov [r14], rax                                         
 .. 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * th .. 
0x757b488b2d5c    48b8d4a210487b750000    mov rax, 0x757b4810a2d4       < string : 'init_assert2' >
0x757b488b2d66    4983c608                add r14, 0x8                                           
0x757b488b2d6a    498906                  mov [r14], rax                                         
 .. ype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =  .. 
0x757b488b2d6d    48b898e51f487b750000    mov rax, 0x757b481fe598                                
0x757b488b2d77    4983c608                add r14, 0x8                                           
0x757b488b2d7b    498906                  mov [r14], rax                                         
 .. @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 .. 
0x757b488b2d7e    49bb6010eaa65f5b0000    mov r11, 0x5b5fa6ea1060                                
0x757b488b2d88    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b2d92    49ffd2                  call r10                      < Experimental.locationPrint : 0x00005b5fa6ea1060 >
0x757b488b2d95    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b2d9f    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. ationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : t .. 
0x757b488b2da2    498b47f8                mov rax, [r15-0x8]                                     
 .. Push |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.A .. 
0x757b488b2da6    4881c050000000          add rax, 0x50                                          
0x757b488b2dad    4983c608                add r14, 0x8                                           
0x757b488b2db1    498906                  mov [r14], rax                                         
 .. } locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = .. 
0x757b488b2db4    498b47f8                mov rax, [r15-0x8]                                     
 .. ationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" p .. 
0x757b488b2db8    4881c040000000          add rax, 0x40                                          
0x757b488b2dbf    488b00                  mov rax, [rax]                                         
 .. nt assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_ .. 
0x757b488b2dc2    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2dc6    4881c148000000          add rcx, 0x48                                          
 .. sert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_asser .. 
0x757b488b2dcd    488b09                  mov rcx, [rcx]                                         
 ..   this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" ass .. 
0x757b488b2dd0    480fafc1                imul rax, rcx                                          
 .. this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" asser .. 
0x757b488b2dd4    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2dd8    4881c140000000          add rcx, 0x40                                          
 .. Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert     .. 
0x757b488b2ddf    488b09                  mov rcx, [rcx]                                         
0x757b488b2de2    48c7c200000000          mov rdx, 0x0                                           
0x757b488b2de9    48f7f9                  idiv rcx                                               
 .. is.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.P .. 
0x757b488b2dec    488bc8                  mov rcx, rax                                           
0x757b488b2def    498b06                  mov rax, [r14]                                         
0x757b488b2df2    4983ee08                sub r14, 0x8                                           
 .. .Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Pro .. 
0x757b488b2df6    488908                  mov [rax], rcx                                         
 .. @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype  .. 
0x757b488b2df9    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p   .. 
0x757b488b2dfd    4881c050000000          add rax, 0x50                                          
0x757b488b2e04    488b00                  mov rax, [rax]                                         
0x757b488b2e07    4983c608                add r14, 0x8                                           
0x757b488b2e0b    498906                  mov [r14], rax                                         
 ..  * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.S .. 
0x757b488b2e0e    b804000000              mov eax, 0x4                                           
0x757b488b2e13    4983c608                add r14, 0x8                                           
0x757b488b2e17    498906                  mov [r14], rax                                         
 ..  this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum .. 
0x757b488b2e1a    48b81aa310487b750000    mov rax, 0x757b4810a31a                                
0x757b488b2e24    4983c608                add r14, 0x8                                           
0x757b488b2e28    498906                  mov [r14], rax                                         
 .. \n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * thi .. 
0x757b488b2e2b    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b2e35    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.C .. 
0x757b488b2e38    48b873a310487b750000    mov rax, 0x757b4810a373       < string : 'init_assert3' >
0x757b488b2e42    4983c608                add r14, 0x8                                           
0x757b488b2e46    498906                  mov [r14], rax                                         
0x757b488b2e49    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b2e53    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. um = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ .. 
0x757b488b2e56    498b47f8                mov rax, [r15-0x8]                                     
 .. :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup  .. 
0x757b488b2e5a    4881c028000000          add rax, 0x28                                          
0x757b488b2e61    488b00                  mov rax, [rax]                                         
0x757b488b2e64    4983c608                add r14, 0x8                                           
0x757b488b2e68    498906                  mov [r14], rax                                         
 .. assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "i .. 
0x757b488b2e6b    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b2e75    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. t3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_a .. 
0x757b488b2e78    498b47f8                mov rax, [r15-0x8]                                     
 .. ssert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert .. 
0x757b488b2e7c    4881c030000000          add rax, 0x30                                          
0x757b488b2e83    4983c608                add r14, 0x8                                           
0x757b488b2e87    498906                  mov [r14], rax                                         
 .. t      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" a .. 
0x757b488b2e8a    498b47f8                mov rax, [r15-0x8]                                     
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert .. 
0x757b488b2e8e    4881c020000000          add rax, 0x20                                          
0x757b488b2e95    488b00                  mov rax, [rax]                                         
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl .. 
0x757b488b2e98    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2e9c    4881c128000000          add rcx, 0x28                                          
 ..  @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl      .. 
0x757b488b2ea3    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Categor .. 
0x757b488b2ea6    480fafc1                imul rax, rcx                                          
 .. um this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category  .. 
0x757b488b2eaa    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2eae    4881c120000000          add rcx, 0x20                                          
 .. is.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup .. 
0x757b488b2eb5    488b09                  mov rcx, [rcx]                                         
0x757b488b2eb8    482bc1                  sub rax, rcx                                           
 ..  @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "ini .. 
0x757b488b2ebb    488bc8                  mov rcx, rax                                           
0x757b488b2ebe    498b06                  mov rax, [r14]                                         
0x757b488b2ec1    4983ee08                sub r14, 0x8                                           
 ..  this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_ .. 
0x757b488b2ec5    488908                  mov [rax], rcx                                         
 .. .Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_asser .. 
0x757b488b2ec8    498b47f8                mov rax, [r15-0x8]                                     
 .. otype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" a .. 
0x757b488b2ecc    4881c030000000          add rax, 0x30                                          
0x757b488b2ed3    488b00                  mov rax, [rax]                                         
0x757b488b2ed6    4983c610                add r14, 0x10                                          
0x757b488b2eda    498906                  mov [r14], rax                                         
 .. @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert  .. 
0x757b488b2edd    498946f8                mov [r14-0x8], rax                                     
 .. this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    t .. 
0x757b488b2ee1    49bb5003eaa65f5b0000    mov r11, 0x5b5fa6ea0350                                
0x757b488b2eeb    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b2ef5    49ffd2                  call r10                      < System.hex : 0x00005b5fa6ea0350 >
 .. .Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this. .. 
0x757b488b2ef8    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b2f02    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. ategory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Pr .. 
0x757b488b2f05    b818000000              mov eax, 0x18                                          
0x757b488b2f0a    4983c608                add r14, 0x8                                           
0x757b488b2f0e    498906                  mov [r14], rax                                         
 .. ory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Protot .. 
0x757b488b2f11    48b8a1a310487b750000    mov rax, 0x757b4810a3a1       < string : 'init_assert5' >
0x757b488b2f1b    4983c608                add r14, 0x8                                           
0x757b488b2f1f    498906                  mov [r14], rax                                         
0x757b488b2f22    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b2f2c    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum th .. 
0x757b488b2f2f    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488b2f39    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b2f43    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
 .. x p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Categ .. 
0x757b488b2f46    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b2f50    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b2f5a    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ t .. 
0x757b488b2f5d    498b47f8                mov rax, [r15-0x8]                                     
 .. t_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.P .. 
0x757b488b2f61    4881c020000000          add rax, 0x20                                          
0x757b488b2f68    488b00                  mov rax, [rax]                                         
0x757b488b2f6b    4983c610                add r14, 0x10                                          
0x757b488b2f6f    498906                  mov [r14], rax                                         
 .. assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @  .. 
0x757b488b2f72    498946f8                mov [r14-0x8], rax                                     
 .. rt decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * =  .. 
0x757b488b2f76    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b2f80    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = th .. 
0x757b488b2f83    b80c000000              mov eax, 0xc                                           
0x757b488b2f88    4983c608                add r14, 0x8                                           
0x757b488b2f8c    498906                  mov [r14], rax                                         
 .. imal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.S .. 
0x757b488b2f8f    48b8cfa310487b750000    mov rax, 0x757b4810a3cf       < string : 'init_assert7' >
0x757b488b2f99    4983c608                add r14, 0x8                                           
0x757b488b2f9d    498906                  mov [r14], rax                                         
0x757b488b2fa0    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b2faa    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..  @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" .. 
0x757b488b2fad    498b47f8                mov rax, [r15-0x8]                                     
 .. p p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 3 .. 
0x757b488b2fb1    4881c028000000          add rax, 0x28                                          
0x757b488b2fb8    488b00                  mov rax, [rax]                                         
0x757b488b2fbb    4983c608                add r14, 0x8                                           
0x757b488b2fbf    498906                  mov [r14], rax                                         
 .. t_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_asse .. 
0x757b488b2fc2    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b2fcc    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. ert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8"  .. 
0x757b488b2fcf    498b47f8                mov rax, [r15-0x8]                                     
 ..  assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" asser .. 
0x757b488b2fd3    4881c030000000          add rax, 0x30                                          
0x757b488b2fda    4983c608                add r14, 0x8                                           
0x757b488b2fde    498906                  mov [r14], rax                                         
 .. ert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    .. 
0x757b488b2fe1    498b47f8                mov rax, [r15-0x8]                                     
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this .. 
0x757b488b2fe5    4881c020000000          add rax, 0x20                                          
0x757b488b2fec    488b00                  mov rax, [rax]                                         
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.C .. 
0x757b488b2fef    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b2ff3    4881c128000000          add rcx, 0x28                                          
 ..  @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Catego .. 
0x757b488b2ffa    488b09                  mov rcx, [rcx]                                         
0x757b488b2ffd    480fafc1                imul rax, rcx                                          
 .. .Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Pr .. 
0x757b488b3001    488bc8                  mov rcx, rax                                           
0x757b488b3004    498b06                  mov rax, [r14]                                         
0x757b488b3007    4983ee08                sub r14, 0x8                                           
 .. um this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prot .. 
0x757b488b300b    488908                  mov [rax], rcx                                         
 ..  this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Protot .. 
0x757b488b300e    498b47f8                mov rax, [r15-0x8]                                     
 .. .Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ .. 
0x757b488b3012    4881c030000000          add rax, 0x30                                          
0x757b488b3019    488b00                  mov rax, [rax]                                         
0x757b488b301c    4983c610                add r14, 0x10                                          
0x757b488b3020    498906                  mov [r14], rax                                         
 .. ory @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup .. 
0x757b488b3023    498946f8                mov [r14-0x8], rax                                     
 .. @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p = .. 
0x757b488b3027    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3031    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =   .. 
0x757b488b3034    48b8faa310487b750000    mov rax, 0x757b4810a3fa       < string : 'testing yada' >
0x757b488b303e    4983c608                add r14, 0x8                                           
0x757b488b3042    498906                  mov [r14], rax                                         
 .. @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this .. 
0x757b488b3045    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b304f    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Ca .. 
0x757b488b3052    b824000000              mov eax, 0x24                                          
0x757b488b3057    4983c608                add r14, 0x8                                           
0x757b488b305b    498906                  mov [r14], rax                                         
 .. this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Categ .. 
0x757b488b305e    48b828a410487b750000    mov rax, 0x757b4810a428       < string : 'init_assert8' >
0x757b488b3068    4983c608                add r14, 0x8                                           
0x757b488b306c    498906                  mov [r14], rax                                         
0x757b488b306f    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b3079    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..  yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && .. 
0x757b488b307c    498b47f8                mov rax, [r15-0x8]                                     
 .. " ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup  .. 
0x757b488b3080    4881c030000000          add rax, 0x30                                          
0x757b488b3087    4983c608                add r14, 0x8                                           
0x757b488b308b    498906                  mov [r14], rax                                         
 ..  36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =  .. 
0x757b488b308e    498b47f8                mov rax, [r15-0x8]                                     
 .. init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    th .. 
0x757b488b3092    4881c020000000          add rax, 0x20                                          
0x757b488b3099    488b00                  mov rax, [rax]                                         
 .. 8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this .. 
0x757b488b309c    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b30a0    4881c128000000          add rcx, 0x28                                          
 .. sert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Cate .. 
0x757b488b30a7    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this. .. 
0x757b488b30aa    482bc1                  sub rax, rcx                                           
0x757b488b30ad    4983c610                add r14, 0x10                                          
0x757b488b30b1    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Pr .. 
0x757b488b30b4    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Protot .. 
0x757b488b30b8    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b30c2    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b30c5    498b0e                  mov rcx, [r14]                                         
0x757b488b30c8    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b30cc    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototyp .. 
0x757b488b30d0    488908                  mov [rax], rcx                                         
 .. egory @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & .. 
0x757b488b30d3    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup  .. 
0x757b488b30d7    4881c030000000          add rax, 0x30                                          
0x757b488b30de    4983c608                add r14, 0x8                                           
0x757b488b30e2    498906                  mov [r14], rax                                         
 .. his.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =  .. 
0x757b488b30e5    498b47f8                mov rax, [r15-0x8]                                     
 .. rototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    th .. 
0x757b488b30e9    4881c020000000          add rax, 0x20                                          
0x757b488b30f0    488b00                  mov rax, [rax]                                         
0x757b488b30f3    4983c608                add r14, 0x8                                           
0x757b488b30f7    498906                  mov [r14], rax                                         
 .. - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum th .. 
0x757b488b30fa    498b47f8                mov rax, [r15-0x8]                                     
 ..  p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Pr .. 
0x757b488b30fe    4881c028000000          add rax, 0x28                                          
0x757b488b3105    488b00                  mov rax, [rax]                                         
0x757b488b3108    4983c608                add r14, 0x8                                           
0x757b488b310c    498906                  mov [r14], rax                                         
 .. .Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =  .. 
0x757b488b310f    498bc6                  mov rax, r14                                           
0x757b488b3112    4983ee08                sub r14, 0x8                                           
0x757b488b3116    48833800                cmp qword [rax], 0x0                                   
0x757b488b311a    7410                    jz 0x488b312c                 < DLListClone.init+1361 >
0x757b488b311c    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488b3121    7409                    jz 0x488b312c                 < DLListClone.init+1361 >
0x757b488b3123    49c70601000000          mov qword [r14], 0x1                                   
0x757b488b312a    eb07                    jmp 0x757b488b3133            < DLListClone.init+1368 >
0x757b488b312c    49c70600000000          mov qword [r14], 0x0                                   
0x757b488b3133    0f8400000000            jz 0x757b488b3139             < DLListClone.init+1374 >
 .. m this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     .. 
0x757b488b3139    498b06                  mov rax, [r14]                                         
0x757b488b313c    4983c608                add r14, 0x8                                           
0x757b488b3140    498906                  mov [r14], rax                                         
 .. is.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     thi .. 
0x757b488b3143    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b314d    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b3150    498b0e                  mov rcx, [r14]                                         
0x757b488b3153    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b3157    4983ee10                sub r14, 0x10                                          
 .. .Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this. .. 
0x757b488b315b    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum t .. 
0x757b488b315e    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.C .. 
0x757b488b3162    4881c030000000          add rax, 0x30                                          
0x757b488b3169    4983c608                add r14, 0x8                                           
0x757b488b316d    498906                  mov [r14], rax                                         
 .. is.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Categ .. 
0x757b488b3170    498b47f8                mov rax, [r15-0x8]                                     
 .. ototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ .. 
0x757b488b3174    4881c020000000          add rax, 0x20                                          
0x757b488b317b    488b00                  mov rax, [rax]                                         
 .. & dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Proto .. 
0x757b488b317e    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b3182    4881c128000000          add rcx, 0x28                                          
 ..  p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype  .. 
0x757b488b3189    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =  .. 
0x757b488b318c    4823c1                  and rax, rcx                                           
0x757b488b318f    4983c610                add r14, 0x10                                          
0x757b488b3193    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =    .. 
0x757b488b3196    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     th .. 
0x757b488b319a    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b31a4    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b31a7    498b0e                  mov rcx, [r14]                                         
0x757b488b31aa    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b31ae    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this .. 
0x757b488b31b2    488908                  mov [rax], rcx                                         
 .. egory @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum  .. 
0x757b488b31b5    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this. .. 
0x757b488b31b9    4881c050000000          add rax, 0x50                                          
 .. s.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Catego .. 
0x757b488b31c0    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b31c4    4881c128000000          add rcx, 0x28                                          
 .. totype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @  .. 
0x757b488b31cb    488b09                  mov rcx, [rcx]                                         
 .. up p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototy .. 
0x757b488b31ce    488908                  mov [rax], rcx                                         
 ..     this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ | .. 
0x757b488b31d1    498b47f8                mov rax, [r15-0x8]                                     
 .. his.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup .. 
0x757b488b31d5    4881c030000000          add rax, 0x30                                          
0x757b488b31dc    4983c608                add r14, 0x8                                           
0x757b488b31e0    498906                  mov [r14], rax                                         
 .. Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p = .. 
0x757b488b31e3    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =      .. 
0x757b488b31e7    4881c020000000          add rax, 0x20                                          
0x757b488b31ee    488b00                  mov rax, [rax]                                         
 .. type @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum th .. 
0x757b488b31f1    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b31f5    4881c128000000          add rcx, 0x28                                          
 .. @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Ca .. 
0x757b488b31fc    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ thi .. 
0x757b488b31ff    480bc1                  or rax, rcx                                            
0x757b488b3202    4983c610                add r14, 0x10                                          
0x757b488b3206    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this. .. 
0x757b488b3209    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prot .. 
0x757b488b320d    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3217    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b321a    498b0e                  mov rcx, [r14]                                         
0x757b488b321d    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b3221    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Protot .. 
0x757b488b3225    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @  .. 
0x757b488b3228    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup .. 
0x757b488b322c    4881c030000000          add rax, 0x30                                          
0x757b488b3233    4983c608                add r14, 0x8                                           
0x757b488b3237    498906                  mov [r14], rax                                         
 .. is.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p = .. 
0x757b488b323a    498b47f8                mov rax, [r15-0x8]                                     
 .. ototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =      .. 
0x757b488b323e    4881c020000000          add rax, 0x20                                          
0x757b488b3245    488b00                  mov rax, [rax]                                         
 ..  dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Catego .. 
0x757b488b3248    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b324c    4881c128000000          add rcx, 0x28                                          
 .. p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @  .. 
0x757b488b3253    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _as .. 
0x757b488b3256    480bc1                  or rax, rcx                                            
0x757b488b3259    0f95c0                  setnz al                                               
0x757b488b325c    480fb6c0                movzx rax, al                                          
0x757b488b3260    4983c610                add r14, 0x10                                          
0x757b488b3264    498906                  mov [r14], rax                                         
 .. m this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _asser .. 
0x757b488b3267    498946f8                mov [r14-0x8], rax                                     
 .. is.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    .. 
0x757b488b326b    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3275    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b3278    498b0e                  mov rcx, [r14]                                         
0x757b488b327b    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b327f    4983ee10                sub r14, 0x10                                          
 .. .Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    t .. 
0x757b488b3283    488908                  mov [rax], rcx                                         
 .. ory @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Su .. 
0x757b488b3286    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p .. 
0x757b488b328a    4881c030000000          add rax, 0x30                                          
0x757b488b3291    4983c608                add r14, 0x8                                           
0x757b488b3295    498906                  mov [r14], rax                                         
 .. s.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p     .. 
0x757b488b3298    498b47f8                mov rax, [r15-0x8]                                     
 .. totype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this. .. 
0x757b488b329c    4881c020000000          add rax, 0x20                                          
0x757b488b32a3    488b00                  mov rax, [rax]                                         
 ..  dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ .. 
0x757b488b32a6    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b32aa    4881c128000000          add rcx, 0x28                                          
 .. p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    .. 
0x757b488b32b1    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 .. 
0x757b488b32b4    48c7c200000000          mov rdx, 0x0                                           
0x757b488b32bb    48f7f9                  idiv rcx                                               
0x757b488b32be    4983c610                add r14, 0x10                                          
0x757b488b32c2    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 t .. 
0x757b488b32c5    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testi .. 
0x757b488b32c9    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b32d3    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b32d6    498b0e                  mov rcx, [r14]                                         
0x757b488b32d9    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b32dd    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing .. 
0x757b488b32e1    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada  .. 
0x757b488b32e4    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 .. 
0x757b488b32e8    4881c020000000          add rax, 0x20                                          
0x757b488b32ef    488b00                  mov rax, [rax]                                         
0x757b488b32f2    4983c610                add r14, 0x10                                          
0x757b488b32f6    498906                  mov [r14], rax                                         
 .. otype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12  .. 
0x757b488b32f9    498946f8                mov [r14-0x8], rax                                     
 .. e @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3  .. 
0x757b488b32fd    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3307    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 :  .. 
0x757b488b330a    b80c000000              mov eax, 0xc                                           
0x757b488b330f    4983c608                add r14, 0x8                                           
0x757b488b3313    498906                  mov [r14], rax                                         
0x757b488b3316    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b3320    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 ..   this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above s .. 
0x757b488b3323    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should .. 
0x757b488b3327    4881c030000000          add rax, 0x30                                          
0x757b488b332e    488b00                  mov rax, [rax]                                         
0x757b488b3331    4983c608                add r14, 0x8                                           
0x757b488b3335    498906                  mov [r14], rax                                         
 .. gory @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (appr .. 
0x757b488b3338    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3342    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approxima .. 
0x757b488b3345    498b47f8                mov rax, [r15-0x8]                                     
 ..  p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) .. 
0x757b488b3349    4881c028000000          add rax, 0x28                                          
0x757b488b3350    488b00                  mov rax, [rax]                                         
0x757b488b3353    4983c608                add r14, 0x8                                           
0x757b488b3357    498906                  mov [r14], rax                                         
 .. t    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps  .. 
0x757b488b335a    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3364    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b3367    48b89fa410487b750000    mov rax, 0x757b4810a49f                                
0x757b488b3371    4983c608                add r14, 0x8                                           
0x757b488b3375    498906                  mov [r14], rax                                         
 .. ut above should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.si .. 
0x757b488b3378    49baa6d78a487b750000    mov r10, 0x757b488ad7a6                                
0x757b488b3382    49ffd2                  call r10                      < System.ddps : 0x0000757b488ad7a6 >
 ..  should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p n .. 
0x757b488b3385    49bb5003eaa65f5b0000    mov r11, 0x5b5fa6ea0350                                
0x757b488b338f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b3399    49ffd2                  call r10                      < System.hex : 0x00005b5fa6ea0350 >
0x757b488b339c    48b858a510487b750000    mov rax, 0x757b4810a558                                
0x757b488b33a6    4983c608                add r14, 0x8                                           
0x757b488b33aa    498906                  mov [r14], rax                                         
 .. ly) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p thi .. 
0x757b488b33ad    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b33b7    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.s .. 
0x757b488b33ba    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b33be    4881c000000000          add rax, 0x0                                           
0x757b488b33c5    4983c608                add r14, 0x8                                           
0x757b488b33c9    498906                  mov [r14], rax                                         
 .. " ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ .. 
0x757b488b33cc    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b33d6    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b33d9    48b879a510487b750000    mov rax, 0x757b4810a579                                
0x757b488b33e3    4983c608                add r14, 0x8                                           
0x757b488b33e7    498906                  mov [r14], rax                                         
 .. nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum .. 
0x757b488b33ea    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b33f4    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. is = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum th .. 
0x757b488b33f7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b33fb    488b00                  mov rax, [rax]                                         
0x757b488b33fe    4983c608                add r14, 0x8                                           
0x757b488b3402    498906                  mov [r14], rax                                         
 .. ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prot .. 
0x757b488b3405    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b340f    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b3412    48b8a1a510487b750000    mov rax, 0x757b4810a5a1                                
0x757b488b341c    4983c608                add r14, 0x8                                           
0x757b488b3420    498906                  mov [r14], rax                                         
 ..  = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     thi .. 
0x757b488b3423    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b342d    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this t .. 
0x757b488b3430    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b3434    4881c000000000          add rax, 0x0                                           
0x757b488b343b    4983c608                add r14, 0x8                                           
0x757b488b343f    498906                  mov [r14], rax                                         
 .. this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.s .. 
0x757b488b3442    48b847ea5a487b750000    mov rax, 0x757b485aea47       < string : 'X' >
0x757b488b344c    488b00                  mov rax, [rax]                                         
0x757b488b344f    4983c608                add r14, 0x8                                           
0x757b488b3453    498906                  mov [r14], rax                                         
 .. p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ d .. 
0x757b488b3456    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3460    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dum .. 
0x757b488b3463    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b346d    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b3477    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. this.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     d .. 
0x757b488b347a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b347e    4881c000000000          add rax, 0x0                                           
0x757b488b3485    4983c610                add r14, 0x10                                          
0x757b488b3489    498906                  mov [r14], rax                                         
 .. size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decima .. 
0x757b488b348c    498946f8                mov [r14-0x8], rax                                     
 ..  = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal    .. 
0x757b488b3490    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b349a    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal      .. 
0x757b488b349d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b34a1    4881c000000000          add rax, 0x0                                           
0x757b488b34a8    4983c608                add r14, 0x8                                           
0x757b488b34ac    498906                  mov [r14], rax                                         
 ..  this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this. .. 
0x757b488b34af    48b847ea5a487b750000    mov rax, 0x757b485aea47       < string : 'X' >
0x757b488b34b9    488b00                  mov rax, [rax]                                         
0x757b488b34bc    4983c608                add r14, 0x8                                           
0x757b488b34c0    498906                  mov [r14], rax                                         
 .. ize @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ .. 
0x757b488b34c3    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b34cd    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b34d7    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. l     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\ .. 
0x757b488b34da    498b47f8                mov rax, [r15-0x8]                                     
 ..  this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccu .. 
0x757b488b34de    4881c050000000          add rax, 0x50                                          
0x757b488b34e5    4983c608                add r14, 0x8                                           
0x757b488b34e9    498906                  mov [r14], rax                                         
 .. dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum shou .. 
0x757b488b34ec    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be .. 
0x757b488b34f0    4881c028000000          add rax, 0x28                                          
0x757b488b34f7    488b00                  mov rax, [rax]                                         
0x757b488b34fa    4983c610                add r14, 0x10                                          
0x757b488b34fe    498906                  mov [r14], rax                                         
 ..  dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 .. 
0x757b488b3501    498946f8                mov [r14-0x8], rax                                     
 .. p     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  .. 
0x757b488b3505    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b350f    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b3512    498b0e                  mov rcx, [r14]                                         
0x757b488b3515    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b3519    4983ee10                sub r14, 0x10                                          
 ..     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  a .. 
0x757b488b351d    488908                  mov [rax], rcx                                         
 .. is.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert  .. 
0x757b488b3520    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b3524    4881c000000000          add rax, 0x0                                           
0x757b488b352b    4983c608                add r14, 0x8                                           
0x757b488b352f    498906                  mov [r14], rax                                         
 .. cum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p     .. 
0x757b488b3532    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b3536    4881c000000000          add rax, 0x0                                           
0x757b488b353d    4983c608                add r14, 0x8                                           
0x757b488b3541    498906                  mov [r14], rax                                         
 .. his.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this. .. 
0x757b488b3544    48b847ea5a487b750000    mov rax, 0x757b485aea47       < string : 'X' >
0x757b488b354e    488b00                  mov rax, [rax]                                         
0x757b488b3551    4983c608                add r14, 0x8                                           
0x757b488b3555    498906                  mov [r14], rax                                         
 .. totype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Categor .. 
0x757b488b3558    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b3562    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b356c    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 1 .. 
0x757b488b356f    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488b3579    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b3583    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
 .. this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategor .. 
0x757b488b3586    498b47f8                mov rax, [r15-0x8]                                     
 .. this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory sho .. 
0x757b488b358a    4881c050000000          add rax, 0x50                                          
0x757b488b3591    488b00                  mov rax, [rax]                                         
0x757b488b3594    4983c610                add r14, 0x10                                          
0x757b488b3598    498906                  mov [r14], rax                                         
 .. e @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 1 .. 
0x757b488b359b    498946f8                mov [r14-0x8], rax                                     
 .. dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 :  .. 
0x757b488b359f    b803000000              mov eax, 0x3                                           
0x757b488b35a4    4983c608                add r14, 0x8                                           
0x757b488b35a8    498906                  mov [r14], rax                                         
 .. mp     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : as .. 
0x757b488b35ab    48b8e2a510487b750000    mov rax, 0x757b4810a5e2                                
0x757b488b35b5    4983c608                add r14, 0x8                                           
0x757b488b35b9    498906                  mov [r14], rax                                         
0x757b488b35bc    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b35c6    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. ccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x757b488b35c9    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b35d3    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x757b488b35d6    498b47f8                mov rax, [r15-0x8]                                     
 .. d be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x757b488b35da    4881c020000000          add rax, 0x20                                          
0x757b488b35e1    488b00                  mov rax, [rax]                                         
0x757b488b35e4    4983c610                add r14, 0x10                                          
0x757b488b35e8    498906                  mov [r14], rax                                         
 .. sert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x757b488b35eb    498946f8                mov [r14-0x8], rax                                     
 .. 9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x757b488b35ef    b80c000000              mov eax, 0xc                                           
0x757b488b35f4    4983c608                add r14, 0x8                                           
0x757b488b35f8    498906                  mov [r14], rax                                         
 .. "  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x757b488b35fb    48b84ba610487b750000    mov rax, 0x757b4810a64b                                
0x757b488b3605    4983c608                add r14, 0x8                                           
0x757b488b3609    498906                  mov [r14], rax                                         
0x757b488b360c    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b3616    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. ory should be 12 : assert10 =" assert p;  .. 
0x757b488b3619    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b3623    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b3626    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b362a    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b362e    4983ee08                sub r14, 0x8                                           
 .. ry should be 12 : assert10 =" assert p;  .. 
0x757b488b3632    c3                      ret                                                    
Word_Disassemble : word - 'init' :: codeSize = 2648
Word : 0x0000757b485af8e7 :: Compiled at : 0x0000757b488b2bdb
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 162.18 <::

DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 3 init_assert1  : ok

 3
Run Time Location : namespaces/test/classTest.csl 125.98 init_assert2  : ok

 
 DLListClone init : this.Accum = : init_assert3  : ok

 3 0x0000000000000018 init_assert5  : ok


 12 init_assert7  : ok

 3 36 testing yada init_assert8  : ok

 9 1 0 15 1 4 12 4 3 
 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read 
this =  0x0000757b481fe5b8 
this @ =  0x0000757b481fe5d0 
this.size =  0x0000000000000058
 0x0000757b481fe5b8
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x0000757b481fe5b8 : Number = 88 :: (little endian dump)
0x0000757b481fe5b8 :  d0 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe5c8 :  02 00 00 00 00 00 00 00  b8 e5 1f 48 7b 75 00 00  ........ ...H{u.. 
0x0000757b481fe5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000003
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x0000757b481fe5b8 : Number = 88 :: (little endian dump)
0x0000757b481fe5b8 :  d0 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe5c8 :  02 00 00 00 00 00 00 00  b8 e5 1f 48 7b 75 00 00  ........ ...H{u.. 
0x0000757b481fe5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
Accum should be 3 : assert9 =  : ok

 3 
Category should be 12 : assert10 =  : ok

 12
DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 
this =  0x0000757b485aebf7
Dump at : namespaces/test/classTest.csl : 169.27 :
Dump : Address = 0x0000757b481fe5b8 : Number = 88 :: (little endian dump)
0x0000757b481fe5b8 :  d0 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe5c8 :  02 00 00 00 00 00 00 00  b8 e5 1f 48 7b 75 00 00  ........ ...H{u.. 
0x0000757b481fe5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/classTest.csl : 170.32 :
Dump : Address = 0x0000757b481fe5b8 : Number = 88 :: (little endian dump)
0x0000757b481fe5b8 :  d0 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe5c8 :  02 00 00 00 00 00 00 00  b8 e5 1f 48 7b 75 00 00  ........ ...H{u.. 
0x0000757b481fe5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 


DataStack at : namespaces/test/classTest.csl : 171.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 DLListClone size = 88
 Clone size  : ok

 DLListClone init test :   : ok

 
this @ size @ p  88 
this.size =  88
Using Namespaces :> C Root DLListClone DLList DLLNode Buffer Class Integer Pointer Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 
 
printf output = this.size = 88
 0x0000757b481fe5b8 88
Dump at : namespaces/test/classTest.csl : 183.48 :
Dump : Address = 0x0000757b481fe5b8 : Number = 88 :: (little endian dump)
0x0000757b481fe5b8 :  d0 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe5c8 :  02 00 00 00 00 00 00 00  b8 e5 1f 48 7b 75 00 00  ........ ...H{u.. 
0x0000757b481fe5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 


 -----------------------------
 'this' semantics have yet to be solidified namespaces/test/classTest.csl 185.53
 -----------------------------


Dump at : namespaces/test/classTest.csl : 186.32 :
Dump : Address = 0x0000757b481fe5b8 : Number = 88 :: (little endian dump)
0x0000757b481fe5b8 :  d0 e5 1f 48 7b 75 00 00  01 00 00 00 00 00 00 00  ...H{u.. ........ 
0x0000757b481fe5c8 :  02 00 00 00 00 00 00 00  b8 e5 1f 48 7b 75 00 00  ........ ...H{u.. 
0x0000757b481fe5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 DLListClone init test4 :   : ok


including namespaces/test/math.csl at namespaces/test/initTest.csl : 86.41 ...
 
math test

 =============================
C.t* <:> csl compiled word
SourceCode for C.t* :> 
: t* ( a b c d ) a @ b @ c @ d @ * * * return tos ; 
Source code file location of t* : "namespaces/test/math.csl" : 25.2 :: we are now at : namespaces/test/math.csl : 26.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3907 -- code size = 93 bytes
TypeSignature : 
 -----------------------------
Word :: C.t* : definition = 0x0000757b488b3907 : disassembly at namespaces/test/math.csl : 26.16 :
0x757b488b3907    4d897e08                mov [r14+0x8], r15                                     
0x757b488b390b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b390f    4981c608000000          add r14, 0x8                                           
 ..                      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b3916    498b47e0                mov rax, [r15-0x20]                                    
0x757b488b391a    4983c608                add r14, 0x8                                           
0x757b488b391e    498906                  mov [r14], rax                                         
 ..                  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b3921    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b3925    4983c608                add r14, 0x8                                           
0x757b488b3929    498906                  mov [r14], rax                                         
 ..              : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b392c    498b47f0                mov rax, [r15-0x10]                                    
 ..          : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b3930    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b3934    480fafc1                imul rax, rcx                                          
 ..      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b3938    488bc8                  mov rcx, rax                                           
0x757b488b393b    498b06                  mov rax, [r14]                                         
0x757b488b393e    4983ee08                sub r14, 0x8                                           
0x757b488b3942    480fafc1                imul rax, rcx                                          
 ..    : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b3946    488bc8                  mov rcx, rax                                           
0x757b488b3949    498b06                  mov rax, [r14]                                         
0x757b488b394c    4983ee08                sub r14, 0x8                                           
 ..  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x757b488b3950    480fafc1                imul rax, rcx                                          
0x757b488b3954    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3958    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b395c    4983ee18                sub r14, 0x18                                          
0x757b488b3960    498906                  mov [r14], rax                                         
 ..  d ) a @ b @ c @ d @ * * * return tos ; 
0x757b488b3963    c3                      ret                                                    
Word_Disassemble : word - 't*' :: codeSize = 93
Word : 0x0000757b485c1ef7 :: Compiled at : 0x0000757b488b3907
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 26.16 <::

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ <<= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 44.2 :: we are now at : namespaces/test/math.csl : 45.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3b12 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x0000757b488b3b12 : disassembly at namespaces/test/math.csl : 45.17 :
0x757b488b3b12    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3b16    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3b1a    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x757b488b3b21    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                   : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x757b488b3b25    49d367f0                shl qword [r15-0x10], cl                               
 ..               : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x757b488b3b29    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b3b2d    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3b31    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3b35    4983ee08                sub r14, 0x8                                           
0x757b488b3b39    498906                  mov [r14], rax                                         
   : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x757b488b3b3c    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x0000757b485b3467 :: Compiled at : 0x0000757b488b3b12
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 45.17 <::
 moe_assert1  : ok

 moe_assert2  : ok

 moe_assert3  : ok

 moe_assert3  : ok



 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :> 
: moe ( n m ) n <<= m n return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 53.2 :: we are now at : namespaces/test/math.csl : 54.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3b72 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: Infix.moe : definition = 0x0000757b488b3b72 : disassembly at namespaces/test/math.csl : 54.17 :
0x757b488b3b72    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3b76    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3b7a    4981c608000000          add r14, 0x8                                           
 ..                   : moe ( n m ) n <<= m n return tos ;  .. 
0x757b488b3b81    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                       : moe ( n m ) n <<= m n return tos ;  .. 
0x757b488b3b85    49d367f0                shl qword [r15-0x10], cl                               
 ..                 : moe ( n m ) n <<= m n return tos ;  .. 
0x757b488b3b89    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b3b8d    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3b91    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3b95    4983ee08                sub r14, 0x8                                           
0x757b488b3b99    498906                  mov [r14], rax                                         
 ..    : moe ( n m ) n <<= m n return tos ;  .. 
0x757b488b3b9c    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x0000757b485d003f :: Compiled at : 0x0000757b488b3b72
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 54.17 <::

 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :> 
: moe ( n m ) n >>= m n return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 56.2 :: we are now at : namespaces/test/math.csl : 57.20
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3ba2 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: Infix.moe : definition = 0x0000757b488b3ba2 : disassembly at namespaces/test/math.csl : 57.20 :
0x757b488b3ba2    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3ba6    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3baa    4981c608000000          add r14, 0x8                                           
 ..                   : moe ( n m ) n >>= m n return tos ;  .. 
0x757b488b3bb1    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                       : moe ( n m ) n >>= m n return tos ;  .. 
0x757b488b3bb5    49d36ff0                shr qword [r15-0x10], cl                               
 ..                 : moe ( n m ) n >>= m n return tos ;  .. 
0x757b488b3bb9    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b3bbd    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3bc1    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3bc5    4983ee08                sub r14, 0x8                                           
0x757b488b3bc9    498906                  mov [r14], rax                                         
 ..    : moe ( n m ) n >>= m n return tos ;  .. 
0x757b488b3bcc    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x0000757b485d118f :: Compiled at : 0x0000757b488b3ba2
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 57.20 <::
 128 65536 
should show 128 65536
 2 1 
should show 2 1

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ *= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 67.2 :: we are now at : namespaces/test/math.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3c62 -- code size = 51 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x0000757b488b3c62 : disassembly at namespaces/test/math.csl : 68.17 :
0x757b488b3c62    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3c66    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3c6a    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x757b488b3c71    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                         : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x757b488b3c75    498b47f0                mov rax, [r15-0x10]                                    
 ..                   : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x757b488b3c79    480fafc1                imul rax, rcx                                          
0x757b488b3c7d    498947f0                mov [r15-0x10], rax                                    
 ..                : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x757b488b3c81    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b3c85    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3c89    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3c8d    4983ee08                sub r14, 0x8                                           
0x757b488b3c91    498906                  mov [r14], rax                                         
 .. : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x757b488b3c94    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 51
Word : 0x0000757b485d4f9f :: Compiled at : 0x0000757b488b3c62
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 68.17 <::


 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ /= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 71.2 :: we are now at : namespaces/test/math.csl : 72.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3c9a -- code size = 57 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x0000757b488b3c9a : disassembly at namespaces/test/math.csl : 72.17 :
0x757b488b3c9a    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3c9e    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3ca2    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x757b488b3ca9    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                         : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x757b488b3cad    498b47f0                mov rax, [r15-0x10]                                    
 ..                   : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x757b488b3cb1    48c7c200000000          mov rdx, 0x0                                           
0x757b488b3cb8    48f7f9                  idiv rcx                                               
0x757b488b3cbb    498947f0                mov [r15-0x10], rax                                    
 ..                : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x757b488b3cbf    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b3cc3    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3cc7    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3ccb    4983ee08                sub r14, 0x8                                           
0x757b488b3ccf    498906                  mov [r14], rax                                         
 .. : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x757b488b3cd2    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 57
Word : 0x0000757b485d629f :: Compiled at : 0x0000757b488b3c9a
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 72.17 <::


 =============================
C.moe2 <:> csl compiled word
SourceCode for C.moe2 :> 
: moe2 ( n ) n 2 /= n @ return tos ; 
Source code file location of moe2 : "namespaces/test/math.csl" : 75.2 :: we are now at : namespaces/test/math.csl : 76.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3cd8 -- code size = 54 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe2 : definition = 0x0000757b488b3cd8 : disassembly at namespaces/test/math.csl : 76.18 :
0x757b488b3cd8    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3cdc    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3ce0    4981c608000000          add r14, 0x8                                           
 ..                        : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x757b488b3ce7    b902000000              mov ecx, 0x2                                           
 ..                          : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x757b488b3cec    498b47f8                mov rax, [r15-0x8]                                     
 ..                      : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x757b488b3cf0    48c7c200000000          mov rdx, 0x0                                           
0x757b488b3cf7    48f7f9                  idiv rcx                                               
0x757b488b3cfa    498947f8                mov [r15-0x8], rax                                     
 ..                   : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x757b488b3cfe    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b3d02    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3d06    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3d0a    498906                  mov [r14], rax                                         
 ..    : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x757b488b3d0d    c3                      ret                                                    
Word_Disassemble : word - 'moe2' :: codeSize = 54
Word : 0x0000757b485d759f :: Compiled at : 0x0000757b488b3cd8
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 76.18 <::


 moe3_assert1  : ok


 moe3_assert2  : ok



 =============================
C.t64bitAdd2 <:> csl compiled word
SourceCode for C.t64bitAdd2 :> 
: t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ; 
Source code file location of t64bitAdd2 : "namespaces/test/math.csl" : 83.2 :: we are now at : namespaces/test/math.csl : 84.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3d72 -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: C.t64bitAdd2 : definition = 0x0000757b488b3d72 : disassembly at namespaces/test/math.csl : 84.23 :
0x757b488b3d72    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3d76    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3d7a    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x757b488b3d81    48b80000000001000000    mov rax, 0x100000000                                   
 ..      : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x757b488b3d8b    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x757b488b3d8f    4803c1                  add rax, rcx                                           
   : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x757b488b3d92    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ; 
0x757b488b3d96    4803c1                  add rax, rcx                                           
0x757b488b3d99    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3d9d    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3da1    4983ee08                sub r14, 0x8                                           
0x757b488b3da5    498906                  mov [r14], rax                                         
 ..  ) 0x100000000 n @ + m @ + return tos ; 
0x757b488b3da8    c3                      ret                                                    
Word_Disassemble : word - 't64bitAdd2' :: codeSize = 55
Word : 0x0000757b485dab3f :: Compiled at : 0x0000757b488b3d72
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 84.23 <::
 t64bitAdd2_assert  : ok


 0x0000000000000002
 =============================
C.t64bitSub2 <:> csl compiled word
SourceCode for C.t64bitSub2 :> 
: t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ; 
Source code file location of t64bitSub2 : "namespaces/test/math.csl" : 87.2 :: we are now at : namespaces/test/math.csl : 88.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3df8 -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: C.t64bitSub2 : definition = 0x0000757b488b3df8 : disassembly at namespaces/test/math.csl : 88.23 :
0x757b488b3df8    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3dfc    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3e00    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x757b488b3e07    48b80300000001000000    mov rax, 0x100000003                                   
 ..      : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x757b488b3e11    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x757b488b3e15    482bc1                  sub rax, rcx                                           
   : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x757b488b3e18    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ; 
0x757b488b3e1c    482bc1                  sub rax, rcx                                           
0x757b488b3e1f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3e23    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3e27    4983ee08                sub r14, 0x8                                           
0x757b488b3e2b    498906                  mov [r14], rax                                         
 ..  ) 0x100000003 n @ - m @ - return tos ; 
0x757b488b3e2e    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub2' :: codeSize = 55
Word : 0x0000757b485dd49f :: Compiled at : 0x0000757b488b3df8
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 88.23 <::
 t64bitSub2_assert  : ok


 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :> 
: t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ; 
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 90.2 :: we are now at : namespaces/test/math.csl : 91.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3e34 -- code size = 55 bytes
TypeSignature : 
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x0000757b488b3e34 : disassembly at namespaces/test/math.csl : 91.23 :
0x757b488b3e34    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3e38    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3e3c    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x757b488b3e43    48b80400000001000000    mov rax, 0x100000004                                   
 ..      : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x757b488b3e4d    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x757b488b3e51    482bc1                  sub rax, rcx                                           
   : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x757b488b3e54    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ; 
0x757b488b3e58    482bc1                  sub rax, rcx                                           
0x757b488b3e5b    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3e5f    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3e63    4983ee08                sub r14, 0x8                                           
0x757b488b3e67    498906                  mov [r14], rax                                         
 ..  ) 0x100000004 n @ - m @ - return tos ; 
0x757b488b3e6a    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub3' :: codeSize = 55
Word : 0x0000757b485de94f :: Compiled at : 0x0000757b488b3e34
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 91.23 <::

 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :> 
: t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 93.2 :: we are now at : namespaces/test/math.csl : 94.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b3e70 -- code size = 63 bytes
TypeSignature : 
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x0000757b488b3e70 : disassembly at namespaces/test/math.csl : 94.23 :
0x757b488b3e70    4d897e08                mov [r14+0x8], r15                                     
0x757b488b3e74    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b3e78    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;  .. 
0x757b488b3e7f    b801000000              mov eax, 0x1                                           
 .. ub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x757b488b3e84    48b90300000001000000    mov rcx, 0x100000003                                   
 .. 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x757b488b3e8e    4803c1                  add rax, rcx                                           
 .. 100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x757b488b3e91    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 00003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x757b488b3e95    482bc1                  sub rax, rcx                                           
 .. 003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x757b488b3e98    498b4ff8                mov rcx, [r15-0x8]                                     
 .. 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x757b488b3e9c    482bc1                  sub rax, rcx                                           
0x757b488b3e9f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b3ea3    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b3ea7    4983ee08                sub r14, 0x8                                           
0x757b488b3eab    498906                  mov [r14], rax                                         
 ..  0x100000003 + n @ - m @ - return tos ; 
0x757b488b3eae    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub3' :: codeSize = 63
Word : 0x0000757b485dfdff :: Compiled at : 0x0000757b488b3e70
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 94.23 <::

 7176105502331971041 
 0110 0011  1001 0110   1010 0101  1110 1111    0000 1001  0011 1001   0010 0101  1110 0001 
including namespaces/test/arrayTest.csl at namespaces/test/initTest.csl : 86.41 ...

_ClassTypedef : at namespaces/test/arrayTest.csl : 11.23 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
DLLNode size =  16
DLLNodeAlloc size =  512

Dump at : namespaces/test/arrayTest.csl : 24.15 :
Dump : Address = 0x0000757b481fe610 : Number = 64 :: (little endian dump)
0x0000757b481fe610 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe620 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe630 :  00 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fe640 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 27.25 : token = class : cloneFlag = 0DLLNodeAlloc4 size =  2048

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 
testna4 =  0x0000757b481fe810
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :> 
: testna5 ( DLLNodeAlloc4 dlna4o ) "\ndlna4o = " ps dlna4o hp dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 = dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = dlna4o.nodes [ 1 ] [ 0 ] 32 dump dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 = dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps dlna4o.nodes [ 2 ] [ 1 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference 1 = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference dlna4o.nodes [ 3 ] [ 2 ].BeforeReference = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference dlna4o.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump "dlna4o = " ps dlna4o hp ; 
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 34.2 :: we are now at : namespaces/test/arrayTest.csl : 53.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b4c87 -- code size = 616 bytes
TypeSignature : Object 
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x0000757b488b4c87 : disassembly at namespaces/test/arrayTest.csl : 53.21 :
0x757b488b4c87    4d897e08                mov [r14+0x8], r15                                     
0x757b488b4c8b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b4c8f    4981c608000000          add r14, 0x8                                           
0x757b488b4c96    48b82dcd10487b750000    mov rax, 0x757b4810cd2d                                
0x757b488b4ca0    4983c608                add r14, 0x8                                           
0x757b488b4ca4    498906                  mov [r14], rax                                         
 .. NodeAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRef .. 
0x757b488b4ca7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b4cb1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. eAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRefere .. 
0x757b488b4cb4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4cb8    4881c000000000          add rax, 0x0                                           
0x757b488b4cbf    4983c608                add r14, 0x8                                           
0x757b488b4cc3    498906                  mov [r14], rax                                         
 ..  dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = .. 
0x757b488b4cc6    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b4cd0    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..  )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dl .. 
0x757b488b4cd3    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4cd7    4881c000020000          add rax, 0x200                                         
0x757b488b4cde    b901000000              mov ecx, 0x1                                           
 .. 4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o. .. 
0x757b488b4ce3    488908                  mov [rax], rcx                                         
 .. es [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes  .. 
0x757b488b4ce6    498b47f8                mov rax, [r15-0x8]                                     
 .. ence 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReferenc .. 
0x757b488b4cea    4881c008020000          add rax, 0x208                                         
0x757b488b4cf1    b902000000              mov ecx, 0x2                                           
 .. o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.n .. 
0x757b488b4cf6    488908                  mov [rax], rcx                                         
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ .. 
0x757b488b4cf9    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4cfd    4881c000020000          add rax, 0x200                                         
0x757b488b4d04    4983c608                add r14, 0x8                                           
0x757b488b4d08    498906                  mov [r14], rax                                         
 .. ence 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReferenc .. 
0x757b488b4d0b    b820000000              mov eax, 0x20                                          
0x757b488b4d10    4983c608                add r14, 0x8                                           
0x757b488b4d14    498906                  mov [r14], rax                                         
 .. e 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 .. 
0x757b488b4d17    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b4d21    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b4d2b    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..  dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\ .. 
0x757b488b4d2e    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4d32    4881c010040000          add rax, 0x410                                         
0x757b488b4d39    b901000000              mov ecx, 0x1                                           
 .. 4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 .. 
0x757b488b4d3e    488908                  mov [rax], rcx                                         
 .. es [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" .. 
0x757b488b4d41    498b47f8                mov rax, [r15-0x8]                                     
 .. ence 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 .. 
0x757b488b4d45    4881c018040000          add rax, 0x418                                         
0x757b488b4d4c    b902000000              mov ecx, 0x2                                           
 .. o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump   .. 
0x757b488b4d51    488908                  mov [rax], rcx                                         
0x757b488b4d54    48b896cd10487b750000    mov rax, 0x757b4810cd96                                
0x757b488b4d5e    4983c608                add r14, 0x8                                           
0x757b488b4d62    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4 .. 
0x757b488b4d65    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b4d6f    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. 4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes  .. 
0x757b488b4d72    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4d76    4881c010040000          add rax, 0x410                                         
0x757b488b4d7d    4983c608                add r14, 0x8                                           
0x757b488b4d81    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReferen .. 
0x757b488b4d84    b820000000              mov eax, 0x20                                          
0x757b488b4d89    4983c608                add r14, 0x8                                           
0x757b488b4d8d    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  .. 
0x757b488b4d90    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b4d9a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b4da4    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..  dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =      .. 
0x757b488b4da7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4dab    4881c020060000          add rax, 0x620                                         
0x757b488b4db2    b901000000              mov ecx, 0x1                                           
 .. o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 3 .. 
0x757b488b4db7    488908                  mov [rax], rcx                                         
 .. s [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump .. 
0x757b488b4dba    498b47f8                mov rax, [r15-0x8]                                     
 .. nce  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [  .. 
0x757b488b4dbe    4881c028060000          add rax, 0x628                                         
0x757b488b4dc5    b902000000              mov ecx, 0x2                                           
 .. .nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump   .. 
0x757b488b4dca    488908                  mov [rax], rcx                                         
0x757b488b4dcd    48b83dce10487b750000    mov rax, 0x757b4810ce3d                                
0x757b488b4dd7    4983c608                add r14, 0x8                                           
0x757b488b4ddb    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes  .. 
0x757b488b4dde    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b4de8    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [  .. 
0x757b488b4deb    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4def    4881c020060000          add rax, 0x620                                         
0x757b488b4df6    4983c608                add r14, 0x8                                           
0x757b488b4dfa    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     .. 
0x757b488b4dfd    b820000000              mov eax, 0x20                                          
0x757b488b4e02    4983c608                add r14, 0x8                                           
0x757b488b4e06    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dl .. 
0x757b488b4e09    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b4e13    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b4e1d    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..  dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.node .. 
0x757b488b4e20    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4e24    4881c020060000          add rax, 0x620                                         
 .. a4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nod .. 
0x757b488b4e2b    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b4e2f    4881c128060000          add rcx, 0x628                                         
 .. a4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\nju .. 
0x757b488b4e36    488908                  mov [rax], rcx                                         
 .. des [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust bef .. 
0x757b488b4e39    498b47f8                mov rax, [r15-0x8]                                     
 .. erence =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ]  .. 
0x757b488b4e3d    4881c028060000          add rax, 0x628                                         
 .. 4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps .. 
0x757b488b4e44    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b4e48    4881c120060000          add rcx, 0x620                                         
 .. na4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump   .. 
0x757b488b4e4f    488908                  mov [rax], rcx                                         
0x757b488b4e52    48b8e8ce10487b750000    mov rax, 0x757b4810cee8                                
0x757b488b4e5c    4983c608                add r14, 0x8                                           
0x757b488b4e60    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4e63    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b4e6d    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4e70    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4e74    4881c020060000          add rax, 0x620                                         
0x757b488b4e7b    4983c608                add r14, 0x8                                           
0x757b488b4e7f    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4e82    b820000000              mov eax, 0x20                                          
0x757b488b4e87    4983c608                add r14, 0x8                                           
0x757b488b4e8b    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4e8e    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b4e98    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b4ea2    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b4ea5    48b85dcf10487b750000    mov rax, 0x757b4810cf5d       < string : 'dlna4o = ' >
0x757b488b4eaf    4983c608                add r14, 0x8                                           
0x757b488b4eb3    498906                  mov [r14], rax                                         
 .. s [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4eb6    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b4ec0    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4ec3    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b4ec7    4881c000000000          add rax, 0x0                                           
0x757b488b4ece    4983c608                add r14, 0x8                                           
0x757b488b4ed2    498906                  mov [r14], rax                                         
 .. 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4ed5    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b4edf    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
0x757b488b4ee2    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b4ee6    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b4eea    4983ee08                sub r14, 0x8                                           
 ..  32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x757b488b4eee    c3                      ret                                                    
Word_Disassemble : word - 'testna5' :: codeSize = 616
Word : 0x0000757b4862c74b :: Compiled at : 0x0000757b488b4c87
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 53.21 <::
 
dlna4o =  0x0000757b481fe810
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x0000757b481fea10 : Number = 32 :: (little endian dump)
0x0000757b481fea10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fea20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x0000757b481fec20 : Number = 32 :: (little endian dump)
0x0000757b481fec20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fec30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x0000757b481fee30 : Number = 32 :: (little endian dump)
0x0000757b481fee30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x0000757b481fee30 : Number = 32 :: (little endian dump)
0x0000757b481fee30 :  38 ee 1f 48 7b 75 00 00  30 ee 1f 48 7b 75 00 00  8..H{u.. 0..H{u.. 
0x0000757b481fee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 dlna4o =  0x0000757b481fe810
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :> 
: testna5 "\ntestna4 = " ps testna4 hp testna4.nodes [ 1 ] [ 0 ].AfterReference 1 = testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 = testna4.nodes [ 1 ] [ 0 ] 32 dump testna4.nodes [ 2 ] [ 1 ].AfterReference 1 = testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps testna4.nodes [ 2 ] [ 1 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference 1 = testna4.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference testna4.nodes [ 3 ] [ 2 ].BeforeReference = testna4.nodes [ 3 ] [ 2 ].BeforeReference testna4.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump "testna4 = " ps testna4 hp ; 
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 56.2 :: we are now at : namespaces/test/arrayTest.csl : 75.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b4f03 -- code size = 685 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x0000757b488b4f03 : disassembly at namespaces/test/arrayTest.csl : 75.21 :
0x757b488b4f03    48b805d310487b750000    mov rax, 0x757b4810d305                                
0x757b488b4f0d    4983c608                add r14, 0x8                                           
0x757b488b4f11    498906                  mov [r14], rax                                         
 ..         : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].Before .. 
0x757b488b4f14    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b4f1e    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..      : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeRef .. 
0x757b488b4f21    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b4f2b    4881c000000000          add rax, 0x0                                           
0x757b488b4f32    4983c608                add r14, 0x8                                           
0x757b488b4f36    498906                  mov [r14], rax                                         
 : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 .. 
0x757b488b4f39    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b4f43    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =      .. 
0x757b488b4f46    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b4f50    4881c000020000          add rax, 0x200                                         
0x757b488b4f57    b901000000              mov ecx, 0x1                                           
 .. a4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testn .. 
0x757b488b4f5c    488908                  mov [rax], rcx                                         
 .. es [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nod .. 
0x757b488b4f5f    48b810e81f487b750000    mov rax, 0x757b481fe810                                
 .. nce 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterRefere .. 
0x757b488b4f69    4881c008020000          add rax, 0x208                                         
0x757b488b4f70    b902000000              mov ecx, 0x2                                           
 .. 4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna .. 
0x757b488b4f75    488908                  mov [rax], rcx                                         
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.node .. 
0x757b488b4f78    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b4f82    4881c000020000          add rax, 0x200                                         
0x757b488b4f89    4983c608                add r14, 0x8                                           
0x757b488b4f8d    498906                  mov [r14], rax                                         
 .. nce 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeRefere .. 
0x757b488b4f90    b820000000              mov eax, 0x20                                          
0x757b488b4f95    4983c608                add r14, 0x8                                           
0x757b488b4f99    498906                  mov [r14], rax                                         
 ..  2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference .. 
0x757b488b4f9c    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b4fa6    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b4fb0    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =      .. 
0x757b488b4fb3    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b4fbd    4881c010040000          add rax, 0x410                                         
0x757b488b4fc4    b901000000              mov ecx, 0x1                                           
 .. a4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ]  .. 
0x757b488b4fc9    488908                  mov [rax], rcx                                         
 .. es [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dum .. 
0x757b488b4fcc    48b810e81f487b750000    mov rax, 0x757b481fe810                                
 .. nce 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ .. 
0x757b488b4fd6    4881c018040000          add rax, 0x418                                         
0x757b488b4fdd    b902000000              mov ecx, 0x2                                           
 .. 4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump .. 
0x757b488b4fe2    488908                  mov [rax], rcx                                         
0x757b488b4fe5    48b871d310487b750000    mov rax, 0x757b4810d371                                
0x757b488b4fef    4983c608                add r14, 0x8                                           
0x757b488b4ff3    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     tes .. 
0x757b488b4ff6    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b5000    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. a4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nod .. 
0x757b488b5003    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b500d    4881c010040000          add rax, 0x410                                         
0x757b488b5014    4983c608                add r14, 0x8                                           
0x757b488b5018    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeRefer .. 
0x757b488b501b    b820000000              mov eax, 0x20                                          
0x757b488b5020    4983c608                add r14, 0x8                                           
0x757b488b5024    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReferenc .. 
0x757b488b5027    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b5031    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b503b    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =    .. 
0x757b488b503e    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b5048    4881c020060000          add rax, 0x620                                         
0x757b488b504f    b901000000              mov ecx, 0x1                                           
 .. 4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] .. 
0x757b488b5054    488908                  mov [rax], rcx                                         
 .. s [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 du .. 
0x757b488b5057    48b810e81f487b750000    mov rax, 0x757b481fe810                                
 .. ce  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes  .. 
0x757b488b5061    4881c028060000          add rax, 0x628                                         
0x757b488b5068    b902000000              mov ecx, 0x2                                           
 .. .nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump .. 
0x757b488b506d    488908                  mov [rax], rcx                                         
0x757b488b5070    48b81bd410487b750000    mov rax, 0x757b4810d41b                                
0x757b488b507a    4983c608                add r14, 0x8                                           
0x757b488b507e    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nod .. 
0x757b488b5081    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b508b    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. a4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] .. 
0x757b488b508e    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b5098    4881c020060000          add rax, 0x620                                         
0x757b488b509f    4983c608                add r14, 0x8                                           
0x757b488b50a3    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =   .. 
0x757b488b50a6    b820000000              mov eax, 0x20                                          
0x757b488b50ab    4983c608                add r14, 0x8                                           
0x757b488b50af    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =      .. 
0x757b488b50b2    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b50bc    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b50c6    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.n .. 
0x757b488b50c9    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b50d3    4881c020060000          add rax, 0x620                                         
 .. na4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4. .. 
0x757b488b50da    48b910e81f487b750000    mov rcx, 0x757b481fe810                                
0x757b488b50e4    4881c128060000          add rcx, 0x628                                         
 .. na4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\n .. 
0x757b488b50eb    488908                  mov [rax], rcx                                         
 .. des [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust b .. 
0x757b488b50ee    48b810e81f487b750000    mov rax, 0x757b481fe810                                
 .. rence =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3  .. 
0x757b488b50f8    4881c028060000          add rax, 0x628                                         
 .. a4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump"  .. 
0x757b488b50ff    48b910e81f487b750000    mov rcx, 0x757b481fe810                                
0x757b488b5109    4881c120060000          add rcx, 0x620                                         
 .. tna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump .. 
0x757b488b5110    488908                  mov [rax], rcx                                         
0x757b488b5113    48b8c9d410487b750000    mov rax, 0x757b4810d4c9                                
0x757b488b511d    4983c608                add r14, 0x8                                           
0x757b488b5121    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b5124    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b512e    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. a4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b5131    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b513b    4881c020060000          add rax, 0x620                                         
0x757b488b5142    4983c608                add r14, 0x8                                           
0x757b488b5146    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b5149    b820000000              mov eax, 0x20                                          
0x757b488b514e    4983c608                add r14, 0x8                                           
0x757b488b5152    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b5155    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b515f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5169    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b516c    48b841d510487b750000    mov rax, 0x757b4810d541       < string : 'testna4 = ' >
0x757b488b5176    4983c608                add r14, 0x8                                           
0x757b488b517a    498906                  mov [r14], rax                                         
 ..  [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b517d    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b5187    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b518a    48b810e81f487b750000    mov rax, 0x757b481fe810                                
0x757b488b5194    4881c000000000          add rax, 0x0                                           
0x757b488b519b    4983c608                add r14, 0x8                                           
0x757b488b519f    498906                  mov [r14], rax                                         
 .. ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b51a2    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b51ac    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. 2 dump     "testna4 = " ps testna4 hp ;  .. 
0x757b488b51af    c3                      ret                                                    
Word_Disassemble : word - 'testna5' :: codeSize = 685
Word : 0x0000757b4863b09b :: Compiled at : 0x0000757b488b4f03
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 75.21 <::
 
testna4 =  0x0000757b481fe810
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x0000757b481fea10 : Number = 32 :: (little endian dump)
0x0000757b481fea10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fea20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x0000757b481fec20 : Number = 32 :: (little endian dump)
0x0000757b481fec20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fec30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x0000757b481fee30 : Number = 32 :: (little endian dump)
0x0000757b481fee30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x0000757b481fee30 : Number = 32 :: (little endian dump)
0x0000757b481fee30 :  38 ee 1f 48 7b 75 00 00  30 ee 1f 48 7b 75 00 00  8..H{u.. 0..H{u.. 
0x0000757b481fee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 testna4 =  0x0000757b481fe810 
testna4 =  0x0000757b481fe810
DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna <:> csl compiled word
SourceCode for DLLNodeAlloc.tna :> 
: tna testnarr2.nodes [ 1 ] 32 dump testnarr2.nodes [ 1 ].AfterReference 1 = testnarr2.nodes [ 1 ].BeforeReference 2 = testnarr2.nodes [ 1 ] 32 dump ; 
Source code file location of tna : "namespaces/test/arrayTest.csl" : 84.2 :: we are now at : namespaces/test/arrayTest.csl : 90.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b51c4 -- code size = 169 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tna : definition = 0x0000757b488b51c4 : disassembly at namespaces/test/arrayTest.csl : 90.17 :
 ..                             : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [  .. 
0x757b488b51c4    48b810f01f487b750000    mov rax, 0x757b481ff010                                
0x757b488b51ce    4881c010000000          add rax, 0x10                                          
0x757b488b51d5    4983c608                add r14, 0x8                                           
0x757b488b51d9    498906                  mov [r14], rax                                         
 ..       : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2  .. 
0x757b488b51dc    b820000000              mov eax, 0x20                                          
0x757b488b51e1    4983c608                add r14, 0x8                                           
0x757b488b51e5    498906                  mov [r14], rax                                         
 ..    : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =   .. 
0x757b488b51e8    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b51f2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b51fc    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..    testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testna .. 
0x757b488b51ff    48b810f01f487b750000    mov rax, 0x757b481ff010                                
0x757b488b5209    4881c010000000          add rax, 0x10                                          
0x757b488b5210    b901000000              mov ecx, 0x1                                           
 .. estnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b5215    488908                  mov [rax], rcx                                         
 .. 2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b5218    48b810f01f487b750000    mov rax, 0x757b481ff010                                
 .. erence 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b5222    4881c018000000          add rax, 0x18                                          
0x757b488b5229    b902000000              mov ecx, 0x2                                           
 .. stnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b522e    488908                  mov [rax], rcx                                         
 .. .nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b5231    48b810f01f487b750000    mov rax, 0x757b481ff010                                
0x757b488b523b    4881c010000000          add rax, 0x10                                          
0x757b488b5242    4983c608                add r14, 0x8                                           
0x757b488b5246    498906                  mov [r14], rax                                         
 .. erence 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b5249    b820000000              mov eax, 0x20                                          
0x757b488b524e    4983c608                add r14, 0x8                                           
0x757b488b5252    498906                  mov [r14], rax                                         
 .. nce 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b5255    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b525f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5269    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x757b488b526c    c3                      ret                                                    
Word_Disassemble : word - 'tna' :: codeSize = 169
Word : 0x0000757b48649d13 :: Compiled at : 0x0000757b488b51c4
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 90.17 <::

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x0000757b481ff020 : Number = 32 :: (little endian dump)
0x0000757b481ff020 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff030 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x0000757b481ff020 : Number = 32 :: (little endian dump)
0x0000757b481ff020 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff030 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
DLLNodeAlloc.tnarr2a <:> csl compiled word
SourceCode for DLLNodeAlloc.tnarr2a :> 
: tnarr2a ( this ) "tnarr2a" ps nl this . nodes [ 2 ].AfterReference 1 = this . nodes [ 2 ].BeforeReference 2 = this this.size @ dump ; 
Source code file location of tnarr2a : "namespaces/test/arrayTest.csl" : 106.2 :: we are now at : namespaces/test/arrayTest.csl : 112.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b5378 -- code size = 198 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tnarr2a : definition = 0x0000757b488b5378 : disassembly at namespaces/test/arrayTest.csl : 112.21 :
0x757b488b5378    4d897e08                mov [r14+0x8], r15                                     
0x757b488b537c    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b5380    4981c608000000          add r14, 0x8                                           
0x757b488b5387    48b8d7da10487b750000    mov rax, 0x757b4810dad7       < string : 'tnarr2a' >
0x757b488b5391    4983c608                add r14, 0x8                                           
0x757b488b5395    498906                  mov [r14], rax                                         
 .. : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.siz .. 
0x757b488b5398    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b53a2    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ .. 
0x757b488b53a5    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b53af    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b53b9    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. 2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53bc    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b53c0    4881c020000000          add rax, 0x20                                          
0x757b488b53c7    b901000000              mov ecx, 0x1                                           
 ..   this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53cc    488908                  mov [rax], rcx                                         
 .. his . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53cf    498b47f8                mov rax, [r15-0x8]                                     
 .. fterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53d3    4881c028000000          add rax, 0x28                                          
0x757b488b53da    b902000000              mov ecx, 0x2                                           
 ..  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53df    488908                  mov [rax], rcx                                         
 .. is . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53e2    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b53e6    4881c000000000          add rax, 0x0                                           
0x757b488b53ed    4983c608                add r14, 0x8                                           
0x757b488b53f1    498906                  mov [r14], rax                                         
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b53f4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b53f8    4881c000000000          add rax, 0x0                                           
0x757b488b53ff    4983c608                add r14, 0x8                                           
0x757b488b5403    498906                  mov [r14], rax                                         
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b5406    48b81bac62487b750000    mov rax, 0x757b4862ac1b                                
0x757b488b5410    488b00                  mov rax, [rax]                                         
0x757b488b5413    4983c608                add r14, 0x8                                           
0x757b488b5417    498906                  mov [r14], rax                                         
 .. BeforeReference 2 =  this this.size @ dump ; 
0x757b488b541a    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b5424    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b542e    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b5431    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b5435    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b5439    4983ee08                sub r14, 0x8                                           
 .. eReference 2 =  this this.size @ dump ; 
0x757b488b543d    c3                      ret                                                    
Word_Disassemble : word - 'tnarr2a' :: codeSize = 198
Word : 0x0000757b4864fa53 :: Compiled at : 0x0000757b488b5378
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 112.21 <::

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 tnarr2a

Dump at : namespaces/test/arrayTest.csl : 115.15 :
Dump : Address = 0x0000757b481ff210 : Number = 512 :: (little endian dump)
0x0000757b481ff210 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff220 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff230 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff240 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff250 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff260 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff270 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff280 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff290 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff2a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff2b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff2c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff2d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff2e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff2f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff300 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff310 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff320 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff330 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff340 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff350 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff360 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff370 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff380 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff390 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff3a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff3b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff3c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff3d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff3e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff3f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff400 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna3 <:> csl compiled word
SourceCode for DLLNodeAlloc.tna3 :> 
: tna3 ( this ) "tna3" ps this.nodes [ 2 ].AfterReference 1 = this.nodes [ 2 ].BeforeReference 2 = this this.size @ dump ; 
Source code file location of tna3 : "namespaces/test/arrayTest.csl" : 119.2 :: we are now at : namespaces/test/arrayTest.csl : 129.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b5443 -- code size = 175 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tna3 : definition = 0x0000757b488b5443 : disassembly at namespaces/test/arrayTest.csl : 129.9 :
0x757b488b5443    4d897e08                mov [r14+0x8], r15                                     
0x757b488b5447    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b544b    4981c608000000          add r14, 0x8                                           
0x757b488b5452    48b8c8db10487b750000    mov rax, 0x757b4810dbc8       < string : 'tna3' >
0x757b488b545c    4983c608                add r14, 0x8                                           
0x757b488b5460    498906                  mov [r14], rax                                         
 ..        : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dum .. 
0x757b488b5463    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b546d    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..    : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;  .. 
0x757b488b5470    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5474    4881c020000000          add rax, 0x20                                          
0x757b488b547b    b901000000              mov ecx, 0x1                                           
 .. ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b5480    488908                  mov [rax], rcx                                         
 ..  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b5483    498b47f8                mov rax, [r15-0x8]                                     
 .. .AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b5487    4881c028000000          add rax, 0x28                                          
0x757b488b548e    b902000000              mov ecx, 0x2                                           
 .. =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b5493    488908                  mov [rax], rcx                                         
 .. this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b5496    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b549a    4881c000000000          add rax, 0x0                                           
0x757b488b54a1    4983c608                add r14, 0x8                                           
0x757b488b54a5    498906                  mov [r14], rax                                         
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b54a8    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b54ac    4881c000000000          add rax, 0x0                                           
0x757b488b54b3    4983c608                add r14, 0x8                                           
0x757b488b54b7    498906                  mov [r14], rax                                         
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x757b488b54ba    48b81bac62487b750000    mov rax, 0x757b4862ac1b                                
0x757b488b54c4    488b00                  mov rax, [rax]                                         
0x757b488b54c7    4983c608                add r14, 0x8                                           
0x757b488b54cb    498906                  mov [r14], rax                                         
 .. BeforeReference 2 =  this this.size @ dump ; 
0x757b488b54ce    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b54d8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b54e2    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b54e5    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b54e9    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b54ed    4983ee08                sub r14, 0x8                                           
 .. eReference 2 =  this this.size @ dump ; 
0x757b488b54f1    c3                      ret                                                    
Word_Disassemble : word - 'tna3' :: codeSize = 175
Word : 0x0000757b486526db :: Compiled at : 0x0000757b488b5443
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 129.9 <::
 tna3
Dump at : namespaces/test/arrayTest.csl : 130.12 :
Dump : Address = 0x0000757b481ff410 : Number = 512 :: (little endian dump)
0x0000757b481ff410 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff420 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff430 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff440 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff450 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff460 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff470 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff480 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff490 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff500 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff530 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000757b481ff410 tnarr2

 0x0000757b481ff410

Dump at : namespaces/test/arrayTest.csl : 133.14 :
Dump : Address = 0x0000757b481ff410 : Number = 512 :: (little endian dump)
0x0000757b481ff410 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff420 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff430 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff440 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff450 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff460 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff470 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff480 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff490 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff4f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff500 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff530 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff5f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
DLLNodeAlloc.tnax1 <:> csl compiled word
SourceCode for DLLNodeAlloc.tnax1 :> 
: tnax1 ( this ) this nl hp nl this.nodes[3].AfterReference 1 = this.nodes[4].BeforeReference 2 = this.nodes[3] hp this.nodes[3].AfterReference dup hp 16 dump this.nodes[4] hp this.nodes[4].BeforeReference dup hp 16 dump ; 
Source code file location of tnax1 : "namespaces/test/arrayTest.csl" : 135.2 :: we are now at : namespaces/test/arrayTest.csl : 144.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b54f7 -- code size = 345 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tnax1 : definition = 0x0000757b488b54f7 : disassembly at namespaces/test/arrayTest.csl : 144.19 :
0x757b488b54f7    4d897e08                mov [r14+0x8], r15                                     
0x757b488b54fb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b54ff    4981c608000000          add r14, 0x8                                           
0x757b488b5506    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b550a    4881c000000000          add rax, 0x0                                           
0x757b488b5511    4983c608                add r14, 0x8                                           
0x757b488b5515    498906                  mov [r14], rax                                         
 ..         : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   t .. 
0x757b488b5518    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b5522    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b552c    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..      : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this .. 
0x757b488b552f    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5539    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..   : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.no .. 
0x757b488b553c    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b5546    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5550    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
  : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[ .. 
0x757b488b5553    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5557    4881c030000000          add rax, 0x30                                          
0x757b488b555e    b901000000              mov ecx, 0x1                                           
 .. hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dum .. 
0x757b488b5563    488908                  mov [rax], rcx                                         
 .. nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump   .. 
0x757b488b5566    498b47f8                mov rax, [r15-0x8]                                     
 .. [3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4]  .. 
0x757b488b556a    4881c048000000          add rax, 0x48                                          
0x757b488b5571    b902000000              mov ecx, 0x2                                           
 ..  1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4] .. 
0x757b488b5576    488908                  mov [rax], rcx                                         
 .. =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].Be .. 
0x757b488b5579    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b557d    4881c030000000          add rax, 0x30                                          
0x757b488b5584    4983c608                add r14, 0x8                                           
0x757b488b5588    498906                  mov [r14], rax                                         
 .. 4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference  .. 
0x757b488b558b    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5595    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. foreReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup h .. 
0x757b488b5598    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b559c    4881c030000000          add rax, 0x30                                          
0x757b488b55a3    4983c610                add r14, 0x10                                          
0x757b488b55a7    498906                  mov [r14], rax                                         
 .. [3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55aa    498946f8                mov [r14-0x8], rax                                     
 .. hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55ae    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b55b8    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55bb    b810000000              mov eax, 0x10                                          
0x757b488b55c0    4983c608                add r14, 0x8                                           
0x757b488b55c4    498906                  mov [r14], rax                                         
 .. his.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55c7    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b55d1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b55db    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 .. des[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55de    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b55e2    4881c040000000          add rax, 0x40                                          
0x757b488b55e9    4983c608                add r14, 0x8                                           
0x757b488b55ed    498906                  mov [r14], rax                                         
 .. ference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55f0    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b55fa    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. ce dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b55fd    498b47f8                mov rax, [r15-0x8]                                     
 .. ump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b5601    4881c048000000          add rax, 0x48                                          
0x757b488b5608    4983c610                add r14, 0x10                                          
0x757b488b560c    498906                  mov [r14], rax                                         
 .. 4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b560f    498946f8                mov [r14-0x8], rax                                     
 .. p   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b5613    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b561d    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..  this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b5620    b810000000              mov eax, 0x10                                          
0x757b488b5625    4983c608                add r14, 0x8                                           
0x757b488b5629    498906                  mov [r14], rax                                         
 .. is.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b562c    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b5636    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5640    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b5643    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b5647    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b564b    4983ee08                sub r14, 0x8                                           
 .. des[4].BeforeReference dup hp 16 dump ;  .. 
0x757b488b564f    c3                      ret                                                    
Word_Disassemble : word - 'tnax1' :: codeSize = 345
Word : 0x0000757b48654e53 :: Compiled at : 0x0000757b488b54f7
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 144.19 <::

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 0x0000757b481ff610
 0x0000757b481ff640 0x0000757b481ff640
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x0000757b481ff640 : Number = 16 :: (little endian dump)
0x0000757b481ff640 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000757b481ff650 0x0000757b481ff658
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x0000757b481ff658 : Number = 16 :: (little endian dump)
0x0000757b481ff658 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 168.15 : token = class : cloneFlag = 0
 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :> 
: arr2 ( Ar1 a ) a.b1 0x23 = a.c1 0x4567 = a.d1 0x456789 = a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ; 
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 169.2 :: we are now at : namespaces/test/arrayTest.csl : 179.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b5655 -- code size = 227 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr2 : definition = 0x0000757b488b5655 : disassembly at namespaces/test/arrayTest.csl : 179.18 :
0x757b488b5655    4d897e08                mov [r14+0x8], r15                                     
0x757b488b5659    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b565d    4981c608000000          add r14, 0x8                                           
0x757b488b5664    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5668    4881c000000000          add rax, 0x0                                           
0x757b488b566f    b923000000              mov ecx, 0x23                                          
 ..       : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar .. 
0x757b488b5674    488908                  mov [rax], rcx                                         
0x757b488b5677    498b47f8                mov rax, [r15-0x8]                                     
 : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup .. 
0x757b488b567b    4881c001000000          add rax, 0x1                                           
0x757b488b5682    b967450000              mov ecx, 0x4567                                        
 .. a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p .. 
0x757b488b5687    488908                  mov [rax], rcx                                         
0x757b488b568a    498b47f8                mov rax, [r15-0x8]                                     
 ..  a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _a .. 
0x757b488b568e    4881c003000000          add rax, 0x3                                           
0x757b488b5695    b989674500              mov ecx, 0x456789                                      
 ..       a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b569a    488908                  mov [rax], rcx                                         
0x757b488b569d    498b47f8                mov rax, [r15-0x8]                                     
 .. c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56a1    4881c00f000000          add rax, 0xf                                           
 .. 567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56a8    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b56ac    4881c11f000000          add rcx, 0x1f                                          
 .. 7 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56b3    488b09                  mov rcx, [rcx]                                         
 .. a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56b6    488908                  mov [rax], rcx                                         
0x757b488b56b9    498b47f8                mov rax, [r15-0x8]                                     
 .. 6789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56bd    4881c017000000          add rax, 0x17                                          
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56c4    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b56c8    4881c11f000000          add rcx, 0x1f                                          
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56cf    488b09                  mov rcx, [rcx]                                         
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56d2    488908                  mov [rax], rcx                                         
0x757b488b56d5    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56d9    4881c00f000000          add rax, 0xf                                           
0x757b488b56e0    488b00                  mov rax, [rax]                                         
0x757b488b56e3    4983c610                add r14, 0x10                                          
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56e7    498906                  mov [r14], rax                                         
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56ea    498946f8                mov [r14-0x8], rax                                     
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b56ee    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488b56f8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5702    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b5705    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b570f    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b5712    b889000000              mov eax, 0x89                                          
0x757b488b5717    4983c608                add r14, 0x8                                           
0x757b488b571b    498906                  mov [r14], rax                                         
0x757b488b571e    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5728    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b572b    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b572f    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b5733    4983ee08                sub r14, 0x8                                           
 .. a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b5737    c3                      ret                                                    
Word_Disassemble : word - 'arr2' :: codeSize = 227
Word : 0x0000757b4865b98b :: Compiled at : 0x0000757b488b5655
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 179.18 <::

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 arr1 :  namespaces/test/arrayTest.csl 181.22
Dump at : namespaces/test/arrayTest.csl : 181.39 :
Dump : Address = 0x0000757b481ff810 : Number = 39 :: (little endian dump)
0x0000757b481ff810 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff820 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 arr1 :  namespaces/test/arrayTest.csl 186.22
Dump at : namespaces/test/arrayTest.csl : 186.39 :
Dump : Address = 0x0000757b481ff810 : Number = 39 :: (little endian dump)
0x0000757b481ff810 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff820 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 89  ........ ........ 
0x0000757b481ff830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 137
 =============================
Ar1.arr3 <:> csl compiled word
SourceCode for Ar1.arr3 :> 
: arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
Source code file location of arr3 : "namespaces/test/arrayTest.csl" : 191.2 :: we are now at : namespaces/test/arrayTest.csl : 191.99
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b573d -- code size = 167 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr3 : definition = 0x0000757b488b573d : disassembly at namespaces/test/arrayTest.csl : 191.99 :
0x757b488b573d    4d897e08                mov [r14+0x8], r15                                     
0x757b488b5741    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b5745    4981c608000000          add r14, 0x8                                           
 ..                      : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x757b488b574c    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5750    488b00                  mov rax, [rax]                                         
0x757b488b5753    4983c608                add r14, 0x8                                           
0x757b488b5757    480fb6c0                movzx rax, al                                          
0x757b488b575b    498906                  mov [r14], rax                                         
 ..              : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x757b488b575e    b823000000              mov eax, 0x23                                          
0x757b488b5763    4983c608                add r14, 0x8                                           
0x757b488b5767    498906                  mov [r14], rax                                         
0x757b488b576a    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5774    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 .. : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x757b488b5777    498b47f8                mov rax, [r15-0x8]                                     
  : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x757b488b577b    4881c001000000          add rax, 0x1                                           
0x757b488b5782    488b00                  mov rax, [rax]                                         
0x757b488b5785    4983c608                add r14, 0x8                                           
0x757b488b5789    480fb7c0                movzx rax, ax                                          
0x757b488b578d    498906                  mov [r14], rax                                         
 .. Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x757b488b5790    b867450000              mov eax, 0x4567                                        
0x757b488b5795    4983c608                add r14, 0x8                                           
0x757b488b5799    498906                  mov [r14], rax                                         
0x757b488b579c    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b57a6    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 ..  0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x757b488b57a9    498b47f8                mov rax, [r15-0x8]                                     
 .. x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x757b488b57ad    4881c003000000          add rax, 0x3                                           
0x757b488b57b4    488b00                  mov rax, [rax]                                         
0x757b488b57b7    4983c608                add r14, 0x8                                           
0x757b488b57bb    498906                  mov [r14], rax                                         
 .. sert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x757b488b57be    b889674500              mov eax, 0x456789                                      
0x757b488b57c3    4983c608                add r14, 0x8                                           
0x757b488b57c7    498906                  mov [r14], rax                                         
0x757b488b57ca    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b57d4    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b57d7    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b57db    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b57df    4983ee08                sub r14, 0x8                                           
 .. 567 _assert a.d1 32@ 0x456789 _assert ; 
0x757b488b57e3    c3                      ret                                                    
Word_Disassemble : word - 'arr3' :: codeSize = 167
Word : 0x0000757b48660b33 :: Compiled at : 0x0000757b488b573d
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 191.99 <::
 
arr1 :  namespaces/test/arrayTest.csl 192.24
Dump at : namespaces/test/arrayTest.csl : 192.41 :
Dump : Address = 0x0000757b481ff810 : Number = 39 :: (little endian dump)
0x0000757b481ff810 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........ 
0x0000757b481ff820 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........ 
0x0000757b481ff830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :> 
: arr2 ( Ar1 a ) a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ; 
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 196.2 :: we are now at : namespaces/test/arrayTest.csl : 204.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b57e9 -- code size = 170 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr2 : definition = 0x0000757b488b57e9 : disassembly at namespaces/test/arrayTest.csl : 204.18 :
0x757b488b57e9    4d897e08                mov [r14+0x8], r15                                     
0x757b488b57ed    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b57f1    4981c608000000          add r14, 0x8                                           
0x757b488b57f8    498b47f8                mov rax, [r15-0x8]                                     
 ..         : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b57fc    4881c00f000000          add rax, 0xf                                           
 ..   : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b5803    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b5807    4881c11f000000          add rcx, 0x1f                                          
 .. : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x757b488b580e    488b09                  mov rcx, [rcx]                                         
 ..  Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5811    488908                  mov [rax], rcx                                         
0x757b488b5814    498b47f8                mov rax, [r15-0x8]                                     
 ..            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5818    4881c017000000          add rax, 0x17                                          
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b581f    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b5823    4881c11f000000          add rcx, 0x1f                                          
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b582a    488b09                  mov rcx, [rcx]                                         
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b582d    488908                  mov [rax], rcx                                         
0x757b488b5830    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5834    4881c00f000000          add rax, 0xf                                           
0x757b488b583b    488b00                  mov rax, [rax]                                         
0x757b488b583e    4983c610                add r14, 0x10                                          
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5842    498906                  mov [r14], rax                                         
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5845    498946f8                mov [r14-0x8], rax                                     
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5849    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488b5853    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b585d    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5860    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b586a    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b586d    b889000000              mov eax, 0x89                                          
0x757b488b5872    4983c608                add r14, 0x8                                           
0x757b488b5876    498906                  mov [r14], rax                                         
0x757b488b5879    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5883    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b5886    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b588a    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b588e    4983ee08                sub r14, 0x8                                           
 .. a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x757b488b5892    c3                      ret                                                    
Word_Disassemble : word - 'arr2' :: codeSize = 170
Word : 0x0000757b48662193 :: Compiled at : 0x0000757b488b57e9
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 204.18 <::
 137 
arr1 :  namespaces/test/arrayTest.csl 206.24
Dump at : namespaces/test/arrayTest.csl : 206.41 :
Dump : Address = 0x0000757b481ff810 : Number = 39 :: (little endian dump)
0x0000757b481ff810 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........ 
0x0000757b481ff820 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........ 
0x0000757b481ff830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/arrayTest.csl : 207.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Ar1.a3 <:> csl compiled word
SourceCode for Ar1.a3 :> 
: a3 ( n Ar1 a ) a.ar [n @ 1 +] a.ar[n @ 2 +] @ = a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal a.ar[2] @ dup hp 0x89 _assert decimal ; 
Source code file location of a3 : "namespaces/test/arrayTest.csl" : 208.2 :: we are now at : namespaces/test/arrayTest.csl : 213.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b5898 -- code size = 340 bytes
TypeSignature : 
 -----------------------------
Word :: Ar1.a3 : definition = 0x0000757b488b5898 : disassembly at namespaces/test/arrayTest.csl : 213.16 :
0x757b488b5898    4d897e08                mov [r14+0x8], r15                                     
0x757b488b589c    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b58a0    4981c608000000          add r14, 0x8                                           
0x757b488b58a7    498b47f8                mov rax, [r15-0x8]                                     
 ..               : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup  .. 
0x757b488b58ab    4881c007000000          add rax, 0x7                                           
0x757b488b58b2    4983c608                add r14, 0x8                                           
0x757b488b58b6    498906                  mov [r14], rax                                         
 ..           : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0 .. 
0x757b488b58b9    498b47f0                mov rax, [r15-0x10]                                    
 ..       : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89  .. 
0x757b488b58bd    b901000000              mov ecx, 0x1                                           
0x757b488b58c2    4803c1                  add rax, rcx                                           
0x757b488b58c5    486bc008                imul rax, rax, 0x8                                     
 ..     : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _a .. 
0x757b488b58c9    490106                  add [r14], rax                                         
 ..  : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _asse .. 
0x757b488b58cc    498b47f8                mov rax, [r15-0x8]                                     
   : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert .. 
0x757b488b58d0    4881c007000000          add rax, 0x7                                           
0x757b488b58d7    4983c608                add r14, 0x8                                           
0x757b488b58db    498906                  mov [r14], rax                                         
: a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert de .. 
0x757b488b58de    498b47f0                mov rax, [r15-0x10]                                    
 ..  Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b58e2    b902000000              mov ecx, 0x2                                           
0x757b488b58e7    4803c1                  add rax, rcx                                           
0x757b488b58ea    486bc008                imul rax, rax, 0x8                                     
 .. r1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b58ee    490106                  add [r14], rax                                         
 .. a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b58f1    498b06                  mov rax, [r14]                                         
0x757b488b58f4    488b00                  mov rax, [rax]                                         
0x757b488b58f7    498906                  mov [r14], rax                                         
 .. )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b58fa    498b0e                  mov rcx, [r14]                                         
0x757b488b58fd    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b5901    488908                  mov [rax], rcx                                         
0x757b488b5904    4983ee10                sub r14, 0x10                                          
0x757b488b5908    498b47f8                mov rax, [r15-0x8]                                     
 .. ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b590c    4881c007000000          add rax, 0x7                                           
0x757b488b5913    4983c608                add r14, 0x8                                           
0x757b488b5917    498906                  mov [r14], rax                                         
 .. n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b591a    498b47f0                mov rax, [r15-0x10]                                    
 .. 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b591e    b901000000              mov ecx, 0x1                                           
0x757b488b5923    4803c1                  add rax, rcx                                           
0x757b488b5926    486bc008                imul rax, rax, 0x8                                     
 .. +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b592a    490106                  add [r14], rax                                         
 .. a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b592d    498b06                  mov rax, [r14]                                         
0x757b488b5930    488b00                  mov rax, [rax]                                         
0x757b488b5933    498906                  mov [r14], rax                                         
 .. ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b5936    498b06                  mov rax, [r14]                                         
0x757b488b5939    4983c608                add r14, 0x8                                           
0x757b488b593d    498906                  mov [r14], rax                                         
 ..  @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b5940    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b594a    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b594d    b889000000              mov eax, 0x89                                          
0x757b488b5952    4983c608                add r14, 0x8                                           
0x757b488b5956    498906                  mov [r14], rax                                         
0x757b488b5959    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5963    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 ..  a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b5966    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488b5970    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b597a    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
0x757b488b597d    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b5981    4881c017000000          add rax, 0x17                                          
0x757b488b5988    4983c608                add r14, 0x8                                           
0x757b488b598c    498906                  mov [r14], rax                                         
 .. p hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b598f    498b06                  mov rax, [r14]                                         
0x757b488b5992    488b00                  mov rax, [rax]                                         
0x757b488b5995    498906                  mov [r14], rax                                         
 .. hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b5998    498b06                  mov rax, [r14]                                         
0x757b488b599b    4983c608                add r14, 0x8                                           
0x757b488b599f    498906                  mov [r14], rax                                         
 .. x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b59a2    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b59ac    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..  _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b59af    b889000000              mov eax, 0x89                                          
0x757b488b59b4    4983c608                add r14, 0x8                                           
0x757b488b59b8    498906                  mov [r14], rax                                         
0x757b488b59bb    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b59c5    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 .. mal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b59c8    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488b59d2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b59dc    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
0x757b488b59df    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b59e3    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b59e7    4983ee10                sub r14, 0x10                                          
 .. a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x757b488b59eb    c3                      ret                                                    
Word_Disassemble : word - 'a3' :: codeSize = 340
Word : 0x0000757b48665ec3 :: Compiled at : 0x0000757b488b5898
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 213.16 <::
 0x0000000000000089 0x0000000000000089
_ClassTypedef : at namespaces/test/arrayTest.csl : 217.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 219.20
Dump at : namespaces/test/arrayTest.csl : 219.35 :
Dump : Address = 0x0000757b481ff837 : Number = 128 :: (little endian dump)
0x0000757b481ff837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff887 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8a7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's a4 :  namespaces/test/arrayTest.csl 222.20
Dump at : namespaces/test/arrayTest.csl : 222.35 :
Dump : Address = 0x0000757b481ff837 : Number = 128 :: (little endian dump)
0x0000757b481ff837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff887 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's with one 0x89 - can you find it?
 =============================
Ar2.a5 <:> csl compiled word
SourceCode for Ar2.a5 :> 
: a5 ( n m Ar2 a ) a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ = nl "a4 : " ps location a a.size @ dump a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert ; 
Source code file location of a5 : "namespaces/test/arrayTest.csl" : 224.2 :: we are now at : namespaces/test/arrayTest.csl : 229.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b59f1 -- code size = 397 bytes
TypeSignature : 
 -----------------------------
Word :: Ar2.a5 : definition = 0x0000757b488b59f1 : disassembly at namespaces/test/arrayTest.csl : 229.16 :
0x757b488b59f1    4d897e08                mov [r14+0x8], r15                                     
0x757b488b59f5    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b59f9    4981c608000000          add r14, 0x8                                           
0x757b488b5a00    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5a04    4881c000000000          add rax, 0x0                                           
0x757b488b5a0b    4983c608                add r14, 0x8                                           
0x757b488b5a0f    498906                  mov [r14], rax                                         
 ..          : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][ .. 
0x757b488b5a12    498b47e8                mov rax, [r15-0x18]                                    
 ..      : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] .. 
0x757b488b5a16    b901000000              mov ecx, 0x1                                           
0x757b488b5a1b    4803c1                  add rax, rcx                                           
0x757b488b5a1e    486bc020                imul rax, rax, 0x20                                    
 ..    : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ .. 
0x757b488b5a22    490106                  add [r14], rax                                         
 .. : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ du .. 
0x757b488b5a25    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5a29    486bc008                imul rax, rax, 0x8                                     
  : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup  .. 
0x757b488b5a2d    490106                  add [r14], rax                                         
 .. ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp  .. 
0x757b488b5a30    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5a34    4881c000000000          add rax, 0x0                                           
0x757b488b5a3b    4983c608                add r14, 0x8                                           
0x757b488b5a3f    498906                  mov [r14], rax                                         
 ..  Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89  .. 
0x757b488b5a42    498b47e8                mov rax, [r15-0x18]                                    
 ..  a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _ass .. 
0x757b488b5a46    b902000000              mov ecx, 0x2                                           
0x757b488b5a4b    4803c1                  add rax, rcx                                           
0x757b488b5a4e    486bc020                imul rax, rax, 0x20                                    
 ..  )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _asser .. 
0x757b488b5a52    490106                  add [r14], rax                                         
 ..      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert   .. 
0x757b488b5a55    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5a59    486bc008                imul rax, rax, 0x8                                     
 ..    a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5a5d    490106                  add [r14], rax                                         
 .. a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5a60    498b06                  mov rax, [r14]                                         
0x757b488b5a63    488b00                  mov rax, [rax]                                         
0x757b488b5a66    498906                  mov [r14], rax                                         
 .. ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5a69    498b0e                  mov rcx, [r14]                                         
0x757b488b5a6c    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b5a70    488908                  mov [rax], rcx                                         
0x757b488b5a73    4983ee10                sub r14, 0x10                                          
0x757b488b5a77    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b5a81    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5a8b    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. ][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5a8e    48b8ade210487b750000    mov rax, 0x757b4810e2ad       < string : 'a4 : ' >
0x757b488b5a98    4983c608                add r14, 0x8                                           
0x757b488b5a9c    498906                  mov [r14], rax                                         
 .. .ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5a9f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b5aa9    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. [n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5aac    49baddce8a487b750000    mov r10, 0x757b488acedd                                
0x757b488b5ab6    49ffd2                  call r10                      < System.location : 0x0000757b488acedd >
 .. [m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5ab9    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5abd    4881c000000000          add rax, 0x0                                           
0x757b488b5ac4    4983c608                add r14, 0x8                                           
0x757b488b5ac8    498906                  mov [r14], rax                                         
 ..  @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5acb    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5acf    4881c000000000          add rax, 0x0                                           
0x757b488b5ad6    4983c608                add r14, 0x8                                           
0x757b488b5ada    498906                  mov [r14], rax                                         
 .. ] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5add    48b81ba066487b750000    mov rax, 0x757b4866a01b                                
0x757b488b5ae7    488b00                  mov rax, [rax]                                         
0x757b488b5aea    4983c608                add r14, 0x8                                           
0x757b488b5aee    498906                  mov [r14], rax                                         
 ..     nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5af1    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b5afb    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5b05    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b5b08    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5b0c    4881c000000000          add rax, 0x0                                           
0x757b488b5b13    4983c608                add r14, 0x8                                           
0x757b488b5b17    498906                  mov [r14], rax                                         
 ..  ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b1a    498b47e8                mov rax, [r15-0x18]                                    
 .. location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b1e    b901000000              mov ecx, 0x1                                           
0x757b488b5b23    4803c1                  add rax, rcx                                           
0x757b488b5b26    486bc020                imul rax, rax, 0x20                                    
 .. cation a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b2a    490106                  add [r14], rax                                         
 .. ion a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b2d    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5b31    486bc008                imul rax, rax, 0x8                                     
 .. n a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b35    490106                  add [r14], rax                                         
 ..  a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b38    498b06                  mov rax, [r14]                                         
0x757b488b5b3b    488b00                  mov rax, [rax]                                         
0x757b488b5b3e    498906                  mov [r14], rax                                         
 .. .size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b41    498b06                  mov rax, [r14]                                         
0x757b488b5b44    4983c608                add r14, 0x8                                           
0x757b488b5b48    498906                  mov [r14], rax                                         
 .. e @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b4b    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5b55    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..  dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b58    b889000000              mov eax, 0x89                                          
0x757b488b5b5d    4983c608                add r14, 0x8                                           
0x757b488b5b61    498906                  mov [r14], rax                                         
0x757b488b5b64    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5b6e    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b5b71    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b5b75    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b5b79    4983ee18                sub r14, 0x18                                          
 .. [n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x757b488b5b7d    c3                      ret                                                    
Word_Disassemble : word - 'a5' :: codeSize = 397
Word : 0x0000757b4866a9f3 :: Compiled at : 0x0000757b488b59f1
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 229.16 <::

 a4 :  namespaces/test/arrayTest.csl 231.10
Dump at : namespaces/test/arrayTest.csl : 231.10 :
Dump : Address = 0x0000757b481ff837 : Number = 128 :: (little endian dump)
0x0000757b481ff837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff887 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 231.12 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 232.20
Dump at : namespaces/test/arrayTest.csl : 232.32 :
Dump : Address = 0x0000757b481ff837 : Number = 128 :: (little endian dump)
0x0000757b481ff837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff887 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's with one 0x89 - can you find it?
_ClassTypedef : at namespaces/test/arrayTest.csl : 234.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 235.11 :
DataStack depth =   4 : Dsp (R14) = Top = 0x0000757b47211ad8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad8 > = 0x0000757b4810e454       < string : 'a6' >
  DataStack   [  -1 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 0x0000757b481ff97f 0x0000757b481ff97f 0x0000000000000089 0x0000757b481ff97f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 243.20
Dump at : namespaces/test/arrayTest.csl : 243.38 :
Dump : Address = 0x0000757b481ff8b7 : Number = 144 :: (little endian dump)
0x0000757b481ff8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 0x0000757b481ff97f 0x0000757b481ff97f 0x0000000000000089
 0x0000757b481ff937
DataStack at : namespaces/test/arrayTest.csl : 247.42 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x0000757b481ff97f
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000757b481ff937
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 0x0000757b481ff97f 0x0000757b481ff97f 0x0000000000000089
 a6 :  namespaces/test/arrayTest.csl 250.23
Dump at : namespaces/test/arrayTest.csl : 250.38 :
Dump : Address = 0x0000757b481ff8b7 : Number = 144 :: (little endian dump)
0x0000757b481ff8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 137 0x0000757b481ff97f 0x0000000000000089 0x0000757b481ff937 0x0000000000000089 0x0000757b481ff937 0x0000000000000089 0x0000757b481ff937 0x0000000000000000
 a6 :  namespaces/test/arrayTest.csl 258.23
Dump at : namespaces/test/arrayTest.csl : 258.43 :
Dump : Address = 0x0000757b481ff92f : Number = 16 :: (little endian dump)
0x0000757b481ff92f :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar3.a8 <:> csl compiled word
SourceCode for Ar3.a8 :> 
: a8 ( Ar3 a ) a.ar[1][2][1] a.ar[2][2][1] @ = nl "a8.a : " ps location a size @ dump a.ar[1][2][1] dup hp @ dup hp 0x89 _assert a.ar[2][2][1] dup hp @ dup hp 0x89 _assert ; 
Source code file location of a8 : "namespaces/test/arrayTest.csl" : 260.2 :: we are now at : namespaces/test/arrayTest.csl : 271.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b5b83 -- code size = 367 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar3.a8 : definition = 0x0000757b488b5b83 : disassembly at namespaces/test/arrayTest.csl : 271.16 :
0x757b488b5b83    4d897e08                mov [r14+0x8], r15                                     
0x757b488b5b87    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b5b8b    4981c608000000          add r14, 0x8                                           
0x757b488b5b92    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5b96    4881c080000000          add rax, 0x80                                          
 ..     : a8 ( Ar3 a )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x8 .. 
0x757b488b5b9d    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b5ba1    4881c1c8000000          add rcx, 0xc8                                          
0x757b488b5ba8    488b09                  mov rcx, [rcx]                                         
 ..  )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a .. 
0x757b488b5bab    488908                  mov [rax], rcx                                         
0x757b488b5bae    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b5bb8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5bc2    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][ .. 
0x757b488b5bc5    48b84fe510487b750000    mov rax, 0x757b4810e54f       < string : 'a8.a : ' >
0x757b488b5bcf    4983c608                add r14, 0x8                                           
0x757b488b5bd3    498906                  mov [r14], rax                                         
 .. ] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp  .. 
0x757b488b5bd6    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b5be0    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. .ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ d .. 
0x757b488b5be3    49baddce8a487b750000    mov r10, 0x757b488acedd                                
0x757b488b5bed    49ffd2                  call r10                      < System.location : 0x0000757b488acedd >
 .. [1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x8 .. 
0x757b488b5bf0    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5bf4    4881c000000000          add rax, 0x0                                           
0x757b488b5bfb    4983c608                add r14, 0x8                                           
0x757b488b5bff    498906                  mov [r14], rax                                         
 .. ] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89  .. 
0x757b488b5c02    48b8bbf366487b750000    mov rax, 0x757b4866f3bb                                
0x757b488b5c0c    488b00                  mov rax, [rax]                                         
0x757b488b5c0f    4983c608                add r14, 0x8                                           
0x757b488b5c13    498906                  mov [r14], rax                                         
 ..     nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert .. 
0x757b488b5c16    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b5c20    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5c2a    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b5c2d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5c31    4881c080000000          add rax, 0x80                                          
0x757b488b5c38    4983c610                add r14, 0x10                                          
0x757b488b5c3c    498906                  mov [r14], rax                                         
 .. ation a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c3f    498946f8                mov [r14-0x8], rax                                     
 .. n a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c43    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5c4d    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..  size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c50    498b06                  mov rax, [r14]                                         
0x757b488b5c53    488b00                  mov rax, [rax]                                         
0x757b488b5c56    498906                  mov [r14], rax                                         
 .. ize @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c59    498b06                  mov rax, [r14]                                         
0x757b488b5c5c    4983c608                add r14, 0x8                                           
0x757b488b5c60    498906                  mov [r14], rax                                         
 .. @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c63    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5c6d    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. ump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c70    b889000000              mov eax, 0x89                                          
0x757b488b5c75    4983c608                add r14, 0x8                                           
0x757b488b5c79    498906                  mov [r14], rax                                         
0x757b488b5c7c    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5c86    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b5c89    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5c8d    4881c0c8000000          add rax, 0xc8                                          
0x757b488b5c94    4983c610                add r14, 0x10                                          
0x757b488b5c98    498906                  mov [r14], rax                                         
 .. up hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c9b    498946f8                mov [r14-0x8], rax                                     
 .. p 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5c9f    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5ca9    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5cac    498b06                  mov rax, [r14]                                         
0x757b488b5caf    488b00                  mov rax, [rax]                                         
0x757b488b5cb2    498906                  mov [r14], rax                                         
 .. 9 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5cb5    498b06                  mov rax, [r14]                                         
0x757b488b5cb8    4983c608                add r14, 0x8                                           
0x757b488b5cbc    498906                  mov [r14], rax                                         
 .. ssert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5cbf    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5cc9    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. rt      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5ccc    b889000000              mov eax, 0x89                                          
0x757b488b5cd1    4983c608                add r14, 0x8                                           
0x757b488b5cd5    498906                  mov [r14], rax                                         
0x757b488b5cd8    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5ce2    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b5ce5    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b5ce9    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b5ced    4983ee08                sub r14, 0x8                                           
 .. ][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x757b488b5cf1    c3                      ret                                                    
Word_Disassemble : word - 'a8' :: codeSize = 367
Word : 0x0000757b48673c0b :: Compiled at : 0x0000757b488b5b83
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 271.16 <::
 0x0000757b481ff97f 137 a6 :  namespaces/test/arrayTest.csl 274.20
Dump at : namespaces/test/arrayTest.csl : 274.43 :
Dump : Address = 0x0000757b481ff97f : Number = 16 :: (little endian dump)
0x0000757b481ff97f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 a8.a :  namespaces/test/arrayTest.csl 275.6
Dump at : namespaces/test/arrayTest.csl : 275.6 :
Dump : Address = 0x0000757b481ff8b7 : Number = 144 :: (little endian dump)
0x0000757b481ff8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000757b481ff937 0x0000000000000089 0x0000757b481ff97f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 276.20
Dump at : namespaces/test/arrayTest.csl : 276.43 :
Dump : Address = 0x0000757b481ff97f : Number = 16 :: (little endian dump)
0x0000757b481ff97f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar3.a7 <:> csl compiled word, prefix
SourceCode for Ar3.a7 :> 
: a7 ( n, m, o, Ar3 a ) a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ = nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;; 
Source code file location of a7 : "namespaces/test/arrayTest.csl" : 277.2 :: we are now at : namespaces/test/arrayTest.csl : 283.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b5cf7 -- code size = 468 bytes
TypeSignature : 
 -----------------------------
Word :: Ar3.a7 : definition = 0x0000757b488b5cf7 : disassembly at namespaces/test/arrayTest.csl : 283.16 :
0x757b488b5cf7    4d897e08                mov [r14+0x8], r15                                     
0x757b488b5cfb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b5cff    4981c608000000          add r14, 0x8                                           
0x757b488b5d06    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5d0a    4881c000000000          add rax, 0x0                                           
0x757b488b5d11    4983c608                add r14, 0x8                                           
0x757b488b5d15    498906                  mov [r14], rax                                         
 ..     : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @ .. 
0x757b488b5d18    498b47e0                mov rax, [r15-0x20]                                    
 .. : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 .. 
0x757b488b5d1c    b901000000              mov ecx, 0x1                                           
0x757b488b5d21    4803c1                  add rax, rcx                                           
0x757b488b5d24    486bc048                imul rax, rax, 0x48                                    
  : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 d .. 
0x757b488b5d28    490106                  add [r14], rax                                         
 .. ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump .. 
0x757b488b5d2b    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b5d2f    486bc018                imul rax, rax, 0x18                                    
 .. n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump   .. 
0x757b488b5d33    490106                  add [r14], rax                                         
 .. m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump      .. 
0x757b488b5d36    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5d3a    486bc008                imul rax, rax, 0x8                                     
 ..  o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        .. 
0x757b488b5d3e    490106                  add [r14], rax                                         
 ..  Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a. .. 
0x757b488b5d41    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5d45    4881c000000000          add rax, 0x0                                           
0x757b488b5d4c    4983c608                add r14, 0x8                                           
0x757b488b5d50    498906                  mov [r14], rax                                         
 .. a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n  .. 
0x757b488b5d53    498b47e0                mov rax, [r15-0x20]                                    
 ..      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1  .. 
0x757b488b5d57    b902000000              mov ecx, 0x2                                           
0x757b488b5d5c    4803c1                  add rax, rcx                                           
0x757b488b5d5f    486bc048                imul rax, rax, 0x48                                    
 ..    a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +] .. 
0x757b488b5d63    490106                  add [r14], rax                                         
 .. a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m  .. 
0x757b488b5d66    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b5d6a    486bc018                imul rax, rax, 0x18                                    
 .. ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @] .. 
0x757b488b5d6e    490106                  add [r14], rax                                         
 .. n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o  .. 
0x757b488b5d71    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5d75    486bc008                imul rax, rax, 0x8                                     
 .. @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] .. 
0x757b488b5d79    490106                  add [r14], rax                                         
 ..  +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @  .. 
0x757b488b5d7c    498b06                  mov rax, [r14]                                         
0x757b488b5d7f    488b00                  mov rax, [rax]                                         
0x757b488b5d82    498906                  mov [r14], rax                                         
 .. ][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ du .. 
0x757b488b5d85    498b0e                  mov rcx, [r14]                                         
0x757b488b5d88    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b5d8c    488908                  mov [rax], rcx                                         
0x757b488b5d8f    4983ee10                sub r14, 0x10                                          
0x757b488b5d93    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b5d9d    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5da7    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. ] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89  .. 
0x757b488b5daa    48b8a7e610487b750000    mov rax, 0x757b4810e6a7       < string : 'a7.a : ' >
0x757b488b5db4    4983c608                add r14, 0x8                                           
0x757b488b5db8    498906                  mov [r14], rax                                         
 ..  2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert; .. 
0x757b488b5dbb    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b5dc5    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5dc8    49baddce8a487b750000    mov r10, 0x757b488acedd                                
0x757b488b5dd2    49ffd2                  call r10                      < System.location : 0x0000757b488acedd >
 ..  @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5dd5    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5dd9    4881c000000000          add rax, 0x0                                           
0x757b488b5de0    4983c608                add r14, 0x8                                           
0x757b488b5de4    498906                  mov [r14], rax                                         
 ..  =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5de7    498b47e0                mov rax, [r15-0x20]                                    
 ..     nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5deb    b901000000              mov ecx, 0x1                                           
0x757b488b5df0    4803c1                  add rax, rcx                                           
0x757b488b5df3    486bc048                imul rax, rax, 0x48                                    
 ..   nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5df7    490106                  add [r14], rax                                         
 .. l "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5dfa    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b5dfe    486bc018                imul rax, rax, 0x18                                    
 .. "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e02    490106                  add [r14], rax                                         
 .. .a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e05    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5e09    486bc008                imul rax, rax, 0x8                                     
 ..  : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e0d    490106                  add [r14], rax                                         
 .. " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e10    b810000000              mov eax, 0x10                                          
0x757b488b5e15    4983c608                add r14, 0x8                                           
0x757b488b5e19    498906                  mov [r14], rax                                         
 .. s location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e1c    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b5e26    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5e30    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b5e33    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b5e37    4881c000000000          add rax, 0x0                                           
0x757b488b5e3e    4983c608                add r14, 0x8                                           
0x757b488b5e42    498906                  mov [r14], rax                                         
 ..  @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e45    498b47e0                mov rax, [r15-0x20]                                    
 ..  +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e49    b901000000              mov ecx, 0x1                                           
0x757b488b5e4e    4803c1                  add rax, rcx                                           
0x757b488b5e51    486bc048                imul rax, rax, 0x48                                    
 .. ][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e55    490106                  add [r14], rax                                         
 ..  @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e58    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b5e5c    486bc018                imul rax, rax, 0x18                                    
 .. ][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e60    490106                  add [r14], rax                                         
 ..  @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e63    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b5e67    486bc008                imul rax, rax, 0x8                                     
 .. ] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e6b    490106                  add [r14], rax                                         
 .. 6 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e6e    498b06                  mov rax, [r14]                                         
0x757b488b5e71    488b00                  mov rax, [rax]                                         
0x757b488b5e74    498906                  mov [r14], rax                                         
 .. dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e77    498b06                  mov rax, [r14]                                         
0x757b488b5e7a    4983c608                add r14, 0x8                                           
0x757b488b5e7e    498906                  mov [r14], rax                                         
 ..         a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e81    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b5e8b    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..      a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e8e    b889000000              mov eax, 0x89                                          
0x757b488b5e93    4983c608                add r14, 0x8                                           
0x757b488b5e97    498906                  mov [r14], rax                                         
 .. a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5e9a    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b5ea4    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b5eae    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
0x757b488b5eb1    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b5ebb    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b5ebe    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b5ec2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b5ec6    4983ee20                sub r14, 0x20                                          
 .. 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x757b488b5eca    c3                      ret                                                    
Word_Disassemble : word - 'a7' :: codeSize = 468
Word : 0x0000757b4867a00b :: Compiled at : 0x0000757b488b5cf7
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 283.16 <::
 a6 :  namespaces/test/arrayTest.csl 285.20
Dump at : namespaces/test/arrayTest.csl : 285.43 :
Dump : Address = 0x0000757b481ff97f : Number = 16 :: (little endian dump)
0x0000757b481ff97f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 a7.a :  namespaces/test/arrayTest.csl 287.12
Dump at : namespaces/test/arrayTest.csl : 287.12 :
Dump : Address = 0x0000757b481ff937 : Number = 16 :: (little endian dump)
0x0000757b481ff937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 287.12 :
DataStack depth =  10 : Dsp (R14) = Top = 0x0000757b47211b08, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b08 > = 0x0000000000000089
  DataStack   [  -1 ] < 0x0000757b47211b00 > = 0x0000000000000089
  DataStack   [  -2 ] < 0x0000757b47211af8 > = 0x00005b5fa6eebc20
  DataStack   [  -3 ] < 0x0000757b47211af0 > = 0x0000757b481ff8b7
  DataStack   [  -4 ] < 0x0000757b47211ae8 > = 0x0000000000000001
  DataStack   [  -5 ] < 0x0000757b47211ae0 > = 0x0000000000000002
  DataStack   [  -6 ] < 0x0000757b47211ad8 > = 0x0000000000000000
  DataStack   [  -7 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 a6 :  namespaces/test/arrayTest.csl 288.20
Dump at : namespaces/test/arrayTest.csl : 288.38 :
Dump : Address = 0x0000757b481ff8b7 : Number = 144 :: (little endian dump)
0x0000757b481ff8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 289.15 : token = class : cloneFlag = 0
_ClassTypedef : at namespaces/test/arrayTest.csl : 307.16 : token = class : cloneFlag = 0
 =============================
Ar9.a9 <:> csl compiled word
SourceCode for Ar9.a9 :> 
: a9 ( Ar9 ar9 | d x y z ) x 0 = y 0 = z 0 = d ar9.dimSize @ = { z @ d @ < } { { y @ d @ < } { { x @ d @ < } { ar9.ar [z @][y @][x @ ] x @ = x ++ } while x 0 = y ++ } while x 0 = y 0 = z ++ } while oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67]) a9dump ( 0 246 67 ar9 ) ; 
Source code file location of a9 : "namespaces/test/arrayTest.csl" : 324.2 :: we are now at : namespaces/test/arrayTest.csl : 355.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b63d2 -- code size = 376 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar9.a9 : definition = 0x0000757b488b63d2 : disassembly at namespaces/test/arrayTest.csl : 355.16 :
0x757b488b63d2    4d897e08                mov [r14+0x8], r15                                     
0x757b488b63d6    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b63da    4981c628000000          add r14, 0x28                                          
 ..   : a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             .. 
0x757b488b63e1    49c7471000000000        mov qword [r15+0x10], 0x0                              
: a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ .. 
0x757b488b63e9    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..  ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < .. 
0x757b488b63f1    49c7472000000000        mov qword [r15+0x20], 0x0                              
 .. r9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < } .. 
0x757b488b63f9    498d4708                lea rax, [r15+0x8]                                     
 ..  | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }   .. 
0x757b488b63fd    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b6401    488b09                  mov rcx, [rcx]                                         
 ..     x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {   .. 
0x757b488b6404    488908                  mov [rax], rcx                                         
 .. = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {           .. 
0x757b488b6407    498b4720                mov rax, [r15+0x20]                                    
 .. 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {               .. 
0x757b488b640b    498b4f08                mov rcx, [r15+0x8]                                     
 .. z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 a .. 
0x757b488b640f    483bc1                  cmp rax, rcx                                           
 .. 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9 .. 
0x757b488b6412    0f8dae000000            jge 0x757b488b64c6            < Ar9.a9+244 >
 .. @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ .. 
0x757b488b6418    498b4718                mov rax, [r15+0x18]                                    
 ..     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x .. 
0x757b488b641c    498b4f08                mov rcx, [r15+0x8]                                     
 .. { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ = .. 
0x757b488b6420    483bc1                  cmp rax, rcx                                           
 .. z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =   .. 
0x757b488b6423    0f8d84000000            jge 0x757b488b64ad            < Ar9.a9+219 >
 .. { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++        .. 
0x757b488b6429    498b4710                mov rax, [r15+0x10]                                    
 .. @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++            .. 
0x757b488b642d    498b4f08                mov rcx, [r15+0x8]                                     
 .. @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++                .. 
0x757b488b6431    483bc1                  cmp rax, rcx                                           
 .. < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }  .. 
0x757b488b6434    7d66                    jge 0x488b649c                < Ar9.a9+202 >
0x757b488b6436    0f1f4000                nop [rax]                                              
0x757b488b643a    498b47f8                mov rax, [r15-0x8]                                     
 .. < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 = .. 
0x757b488b643e    4881c008000000          add rax, 0x8                                           
0x757b488b6445    4983c608                add r14, 0x8                                           
0x757b488b6449    498906                  mov [r14], rax                                         
 ..             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =     .. 
0x757b488b644c    498b4720                mov rax, [r15+0x20]                                    
0x757b488b6450    4869c000000100          imul rax, rax, 0x10000                                 
 ..           {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =       .. 
0x757b488b6457    490106                  add [r14], rax                                         
 ..        {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =          .. 
0x757b488b645a    498b4718                mov rax, [r15+0x18]                                    
0x757b488b645e    4869c000010000          imul rax, rax, 0x100                                   
 ..      {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =            .. 
0x757b488b6465    490106                  add [r14], rax                                         
 ..   {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =               .. 
0x757b488b6468    498b4710                mov rax, [r15+0x10]                                    
 .. {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                 .. 
0x757b488b646c    490106                  add [r14], rax                                         
 ..               ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                     .. 
0x757b488b646f    498d4710                lea rax, [r15+0x10]                                    
0x757b488b6473    488b00                  mov rax, [rax]                                         
0x757b488b6476    4983c608                add r14, 0x8                                           
 ..             ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                       .. 
0x757b488b647a    498906                  mov [r14], rax                                         
 ..           ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                         .. 
0x757b488b647d    498b0e                  mov rcx, [r14]                                         
0x757b488b6480    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6484    488908                  mov [rax], rcx                                         
0x757b488b6487    4983ee10                sub r14, 0x10                                          
 .. @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                        y ++          }      .. 
0x757b488b648b    49ff4710                inc qword [r15+0x10]                                   
0x757b488b648f    498b4710                mov rax, [r15+0x10]                                    
0x757b488b6493    498b4f08                mov rcx, [r15+0x8]                                     
0x757b488b6497    483bc1                  cmp rax, rcx                                           
0x757b488b649a    7c9e                    jl 0x488b643a                 < Ar9.a9+104 >
 ..  }             while              x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     .. 
0x757b488b649c    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..        x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     }     while     oPrintf (  .. 
0x757b488b64a4    49ff4718                inc qword [r15+0x18]                                   
0x757b488b64a8    e96bffffff              jmp 0x757b488b6418            < Ar9.a9+70 >
 ..           }         while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][ .. 
0x757b488b64ad    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..       while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      .. 
0x757b488b64b5    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0  .. 
0x757b488b64bd    49ff4720                inc qword [r15+0x20]                                   
0x757b488b64c1    e941ffffff              jmp 0x757b488b6407            < Ar9.a9+53 >
 ..    z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b64c6    48b8dca5c0477b750000    mov rax, 0x757b47c0a5dc                                
0x757b488b64d0    488bf8                  mov rdi, rax                                           
 .. rintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b64d3    498b47f8                mov rax, [r15-0x8]                                     
 .. f ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b64d7    4881c008003901          add rax, 0x1390008                                     
0x757b488b64de    488bc8                  mov rcx, rax                                           
 ..  0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b64e1    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488b64eb    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b64f5    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. x", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b64f8    48c7c000000000          mov rax, 0x0                                           
0x757b488b64ff    4983c608                add r14, 0x8                                           
0x757b488b6503    498906                  mov [r14], rax                                         
 .. , ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b6506    b8f6000000              mov eax, 0xf6                                          
0x757b488b650b    4983c608                add r14, 0x8                                           
0x757b488b650f    498906                  mov [r14], rax                                         
 .. 9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b6512    b843000000              mov eax, 0x43                                          
0x757b488b6517    4983c608                add r14, 0x8                                           
0x757b488b651b    498906                  mov [r14], rax                                         
 .. r[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b651e    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6522    4881c000000000          add rax, 0x0                                           
0x757b488b6529    4983c608                add r14, 0x8                                           
0x757b488b652d    498906                  mov [r14], rax                                         
 .. [67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b6530    49ba1e5f8b487b750000    mov r10, 0x757b488b5f1e                                
0x757b488b653a    49ffd2                  call r10                      < Ar9.a9dump : 0x0000757b488b5f1e >
0x757b488b653d    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b6541    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b6545    4983ee08                sub r14, 0x8                                           
 .. 46][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x757b488b6549    c3                      ret                                                    
Word_Disassemble : word - 'a9' :: codeSize = 376
Word : 0x0000757b4868d07b :: Compiled at : 0x0000757b488b63d2
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 355.16 <::

DataStack at : namespaces/test/arrayTest.csl : 355.18 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 256
ar9.ar[0][246][67] = 0
 Ar9 :  namespaces/test/arrayTest.csl 360.8 : x = 0 y = 246 z = 67
 dimSize = 256
 a = 0x0000757b45c001a8 : a.ar = 0x0000757b45c001b0

Dump at : namespaces/test/arrayTest.csl : 360.8 :
Dump : Address = 0x0000757b4603f7b0 : Number = 256 :: (little endian dump)
0x0000757b4603f7b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x0000757b4603f7c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x0000757b4603f7d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x0000757b4603f7e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x0000757b4603f7f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x0000757b4603f800 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x0000757b4603f810 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x0000757b4603f820 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x0000757b4603f830 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x0000757b4603f840 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x0000757b4603f850 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x0000757b4603f860 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x0000757b4603f870 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x0000757b4603f880 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x0000757b4603f890 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x0000757b4603f8a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

 Ar9 :  namespaces/test/arrayTest.csl 361.25 : x = 0 y = 123 z = 234
 dimSize = 256
 a = 0x0000757b45c001a8 : a.ar = 0x0000757b45c001b0

Dump at : namespaces/test/arrayTest.csl : 361.25 :
Dump : Address = 0x0000757b46aa7cb0 : Number = 256 :: (little endian dump)
0x0000757b46aa7cb0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x0000757b46aa7cc0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x0000757b46aa7cd0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x0000757b46aa7ce0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x0000757b46aa7cf0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x0000757b46aa7d00 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x0000757b46aa7d10 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x0000757b46aa7d20 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x0000757b46aa7d30 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x0000757b46aa7d40 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x0000757b46aa7d50 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x0000757b46aa7d60 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x0000757b46aa7d70 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x0000757b46aa7d80 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x0000757b46aa7d90 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x0000757b46aa7da0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 364.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 0x0000757b481ff947 0x0000757b481ff948 0x0000757b481ff950 26 254
DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 0x0000757b481ff985
 0x0000757b481ff97d

 -----------------------------
 array out of bounds checking with variables?! namespaces/test/arrayTest.csl 386.9
 -----------------------------


Dump at : namespaces/test/arrayTest.csl : 386.9 :
Dump : Address = 0x0000757b481ff962 : Number = 32 :: (little endian dump)
0x0000757b481ff962 :  77 00 00 00 00 00 77 00  00 00 00 00 00 00 00 00  w.....w. ........ 
0x0000757b481ff972 :  00 00 00 00 00 00 00 00  77 00 00 77 00 00 00 00  ........ w..w.... 

 =============================
ct0.tct <:> csl compiled word
SourceCode for ct0.tct :> 
: tct ( y ct0 a ) a.ar [0][0][0] 0x77 = a.ar [0][y @][0] a.ar [0][0][0] @ = a.ar [y @][y @][0] a.ar [0][0][0] @ = a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ = a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ = TODO ( "array out of bounds checking with variables?!" ) a.ar 32 dump a.ar [1][2][2] 7 = a.ar [1][2][2] @ 7 _assert ; 
Source code file location of tct : "namespaces/test/arrayTest.csl" : 373.2 :: we are now at : namespaces/test/arrayTest.csl : 387.16
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b654f -- code size = 630 bytes
TypeSignature : 
 -----------------------------
Word :: ct0.tct : definition = 0x0000757b488b654f : disassembly at namespaces/test/arrayTest.csl : 387.16 :
0x757b488b654f    4d897e08                mov [r14+0x8], r15                                     
0x757b488b6553    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b6557    4981c608000000          add r14, 0x8                                           
0x757b488b655e    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6562    4881c000000000          add rax, 0x0                                           
0x757b488b6569    b977000000              mov ecx, 0x77                                          
: tct ( y ct0 a )     a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @  .. 
0x757b488b656e    488908                  mov [rax], rcx                                         
0x757b488b6571    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6575    4881c000000000          add rax, 0x0                                           
0x757b488b657c    4983c608                add r14, 0x8                                           
0x757b488b6580    498906                  mov [r14], rax                                         
 ..   a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] d .. 
0x757b488b6583    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6587    486bc003                imul rax, rax, 0x3                                     
 .. a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup .. 
0x757b488b658b    490106                  add [r14], rax                                         
 .. 0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp .. 
0x757b488b658e    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6592    4881c000000000          add rax, 0x0                                           
0x757b488b6599    4983c608                add r14, 0x8                                           
0x757b488b659d    498906                  mov [r14], rax                                         
 ..       a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] .. 
0x757b488b65a0    498b06                  mov rax, [r14]                                         
0x757b488b65a3    488b00                  mov rax, [rax]                                         
0x757b488b65a6    498906                  mov [r14], rax                                         
 ..     a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ .. 
0x757b488b65a9    498b0e                  mov rcx, [r14]                                         
0x757b488b65ac    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b65b0    488908                  mov [rax], rcx                                         
0x757b488b65b3    4983ee10                sub r14, 0x10                                          
0x757b488b65b7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b65bb    4881c000000000          add rax, 0x0                                           
0x757b488b65c2    4983c608                add r14, 0x8                                           
0x757b488b65c6    498906                  mov [r14], rax                                         
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [ .. 
0x757b488b65c9    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b65cd    486bc009                imul rax, rax, 0x9                                     
 ..  @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y  .. 
0x757b488b65d1    490106                  add [r14], rax                                         
 .. [0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][ .. 
0x757b488b65d4    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b65d8    486bc003                imul rax, rax, 0x3                                     
 .. ] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y  .. 
0x757b488b65dc    490106                  add [r14], rax                                         
 ..  [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ .. 
0x757b488b65df    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b65e3    4881c000000000          add rax, 0x0                                           
0x757b488b65ea    4983c608                add r14, 0x8                                           
0x757b488b65ee    498906                  mov [r14], rax                                         
 ..     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp .. 
0x757b488b65f1    498b06                  mov rax, [r14]                                         
0x757b488b65f4    488b00                  mov rax, [rax]                                         
0x757b488b65f7    498906                  mov [r14], rax                                         
 ..   a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a .. 
0x757b488b65fa    498b0e                  mov rcx, [r14]                                         
0x757b488b65fd    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6601    488908                  mov [rax], rcx                                         
0x757b488b6604    4983ee10                sub r14, 0x10                                          
0x757b488b6608    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b660c    4881c000000000          add rax, 0x0                                           
0x757b488b6613    4983c608                add r14, 0x8                                           
0x757b488b6617    498906                  mov [r14], rax                                         
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0 .. 
0x757b488b661a    498b47f0                mov rax, [r15-0x10]                                    
 .. ][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @  .. 
0x757b488b661e    b901000000              mov ecx, 0x1                                           
0x757b488b6623    4803c1                  add rax, rcx                                           
0x757b488b6626    486bc009                imul rax, rax, 0x9                                     
 .. 0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =  .. 
0x757b488b662a    490106                  add [r14], rax                                         
 .. a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     .. 
0x757b488b662d    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6631    486bc003                imul rax, rax, 0x3                                     
 .. ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     T .. 
0x757b488b6635    490106                  add [r14], rax                                         
 .. [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO .. 
0x757b488b6638    498b47f0                mov rax, [r15-0x10]                                    
 .. ][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( .. 
0x757b488b663c    490106                  add [r14], rax                                         
 .. ][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "a .. 
0x757b488b663f    498b06                  mov rax, [r14]                                         
0x757b488b6642    4983c608                add r14, 0x8                                           
0x757b488b6646    498906                  mov [r14], rax                                         
 ..  @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array .. 
0x757b488b6649    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b6653    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b665d    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array ou .. 
0x757b488b6660    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b666a    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..    a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out o .. 
0x757b488b666d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6671    4881c000000000          add rax, 0x0                                           
0x757b488b6678    4983c608                add r14, 0x8                                           
0x757b488b667c    498906                  mov [r14], rax                                         
 .. +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checki .. 
0x757b488b667f    498b06                  mov rax, [r14]                                         
0x757b488b6682    488b00                  mov rax, [rax]                                         
0x757b488b6685    498906                  mov [r14], rax                                         
 .. [y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking .. 
0x757b488b6688    498b0e                  mov rcx, [r14]                                         
0x757b488b668b    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b668f    488908                  mov [rax], rcx                                         
0x757b488b6692    4983ee10                sub r14, 0x10                                          
0x757b488b6696    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b669a    4881c000000000          add rax, 0x0                                           
0x757b488b66a1    4983c608                add r14, 0x8                                           
0x757b488b66a5    498906                  mov [r14], rax                                         
 .. dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with varia .. 
0x757b488b66a8    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b66ac    486bc009                imul rax, rax, 0x9                                     
 .. p nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variabl .. 
0x757b488b66b0    490106                  add [r14], rax                                         
 .. l hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables? .. 
0x757b488b66b3    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b66b7    486bc003                imul rax, rax, 0x3                                     
 .. hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" .. 
0x757b488b66bb    490106                  add [r14], rax                                         
 .. a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )  .. 
0x757b488b66be    498b47f0                mov rax, [r15-0x10]                                    
 ..  [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )      .. 
0x757b488b66c2    b901000000              mov ecx, 0x1                                           
0x757b488b66c7    4803c1                  add rax, rcx                                           
 .. 0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a. .. 
0x757b488b66ca    490106                  add [r14], rax                                         
 .. 0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar  .. 
0x757b488b66cd    498b06                  mov rax, [r14]                                         
0x757b488b66d0    4983c608                add r14, 0x8                                           
0x757b488b66d4    498906                  mov [r14], rax                                         
 .. ] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 d .. 
0x757b488b66d7    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b66e1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b66eb    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump .. 
0x757b488b66ee    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b66f8    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump    .. 
0x757b488b66fb    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b66ff    4881c000000000          add rax, 0x0                                           
0x757b488b6706    4983c608                add r14, 0x8                                           
0x757b488b670a    498906                  mov [r14], rax                                         
 ..  @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2 .. 
0x757b488b670d    498b06                  mov rax, [r14]                                         
0x757b488b6710    488b00                  mov rax, [rax]                                         
0x757b488b6713    498906                  mov [r14], rax                                         
 .. ][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2]  .. 
0x757b488b6716    498b0e                  mov rcx, [r14]                                         
0x757b488b6719    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b671d    488908                  mov [rax], rcx                                         
0x757b488b6720    4983ee10                sub r14, 0x10                                          
 .. p nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar  .. 
0x757b488b6724    48b887ef10487b750000    mov rax, 0x757b4810ef87       < string : 'array out of bounds checking with variables?!' >
0x757b488b672e    4983c608                add r14, 0x8                                           
0x757b488b6732    498906                  mov [r14], rax                                         
 .. 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =    .. 
0x757b488b6735    49badbef8a487b750000    mov r10, 0x757b488aefdb                                
0x757b488b673f    49ffd2                  call r10                      < Root.TODO : 0x0000757b488aefdb >
0x757b488b6742    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6746    4881c000000000          add rax, 0x0                                           
0x757b488b674d    4983c608                add r14, 0x8                                           
0x757b488b6751    498906                  mov [r14], rax                                         
 .. checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x757b488b6754    b820000000              mov eax, 0x20                                          
0x757b488b6759    4983c608                add r14, 0x8                                           
0x757b488b675d    498906                  mov [r14], rax                                         
 .. cking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x757b488b6760    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488b676a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b6774    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488b6777    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b677b    4881c011000000          add rax, 0x11                                          
0x757b488b6782    b907000000              mov ecx, 0x7                                           
 ..     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x757b488b6787    488908                  mov [rax], rcx                                         
0x757b488b678a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b678e    4881c011000000          add rax, 0x11                                          
0x757b488b6795    488b00                  mov rax, [rax]                                         
0x757b488b6798    4983c608                add r14, 0x8                                           
 ..  dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x757b488b679c    498906                  mov [r14], rax                                         
 .. ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x757b488b679f    b807000000              mov eax, 0x7                                           
0x757b488b67a4    4983c608                add r14, 0x8                                           
0x757b488b67a8    498906                  mov [r14], rax                                         
0x757b488b67ab    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b67b5    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b67b8    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b67bc    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b67c0    4983ee10                sub r14, 0x10                                          
 .. ] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x757b488b67c4    c3                      ret                                                    
Word_Disassemble : word - 'tct' :: codeSize = 630
Word : 0x0000757b48698b4b :: Compiled at : 0x0000757b488b654f
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 387.16 <::

_ClassTypedef : at namespaces/test/arrayTest.csl : 389.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 0x0000757b481ff986
 0x0000757b481ff998
 0x0000757b481ff986
Dump at : namespaces/test/arrayTest.csl : 397.11 :
Dump : Address = 0x0000757b481ff97d : Number = 32 :: (little endian dump)
0x0000757b481ff97d :  77 00 00 00 00 00 77 00  77 4d 00 00 00 00 00 00  w.....w. wM...... 
0x0000757b481ff98d :  00 00 00 00 00 00 00 00  00 00 00 4d 00 00 00 00  ........ ...M.... 

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
C_Syntax.ctcta <:> csl compiled word, prefix
SourceCode for C_Syntax.ctcta :> 
void ctcta ( y cta a ) { a.ar [0][y + 1][0] = 'M' ; a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ; a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ; a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ; hp ( a.ar [y ][y + 1][1] ) ; a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ; a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ; a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ; hp ( &a.ar ) ; cadump ( &a.ar 27 ) ; } 
Source code file location of ctcta : "namespaces/test/arrayTest.csl" : 407.6 :: we are now at : namespaces/test/arrayTest.csl : 421.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b69a9 -- code size = 1000 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.ctcta : definition = 0x0000757b488b69a9 : disassembly at namespaces/test/arrayTest.csl : 421.10 :
0x757b488b69a9    4d897e08                mov [r14+0x8], r15                                     
0x757b488b69ad    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b69b1    4981c608000000          add r14, 0x8                                           
0x757b488b69b8    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b69bc    4881c000000000          add rax, 0x0                                           
0x757b488b69c3    4983c608                add r14, 0x8                                           
0x757b488b69c7    498906                  mov [r14], rax                                         
 .. void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar  .. 
0x757b488b69ca    498b47f0                mov rax, [r15-0x10]                                    
void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ] .. 
0x757b488b69ce    b901000000              mov ecx, 0x1                                           
0x757b488b69d3    4803c1                  add rax, rcx                                           
0x757b488b69d6    486bc003                imul rax, rax, 0x3                                     
  void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y .. 
0x757b488b69da    490106                  add [r14], rax                                         
 ..  y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][ .. 
0x757b488b69dd    b84d000000              mov eax, 0x4d                                          
0x757b488b69e2    4983c608                add r14, 0x8                                           
0x757b488b69e6    498906                  mov [r14], rax                                         
 ..  ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1 .. 
0x757b488b69e9    498b0e                  mov rcx, [r14]                                         
0x757b488b69ec    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b69f0    488908                  mov [rax], rcx                                         
0x757b488b69f3    4983ee10                sub r14, 0x10                                          
0x757b488b69f7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b69fb    4881c000000000          add rax, 0x0                                           
0x757b488b6a02    4983c608                add r14, 0x8                                           
0x757b488b6a06    498906                  mov [r14], rax                                         
0x757b488b6a09    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6a0d    486bc009                imul rax, rax, 0x9                                     
 ..   a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar  .. 
0x757b488b6a11    490106                  add [r14], rax                                         
 .. ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + .. 
0x757b488b6a14    498b47f0                mov rax, [r15-0x10]                                    
 .. 0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][ .. 
0x757b488b6a18    b901000000              mov ecx, 0x1                                           
0x757b488b6a1d    4803c1                  add rax, rcx                                           
0x757b488b6a20    486bc003                imul rax, rax, 0x3                                     
 ..  [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1 .. 
0x757b488b6a24    490106                  add [r14], rax                                         
 .. [0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 .. 
0x757b488b6a27    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6a2b    4881c000000000          add rax, 0x0                                           
0x757b488b6a32    4983c608                add r14, 0x8                                           
0x757b488b6a36    498906                  mov [r14], rax                                         
 ..  ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar .. 
0x757b488b6a39    498b47f0                mov rax, [r15-0x10]                                    
 ..   a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y  .. 
0x757b488b6a3d    b901000000              mov ecx, 0x1                                           
0x757b488b6a42    4803c1                  add rax, rcx                                           
0x757b488b6a45    486bc003                imul rax, rax, 0x3                                     
 ..     a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [ .. 
0x757b488b6a49    490106                  add [r14], rax                                         
 .. 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ .. 
0x757b488b6a4c    498b0e                  mov rcx, [r14]                                         
0x757b488b6a4f    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6a53    488908                  mov [rax], rcx                                         
0x757b488b6a56    4983ee10                sub r14, 0x10                                          
0x757b488b6a5a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6a5e    4881c000000000          add rax, 0x0                                           
0x757b488b6a65    4983c608                add r14, 0x8                                           
0x757b488b6a69    498906                  mov [r14], rax                                         
0x757b488b6a6c    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6a70    486bc009                imul rax, rax, 0x9                                     
 .. ] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp .. 
0x757b488b6a74    490106                  add [r14], rax                                         
 .. a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a .. 
0x757b488b6a77    498b47f0                mov rax, [r15-0x10]                                    
 ..  [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar  .. 
0x757b488b6a7b    b901000000              mov ecx, 0x1                                           
0x757b488b6a80    4803c1                  add rax, rcx                                           
0x757b488b6a83    486bc003                imul rax, rax, 0x3                                     
 .. ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.a .. 
0x757b488b6a87    490106                  add [r14], rax                                         
0x757b488b6a8a    b801000000              mov eax, 0x1                                           
 .. ][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y  .. 
0x757b488b6a8f    490106                  add [r14], rax                                         
 ..  1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + .. 
0x757b488b6a92    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6a96    4881c000000000          add rax, 0x0                                           
0x757b488b6a9d    4983c608                add r14, 0x8                                           
0x757b488b6aa1    498906                  mov [r14], rax                                         
0x757b488b6aa4    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6aa8    486bc009                imul rax, rax, 0x9                                     
 ..  ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] .. 
0x757b488b6aac    490106                  add [r14], rax                                         
 ..       a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ; .. 
0x757b488b6aaf    498b47f0                mov rax, [r15-0x10]                                    
 ..   a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;     .. 
0x757b488b6ab3    b901000000              mov ecx, 0x1                                           
0x757b488b6ab8    4803c1                  add rax, rcx                                           
0x757b488b6abb    486bc003                imul rax, rax, 0x3                                     
 ..     a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;   .. 
0x757b488b6abf    490106                  add [r14], rax                                         
 ..  + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y .. 
0x757b488b6ac2    498b0e                  mov rcx, [r14]                                         
0x757b488b6ac5    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6ac9    488908                  mov [rax], rcx                                         
0x757b488b6acc    4983ee10                sub r14, 0x10                                          
0x757b488b6ad0    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6ad4    4881c000000000          add rax, 0x0                                           
0x757b488b6adb    4983c608                add r14, 0x8                                           
0x757b488b6adf    498906                  mov [r14], rax                                         
 .. 1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1] .. 
0x757b488b6ae2    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1]  .. 
0x757b488b6ae6    b901000000              mov ecx, 0x1                                           
0x757b488b6aeb    4803c1                  add rax, rcx                                           
0x757b488b6aee    486bc009                imul rax, rax, 0x9                                     
 ..  = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1 .. 
0x757b488b6af2    490106                  add [r14], rax                                         
 .. ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a .. 
0x757b488b6af5    498b47f0                mov rax, [r15-0x10]                                    
 .. y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar  .. 
0x757b488b6af9    b901000000              mov ecx, 0x1                                           
0x757b488b6afe    4803c1                  add rax, rcx                                           
0x757b488b6b01    486bc003                imul rax, rax, 0x3                                     
 ..  [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.a .. 
0x757b488b6b05    490106                  add [r14], rax                                         
 .. [0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y  .. 
0x757b488b6b08    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6b0c    4881c000000000          add rax, 0x0                                           
0x757b488b6b13    4983c608                add r14, 0x8                                           
0x757b488b6b17    498906                  mov [r14], rax                                         
0x757b488b6b1a    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6b1e    486bc009                imul rax, rax, 0x9                                     
 ..      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0 .. 
0x757b488b6b22    490106                  add [r14], rax                                         
 ..  a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;  .. 
0x757b488b6b25    498b47f0                mov rax, [r15-0x10]                                    
 .. r [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      .. 
0x757b488b6b29    b901000000              mov ecx, 0x1                                           
0x757b488b6b2e    4803c1                  add rax, rcx                                           
0x757b488b6b31    486bc003                imul rax, rax, 0x3                                     
 .. .ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;    .. 
0x757b488b6b35    490106                  add [r14], rax                                         
0x757b488b6b38    b801000000              mov eax, 0x1                                           
 .. y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a. .. 
0x757b488b6b3d    490106                  add [r14], rax                                         
 .. 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][ .. 
0x757b488b6b40    498b0e                  mov rcx, [r14]                                         
0x757b488b6b43    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6b47    488908                  mov [rax], rcx                                         
0x757b488b6b4a    4983ee10                sub r14, 0x10                                          
 .. 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y +  .. 
0x757b488b6b4e    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6b52    4881c000000000          add rax, 0x0                                           
0x757b488b6b59    4983c608                add r14, 0x8                                           
0x757b488b6b5d    498906                  mov [r14], rax                                         
0x757b488b6b60    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b6b64    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y  .. 
0x757b488b6b68    490106                  add [r14], rax                                         
 ..  [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] =  .. 
0x757b488b6b6b    498b47f0                mov rax, [r15-0x10]                                    
 .. ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar .. 
0x757b488b6b6f    b901000000              mov ecx, 0x1                                           
0x757b488b6b74    4803c1                  add rax, rcx                                           
0x757b488b6b77    486bc003                imul rax, rax, 0x3                                     
 .. y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a. .. 
0x757b488b6b7b    490106                  add [r14], rax                                         
0x757b488b6b7e    b801000000              mov eax, 0x1                                           
 ..  + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y .. 
0x757b488b6b83    490106                  add [r14], rax                                         
0x757b488b6b86    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b6b90    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
0x757b488b6b93    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6b97    4881c000000000          add rax, 0x0                                           
0x757b488b6b9e    4983c608                add r14, 0x8                                           
0x757b488b6ba2    498906                  mov [r14], rax                                         
 .. hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1]  .. 
0x757b488b6ba5    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;    .. 
0x757b488b6ba9    b901000000              mov ecx, 0x1                                           
0x757b488b6bae    4803c1                  add rax, rcx                                           
0x757b488b6bb1    486bc009                imul rax, rax, 0x9                                     
 ..  ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;  .. 
0x757b488b6bb5    490106                  add [r14], rax                                         
 .. ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;       .. 
0x757b488b6bb8    498b47f0                mov rax, [r15-0x10]                                    
 .. y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar .. 
0x757b488b6bbc    b901000000              mov ecx, 0x1                                           
0x757b488b6bc1    4803c1                  add rax, rcx                                           
0x757b488b6bc4    486bc003                imul rax, rax, 0x3                                     
 ..  [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a. .. 
0x757b488b6bc8    490106                  add [r14], rax                                         
0x757b488b6bcb    b801000000              mov eax, 0x1                                           
 .. [y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y .. 
0x757b488b6bd0    490106                  add [r14], rax                                         
 .. 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1] .. 
0x757b488b6bd3    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6bd7    4881c000000000          add rax, 0x0                                           
0x757b488b6bde    4983c608                add r14, 0x8                                           
0x757b488b6be2    498906                  mov [r14], rax                                         
 .. ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1 .. 
0x757b488b6be5    498b47f0                mov rax, [r15-0x10]                                    
 ..    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y  .. 
0x757b488b6be9    b901000000              mov ecx, 0x1                                           
0x757b488b6bee    4803c1                  add rax, rcx                                           
0x757b488b6bf1    486bc009                imul rax, rax, 0x9                                     
 .. ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][ .. 
0x757b488b6bf5    490106                  add [r14], rax                                         
 .. a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1 .. 
0x757b488b6bf8    498b47f0                mov rax, [r15-0x10]                                    
 ..  [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] =  .. 
0x757b488b6bfc    b901000000              mov ecx, 0x1                                           
0x757b488b6c01    4803c1                  add rax, rcx                                           
0x757b488b6c04    486bc003                imul rax, rax, 0x3                                     
 .. ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1]  .. 
0x757b488b6c08    490106                  add [r14], rax                                         
 .. + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y +  .. 
0x757b488b6c0b    498b0e                  mov rcx, [r14]                                         
0x757b488b6c0e    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6c12    488908                  mov [rax], rcx                                         
0x757b488b6c15    4983ee10                sub r14, 0x10                                          
0x757b488b6c19    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6c1d    4881c000000000          add rax, 0x0                                           
0x757b488b6c24    4983c608                add r14, 0x8                                           
0x757b488b6c28    498906                  mov [r14], rax                                         
 .. = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1] .. 
0x757b488b6c2b    498b47f0                mov rax, [r15-0x10]                                    
 .. ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y]  .. 
0x757b488b6c2f    b901000000              mov ecx, 0x1                                           
0x757b488b6c34    4803c1                  add rax, rcx                                           
0x757b488b6c37    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y .. 
0x757b488b6c3b    490106                  add [r14], rax                                         
 .. [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;   .. 
0x757b488b6c3e    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;       .. 
0x757b488b6c42    b901000000              mov ecx, 0x1                                           
0x757b488b6c47    4803c1                  add rax, rcx                                           
0x757b488b6c4a    486bc003                imul rax, rax, 0x3                                     
 ..  + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;     .. 
0x757b488b6c4e    490106                  add [r14], rax                                         
0x757b488b6c51    498b47f0                mov rax, [r15-0x10]                                    
 .. y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( .. 
0x757b488b6c55    490106                  add [r14], rax                                         
 .. [0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar .. 
0x757b488b6c58    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6c5c    4881c000000000          add rax, 0x0                                           
0x757b488b6c63    4983c608                add r14, 0x8                                           
0x757b488b6c67    498906                  mov [r14], rax                                         
 ..      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;   .. 
0x757b488b6c6a    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     c .. 
0x757b488b6c6e    b901000000              mov ecx, 0x1                                           
0x757b488b6c73    4803c1                  add rax, rcx                                           
0x757b488b6c76    486bc009                imul rax, rax, 0x9                                     
 ..    a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     .. 
0x757b488b6c7a    490106                  add [r14], rax                                         
 .. ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadu .. 
0x757b488b6c7d    498b47f0                mov rax, [r15-0x10]                                    
 .. y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( .. 
0x757b488b6c81    b901000000              mov ecx, 0x1                                           
0x757b488b6c86    4803c1                  add rax, rcx                                           
0x757b488b6c89    486bc003                imul rax, rax, 0x3                                     
 ..  [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump .. 
0x757b488b6c8d    490106                  add [r14], rax                                         
0x757b488b6c90    b801000000              mov eax, 0x1                                           
 ..  1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a .. 
0x757b488b6c95    490106                  add [r14], rax                                         
 .. 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a. .. 
0x757b488b6c98    498b0e                  mov rcx, [r14]                                         
0x757b488b6c9b    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6c9f    488908                  mov [rax], rcx                                         
0x757b488b6ca2    4983ee10                sub r14, 0x10                                          
0x757b488b6ca6    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6caa    4881c000000000          add rax, 0x0                                           
0x757b488b6cb1    4983c608                add r14, 0x8                                           
0x757b488b6cb5    498906                  mov [r14], rax                                         
 .. = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cb8    498b47f0                mov rax, [r15-0x10]                                    
 .. ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cbc    b901000000              mov ecx, 0x1                                           
0x757b488b6cc1    4803c1                  add rax, rcx                                           
0x757b488b6cc4    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cc8    490106                  add [r14], rax                                         
 .. [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6ccb    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6ccf    b901000000              mov ecx, 0x1                                           
0x757b488b6cd4    4803c1                  add rax, rcx                                           
0x757b488b6cd7    486bc003                imul rax, rax, 0x3                                     
 ..  + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cdb    490106                  add [r14], rax                                         
 .. [y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cde    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6ce2    b901000000              mov ecx, 0x1                                           
0x757b488b6ce7    4803c1                  add rax, rcx                                           
 ..  + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cea    490106                  add [r14], rax                                         
 .. ] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6ced    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6cf1    4881c000000000          add rax, 0x0                                           
0x757b488b6cf8    4983c608                add r14, 0x8                                           
0x757b488b6cfc    498906                  mov [r14], rax                                         
 ..    a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6cff    498b47f0                mov rax, [r15-0x10]                                    
 .. .ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d03    b901000000              mov ecx, 0x1                                           
0x757b488b6d08    4803c1                  add rax, rcx                                           
0x757b488b6d0b    486bc009                imul rax, rax, 0x9                                     
 ..  a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d0f    490106                  add [r14], rax                                         
 ..  [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d12    498b47f0                mov rax, [r15-0x10]                                    
 .. + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d16    b901000000              mov ecx, 0x1                                           
0x757b488b6d1b    4803c1                  add rax, rcx                                           
0x757b488b6d1e    486bc003                imul rax, rax, 0x3                                     
 .. y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d22    490106                  add [r14], rax                                         
0x757b488b6d25    498b47f0                mov rax, [r15-0x10]                                    
 .. ][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d29    490106                  add [r14], rax                                         
 .. [1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d2c    498b0e                  mov rcx, [r14]                                         
0x757b488b6d2f    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6d33    488908                  mov [rax], rcx                                         
0x757b488b6d36    4983ee10                sub r14, 0x10                                          
 .. = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d3a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6d3e    4881c000000000          add rax, 0x0                                           
0x757b488b6d45    4983c608                add r14, 0x8                                           
0x757b488b6d49    498906                  mov [r14], rax                                         
0x757b488b6d4c    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488b6d56    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. ] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d59    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b6d5d    4881c000000000          add rax, 0x0                                           
0x757b488b6d64    4983c608                add r14, 0x8                                           
0x757b488b6d68    498906                  mov [r14], rax                                         
 ..     hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d6b    b81b000000              mov eax, 0x1b                                          
0x757b488b6d70    4983c608                add r14, 0x8                                           
0x757b488b6d74    498906                  mov [r14], rax                                         
 .. ][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d77    49ba5b698b487b750000    mov r10, 0x757b488b695b                                
0x757b488b6d81    49ffd2                  call r10                      < cta.cadump : 0x0000757b488b695b >
0x757b488b6d84    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b6d88    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b6d8c    4983ee10                sub r14, 0x10                                          
 ..  &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x757b488b6d90    c3                      ret                                                    
Word_Disassemble : word - 'ctcta' :: codeSize = 1000
Word : 0x0000757b486ab4e3 :: Compiled at : 0x0000757b488b69a9
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 421.10 <::
 0x0000757b481ff9a8 0x0000757b481ff998
Dump at : namespaces/test/arrayTest.csl : 422.16 :
Dump : Address = 0x0000757b481ff998 : Number = 27 :: (little endian dump)
0x0000757b481ff998 :  4d 00 00 00 00 00 4d 00  00 00 00 00 00 00 00 9e  M.....M. ........ 
0x0000757b481ff9a8 :  a7 f9 1f 48 7b 75 00 00  a8 b1 b1 f9 1f 48 7b 75  ...H{u.. .....H{u 

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

arr10 = 757b44a001a8 : arr10->dimSize = 256
Dump at : namespaces/test/arrayTest.csl : 434.17 :
Dump : Address = 0x0000757b44a001a8 : Number = 16 :: (little endian dump)
0x0000757b44a001a8 :  00 01 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000757b44a001a8
 =============================
C_Syntax.CSL_a10 <:> csl compiled word
SourceCode for C_Syntax.CSL_a10 :> 
void CSL_a10 ( ) { Ar10 * a = arr10 ; int64 x, y, z, dSize = a->dimSize ; x = 0, y = 0, z = 0 ; while ( z < dSize ) { while ( y < dSize ) { while ( x < dSize ) { a->ar [z][y][x] = x ; x ++ ; } x = 0, y ++ ; } x = 0, y = 0, z ++ ; } oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ; a10dump ( 0 0 0 a ) ; a10dump ( 1 4 0 a ) ; oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; a10dump ( 67 246 0 a ) ; a10dump ( 1 34 0 a ) ; } 
Source code file location of CSL_a10 : "namespaces/test/arrayTest.csl" : 448.8 :: we are now at : namespaces/test/arrayTest.csl : 488.12
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b6e29 -- code size = 655 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CSL_a10 : definition = 0x0000757b488b6e29 : disassembly at namespaces/test/arrayTest.csl : 488.12 :
0x757b488b6e29    4d897e08                mov [r14+0x8], r15                                     
0x757b488b6e2d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b6e31    4981c630000000          add r14, 0x30                                          
 ..  void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize   .. 
0x757b488b6e38    48b8a801a0447b750000    mov rax, 0x757b44a001a8                                
0x757b488b6e42    4881c000000000          add rax, 0x0                                           
 ..      void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSi .. 
0x757b488b6e49    49894708                mov [r15+0x8], rax                                     
 ..  = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize ) .. 
0x757b488b6e4d    498b4708                mov rax, [r15+0x8]                                     
0x757b488b6e51    4881c000000000          add rax, 0x0                                           
0x757b488b6e58    488b00                  mov rax, [rax]                                         
 .. Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < .. 
0x757b488b6e5b    49894728                mov [r15+0x28], rax                                    
 .. 4 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {          .. 
0x757b488b6e5f    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..  z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             whi .. 
0x757b488b6e67    49c7471800000000        mov qword [r15+0x18], 0x0                              
 .. ze = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x  .. 
0x757b488b6e6f    49c7472000000000        mov qword [r15+0x20], 0x0                              
 ..   x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )            .. 
0x757b488b6e77    498b4720                mov rax, [r15+0x20]                                    
 .. = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {  .. 
0x757b488b6e7b    498b4f28                mov rcx, [r15+0x28]                                    
 .. x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )              .. 
0x757b488b6e7f    483bc1                  cmp rax, rcx                                           
0x757b488b6e82    0f8dab000000            jge 0x757b488b6f33            < C_Syntax.CSL_a10+266 >
 ..  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] .. 
0x757b488b6e88    498b4718                mov rax, [r15+0x18]                                    
 ..  < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x .. 
0x757b488b6e8c    498b4f28                mov rcx, [r15+0x28]                                    
 ..  z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = .. 
0x757b488b6e90    483bc1                  cmp rax, rcx                                           
0x757b488b6e93    0f8d81000000            jge 0x757b488b6f1a            < C_Syntax.CSL_a10+241 >
 .. dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             .. 
0x757b488b6e99    498b4710                mov rax, [r15+0x10]                                    
 .. e )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }   .. 
0x757b488b6e9d    498b4f28                mov rcx, [r15+0x28]                                    
 .. ize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             } .. 
0x757b488b6ea1    483bc1                  cmp rax, rcx                                           
0x757b488b6ea4    7d63                    jge 0x488b6f09                < C_Syntax.CSL_a10+224 >
0x757b488b6ea6    0f1f4000                nop [rax]                                              
0x757b488b6eaa    498b4708                mov rax, [r15+0x8]                                     
 .. ze )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }       .. 
0x757b488b6eae    4881c008000000          add rax, 0x8                                           
0x757b488b6eb5    4983c608                add r14, 0x8                                           
0x757b488b6eb9    498906                  mov [r14], rax                                         
 .. )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }          .. 
0x757b488b6ebc    498b4720                mov rax, [r15+0x20]                                    
0x757b488b6ec0    4869c000000100          imul rax, rax, 0x10000                                 
 ..              {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x .. 
0x757b488b6ec7    490106                  add [r14], rax                                         
0x757b488b6eca    498b4718                mov rax, [r15+0x18]                                    
0x757b488b6ece    4869c000010000          imul rax, rax, 0x100                                   
 ..           {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x =  .. 
0x757b488b6ed5    490106                  add [r14], rax                                         
0x757b488b6ed8    498b4710                mov rax, [r15+0x10]                                    
 ..        {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0,  .. 
0x757b488b6edc    490106                  add [r14], rax                                         
 ..   {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0 .. 
0x757b488b6edf    498b4710                mov rax, [r15+0x10]                                    
0x757b488b6ee3    4983c608                add r14, 0x8                                           
0x757b488b6ee7    498906                  mov [r14], rax                                         
 ..     {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = .. 
0x757b488b6eea    498b0e                  mov rcx, [r14]                                         
0x757b488b6eed    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b6ef1    488908                  mov [rax], rcx                                         
0x757b488b6ef4    4983ee10                sub r14, 0x10                                          
 .. >ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        .. 
0x757b488b6ef8    49ff4710                inc qword [r15+0x10]                                   
0x757b488b6efc    498b4710                mov rax, [r15+0x10]                                    
0x757b488b6f00    498b4f28                mov rcx, [r15+0x28]                                    
0x757b488b6f04    483bc1                  cmp rax, rcx                                           
0x757b488b6f07    7ca1                    jl 0x488b6eaa                 < C_Syntax.CSL_a10+129 >
 ..   x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx .. 
0x757b488b6f09    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar .. 
0x757b488b6f11    49ff4718                inc qword [r15+0x18]                                   
0x757b488b6f15    e96effffff              jmp 0x757b488b6e88            < C_Syntax.CSL_a10+95 >
 ..    x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump  .. 
0x757b488b6f1a    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 .. 
0x757b488b6f22    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..  ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;   .. 
0x757b488b6f2a    49ff4720                inc qword [r15+0x20]                                   
0x757b488b6f2e    e944ffffff              jmp 0x757b488b6e77            < C_Syntax.CSL_a10+78 >
 .. y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;    .. 
0x757b488b6f33    48b82c5ac2477b750000    mov rax, 0x757b47c25a2c                                
0x757b488b6f3d    488bf8                  mov rdi, rax                                           
 ..   oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][2 .. 
0x757b488b6f40    498b4708                mov rax, [r15+0x8]                                     
 .. Printf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246] .. 
0x757b488b6f44    4881c008000d00          add rax, 0xd0008                                       
0x757b488b6f4b    488bc8                  mov rcx, rax                                           
 ..    x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4  .. 
0x757b488b6f4e    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488b6f58    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b6f62    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67 .. 
0x757b488b6f65    48c7c000000000          mov rax, 0x0                                           
0x757b488b6f6c    4983c608                add r14, 0x8                                           
0x757b488b6f70    498906                  mov [r14], rax                                         
 .. x", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) .. 
0x757b488b6f73    48c7c000000000          mov rax, 0x0                                           
0x757b488b6f7a    4983c608                add r14, 0x8                                           
0x757b488b6f7e    498906                  mov [r14], rax                                         
 .. , a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; .. 
0x757b488b6f81    48c7c000000000          mov rax, 0x0                                           
0x757b488b6f88    4983c608                add r14, 0x8                                           
0x757b488b6f8c    498906                  mov [r14], rax                                         
 .. a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;   .. 
0x757b488b6f8f    498b4708                mov rax, [r15+0x8]                                     
0x757b488b6f93    4881c000000000          add rax, 0x0                                           
0x757b488b6f9a    4983c608                add r14, 0x8                                           
0x757b488b6f9e    498906                  mov [r14], rax                                         
 .. ][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[ .. 
0x757b488b6fa1    49ba78618b487b750000    mov r10, 0x757b488b6178                                
0x757b488b6fab    49ffd2                  call r10                      < Ar10.a10dump : 0x0000757b488b6178 >
 ..  a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 .. 
0x757b488b6fae    b801000000              mov eax, 0x1                                           
0x757b488b6fb3    4983c608                add r14, 0x8                                           
0x757b488b6fb7    498906                  mov [r14], rax                                         
 .. 10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a .. 
0x757b488b6fba    b804000000              mov eax, 0x4                                           
0x757b488b6fbf    4983c608                add r14, 0x8                                           
0x757b488b6fc3    498906                  mov [r14], rax                                         
 .. dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) .. 
0x757b488b6fc6    48c7c000000000          mov rax, 0x0                                           
0x757b488b6fcd    4983c608                add r14, 0x8                                           
0x757b488b6fd1    498906                  mov [r14], rax                                         
 .. mp ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ; .. 
0x757b488b6fd4    498b4708                mov rax, [r15+0x8]                                     
0x757b488b6fd8    4881c000000000          add rax, 0x0                                           
0x757b488b6fdf    4983c608                add r14, 0x8                                           
0x757b488b6fe3    498906                  mov [r14], rax                                         
 .. [7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump  .. 
0x757b488b6fe6    49ba78618b487b750000    mov r10, 0x757b488b6178                                
0x757b488b6ff0    49ffd2                  call r10                      < Ar10.a10dump : 0x0000757b488b6178 >
 ..  a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34  .. 
0x757b488b6ff3    48b8125cc2477b750000    mov rax, 0x757b47c25c12                                
0x757b488b6ffd    488bf8                  mov rdi, rax                                           
 .. Printf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7000    498b4708                mov rax, [r15+0x8]                                     
 .. ntf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7004    4881c008003901          add rax, 0x1390008                                     
0x757b488b700b    488bc8                  mov rcx, rax                                           
 .. a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10du .. 
0x757b488b700e    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488b7018    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b7022    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. ", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7025    b843000000              mov eax, 0x43                                          
0x757b488b702a    4983c608                add r14, 0x8                                           
0x757b488b702e    498906                  mov [r14], rax                                         
 .. a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7031    b8f6000000              mov eax, 0xf6                                          
0x757b488b7036    4983c608                add r14, 0x8                                           
0x757b488b703a    498906                  mov [r14], rax                                         
 .. r[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b703d    48c7c000000000          mov rax, 0x0                                           
0x757b488b7044    4983c608                add r14, 0x8                                           
0x757b488b7048    498906                  mov [r14], rax                                         
 .. 0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b704b    498b4708                mov rax, [r15+0x8]                                     
0x757b488b704f    4881c000000000          add rax, 0x0                                           
0x757b488b7056    4983c608                add r14, 0x8                                           
0x757b488b705a    498906                  mov [r14], rax                                         
 .. [67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b705d    49ba78618b487b750000    mov r10, 0x757b488b6178                                
0x757b488b7067    49ffd2                  call r10                      < Ar10.a10dump : 0x0000757b488b6178 >
 .. 0dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b706a    b801000000              mov eax, 0x1                                           
0x757b488b706f    4983c608                add r14, 0x8                                           
0x757b488b7073    498906                  mov [r14], rax                                         
 .. ump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7076    b822000000              mov eax, 0x22                                          
0x757b488b707b    4983c608                add r14, 0x8                                           
0x757b488b707f    498906                  mov [r14], rax                                         
 ..  ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7082    48c7c000000000          mov rax, 0x0                                           
0x757b488b7089    4983c608                add r14, 0x8                                           
0x757b488b708d    498906                  mov [r14], rax                                         
 ..  67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b7090    498b4708                mov rax, [r15+0x8]                                     
0x757b488b7094    4881c000000000          add rax, 0x0                                           
0x757b488b709b    4983c608                add r14, 0x8                                           
0x757b488b709f    498906                  mov [r14], rax                                         
 .. ) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b70a2    49ba78618b487b750000    mov r10, 0x757b488b6178                                
0x757b488b70ac    49ffd2                  call r10                      < Ar10.a10dump : 0x0000757b488b6178 >
0x757b488b70af    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b70b3    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x757b488b70b7    c3                      ret                                                    
Word_Disassemble : word - 'CSL_a10' :: codeSize = 655
Word : 0x0000757b486bc1db :: Compiled at : 0x0000757b488b6e29
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 488.12 <::
 0x0000757b44a001a8
arr10->dimSize = 256
a->ar[0][6][7] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 0 y = 0 z = 0
 dimSize = 256
 a = 0x0000757b44a001a8 a.ar = 0x0000757b44a001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x0000757b44a001b0 : Number = 256 :: (little endian dump)
0x0000757b44a001b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x0000757b44a001c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x0000757b44a001d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x0000757b44a001e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x0000757b44a001f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x0000757b44a00200 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x0000757b44a00210 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x0000757b44a00220 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x0000757b44a00230 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x0000757b44a00240 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x0000757b44a00250 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x0000757b44a00260 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x0000757b44a00270 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x0000757b44a00280 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x0000757b44a00290 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x0000757b44a002a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 4 z = 0
 dimSize = 256
 a = 0x0000757b44a001a8 a.ar = 0x0000757b44a001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x0000757b44a005b1 : Number = 256 :: (little endian dump)
0x0000757b44a005b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........ 
0x0000757b44a005c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......  
0x0000757b44a005d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0 
0x0000757b44a005e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@ 
0x0000757b44a005f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 
0x0000757b44a00601 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_` 
0x0000757b44a00611 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop 
0x0000757b44a00621 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~.. 
0x0000757b44a00631 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........ 
0x0000757b44a00641 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........ 
0x0000757b44a00651 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........ 
0x0000757b44a00661 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........ 
0x0000757b44a00671 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........ 
0x0000757b44a00681 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........ 
0x0000757b44a00691 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........ 
0x0000757b44a006a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........ 

a->ar[0][246][67] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 67 y = 246 z = 0
 dimSize = 256
 a = 0x0000757b44a001a8 a.ar = 0x0000757b44a001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x0000757b44a0f7f3 : Number = 256 :: (little endian dump)
0x0000757b44a0f7f3 :  43 44 45 46 47 48 49 4a  4b 4c 4d 4e 4f 50 51 52  CDEFGHIJ KLMNOPQR 
0x0000757b44a0f803 :  53 54 55 56 57 58 59 5a  5b 5c 5d 5e 5f 60 61 62  STUVWXYZ [\]^_`ab 
0x0000757b44a0f813 :  63 64 65 66 67 68 69 6a  6b 6c 6d 6e 6f 70 71 72  cdefghij klmnopqr 
0x0000757b44a0f823 :  73 74 75 76 77 78 79 7a  7b 7c 7d 7e 7f 80 81 82  stuvwxyz {|}~.... 
0x0000757b44a0f833 :  83 84 85 86 87 88 89 8a  8b 8c 8d 8e 8f 90 91 92  ........ ........ 
0x0000757b44a0f843 :  93 94 95 96 97 98 99 9a  9b 9c 9d 9e 9f a0 a1 a2  ........ ........ 
0x0000757b44a0f853 :  a3 a4 a5 a6 a7 a8 a9 aa  ab ac ad ae af b0 b1 b2  ........ ........ 
0x0000757b44a0f863 :  b3 b4 b5 b6 b7 b8 b9 ba  bb bc bd be bf c0 c1 c2  ........ ........ 
0x0000757b44a0f873 :  c3 c4 c5 c6 c7 c8 c9 ca  cb cc cd ce cf d0 d1 d2  ........ ........ 
0x0000757b44a0f883 :  d3 d4 d5 d6 d7 d8 d9 da  db dc dd de df e0 e1 e2  ........ ........ 
0x0000757b44a0f893 :  e3 e4 e5 e6 e7 e8 e9 ea  eb ec ed ee ef f0 f1 f2  ........ ........ 
0x0000757b44a0f8a3 :  f3 f4 f5 f6 f7 f8 f9 fa  fb fc fd fe ff 00 01 02  ........ ........ 
0x0000757b44a0f8b3 :  03 04 05 06 07 08 09 0a  0b 0c 0d 0e 0f 10 11 12  ........ ........ 
0x0000757b44a0f8c3 :  13 14 15 16 17 18 19 1a  1b 1c 1d 1e 1f 20 21 22  ........ ..... !" 
0x0000757b44a0f8d3 :  23 24 25 26 27 28 29 2a  2b 2c 2d 2e 2f 30 31 32  #$%&'()* +,-./012 
0x0000757b44a0f8e3 :  33 34 35 36 37 38 39 3a  3b 3c 3d 3e 3f 40 41 42  3456789: ;<=>?@AB 

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 34 z = 0
 dimSize = 256
 a = 0x0000757b44a001a8 a.ar = 0x0000757b44a001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x0000757b44a023b1 : Number = 256 :: (little endian dump)
0x0000757b44a023b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........ 
0x0000757b44a023c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......  
0x0000757b44a023d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0 
0x0000757b44a023e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@ 
0x0000757b44a023f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 
0x0000757b44a02401 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_` 
0x0000757b44a02411 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop 
0x0000757b44a02421 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~.. 
0x0000757b44a02431 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........ 
0x0000757b44a02441 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........ 
0x0000757b44a02451 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........ 
0x0000757b44a02461 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........ 
0x0000757b44a02471 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........ 
0x0000757b44a02481 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........ 
0x0000757b44a02491 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........ 
0x0000757b44a024a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........ 

including namespaces/test/localsTest.csl at namespaces/test/initTest.csl : 86.41 ...
 1 2 3 12

 =============================
C_Syntax.taa <:> csl compiled word
SourceCode for C_Syntax.taa :> 
int64 taa ( one two three ) { int64 four, five ; four = one + two + three ; five = one + two + three + four ; p ( one ) ; p ( two ) ; p ( three ) ; p ( five ) ; nl () ; } 
Source code file location of taa : "namespaces/test/localsTest.csl" : 10.4 :: we are now at : namespaces/test/localsTest.csl : 22.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b718c -- code size = 198 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.taa : definition = 0x0000757b488b718c : disassembly at namespaces/test/localsTest.csl : 22.16 :
0x757b488b718c    4d897e08                mov [r14+0x8], r15                                     
0x757b488b7190    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b7194    4981c618000000          add r14, 0x18                                          
 .. ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( t .. 
0x757b488b719b    498b47e8                mov rax, [r15-0x18]                                    
 ..   int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) .. 
0x757b488b719f    498b4ff0                mov rcx, [r15-0x10]                                    
 ..     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three .. 
0x757b488b71a3    4803c1                  add rax, rcx                                           
 .. 4 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     .. 
0x757b488b71a6    498b4ff8                mov rcx, [r15-0x8]                                     
 .. t64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;   .. 
0x757b488b71aa    4803c1                  add rax, rcx                                           
 ..  three ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;    .. 
0x757b488b71ad    49894708                mov [r15+0x8], rax                                     
 .. four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     n .. 
0x757b488b71b1    498b47e8                mov rax, [r15-0x18]                                    
 ..  one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; .. 
0x757b488b71b5    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () .. 
0x757b488b71b9    4803c1                  add rax, rcx                                           
 ..  two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71bc    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71c0    4803c1                  add rax, rcx                                           
 .. hree ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71c3    498b4f08                mov rcx, [r15+0x8]                                     
 ..  three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71c7    4803c1                  add rax, rcx                                           
 ..  ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five )  .. 
0x757b488b71ca    49894710                mov [r15+0x10], rax                                    
 ..  = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71ce    498b47e8                mov rax, [r15-0x18]                                    
0x757b488b71d2    4983c608                add r14, 0x8                                           
0x757b488b71d6    498906                  mov [r14], rax                                         
0x757b488b71d9    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b71e3    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. hree + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71e6    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b71ea    4983c608                add r14, 0x8                                           
0x757b488b71ee    498906                  mov [r14], rax                                         
0x757b488b71f1    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b71fb    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..   p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b71fe    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b7202    4983c608                add r14, 0x8                                           
0x757b488b7206    498906                  mov [r14], rax                                         
0x757b488b7209    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b7213    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b7216    498b4710                mov rax, [r15+0x10]                                    
0x757b488b721a    4983c608                add r14, 0x8                                           
0x757b488b721e    498906                  mov [r14], rax                                         
0x757b488b7221    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b722b    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488b722e    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b7238    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b7242    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488b7245    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b7249    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b724d    4983ee18                sub r14, 0x18                                          
 .. hree ) ;     p ( five ) ;     nl () ; }  .. 
0x757b488b7251    c3                      ret                                                    
Word_Disassemble : word - 'taa' :: codeSize = 198
Word : 0x0000757b486c788b :: Compiled at : 0x0000757b488b718c
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 22.16 <::
 1 2 3 12
 3 3 3
 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 1 2 3
 1 2 3 4 3 3 3 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 1 2 3
 1 2 3 4
 =============================
C.hey <:> csl compiled word
SourceCode for C.hey :> 
: hey ( n m | o q ) o m @ = m @ o @ "hey_1_assert" assert q n @ = n @ q @ "hey_2_assert" assert n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert ; 
Source code file location of hey : "namespaces/test/localsTest.csl" : 90.2 :: we are now at : namespaces/test/localsTest.csl : 98.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b7a8a -- code size = 386 bytes
TypeSignature : 
 -----------------------------
Word :: C.hey : definition = 0x0000757b488b7a8a : disassembly at namespaces/test/localsTest.csl : 98.17 :
0x757b488b7a8a    4d897e08                mov [r14+0x8], r15                                     
0x757b488b7a8e    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b7a92    4981c618000000          add r14, 0x18                                          
 ..                  : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ +  .. 
0x757b488b7a99    498d4708                lea rax, [r15+0x8]                                     
 ..                : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + +  .. 
0x757b488b7a9d    498b4ff8                mov rcx, [r15-0x8]                                     
 ..            : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1  .. 
0x757b488b7aa1    488908                  mov [rax], rcx                                         
 ..         : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + d .. 
0x757b488b7aa4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b7aa8    4983c608                add r14, 0x8                                           
0x757b488b7aac    498906                  mov [r14], rax                                         
 ..     : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p .. 
0x757b488b7aaf    498b4708                mov rax, [r15+0x8]                                     
0x757b488b7ab3    4983c608                add r14, 0x8                                           
0x757b488b7ab7    498906                  mov [r14], rax                                         
 .. : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 " .. 
0x757b488b7aba    48b8d50111487b750000    mov rax, 0x757b481101d5       < string : 'hey_1_assert' >
0x757b488b7ac4    4983c608                add r14, 0x8                                           
0x757b488b7ac8    498906                  mov [r14], rax                                         
0x757b488b7acb    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b7ad5    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n .. 
0x757b488b7ad8    498d4710                lea rax, [r15+0x10]                                    
 .. @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ .. 
0x757b488b7adc    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ .. 
0x757b488b7ae0    488908                  mov [rax], rcx                                         
 ..  o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o .. 
0x757b488b7ae3    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b7ae7    4983c608                add r14, 0x8                                           
0x757b488b7aeb    498906                  mov [r14], rax                                         
 ..  "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + .. 
0x757b488b7aee    498b4710                mov rax, [r15+0x10]                                    
0x757b488b7af2    4983c608                add r14, 0x8                                           
0x757b488b7af6    498906                  mov [r14], rax                                         
 .. y_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ .. 
0x757b488b7af9    48b8000211487b750000    mov rax, 0x757b48110200       < string : 'hey_2_assert' >
0x757b488b7b03    4983c608                add r14, 0x8                                           
0x757b488b7b07    498906                  mov [r14], rax                                         
0x757b488b7b0a    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b7b14    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..  @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_a .. 
0x757b488b7b17    498b47f0                mov rax, [r15-0x10]                                    
0x757b488b7b1b    4983c608                add r14, 0x8                                           
0x757b488b7b1f    498906                  mov [r14], rax                                         
 ..    n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_asser .. 
0x757b488b7b22    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b7b26    4983c608                add r14, 0x8                                           
0x757b488b7b2a    498906                  mov [r14], rax                                         
 ..  @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" a .. 
0x757b488b7b2d    498b4708                mov rax, [r15+0x8]                                     
 ..  @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" asser .. 
0x757b488b7b31    498b4f10                mov rcx, [r15+0x10]                                    
0x757b488b7b35    4803c1                  add rax, rcx                                           
 .. hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert    .. 
0x757b488b7b38    488bc8                  mov rcx, rax                                           
0x757b488b7b3b    498b06                  mov rax, [r14]                                         
0x757b488b7b3e    4983ee08                sub r14, 0x8                                           
0x757b488b7b42    4803c1                  add rax, rcx                                           
 .. y_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert      .. 
0x757b488b7b45    488bc8                  mov rcx, rax                                           
0x757b488b7b48    498b06                  mov rax, [r14]                                         
0x757b488b7b4b    4983ee08                sub r14, 0x8                                           
 .. 2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        .. 
0x757b488b7b4f    4803c1                  add rax, rcx                                           
 .. assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ; .. 
0x757b488b7b52    b901000000              mov ecx, 0x1                                           
 .. sert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7b57    4803c1                  add rax, rcx                                           
0x757b488b7b5a    4983c610                add r14, 0x10                                          
0x757b488b7b5e    498906                  mov [r14], rax                                         
 .. rt" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7b61    498946f8                mov [r14-0x8], rax                                     
 .. assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7b65    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b7b6f    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. sert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7b72    b807000000              mov eax, 0x7                                           
0x757b488b7b77    4983c608                add r14, 0x8                                           
0x757b488b7b7b    498906                  mov [r14], rax                                         
 .. rt  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7b7e    48b82f0211487b750000    mov rax, 0x757b4811022f       < string : 'hey_3_assert' >
0x757b488b7b88    4983c608                add r14, 0x8                                           
0x757b488b7b8c    498906                  mov [r14], rax                                         
0x757b488b7b8f    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b7b99    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..  + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7b9c    498b47f0                mov rax, [r15-0x10]                                    
 ..  + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7ba0    498b4ff8                mov rcx, [r15-0x8]                                     
 .. up p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7ba4    4803c1                  add rax, rcx                                           
 ..  p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7ba7    498b4f08                mov rcx, [r15+0x8]                                     
 ..  "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bab    4803c1                  add rax, rcx                                           
 .. hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bae    498b4f10                mov rcx, [r15+0x10]                                    
 .. 3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bb2    4803c1                  add rax, rcx                                           
 .. assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bb5    b901000000              mov ecx, 0x1                                           
 .. sert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bba    4803c1                  add rax, rcx                                           
0x757b488b7bbd    4983c610                add r14, 0x10                                          
0x757b488b7bc1    498906                  mov [r14], rax                                         
 .. rt" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bc4    498946f8                mov [r14-0x8], rax                                     
 .. assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bc8    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b7bd2    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. sert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7bd5    b807000000              mov eax, 0x7                                           
0x757b488b7bda    4983c608                add r14, 0x8                                           
0x757b488b7bde    498906                  mov [r14], rax                                         
 .. rt  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7be1    48b85e0211487b750000    mov rax, 0x757b4811025e       < string : 'hey_4_assert' >
0x757b488b7beb    4983c608                add r14, 0x8                                           
0x757b488b7bef    498906                  mov [r14], rax                                         
0x757b488b7bf2    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b7bfc    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488b7bff    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b7c03    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b7c07    4983ee10                sub r14, 0x10                                          
 ..  dup p 7 "hey_4_assert" assert        ;  .. 
0x757b488b7c0b    c3                      ret                                                    
Word_Disassemble : word - 'hey' :: codeSize = 386
Word : 0x0000757b486e2a7b :: Compiled at : 0x0000757b488b7a8a
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 98.17 <::
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
beforeHeey
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
afterHeey
DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

testA1 =  0x0000757b481ff9b3
 0x0000757b481ff9b3 0x0000757b47211ae8 0x0000757b481ff9b3
 this =  0x0000757b481ff9b3

 t1 @ =  0x0000757b481ff9b3
 t1 =  0x0000757b47211ae8
 done showing variables

Dump at : namespaces/test/localsTest.csl : 144.48 :
Dump : Address = 0x0000757b481ff9b3 : Number = 128 :: (little endian dump)
0x0000757b481ff9b3 :  f9 1f 48 7b 75 00 00 00  00 00 00 00 00 00 00 00  ..H{u... ........ 
0x0000757b481ff9c3 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff9d3 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff9e3 :  00 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ff9f3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffa03 :  00 00 00 00 00 00 00 00  05 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffa13 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffa23 :  00 00 00 00 00 00 00 00  07 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

Dump at : namespaces/test/localsTest.csl : 153.15 :
Dump : Address = 0x0000757b481ffdb3 : Number = 50 :: (little endian dump)
0x0000757b481ffdb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffdc3 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffdd3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffde3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000003 0x0000000000000004
 before test

Using Namespaces :> DLLNodeAlloc DLLNode Buffer Class Root C User int64 arr10 Ar10 Ar9 Ar3 Ar2 Ar1 void Defines cta ct0 ar9 DLLNodeAlloc4 Int DLListClone DLList Integer Pointer Compiler Logic Shell int List Combinators Bits System libc OpenVmTil Lexer Interpreter Debug byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

 array test ok
 0x0000000000000001
Dump at : namespaces/test/localsTest.csl : 162.15 :
Dump : Address = 0x0000757b481ffdb3 : Number = 50 :: (little endian dump)
0x0000757b481ffdb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffdc3 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffdd3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481ffde3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/localsTest.csl : 165.15 :
Dump : Address = 0x0000757b481fffb3 : Number = 50 :: (little endian dump)
0x0000757b481fffb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fffc3 :  05 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fffd3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b481fffe3 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 0x0000000000000077 0x0000757b47211ad8 0x0000000000000001 0x0000757b47211ae8 0x00005b5fa6eebc20 0x0000000000000001 0x0000757b47211af0 0x0000000000000001 0x0000757b47211b00 0x0000757b47211ae8 0x0000000000000001 0x0000757b47211af0 0x0000000000000001 0x0000757b47211b00 0x0000000000000001 0x0000000000000001 

testing nested locals

 =============================
User.goedel <:> csl compiled word
SourceCode for User.goedel :> 
: goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
Source code file location of goedel : "namespaces/test/localsTest.csl" : 201.2 :: we are now at : namespaces/test/localsTest.csl : 203.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b838e -- code size = 162 bytes
TypeSignature : 
 -----------------------------
Word :: User.goedel : definition = 0x0000757b488b838e : disassembly at namespaces/test/localsTest.csl : 203.19 :
0x757b488b838e    4d897e08                mov [r14+0x8], r15                                     
0x757b488b8392    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b8396    4981c618000000          add r14, 0x18                                          
 ..                 : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x757b488b839d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..               : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x757b488b83a5    498b4708                mov rax, [r15+0x8]                                     
 ..           : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x757b488b83a9    b906000000              mov ecx, 0x6                                           
 ..         : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x757b488b83ae    4803c1                  add rax, rcx                                           
0x757b488b83b1    4983c610                add r14, 0x10                                          
0x757b488b83b5    498906                  mov [r14], rax                                         
 ..       : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x757b488b83b8    498946f8                mov [r14-0x8], rax                                     
 ..   : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x757b488b83bc    b807000000              mov eax, 0x7                                           
0x757b488b83c1    4983c608                add r14, 0x8                                           
0x757b488b83c5    498906                  mov [r14], rax                                         
0x757b488b83c8    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b83d2    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 ..  { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b83d5    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b83df    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b83e2    49c7471003000000        mov qword [r15+0x10], 0x3                              
 .. + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b83ea    498b4710                mov rax, [r15+0x10]                                    
 .. p 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b83ee    b904000000              mov ecx, 0x4                                           
 .. 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b83f3    4803c1                  add rax, rcx                                           
0x757b488b83f6    4983c610                add r14, 0x10                                          
0x757b488b83fa    498906                  mov [r14], rax                                         
 .. _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b83fd    498946f8                mov [r14-0x8], rax                                     
 .. ert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b8401    b807000000              mov eax, 0x7                                           
0x757b488b8406    4983c608                add r14, 0x8                                           
0x757b488b840a    498906                  mov [r14], rax                                         
0x757b488b840d    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b8417    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 ..  { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b841a    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b8424    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488b8427    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b842b    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x757b488b842f    c3                      ret                                                    
Word_Disassemble : word - 'goedel' :: codeSize = 162
Word : 0x0000757b4870680b :: Compiled at : 0x0000757b488b838e
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 203.19 <::

 goedel ::  7 7
 =============================
User.goedel2 <:> csl compiled word
SourceCode for User.goedel2 :> 
: goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
Source code file location of goedel2 : "namespaces/test/localsTest.csl" : 205.2 :: we are now at : namespaces/test/localsTest.csl : 206.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b8435 -- code size = 220 bytes
TypeSignature : 
 -----------------------------
Word :: User.goedel2 : definition = 0x0000757b488b8435 : disassembly at namespaces/test/localsTest.csl : 206.20 :
0x757b488b8435    4d897e08                mov [r14+0x8], r15                                     
0x757b488b8439    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b843d    4981c618000000          add r14, 0x18                                          
 ..                : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_as .. 
0x757b488b8444    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..              : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_asse .. 
0x757b488b844c    498b4708                mov rax, [r15+0x8]                                     
 ..          : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert"  .. 
0x757b488b8450    b905000000              mov ecx, 0x5                                           
0x757b488b8455    4803c1                  add rax, rcx                                           
0x757b488b8458    4983c610                add r14, 0x10                                          
0x757b488b845c    498906                  mov [r14], rax                                         
 ..      : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" asse .. 
0x757b488b845f    498946f8                mov [r14-0x8], rax                                     
 ..  : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } .. 
0x757b488b8463    b807000000              mov eax, 0x7                                           
0x757b488b8468    4983c608                add r14, 0x8                                           
0x757b488b846c    498906                  mov [r14], rax                                         
   : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } i .. 
0x757b488b846f    48b8740c11487b750000    mov rax, 0x757b48110c74       < string : 'goedel2_1_assert' >
0x757b488b8479    4983c608                add r14, 0x8                                           
0x757b488b847d    498906                  mov [r14], rax                                         
0x757b488b8480    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b848a    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b848d    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b8497    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. del2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b849a    498b4710                mov rax, [r15+0x10]                                    
0x757b488b849e    4983c608                add r14, 0x8                                           
0x757b488b84a2    498906                  mov [r14], rax                                         
 .. _1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84a5    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b84af    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84b2    49c7471003000000        mov qword [r15+0x10], 0x3                              
 .. t" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84ba    498b4710                mov rax, [r15+0x10]                                    
 .. ssert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84be    b904000000              mov ecx, 0x4                                           
0x757b488b84c3    4803c1                  add rax, rcx                                           
0x757b488b84c6    4983c610                add r14, 0x10                                          
0x757b488b84ca    498906                  mov [r14], rax                                         
 .. t p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84cd    498946f8                mov [r14-0x8], rax                                     
 .. } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84d1    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b84db    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84de    b807000000              mov eax, 0x7                                           
0x757b488b84e3    4983c608                add r14, 0x8                                           
0x757b488b84e7    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b84ea    48b8bc0c11487b750000    mov rax, 0x757b48110cbc       < string : 'goedel2_2_assert' >
0x757b488b84f4    4983c608                add r14, 0x8                                           
0x757b488b84f8    498906                  mov [r14], rax                                         
0x757b488b84fb    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b8505    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488b8508    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b850c    4d8b7e08                mov r15, [r14+0x8]                                     
 .. up p 7 "goedel2_2_assert" assert } ix ; 
0x757b488b8510    c3                      ret                                                    
Word_Disassemble : word - 'goedel2' :: codeSize = 220
Word : 0x0000757b48709eeb :: Compiled at : 0x0000757b488b8435
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 206.20 <::

 goedel2 ::  goedel2_1_assert  : ok

 7 0 7 goedel2_2_assert  : ok


 =============================
User.goedel4 <:> csl compiled word
SourceCode for User.goedel4 :> 
: goedel4 (| n ) nl "goedel4 :: " ps nl n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix n @ 6 + 8 _assert } ix { (| n ) n @ p n 3 = n dup @ 4 + dup dup 7 "goedel4_3_assert" assert p = n @ p n @ 7 "goedel4_4_assert" assert } ix n @ dup p return tos ; 
Source code file location of goedel4 : "namespaces/test/localsTest.csl" : 209.2 :: we are now at : namespaces/test/localsTest.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b8516 -- code size = 622 bytes
TypeSignature : -> Integer 
 -----------------------------
Word :: User.goedel4 : definition = 0x0000757b488b8516 : disassembly at namespaces/test/localsTest.csl : 229.21 :
0x757b488b8516    4d897e08                mov [r14+0x8], r15                                     
0x757b488b851a    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b851e    4981c628000000          add r14, 0x28                                          
0x757b488b8525    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b852f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8539    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..              : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" asse .. 
0x757b488b853c    48b8b80d11487b750000    mov rax, 0x757b48110db8       < string : 'goedel4 :: ' >
0x757b488b8546    4983c608                add r14, 0x8                                           
0x757b488b854a    498906                  mov [r14], rax                                         
   : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| .. 
0x757b488b854d    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b8557    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
: goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n  .. 
0x757b488b855a    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b8564    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b856e    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 .. 
0x757b488b8571    49c7470809000000        mov qword [r15+0x8], 0x9                               
 .. ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x757b488b8579    498b4710                mov rax, [r15+0x10]                                    
0x757b488b857d    4983c608                add r14, 0x8                                           
0x757b488b8581    498906                  mov [r14], rax                                         
 .. l     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_ .. 
0x757b488b8584    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b858e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_asse .. 
0x757b488b8591    49c7471002000000        mov qword [r15+0x10], 0x2                              
 .. 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert .. 
0x757b488b8599    498b4710                mov rax, [r15+0x10]                                    
0x757b488b859d    4983c610                add r14, 0x10                                          
0x757b488b85a1    498906                  mov [r14], rax                                         
 ..     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" as .. 
0x757b488b85a4    498946f8                mov [r14-0x8], rax                                     
 .. {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert .. 
0x757b488b85a8    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b85b2    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } .. 
0x757b488b85b5    b802000000              mov eax, 0x2                                           
0x757b488b85ba    4983c608                add r14, 0x8                                           
0x757b488b85be    498906                  mov [r14], rax                                         
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } i .. 
0x757b488b85c1    48b8f60d11487b750000    mov rax, 0x757b48110df6       < string : 'goedel4_1_assert' >
0x757b488b85cb    4983c608                add r14, 0x8                                           
0x757b488b85cf    498906                  mov [r14], rax                                         
0x757b488b85d2    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b85dc    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. del4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { .. 
0x757b488b85df    498b4718                mov rax, [r15+0x18]                                    
0x757b488b85e3    4983c608                add r14, 0x8                                           
0x757b488b85e7    498906                  mov [r14], rax                                         
 .. _1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (|  .. 
0x757b488b85ea    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b85f4    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )    .. 
0x757b488b85f7    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. t" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )      .. 
0x757b488b85ff    498b4718                mov rax, [r15+0x18]                                    
 .. ssert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          .. 
0x757b488b8603    b904000000              mov ecx, 0x4                                           
0x757b488b8608    4803c1                  add rax, rcx                                           
0x757b488b860b    4983c610                add r14, 0x10                                          
0x757b488b860f    498906                  mov [r14], rax                                         
 .. t        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ .. 
0x757b488b8612    498946f8                mov [r14-0x8], rax                                     
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p   .. 
0x757b488b8616    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b8620    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p     .. 
0x757b488b8623    b807000000              mov eax, 0x7                                           
0x757b488b8628    4983c608                add r14, 0x8                                           
0x757b488b862c    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p       .. 
0x757b488b862f    48b83e0e11487b750000    mov rax, 0x757b48110e3e       < string : 'goedel4_2_assert' >
0x757b488b8639    4983c608                add r14, 0x8                                           
0x757b488b863d    498906                  mov [r14], rax                                         
0x757b488b8640    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b864a    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488b864d    498b4710                mov rax, [r15+0x10]                                    
 .. del4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup d .. 
0x757b488b8651    b906000000              mov ecx, 0x6                                           
 .. l4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup .. 
0x757b488b8656    4803c1                  add rax, rcx                                           
0x757b488b8659    4983c608                add r14, 0x8                                           
0x757b488b865d    498906                  mov [r14], rax                                         
 .. _2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 .. 
0x757b488b8660    b808000000              mov eax, 0x8                                           
0x757b488b8665    4983c608                add r14, 0x8                                           
0x757b488b8669    498906                  mov [r14], rax                                         
0x757b488b866c    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488b8676    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488b8679    498b4720                mov rax, [r15+0x20]                                    
0x757b488b867d    4983c608                add r14, 0x8                                           
0x757b488b8681    498906                  mov [r14], rax                                         
 .. t      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =  .. 
0x757b488b8684    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b868e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..  { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n  .. 
0x757b488b8691    49c7472003000000        mov qword [r15+0x20], 0x3                              
0x757b488b8699    498d4720                lea rax, [r15+0x20]                                    
0x757b488b869d    4983c610                add r14, 0x10                                          
0x757b488b86a1    498906                  mov [r14], rax                                         
 ..        n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4 .. 
0x757b488b86a4    498946f8                mov [r14-0x8], rax                                     
 ..    n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_a .. 
0x757b488b86a8    498b06                  mov rax, [r14]                                         
0x757b488b86ab    488b00                  mov rax, [rax]                                         
0x757b488b86ae    498906                  mov [r14], rax                                         
 ..  @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_asser .. 
0x757b488b86b1    49830604                add qword [r14], 0x4                                   
0x757b488b86b5    498b06                  mov rax, [r14]                                         
0x757b488b86b8    4983c608                add r14, 0x8                                           
0x757b488b86bc    4983c608                add r14, 0x8                                           
0x757b488b86c0    498906                  mov [r14], rax                                         
 ..  =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix .. 
0x757b488b86c3    b807000000              mov eax, 0x7                                           
0x757b488b86c8    4983c608                add r14, 0x8                                           
0x757b488b86cc    498906                  mov [r14], rax                                         
 ..          n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix   .. 
0x757b488b86cf    48b88a0e11487b750000    mov rax, 0x757b48110e8a       < string : 'goedel4_3_assert' >
0x757b488b86d9    4983c608                add r14, 0x8                                           
0x757b488b86dd    498906                  mov [r14], rax                                         
0x757b488b86e0    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b86ea    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488b86ed    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b86f7    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488b86fa    498b0e                  mov rcx, [r14]                                         
0x757b488b86fd    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b8701    4983ee10                sub r14, 0x10                                          
0x757b488b8705    488908                  mov [rax], rcx                                         
0x757b488b8708    498b4720                mov rax, [r15+0x20]                                    
0x757b488b870c    4983c608                add r14, 0x8                                           
0x757b488b8710    498906                  mov [r14], rax                                         
 ..  assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b8713    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b871d    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ssert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b8720    498b4720                mov rax, [r15+0x20]                                    
0x757b488b8724    4983c608                add r14, 0x8                                           
0x757b488b8728    498906                  mov [r14], rax                                         
 .. t        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b872b    b807000000              mov eax, 0x7                                           
0x757b488b8730    4983c608                add r14, 0x8                                           
0x757b488b8734    498906                  mov [r14], rax                                         
 ..        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b8737    48b8c30e11487b750000    mov rax, 0x757b48110ec3       < string : 'goedel4_4_assert' >
0x757b488b8741    4983c608                add r14, 0x8                                           
0x757b488b8745    498906                  mov [r14], rax                                         
0x757b488b8748    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488b8752    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488b8755    498b4708                mov rax, [r15+0x8]                                     
0x757b488b8759    4983c610                add r14, 0x10                                          
0x757b488b875d    498906                  mov [r14], rax                                         
 .. el4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b8760    498946f8                mov [r14-0x8], rax                                     
 .. 4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b8764    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b876e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ert" assert    } ix      n @ dup p    return tos ;  .. 
0x757b488b8771    498b06                  mov rax, [r14]                                         
0x757b488b8774    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b8778    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b877c    4983c608                add r14, 0x8                                           
0x757b488b8780    498906                  mov [r14], rax                                         
 ..     } ix      n @ dup p    return tos ;  .. 
0x757b488b8783    c3                      ret                                                    
Word_Disassemble : word - 'goedel4' :: codeSize = 622
Word : 0x0000757b4870de3b :: Compiled at : 0x0000757b488b8516
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 229.21 <::

 goedel4 :: 
 129172356783675 2 goedel4_1_assert  : ok

 129172334779104 7 goedel4_2_assert  : ok

 129172350435574 goedel4_3_assert  : ok

 129172334779104 7 goedel4_4_assert  : ok

 9 goedel4_0_assert  : ok

 
goedel4 :: output should have read : 
'junk' 2 'junk' 7 'junk' 7 7 9
 goedel5 :: 
 100466380684320 2 goedel5_1_assert  : ok

 129172350437481 7 goedel5_2_assert  : ok

 goedel5_3_assert  : ok

 7 7 goedel5_4_assert  : ok

 9 goedel5_0_assert  : ok

 
goedel5 :: output should read : junk' 2 'junk' 7 7 9
 goedel6 :: 
 100466380684320 2 goedel6_1_assert  : ok

 129172350437481 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 7 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok

 
goedel6 :: goedel6 output should read : 
'junk' 2 'junk' 7 7 'junk' 9
 goedel7 :: 

 goedel7 :: 
 0 2 goedel7_1_assert  : ok

 0 7 goedel7_2_assert  : ok

 18 goedel7_0_assert  : ok

 
goedel7 :: goedel7 output should read : 
'junk' 2 'junk' 7 18
including namespaces/test/file.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Lexer.ofile <:> csl compiled word, prefix
SourceCode for Lexer.ofile :> 
: ofile ( name | file input result ) input 0 = "open/read/print :: " ps name @ ps nl file name @ fopen = nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile file @ fclose ; 
Source code file location of ofile : "namespaces/test/file.csl" : 5.2 :: we are now at : namespaces/test/file.csl : 13.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b8dc2 -- code size = 356 bytes
TypeSignature : 
 -----------------------------
Word :: Lexer.ofile : definition = 0x0000757b488b8dc2 : disassembly at namespaces/test/file.csl : 13.19 :
0x757b488b8dc2    4d897e08                mov [r14+0x8], r15                                     
0x757b488b8dc6    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b8dca    4981c620000000          add r14, 0x20                                          
 .. ame | file input result )     input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1  .. 
0x757b488b8dd1    49c7471000000000        mov qword [r15+0x10], 0x0                              
0x757b488b8dd9    48b8431d11487b750000    mov rax, 0x757b48111d43       < string : 'open/read/print :: ' >
0x757b488b8de3    4983c608                add r14, 0x8                                           
0x757b488b8de7    498906                  mov [r14], rax                                         
 ..   input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { res .. 
0x757b488b8dea    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b8df4    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. nput 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result .. 
0x757b488b8df7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b8dfb    4983c608                add r14, 0x8                                           
0x757b488b8dff    498906                  mov [r14], rax                                         
 .. =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == .. 
0x757b488b8e02    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b8e0c    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..    "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == }  .. 
0x757b488b8e0f    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b8e19    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8e23    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. n/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile .. 
0x757b488b8e26    498d4708                lea rax, [r15+0x8]                                     
0x757b488b8e2a    4983c608                add r14, 0x8                                           
0x757b488b8e2e    498906                  mov [r14], rax                                         
 .. d/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      .. 
0x757b488b8e31    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b8e35    4983c608                add r14, 0x8                                           
0x757b488b8e39    498906                  mov [r14], rax                                         
 ..  :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ .. 
0x757b488b8e3c    49bbe01deaa65f5b0000    mov r11, 0x5b5fa6ea1de0                                
0x757b488b8e46    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8e50    49ffd2                  call r10                      < File.fopen : 0x00005b5fa6ea1de0 >
0x757b488b8e53    498b0e                  mov rcx, [r14]                                         
0x757b488b8e56    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b8e5a    4983ee10                sub r14, 0x10                                          
 .. ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclos .. 
0x757b488b8e5e    488908                  mov [rax], rcx                                         
0x757b488b8e61    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b8e6b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8e75    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. s nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8e78    498d4718                lea rax, [r15+0x18]                                    
0x757b488b8e7c    4983c608                add r14, 0x8                                           
0x757b488b8e80    498906                  mov [r14], rax                                         
 ..   file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8e83    498b4708                mov rax, [r15+0x8]                                     
0x757b488b8e87    4983c608                add r14, 0x8                                           
0x757b488b8e8b    498906                  mov [r14], rax                                         
 .. name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8e8e    498d4710                lea rax, [r15+0x10]                                    
0x757b488b8e92    4983c608                add r14, 0x8                                           
0x757b488b8e96    498906                  mov [r14], rax                                         
 ..  fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8e99    b801000000              mov eax, 0x1                                           
0x757b488b8e9e    4983c608                add r14, 0x8                                           
0x757b488b8ea2    498906                  mov [r14], rax                                         
 .. open =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8ea5    49bb301eeaa65f5b0000    mov r11, 0x5b5fa6ea1e30                                
0x757b488b8eaf    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8eb9    49ffd2                  call r10                      < File.fread : 0x00005b5fa6ea1e30 >
0x757b488b8ebc    498b0e                  mov rcx, [r14]                                         
0x757b488b8ebf    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b8ec3    4983ee10                sub r14, 0x10                                          
 ..      nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8ec7    488908                  mov [rax], rcx                                         
 ..    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8eca    498b4710                mov rax, [r15+0x10]                                    
0x757b488b8ece    4983c608                add r14, 0x8                                           
0x757b488b8ed2    498906                  mov [r14], rax                                         
 .. result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8ed5    49bb80e3e9a65f5b0000    mov r11, 0x5b5fa6e9e380                                
0x757b488b8edf    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8ee9    49ffd2                  call r10                      < Io.emit : 0x00005b5fa6e9e380 >
 .. le @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8eec    49837f1801              cmp qword [r15+0x18], 0x1                              
 .. read = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8ef1    7485                    jz 0x488b8e78                 < Lexer.ofile+182 >
0x757b488b8ef3    0f1f4000                nop [rax]                                              
 .. emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8ef7    498b4708                mov rax, [r15+0x8]                                     
 .. 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8efb    4983c608                add r14, 0x8                                           
0x757b488b8eff    498906                  mov [r14], rax                                         
 .. { result @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8f02    49bb101eeaa65f5b0000    mov r11, 0x5b5fa6ea1e10                                
0x757b488b8f0c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b8f16    49ffd2                  call r10                      < File.fclose : 0x00005b5fa6ea1e10 >
0x757b488b8f19    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b8f1d    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b8f21    4983ee08                sub r14, 0x8                                           
 .. t @ 1 == } doWhile      file @ fclose ;  .. 
0x757b488b8f25    c3                      ret                                                    
Word_Disassemble : word - 'ofile' :: codeSize = 356
Word : 0x0000757b48732e5b :: Compiled at : 0x0000757b488b8dc2
 =============================
::> 'wdiss' was called at namespaces/test/file.csl 13.19 <::
 open/read/print ::  namespaces/test/file.csl

5
#if 1 // already added to .init.csl
C Compiler Int Lexer
jcc8_Off
: ofile ( name | file input result )
    input 0 =
    "open/read/print :: " ps name @ ps nl
    file name @ fopen =
    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile 
    file @ fclose
; prefix
#endif 
' ofile find wdiss //pause
ofile ( "namespaces/test/file.csl" )
//pause
: hi 1 2 + p ;
: hey hi hi ;
: heey hey hey ;
heey
2 + 7 assertStkChk // stack checking


 3 3 3 3
including namespaces/test/dobject.csl at namespaces/test/initTest.csl : 86.41 ...
 
dynamic object test
 object new slot test :   : ok

 object clone test :   : ok

 object clone test2 :   : ok

 object clone test3 :   : ok

 object clone test4 :   : ok

 object clone test5 :   : ok

 object compile test6 :   : ok

 object compile test7 :   : ok

 object compile test8 :   : ok


including namespaces/test/control.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Control.abrkcon <:> csl compiled word
SourceCode for Control.abrkcon :> 
: abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
Source code file location of abrkcon : "namespaces/test/control.csl" : 14.2 :: we are now at : namespaces/test/control.csl : 15.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b90f8 -- code size = 150 bytes
TypeSignature : 
 -----------------------------
Word :: Control.abrkcon : definition = 0x0000757b488b90f8 : disassembly at namespaces/test/control.csl : 15.20 :
 ..                         : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b90f8    48b84bd873487b750000    mov rax, 0x757b4873d84b                                
0x757b488b9102    488b00                  mov rax, [rax]                                         
 ..                   : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b9105    4883f800                cmp rax, 0x0                                           
 ..                : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b9109    750e                    jnz 0x488b9119                < Control.abrkcon+33 >
0x757b488b910b    0f1f4000                nop [rax]                                              
 ..            : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b910f    e979000000              jmp 0x757b488b918d            < Control.abrkcon+149 >
 ..      : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b9114    e956000000              jmp 0x757b488b916f            < Control.abrkcon+119 >
 ..  : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b9119    48b84bd873487b750000    mov rax, 0x757b4873d84b                                
0x757b488b9123    488b00                  mov rax, [rax]                                         
0x757b488b9126    4983c608                add r14, 0x8                                           
0x757b488b912a    498906                  mov [r14], rax                                         
 : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x757b488b912d    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b9137    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. kcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b913a    48b84bd873487b750000    mov rax, 0x757b4873d84b                                
0x757b488b9144    4983c610                add r14, 0x10                                          
0x757b488b9148    498906                  mov [r14], rax                                         
 .. on { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b914b    498946f8                mov [r14-0x8], rax                                     
 ..  { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b914f    498b06                  mov rax, [r14]                                         
0x757b488b9152    488b00                  mov rax, [rax]                                         
0x757b488b9155    498906                  mov [r14], rax                                         
 ..  @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b9158    49832e01                sub qword [r14], 0x1                                   
 .. reak } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b915c    498b0e                  mov rcx, [r14]                                         
0x757b488b915f    498b46f8                mov rax, [r14-0x8]                                     
0x757b488b9163    4983ee10                sub r14, 0x10                                          
 ..  0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b9167    488908                  mov [rax], rcx                                         
 ..  == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b916a    e989ffffff              jmp 0x757b488b90f8            < Control.abrkcon : 0x0000757b488b90f8 >
 .. x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b916f    b802000000              mov eax, 0x2                                           
0x757b488b9174    4983c608                add r14, 0x8                                           
0x757b488b9178    498906                  mov [r14], rax                                         
 .. @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b917b    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b9185    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b9188    e96bffffff              jmp 0x757b488b90f8            < Control.abrkcon : 0x0000757b488b90f8 >
 ..  @ 1 - = continue } ifElse 2 p } loop ; 
0x757b488b918d    c3                      ret                                                    
Word_Disassemble : word - 'abrkcon' :: codeSize = 150
Word : 0x0000757b4873d96b :: Compiled at : 0x0000757b488b90f8
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 15.20 <::
 10 9 8 7 6 5 4 3 2 1
 =============================
Control.abrk0 <:> csl compiled word
SourceCode for Control.abrk0 :> 
: abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
Source code file location of abrk0 : "namespaces/test/control.csl" : 17.2 :: we are now at : namespaces/test/control.csl : 18.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b9193 -- code size = 110 bytes
TypeSignature : 
 -----------------------------
Word :: Control.abrk0 : definition = 0x0000757b488b9193 : disassembly at namespaces/test/control.csl : 18.10 :
0x757b488b9193    4d897e08                mov [r14+0x8], r15                                     
0x757b488b9197    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b919b    4981c608000000          add r14, 0x8                                           
 ..  ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91a2    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..            : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x757b488b91a7    750e                    jnz 0x488b91b7                < Control.abrk0+36 >
0x757b488b91a9    0f1f4000                nop [rax]                                              
 ..        : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x757b488b91ad    e942000000              jmp 0x757b488b91f4            < Control.abrk0+97 >
 ..  : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x757b488b91b2    e922000000              jmp 0x757b488b91d9            < Control.abrk0+70 >
 : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x757b488b91b7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b91bb    4983c608                add r14, 0x8                                           
0x757b488b91bf    498906                  mov [r14], rax                                         
 ..  ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91c2    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b91cc    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91cf    49836ff801              sub qword [r15-0x8], 0x1                               
 .. { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91d4    e9c9ffffff              jmp 0x757b488b91a2            < Control.abrk0+15 >
 .. ak } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91d9    b802000000              mov eax, 0x2                                           
0x757b488b91de    4983c608                add r14, 0x8                                           
0x757b488b91e2    498906                  mov [r14], rax                                         
 ..  } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91e5    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b91ef    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b91f2    ebae                    jmp 0x757b488b91a2            < Control.abrk0+15 >
0x757b488b91f4    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b91f8    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b91fc    4983ee08                sub r14, 0x8                                           
 .. p x 1 -= continue } ifElse 2 p } loop ; 
0x757b488b9200    c3                      ret                                                    
Word_Disassemble : word - 'abrk0' :: codeSize = 110
Word : 0x0000757b4874003b :: Compiled at : 0x0000757b488b9193
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 18.10 <::

 10 9 8 7 6 5 4 3 2 1
 =============================
Control.ct00 <:> csl compiled word
SourceCode for Control.ct00 :> 
: ct00 ( n | j ) { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p } for ; 
Source code file location of ct00 : "namespaces/test/control.csl" : 34.2 :: we are now at : namespaces/test/control.csl : 41.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b92f7 -- code size = 118 bytes
TypeSignature : 
 -----------------------------
Word :: Control.ct00 : definition = 0x0000757b488b92f7 : disassembly at namespaces/test/control.csl : 41.17 :
0x757b488b92f7    4d897e08                mov [r14+0x8], r15                                     
0x757b488b92fb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b92ff    4981c610000000          add r14, 0x10                                          
 ..           : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x757b488b9306    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..     : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x757b488b930e    498b4708                mov rax, [r15+0x8]                                     
 .. : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x757b488b9312    498b4ff8                mov rcx, [r15-0x8]                                     
: ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x757b488b9316    483bc1                  cmp rax, rcx                                           
 .. ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x757b488b9319    7f45                    jg 0x488b9360                 < Control.ct00+105 >
0x757b488b931b    0f1f4000                nop [rax]                                              
0x757b488b931f    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b9323    4983c608                add r14, 0x8                                           
0x757b488b9327    498906                  mov [r14], rax                                         
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x757b488b932a    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b9334    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x757b488b9337    498b4708                mov rax, [r15+0x8]                                     
0x757b488b933b    4983c608                add r14, 0x8                                           
0x757b488b933f    498906                  mov [r14], rax                                         
 ..  <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x757b488b9342    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b934c    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x757b488b934f    49ff4708                inc qword [r15+0x8]                                    
 ..       { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x757b488b9353    498b4708                mov rax, [r15+0x8]                                     
0x757b488b9357    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488b935b    483bc1                  cmp rax, rcx                                           
0x757b488b935e    7ebf                    jle 0x488b931f                < Control.ct00+40 >
0x757b488b9360    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b9364    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b9368    4983ee08                sub r14, 0x8                                           
 ..   {        n @ p j @ p      }     for ; 
0x757b488b936c    c3                      ret                                                    
Word_Disassemble : word - 'ct00' :: codeSize = 118
Word : 0x0000757b487447fb :: Compiled at : 0x0000757b488b92f7
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 41.17 <::
 17 1 17 2 17 3 17 4 17 5 17 6 17 7 17 8 17 9 17 10 17 11 17 12 17 13 17 14 17 15 17 16 17 17
 =============================
Control.ct0 <:> csl compiled word
SourceCode for Control.ct0 :> 
: ct0 ( n | j ) nl "ct0 : " ps nl { label: test1 "ct0 before goto/label works" ps nl goto: leave } _ { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse } for label: leave "ct0" n @ j @ leaving ; 
Source code file location of ct0 : "namespaces/test/control.csl" : 44.2 :: we are now at : namespaces/test/control.csl : 60.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b9372 -- code size = 412 bytes
TypeSignature : 
 -----------------------------
Word :: Control.ct0 : definition = 0x0000757b488b9372 : disassembly at namespaces/test/control.csl : 60.16 :
0x757b488b9372    4d897e08                mov [r14+0x8], r15                                     
0x757b488b9376    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b937a    4981c610000000          add r14, 0x10                                          
0x757b488b9381    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b938b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9395    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..               : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          go .. 
0x757b488b9398    48b85a2611487b750000    mov rax, 0x757b4811265a       < string : 'ct0 : ' >
0x757b488b93a2    4983c608                add r14, 0x8                                           
0x757b488b93a6    498906                  mov [r14], rax                                         
 ..      : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave .. 
0x757b488b93a9    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b93b3    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..   : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave    .. 
0x757b488b93b6    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b93c0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b93ca    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488b93cd    e93b000000              jmp 0x757b488b940d            < Control.ct0+155 >
0x757b488b93d2    48b8992611487b750000    mov rax, 0x757b48112699       < string : 'ct0 before goto/label works' >
0x757b488b93dc    4983c608                add r14, 0x8                                           
0x757b488b93e0    498906                  mov [r14], rax                                         
 ..         "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p  .. 
0x757b488b93e3    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b93ed    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..      "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p     .. 
0x757b488b93f0    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b93fa    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9404    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488b9407    e9c1000000              jmp 0x757b488b94cd            < Control.ct0+347 >
0x757b488b940c    c3                      ret                                                    
 ..        goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : got .. 
0x757b488b940d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/labe .. 
0x757b488b9415    498b4708                mov rax, [r15+0x8]                                     
 .. o: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \' .. 
0x757b488b9419    498b4ff8                mov rcx, [r15-0x8]                                     
 .. eave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' .. 
0x757b488b941d    483bc1                  cmp rax, rcx                                           
 .. e      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' -> .. 
0x757b488b9420    0f8fa7000000            jg 0x757b488b94cd             < Control.ct0+347 >
0x757b488b9426    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b942a    4983c608                add r14, 0x8                                           
0x757b488b942e    498906                  mov [r14], rax                                         
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "contin .. 
0x757b488b9431    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b943b    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continui .. 
0x757b488b943e    498b4708                mov rax, [r15+0x8]                                     
0x757b488b9442    4983c608                add r14, 0x8                                           
0x757b488b9446    498906                  mov [r14], rax                                         
 ..  <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing c .. 
0x757b488b9449    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b9453    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifE .. 
0x757b488b9456    498b47f8                mov rax, [r15-0x8]                                     
 ..    {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse  .. 
0x757b488b945a    498b4f08                mov rcx, [r15+0x8]                                     
 ..         n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse      .. 
0x757b488b945e    483bc1                  cmp rax, rcx                                           
 ..      n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }   .. 
0x757b488b9461    7543                    jnz 0x488b94a6                < Control.ct0+308 >
0x757b488b9463    0f1f4000                nop [rax]                                              
 ..  n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     f .. 
0x757b488b9467    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9471    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b947b    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for  .. 
0x757b488b947e    48b8f82611487b750000    mov rax, 0x757b481126f8       < string : 'testing ct0 : goto/label 'hi' ->' >
0x757b488b9488    4983c608                add r14, 0x8                                           
0x757b488b948c    498906                  mov [r14], rax                                         
 ..  "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ l .. 
0x757b488b948f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b9499    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. esting ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leav .. 
0x757b488b949c    e931ffffff              jmp 0x757b488b93d2            < Control.ct0+96 >
 ..  goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b94a1    e91e000000              jmp 0x757b488b94c4            < Control.ct0+338 >
 .. o/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b94a6    48b84d2711487b750000    mov rax, 0x757b4811274d       < string : 'continuing ct0' >
0x757b488b94b0    4983c608                add r14, 0x8                                           
0x757b488b94b4    498906                  mov [r14], rax                                         
 .. " ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b94b7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b94c1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps g .. 
0x757b488b94c4    49ff4708                inc qword [r15+0x8]                                    
 .. _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto .. 
0x757b488b94c8    e948ffffff              jmp 0x757b488b9415            < Control.ct0+163 >
0x757b488b94cd    48b8792711487b750000    mov rax, 0x757b48112779       < string : 'ct0' >
0x757b488b94d7    4983c608                add r14, 0x8                                           
0x757b488b94db    498906                  mov [r14], rax                                         
 .. }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b94de    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b94e2    4983c608                add r14, 0x8                                           
0x757b488b94e6    498906                  mov [r14], rax                                         
 ..   for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b94e9    498b4708                mov rax, [r15+0x8]                                     
0x757b488b94ed    4983c608                add r14, 0x8                                           
0x757b488b94f1    498906                  mov [r14], rax                                         
 .. r     label: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b94f4    49ba06928b487b750000    mov r10, 0x757b488b9206                                
0x757b488b94fe    49ffd2                  call r10                      < Control.leaving : 0x0000757b488b9206 >
0x757b488b9501    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b9505    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b9509    4983ee08                sub r14, 0x8                                           
 .. bel: leave      "ct0" n @ j @ leaving ;  .. 
0x757b488b950d    c3                      ret                                                    
Word_Disassemble : word - 'ct0' :: codeSize = 412
Word : 0x0000757b487475fb :: Compiled at : 0x0000757b488b9372
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 60.16 <::

 ct0 : 
 17 1 continuing ct0 17 2 continuing ct0 17 3 continuing ct0 17 4 continuing ct0 17 5 continuing ct0 17 6 continuing ct0 17 7 continuing ct0 17 8 continuing ct0 17 9 continuing ct0 17 10 continuing ct0 17 11 continuing ct0 17 12 continuing ct0 17 13 continuing ct0 17 14 continuing ct0 17 15 continuing ct0 17 16 continuing ct0 17 17
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x0000757b47211b08, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b08 > = 0x0000757b47211ae0
  DataStack   [  -1 ] < 0x0000757b47211b00 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x0000757b47211af8 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x0000757b47211af0 > = 0x0000757b48112779       < string : 'ct0' >
  DataStack   [  -4 ] < 0x0000757b47211ae8 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -6 ] < 0x0000757b47211ad8 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 leaving ct0 n = 17 j =  17
DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x0000757b47211b08, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b08 > = 0x0000757b47211ae0
  DataStack   [  -1 ] < 0x0000757b47211b00 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x0000757b47211af8 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x0000757b47211af0 > = 0x0000757b48112779       < string : 'ct0' >
  DataStack   [  -4 ] < 0x0000757b47211ae8 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -6 ] < 0x0000757b47211ad8 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct1 : 
 17 1 continuing ct1 17 2 continuing ct1 17 3 continuing ct1 17 4 continuing ct1 17 5 continuing ct1 17 6 continuing ct1 17 7 continuing ct1 17 8 continuing ct1 17 9 continuing ct1 17 10 continuing ct1 17 11 continuing ct1 17 12 continuing ct1 17 13 continuing ct1 17 14 continuing ct1 17 15 continuing ct1 17 16 continuing ct1 17 17
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

 =============================
Control.hic2 <:> csl compiled word
SourceCode for Control.hic2 :> 
: hic2 ( n ) nl "hic2 : start " ps nl s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p nl "hic2 : done " ps nl ; 
Source code file location of hic2 : "namespaces/test/control.csl" : 83.2 :: we are now at : namespaces/test/control.csl : 88.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b9762 -- code size = 438 bytes
TypeSignature : 
 -----------------------------
Word :: Control.hic2 : definition = 0x0000757b488b9762 : disassembly at namespaces/test/control.csl : 88.17 :
0x757b488b9762    4d897e08                mov [r14+0x8], r15                                     
0x757b488b9766    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b976a    4981c608000000          add r14, 0x8                                           
0x757b488b9771    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b977b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9785    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..                  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps .. 
0x757b488b9788    48b8fd2c11487b750000    mov rax, 0x757b48112cfd       < string : 'hic2 : start ' >
0x757b488b9792    4983c608                add r14, 0x8                                           
0x757b488b9796    498906                  mov [r14], rax                                         
 ..  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  .. 
0x757b488b9799    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b97a3    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  .. 
0x757b488b97a6    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b97b0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b97ba    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488b97bd    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b97c7    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b97d1    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 .. )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b97d4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b97d8    4983c608                add r14, 0x8                                           
0x757b488b97dc    498906                  mov [r14], rax                                         
 ..    nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b97df    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b97e9    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b97ec    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b97f0    4983c608                add r14, 0x8                                           
0x757b488b97f4    498906                  mov [r14], rax                                         
 .. "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b97f7    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b9801    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b980b    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 .. ic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b980e    49ba72938b487b750000    mov r10, 0x757b488b9372                                
0x757b488b9818    49ffd2                  call r10                      < Control.ct0 : 0x0000757b488b9372 >
 .. : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b981b    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b9825    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b982f    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 .. start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b9832    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b9836    4983c608                add r14, 0x8                                           
0x757b488b983a    498906                  mov [r14], rax                                         
 .. t " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b983d    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b9847    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9851    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 .. " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b9854    49ba13958b487b750000    mov r10, 0x757b488b9513                                
0x757b488b985e    49ffd2                  call r10                      < Control.ct1 : 0x0000757b488b9513 >
 ..  nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b9861    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b9865    4983c608                add r14, 0x8                                           
0x757b488b9869    498906                  mov [r14], rax                                         
 ..     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b986c    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b9876    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9880    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 ..   s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b9883    49ba9b968b487b750000    mov r10, 0x757b488b969b                                
0x757b488b988d    49ffd2                  call r10                      < Control.ct2 : 0x0000757b488b969b >
 .. n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b9890    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488b989a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b98a4    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 .. @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b98a7    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b98ab    4983c608                add r14, 0x8                                           
0x757b488b98af    498906                  mov [r14], rax                                         
 .. n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b98b2    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488b98bc    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488b98bf    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b98c9    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b98d3    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b98d6    48b82a2d11487b750000    mov rax, 0x757b48112d2a       < string : 'hic2 : done ' >
0x757b488b98e0    4983c608                add r14, 0x8                                           
0x757b488b98e4    498906                  mov [r14], rax                                         
 ..  s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b98e7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b98f1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b98f4    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b98fe    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9908    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488b990b    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488b990f    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488b9913    4983ee08                sub r14, 0x8                                           
 .. s n @ p      nl "hic2 : done " ps nl  ; 
0x757b488b9917    c3                      ret                                                    
Word_Disassemble : word - 'hic2' :: codeSize = 438
Word : 0x0000757b487562bb :: Compiled at : 0x0000757b488b9762
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 88.17 <::

 hic2 : start 

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct0 : 
 3 1 continuing ct0 3 2 continuing ct0 3 3
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x0000757b47211b18, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b18 > = 0x0000757b47211af0
  DataStack   [  -1 ] < 0x0000757b47211b10 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x0000757b47211b08 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x0000757b47211b00 > = 0x0000757b48112779       < string : 'ct0' >
  DataStack   [  -4 ] < 0x0000757b47211af8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x0000757b47211af0 > = 0x0000757b47211ae0
  DataStack   [  -6 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -8 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 leaving ct0 n = 3 j =  3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x0000757b47211b18, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b18 > = 0x0000757b47211af0
  DataStack   [  -1 ] < 0x0000757b47211b10 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x0000757b47211b08 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x0000757b47211b00 > = 0x0000757b48112779       < string : 'ct0' >
  DataStack   [  -4 ] < 0x0000757b47211af8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x0000757b47211af0 > = 0x0000757b47211ae0
  DataStack   [  -6 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -8 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct1 : 
 3 1 continuing ct1 3 2 continuing ct1 3 3
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 3
 hic2 : done 

 hic2 : start 

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct0 : 
 7 1 continuing ct0 7 2 continuing ct0 7 3 continuing ct0 7 4 continuing ct0 7 5 continuing ct0 7 6 continuing ct0 7 7
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x0000757b47211b18, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b18 > = 0x0000757b47211af0
  DataStack   [  -1 ] < 0x0000757b47211b10 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211b08 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211b00 > = 0x0000757b48112779       < string : 'ct0' >
  DataStack   [  -4 ] < 0x0000757b47211af8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x0000757b47211af0 > = 0x0000757b47211ae0
  DataStack   [  -6 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -8 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 leaving ct0 n = 7 j =  7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x0000757b47211b18, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b18 > = 0x0000757b47211af0
  DataStack   [  -1 ] < 0x0000757b47211b10 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211b08 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211b00 > = 0x0000757b48112779       < string : 'ct0' >
  DataStack   [  -4 ] < 0x0000757b47211af8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x0000757b47211af0 > = 0x0000757b47211ae0
  DataStack   [  -6 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -8 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct1 : 
 7 1 continuing ct1 7 2 continuing ct1 7 3 continuing ct1 7 4 continuing ct1 7 5 continuing ct1 7 6 continuing ct1 7 7
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x0000757b47211ae8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -2 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 7
 hic2 : done 

 7
 3
 2
 '1
 1
 77
 7
 9
 9
 8

 7
 7
 3
 2
 1
 77
 3
 8
 9

 =============================
C_Syntax.csMatchExWithReturn <:> csl compiled word
SourceCode for C_Syntax.csMatchExWithReturn :> 
void csMatchExWithReturn ( n | x rtn ) { x = 1111 ; match ( n ) { case '1 { nl ; p (1) ; rtn = x ; } case '2 { nl ; p (2) ; rtn = n ; } case '3 { nl ; p (3) ; rtn = x ; } case 3 { nl ; p (3) ; rtn = n ; } case 77 { nl ; p (77) ; rtn = n ; } case 'seven { nl ; p (7) ; rtn = n ; } case 'eight { nl ; p (8) ; rtn = n ; } case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; } case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; } case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; } } p ( x - 103 ) ; return rtn ; } 
Source code file location of csMatchExWithReturn : "namespaces/test/control.csl" : 154.20 :: we are now at : namespaces/test/control.csl : 173.24
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488b9db7 -- code size = 934 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.csMatchExWithReturn : definition = 0x0000757b488b9db7 : disassembly at namespaces/test/control.csl : 173.24 :
0x757b488b9db7    4d897e08                mov [r14+0x8], r15                                     
0x757b488b9dbb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488b9dbf    4981c618000000          add r14, 0x18                                          
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p  .. 
0x757b488b9dc6    49c7470857040000        mov qword [r15+0x8], 0x457                              
 ..  x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }     .. 
0x757b488b9dce    498b47f8                mov rax, [r15-0x8]                                     
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p  .. 
0x757b488b9dd2    4983c608                add r14, 0x8                                           
0x757b488b9dd6    498906                  mov [r14], rax                                         
0x757b488b9dd9    e927030000              jmp 0x757b488ba105            < C_Syntax.csMatchExWithReturn+846 >
 ..      match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3 .. 
0x757b488b9dde    e939000000              jmp 0x757b488b9e1c            < C_Syntax.csMatchExWithReturn+101 >
 ..    match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3)  .. 
0x757b488b9de3    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9ded    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9df7    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn =  .. 
0x757b488b9dfa    b801000000              mov eax, 0x1                                           
0x757b488b9dff    4983c608                add r14, 0x8                                           
0x757b488b9e03    498906                  mov [r14], rax                                         
 .. tch ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn .. 
0x757b488b9e06    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9e10    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..          case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }       .. 
0x757b488b9e13    498b4708                mov rax, [r15+0x8]                                     
 .. )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; } .. 
0x757b488b9e17    49894710                mov [r15+0x10], rax                                    
 ..      case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }           .. 
0x757b488b9e1b    c3                      ret                                                    
 ..  p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) .. 
0x757b488b9e1c    e939000000              jmp 0x757b488b9e5a            < C_Syntax.csMatchExWithReturn+163 >
 ..  (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; .. 
0x757b488b9e21    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9e2b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9e35    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. tn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n .. 
0x757b488b9e38    b802000000              mov eax, 0x2                                           
0x757b488b9e3d    4983c608                add r14, 0x8                                           
0x757b488b9e41    498906                  mov [r14], rax                                         
 .. ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn  .. 
0x757b488b9e44    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9e4e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }        .. 
0x757b488b9e51    498b47f8                mov rax, [r15-0x8]                                     
 .. x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }  .. 
0x757b488b9e55    49894710                mov [r15+0x10], rax                                    
 ..      case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          c .. 
0x757b488b9e59    c3                      ret                                                    
 ..  p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77 .. 
0x757b488b9e5a    e939000000              jmp 0x757b488b9e98            < C_Syntax.csMatchExWithReturn+225 >
 ..  (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77)  .. 
0x757b488b9e5f    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9e69    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9e73    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. tn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn =  .. 
0x757b488b9e76    b803000000              mov eax, 0x3                                           
0x757b488b9e7b    4983c608                add r14, 0x8                                           
0x757b488b9e7f    498906                  mov [r14], rax                                         
 .. ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn .. 
0x757b488b9e82    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9e8c    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }       .. 
0x757b488b9e8f    498b4708                mov rax, [r15+0x8]                                     
 .. n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; } .. 
0x757b488b9e93    49894710                mov [r15+0x10], rax                                    
 ..      case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }           .. 
0x757b488b9e97    c3                      ret                                                    
 .. l ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl .. 
0x757b488b9e98    b803000000              mov eax, 0x3                                           
0x757b488b9e9d    4983c608                add r14, 0x8                                           
0x757b488b9ea1    498906                  mov [r14], rax                                         
 .. ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; .. 
0x757b488b9ea4    e939000000              jmp 0x757b488b9ee2            < C_Syntax.csMatchExWithReturn+299 >
 .. p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p .. 
0x757b488b9ea9    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9eb3    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9ebd    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; r .. 
0x757b488b9ec0    b803000000              mov eax, 0x3                                           
0x757b488b9ec5    4983c608                add r14, 0x8                                           
0x757b488b9ec9    498906                  mov [r14], rax                                         
 ..  ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7)  .. 
0x757b488b9ecc    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9ed6    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..           case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }  .. 
0x757b488b9ed9    498b47f8                mov rax, [r15-0x8]                                     
 ..  x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn =  .. 
0x757b488b9edd    49894710                mov [r15+0x10], rax                                    
 ..       case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }      .. 
0x757b488b9ee1    c3                      ret                                                    
 .. l ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight .. 
0x757b488b9ee2    b84d000000              mov eax, 0x4d                                          
0x757b488b9ee7    4983c608                add r14, 0x8                                           
0x757b488b9eeb    498906                  mov [r14], rax                                         
 ..  p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight {  .. 
0x757b488b9eee    e939000000              jmp 0x757b488b9f2c            < C_Syntax.csMatchExWithReturn+373 >
 ..  (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl .. 
0x757b488b9ef3    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9efd    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9f07    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. tn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) .. 
0x757b488b9f0a    b84d000000              mov eax, 0x4d                                          
0x757b488b9f0f    4983c608                add r14, 0x8                                           
0x757b488b9f13    498906                  mov [r14], rax                                         
 .. ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p  .. 
0x757b488b9f16    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9f20    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..         case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; .. 
0x757b488b9f23    498b47f8                mov rax, [r15-0x8]                                     
 ..  ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn .. 
0x757b488b9f27    49894710                mov [r15+0x10], rax                                    
 ..     case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }   .. 
0x757b488b9f2b    c3                      ret                                                    
 .. 7) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine )  .. 
0x757b488b9f2c    e939000000              jmp 0x757b488b9f6a            < C_Syntax.csMatchExWithReturn+435 >
 ..  ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) {  .. 
0x757b488b9f31    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9f3b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9f45    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps  .. 
0x757b488b9f48    b807000000              mov eax, 0x7                                           
0x757b488b9f4d    4983c608                add r14, 0x8                                           
0x757b488b9f51    498906                  mov [r14], rax                                         
 .. n = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ;  .. 
0x757b488b9f54    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9f5e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..      case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p ( .. 
0x757b488b9f61    498b47f8                mov rax, [r15-0x8]                                     
 .. }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) .. 
0x757b488b9f65    49894710                mov [r15+0x10], rax                                    
 ..  case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; .. 
0x757b488b9f69    c3                      ret                                                    
 .. 7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" )  .. 
0x757b488b9f6a    e939000000              jmp 0x757b488b9fa8            < C_Syntax.csMatchExWithReturn+497 >
 ..  ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ;  .. 
0x757b488b9f6f    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9f79    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9f83    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x  .. 
0x757b488b9f86    b808000000              mov eax, 0x8                                           
0x757b488b9f8b    4983c608                add r14, 0x8                                           
0x757b488b9f8f    498906                  mov [r14], rax                                         
 .. n = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = .. 
0x757b488b9f92    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9f9c    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..      case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }         .. 
0x757b488b9f9f    498b47f8                mov rax, [r15-0x8]                                     
 .. }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }   .. 
0x757b488b9fa3    49894710                mov [r15+0x10], rax                                    
 ..  case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          ca .. 
0x757b488b9fa7    c3                      ret                                                    
 .. ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; .. 
0x757b488b9fa8    e96f000000              jmp 0x757b488ba01c            < C_Syntax.csMatchExWithReturn+613 >
 .. rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p .. 
0x757b488b9fad    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488b9fb7    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488b9fc1    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps  .. 
0x757b488b9fc4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488b9fc8    4983c608                add r14, 0x8                                           
0x757b488b9fcc    498906                  mov [r14], rax                                         
 ..  n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9)  .. 
0x757b488b9fcf    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488b9fd9    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..   case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "single .. 
0x757b488b9fdc    b809000000              mov eax, 0x9                                           
0x757b488b9fe1    4983c608                add r14, 0x8                                           
0x757b488b9fe5    498906                  mov [r14], rax                                         
 ..      case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "sin .. 
0x757b488b9fe8    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488b9ff2    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" )  .. 
0x757b488b9ff5    48b8f33111487b750000    mov rax, 0x757b481131f3       < string : 'singleQuote1' >
0x757b488b9fff    4983c608                add r14, 0x8                                           
0x757b488ba003    498906                  mov [r14], rax                                         
 .. e ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote .. 
0x757b488ba006    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488ba010    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          ca .. 
0x757b488ba013    498b4708                mov rax, [r15+0x8]                                     
 .. n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }       .. 
0x757b488ba017    49894710                mov [r15+0x10], rax                                    
 .. ) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( .. 
0x757b488ba01b    c3                      ret                                                    
 .. " ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n .. 
0x757b488ba01c    e96f000000              jmp 0x757b488ba090            < C_Syntax.csMatchExWithReturn+729 >
 .. ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n)  .. 
0x757b488ba021    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488ba02b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488ba035    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ;  .. 
0x757b488ba038    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba03c    4983c608                add r14, 0x8                                           
0x757b488ba040    498906                  mov [r14], rax                                         
 .. tn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p ( .. 
0x757b488ba043    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488ba04d    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..       case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "dou .. 
0x757b488ba050    b809000000              mov eax, 0x9                                           
0x757b488ba055    4983c608                add r14, 0x8                                           
0x757b488ba059    498906                  mov [r14], rax                                         
 ..          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( " .. 
0x757b488ba05c    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488ba066    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..  'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote"  .. 
0x757b488ba069    48b8253211487b750000    mov rax, 0x757b48113225       < string : 'singleQuote2' >
0x757b488ba073    4983c608                add r14, 0x8                                           
0x757b488ba077    498906                  mov [r14], rax                                         
 ..  case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQu .. 
0x757b488ba07a    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488ba084    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }    .. 
0x757b488ba087    498b4708                mov rax, [r15+0x8]                                     
 .. n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }     .. 
0x757b488ba08b    49894710                mov [r15+0x10], rax                                    
 .. ) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p .. 
0x757b488ba08f    c3                      ret                                                    
 ..  rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return r .. 
0x757b488ba090    e96f000000              jmp 0x757b488ba104            < C_Syntax.csMatchExWithReturn+845 >
 .. tn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn .. 
0x757b488ba095    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488ba09f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488ba0a9    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0ac    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba0b0    4983c608                add r14, 0x8                                           
0x757b488ba0b4    498906                  mov [r14], rax                                         
 .. x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0b7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488ba0c1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..    case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0c4    b809000000              mov eax, 0x9                                           
0x757b488ba0c9    4983c608                add r14, 0x8                                           
0x757b488ba0cd    498906                  mov [r14], rax                                         
 ..       case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0d0    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488ba0da    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0dd    48b8643211487b750000    mov rax, 0x757b48113264       < string : 'doubleQuote' >
0x757b488ba0e7    4983c608                add r14, 0x8                                           
0x757b488ba0eb    498906                  mov [r14], rax                                         
 .. se ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0ee    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488ba0f8    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0fb    498b4708                mov rax, [r15+0x8]                                     
 ..  (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba0ff    49894710                mov [r15+0x10], rax                                    
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba103    c3                      ret                                                    
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba104    c3                      ret                                                    
0x757b488ba105    48b8cbcb76487b750000    mov rax, 0x757b4876cbcb                                
0x757b488ba10f    4983c608                add r14, 0x8                                           
0x757b488ba113    498906                  mov [r14], rax                                         
0x757b488ba116    49bb40d9e4a65f5b0000    mov r11, 0x5b5fa6e4d940                                
0x757b488ba120    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488ba12a    49ffd2                  call r10                      < C compiler code >        
 .. uote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba12d    498b4708                mov rax, [r15+0x8]                                     
 .. " ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba131    b967000000              mov ecx, 0x67                                          
 .. te" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba136    482bc1                  sub rax, rcx                                           
0x757b488ba139    4983c608                add r14, 0x8                                           
0x757b488ba13d    498906                  mov [r14], rax                                         
0x757b488ba140    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488ba14a    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba14d    498b4710                mov rax, [r15+0x10]                                    
0x757b488ba151    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba155    4d8b7e08                mov r15, [r14+0x8]                                     
 ..     }      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba159    498906                  mov [r14], rax                                         
 ..      p ( x - 103 ) ;     return rtn ; }  .. 
0x757b488ba15c    c3                      ret                                                    
Word_Disassemble : word - 'csMatchExWithReturn' :: codeSize = 934
Word : 0x0000757b48769d13 :: Compiled at : 0x0000757b488b9db7
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 173.24 <::

 1 1008 1111
 7 1008 seven
 7 1008 seven
 3 1008 1111
 2 1008 2
 77 1008 77
 3 1008 3
 8 1008 eight
 8 1008 eight
 nine 9 singleQuote1 1008 1111
 nine 9 singleQuote1 1008 1111
 1008 1111
 1 2 2 2 
last line should show : 2 2 2
including namespaces/test/lisp.csl at namespaces/test/initTest.csl : 86.41 ...
 
starting lisp.csl
 7
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 above line should show :: 
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 777
 7
 f

 =============================
LispDefines.f <:> variablef <:> lambdaCalculus compiled word
SourceCode for LispDefines.f :> 
( define f ( lambda (a) ( + a 1 2 ) ) )
Source code file location of f : "namespaces/test/lisp.csl" : 31.38 :: we are now at : namespaces/test/lisp.csl : 33.6
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba289 -- code size = 47 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.f : definition = 0x0000757b488ba289 : disassembly at namespaces/test/lisp.csl : 33.6 :
0x757b488ba289    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba28d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba291    4981c608000000          add r14, 0x8                                           
 ..           ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x757b488ba298    498b47f8                mov rax, [r15-0x8]                                     
 ..         ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x757b488ba29c    b901000000              mov ecx, 0x1                                           
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x757b488ba2a1    4803c1                  add rax, rcx                                           
 ..       ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x757b488ba2a4    b902000000              mov ecx, 0x2                                           
0x757b488ba2a9    4803c1                  add rax, rcx                                           
0x757b488ba2ac    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba2b0    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba2b4    498906                  mov [r14], rax                                         
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x757b488ba2b7    c3                      ret                                                    
Word_Disassemble : word - 'f' :: codeSize = 47
Word : 0x0000757b48313040 :: Compiled at : 0x0000757b488ba289
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 33.6 <::
 7
 f1
 7
 f2
 7
 7
 7
 f
 7
 7
 777
 7
 77
 77
 77
 77
 77
 77
 77
 x
 7
 f1
 7
 7
 7
 f4
 zs1 abc
 zs1
 f3
 13
 f4
 77
 zs1
 7
 7
 7
 0
 0
 1
 
 if :: should show 7 7 7 0 0 1 
 7
 7
 7
 7
 7
 11
 
 cond :: should show 7 7 7 7 7 11
 g
 h
 7
 7
 7
 7
 7
 7
 7
 h1
 7
 7
 7
 7
 7
 7
 7
 7
 7
 77
 77
 pd
 7
 
starting BigNum
 g
 h
 1.00000000000000000000000000000000
 -1.00000000000000000000000000000000
 -2.00000000000000000000000000000000
 0.33333333333333331482961625624739
 3.00000000000000000000000000000000
 7.00000000000000000000000000000000
 7.00000000000000000000000000000000
 
ending BigNum
 a
 b
 ( 3 4 1 2 )
 ( a b 1 2 )
 x
 x
 ( x x x x )
 ( x x x 3 4 1 2 )
 y
 y
 ( y y y y )
 ( y y y x x x 3 4 1 2 )
 
lisp test
 namespaces/test/lisp.csl 169.30 a
 b
 y
 x
 y
 ( x x x 1 2 3 4 5 6 7 8 9 y )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 7
 x
 ( 1 2 3 x )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 7 8 9 47 )
 77
 q1x
 q2
 7
 q3
 q4
 q5
 77
 above line should show 77
DataStack at : namespaces/test/lisp.csl : 202.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 7
 yfac
 3628800
 5040
 fibc

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :> 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 209.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba44f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc : definition = 0x0000757b488ba44f : disassembly at namespaces/test/lisp.csl : 209.21 :
0x757b488ba44f    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba453    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba457    4981c608000000          add r14, 0x8                                           
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba45e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba463    7d14                    jge 0x488ba479                < LispDefines.fibc+42 >
0x757b488ba465    0f1f4000                nop [rax]                                              
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba469    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba46d    4983c608                add r14, 0x8                                           
0x757b488ba471    498906                  mov [r14], rax                                         
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba474    e945000000              jmp 0x757b488ba4be            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba479    498b47f8                mov rax, [r15-0x8]                                     
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba47d    b901000000              mov ecx, 0x1                                           
 .. bda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba482    482bc1                  sub rax, rcx                                           
0x757b488ba485    4983c608                add r14, 0x8                                           
0x757b488ba489    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba48c    e8beffffff              call 0x757b488ba44f           < LispDefines.fibc : 0x0000757b488ba44f >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba491    498b47f8                mov rax, [r15-0x8]                                     
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba495    b902000000              mov ecx, 0x2                                           
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba49a    482bc1                  sub rax, rcx                                           
0x757b488ba49d    4983c608                add r14, 0x8                                           
0x757b488ba4a1    498906                  mov [r14], rax                                         
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba4a4    e8a6ffffff              call 0x757b488ba44f           < LispDefines.fibc : 0x0000757b488ba44f >
0x757b488ba4a9    498b0e                  mov rcx, [r14]                                         
0x757b488ba4ac    498b46f8                mov rax, [r14-0x8]                                     
0x757b488ba4b0    4983ee10                sub r14, 0x10                                          
0x757b488ba4b4    4803c1                  add rax, rcx                                           
0x757b488ba4b7    4983c608                add r14, 0x8                                           
0x757b488ba4bb    498906                  mov [r14], rax                                         
0x757b488ba4be    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba4c2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba4c6    498906                  mov [r14], rax                                         
 ..           (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba4c9    c3                      ret                                                    
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x0000757b48362338 :: Compiled at : 0x0000757b488ba44f
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 209.21 <::
 fibc1
 fibc2

 =============================
LispDefines.fibc1 <:> variablefibc1 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc1 :> 
(define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
Source code file location of fibc1 : "namespaces/test/lisp.csl" : 213.83 :: we are now at : namespaces/test/lisp.csl : 215.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba4cf -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc1 : definition = 0x0000757b488ba4cf : disassembly at namespaces/test/lisp.csl : 215.22 :
0x757b488ba4cf    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba4d3    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba4d7    4981c608000000          add r14, 0x8                                           
   (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x757b488ba4de    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x757b488ba4e3    7d14                    jge 0x488ba4f9                < LispDefines.fibc1+42 >
0x757b488ba4e5    0f1f4000                nop [rax]                                              
 (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x757b488ba4e9    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba4ed    4983c608                add r14, 0x8                                           
0x757b488ba4f1    498906                  mov [r14], rax                                         
 .. e fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba4f4    e945000000              jmp 0x757b488ba53e            < LispDefines.fibc1+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba4f9    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba4fd    b901000000              mov ecx, 0x1                                           
 .. da ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba502    482bc1                  sub rax, rcx                                           
0x757b488ba505    4983c608                add r14, 0x8                                           
0x757b488ba509    498906                  mov [r14], rax                                         
 .. 1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba50c    e8beffffff              call 0x757b488ba4cf           < LispDefines.fibc1 : 0x0000757b488ba4cf >
 .. < n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba511    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba515    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba51a    482bc1                  sub rax, rcx                                           
0x757b488ba51d    4983c608                add r14, 0x8                                           
0x757b488ba521    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x757b488ba524    e8a6ffffff              call 0x757b488ba4cf           < LispDefines.fibc1 : 0x0000757b488ba4cf >
0x757b488ba529    498b0e                  mov rcx, [r14]                                         
0x757b488ba52c    498b46f8                mov rax, [r14-0x8]                                     
0x757b488ba530    4983ee10                sub r14, 0x10                                          
0x757b488ba534    4803c1                  add rax, rcx                                           
0x757b488ba537    4983c608                add r14, 0x8                                           
0x757b488ba53b    498906                  mov [r14], rax                                         
0x757b488ba53e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba542    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba546    498906                  mov [r14], rax                                         
0x757b488ba549    c3                      ret                                                    
Word_Disassemble : word - 'fibc1' :: codeSize = 123
Word : 0x0000757b4836a3e0 :: Compiled at : 0x0000757b488ba4cf
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 215.22 <::

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :> 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 216.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba44f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc : definition = 0x0000757b488ba44f : disassembly at namespaces/test/lisp.csl : 216.21 :
0x757b488ba44f    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba453    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba457    4981c608000000          add r14, 0x8                                           
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba45e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba463    7d14                    jge 0x488ba479                < LispDefines.fibc+42 >
0x757b488ba465    0f1f4000                nop [rax]                                              
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x757b488ba469    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba46d    4983c608                add r14, 0x8                                           
0x757b488ba471    498906                  mov [r14], rax                                         
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba474    e945000000              jmp 0x757b488ba4be            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba479    498b47f8                mov rax, [r15-0x8]                                     
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba47d    b901000000              mov ecx, 0x1                                           
 .. bda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba482    482bc1                  sub rax, rcx                                           
0x757b488ba485    4983c608                add r14, 0x8                                           
0x757b488ba489    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba48c    e8beffffff              call 0x757b488ba44f           < LispDefines.fibc : 0x0000757b488ba44f >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba491    498b47f8                mov rax, [r15-0x8]                                     
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba495    b902000000              mov ecx, 0x2                                           
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba49a    482bc1                  sub rax, rcx                                           
0x757b488ba49d    4983c608                add r14, 0x8                                           
0x757b488ba4a1    498906                  mov [r14], rax                                         
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x757b488ba4a4    e8a6ffffff              call 0x757b488ba44f           < LispDefines.fibc : 0x0000757b488ba44f >
0x757b488ba4a9    498b0e                  mov rcx, [r14]                                         
0x757b488ba4ac    498b46f8                mov rax, [r14-0x8]                                     
0x757b488ba4b0    4983ee10                sub r14, 0x10                                          
0x757b488ba4b4    4803c1                  add rax, rcx                                           
0x757b488ba4b7    4983c608                add r14, 0x8                                           
0x757b488ba4bb    498906                  mov [r14], rax                                         
0x757b488ba4be    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba4c2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba4c6    498906                  mov [r14], rax                                         
0x757b488ba4c9    c3                      ret                                                    
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x0000757b48362338 :: Compiled at : 0x0000757b488ba44f
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 216.21 <::

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :> 
(definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
Source code file location of fibc2 : "namespaces/test/lisp.csl" : 214.75 :: we are now at : namespaces/test/lisp.csl : 217.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba54f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x0000757b488ba54f : disassembly at namespaces/test/lisp.csl : 217.22 :
0x757b488ba54f    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba553    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba557    4981c608000000          add r14, 0x8                                           
 ..       (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x757b488ba55e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..         (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x757b488ba563    7d14                    jge 0x488ba579                < LispDefines.fibc2+42 >
0x757b488ba565    0f1f4000                nop [rax]                                              
 ..     (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x757b488ba569    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba56d    4983c608                add r14, 0x8                                           
0x757b488ba571    498906                  mov [r14], rax                                         
 ..  (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x757b488ba574    e945000000              jmp 0x757b488ba5be            < LispDefines.fibc2+111 >
 .. c2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba579    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba57d    b901000000              mov ecx, 0x1                                           
 .. ibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba582    482bc1                  sub rax, rcx                                           
0x757b488ba585    4983c608                add r14, 0x8                                           
0x757b488ba589    498906                  mov [r14], rax                                         
 .. nec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba58c    e8beffffff              call 0x757b488ba54f           < LispDefines.fibc2 : 0x0000757b488ba54f >
 .. < n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba591    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba595    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba59a    482bc1                  sub rax, rcx                                           
0x757b488ba59d    4983c608                add r14, 0x8                                           
0x757b488ba5a1    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x757b488ba5a4    e8a6ffffff              call 0x757b488ba54f           < LispDefines.fibc2 : 0x0000757b488ba54f >
0x757b488ba5a9    498b0e                  mov rcx, [r14]                                         
0x757b488ba5ac    498b46f8                mov rax, [r14-0x8]                                     
0x757b488ba5b0    4983ee10                sub r14, 0x10                                          
0x757b488ba5b4    4803c1                  add rax, rcx                                           
0x757b488ba5b7    4983c608                add r14, 0x8                                           
0x757b488ba5bb    498906                  mov [r14], rax                                         
0x757b488ba5be    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba5c2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba5c6    498906                  mov [r14], rax                                         
 ..                 (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x757b488ba5c9    c3                      ret                                                    
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x0000757b483726e0 :: Compiled at : 0x0000757b488ba54f
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 217.22 <::
 
fibc1 20 =  6765
 
fibc 20 =  6765
 
fibc2 20 =  6765

 11 7
DataStack at : namespaces/test/lisp.csl : 227.80 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 7 11 11 7
 =============================
Root.hioo <:> csl compiled word
SourceCode for Root.hioo :> 
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hioo : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba5de -- code size = 30 bytes
 -----------------------------
Word :: Root.hioo : definition = 0x0000757b488ba5de : disassembly at namespaces/test/lisp.csl : 229.21 :
 ..                           ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x757b488ba5de    b807000000              mov eax, 0x7                                           
0x757b488ba5e3    4983c610                add r14, 0x10                                          
0x757b488ba5e7    498906                  mov [r14], rax                                         
 ..                     ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x757b488ba5ea    498946f8                mov [r14-0x8], rax                                     
0x757b488ba5ee    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488ba5f8    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..                 ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x757b488ba5fb    c3                      ret                                                    
Word_Disassemble : word - 'hioo' :: codeSize = 30
Word : 0x0000757b4878f00b :: Compiled at : 0x0000757b488ba5de
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 229.21 <::

 =============================
Root.hio <:> csl compiled word
SourceCode for Root.hio :> 
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hio : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 230.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba610 -- code size = 30 bytes
 -----------------------------
Word :: Root.hio : definition = 0x0000757b488ba610 : disassembly at namespaces/test/lisp.csl : 230.20 :
 ..       ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x757b488ba610    b80b000000              mov eax, 0xb                                           
0x757b488ba615    4983c610                add r14, 0x10                                          
0x757b488ba619    498906                  mov [r14], rax                                         
 .. ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x757b488ba61c    498946f8                mov [r14-0x8], rax                                     
0x757b488ba620    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488ba62a    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x757b488ba62d    c3                      ret                                                    
Word_Disassemble : word - 'hio' :: codeSize = 30
Word : 0x0000757b4878fbdb :: Compiled at : 0x0000757b488ba610
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 230.20 <::

 =============================
C.bexp43 <:> csl compiled word
SourceCode for C.bexp43 :> 
: bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
Source code file location of bexp43 : "namespaces/test/lisp.csl" : 233.2 :: we are now at : namespaces/test/lisp.csl : 234.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488ba633 -- code size = 107 bytes
TypeSignature : 
 -----------------------------
Word :: C.bexp43 : definition = 0x0000757b488ba633 : disassembly at namespaces/test/lisp.csl : 234.19 :
0x757b488ba633    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba637    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba63b    4981c608000000          add r14, 0x8                                           
 ..                      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x757b488ba642    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..              : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x757b488ba647    7e3d                    jle 0x488ba686                < C.bexp43+83 >
0x757b488ba649    0f1f4000                nop [rax]                                              
 ..          : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x757b488ba64d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba651    4983c608                add r14, 0x8                                           
0x757b488ba655    498906                  mov [r14], rax                                         
 ..      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x757b488ba658    498b47f8                mov rax, [r15-0x8]                                     
 ..  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x757b488ba65c    48ffc8                  dec rax                                                
0x757b488ba65f    4983c608                add r14, 0x8                                           
0x757b488ba663    498906                  mov [r14], rax                                         
  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x757b488ba666    e8c8ffffff              call 0x757b488ba633           < C.bexp43 : 0x0000757b488ba633 >
0x757b488ba66b    498b0e                  mov rcx, [r14]                                         
0x757b488ba66e    498b46f8                mov rax, [r14-0x8]                                     
0x757b488ba672    4983ee10                sub r14, 0x10                                          
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x757b488ba676    480fafc1                imul rax, rcx                                          
0x757b488ba67a    4983c608                add r14, 0x8                                           
0x757b488ba67e    498906                  mov [r14], rax                                         
 .. n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x757b488ba681    e90c000000              jmp 0x757b488ba692            < C.bexp43+95 >
 .. { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x757b488ba686    b801000000              mov eax, 0x1                                           
0x757b488ba68b    4983c608                add r14, 0x8                                           
0x757b488ba68f    498906                  mov [r14], rax                                         
0x757b488ba692    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba696    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba69a    498906                  mov [r14], rax                                         
 ..  { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x757b488ba69d    c3                      ret                                                    
Word_Disassemble : word - 'bexp43' :: codeSize = 107
Word : 0x0000757b487907ab :: Compiled at : 0x0000757b488ba633
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 234.19 <::
 C : bexp43_assert  : ok

 5040

 =============================
C.bexp44 <:> csl compiled word
SourceCode for C.bexp44 :> 
( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
Source code file location of bexp44 : "namespaces/test/lisp.csl" : 239.73 :: we are now at : namespaces/test/lisp.csl : 240.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488ba6a3 -- code size = 107 bytes
TypeSignature : 
 -----------------------------
Word :: C.bexp44 : definition = 0x0000757b488ba6a3 : disassembly at namespaces/test/lisp.csl : 240.23 :
0x757b488ba6a3    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba6a7    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba6ab    4981c608000000          add r14, 0x8                                           
 ..               ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x757b488ba6b2    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..       ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x757b488ba6b7    7e3d                    jle 0x488ba6f6                < C.bexp44+83 >
0x757b488ba6b9    0f1f4000                nop [rax]                                              
 ..   ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x757b488ba6bd    498b47f8                mov rax, [r15-0x8]                                     
0x757b488ba6c1    4983c608                add r14, 0x8                                           
0x757b488ba6c5    498906                  mov [r14], rax                                         
  ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x757b488ba6c8    498b47f8                mov rax, [r15-0x8]                                     
 ..  : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x757b488ba6cc    48ffc8                  dec rax                                                
0x757b488ba6cf    4983c608                add r14, 0x8                                           
0x757b488ba6d3    498906                  mov [r14], rax                                         
 .. bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x757b488ba6d6    e8c8ffffff              call 0x757b488ba6a3           < C.bexp44 : 0x0000757b488ba6a3 >
0x757b488ba6db    498b0e                  mov rcx, [r14]                                         
0x757b488ba6de    498b46f8                mov rax, [r14-0x8]                                     
0x757b488ba6e2    4983ee10                sub r14, 0x10                                          
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x757b488ba6e6    480fafc1                imul rax, rcx                                          
0x757b488ba6ea    4983c608                add r14, 0x8                                           
0x757b488ba6ee    498906                  mov [r14], rax                                         
 .. n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x757b488ba6f1    e90c000000              jmp 0x757b488ba702            < C.bexp44+95 >
 .. { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x757b488ba6f6    b801000000              mov eax, 0x1                                           
0x757b488ba6fb    4983c608                add r14, 0x8                                           
0x757b488ba6ff    498906                  mov [r14], rax                                         
0x757b488ba702    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488ba706    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488ba70a    498906                  mov [r14], rax                                         
 .. @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x757b488ba70d    c3                      ret                                                    
Word_Disassemble : word - 'bexp44' :: codeSize = 107
Word : 0x0000757b48792d3b :: Compiled at : 0x0000757b488ba6a3
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 240.23 <::
 C : bexp43_assert  : ok

 5040 goedel3 ::  
 goedel3 ::  129172350525728 2 goedel3_assert1  : ok

 100466380684320 7 goedel3_assert2  : ok

 goedel3_assert4  : ok

 129172350437481 7 goedel3_assert5  : ok

 9 
goedel3 output should read (after ignoring _asserts) : 
'junk' 2 'junk' 7 'junk' 7 9
 =============================
Root.goedel6 <:> csl compiled word
SourceCode for Root.goedel6 :> 
( :: : goedel6 (| n ) "\n goedel6 :: " ps n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix n @ 6 + 8 "goedel6_3_assert" assert } ix { (| n ) n @ p n 3 = n dup @ 4 + = n @ dup p 7 "goedel6_4_assert" assert } ix n @ dup p return tos ; ".I" typeSignature ' goedel6 find wdiss 9 goedel6 "goedel6_0_assert" assert "\ngoedel6 output should read (after ignoring _asserts) : \n 'junk' 2 'junk' 7 'junk' 7 9" ps )
Source code file location of goedel6 : "namespaces/test/lisp.csl" : 290.0 :: we are now at : namespaces/test/lisp.csl : 290.1
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488ba91d -- code size = 517 bytes
TypeSignature : -> Integer 
 -----------------------------
Word :: Root.goedel6 : definition = 0x0000757b488ba91d : disassembly at namespaces/test/lisp.csl : 290.1 :
0x757b488ba91d    4d897e08                mov [r14+0x8], r15                                     
0x757b488ba921    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488ba925    4981c628000000          add r14, 0x28                                          
 ..   ( ::      : goedel6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1 .. 
0x757b488ba92c    48b83d6c11487b750000    mov rax, 0x757b48116c3d                                
0x757b488ba936    4983c608                add r14, 0x8                                           
0x757b488ba93a    498906                  mov [r14], rax                                         
 .. del6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert   .. 
0x757b488ba93d    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488ba947    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..      "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n .. 
0x757b488ba94a    49c7470809000000        mov qword [r15+0x8], 0x9                               
 ..   n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 " .. 
0x757b488ba952    498b4710                mov rax, [r15+0x10]                                    
0x757b488ba956    4983c608                add r14, 0x8                                           
0x757b488ba95a    498906                  mov [r14], rax                                         
 .. 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x757b488ba95d    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488ba967    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..       {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_ .. 
0x757b488ba96a    49c7471002000000        mov qword [r15+0x10], 0x2                              
 ..     {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_as .. 
0x757b488ba972    498b4710                mov rax, [r15+0x10]                                    
0x757b488ba976    4983c610                add r14, 0x10                                          
0x757b488ba97a    498906                  mov [r14], rax                                         
 .. {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert .. 
0x757b488ba97d    498946f8                mov [r14-0x8], rax                                     
 ..            (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" as .. 
0x757b488ba981    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488ba98b    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" asse .. 
0x757b488ba98e    b802000000              mov eax, 0x2                                           
0x757b488ba993    4983c608                add r14, 0x8                                           
0x757b488ba997    498906                  mov [r14], rax                                         
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert .. 
0x757b488ba99a    48b86c6c11487b750000    mov rax, 0x757b48116c6c       < string : 'goedel6_1_assert' >
0x757b488ba9a4    4983c608                add r14, 0x8                                           
0x757b488ba9a8    498906                  mov [r14], rax                                         
0x757b488ba9ab    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488ba9b5    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. _1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert"  .. 
0x757b488ba9b8    498b4718                mov rax, [r15+0x18]                                    
0x757b488ba9bc    4983c608                add r14, 0x8                                           
0x757b488ba9c0    498906                  mov [r14], rax                                         
 .. ssert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" asse .. 
0x757b488ba9c3    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488ba9cd    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert     .. 
0x757b488ba9d0    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. ssert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert       .. 
0x757b488ba9d8    498b4718                mov rax, [r15+0x18]                                    
 .. t            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert           .. 
0x757b488ba9dc    b904000000              mov ecx, 0x4                                           
0x757b488ba9e1    4803c1                  add rax, rcx                                           
0x757b488ba9e4    4983c610                add r14, 0x10                                          
0x757b488ba9e8    498906                  mov [r14], rax                                         
 ..          { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix .. 
0x757b488ba9eb    498946f8                mov [r14-0x8], rax                                     
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix     .. 
0x757b488ba9ef    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488ba9f9    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix       .. 
0x757b488ba9fc    b807000000              mov eax, 0x7                                           
0x757b488baa01    4983c608                add r14, 0x8                                           
0x757b488baa05    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         .. 
0x757b488baa08    48b8a16c11487b750000    mov rax, 0x757b48116ca1       < string : 'goedel6_2_assert' >
0x757b488baa12    4983c608                add r14, 0x8                                           
0x757b488baa16    498906                  mov [r14], rax                                         
0x757b488baa19    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488baa23    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488baa26    498b4710                mov rax, [r15+0x10]                                    
 .. _2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3  .. 
0x757b488baa2a    b906000000              mov ecx, 0x6                                           
 .. _assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =  .. 
0x757b488baa2f    4803c1                  add rax, rcx                                           
0x757b488baa32    4983c608                add r14, 0x8                                           
0x757b488baa36    498906                  mov [r14], rax                                         
 .. ssert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =    .. 
0x757b488baa39    b808000000              mov eax, 0x8                                           
0x757b488baa3e    4983c608                add r14, 0x8                                           
0x757b488baa42    498906                  mov [r14], rax                                         
 .. ert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =      .. 
0x757b488baa45    48b8c96c11487b750000    mov rax, 0x757b48116cc9       < string : 'goedel6_3_assert' >
0x757b488baa4f    4983c608                add r14, 0x8                                           
0x757b488baa53    498906                  mov [r14], rax                                         
0x757b488baa56    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488baa60    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488baa63    498b4720                mov rax, [r15+0x20]                                    
0x757b488baa67    4983c608                add r14, 0x8                                           
0x757b488baa6b    498906                  mov [r14], rax                                         
 ..  ix         { (| n )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert  .. 
0x757b488baa6e    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488baa78    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix       .. 
0x757b488baa7b    49c7472003000000        mov qword [r15+0x20], 0x3                              
0x757b488baa83    498d4720                lea rax, [r15+0x20]                                    
0x757b488baa87    4983c610                add r14, 0x10                                          
0x757b488baa8b    498906                  mov [r14], rax                                         
 .. @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p       .. 
0x757b488baa8e    498946f8                mov [r14-0x8], rax                                     
 ..              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         r .. 
0x757b488baa92    498b06                  mov rax, [r14]                                         
0x757b488baa95    488b00                  mov rax, [rax]                                         
0x757b488baa98    498906                  mov [r14], rax                                         
 ..          n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         retur .. 
0x757b488baa9b    49830604                add qword [r14], 0x4                                   
 .. 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ .. 
0x757b488baa9f    498b0e                  mov rcx, [r14]                                         
0x757b488baaa2    498b46f8                mov rax, [r14-0x8]                                     
0x757b488baaa6    4983ee10                sub r14, 0x10                                          
 ..        n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return  .. 
0x757b488baaaa    488908                  mov [rax], rcx                                         
0x757b488baaad    498b4720                mov rax, [r15+0x20]                                    
0x757b488baab1    4983c610                add r14, 0x10                                          
0x757b488baab5    498906                  mov [r14], rax                                         
 ..        n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" type .. 
0x757b488baab8    498946f8                mov [r14-0x8], rax                                     
 ..    n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSign .. 
0x757b488baabc    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488baac6    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignat .. 
0x757b488baac9    b807000000              mov eax, 0x7                                           
0x757b488baace    4983c608                add r14, 0x8                                           
0x757b488baad2    498906                  mov [r14], rax                                         
 ..  dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignatur .. 
0x757b488baad5    48b8fe6c11487b750000    mov rax, 0x757b48116cfe       < string : 'goedel6_4_assert' >
0x757b488baadf    4983c608                add r14, 0x8                                           
0x757b488baae3    498906                  mov [r14], rax                                         
0x757b488baae6    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488baaf0    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488baaf3    498b4708                mov rax, [r15+0x8]                                     
0x757b488baaf7    4983c610                add r14, 0x10                                          
0x757b488baafb    498906                  mov [r14], rax                                         
 .. sert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_ .. 
0x757b488baafe    498946f8                mov [r14-0x8], rax                                     
0x757b488bab02    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bab0c    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488bab0f    498b06                  mov rax, [r14]                                         
0x757b488bab12    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bab16    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bab1a    4983c608                add r14, 0x8                                           
0x757b488bab1e    498906                  mov [r14], rax                                         
 .. " assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_asse .. 
0x757b488bab21    c3                      ret                                                    
Word_Disassemble : word - 'goedel6' :: codeSize = 517
Word : 0x0000757b4879e3fb :: Compiled at : 0x0000757b488ba91d
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 290.1 <::
 
 goedel6 ::  129172357374971 2 goedel6_1_assert  : ok

 129172334779104 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 129172350435574 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok

 
goedel6 output should read (after ignoring _asserts) : 
 'junk' 2 'junk' 7 'junk' 7 9
 
goedel8 output :  0 2 goedel8_1_assert  : ok

 0 7 goedel8_3_assert  : ok

 goedel8_4_assert  : ok

 0 10 goedel8_5_assert  : ok

 9 goedel8_6_assert  : ok

 
goedel8 output should read : 
'junk' 2 'junk' 7 'junk' 10 9

 =============================
Root.goedel8 <:> csl compiled word
SourceCode for Root.goedel8 :> 
( :: "\ngoedel8 output : " ps : goedel8 (| n -t "V.I" ) n 1 = { 'n var n @ p n 2 = n @ dup p 2 "goedel8_1_assert" assert { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix n @ 6 + 8 "goedel8_4_assert" assert } ix { 'n var n @ p n 3 = n dup @ 7 + = n @ dup p 10 "goedel8_5_assert" assert } ix n @ 8 + dup p return tos ; goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read : \n'junk' 2 'junk' 7 'junk' 10 9" ps)
Source code file location of goedel8 : "namespaces/test/lisp.csl" : 313.0 :: we are now at : namespaces/test/lisp.csl : 314.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488bab27 -- code size = 594 bytes
TypeSignature : 
 -----------------------------
Word :: Root.goedel8 : definition = 0x0000757b488bab27 : disassembly at namespaces/test/lisp.csl : 314.24 :
0x757b488bab27    4d897e08                mov [r14+0x8], r15                                     
0x757b488bab2b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bab2f    4981c628000000          add r14, 0x28                                          
 .. goedel8 (| n -t "V.I"  )          n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert      .. 
0x757b488bab36    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @  .. 
0x757b488bab3e    48b84b787a487b750000    mov rax, 0x757b487a784b                                
0x757b488bab48    488b00                  mov rax, [rax]                                         
0x757b488bab4b    4983c608                add r14, 0x8                                           
0x757b488bab4f    498906                  mov [r14], rax                                         
 .. 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n  .. 
0x757b488bab52    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bab5c    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488bab5f    48b84b787a487b750000    mov rax, 0x757b487a784b                                
0x757b488bab69    b90200000048890848      mov rcx, 0x4808894800000002                              
0x757b488bab72    b84b787a487b750000      mov rax, 0x757b487a784b                                
0x757b488bab7b    488b00                  mov rax, [rax]                                         
0x757b488bab7e    4983c610                add r14, 0x10                                          
0x757b488bab82    498906                  mov [r14], rax                                         
 ..   'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x757b488bab85    498946f8                mov [r14-0x8], rax                                     
 ..  var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_ .. 
0x757b488bab89    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bab93    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 .. ar n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_ .. 
0x757b488bab96    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x757b488bab9f    498906                  mov [r14], rax                                         
 ..  n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_as .. 
0x757b488baba2    48b8b07411487b750000    mov rax, 0x757b481174b0       < string : 'goedel8_1_assert' >
0x757b488babac    4983c608                add r14, 0x8                                           
0x757b488babb0    498906                  mov [r14], rax                                         
0x757b488babb3    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488babbd    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. ssert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert"  .. 
0x757b488babc0    48b8bb937a487b750000    mov rax, 0x757b487a93bb                                
0x757b488babca    488b00                  mov rax, [rax]                                         
0x757b488babcd    4983c608                add r14, 0x8                                           
0x757b488babd1    498906                  mov [r14], rax                                         
 .. t                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" asse .. 
0x757b488babd4    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488babde    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert .. 
0x757b488babe1    48b8bb937a487b750000    mov rax, 0x757b487a93bb                                
0x757b488babeb    b90300000048890848      mov rcx, 0x4808894800000003                              
0x757b488babf4    b8bb937a487b750000      mov rax, 0x757b487a93bb                                
0x757b488babfd    488b00                  mov rax, [rax]                                         
 ..              { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert           .. 
0x757b488bac00    b9040000004803c149      mov rcx, 0x49c1034800000004                              
0x757b488bac09    83c610                  add rsi, 0x10                                          
0x757b488bac0c    498906                  mov [r14], rax                                         
 ..          { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix .. 
0x757b488bac0f    498946f8                mov [r14-0x8], rax                                     
 ..      { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix     .. 
0x757b488bac13    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bac1d    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix       .. 
0x757b488bac20    b8070000004983c608      mov rax, 0x8c6834900000007                              
0x757b488bac29    498906                  mov [r14], rax                                         
 ..  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         .. 
0x757b488bac2c    48b8e77411487b750000    mov rax, 0x757b481174e7       < string : 'goedel8_3_assert' >
0x757b488bac36    4983c608                add r14, 0x8                                           
0x757b488bac3a    498906                  mov [r14], rax                                         
0x757b488bac3d    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488bac47    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488bac4a    48b84b787a487b750000    mov rax, 0x757b487a784b                                
0x757b488bac54    488b00                  mov rax, [rax]                                         
 .. _3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3  .. 
0x757b488bac57    b9060000004803c149      mov rcx, 0x49c1034800000006                              
0x757b488bac60    83c608                  add rsi, 0x8                                           
0x757b488bac63    498906                  mov [r14], rax                                         
 .. ssert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =    .. 
0x757b488bac66    b8080000004983c608      mov rax, 0x8c6834900000008                              
0x757b488bac6f    498906                  mov [r14], rax                                         
 .. ert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =      .. 
0x757b488bac72    48b80f7511487b750000    mov rax, 0x757b4811750f       < string : 'goedel8_4_assert' >
0x757b488bac7c    4983c608                add r14, 0x8                                           
0x757b488bac80    498906                  mov [r14], rax                                         
0x757b488bac83    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488bac8d    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..    } ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" as .. 
0x757b488bac90    48b81bc57a487b750000    mov rax, 0x757b487ac51b                                
0x757b488bac9a    488b00                  mov rax, [rax]                                         
0x757b488bac9d    4983c608                add r14, 0x8                                           
0x757b488baca1    498906                  mov [r14], rax                                         
 ..  ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert .. 
0x757b488baca4    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bacae    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488bacb1    48b81bc57a487b750000    mov rax, 0x757b487ac51b                                
0x757b488bacbb    b90300000048890848      mov rcx, 0x4808894800000003                              
0x757b488bacc4    b81bc57a487b750000      mov rax, 0x757b487ac51b                                
0x757b488baccd    4983c610                add r14, 0x10                                          
0x757b488bacd1    498906                  mov [r14], rax                                         
 .. @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p  .. 
0x757b488bacd4    498946f8                mov [r14-0x8], rax                                     
 ..              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p      .. 
0x757b488bacd8    498b06                  mov rax, [r14]                                         
0x757b488bacdb    488b00                  mov rax, [rax]                                         
0x757b488bacde    498906                  mov [r14], rax                                         
 ..          n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p          .. 
0x757b488bace1    49830607                add qword [r14], 0x7                                   
0x757b488bace5    498b0e                  mov rcx, [r14]                                         
0x757b488bace8    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bacec    4983ee10                sub r14, 0x10                                          
 ..        n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         re .. 
0x757b488bacf0    488908                  mov [rax], rcx                                         
0x757b488bacf3    48b81bc57a487b750000    mov rax, 0x757b487ac51b                                
0x757b488bacfd    488b00                  mov rax, [rax]                                         
0x757b488bad00    4983c610                add r14, 0x10                                          
0x757b488bad04    498906                  mov [r14], rax                                         
 ..        n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     .. 
0x757b488bad07    498946f8                mov [r14-0x8], rax                                     
 ..    n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goe .. 
0x757b488bad0b    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bad15    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
 ..  n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goede .. 
0x757b488bad18    b80a0000004983c608      mov rax, 0x8c683490000000a                              
0x757b488bad21    498906                  mov [r14], rax                                         
 .. dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8  .. 
0x757b488bad24    48b8477511487b750000    mov rax, 0x757b48117547       < string : 'goedel8_5_assert' >
0x757b488bad2e    4983c608                add r14, 0x8                                           
0x757b488bad32    498906                  mov [r14], rax                                         
0x757b488bad35    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488bad3f    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
0x757b488bad42    498b4708                mov rax, [r15+0x8]                                     
 .. sert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output shou .. 
0x757b488bad46    b9080000004803c149      mov rcx, 0x49c1034800000008                              
0x757b488bad4f    83c610                  add rsi, 0x10                                          
0x757b488bad52    498906                  mov [r14], rax                                         
 .. " assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should r .. 
0x757b488bad55    498946f8                mov [r14-0x8], rax                                     
0x757b488bad59    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488bad63    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488bad66    498b06                  mov rax, [r14]                                         
0x757b488bad69    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bad6d    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bad71    4983c608                add r14, 0x8                                           
0x757b488bad75    498906                  mov [r14], rax                                         
 .. sert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read  .. 
0x757b488bad78    c3                      ret                                                    
Word_Disassemble : word - 'goedel8' :: codeSize = 594
Word : 0x0000757b487a67ab :: Compiled at : 0x0000757b488bab27
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 314.24 <::
 ( ( 1 2 ) )
 ( 1 2 )
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 
ending lisp.csl
total 44
drwxr-xr-x 11 root root 4096 Oct  3  2023 .
drwxr-xr-x 14 root root 4096 Jul 28 07:45 ..
drwxr-xr-x  2 root root 4096 Jul 28 15:45 bin
drwxr-xr-x  2 root root 4096 Oct  5  2023 etc
drwxr-xr-x  2 root root 4096 Sep 18  2023 games
drwxr-xr-x  3 root root 4096 Oct  5  2023 include
drwxr-xr-x  3 root root 4096 Jul 28 15:45 lib
drwxr-xr-x  2 root root 4096 Sep 18  2023 man
drwxr-xr-x  2 root root 4096 Sep 18  2023 sbin
drwxr-xr-x  3 root root 4096 Apr  7 16:24 share
drwxr-xr-x  2 root root 4096 Sep 18  2023 src

OpenVmTil_SignalAction :: signal = 17

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.135
 7 7 7
version 0.940.135
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x24b02400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x0000736624b02400 : disassembly at etc/script : 35.8 :
0x736624b02400    4d897e08                mov [r14+0x8], r15                                     
0x736624b02404    4d8d7e08                lea r15, [r14+0x8]                                     
0x736624b02408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x736624b0240f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x736624b02417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b0241c    7e1f                    jle 0x24b0243d                < Int.fac+61 >
0x736624b0241e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b02422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b02426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b0242a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b0242e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b02432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b02436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x736624b0243b    7fe5                    jg 0x24b02422                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x736624b0243d    498b4708                mov rax, [r15+0x8]                                     
0x736624b02441    e900000000              jmp 0x736624b02446            < Int.fac+70 >
0x736624b02446    4d8d77f8                lea r14, [r15-0x8]                                     
0x736624b0244a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x736624b0244e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x736624b02451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x0000736624cbd437 :: Compiled at : 0x0000736624b02400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

OpenVmTil_SignalAction :: signal = 17

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.140
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21166 : Unused =   1027410 : Allocations =    1 : Largest =  1027410 : Smallest =  1027410 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    753727 : Unused =   3440577 : Allocations =    1 : Largest =  3440577 : Smallest =  3440577 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1895753 : Unused =  23289671
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    848016 : 1963  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xb670237f -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000079a3b670237f : disassembly at etc/lispScript : 28.17 :
0x79a3b670237f    4d897e08                mov [r14+0x8], r15                                     
0x79a3b6702383    4d8d7e08                lea r15, [r14+0x8]                                     
0x79a3b6702387    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x79a3b670238e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x79a3b6702396    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b670239b    7e1f                    jle 0xb67023bc                < Int.fac+61 >
0x79a3b670239d    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023a1    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023a5    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023a9    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023ad    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023b1    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023b5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x79a3b67023ba    7fe5                    jg 0xb67023a1                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023bc    498b4708                mov rax, [r15+0x8]                                     
0x79a3b67023c0    e900000000              jmp 0x79a3b67023c5            < Int.fac+70 >
0x79a3b67023c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x79a3b67023c9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x79a3b67023cd    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x79a3b67023d0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x000079a3b68bc1a7 :: Compiled at : 0x000079a3b670237f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye

OpenVmTil_SignalAction :: signal = 17
 3
total 3872
drwxr-xr-x  8 dennisj dennisj    4096 Jul 28 15:58 .
drwx------ 46 dennisj dennisj   12288 Jul 28 15:59 ..
drwxr-xr-x  2 dennisj dennisj    4096 Jul 28 15:45 bin
-rw-r--r--  1 dennisj dennisj       8 Jul 19 07:47 csl.cflags
-rw-r--r--  1 dennisj dennisj      86 Jul 19 07:47 csl.config
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.creator
-rw-r--r--  1 dennisj dennisj   18232 Jul 27 08:57 csl.creator.user
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.cxxflags
-rw-r--r--  1 dennisj dennisj    4889 Jul 20 10:07 csl.files
-rw-r--r--  1 dennisj dennisj      12 Jul 20 10:07 csl.includes
-rw-r--r--  1 dennisj dennisj 1953687 Jul 28 15:58 csl.out.939.483.txt
-rw-r--r--  1 dennisj dennisj 1761500 Jul 28 15:50 csl.out.txt
drwxr-xr-x  2 dennisj dennisj    4096 Jul 25 22:24 etc
drwxr-xr-x  8 dennisj dennisj    4096 Jul 27 00:06 .git
-rw-r--r--  1 dennisj dennisj   18845 Jul 27 09:43 init.csl
-rw-r--r--  1 dennisj dennisj     163 Apr  2  2022 itestf
-rw-r--r--  1 dennisj dennisj    1067 Aug  4  2023 LICENSE
-rw-r--r--  1 dennisj dennisj   20368 Apr  2  2022 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj     220 Apr  2  2022 m
-rwxr-xr-x  1 dennisj dennisj     664 Apr  2  2022 m0
-rwxr-xr-x  1 dennisj dennisj     224 Apr  2  2022 ma
-rw-r--r--  1 dennisj dennisj    8884 Jul 26 03:03 Makefile
-rwxr-xr-x  1 dennisj dennisj     613 Jul 23 13:35 mir
-rwxr-xr-x  1 dennisj dennisj     504 Apr  2  2022 mira
-rwxr-xr-x  1 dennisj dennisj     549 Apr  2  2022 mirAll
-rwxr-xr-x  1 dennisj dennisj     518 Apr  2  2022 mirs
drwxr-xr-x  4 dennisj dennisj    4096 Jul 25 23:15 namespaces
drwxr-xr-x  3 dennisj dennisj    4096 Jul 25 22:25 nbproject
-rwxr-xr-x  1 dennisj dennisj      52 Sep 29  2022 netbeans
-rw-r--r--  1 dennisj dennisj       5 Jul 28 15:45 node.txt
-rw-r--r--  1 dennisj dennisj      40 Apr  2  2022 nt.csl
-rwxr-xr-x  1 dennisj dennisj     124 Apr  2  2022 r
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.md
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.txt
drwxr-xr-x  5 dennisj dennisj    4096 Jul 25 22:24 src
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test.txt

OpenVmTil_SignalAction :: signal = 17

3
 namespaces/test/lisp.csl 351.9
including namespaces/compiler/syntax.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :> 
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
Source code file location of yada : "namespaces/compiler/syntax.csl" : 7.10 :: we are now at : namespaces/compiler/syntax.csl : 7.83
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bae1b -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yada : definition = 0x0000757b488bae1b : disassembly at namespaces/compiler/syntax.csl : 7.83 :
0x757b488bae1b    4d897e08                mov [r14+0x8], r15                                     
0x757b488bae1f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bae23    4981c620000000          add r14, 0x20                                          
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x757b488bae2a    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x757b488bae32    49c747100c000000        mov qword [r15+0x10], 0xc                              
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae3a    498b4708                mov rax, [r15+0x8]                                     
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae3e    498b4f10                mov rcx, [r15+0x10]                                    
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae42    4803c1                  add rax, rcx                                           
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae45    b90200000048c7c200      mov rcx, 0xc2c74800000002                              
0x757b488bae4e    0000                    add [rax], al                                          
0x757b488bae50    0048f7                  add [rax-0x9], cl                                      
0x757b488bae53    f9                      stc                                                    
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x757b488bae54    49894718                mov [r15+0x18], rax                                    
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae58    498b4718                mov rax, [r15+0x18]                                    
0x757b488bae5c    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bae60    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bae64    4983c608                add r14, 0x8                                           
 .. 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae68    498906                  mov [r14], rax                                         
 .. x ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae6b    c3                      ret                                                    
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x0000757b487b10eb :: Compiled at : 0x0000757b488bae1b
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 7.83 <::

DataStack at : namespaces/compiler/syntax.csl : 7.97 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/syntax.csl : 7.107 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :> 
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
Source code file location of yadaYada : "namespaces/compiler/syntax.csl" : 8.14 :: we are now at : namespaces/compiler/syntax.csl : 8.98
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bae71 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x0000757b488bae71 : disassembly at namespaces/compiler/syntax.csl : 8.98 :
0x757b488bae71    4d897e08                mov [r14+0x8], r15                                     
0x757b488bae75    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bae79    4981c620000000          add r14, 0x20                                          
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x757b488bae80    49c7470802000000        mov qword [r15+0x8], 0x2                               
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x757b488bae88    49c747100c000000        mov qword [r15+0x10], 0xc                              
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae90    498b4708                mov rax, [r15+0x8]                                     
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae94    498b4f10                mov rcx, [r15+0x10]                                    
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae98    4803c1                  add rax, rcx                                           
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488bae9b    b90200000048c7c200      mov rcx, 0xc2c74800000002                              
0x757b488baea4    0000                    add [rax], al                                          
0x757b488baea6    0048f7                  add [rax-0x9], cl                                      
0x757b488baea9    f9                      stc                                                    
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488baeaa    49894718                mov [r15+0x18], rax                                    
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488baeae    498b4718                mov rax, [r15+0x18]                                    
0x757b488baeb2    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488baeb6    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488baeba    4983c608                add r14, 0x8                                           
 ..  = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488baebe    498906                  mov [r14], rax                                         
 .. 2 ; x = (( a + b ) / 2 ) ; return x ; } 
0x757b488baec1    c3                      ret                                                    
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x0000757b487b3b8b :: Compiled at : 0x0000757b488bae71
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 8.98 <::

DataStack at : namespaces/compiler/syntax.csl : 8.124 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Root.hi <:> csl compiled word
SourceCode for Root.hi :> 
: hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x 
Source code file location of hi : "namespaces/compiler/syntax.csl" : 14.2 :: we are now at : namespaces/compiler/syntax.csl : 15.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488baf00 -- code size = 101 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi : definition = 0x0000757b488baf00 : disassembly at namespaces/compiler/syntax.csl : 15.16 :
0x757b488baf00    4d897e08                mov [r14+0x8], r15                                     
0x757b488baf04    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488baf08    4981c610000000          add r14, 0x10                                          
 ..                    : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf0f    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x757b488baf18    498906                  mov [r14], rax                                         
 ..              : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf1b    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x757b488baf24    498906                  mov [r14], rax                                         
 ..          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf27    498b0e                  mov rcx, [r14]                                         
0x757b488baf2a    498b46f8                mov rax, [r14-0x8]                                     
0x757b488baf2e    4983ee10                sub r14, 0x10                                          
 ..                  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf32    4803c1                  add rax, rcx                                           
 ..                          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf35    49894708                mov [r15+0x8], rax                                     
 ..   : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf39    498b4708                mov rax, [r15+0x8]                                     
0x757b488baf3d    4983c608                add r14, 0x8                                           
0x757b488baf41    498906                  mov [r14], rax                                         
 .. : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf44    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488baf4e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x757b488baf51    498b4708                mov rax, [r15+0x8]                                     
0x757b488baf55    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488baf59    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488baf5d    4983c608                add r14, 0x8                                           
 .. x ) x = ( 2 + ( 3 * 4 ) ), x p return x 
0x757b488baf61    498906                  mov [r14], rax                                         
0x757b488baf64    c3                      ret                                                    
Word_Disassemble : word - 'hi' :: codeSize = 101
Word : 0x0000757b487b71fb :: Compiled at : 0x0000757b488baf00
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 15.16 <::
 14
DataStack at : namespaces/compiler/syntax.csl : 16.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :> 
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 19.2 :: we are now at : namespaces/compiler/syntax.csl : 20.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488baf6a -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi1 : definition = 0x0000757b488baf6a : disassembly at namespaces/compiler/syntax.csl : 20.17 :
0x757b488baf6a    4d897e08                mov [r14+0x8], r15                                     
0x757b488baf6e    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488baf72    4981c610000000          add r14, 0x10                                          
 ..                 : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488baf79    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x757b488baf82    498906                  mov [r14], rax                                         
 ..         : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488baf85    498b47f0                mov rax, [r15-0x10]                                    
 .. : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488baf89    498b4ff8                mov rcx, [r15-0x8]                                     
 ..     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488baf8d    48c7c200000000          mov rdx, 0x0                                           
0x757b488baf94    48f7f9                  idiv rcx                                               
0x757b488baf97    4983c608                add r14, 0x8                                           
  : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488baf9b    498906                  mov [r14], rax                                         
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488baf9e    498b0e                  mov rcx, [r14]                                         
0x757b488bafa1    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bafa5    4983ee10                sub r14, 0x10                                          
 ..               : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488bafa9    4803c1                  add rax, rcx                                           
0x757b488bafac    4983c608                add r14, 0x8                                           
0x757b488bafb0    498906                  mov [r14], rax                                         
 .. b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x757b488bafb3    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x757b488bafbc    498906                  mov [r14], rax                                         
 .. x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x757b488bafbf    498b0e                  mov rcx, [r14]                                         
0x757b488bafc2    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bafc6    4983ee10                sub r14, 0x10                                          
 .. | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x757b488bafca    480fafc1                imul rax, rcx                                          
 ..                     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x757b488bafce    49894708                mov [r15+0x8], rax                                     
 ..  = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x757b488bafd2    498b4708                mov rax, [r15+0x8]                                     
0x757b488bafd6    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bafda    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bafde    4983ee08                sub r14, 0x8                                           
 .. ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x757b488bafe2    498906                  mov [r14], rax                                         
 .. ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x757b488bafe5    c3                      ret                                                    
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x0000757b487b95db :: Compiled at : 0x0000757b488baf6a
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 20.17 <::
 48
 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :> 
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 22.2 :: we are now at : namespaces/compiler/syntax.csl : 23.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bafeb -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi1 : definition = 0x0000757b488bafeb : disassembly at namespaces/compiler/syntax.csl : 23.17 :
0x757b488bafeb    4d897e08                mov [r14+0x8], r15                                     
0x757b488bafef    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488baff3    4981c610000000          add r14, 0x10                                          
 ..               : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488baffa    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x757b488bb003    498906                  mov [r14], rax                                         
 ..         : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb006    498b47f0                mov rax, [r15-0x10]                                    
 ..     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb00a    498b4ff8                mov rcx, [r15-0x8]                                     
 ..       : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb00e    48c7c200000000          mov rdx, 0x0                                           
0x757b488bb015    48f7f9                  idiv rcx                                               
0x757b488bb018    4983c608                add r14, 0x8                                           
0x757b488bb01c    498906                  mov [r14], rax                                         
 ..   : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb01f    498b0e                  mov rcx, [r14]                                         
0x757b488bb022    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb026    4983ee10                sub r14, 0x10                                          
 ..             : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb02a    4803c1                  add rax, rcx                                           
0x757b488bb02d    4983c608                add r14, 0x8                                           
0x757b488bb031    498906                  mov [r14], rax                                         
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb034    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x757b488bb03d    498906                  mov [r14], rax                                         
 .. a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x757b488bb040    498b0e                  mov rcx, [r14]                                         
0x757b488bb043    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb047    4983ee10                sub r14, 0x10                                          
 .. ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x757b488bb04b    480fafc1                imul rax, rcx                                          
 ..                     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x757b488bb04f    49894708                mov [r15+0x8], rax                                     
 ..  ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x757b488bb053    498b4708                mov rax, [r15+0x8]                                     
0x757b488bb057    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb05b    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb05f    4983ee08                sub r14, 0x8                                           
 .. ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x757b488bb063    498906                  mov [r14], rax                                         
 .. 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x757b488bb066    c3                      ret                                                    
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x0000757b487bc3db :: Compiled at : 0x0000757b488bafeb
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 23.17 <::
 48 48
DataStack at : namespaces/compiler/syntax.csl : 26.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Root.hi2 <:> csl compiled word
SourceCode for Root.hi2 :> 
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
Source code file location of hi2 : "namespaces/compiler/syntax.csl" : 27.2 :: we are now at : namespaces/compiler/syntax.csl : 28.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb06c -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi2 : definition = 0x0000757b488bb06c : disassembly at namespaces/compiler/syntax.csl : 28.17 :
0x757b488bb06c    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb070    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb074    4981c610000000          add r14, 0x10                                          
 ..       : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x757b488bb07b    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x757b488bb084    498906                  mov [r14], rax                                         
 .. : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x757b488bb087    498b47f0                mov rax, [r15-0x10]                                    
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x757b488bb08b    498b4ff8                mov rcx, [r15-0x8]                                     
  : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x757b488bb08f    48c7c200000000          mov rdx, 0x0                                           
0x757b488bb096    48f7f9                  idiv rcx                                               
0x757b488bb099    4983c608                add r14, 0x8                                           
0x757b488bb09d    498906                  mov [r14], rax                                         
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0a0    498b0e                  mov rcx, [r14]                                         
0x757b488bb0a3    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb0a7    4983ee10                sub r14, 0x10                                          
 ..     : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x757b488bb0ab    4803c1                  add rax, rcx                                           
0x757b488bb0ae    4983c608                add r14, 0x8                                           
0x757b488bb0b2    498906                  mov [r14], rax                                         
 .. ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0b5    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x757b488bb0be    498906                  mov [r14], rax                                         
 .. x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0c1    498b0e                  mov rcx, [r14]                                         
0x757b488bb0c4    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb0c8    4983ee10                sub r14, 0x10                                          
 .. ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0cc    480fafc1                imul rax, rcx                                          
 ..                   : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x757b488bb0d0    49894708                mov [r15+0x8], rax                                     
 ..  ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0d4    498b4708                mov rax, [r15+0x8]                                     
0x757b488bb0d8    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb0dc    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb0e0    4983ee08                sub r14, 0x8                                           
 .. b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0e4    498906                  mov [r14], rax                                         
 .. ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x757b488bb0e7    c3                      ret                                                    
Word_Disassemble : word - 'hi2' :: codeSize = 124
Word : 0x0000757b487bee7b :: Compiled at : 0x0000757b488bb06c
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 28.17 <::
 48
DataStack at : namespaces/compiler/syntax.csl : 29.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 48
DataStack at : namespaces/compiler/syntax.csl : 31.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Root.h3 <:> csl compiled word
SourceCode for Root.h3 :> 
: h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
Source code file location of h3 : "namespaces/compiler/syntax.csl" : 32.2 :: we are now at : namespaces/compiler/syntax.csl : 33.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb0ed -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Root.h3 : definition = 0x0000757b488bb0ed : disassembly at namespaces/compiler/syntax.csl : 33.16 :
0x757b488bb0ed    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb0f1    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb0f5    4981c610000000          add r14, 0x10                                          
 ..        : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x757b488bb0fc    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x757b488bb105    498906                  mov [r14], rax                                         
   : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x757b488bb108    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x757b488bb111    498906                  mov [r14], rax                                         
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb114    498b0e                  mov rcx, [r14]                                         
0x757b488bb117    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb11b    4983ee10                sub r14, 0x10                                          
 ..      : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x757b488bb11f    4803c1                  add rax, rcx                                           
0x757b488bb122    4983c608                add r14, 0x8                                           
0x757b488bb126    498906                  mov [r14], rax                                         
 ..  ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb129    498b47f0                mov rax, [r15-0x10]                                    
 ..  ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb12d    498b4ff8                mov rcx, [r15-0x8]                                     
 .. x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb131    48c7c200000000          mov rdx, 0x0                                           
0x757b488bb138    48f7f9                  idiv rcx                                               
0x757b488bb13b    4983c608                add r14, 0x8                                           
 .. ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb13f    498906                  mov [r14], rax                                         
 .. ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb142    498b0e                  mov rcx, [r14]                                         
0x757b488bb145    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb149    4983ee10                sub r14, 0x10                                          
 .. | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb14d    482bc1                  sub rax, rcx                                           
 ..                    : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x757b488bb150    49894708                mov [r15+0x8], rax                                     
 ..  3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb154    498b4708                mov rax, [r15+0x8]                                     
0x757b488bb158    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb15c    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb160    4983ee08                sub r14, 0x8                                           
 .. ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb164    498906                  mov [r14], rax                                         
 .. ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x757b488bb167    c3                      ret                                                    
Word_Disassemble : word - 'h3' :: codeSize = 123
Word : 0x0000757b487c29fb :: Compiled at : 0x0000757b488bb0ed
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 33.16 <::
 12 6 3 h3_assert1  : ok

 12
DataStack at : namespaces/compiler/syntax.csl : 35.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Root.h4 <:> csl compiled word
SourceCode for Root.h4 :> 
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
Source code file location of h4 : "namespaces/compiler/syntax.csl" : 36.2 :: we are now at : namespaces/compiler/syntax.csl : 37.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb16d -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Root.h4 : definition = 0x0000757b488bb16d : disassembly at namespaces/compiler/syntax.csl : 37.16 :
0x757b488bb16d    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb171    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb175    4981c610000000          add r14, 0x10                                          
 ..                : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb17c    b8140000004983c608      mov rax, 0x8c6834900000014                              
0x757b488bb185    498906                  mov [r14], rax                                         
 ..         : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb188    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x757b488bb191    498906                  mov [r14], rax                                         
 ..     : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb194    498b0e                  mov rcx, [r14]                                         
0x757b488bb197    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb19b    4983ee10                sub r14, 0x10                                          
 ..             : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb19f    482bc1                  sub rax, rcx                                           
0x757b488bb1a2    4983c608                add r14, 0x8                                           
0x757b488bb1a6    498906                  mov [r14], rax                                         
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb1a9    498b47f0                mov rax, [r15-0x10]                                    
 ..  b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x757b488bb1ad    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x757b488bb1b1    48c7c200000000          mov rdx, 0x0                                           
0x757b488bb1b8    48f7f9                  idiv rcx                                               
0x757b488bb1bb    4983c608                add r14, 0x8                                           
0x757b488bb1bf    498906                  mov [r14], rax                                         
 ..  | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x757b488bb1c2    498b0e                  mov rcx, [r14]                                         
0x757b488bb1c5    498b46f8                mov rax, [r14-0x8]                                     
0x757b488bb1c9    4983ee10                sub r14, 0x10                                          
 .. : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb1cd    482bc1                  sub rax, rcx                                           
 ..                      : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x757b488bb1d0    49894708                mov [r15+0x8], rax                                     
 .. ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x757b488bb1d4    498b4708                mov rax, [r15+0x8]                                     
0x757b488bb1d8    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb1dc    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb1e0    4983ee08                sub r14, 0x8                                           
 ..  20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x757b488bb1e4    498906                  mov [r14], rax                                         
 .. 0 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x757b488bb1e7    c3                      ret                                                    
Word_Disassemble : word - 'h4' :: codeSize = 123
Word : 0x0000757b487c6c3b :: Compiled at : 0x0000757b488bb16d
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 37.16 <::
 6
DataStack at : namespaces/compiler/syntax.csl : 38.24 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 6
DataStack at : namespaces/compiler/syntax.csl : 39.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 
above lines should read 6
DataStack at : namespaces/compiler/syntax.csl : 42.40 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 3 
above line should read 3

  52.53799999999999670308170607313514
  52.53799999999999670308170607313514
  52.53799999999999670308170607313514 
above lines should show : 52.53799999999999670308170607313514
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :> 
void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 59.11 :: we are now at : namespaces/compiler/syntax.csl : 62.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb4df -- code size = 255 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x0000757b488bb4df : disassembly at namespaces/compiler/syntax.csl : 62.18 :
0x757b488bb4df    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb4e3    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb4e7    4981c608000000          add r14, 0x8                                           
 ..                    void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } .. 
0x757b488bb4ee    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488bb4f3    0f8523000000            jnz 0x757b488bb51c            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x757b488bb4f9    48b8258511487b750000    mov rax, 0x757b48118525       < string : 'hi1' >
0x757b488bb503    4983c608                add r14, 0x8                                           
0x757b488bb507    498906                  mov [r14], rax                                         
 ..     void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x757b488bb50a    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb514    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb517    e929000000              jmp 0x757b488bb545            < C_Syntax.thi42+102 >
   void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x757b488bb51c    49837ff802              cmp qword [r15-0x8], 0x2                               
0x757b488bb521    0f8523000000            jnz 0x757b488bb54a            < C_Syntax.thi42+107 >
 ..  ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb527    48b8378511487b750000    mov rax, 0x757b48118537       < string : 'hi2' >
0x757b488bb531    4983c608                add r14, 0x8                                           
0x757b488bb535    498906                  mov [r14], rax                                         
 ..  { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb538    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb542    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb545    e929000000              jmp 0x757b488bb573            < C_Syntax.thi42+148 >
 .. == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb54a    49837ff803              cmp qword [r15-0x8], 0x3                               
0x757b488bb54f    0f8523000000            jnz 0x757b488bb578            < C_Syntax.thi42+153 >
 .. i1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb555    48b8498511487b750000    mov rax, 0x757b48118549       < string : 'hi3' >
0x757b488bb55f    4983c608                add r14, 0x8                                           
0x757b488bb563    498906                  mov [r14], rax                                         
 ..  : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb566    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb570    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb573    e929000000              jmp 0x757b488bb5a1            < C_Syntax.thi42+194 >
 .. == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb578    49837ff804              cmp qword [r15-0x8], 0x4                               
0x757b488bb57d    0f8523000000            jnz 0x757b488bb5a6            < C_Syntax.thi42+199 >
 .. i2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb583    48b85c8511487b750000    mov rax, 0x757b4811855c       < string : 'hi42' >
0x757b488bb58d    4983c608                add r14, 0x8                                           
0x757b488bb591    498906                  mov [r14], rax                                         
 .. : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb594    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb59e    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb5a1    e92b000000              jmp 0x757b488bb5d1            < C_Syntax.thi42+242 >
 .. = 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb5a6    48b86e8511487b750000    mov rax, 0x757b4811856e       < string : 'err' >
0x757b488bb5b0    4983c608                add r14, 0x8                                           
0x757b488bb5b4    498906                  mov [r14], rax                                         
 .. "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb5b7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb5c1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. 3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb5c4    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb5ce    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bb5d1    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb5d5    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb5d9    4983ee08                sub r14, 0x8                                           
 .. n == 4 ? "hi42" ps : "err" ps Error ; } 
0x757b488bb5dd    c3                      ret                                                    
Word_Disassemble : word - 'thi42' :: codeSize = 255
Word : 0x0000757b487cfddb :: Compiled at : 0x0000757b488bb4df
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 62.18 <::

 hi1 hi2 hi3 hi42 
should show : hi1 hi2 hi3 hi42  hi42

 =============================
Interpreter.thi2 <:> csl compiled word
SourceCode for Interpreter.thi2 :> 
: thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
Source code file location of thi2 : "namespaces/compiler/syntax.csl" : 72.2 :: we are now at : namespaces/compiler/syntax.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb5e3 -- code size = 150 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi2 : definition = 0x0000757b488bb5e3 : disassembly at namespaces/compiler/syntax.csl : 73.17 :
0x757b488bb5e3    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb5e7    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb5eb    4981c608000000          add r14, 0x8                                           
 ..                          : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x757b488bb5f2    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488bb5f7    0f8523000000            jnz 0x757b488bb620            < Interpreter.thi2+61 >
 ..               : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x757b488bb5fd    48b8958611487b750000    mov rax, 0x757b48118695       < string : 'hi1' >
0x757b488bb607    4983c608                add r14, 0x8                                           
0x757b488bb60b    498906                  mov [r14], rax                                         
 ..         : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x757b488bb60e    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb618    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb61b    e929000000              jmp 0x757b488bb649            < Interpreter.thi2+102 >
 ..    : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x757b488bb620    49837ff802              cmp qword [r15-0x8], 0x2                               
0x757b488bb625    0f8523000000            jnz 0x757b488bb64e            < Interpreter.thi2+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x757b488bb62b    48b8a78611487b750000    mov rax, 0x757b481186a7       < string : 'hi2' >
0x757b488bb635    4983c608                add r14, 0x8                                           
0x757b488bb639    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x757b488bb63c    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb646    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb649    e91e000000              jmp 0x757b488bb66c            < Interpreter.thi2+137 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x757b488bb64e    48b8b78611487b750000    mov rax, 0x757b481186b7       < string : 'err' >
0x757b488bb658    4983c608                add r14, 0x8                                           
0x757b488bb65c    498906                  mov [r14], rax                                         
 .. hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x757b488bb65f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb669    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb66c    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb670    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb674    4983ee08                sub r14, 0x8                                           
 .. " ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x757b488bb678    c3                      ret                                                    
Word_Disassemble : word - 'thi2' :: codeSize = 150
Word : 0x0000757b487d30eb :: Compiled at : 0x0000757b488bb5e3
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 73.17 <::
 hi2
 =============================
Interpreter.thi3 <:> csl compiled word
SourceCode for Interpreter.thi3 :> 
: thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
Source code file location of thi3 : "namespaces/compiler/syntax.csl" : 75.2 :: we are now at : namespaces/compiler/syntax.csl : 76.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb67e -- code size = 179 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi3 : definition = 0x0000757b488bb67e : disassembly at namespaces/compiler/syntax.csl : 76.17 :
0x757b488bb67e    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb682    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb686    4981c608000000          add r14, 0x8                                           
 ..                          : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x757b488bb68d    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488bb692    0f8523000000            jnz 0x757b488bb6bb            < Interpreter.thi3+61 >
 ..               : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x757b488bb698    48b8208711487b750000    mov rax, 0x757b48118720       < string : 'hi1' >
0x757b488bb6a2    4983c608                add r14, 0x8                                           
0x757b488bb6a6    498906                  mov [r14], rax                                         
 ..         : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x757b488bb6a9    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb6b3    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb6b6    e929000000              jmp 0x757b488bb6e4            < Interpreter.thi3+102 >
 ..    : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x757b488bb6bb    49837ff802              cmp qword [r15-0x8], 0x2                               
0x757b488bb6c0    0f8523000000            jnz 0x757b488bb6e9            < Interpreter.thi3+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb6c6    48b8328711487b750000    mov rax, 0x757b48118732       < string : 'hi2' >
0x757b488bb6d0    4983c608                add r14, 0x8                                           
0x757b488bb6d4    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb6d7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb6e1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb6e4    e929000000              jmp 0x757b488bb712            < Interpreter.thi3+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb6e9    49837ff803              cmp qword [r15-0x8], 0x3                               
0x757b488bb6ee    0f8523000000            jnz 0x757b488bb717            < Interpreter.thi3+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb6f4    48b8448711487b750000    mov rax, 0x757b48118744       < string : 'hi3' >
0x757b488bb6fe    4983c608                add r14, 0x8                                           
0x757b488bb702    498906                  mov [r14], rax                                         
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb705    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb70f    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb712    e90d000000              jmp 0x757b488bb724            < Interpreter.thi3+166 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb717    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb721    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bb724    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb728    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb72c    4983ee08                sub r14, 0x8                                           
 .. hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x757b488bb730    c3                      ret                                                    
Word_Disassemble : word - 'thi3' :: codeSize = 179
Word : 0x0000757b487d4fbb :: Compiled at : 0x0000757b488bb67e
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 76.17 <::
 hi3
 =============================
Interpreter.thi43 <:> csl compiled word
SourceCode for Interpreter.thi43 :> 
: thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
Source code file location of thi43 : "namespaces/compiler/syntax.csl" : 79.2 :: we are now at : namespaces/compiler/syntax.csl : 80.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb736 -- code size = 225 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi43 : definition = 0x0000757b488bb736 : disassembly at namespaces/compiler/syntax.csl : 80.18 :
0x757b488bb736    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb73a    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb73e    4981c608000000          add r14, 0x8                                           
 ..                         : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x757b488bb745    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488bb74a    0f8523000000            jnz 0x757b488bb773            < Interpreter.thi43+61 >
 ..              : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x757b488bb750    48b8c18711487b750000    mov rax, 0x757b481187c1       < string : 'hi1' >
0x757b488bb75a    4983c608                add r14, 0x8                                           
0x757b488bb75e    498906                  mov [r14], rax                                         
 ..        : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x757b488bb761    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb76b    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb76e    e929000000              jmp 0x757b488bb79c            < Interpreter.thi43+102 >
 ..   : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x757b488bb773    49837ff802              cmp qword [r15-0x8], 0x2                               
0x757b488bb778    0f8523000000            jnz 0x757b488bb7a1            < Interpreter.thi43+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb77e    48b8d38711487b750000    mov rax, 0x757b481187d3       < string : 'hi2' >
0x757b488bb788    4983c608                add r14, 0x8                                           
0x757b488bb78c    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb78f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb799    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb79c    e929000000              jmp 0x757b488bb7ca            < Interpreter.thi43+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7a1    49837ff803              cmp qword [r15-0x8], 0x3                               
0x757b488bb7a6    0f8523000000            jnz 0x757b488bb7cf            < Interpreter.thi43+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7ac    48b8e58711487b750000    mov rax, 0x757b481187e5       < string : 'hi3' >
0x757b488bb7b6    4983c608                add r14, 0x8                                           
0x757b488bb7ba    498906                  mov [r14], rax                                         
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7bd    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb7c7    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb7ca    e929000000              jmp 0x757b488bb7f8            < Interpreter.thi43+194 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7cf    49837ff804              cmp qword [r15-0x8], 0x4                               
0x757b488bb7d4    0f8523000000            jnz 0x757b488bb7fd            < Interpreter.thi43+199 >
 .. ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7da    48b8f88711487b750000    mov rax, 0x757b481187f8       < string : 'hi42' >
0x757b488bb7e4    4983c608                add r14, 0x8                                           
0x757b488bb7e8    498906                  mov [r14], rax                                         
 .. @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7eb    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb7f5    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb7f8    e90d000000              jmp 0x757b488bb80a            < Interpreter.thi43+212 >
 .. = ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb7fd    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb807    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bb80a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bb80e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bb812    4983ee08                sub r14, 0x8                                           
 .. i3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x757b488bb816    c3                      ret                                                    
Word_Disassemble : word - 'thi43' :: codeSize = 225
Word : 0x0000757b487d78ab :: Compiled at : 0x0000757b488bb736
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 80.18 <::
 hi42
 hi1 hi2 hi3 hi42
n = 3 : m = 4 7 hi42

 =============================
C_Syntax.thi41 <:> csl compiled word
SourceCode for C_Syntax.thi41 :> 
void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
Source code file location of thi41 : "namespaces/compiler/syntax.csl" : 97.11 :: we are now at : namespaces/compiler/syntax.csl : 101.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb8e2 -- code size = 220 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi41 : definition = 0x0000757b488bb8e2 : disassembly at namespaces/compiler/syntax.csl : 101.18 :
 ..                       void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x757b488bb8e2    48c7c000000000          mov rax, 0x0                                           
0x757b488bb8e9    4883f800                cmp rax, 0x0                                           
0x757b488bb8ed    0f8423000000            jz 0x757b488bb916             < C_Syntax.thi41+52 >
 ..                   void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x757b488bb8f3    48b8698911487b750000    mov rax, 0x757b48118969       < string : 'hi1' >
0x757b488bb8fd    4983c608                add r14, 0x8                                           
0x757b488bb901    498906                  mov [r14], rax                                         
 ..             void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x757b488bb904    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb90e    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bb911    e92f000000              jmp 0x757b488bb945            < C_Syntax.thi41+99 >
 ..     void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x757b488bb916    48c7c000000000          mov rax, 0x0                                           
0x757b488bb91d    4883f800                cmp rax, 0x0                                           
0x757b488bb921    0f8423000000            jz 0x757b488bb94a             < C_Syntax.thi41+104 >
 .. void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x757b488bb927    48b87b8911487b750000    mov rax, 0x757b4811897b       < string : 'hi2' >
0x757b488bb931    4983c608                add r14, 0x8                                           
0x757b488bb935    498906                  mov [r14], rax                                         
 .. hi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb938    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb942    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bb945    e92f000000              jmp 0x757b488bb979            < C_Syntax.thi41+151 >
 .. { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb94a    48c7c000000000          mov rax, 0x0                                           
0x757b488bb951    4883f800                cmp rax, 0x0                                           
0x757b488bb955    0f8423000000            jz 0x757b488bb97e             < C_Syntax.thi41+156 >
 .. ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb95b    48b88d8911487b750000    mov rax, 0x757b4811898d       < string : 'hi3' >
0x757b488bb965    4983c608                add r14, 0x8                                           
0x757b488bb969    498906                  mov [r14], rax                                         
 .. " Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb96c    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb976    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bb979    e92d000000              jmp 0x757b488bb9ab            < C_Syntax.thi41+201 >
 .. : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb97e    b8010000004883f800      mov rax, 0xf8834800000001                              
0x757b488bb987    0f8423000000            jz 0x757b488bb9b0             < C_Syntax.thi41+206 >
 .. ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb98d    48b8a18911487b750000    mov rax, 0x757b481189a1                                
0x757b488bb997    4983c608                add r14, 0x8                                           
0x757b488bb99b    498906                  mov [r14], rax                                         
 .. rror : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb99e    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb9a8    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb9ab    e90d000000              jmp 0x757b488bb9bd            < C_Syntax.thi41+219 >
 .. : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb9b0    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bb9ba    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
 .. i3" Error : 1 ? "hi42\n" ps : Error ; } 
0x757b488bb9bd    c3                      ret                                                    
Word_Disassemble : word - 'thi41' :: codeSize = 220
Word : 0x0000757b487dca8b :: Compiled at : 0x0000757b488bb8e2
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 101.18 <::
 hi42
 
should show : 'hi42' 
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :> 
void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 107.11 :: we are now at : namespaces/compiler/syntax.csl : 109.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bb9c3 -- code size = 225 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x0000757b488bb9c3 : disassembly at namespaces/compiler/syntax.csl : 109.18 :
0x757b488bb9c3    4d897e08                mov [r14+0x8], r15                                     
0x757b488bb9c7    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bb9cb    4981c608000000          add r14, 0x8                                           
 ..                    void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x757b488bb9d2    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488bb9d7    0f8523000000            jnz 0x757b488bba00            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x757b488bb9dd    48b8768a11487b750000    mov rax, 0x757b48118a76       < string : '1:hi1' >
0x757b488bb9e7    4983c608                add r14, 0x8                                           
0x757b488bb9eb    498906                  mov [r14], rax                                         
 ..   void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x757b488bb9ee    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bb9f8    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bb9fb    e929000000              jmp 0x757b488bba29            < C_Syntax.thi42+102 >
 void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x757b488bba00    49837ff802              cmp qword [r15-0x8], 0x2                               
0x757b488bba05    0f8523000000            jnz 0x757b488bba2e            < C_Syntax.thi42+107 >
 ..  n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba0b    48b88e8a11487b750000    mov rax, 0x757b48118a8e       < string : '2:hi2' >
0x757b488bba15    4983c608                add r14, 0x8                                           
0x757b488bba19    498906                  mov [r14], rax                                         
 ..  == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba1c    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bba26    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bba29    e929000000              jmp 0x757b488bba57            < C_Syntax.thi42+148 >
 ..  ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba2e    49837ff803              cmp qword [r15-0x8], 0x3                               
0x757b488bba33    0f8523000000            jnz 0x757b488bba5c            < C_Syntax.thi42+153 >
 .. " ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba39    48b8a68a11487b750000    mov rax, 0x757b48118aa6       < string : '3:hi3' >
0x757b488bba43    4983c608                add r14, 0x8                                           
0x757b488bba47    498906                  mov [r14], rax                                         
 ..  == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba4a    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bba54    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bba57    e929000000              jmp 0x757b488bba85            < C_Syntax.thi42+194 >
 ..  ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba5c    49837ff804              cmp qword [r15-0x8], 0x4                               
0x757b488bba61    0f8523000000            jnz 0x757b488bba8a            < C_Syntax.thi42+199 >
 .. " ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba67    48b8bf8a11487b750000    mov rax, 0x757b48118abf       < string : '4:hi42' >
0x757b488bba71    4983c608                add r14, 0x8                                           
0x757b488bba75    498906                  mov [r14], rax                                         
 .. == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba78    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bba82    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bba85    e90d000000              jmp 0x757b488bba97            < C_Syntax.thi42+212 >
 .. ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bba8a    49baa1b48b487b750000    mov r10, 0x757b488bb4a1                                
0x757b488bba94    49ffd2                  call r10                      < void.Error : 0x0000757b488bb4a1 >
0x757b488bba97    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bba9b    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bba9f    4983ee08                sub r14, 0x8                                           
 .. " ps : n == 4 ? "4:hi42" ps : Error ; } 
0x757b488bbaa3    c3                      ret                                                    
Word_Disassemble : word - 'thi42' :: codeSize = 225
Word : 0x0000757b487decbb :: Compiled at : 0x0000757b488bb9c3
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 109.18 <::
 4:hi42 
should show : '4:hi42'  ok ok
n = 3 : m = 4 7 
ok 
including namespaces/test/system.csl at namespaces/test/initTest.csl : 86.41 ...

hello world! - parse this!?
1234            and this! 
        also this!
Hello world! = 0x000004d2


Hello world! = 42


hello world! - parse this!?
         
        also this!
 7 7 7 7
DataStack at : namespaces/test/system.csl : 21.18 :
DataStack depth =   8 : Dsp (R14) = Top = 0x0000757b47211af8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211af8 > = 0x0000757b47211ae0
  DataStack   [  -1 ] < 0x0000757b47211af0 > = 0x0000757b484a53b7       < word : User.s : value = 0x00005b5fa6e6e5f0 >
  DataStack   [  -2 ] < 0x0000757b47211ae8 > = 0x0000000000000000
  DataStack   [  -3 ] < 0x0000757b47211ae0 > = 0x00005b5fa6eebc20
  DataStack   [  -4 ] < 0x0000757b47211ad8 > = 0x0000757b484a53b7       < word : User.s : value = 0x00005b5fa6e6e5f0 >
  DataStack   [  -5 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x0000757b47211ac0 > = 0x0000000000000005

Hello world! = 0x000004d2


hello world!
parse this!


 
 and this!

hello world! - parse this!?
                 and this!
Hello world! = 0x000004d2


Hello world! = 0x000004d2


yes, Hello world! = 0x000004d2
yes, Hello world! = 0x000004d2 : and more yet
e
i       e
line above should read... 
i       e
 =============================
Shell.hio <:> csl compiled word
SourceCode for Shell.hio :> 
: hio if 1 p else 0 p endif ; 
Source code file location of hio : "namespaces/test/system.csl" : 52.2 :: we are now at : namespaces/test/system.csl : 53.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bc1c7 -- code size = 75 bytes
 -----------------------------
Word :: Shell.hio : definition = 0x0000757b488bc1c7 : disassembly at namespaces/test/system.csl : 53.17 :
 ..                                : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc1c7    498b06                  mov rax, [r14]                                         
0x757b488bc1ca    4983ee08                sub r14, 0x8                                           
0x757b488bc1ce    4883f800                cmp rax, 0x0                                           
0x757b488bc1d2    0f841e000000            jz 0x757b488bc1f6             < Shell.hio+47 >
 ..                             : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc1d8    b801000000              mov eax, 0x1                                           
0x757b488bc1dd    4983c608                add r14, 0x8                                           
0x757b488bc1e1    498906                  mov [r14], rax                                         
 ..                           : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc1e4    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bc1ee    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..                         : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc1f1    e91b000000              jmp 0x757b488bc211            < Shell.hio+74 >
 ..                    : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc1f6    48c7c000000000          mov rax, 0x0                                           
0x757b488bc1fd    4983c608                add r14, 0x8                                           
0x757b488bc201    498906                  mov [r14], rax                                         
 ..                  : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc204    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bc20e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..          : hio  if 1 p else 0 p endif ;  .. 
0x757b488bc211    c3                      ret                                                    
Word_Disassemble : word - 'hio' :: codeSize = 75
Word : 0x0000757b487f11ab :: Compiled at : 0x0000757b488bc1c7
 =============================
::> 'wdiss' was called at namespaces/test/system.csl 53.17 <::
 1 0
 876543

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.135
 7 7 7
version 0.940.135
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x3d2af400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x00007df83d2af400 : disassembly at etc/script : 35.8 :
0x7df83d2af400    4d897e08                mov [r14+0x8], r15                                     
0x7df83d2af404    4d8d7e08                lea r15, [r14+0x8]                                     
0x7df83d2af408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7df83d2af40f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7df83d2af417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af41c    7e1f                    jle 0x3d2af43d                < Int.fac+61 >
0x7df83d2af41e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af42a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af42e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7df83d2af43b    7fe5                    jg 0x3d2af422                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af43d    498b4708                mov rax, [r15+0x8]                                     
0x7df83d2af441    e900000000              jmp 0x7df83d2af446            < Int.fac+70 >
0x7df83d2af446    4d8d77f8                lea r14, [r15-0x8]                                     
0x7df83d2af44a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x7df83d2af44e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x7df83d2af451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x00007df83cebd437 :: Compiled at : 0x00007df83d2af400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

OpenVmTil_SignalAction :: signal = 17

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.140
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21166 : Unused =   1027410 : Allocations =    1 : Largest =  1027410 : Smallest =  1027410 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    753727 : Unused =   3440577 : Allocations =    1 : Largest =  3440577 : Smallest =  3440577 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1895753 : Unused =  23289671
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    848016 : 1963  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x41caf37f -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000074f141caf37f : disassembly at etc/lispScript : 28.17 :
0x74f141caf37f    4d897e08                mov [r14+0x8], r15                                     
0x74f141caf383    4d8d7e08                lea r15, [r14+0x8]                                     
0x74f141caf387    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x74f141caf38e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x74f141caf396    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf39b    7e1f                    jle 0x41caf3bc                < Int.fac+61 >
0x74f141caf39d    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3a1    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3a5    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3a9    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3ad    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3b1    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3b5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x74f141caf3ba    7fe5                    jg 0x41caf3a1                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3bc    498b4708                mov rax, [r15+0x8]                                     
0x74f141caf3c0    e900000000              jmp 0x74f141caf3c5            < Int.fac+70 >
0x74f141caf3c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x74f141caf3c9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x74f141caf3cd    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x74f141caf3d0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x000074f1418bc1a7 :: Compiled at : 0x000074f141caf37f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye

OpenVmTil_SignalAction :: signal = 17

including namespaces/compiler/interpreter.csl at namespaces/test/initTest.csl : 86.41 ...
 
xxhi :  
xhi =  7 7 
yhi :  7 
xxhi :  
xhi =  7 7 
zhi :  
yhi :  7 
xxhi :  
xhi =  7 7 7 
xxhi :  
xhi =  7 7
 =============================
C_Syntax.testc1 <:> csl compiled word, prefix
SourceCode for C_Syntax.testc1 :> 
void testc1 () { int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ; int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ; ps ( "\ntdbg =" ) ; p ( tdbg ) ; ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ; ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ; ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ; ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ; ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ; ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4) ; xhi1 p (1 + 2 + 4) ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1 p (1 + 2 + 4) ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ; } 
Source code file location of testc1 : "namespaces/compiler/interpreter.csl" : 37.7 :: we are now at : namespaces/compiler/interpreter.csl : 49.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bcaba -- code size = 1219 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.testc1 : definition = 0x0000757b488bcaba : disassembly at namespaces/compiler/interpreter.csl : 49.19 :
0x757b488bcaba    4d897e08                mov [r14+0x8], r15                                     
0x757b488bcabe    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bcac2    4981c638000000          add r14, 0x38                                          
 ..        void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( .. 
0x757b488bcac9    49c7470801000000        mov qword [r15+0x8], 0x1                               
void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;   .. 
0x757b488bcad1    49c7471002000000        mov qword [r15+0x10], 0x2                              
 ..  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ .. 
0x757b488bcad9    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdb .. 
0x757b488bcae1    49c7472004000000        mov qword [r15+0x20], 0x4                              
 .. tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      .. 
0x757b488bcae9    49c7472805000000        mov qword [r15+0x28], 0x5                              
 ..       int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntd .. 
0x757b488bcaf1    49c7473006000000        mov qword [r15+0x30], 0x6                              
 .. = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( t .. 
0x757b488bcaf9    48b8bf9c11487b750000    mov rax, 0x757b48119cbf                                
0x757b488bcb03    4983c608                add r14, 0x8                                           
0x757b488bcb07    498906                  mov [r14], rax                                         
0x757b488bcb0a    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcb14    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. g6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ .. 
0x757b488bcb17    498b4708                mov rax, [r15+0x8]                                     
0x757b488bcb1b    4983c608                add r14, 0x8                                           
0x757b488bcb1f    498906                  mov [r14], rax                                         
 ..  tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps  .. 
0x757b488bcb22    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcb2c    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( t .. 
0x757b488bcb2f    48b8dc9c11487b750000    mov rax, 0x757b48119cdc                                
0x757b488bcb39    4983c608                add r14, 0x8                                           
0x757b488bcb3d    498906                  mov [r14], rax                                         
0x757b488bcb40    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcb4a    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. dbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( " .. 
0x757b488bcb4d    498b4710                mov rax, [r15+0x10]                                    
0x757b488bcb51    4983c608                add r14, 0x8                                           
0x757b488bcb55    498906                  mov [r14], rax                                         
 ..  ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps .. 
0x757b488bcb58    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcb62    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( t .. 
0x757b488bcb65    48b8fb9c11487b750000    mov rax, 0x757b48119cfb                                
0x757b488bcb6f    4983c608                add r14, 0x8                                           
0x757b488bcb73    498906                  mov [r14], rax                                         
0x757b488bcb76    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcb80    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. bg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( " .. 
0x757b488bcb83    498b4718                mov rax, [r15+0x18]                                    
0x757b488bcb87    4983c608                add r14, 0x8                                           
0x757b488bcb8b    498906                  mov [r14], rax                                         
 .. ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps .. 
0x757b488bcb8e    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcb98    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( .. 
0x757b488bcb9b    48b81a9d11487b750000    mov rax, 0x757b48119d1a                                
0x757b488bcba5    4983c608                add r14, 0x8                                           
0x757b488bcba9    498906                  mov [r14], rax                                         
0x757b488bcbac    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcbb6    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\ .. 
0x757b488bcbb9    498b4720                mov rax, [r15+0x20]                                    
0x757b488bcbbd    4983c608                add r14, 0x8                                           
0x757b488bcbc1    498906                  mov [r14], rax                                         
 .. p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps .. 
0x757b488bcbc4    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcbce    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( " .. 
0x757b488bcbd1    48b8399d11487b750000    mov rax, 0x757b48119d39                                
0x757b488bcbdb    4983c608                add r14, 0x8                                           
0x757b488bcbdf    498906                  mov [r14], rax                                         
0x757b488bcbe2    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcbec    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. bg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii ( .. 
0x757b488bcbef    498b4728                mov rax, [r15+0x28]                                    
0x757b488bcbf3    4983c608                add r14, 0x8                                           
0x757b488bcbf7    498906                  mov [r14], rax                                         
 .. ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xh .. 
0x757b488bcbfa    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcc04    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi .. 
0x757b488bcc07    48b8589d11487b750000    mov rax, 0x757b48119d58                                
0x757b488bcc11    4983c608                add r14, 0x8                                           
0x757b488bcc15    498906                  mov [r14], rax                                         
0x757b488bcc18    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcc22    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. bg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; x .. 
0x757b488bcc25    498b4730                mov rax, [r15+0x30]                                    
0x757b488bcc29    4983c608                add r14, 0x8                                           
0x757b488bcc2d    498906                  mov [r14], rax                                         
 .. ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   .. 
0x757b488bcc30    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcc3a    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..  "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4) .. 
0x757b488bcc3d    48b8799d11487b750000    mov rax, 0x757b48119d79                                
0x757b488bcc47    4983c608                add r14, 0x8                                           
0x757b488bcc4b    498906                  mov [r14], rax                                         
0x757b488bcc4e    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcc58    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi0 .. 
0x757b488bcc5b    48b89b9d11487b750000    mov rax, 0x757b48119d9b                                
0x757b488bcc65    4983c608                add r14, 0x8                                           
0x757b488bcc69    498906                  mov [r14], rax                                         
 ..  p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); .. 
0x757b488bcc6c    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcc76    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2  .. 
0x757b488bcc79    b804000000              mov eax, 0x4                                           
0x757b488bcc7e    4983c608                add r14, 0x8                                           
0x757b488bcc82    498906                  mov [r14], rax                                         
0x757b488bcc85    4d897e08                mov [r14+0x8], r15                                     
0x757b488bcc89    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bcc8d    4981c608000000          add r14, 0x8                                           
0x757b488bcc94    b803000000              mov eax, 0x3                                           
0x757b488bcc99    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bcc9d    4803c1                  add rax, rcx                                           
0x757b488bcca0    4983c608                add r14, 0x8                                           
0x757b488bcca4    498906                  mov [r14], rax                                         
0x757b488bcca7    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bccb1    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bccb4    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bccb8    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bccbc    4983ee08                sub r14, 0x8                                           
 ..  ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      x .. 
0x757b488bccc0    b804000000              mov eax, 0x4                                           
0x757b488bccc5    4983c608                add r14, 0x8                                           
0x757b488bccc9    498906                  mov [r14], rax                                         
0x757b488bcccc    4d897e08                mov [r14+0x8], r15                                     
0x757b488bccd0    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bccd4    4981c608000000          add r14, 0x8                                           
0x757b488bccdb    48b88e9a11487b750000    mov rax, 0x757b48119a8e                                
0x757b488bcce5    4983c608                add r14, 0x8                                           
0x757b488bcce9    498906                  mov [r14], rax                                         
0x757b488bccec    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bccf6    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bccf9    b803000000              mov eax, 0x3                                           
0x757b488bccfe    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bcd02    4803c1                  add rax, rcx                                           
0x757b488bcd05    4983c608                add r14, 0x8                                           
0x757b488bcd09    498906                  mov [r14], rax                                         
0x757b488bcd0c    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcd16    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bcd19    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bcd1d    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bcd21    4983ee08                sub r14, 0x8                                           
 ..  =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; x .. 
0x757b488bcd25    b803000000              mov eax, 0x3                                           
 .. xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 .. 
0x757b488bcd2a    b904000000              mov ecx, 0x4                                           
 .. ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p  .. 
0x757b488bcd2f    4803c1                  add rax, rcx                                           
0x757b488bcd32    4983c608                add r14, 0x8                                           
0x757b488bcd36    498906                  mov [r14], rax                                         
 .. hii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl     .. 
0x757b488bcd39    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcd43    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..  (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; x .. 
0x757b488bcd46    b803000000              mov eax, 0x3                                           
 .. xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8))  .. 
0x757b488bcd4b    b904000000              mov ecx, 0x4                                           
 .. ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8) .. 
0x757b488bcd50    4803c1                  add rax, rcx                                           
0x757b488bcd53    4983c608                add r14, 0x8                                           
0x757b488bcd57    498906                  mov [r14], rax                                         
 .. xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)    .. 
0x757b488bcd5a    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcd64    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xh .. 
0x757b488bcd67    b804000000              mov eax, 0x4                                           
0x757b488bcd6c    4983c608                add r14, 0x8                                           
0x757b488bcd70    498906                  mov [r14], rax                                         
0x757b488bcd73    4d897e08                mov [r14+0x8], r15                                     
0x757b488bcd77    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bcd7b    4981c608000000          add r14, 0x8                                           
0x757b488bcd82    48b88e9a11487b750000    mov rax, 0x757b48119a8e                                
0x757b488bcd8c    4983c608                add r14, 0x8                                           
0x757b488bcd90    498906                  mov [r14], rax                                         
0x757b488bcd93    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcd9d    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bcda0    b803000000              mov eax, 0x3                                           
0x757b488bcda5    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bcda9    4803c1                  add rax, rcx                                           
0x757b488bcdac    4983c608                add r14, 0x8                                           
0x757b488bcdb0    498906                  mov [r14], rax                                         
0x757b488bcdb3    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcdbd    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bcdc0    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bcdc4    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bcdc8    4983ee08                sub r14, 0x8                                           
 .. 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcdcc    b803000000              mov eax, 0x3                                           
 .. xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcdd1    b904000000              mov ecx, 0x4                                           
 .. ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcdd6    4803c1                  add rax, rcx                                           
0x757b488bcdd9    4983c608                add r14, 0x8                                           
0x757b488bcddd    498906                  mov [r14], rax                                         
 ..  + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcde0    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcdea    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcded    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bcdf7    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bce01    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bce04    b803000000              mov eax, 0x3                                           
 ..  4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bce09    b904000000              mov ecx, 0x4                                           
 ..  + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bce0e    4803c1                  add rax, rcx                                           
0x757b488bce11    4983c608                add r14, 0x8                                           
0x757b488bce15    498906                  mov [r14], rax                                         
 ..  p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bce18    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bce22    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bce25    b808000000              mov eax, 0x8                                           
0x757b488bce2a    4983c608                add r14, 0x8                                           
0x757b488bce2e    498906                  mov [r14], rax                                         
0x757b488bce31    4d897e08                mov [r14+0x8], r15                                     
0x757b488bce35    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bce39    4981c608000000          add r14, 0x8                                           
0x757b488bce40    48b89b9811487b750000    mov rax, 0x757b4811989b       < string : 'xhi1' >
0x757b488bce4a    4983c608                add r14, 0x8                                           
0x757b488bce4e    498906                  mov [r14], rax                                         
0x757b488bce51    4d897e08                mov [r14+0x8], r15                                     
0x757b488bce55    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bce59    4981c608000000          add r14, 0x8                                           
0x757b488bce60    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bce64    4983c608                add r14, 0x8                                           
0x757b488bce68    498906                  mov [r14], rax                                         
0x757b488bce6b    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bce75    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bce7f    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488bce82    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bce8c    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bce8f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bce93    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bce97    4983ee08                sub r14, 0x8                                           
0x757b488bce9b    b803000000              mov eax, 0x3                                           
0x757b488bcea0    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bcea4    4803c1                  add rax, rcx                                           
0x757b488bcea7    4983c608                add r14, 0x8                                           
0x757b488bceab    498906                  mov [r14], rax                                         
0x757b488bceae    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bceb8    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bcebb    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bcebf    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bcec3    4983ee08                sub r14, 0x8                                           
 ..  p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcec7    48b8d79d11487b750000    mov rax, 0x757b48119dd7       < string : 'xhi2a =' >
0x757b488bced1    4983c608                add r14, 0x8                                           
0x757b488bced5    498906                  mov [r14], rax                                         
 ..  4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bced8    b808000000              mov eax, 0x8                                           
0x757b488bcedd    4983c608                add r14, 0x8                                           
0x757b488bcee1    498906                  mov [r14], rax                                         
0x757b488bcee4    4d897e08                mov [r14+0x8], r15                                     
0x757b488bcee8    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bceec    4981c608000000          add r14, 0x8                                           
0x757b488bcef3    498b47f0                mov rax, [r15-0x10]                                    
0x757b488bcef7    4983c608                add r14, 0x8                                           
0x757b488bcefb    498906                  mov [r14], rax                                         
0x757b488bcefe    4d897e08                mov [r14+0x8], r15                                     
0x757b488bcf02    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bcf06    4981c608000000          add r14, 0x8                                           
0x757b488bcf0d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bcf11    4983c608                add r14, 0x8                                           
0x757b488bcf15    498906                  mov [r14], rax                                         
0x757b488bcf18    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bcf22    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bcf2c    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488bcf2f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bcf39    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bcf3c    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bcf40    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bcf44    4983ee08                sub r14, 0x8                                           
0x757b488bcf48    b803000000              mov eax, 0x3                                           
0x757b488bcf4d    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bcf51    4803c1                  add rax, rcx                                           
0x757b488bcf54    4983c608                add r14, 0x8                                           
0x757b488bcf58    498906                  mov [r14], rax                                         
0x757b488bcf5b    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcf65    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bcf68    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bcf6c    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bcf70    4983ee10                sub r14, 0x10                                          
0x757b488bcf74    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bcf78    4d8b7e08                mov r15, [r14+0x8]                                     
 .. xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x757b488bcf7c    c3                      ret                                                    
Word_Disassemble : word - 'testc1' :: codeSize = 1219
Word : 0x0000757b43e00508 :: Compiled at : 0x0000757b488bcaba
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 49.19 <::
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
 =============================
C_Syntax.interpret <:> csl compiled word
SourceCode for C_Syntax.interpret :> 
void interpret ( | atoken aword ) { testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1p (1 + 2 + 4) ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ; nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ; while ( 1 ) { atoken = token () ; if ( ! atoken ) break ; oPrintf ( "\n\tinterpret : token = %s", atoken ) ; if ( StringEqual ( atoken, "ihalt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ; break ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } label: done ; } 
Source code file location of interpret : "namespaces/compiler/interpreter.csl" : 55.10 :: we are now at : namespaces/compiler/interpreter.csl : 90.14
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bcf82 -- code size = 878 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret : definition = 0x0000757b488bcf82 : disassembly at namespaces/compiler/interpreter.csl : 90.14 :
0x757b488bcf82    4d897e08                mov [r14+0x8], r15                                     
0x757b488bcf86    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bcf8a    4981c618000000          add r14, 0x18                                          
 void interpret ( | atoken aword )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; .. 
0x757b488bcf91    49babaca8b487b750000    mov r10, 0x757b488bcaba                                
0x757b488bcf9b    49ffd2                  call r10                      < C_Syntax.testc1 : 0x0000757b488bcaba >
 ..  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      .. 
0x757b488bcf9e    b803000000              mov eax, 0x3                                           
 .. estc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; .. 
0x757b488bcfa3    b904000000              mov ecx, 0x4                                           
 ..  testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) .. 
0x757b488bcfa8    4803c1                  add rax, rcx                                           
0x757b488bcfab    4983c608                add r14, 0x8                                           
0x757b488bcfaf    498906                  mov [r14], rax                                         
 ..  )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;   .. 
0x757b488bcfb2    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcfbc    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps .. 
0x757b488bcfbf    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bcfc9    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bcfd3    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret : .. 
0x757b488bcfd6    b803000000              mov eax, 0x3                                           
 .. + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ;  .. 
0x757b488bcfdb    b904000000              mov ecx, 0x4                                           
 .. 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " )  .. 
0x757b488bcfe0    4803c1                  add rax, rcx                                           
0x757b488bcfe3    4983c608                add r14, 0x8                                           
0x757b488bcfe7    498906                  mov [r14], rax                                         
 .. 1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpre .. 
0x757b488bcfea    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bcff4    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while .. 
0x757b488bcff7    b808000000              mov eax, 0x8                                           
0x757b488bcffc    4983c608                add r14, 0x8                                           
0x757b488bd000    498906                  mov [r14], rax                                         
0x757b488bd003    4d897e08                mov [r14+0x8], r15                                     
0x757b488bd007    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bd00b    4981c608000000          add r14, 0x8                                           
0x757b488bd012    48b89b9811487b750000    mov rax, 0x757b4811989b       < string : 'xhi1' >
0x757b488bd01c    4983c608                add r14, 0x8                                           
0x757b488bd020    498906                  mov [r14], rax                                         
0x757b488bd023    4d897e08                mov [r14+0x8], r15                                     
0x757b488bd027    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bd02b    4981c608000000          add r14, 0x8                                           
0x757b488bd032    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bd036    4983c608                add r14, 0x8                                           
0x757b488bd03a    498906                  mov [r14], rax                                         
0x757b488bd03d    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bd047    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd051    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488bd054    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bd05e    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bd061    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd065    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bd069    4983ee08                sub r14, 0x8                                           
0x757b488bd06d    b803000000              mov eax, 0x3                                           
0x757b488bd072    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bd076    4803c1                  add rax, rcx                                           
0x757b488bd079    4983c608                add r14, 0x8                                           
0x757b488bd07d    498906                  mov [r14], rax                                         
0x757b488bd080    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bd08a    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bd08d    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd091    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bd095    4983ee08                sub r14, 0x8                                           
 ..  2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {    .. 
0x757b488bd099    48b878a011487b750000    mov rax, 0x757b4811a078       < string : 'xhi2a =' >
0x757b488bd0a3    4983c608                add r14, 0x8                                           
0x757b488bd0a7    498906                  mov [r14], rax                                         
 ..  ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            at .. 
0x757b488bd0aa    b808000000              mov eax, 0x8                                           
0x757b488bd0af    4983c608                add r14, 0x8                                           
0x757b488bd0b3    498906                  mov [r14], rax                                         
0x757b488bd0b6    4d897e08                mov [r14+0x8], r15                                     
0x757b488bd0ba    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bd0be    4981c608000000          add r14, 0x8                                           
0x757b488bd0c5    498b47f0                mov rax, [r15-0x10]                                    
0x757b488bd0c9    4983c608                add r14, 0x8                                           
0x757b488bd0cd    498906                  mov [r14], rax                                         
0x757b488bd0d0    4d897e08                mov [r14+0x8], r15                                     
0x757b488bd0d4    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bd0d8    4981c608000000          add r14, 0x8                                           
0x757b488bd0df    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bd0e3    4983c608                add r14, 0x8                                           
0x757b488bd0e7    498906                  mov [r14], rax                                         
0x757b488bd0ea    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bd0f4    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd0fe    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488bd101    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bd10b    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bd10e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd112    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bd116    4983ee08                sub r14, 0x8                                           
0x757b488bd11a    b803000000              mov eax, 0x3                                           
0x757b488bd11f    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488bd123    4803c1                  add rax, rcx                                           
0x757b488bd126    4983c608                add r14, 0x8                                           
0x757b488bd12a    498906                  mov [r14], rax                                         
0x757b488bd12d    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bd137    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
0x757b488bd13a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd13e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bd142    4983ee10                sub r14, 0x10                                          
0x757b488bd146    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bd150    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd15a    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. hi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;    .. 
0x757b488bd15d    49bb00e0e9a65f5b0000    mov r11, 0x5b5fa6e9e000                                
0x757b488bd167    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd171    49ffd2                  call r10                      < Io.tab : 0x00005b5fa6e9e000 >
 .. ", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! a .. 
0x757b488bd174    48b89ca011487b750000    mov rax, 0x757b4811a09c       < string : 'interpret :> ' >
0x757b488bd17e    4983c608                add r14, 0x8                                           
0x757b488bd182    498906                  mov [r14], rax                                         
 .. i2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if  .. 
0x757b488bd185    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bd18f    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;      .. 
0x757b488bd192    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bd19c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd1a6    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. terpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\ti .. 
0x757b488bd1a9    b801000000              mov eax, 0x1                                           
0x757b488bd1ae    4883f800                cmp rax, 0x0                                           
0x757b488bd1b2    0f842f010000            jz 0x757b488bd2e7             < C_Syntax.interpret+869 >
 .. while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken .. 
0x757b488bd1b8    49bb40e6e9a65f5b0000    mov r11, 0x5b5fa6e9e640                                
0x757b488bd1c2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd1cc    49ffd2                  call r10                      < Compiler.token : 0x00005b5fa6e9e640 >
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atok .. 
0x757b488bd1cf    498d4708                lea rax, [r15+0x8]                                     
0x757b488bd1d3    488bc8                  mov rcx, rax                                           
0x757b488bd1d6    498b06                  mov rax, [r14]                                         
0x757b488bd1d9    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atok .. 
0x757b488bd1dd    488901                  mov [rcx], rax                                         
 ..   atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( S .. 
0x757b488bd1e0    498b4708                mov rax, [r15+0x8]                                     
 ..     atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( .. 
0x757b488bd1e4    4883f800                cmp rax, 0x0                                           
0x757b488bd1e8    7509                    jnz 0x488bd1f3                < C_Syntax.interpret+625 >
0x757b488bd1ea    0f1f4000                nop [rax]                                              
 .. = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqua .. 
0x757b488bd1ee    e9f4000000              jmp 0x757b488bd2e7            < C_Syntax.interpret+869 >
 .. ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )     .. 
0x757b488bd1f3    48b83228cc477b750000    mov rax, 0x757b47cc2832                                
0x757b488bd1fd    488bf8                  mov rdi, rax                                           
 .. rintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oP .. 
0x757b488bd200    498b4708                mov rax, [r15+0x8]                                     
0x757b488bd204    488bf0                  mov rsi, rax                                           
0x757b488bd207    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bd211    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd21b    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 ..  ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting .. 
0x757b488bd21e    498b4708                mov rax, [r15+0x8]                                     
 .. n () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( at .. 
0x757b488bd222    4983c608                add r14, 0x8                                           
0x757b488bd226    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", a .. 
0x757b488bd229    48b841a111487b750000    mov rax, 0x757b4811a141       < string : 'ihalt' >
0x757b488bd233    4983c608                add r14, 0x8                                           
0x757b488bd237    498906                  mov [r14], rax                                         
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: int .. 
0x757b488bd23a    49ba7ae48a487b750000    mov r10, 0x757b488ae47a                                
0x757b488bd244    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x0000757b488ae47a >
 ..  if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;  .. 
0x757b488bd247    498b06                  mov rax, [r14]                                         
0x757b488bd24a    4983ee08                sub r14, 0x8                                           
0x757b488bd24e    4883f800                cmp rax, 0x0                                           
0x757b488bd252    7439                    jz 0x488bd28d                 < C_Syntax.interpret+779 >
0x757b488bd254    0f1f4000                nop [rax]                                              
 ..              {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;              break ;                        .. 
0x757b488bd258    48b83929cc477b750000    mov rax, 0x757b47cc2939                                
0x757b488bd262    488bf8                  mov rdi, rax                                           
 .. token = %s :: interpret exiting ...", atoken ) ;              break ;                              }                 else         {       .. 
0x757b488bd265    498b4708                mov rax, [r15+0x8]                                     
0x757b488bd269    488bf0                  mov rsi, rax                                           
0x757b488bd26c    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bd276    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd280    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
0x757b488bd283    e95f000000              jmp 0x757b488bd2e7            < C_Syntax.interpret+869 >
0x757b488bd288    e955000000              jmp 0x757b488bd2e2            < C_Syntax.interpret+864 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x757b488bd28d    498b4708                mov rax, [r15+0x8]                                     
0x757b488bd291    4983c608                add r14, 0x8                                           
0x757b488bd295    498906                  mov [r14], rax                                         
 ..    else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x757b488bd298    49bbe0eee9a65f5b0000    mov r11, 0x5b5fa6e9eee0                                
0x757b488bd2a2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd2ac    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x00005b5fa6e9eee0 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x757b488bd2af    498d4710                lea rax, [r15+0x10]                                    
0x757b488bd2b3    488bc8                  mov rcx, rax                                           
0x757b488bd2b6    498b06                  mov rax, [r14]                                         
0x757b488bd2b9    4983ee08                sub r14, 0x8                                           
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x757b488bd2bd    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x757b488bd2c0    498b4710                mov rax, [r15+0x10]                                    
0x757b488bd2c4    4983c608                add r14, 0x8                                           
0x757b488bd2c8    498906                  mov [r14], rax                                         
0x757b488bd2cb    49bbd0ebe9a65f5b0000    mov r11, 0x5b5fa6e9ebd0                                
0x757b488bd2d5    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bd2df    49ffd2                  call r10                      < Interpreter.doWord : 0x00005b5fa6e9ebd0 >
 ..            doWord ( aword ) ;         }     }     label: done ; }  .. 
0x757b488bd2e2    e9c2feffff              jmp 0x757b488bd1a9            < C_Syntax.interpret+551 >
0x757b488bd2e7    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd2eb    4d8b7e08                mov r15, [r14+0x8]                                     
 .. ) ;         }     }     label: done ; }  .. 
0x757b488bd2ef    c3                      ret                                                    
Word_Disassemble : word - 'interpret' :: codeSize = 878
Word : 0x0000757b43e0d508 :: Compiled at : 0x0000757b488bcf82
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 90.14 <::
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :> 

        interpret : token = c_syntaxOff
        interpret : token = using
Using Namespaces :> libc void C Root Dlsym int Defines Interpreter System Shell String Compiler User Combinators Class Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

        interpret : token = //
        interpret : token = User
        interpret : token = :
        interpret : token = 1
        interpret : token = 2
        interpret : token = +
        interpret : token = p
        interpret : token = ;
        interpret : token = hi1 3
        interpret : token = :
        interpret : token = hi1
        interpret : token = hi1
        interpret : token = ;
        interpret : token = :
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = ;
        interpret : token = nl

        interpret : token = heey1 3 3 3 3 3 3
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... hi
including namespaces/test/stack.csl at namespaces/test/initTest.csl : 86.41 ...

DataStack at : namespaces/test/stack.csl : 2.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.45 :
DataStack depth =   9 : Dsp (R14) = Top = 0x0000757b47211b00, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b00 > = 0x0000000000000000
  DataStack   [  -1 ] < 0x0000757b47211af8 > = 0x0000000000000001
  DataStack   [  -2 ] < 0x0000757b47211af0 > = 0x0000000000000002
  DataStack   [  -3 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -4 ] < 0x0000757b47211ae0 > = 0x0000000000000004
  DataStack   [  -5 ] < 0x0000757b47211ad8 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.53 :
DataStack depth =  10 : Dsp (R14) = Top = 0x0000757b47211b08, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b08 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x0000757b47211b00 > = 0x0000000000000000
  DataStack   [  -2 ] < 0x0000757b47211af8 > = 0x0000000000000001
  DataStack   [  -3 ] < 0x0000757b47211af0 > = 0x0000000000000002
  DataStack   [  -4 ] < 0x0000757b47211ae8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x0000757b47211ae0 > = 0x0000000000000004
  DataStack   [  -6 ] < 0x0000757b47211ad8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x0000757b47211ac0 > = 0x0000000000000005
3
DataStack at : namespaces/test/stack.csl : 2.81 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 1
DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   4 : Dsp (R14) = Top = 0x0000757b47211ad8, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad8 > = 0x0000000000000001
  DataStack   [  -1 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 
testpick : above line should read 1

including namespaces/compiler/c_syntax.csl at namespaces/test/initTest.csl : 86.41 ...
 namespaces/compiler/c_syntax.csl 7.9
hello 7

 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :> 
define xtc( a ) a @ ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 25.8 :: we are now at : namespaces/compiler/c_syntax.csl : 26.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bd4c3 -- code size = 52 bytes
TypeSignature : 
 -----------------------------
Word :: Defines.xtc : definition = 0x0000757b488bd4c3 : disassembly at namespaces/compiler/c_syntax.csl : 26.8 :
0x757b488bd4c3    4d897e08                mov [r14+0x8], r15                                     
0x757b488bd4c7    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bd4cb    4981c608000000          add r14, 0x8                                           
 ..                       define xtc( a ) a @ ps .. 
0x757b488bd4d2    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bd4d6    4983c608                add r14, 0x8                                           
0x757b488bd4da    498906                  mov [r14], rax                                         
0x757b488bd4dd    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bd4e7    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bd4ea    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd4ee    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bd4f2    4983ee08                sub r14, 0x8                                           
 ..                   define xtc( a ) a @ ps .. 
0x757b488bd4f6    c3                      ret                                                    
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x0000757b43e1a578 :: Compiled at : 0x0000757b488bd4c3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 26.8 <::
 
 xtc : hi
 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :> 
define xtc( a ) a ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 31.8 :: we are now at : namespaces/compiler/c_syntax.csl : 32.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bd4fc -- code size = 52 bytes
TypeSignature : 
 -----------------------------
Word :: Defines.xtc : definition = 0x0000757b488bd4fc : disassembly at namespaces/compiler/c_syntax.csl : 32.8 :
0x757b488bd4fc    4d897e08                mov [r14+0x8], r15                                     
0x757b488bd500    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bd504    4981c608000000          add r14, 0x8                                           
 ..                       define xtc( a ) a ps .. 
0x757b488bd50b    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bd50f    4983c608                add r14, 0x8                                           
0x757b488bd513    498906                  mov [r14], rax                                         
0x757b488bd516    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bd520    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bd523    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bd527    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bd52b    4983ee08                sub r14, 0x8                                           
 ..                     define xtc( a ) a ps .. 
0x757b488bd52f    c3                      ret                                                    
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x0000757b43e1a578 :: Compiled at : 0x0000757b488bd4fc
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 32.8 <::
 
 xtc : hi CObj size = 104
DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

Dump at : namespaces/compiler/c_syntax.csl : 52.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b48200493 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

        chey.hi = 1234 255
Dump at : namespaces/compiler/c_syntax.csl : 58.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b48200493 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

        chey.heey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 61.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b48200493 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/compiler/c_syntax.csl : 69.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b48200493 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

        chey.hey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 76.25 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 16 00 00 00 00 00  ........ ........ 
0x0000757b48200493 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

CObj.size = 104

chey = 757b48200473

chey.hey = 123456789abcdef

&chey.hey = 757b4820049b 0x0123456789abcdef 0x0000757b4820049b
        hoot
Dump at : namespaces/compiler/c_syntax.csl : 93.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well.... 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x0000757b48200493 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 96.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well.... 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x0000757b48200493 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 98.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  68 6f 6f 74 00 00 00 00  ........ hoot.... 
0x0000757b48200483 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x0000757b48200493 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 100.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  6f 6b 21 20 64 6f 6e 27  ........ ok! don' 
0x0000757b48200483 :  74 20 68 6f 6f 74 00 00  00 00 0a 09 68 6f 6f 74  t hoot.. ....hoot 
0x0000757b48200493 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 102.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x0000757b48200483 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x0000757b48200493 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

        don't

        hoot

Dump at : namespaces/compiler/c_syntax.csl : 106.24 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x0000757b48200483 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x0000757b48200493 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

 =============================
C_Syntax.chi <:> csl compiled word, prefix
SourceCode for C_Syntax.chi :> 
void chi ( CObj * chey0 | a b c d ) { c = 1 + 2 ; b = c + 2 ; a = b + c ; nl p ( c ) ; c 3 "c should be 3" assert p ( b ) ; b 5 "b should be 5" assert p ( a ) ; a 8 "a should be 8" assert dump ( chey0, CObj.size ) ; d = chey0->hey ; hex p ( d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ; oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; d = chey0.hey ; oPrintf ( "\n%lx\n", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; _assert ( d #x0123456789abcdef ) ; oPrintf ( "\n%x\n", CObj.chey0.hey ) ; sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ; dump ( chey0, CObj.size ) ; } 
Source code file location of chi : "namespaces/compiler/c_syntax.csl" : 114.4 :: we are now at : namespaces/compiler/c_syntax.csl : 141.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bda91 -- code size = 1163 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.chi : definition = 0x0000757b488bda91 : disassembly at namespaces/compiler/c_syntax.csl : 141.8 :
0x757b488bda91    4d897e08                mov [r14+0x8], r15                                     
0x757b488bda95    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bda99    4981c628000000          add r14, 0x28                                          
 ..  ( CObj * chey0 | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b )  .. 
0x757b488bdaa0    b803000000              mov eax, 0x3                                           
0x757b488bdaa5    49894718                mov [r15+0x18], rax                                    
 .. | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should  .. 
0x757b488bdaa9    498b4718                mov rax, [r15+0x18]                                    
 .. b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5 .. 
0x757b488bdaad    b902000000              mov ecx, 0x2                                           
 .. a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be .. 
0x757b488bdab2    4803c1                  add rax, rcx                                           
0x757b488bdab5    49894710                mov [r15+0x10], rax                                    
 ..   c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert     .. 
0x757b488bdab9    498b4710                mov rax, [r15+0x10]                                    
 .. = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p (  .. 
0x757b488bdabd    498b4f18                mov rcx, [r15+0x18]                                    
 .. c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p  .. 
0x757b488bdac1    4803c1                  add rax, rcx                                           
0x757b488bdac4    49894708                mov [r15+0x8], rax                                     
0x757b488bdac8    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bdad2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdadc    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should .. 
0x757b488bdadf    498b4718                mov rax, [r15+0x18]                                    
0x757b488bdae3    4983c608                add r14, 0x8                                           
0x757b488bdae7    498906                  mov [r14], rax                                         
0x757b488bdaea    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bdaf4    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..      a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" .. 
0x757b488bdaf7    498b4718                mov rax, [r15+0x18]                                    
0x757b488bdafb    4983c608                add r14, 0x8                                           
0x757b488bdaff    498906                  mov [r14], rax                                         
 ..    a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" a .. 
0x757b488bdb02    b803000000              mov eax, 0x3                                           
0x757b488bdb07    4983c608                add r14, 0x8                                           
0x757b488bdb0b    498906                  mov [r14], rax                                         
 ..  a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" ass .. 
0x757b488bdb0e    48b8b5ae11487b750000    mov rax, 0x757b4811aeb5       < string : 'c should be 3' >
0x757b488bdb18    4983c608                add r14, 0x8                                           
0x757b488bdb1c    498906                  mov [r14], rax                                         
0x757b488bdb1f    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488bdb29    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size .. 
0x757b488bdb2c    498b4710                mov rax, [r15+0x10]                                    
0x757b488bdb30    4983c608                add r14, 0x8                                           
0x757b488bdb34    498906                  mov [r14], rax                                         
0x757b488bdb37    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bdb41    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;   .. 
0x757b488bdb44    498b4710                mov rax, [r15+0x10]                                    
0x757b488bdb48    4983c608                add r14, 0x8                                           
0x757b488bdb4c    498906                  mov [r14], rax                                         
 .. "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;     .. 
0x757b488bdb4f    b805000000              mov eax, 0x5                                           
0x757b488bdb54    4983c608                add r14, 0x8                                           
0x757b488bdb58    498906                  mov [r14], rax                                         
 ..  should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;       .. 
0x757b488bdb5b    48b8e5ae11487b750000    mov rax, 0x757b4811aee5       < string : 'b should be 5' >
0x757b488bdb65    4983c608                add r14, 0x8                                           
0x757b488bdb69    498906                  mov [r14], rax                                         
0x757b488bdb6c    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488bdb76    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 .. ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d .. 
0x757b488bdb79    498b4708                mov rax, [r15+0x8]                                     
0x757b488bdb7d    4983c608                add r14, 0x8                                           
0x757b488bdb81    498906                  mov [r14], rax                                         
0x757b488bdb84    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bdb8e    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;   .. 
0x757b488bdb91    498b4708                mov rax, [r15+0x8]                                     
0x757b488bdb95    4983c608                add r14, 0x8                                           
0x757b488bdb99    498906                  mov [r14], rax                                         
 .. "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;     .. 
0x757b488bdb9c    b808000000              mov eax, 0x8                                           
0x757b488bdba1    4983c608                add r14, 0x8                                           
0x757b488bdba5    498906                  mov [r14], rax                                         
 ..  should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oP .. 
0x757b488bdba8    48b815af11487b750000    mov rax, 0x757b4811af15       < string : 'a should be 8' >
0x757b488bdbb2    4983c608                add r14, 0x8                                           
0x757b488bdbb6    498906                  mov [r14], rax                                         
0x757b488bdbb9    49baf2da8a487b750000    mov r10, 0x757b488adaf2                                
0x757b488bdbc3    49ffd2                  call r10                      < C._assert1 : 0x0000757b488adaf2 >
 ..  a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) .. 
0x757b488bdbc6    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bdbca    4881c000000000          add rax, 0x0                                           
0x757b488bdbd1    4983c608                add r14, 0x8                                           
0x757b488bdbd5    498906                  mov [r14], rax                                         
 .. ld be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprin .. 
0x757b488bdbd8    48b8e0c3e1437b750000    mov rax, 0x757b43e1c3e0       < string : 'h' >
0x757b488bdbe2    488b00                  mov rax, [rax]                                         
0x757b488bdbe5    4983c608                add r14, 0x8                                           
0x757b488bdbe9    498906                  mov [r14], rax                                         
 .. ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\ .. 
0x757b488bdbec    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488bdbf6    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdc00    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..  dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, .. 
0x757b488bdc03    498b47f8                mov rax, [r15-0x8]                                     
 ..  chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\ .. 
0x757b488bdc07    4881c028000000          add rax, 0x28                                          
0x757b488bdc0e    488b00                  mov rax, [rax]                                         
0x757b488bdc11    49894720                mov [r15+0x20], rax                                    
 .. bj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx .. 
0x757b488bdc15    49bb5003eaa65f5b0000    mov r11, 0x5b5fa6ea0350                                
0x757b488bdc1f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdc29    49ffd2                  call r10                      < System.hex : 0x00005b5fa6ea0350 >
 .. ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; .. 
0x757b488bdc2c    498b4720                mov rax, [r15+0x20]                                    
0x757b488bdc30    4983c608                add r14, 0x8                                           
0x757b488bdc34    498906                  mov [r14], rax                                         
 .. ize ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d .. 
0x757b488bdc37    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488bdc41    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. >hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n c .. 
0x757b488bdc44    48b8a4dccc477b750000    mov rax, 0x757b47ccdca4                                
0x757b488bdc4e    488bf8                  mov rdi, rax                                           
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ; .. 
0x757b488bdc51    498b4720                mov rax, [r15+0x20]                                    
0x757b488bdc55    488bf0                  mov rsi, rax                                           
 .. d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrin .. 
0x757b488bdc58    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bdc62    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdc6c    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0 .. 
0x757b488bdc6f    498b47f8                mov rax, [r15-0x8]                                     
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars .. 
0x757b488bdc73    4881c008000000          add rax, 0x8                                           
0x757b488bdc7a    488bf8                  mov rdi, rax                                           
 .. n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\ .. 
0x757b488bdc7d    48b8b5dccc477b750000    mov rax, 0x757b47ccdcb5                                
0x757b488bdc87    488bf0                  mov rsi, rax                                           
 .. tf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx",  .. 
0x757b488bdc8a    498b4720                mov rax, [r15+0x20]                                    
0x757b488bdc8e    488bd0                  mov rdx, rax                                           
0x757b488bdc91    b803000000              mov eax, 0x3                                           
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprin .. 
0x757b488bdc96    49bb40eeec487b750000    mov r11, 0x757b48ecee40                                
0x757b488bdca0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdcaa    49ffd2                  call r10                      < libc.sprintf : 0x0000757b48ecee40 >
 .. "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; .. 
0x757b488bdcad    48b8c2dccc477b750000    mov rax, 0x757b47ccdcc2                                
0x757b488bdcb7    488bf8                  mov rdi, rax                                           
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n che .. 
0x757b488bdcba    498b4720                mov rax, [r15+0x20]                                    
0x757b488bdcbe    488bf0                  mov rsi, rax                                           
 .. y0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.che .. 
0x757b488bdcc1    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bdccb    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdcd5    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CO .. 
0x757b488bdcd8    498b47f8                mov rax, [r15-0x8]                                     
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.che .. 
0x757b488bdcdc    4881c038000000          add rax, 0x38                                          
0x757b488bdce3    488bf8                  mov rdi, rax                                           
 .. ", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars .. 
0x757b488bdce6    48b8d3dccc477b750000    mov rax, 0x757b47ccdcd3                                
0x757b488bdcf0    488bf0                  mov rsi, rax                                           
 .. .chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0. .. 
0x757b488bdcf3    498b47f8                mov rax, [r15-0x8]                                     
 .. 2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 .. 
0x757b488bdcf7    4881c028000000          add rax, 0x28                                          
0x757b488bdcfe    4983c608                add r14, 0x8                                           
0x757b488bdd02    498906                  mov [r14], rax                                         
0x757b488bdd05    488bd0                  mov rdx, rax                                           
0x757b488bdd08    b803000000              mov eax, 0x3                                           
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = .. 
0x757b488bdd0d    49bb40eeec487b750000    mov r11, 0x757b48ecee40                                
0x757b488bdd17    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdd21    49ffd2                  call r10                      < libc.sprintf : 0x0000757b48ecee40 >
 .. x", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0. .. 
0x757b488bdd24    48b8e4dccc477b750000    mov rax, 0x757b47ccdce4                                
0x757b488bdd2e    488bf8                  mov rdi, rax                                           
 .. intf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n ch .. 
0x757b488bdd31    498b47f8                mov rax, [r15-0x8]                                     
 ..  "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d  .. 
0x757b488bdd35    4881c008000000          add rax, 0x8                                           
0x757b488bdd3c    4983c608                add r14, 0x8                                           
0x757b488bdd40    498906                  mov [r14], rax                                         
0x757b488bdd43    488bf0                  mov rsi, rax                                           
 .. y hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &C .. 
0x757b488bdd46    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bdd50    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdd5a    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. , &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d =  .. 
0x757b488bdd5d    48b8f8dccc477b750000    mov rax, 0x757b47ccdcf8                                
0x757b488bdd67    488bf8                  mov rdi, rax                                           
 .. ntf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx .. 
0x757b488bdd6a    498b47f8                mov rax, [r15-0x8]                                     
 .. "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d .. 
0x757b488bdd6e    4881c038000000          add rax, 0x38                                          
0x757b488bdd75    4983c608                add r14, 0x8                                           
0x757b488bdd79    498906                  mov [r14], rax                                         
0x757b488bdd7c    488bf0                  mov rsi, rax                                           
 .. rs = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d )  .. 
0x757b488bdd7f    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bdd89    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdd93    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 ..  &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n ch .. 
0x757b488bdd96    48b80dddcc477b750000    mov rax, 0x757b47ccdd0d                                
0x757b488bdda0    488bf8                  mov rdi, rax                                           
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;  .. 
0x757b488bdda3    498b4720                mov rax, [r15+0x20]                                    
0x757b488bdda7    488bf0                  mov rsi, rax                                           
 .. 2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrint .. 
0x757b488bddaa    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bddb4    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bddbe    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert (  .. 
0x757b488bddc1    498b47f8                mov rax, [r15-0x8]                                     
 .. chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x01 .. 
0x757b488bddc5    4881c028000000          add rax, 0x28                                          
0x757b488bddcc    488b00                  mov rax, [rax]                                         
0x757b488bddcf    49894720                mov [r15+0x20], rax                                    
 .. ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;   .. 
0x757b488bddd3    48b8eedecc477b750000    mov rax, 0x757b47ccdeee                                
0x757b488bdddd    488bf8                  mov rdi, rax                                           
 ..  chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf .. 
0x757b488bdde0    498b4720                mov rax, [r15+0x20]                                    
0x757b488bdde4    488bf0                  mov rsi, rax                                           
 .. %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789ab .. 
0x757b488bdde7    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bddf1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bddfb    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. intf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.ch .. 
0x757b488bddfe    48b8f4decc477b750000    mov rax, 0x757b47ccdef4                                
0x757b488bde08    488bf8                  mov rdi, rax                                           
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprint .. 
0x757b488bde0b    498b4720                mov rax, [r15+0x20]                                    
0x757b488bde0f    488bf0                  mov rsi, rax                                           
 ..  ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n .. 
0x757b488bde12    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bde1c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bde26    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 2 .. 
0x757b488bde29    498b4720                mov rax, [r15+0x20]                                    
0x757b488bde2d    4983c608                add r14, 0x8                                           
0x757b488bde31    498906                  mov [r14], rax                                         
 .. i : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24  .. 
0x757b488bde34    48b8efcdab8967452301    mov rax, 0x123456789abcdef                              
0x757b488bde3e    4983c608                add r14, 0x8                                           
0x757b488bde42    498906                  mov [r14], rax                                         
0x757b488bde45    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488bde4f    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
 .. #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0,  .. 
0x757b488bde52    48b805dfcc477b750000    mov rax, 0x757b47ccdf05                                
0x757b488bde5c    488bf8                  mov rdi, rax                                           
 .. def ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;   .. 
0x757b488bde5f    498b47f8                mov rax, [r15-0x8]                                     
 .. ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bde63    4881c028000000          add rax, 0x28                                          
0x757b488bde6a    4983c608                add r14, 0x8                                           
0x757b488bde6e    498906                  mov [r14], rax                                         
0x757b488bde71    488b00                  mov rax, [rax]                                         
0x757b488bde74    488bf0                  mov rsi, rax                                           
 .. ssert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump .. 
0x757b488bde77    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bde81    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bde8b    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bde8e    498b47f8                mov rax, [r15-0x8]                                     
 .. bj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bde92    4881c020000000          add rax, 0x20                                          
0x757b488bde99    488bf8                  mov rdi, rax                                           
 ..  ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bde9c    48b80adfcc477b750000    mov rax, 0x757b47ccdf0a       < string : '%s' >
0x757b488bdea6    488bf0                  mov rsi, rax                                           
 ..  sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bdea9    48b80ddfcc477b750000    mov rax, 0x757b47ccdf0d       < string : 'hoot' >
0x757b488bdeb3    488bd0                  mov rdx, rax                                           
0x757b488bdeb6    b803000000              mov eax, 0x3                                           
 .. tf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bdebb    49bb40eeec487b750000    mov r11, 0x757b48ecee40                                
0x757b488bdec5    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdecf    49ffd2                  call r10                      < libc.sprintf : 0x0000757b48ecee40 >
 .. s [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bded2    498b47f8                mov rax, [r15-0x8]                                     
0x757b488bded6    4881c000000000          add rax, 0x0                                           
0x757b488bdedd    4983c608                add r14, 0x8                                           
0x757b488bdee1    498906                  mov [r14], rax                                         
 .. s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bdee4    48b8e0c3e1437b750000    mov rax, 0x757b43e1c3e0       < string : 'h' >
0x757b488bdeee    488b00                  mov rax, [rax]                                         
0x757b488bdef1    4983c608                add r14, 0x8                                           
0x757b488bdef5    498906                  mov [r14], rax                                         
 .. y0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bdef8    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488bdf02    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdf0c    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
0x757b488bdf0f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bdf13    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bdf17    4983ee08                sub r14, 0x8                                           
 ..  ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x757b488bdf1b    c3                      ret                                                    
Word_Disassemble : word - 'chi' :: codeSize = 1163
Word : 0x0000757b43e201f8 :: Compiled at : 0x0000757b488bda91
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 141.8 <::

 3 c should be 3  : ok

 5 b should be 5  : ok

 8 a should be 8  : ok


Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x0000757b48200483 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x0000757b48200493 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000757b482004b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b482004c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
 0x0123456789abcdef
 chi : d = 123456789abcdef

 chi : d = 123456789abcdef

 chey0.chars = 
                hey = 123456789abcdef

 chey0.chars2 = 
                hey hey = 757b4820049b

 chi : d = 123456789abcdef

123456789abcdef

 chi : d = 123456789abcdef

89abcdef

Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x0000757b48200473 : Number = 104 :: (little endian dump)
0x0000757b48200473 :  d2 04 00 00 00 00 00 00  0a 09 09 68 65 79 20 3d  ........ ...hey = 
0x0000757b48200483 :  20 31 32 33 34 35 36 37  38 39 61 62 63 64 65 66   1234567 89abcdef 
0x0000757b48200493 :  68 6f 6f 74 00 00 00 00  ef cd ab 89 67 45 23 01  hoot.... ....gE#. 
0x0000757b482004a3 :  ef cd ab 89 67 45 23 01  0a 09 09 68 65 79 20 68  ....gE#. ...hey h 
0x0000757b482004b3 :  65 79 20 3d 20 37 35 37  62 34 38 32 30 30 34 39  ey = 757 b4820049 
0x0000757b482004c3 :  62 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  b....... ....gE#. 
0x0000757b482004d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :> 

        interpret : token = ;
        interpret : token = //
        interpret : token = sp0
        interpret : token = #
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = while
        interpret : token = //
        interpret : token = //
        interpret : token = }
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = while
        interpret : token = //
        interpret : token = }
        interpret : token = #
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret2 <:> csl compiled word
SourceCode for C_Syntax.interpret2 :> 
void interpret2 ( | atoken aword ) { testc1 () ; nl tab () ; ps ( "interpret2 :> " ) ; nl while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i2halt" ) ) { oPrintf ( "\n\tinterpret2 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } } 
Source code file location of interpret2 : "namespaces/compiler/c_syntax.csl" : 149.11 :: we are now at : namespaces/compiler/c_syntax.csl : 205.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bdf21 -- code size = 428 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret2 : definition = 0x0000757b488bdf21 : disassembly at namespaces/compiler/c_syntax.csl : 205.15 :
0x757b488bdf21    4d897e08                mov [r14+0x8], r15                                     
0x757b488bdf25    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bdf29    4981c618000000          add r14, 0x18                                          
void interpret2 ( | atoken aword )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = t .. 
0x757b488bdf30    49babaca8b487b750000    mov r10, 0x757b488bcaba                                
0x757b488bdf3a    49ffd2                  call r10                      < C_Syntax.testc1 : 0x0000757b488bcaba >
0x757b488bdf3d    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bdf47    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdf51    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488bdf54    49bb00e0e9a65f5b0000    mov r11, 0x5b5fa6e9e000                                
0x757b488bdf5e    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdf68    49ffd2                  call r10                      < Io.tab : 0x00005b5fa6e9e000 >
 .. {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n .. 
0x757b488bdf6b    48b899b611487b750000    mov rax, 0x757b4811b699       < string : 'interpret2 :> ' >
0x757b488bdf75    4983c608                add r14, 0x8                                           
0x757b488bdf79    498906                  mov [r14], rax                                         
 .. d )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf  .. 
0x757b488bdf7c    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bdf86    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token  .. 
0x757b488bdf89    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488bdf93    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdf9d    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) .. 
0x757b488bdfa0    b801000000              mov eax, 0x1                                           
0x757b488bdfa5    4883f800                cmp rax, 0x0                                           
0x757b488bdfa9    0f8415010000            jz 0x757b488be0c4             < C_Syntax.interpret2+419 >
0x757b488bdfaf    49bb40e6e9a65f5b0000    mov r11, 0x5b5fa6e9e640                                
0x757b488bdfb9    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdfc3    49ffd2                  call r10                      < Compiler.token : 0x00005b5fa6e9e640 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( Stri .. 
0x757b488bdfc6    498d4708                lea rax, [r15+0x8]                                     
0x757b488bdfca    488bc8                  mov rcx, rax                                           
0x757b488bdfcd    498b06                  mov rax, [r14]                                         
0x757b488bdfd0    4983ee08                sub r14, 0x8                                           
0x757b488bdfd4    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )   .. 
0x757b488bdfd7    48b81c7ccd477b750000    mov rax, 0x757b47cd7c1c                                
0x757b488bdfe1    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( .. 
0x757b488bdfe4    498b4708                mov rax, [r15+0x8]                                     
0x757b488bdfe8    488bf0                  mov rsi, rax                                           
0x757b488bdfeb    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488bdff5    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488bdfff    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 ..  ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;               .. 
0x757b488be002    498b4708                mov rax, [r15+0x8]                                     
0x757b488be006    4983c608                add r14, 0x8                                           
0x757b488be00a    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                       .. 
0x757b488be00d    48b843b711487b750000    mov rax, 0x757b4811b743       < string : 'i2halt' >
0x757b488be017    4983c608                add r14, 0x8                                           
0x757b488be01b    498906                  mov [r14], rax                                         
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ; .. 
0x757b488be01e    49ba7ae48a487b750000    mov r10, 0x757b488ae47a                                
0x757b488be028    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x0000757b488ae47a >
 .. if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                  .. 
0x757b488be02b    498b06                  mov rax, [r14]                                         
0x757b488be02e    4983ee08                sub r14, 0x8                                           
0x757b488be032    4883f800                cmp rax, 0x0                                           
0x757b488be036    7432                    jz 0x488be06a                 < C_Syntax.interpret2+329 >
0x757b488be038    0f1f4000                nop [rax]                                              
 ..  ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                    return ;         }         else  .. 
0x757b488be03c    48b8257dcd477b750000    mov rax, 0x757b47cd7d25                                
0x757b488be046    488bf8                  mov rdi, rax                                           
0x757b488be049    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be053    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be05d    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
0x757b488be060    e95f000000              jmp 0x757b488be0c4            < C_Syntax.interpret2+419 >
0x757b488be065    e955000000              jmp 0x757b488be0bf            < C_Syntax.interpret2+414 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x757b488be06a    498b4708                mov rax, [r15+0x8]                                     
0x757b488be06e    4983c608                add r14, 0x8                                           
0x757b488be072    498906                  mov [r14], rax                                         
0x757b488be075    49bbe0eee9a65f5b0000    mov r11, 0x5b5fa6e9eee0                                
0x757b488be07f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be089    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x00005b5fa6e9eee0 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x757b488be08c    498d4710                lea rax, [r15+0x10]                                    
0x757b488be090    488bc8                  mov rcx, rax                                           
0x757b488be093    498b06                  mov rax, [r14]                                         
0x757b488be096    4983ee08                sub r14, 0x8                                           
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x757b488be09a    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x757b488be09d    498b4710                mov rax, [r15+0x10]                                    
0x757b488be0a1    4983c608                add r14, 0x8                                           
0x757b488be0a5    498906                  mov [r14], rax                                         
0x757b488be0a8    49bbd0ebe9a65f5b0000    mov r11, 0x5b5fa6e9ebd0                                
0x757b488be0b2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be0bc    49ffd2                  call r10                      < Interpreter.doWord : 0x00005b5fa6e9ebd0 >
 ..            doWord ( aword ) ;         }     }   }  .. 
0x757b488be0bf    e9dcfeffff              jmp 0x757b488bdfa0            < C_Syntax.interpret2+127 >
0x757b488be0c4    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be0c8    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  doWord ( aword ) ;         }     }   }  .. 
0x757b488be0cc    c3                      ret                                                    
Word_Disassemble : word - 'interpret2' :: codeSize = 428
Word : 0x0000757b43e2eea8 :: Compiled at : 0x0000757b488bdf21
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 205.15 <::

        interpret : token = pwi
 =============================
C_Syntax.interpret3 <:> csl compiled word
SourceCode for C_Syntax.interpret3 :> 
void interpret3 ( | atoken aword ) { testc1 () ; nl () ; tab () ; ps ( "interpret3 :> " ) ; nl () ; while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i3halt" ) ) { oPrintf ( "\n\tinterpret3 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } } 
Source code file location of interpret3 : "namespaces/compiler/c_syntax.csl" : 176.11 :: we are now at : namespaces/compiler/c_syntax.csl : 206.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be0d2 -- code size = 428 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret3 : definition = 0x0000757b488be0d2 : disassembly at namespaces/compiler/c_syntax.csl : 206.15 :
0x757b488be0d2    4d897e08                mov [r14+0x8], r15                                     
0x757b488be0d6    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be0da    4981c618000000          add r14, 0x18                                          
void interpret3 ( | atoken aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {        .. 
0x757b488be0e1    49babaca8b487b750000    mov r10, 0x757b488bcaba                                
0x757b488be0eb    49ffd2                  call r10                      < C_Syntax.testc1 : 0x0000757b488bcaba >
0x757b488be0ee    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488be0f8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be102    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token ()  .. 
0x757b488be105    49bb00e0e9a65f5b0000    mov r11, 0x5b5fa6e9e000                                
0x757b488be10f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be119    49ffd2                  call r10                      < Io.tab : 0x00005b5fa6e9e000 >
 .. c1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf  .. 
0x757b488be11c    48b8fdb911487b750000    mov rax, 0x757b4811b9fd       < string : 'interpret3 :> ' >
0x757b488be126    4983c608                add r14, 0x8                                           
0x757b488be12a    498906                  mov [r14], rax                                         
0x757b488be12d    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488be137    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. b () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : t .. 
0x757b488be13a    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488be144    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be14e    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. terpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) .. 
0x757b488be151    b801000000              mov eax, 0x1                                           
0x757b488be156    4883f800                cmp rax, 0x0                                           
0x757b488be15a    0f8415010000            jz 0x757b488be275             < C_Syntax.interpret3+419 >
 .. while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                             .. 
0x757b488be160    49bb40e6e9a65f5b0000    mov r11, 0x5b5fa6e9e640                                
0x757b488be16a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be174    49ffd2                  call r10                      < Compiler.token : 0x00005b5fa6e9e640 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                           .. 
0x757b488be177    498d4708                lea rax, [r15+0x8]                                     
0x757b488be17b    488bc8                  mov rcx, rax                                           
0x757b488be17e    498b06                  mov rax, [r14]                                         
0x757b488be181    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                           .. 
0x757b488be185    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken,  .. 
0x757b488be188    48b8fc90cd477b750000    mov rax, 0x757b47cd90fc                                
0x757b488be192    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken, "i3halt" ) )         {          .. 
0x757b488be195    498b4708                mov rax, [r15+0x8]                                     
0x757b488be199    488bf0                  mov rsi, rax                                           
0x757b488be19c    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be1a6    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be1b0    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 ..                    if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;               .. 
0x757b488be1b3    498b4708                mov rax, [r15+0x8]                                     
0x757b488be1b7    4983c608                add r14, 0x8                                           
0x757b488be1bb    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                       .. 
0x757b488be1be    48b8a7ba11487b750000    mov rax, 0x757b4811baa7       < string : 'i3halt' >
0x757b488be1c8    4983c608                add r14, 0x8                                           
0x757b488be1cc    498906                  mov [r14], rax                                         
 ..  ;                               if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ; .. 
0x757b488be1cf    49ba7ae48a487b750000    mov r10, 0x757b488ae47a                                
0x757b488be1d9    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x0000757b488ae47a >
 .. if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                  .. 
0x757b488be1dc    498b06                  mov rax, [r14]                                         
0x757b488be1df    4983ee08                sub r14, 0x8                                           
0x757b488be1e3    4883f800                cmp rax, 0x0                                           
0x757b488be1e7    7432                    jz 0x488be21b                 < C_Syntax.interpret3+329 >
0x757b488be1e9    0f1f4000                nop [rax]                                              
 ..  ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                    return ;         }         else  .. 
0x757b488be1ed    48b80592cd477b750000    mov rax, 0x757b47cd9205                                
0x757b488be1f7    488bf8                  mov rdi, rax                                           
0x757b488be1fa    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be204    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be20e    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
0x757b488be211    e95f000000              jmp 0x757b488be275            < C_Syntax.interpret3+419 >
0x757b488be216    e955000000              jmp 0x757b488be270            < C_Syntax.interpret3+414 >
 ..                 aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x757b488be21b    498b4708                mov rax, [r15+0x8]                                     
0x757b488be21f    4983c608                add r14, 0x8                                           
0x757b488be223    498906                  mov [r14], rax                                         
 ..          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x757b488be226    49bbe0eee9a65f5b0000    mov r11, 0x5b5fa6e9eee0                                
0x757b488be230    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be23a    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x00005b5fa6e9eee0 >
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x757b488be23d    498d4710                lea rax, [r15+0x10]                                    
0x757b488be241    488bc8                  mov rcx, rax                                           
0x757b488be244    498b06                  mov rax, [r14]                                         
0x757b488be247    4983ee08                sub r14, 0x8                                           
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x757b488be24b    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x757b488be24e    498b4710                mov rax, [r15+0x10]                                    
0x757b488be252    4983c608                add r14, 0x8                                           
0x757b488be256    498906                  mov [r14], rax                                         
0x757b488be259    49bbd0ebe9a65f5b0000    mov r11, 0x5b5fa6e9ebd0                                
0x757b488be263    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be26d    49ffd2                  call r10                      < Interpreter.doWord : 0x00005b5fa6e9ebd0 >
 ..            doWord ( aword ) ;         }            }    }  .. 
0x757b488be270    e9dcfeffff              jmp 0x757b488be151            < C_Syntax.interpret3+127 >
0x757b488be275    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be279    4d8b7e08                mov r15, [r14+0x8]                                     
 .. ( aword ) ;         }            }    }  .. 
0x757b488be27d    c3                      ret                                                    
Word_Disassemble : word - 'interpret3' :: codeSize = 428
Word : 0x0000757b43e346d8 :: Compiled at : 0x0000757b488be0d2
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 206.15 <::

        interpret : token = C
        interpret : token = sp0
        interpret : token = #
        interpret : token = //
        interpret : token = interpret2 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret2 :> 

        interpret2 : token = using
Using Namespaces :> C Root libc void C_Syntax Infix PrefixCombinators chey0 CObj Dlsym chey Class Defines User String Combinators Interpreter System int Shell Compiler Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

        interpret2 : token = sp0
        interpret2 : token = #
        interpret2 : token = int
        interpret2 : token = int
        interpret2 : token = ;
        interpret2 : token = #
        interpret2 : token = while
        interpret2 : token = #
        interpret2 : token = return
        interpret2 : token = ;
        interpret2 : token = }
        interpret2 : token = pwi
 =============================
C_Syntax.fac40 <:> csl compiled word
SourceCode for C_Syntax.fac40 :> 
int fac40 ( n | facc ) { int facc = 1 ; while ( n > 1 ) facc = n -- * facc ; return facc ; } 
Source code file location of fac40 : "namespaces/compiler/c_syntax.csl" : 216.6 :: we are now at : namespaces/compiler/c_syntax.csl : 226.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be283 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac40 : definition = 0x0000757b488be283 : disassembly at namespaces/compiler/c_syntax.csl : 226.10 :
0x757b488be283    4d897e08                mov [r14+0x8], r15                                     
0x757b488be287    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be28b    4981c618000000          add r14, 0x18                                          
 int fac40 ( n  | facc )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }  .. 
0x757b488be292    49c7471001000000        mov qword [r15+0x10], 0x1                              
 ..  )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be29a    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488be29f    7e1f                    jle 0x488be2c0                < C_Syntax.fac40+61 >
0x757b488be2a1    0f1f4000                nop [rax]                                              
 .. facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2a5    498b47f8                mov rax, [r15-0x8]                                     
 .. 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2a9    498b4f10                mov rcx, [r15+0x10]                                    
 .. = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2ad    480fafc1                imul rax, rcx                                          
 ..    int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2b1    49894710                mov [r15+0x10], rax                                    
 .. cc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2b5    49ff4ff8                dec qword [r15-0x8]                                    
 ..    while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2b9    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488be2be    7fe5                    jg 0x488be2a5                 < C_Syntax.fac40+34 >
 .. le ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2c0    498b4710                mov rax, [r15+0x10]                                    
0x757b488be2c4    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be2c8    4d8b7e08                mov r15, [r14+0x8]                                     
 .. > 1 ) facc = n -- * facc ;     return facc ; } 
0x757b488be2cc    498906                  mov [r14], rax                                         
 .. acc = n -- * facc ;     return facc ; } 
0x757b488be2cf    c3                      ret                                                    
Word_Disassemble : word - 'fac40' :: codeSize = 77
Word : 0x0000757b43e3aad8 :: Compiled at : 0x0000757b488be283
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 226.10 <::

        interpret2 : token = //
        interpret2 : token = fac40
        interpret2 : token = dup
        interpret2 : token = p 5040
        interpret2 : token = 5040
        interpret2 : token = _assert
        interpret2 : token = i2halt
        interpret2 exiting...
        interpret : token = sp0
        interpret : token = //
        interpret : token = #
        interpret : token = interpret3 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret3 :> 

        interpret3 : token = sp0
        interpret3 : token = c_syntaxOff
        interpret3 : token = User
        interpret3 : token = words
Words :
 - <namespace> ':>' <word list>
 - User :>  heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
 - Root :>  sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
 - C :>  x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test1 test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf oPrintf
 - int :>  this size
 - libc :>  x xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
 - void :>  Error ftoc ctof this size
 - CObj :>  this size
 - Dlsym :> 
 - chey :> 
 - Class :>  . clone new struct class :{ +:{ };
 - Defines :>  xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
 - String :>  hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
 - Combinators :>  ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
 - Interpreter :>  sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
 - System :>  ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwi pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackInit warmInit init reset _include
 - Shell :>  hio ppxe ppx epause apause test sh $ _sh endif else if
 - Compiler :>  vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
 - Int :>  mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / ^^ pow_03 pow ** * -= += - +
 - Debug :>  dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState dbg udis1x udis1 dsOn dsOff stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
 - Ar9 :>  arr9 a9 a9dump _adump ar dimSize this size
 - Ar3 :>  a7 a a8 a6x a6 ar this size
 - Ar2 :>  a a5 a4 ar this size
 - Ar1 :>  a a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
 - DLLNodeAlloc :>  testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
 - DLLNode :>  sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
 - Buffer :>  buf this size
 - Logic :>  l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
 - Control :>  maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
 - Bits :>  tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
 - DObject :>  new clone dobject
 - Lexer :>  sp heey hey hi ofile orpfile % "
 - testD :>  testC
 - a112 :>  c1138
 - int64 :>  this size
 - arr10 :> 
 - Ar10 :>  a10dump ar dimSize this size
 - cta :>  a caba cadump a tcta aba ar this size
 - ct0 :>  ac a tct ab ar this size
 - ar9 :> 
 - DLLNodeAlloc4 :>  testna5 dlna4o testna5 testna4 nodes this size
 - DLListClone :>  testClone init Accum Four Three Twelve Sum Prototype Category this size
 - DLList :>  hey hi hey hi testList init TailNode HeadNode this size
 - Integer :> 
 - Pointer :>  this size
 - List :>  bexp3 lcRestoreStack dupList printList eval _( _lisp
 - OpenVmTil :>  ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
 - byte :>  this size
 - Io :>  Error logWrite logAppend logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc space tab cr newline kbhit key emit printString
 - Word :>  code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
 - Macro :>  rdim rdi s _s tm: findAlias alias sm:
 - Namespace :>  usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
 - StartupMacros :>  namespaces Delimiters
 - Compiling :>  pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
 - Reserved :>  {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
 - PreProcessor :>  ifndef ifdef undef defined include define elif if else endif !
 - Stack :>  stackCheck setDsp dsp _swap stackDepth depth pick _ndrop dropN drop ndup tos dup _dup
 - Memory :>  recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
 - Colors :>  alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
 - File :>  freadToString fexists fsize ftell fseek fread fwrite fclose fopen
 - Asm :>  jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
 - Array :>  [ ]
 - MemorySpace :>  msDelete memspace
 - Locals :>  (| (
 - Forth :>  rpn n, 8, 4, , 2, 1, '
 - Experimental :>  <does <do does> do> locationPrint locationPush
 - L9 :>  l9
1220 words on the 'using' Namespaces List ::
        interpret3 : token = sp0
        interpret3 : token = :
        interpret3 : token = 1
        interpret3 : token = 2
        interpret3 : token = +
        interpret3 : token = p
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hi1
        interpret3 : token = hi1
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = ;
        interpret3 : token = nl

        interpret3 : token = heey1 3 3 3 3 3 3
        interpret3 : token = #
        interpret3 : token = c_syntaxOn
        interpret3 : token = int
        interpret3 : token = for
        interpret3 : token = return
        interpret3 : token = ;
        interpret3 : token = }
        interpret3 : token = pwi
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :> 
int faccs2 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs2 : "namespaces/compiler/c_syntax.csl" : 247.7 :: we are now at : namespaces/compiler/c_syntax.csl : 255.11
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be36e -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x0000757b488be36e : disassembly at namespaces/compiler/c_syntax.csl : 255.11 :
0x757b488be36e    4d897e08                mov [r14+0x8], r15                                     
0x757b488be372    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be376    4981c610000000          add r14, 0x10                                          
  int faccs2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x757b488be37d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be385    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be38a    7e1f                    jle 0x488be3ab                < C_Syntax.faccs2+61 >
0x757b488be38c    0f1f4000                nop [rax]                                              
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be390    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be394    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be398    480fafc1                imul rax, rcx                                          
0x757b488be39c    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be3a0    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be3a4    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488be3a9    7fe5                    jg 0x488be390                 < C_Syntax.faccs2+34 >
 ..           rec = rec * n ;      }      return rec ; } 
0x757b488be3ab    498b4708                mov rax, [r15+0x8]                                     
0x757b488be3af    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be3b3    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x757b488be3b7    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x757b488be3ba    c3                      ret                                                    
Word_Disassemble : word - 'faccs2' :: codeSize = 77
Word : 0x0000757b43e3f3d8 :: Compiled at : 0x0000757b488be36e
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 255.11 <::

        interpret3 : token = //
        interpret3 : token = faccs2
        interpret3 : token = dup
        interpret3 : token = p 5040
        interpret3 : token = 5040
        interpret3 : token = _assert0
        interpret3 : token = sp0
        interpret3 : token = libc
        interpret3 : token = void
        interpret3 : token = //
        interpret3 : token = //
        interpret3 : token = while
        interpret3 : token = }
        interpret3 : token = //
        interpret3 : token = i3halt
        interpret3 exiting...
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret4 <:> csl compiled word
SourceCode for C_Syntax.interpret4 :> 
void interpret4 ( | atoken aword ) { while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ; if ( atoken ) { if ( StringEqual ( atoken, "i4halt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ; return ; } aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } else break ; } } 
Source code file location of interpret4 : "namespaces/compiler/c_syntax.csl" : 260.11 :: we are now at : namespaces/compiler/c_syntax.csl : 284.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be3c0 -- code size = 342 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret4 : definition = 0x0000757b488be3c0 : disassembly at namespaces/compiler/c_syntax.csl : 284.15 :
0x757b488be3c0    4d897e08                mov [r14+0x8], r15                                     
0x757b488be3c4    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be3c8    4981c618000000          add r14, 0x18                                          
 .. | atoken aword )  {           while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) .. 
0x757b488be3cf    b801000000              mov eax, 0x1                                           
0x757b488be3d4    4883f800                cmp rax, 0x0                                           
0x757b488be3d8    0f842f010000            jz 0x757b488be50d             < C_Syntax.interpret4+333 >
 .. while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )      .. 
0x757b488be3de    49bb40e6e9a65f5b0000    mov r11, 0x5b5fa6e9e640                                
0x757b488be3e8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be3f2    49ffd2                  call r10                      < Compiler.token : 0x00005b5fa6e9e640 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )    .. 
0x757b488be3f5    498d4708                lea rax, [r15+0x8]                                     
0x757b488be3f9    488bc8                  mov rcx, rax                                           
0x757b488be3fc    498b06                  mov rax, [r14]                                         
0x757b488be3ff    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )    .. 
0x757b488be403    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringE .. 
0x757b488be406    48b856bfce477b750000    mov rax, 0x757b47cebf56                                
0x757b488be410    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )     .. 
0x757b488be413    498b4708                mov rax, [r15+0x8]                                     
0x757b488be417    488bf0                  mov rsi, rax                                           
0x757b488be41a    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be424    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be42e    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                 .. 
0x757b488be431    498b4708                mov rax, [r15+0x8]                                     
0x757b488be435    4883f800                cmp rax, 0x0                                           
0x757b488be439    0f84c4000000            jz 0x757b488be503             < C_Syntax.interpret4+323 >
 ..      {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exitin .. 
0x757b488be43f    498b4708                mov rax, [r15+0x8]                                     
0x757b488be443    4983c608                add r14, 0x8                                           
0x757b488be447    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...",  .. 
0x757b488be44a    48b89fbf11487b750000    mov rax, 0x757b4811bf9f       < string : 'i4halt' >
0x757b488be454    4983c608                add r14, 0x8                                           
0x757b488be458    498906                  mov [r14], rax                                         
 .. ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: int .. 
0x757b488be45b    49ba7ae48a487b750000    mov r10, 0x757b488ae47a                                
0x757b488be465    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x0000757b488ae47a >
 .. if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;  .. 
0x757b488be468    498b06                  mov rax, [r14]                                         
0x757b488be46b    4983ee08                sub r14, 0x8                                           
0x757b488be46f    4883f800                cmp rax, 0x0                                           
0x757b488be473    7434                    jz 0x488be4a9                 < C_Syntax.interpret4+233 >
0x757b488be475    0f1f4000                nop [rax]                                              
 ..          {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;   .. 
0x757b488be479    48b8e7c1ce477b750000    mov rax, 0x757b47cec1e7                                
0x757b488be483    488bf8                  mov rdi, rax                                           
 .. oken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord  .. 
0x757b488be486    498b4708                mov rax, [r15+0x8]                                     
0x757b488be48a    488bf0                  mov rsi, rax                                           
0x757b488be48d    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be497    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be4a1    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 ..  :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord ( atoken  .. 
0x757b488be4a4    e964000000              jmp 0x757b488be50d            < C_Syntax.interpret4+333 >
 ..   }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x757b488be4a9    498b4708                mov rax, [r15+0x8]                                     
0x757b488be4ad    4983c608                add r14, 0x8                                           
0x757b488be4b1    498906                  mov [r14], rax                                         
 ..  ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x757b488be4b4    49bbe0eee9a65f5b0000    mov r11, 0x5b5fa6e9eee0                                
0x757b488be4be    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be4c8    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x00005b5fa6e9eee0 >
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x757b488be4cb    498d4710                lea rax, [r15+0x10]                                    
0x757b488be4cf    488bc8                  mov rcx, rax                                           
0x757b488be4d2    498b06                  mov rax, [r14]                                         
0x757b488be4d5    4983ee08                sub r14, 0x8                                           
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x757b488be4d9    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x757b488be4dc    498b4710                mov rax, [r15+0x10]                                    
0x757b488be4e0    4983c608                add r14, 0x8                                           
0x757b488be4e4    498906                  mov [r14], rax                                         
0x757b488be4e7    49bbd0ebe9a65f5b0000    mov r11, 0x5b5fa6e9ebd0                                
0x757b488be4f1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be4fb    49ffd2                  call r10                      < Interpreter.doWord : 0x00005b5fa6e9ebd0 >
0x757b488be4fe    e905000000              jmp 0x757b488be508            < C_Syntax.interpret4+328 >
 .. rd ( aword ) ;         }         else break ;     } }  .. 
0x757b488be503    e905000000              jmp 0x757b488be50d            < C_Syntax.interpret4+333 >
0x757b488be508    e9c2feffff              jmp 0x757b488be3cf            < C_Syntax.interpret4+15 >
0x757b488be50d    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be511    4d8b7e08                mov r15, [r14+0x8]                                     
 ..          }         else break ;     } }  .. 
0x757b488be515    c3                      ret                                                    
Word_Disassemble : word - 'interpret4' :: codeSize = 342
Word : 0x0000757b43e42da8 :: Compiled at : 0x0000757b488be3c0
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 284.15 <::

        interpret : token = sp0
        interpret : token = interpret4
        interpret4 : token = C
        interpret4 : token = int
        interpret4 : token = for
        interpret4 : token = return
        interpret4 : token = ;
        interpret4 : token = }
        interpret4 : token = '
        interpret4 : token = find
        interpret4 : token = wdiss
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :> 
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs3 : "namespaces/compiler/c_syntax.csl" : 288.7 :: we are now at : namespaces/compiler/c_syntax.csl : 296.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be51b -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x0000757b488be51b : disassembly at namespaces/compiler/c_syntax.csl : 296.20 :
0x757b488be51b    4d897e08                mov [r14+0x8], r15                                     
0x757b488be51f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be523    4981c610000000          add r14, 0x10                                          
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x757b488be52a    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be532    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be537    7e1f                    jle 0x488be558                < C_Syntax.faccs3+61 >
0x757b488be539    0f1f4000                nop [rax]                                              
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be53d    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be541    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be545    480fafc1                imul rax, rcx                                          
0x757b488be549    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be54d    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488be551    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488be556    7fe5                    jg 0x488be53d                 < C_Syntax.faccs3+34 >
 ..           rec = rec * n ;      }      return rec ; } 
0x757b488be558    498b4708                mov rax, [r15+0x8]                                     
0x757b488be55c    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be560    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x757b488be564    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x757b488be567    c3                      ret                                                    
Word_Disassemble : word - 'faccs3' :: codeSize = 77
Word : 0x0000757b43e47f18 :: Compiled at : 0x0000757b488be51b
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 296.20 <::

        interpret4 : token = faccs3
        interpret4 : token = dup
        interpret4 : token = p 5040
        interpret4 : token = 5040
        interpret4 : token = _assert0
        interpret4 : token = sp0
        interpret4 : token = i4halt

        token = i4halt :: interpret4 exiting ...
        interpret : token = sp0
        interpret : token = //
        interpret : token = c_syntaxOff
        interpret : token = //
        interpret : token = #
        interpret : token = //
        interpret : token = C
        interpret : token = sp0
        interpret : token = c_syntaxOn
        interpret : token = C
        interpret : token = String
        interpret : token = libc
        interpret : token = typedef
        interpret : token = void
        interpret : token = buffer
        interpret : token = =
        interpret : token = ;
        interpret : token = memset
        interpret : token = ;
        interpret : token = while
        interpret : token = }
        interpret : token = pwi
 =============================
C_Syntax.$ <:> csl compiled word
SourceCode for C_Syntax.$ :> 
void $ ( | atoken, buffer, CBuffer buffer0 ) { buffer = &buffer0.buf ; memset ( buffer, 0, CBuffer.size ) ; while ( atoken = token () ) { oPrintf ( "\n\ttoken = %s\n", atoken ) ; if ( ! strcmp ( atoken, ";" ) ) { oPrintf ( "\n\tbuffer = %s\n", buffer ) ; sh ( buffer ) ; break ; } else { if ( strcmp ( atoken, "." ) ) { strcat ( buffer, " " ) ; } strcat ( buffer, atoken ) ; } } } 
Source code file location of $ : "namespaces/compiler/c_syntax.csl" : 309.2 :: we are now at : namespaces/compiler/c_syntax.csl : 333.5
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be56d -- code size = 515 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.$ : definition = 0x0000757b488be56d : disassembly at namespaces/compiler/c_syntax.csl : 333.5 :
0x757b488be56d    4d897e08                mov [r14+0x8], r15                                     
0x757b488be571    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be575    4981c620000000          add r14, 0x20                                          
 .. er, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {     .. 
0x757b488be57c    48bfa0bae4437b750000    mov rdi, 0x757b43e4baa0                                
0x757b488be586    498d7718                lea rsi, [r15+0x18]                                    
0x757b488be58a    ba00010000              mov edx, 0x100                                         
0x757b488be58f    49bb50a9e4a65f5b0000    mov r11, 0x5b5fa6e4a950                                
0x757b488be599    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be5a3    49ffd2                  call r10                      < C compiler code >        
 .. r, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {      .. 
0x757b488be5a6    498b4718                mov rax, [r15+0x18]                                    
0x757b488be5aa    4881c000000000          add rax, 0x0                                           
 .. ken, buffer, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )   .. 
0x757b488be5b1    49894710                mov [r15+0x10], rax                                    
 ..  buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken .. 
0x757b488be5b5    498b4710                mov rax, [r15+0x10]                                    
0x757b488be5b9    488bf8                  mov rdi, rax                                           
 .. = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n" .. 
0x757b488be5bc    48c7c000000000          mov rax, 0x0                                           
0x757b488be5c3    488bf0                  mov rsi, rax                                           
 .. buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken )  .. 
0x757b488be5c6    48b818bde4437b750000    mov rax, 0x757b43e4bd18                                
0x757b488be5d0    488b00                  mov rax, [rax]                                         
0x757b488be5d3    488bd0                  mov rdx, rax                                           
 ..  )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( " .. 
0x757b488be5d6    49bbd0cefd487b750000    mov r11, 0x757b48fdced0                                
0x757b488be5e0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be5ea    49ffd2                  call r10                      < libc.memset : 0x0000757b48fdced0 >
 .. Buffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( .. 
0x757b488be5ed    49bb40e6e9a65f5b0000    mov r11, 0x5b5fa6e9e640                                
0x757b488be5f7    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be601    49ffd2                  call r10                      < Compiler.token : 0x00005b5fa6e9e640 >
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp .. 
0x757b488be604    498d4708                lea rax, [r15+0x8]                                     
 .. fer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! .. 
0x757b488be608    488bc8                  mov rcx, rax                                           
0x757b488be60b    498b06                  mov rax, [r14]                                         
0x757b488be60e    4983ee08                sub r14, 0x8                                           
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp .. 
0x757b488be612    488901                  mov [rcx], rax                                         
 .. ze ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken,  .. 
0x757b488be615    498b06                  mov rax, [r14]                                         
0x757b488be618    4983ee08                sub r14, 0x8                                           
0x757b488be61c    4883f800                cmp rax, 0x0                                           
0x757b488be620    0f8441010000            jz 0x757b488be767             < C_Syntax.$+506 >
 .. oken () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {             .. 
0x757b488be626    48b84333cf477b750000    mov rax, 0x757b47cf3343                                
0x757b488be630    488bf8                  mov rdi, rax                                           
 ..         oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuf .. 
0x757b488be633    498b4708                mov rax, [r15+0x8]                                     
0x757b488be637    488bf0                  mov rsi, rax                                           
0x757b488be63a    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be644    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be64e    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. ken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( b .. 
0x757b488be651    498b4708                mov rax, [r15+0x8]                                     
0x757b488be655    488bf8                  mov rdi, rax                                           
 ..               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer )  .. 
0x757b488be658    48b85133cf477b750000    mov rax, 0x757b47cf3351       < string : ';' >
0x757b488be662    488bf0                  mov rsi, rax                                           
 .. s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;          .. 
0x757b488be665    49bb10ebfd487b750000    mov r11, 0x757b48fdeb10                                
0x757b488be66f    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be679    49ffd2                  call r10                      < libc.strcmp : 0x0000757b48fdeb10 >
 ..  %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;        .. 
0x757b488be67c    4883f800                cmp rax, 0x0                                           
0x757b488be680    755b                    jnz 0x488be6dd                < C_Syntax.$+368 >
0x757b488be682    0f1f4000                nop [rax]                                              
 .. ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         e .. 
0x757b488be686    48b85333cf477b750000    mov rax, 0x757b47cf3353                                
0x757b488be690    488bf8                  mov rdi, rax                                           
 ..        oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {        .. 
0x757b488be693    498b4710                mov rax, [r15+0x10]                                    
0x757b488be697    488bf0                  mov rsi, rax                                           
0x757b488be69a    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488be6a4    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be6ae    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. r = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {              if ( strcmp ( atoken .. 
0x757b488be6b1    498b4710                mov rax, [r15+0x10]                                    
0x757b488be6b5    4983c608                add r14, 0x8                                           
0x757b488be6b9    498906                  mov [r14], rax                                         
0x757b488be6bc    49bb80ffe9a65f5b0000    mov r11, 0x5b5fa6e9ff80                                
0x757b488be6c6    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be6d0    49ffd2                  call r10                      < Shell.sh : 0x00005b5fa6e9ff80 >
0x757b488be6d3    e98f000000              jmp 0x757b488be767            < C_Syntax.$+506 >
0x757b488be6d8    e985000000              jmp 0x757b488be762            < C_Syntax.$+501 >
 ..          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             str .. 
0x757b488be6dd    498b4708                mov rax, [r15+0x8]                                     
0x757b488be6e1    488bf8                  mov rdi, rax                                           
 ..  {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             strcat ( bu .. 
0x757b488be6e4    48b87a34cf477b750000    mov rax, 0x757b47cf347a       < string : '.' >
0x757b488be6ee    488bf0                  mov rsi, rax                                           
 ..     else          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }        .. 
0x757b488be6f1    49bb10ebfd487b750000    mov r11, 0x757b48fdeb10                                
0x757b488be6fb    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be705    49ffd2                  call r10                      < libc.strcmp : 0x0000757b48fdeb10 >
0x757b488be708    4883f800                cmp rax, 0x0                                           
0x757b488be70c    742f                    jz 0x488be73d                 < C_Syntax.$+464 >
0x757b488be70e    0f1f4000                nop [rax]                                              
 ..            {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x757b488be712    498b4710                mov rax, [r15+0x10]                                    
0x757b488be716    488bf8                  mov rdi, rax                                           
 ..    {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x757b488be719    48b87c34cf477b750000    mov rax, 0x757b47cf347c       < string : ' ' >
0x757b488be723    488bf0                  mov rsi, rax                                           
0x757b488be726    49bbd0e3fd487b750000    mov r11, 0x757b48fde3d0                                
0x757b488be730    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be73a    49ffd2                  call r10                      < libc.strcat : 0x0000757b48fde3d0 >
 .. ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x757b488be73d    498b4710                mov rax, [r15+0x10]                                    
0x757b488be741    488bf8                  mov rdi, rax                                           
 ..        }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x757b488be744    498b4708                mov rax, [r15+0x8]                                     
0x757b488be748    488bf0                  mov rsi, rax                                           
0x757b488be74b    49bbd0e3fd487b750000    mov r11, 0x757b48fde3d0                                
0x757b488be755    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488be75f    49ffd2                  call r10                      < libc.strcat : 0x0000757b48fde3d0 >
 ..   strcat ( buffer, atoken ) ;         }     } }  .. 
0x757b488be762    e986feffff              jmp 0x757b488be5ed            < C_Syntax.$+128 >
0x757b488be767    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be76b    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  ( buffer, atoken ) ;         }     } }  .. 
0x757b488be76f    c3                      ret                                                    
Word_Disassemble : word - '$' :: codeSize = 515
Word : 0x0000757b43e4bfe8 :: Compiled at : 0x0000757b488be56d
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 333.5 <::

        interpret : token = //
        interpret : token = sp0
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... 

new $ test
total 3872
drwxr-xr-x  8 dennisj dennisj    4096 Jul 28 15:58 .
drwx------ 46 dennisj dennisj   12288 Jul 28 15:59 ..
drwxr-xr-x  2 dennisj dennisj    4096 Jul 28 15:45 bin
-rw-r--r--  1 dennisj dennisj       8 Jul 19 07:47 csl.cflags
-rw-r--r--  1 dennisj dennisj      86 Jul 19 07:47 csl.config
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.creator
-rw-r--r--  1 dennisj dennisj   18232 Jul 27 08:57 csl.creator.user
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.cxxflags
-rw-r--r--  1 dennisj dennisj    4889 Jul 20 10:07 csl.files
-rw-r--r--  1 dennisj dennisj      12 Jul 20 10:07 csl.includes
-rw-r--r--  1 dennisj dennisj 1953687 Jul 28 15:58 csl.out.939.483.txt
-rw-r--r--  1 dennisj dennisj 1761500 Jul 28 15:50 csl.out.txt
drwxr-xr-x  2 dennisj dennisj    4096 Jul 25 22:24 etc
drwxr-xr-x  8 dennisj dennisj    4096 Jul 27 00:06 .git
-rw-r--r--  1 dennisj dennisj   18845 Jul 27 09:43 init.csl
-rw-r--r--  1 dennisj dennisj     163 Apr  2  2022 itestf
-rw-r--r--  1 dennisj dennisj    1067 Aug  4  2023 LICENSE
-rw-r--r--  1 dennisj dennisj   20368 Apr  2  2022 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj     220 Apr  2  2022 m
-rwxr-xr-x  1 dennisj dennisj     664 Apr  2  2022 m0
-rwxr-xr-x  1 dennisj dennisj     224 Apr  2  2022 ma
-rw-r--r--  1 dennisj dennisj    8884 Jul 26 03:03 Makefile
-rwxr-xr-x  1 dennisj dennisj     613 Jul 23 13:35 mir
-rwxr-xr-x  1 dennisj dennisj     504 Apr  2  2022 mira
-rwxr-xr-x  1 dennisj dennisj     549 Apr  2  2022 mirAll
-rwxr-xr-x  1 dennisj dennisj     518 Apr  2  2022 mirs
drwxr-xr-x  4 dennisj dennisj    4096 Jul 25 23:15 namespaces
drwxr-xr-x  3 dennisj dennisj    4096 Jul 25 22:25 nbproject
-rwxr-xr-x  1 dennisj dennisj      52 Sep 29  2022 netbeans
-rw-r--r--  1 dennisj dennisj       5 Jul 28 15:45 node.txt
-rw-r--r--  1 dennisj dennisj      40 Apr  2  2022 nt.csl
-rwxr-xr-x  1 dennisj dennisj     124 Apr  2  2022 r
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.md
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.txt
drwxr-xr-x  5 dennisj dennisj    4096 Jul 25 22:24 src
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test.txt

OpenVmTil_SignalAction :: signal = 17

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.135
 7 7 7
version 0.940.135
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe3b02400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x0000780be3b02400 : disassembly at etc/script : 35.8 :
0x780be3b02400    4d897e08                mov [r14+0x8], r15                                     
0x780be3b02404    4d8d7e08                lea r15, [r14+0x8]                                     
0x780be3b02408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x780be3b0240f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x780be3b02417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b0241c    7e1f                    jle 0xe3b0243d                < Int.fac+61 >
0x780be3b0241e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b02422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b02426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b0242a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b0242e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b02432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b02436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x780be3b0243b    7fe5                    jg 0xe3b02422                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x780be3b0243d    498b4708                mov rax, [r15+0x8]                                     
0x780be3b02441    e900000000              jmp 0x780be3b02446            < Int.fac+70 >
0x780be3b02446    4d8d77f8                lea r14, [r15-0x8]                                     
0x780be3b0244a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x780be3b0244e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x780be3b02451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x0000780be3cbd437 :: Compiled at : 0x0000780be3b02400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

OpenVmTil_SignalAction :: signal = 17

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 349.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.C
should read 3 : 3
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; } 
Source code file location of fac5 : "namespaces/compiler/c_syntax.csl" : 355.5 :: we are now at : namespaces/compiler/c_syntax.csl : 365.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be7f3 -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x0000757b488be7f3 : disassembly at namespaces/compiler/c_syntax.csl : 365.9 :
0x757b488be7f3    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x757b488be7f6    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x757b488be7fb    4883ff01                cmp rdi, 0x1                                           
0x757b488be7ff    7e11                    jle 0x488be812                < C_Syntax.fac5+31 >
0x757b488be801    0f1f4000                nop [rax]                                              
 ..  ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x757b488be805    480faff7                imul rsi, rdi                                          
 .. > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x757b488be809    48ffcf                  dec rdi                                                
0x757b488be80c    4883ff01                cmp rdi, 0x1                                           
0x757b488be810    7ff3                    jg 0x488be805                 < C_Syntax.fac5+18 >
 ..       facc *= n -- ;     }     return facc ; } 
0x757b488be812    498936                  mov [r14], rsi                                         
 .. acc *= n -- ;     }     return facc ; } 
0x757b488be815    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 35
Word : 0x0000757b43e51158 :: Compiled at : 0x0000757b488be7f3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 365.9 <::
 5040
0x757b488be81b    4d897e08                mov [r14+0x8], r15                                     
0x757b488be81f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be823    4981c618000000          add r14, 0x18                                          
0x757b488be82a    48b8a8c7e4437b750000    mov rax, 0x757b43e4c7a8                                
0x757b488be834    b902000000              mov ecx, 0x2                                           
0x757b488be839    488908                  mov [rax], rcx                                         
0x757b488be83c    48b8a836e5437b750000    mov rax, 0x757b43e536a8                                
0x757b488be846    b904000000              mov ecx, 0x4                                           
0x757b488be84b    488908                  mov [rax], rcx                                         
0x757b488be84e    48b8a8c7e4437b750000    mov rax, 0x757b43e4c7a8                                
0x757b488be858    488b00                  mov rax, [rax]                                         
0x757b488be85b    48b9a836e5437b750000    mov rcx, 0x757b43e536a8                                
0x757b488be865    488b09                  mov rcx, [rcx]                                         
0x757b488be868    4803c1                  add rax, rcx                                           
0x757b488be86b    b902000000              mov ecx, 0x2                                           
0x757b488be870    48c7c200000000          mov rdx, 0x0                                           
0x757b488be877    48f7f9                  idiv rcx                                               
0x757b488be87a    4983c610                add r14, 0x10                                          
0x757b488be87e    498906                  mov [r14], rax                                         
0x757b488be881    498946f8                mov [r14-0x8], rax                                     
0x757b488be885    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488be88f    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488be892    b803000000              mov eax, 0x3                                           
0x757b488be897    4983c608                add r14, 0x8                                           
0x757b488be89b    498906                  mov [r14], rax                                         
0x757b488be89e    49baa6dc8a487b750000    mov r10, 0x757b488adca6                                
0x757b488be8a8    49ffd2                  call r10                      < C._assert0 : 0x0000757b488adca6 >
0x757b488be8ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be8af    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488be8b3    c3                      ret                                                    
 3 3 
above line should show 3 3
 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :> 
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
Source code file location of yada : "namespaces/compiler/c_syntax.csl" : 385.10 :: we are now at : namespaces/compiler/c_syntax.csl : 385.85
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be8b9 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yada : definition = 0x0000757b488be8b9 : disassembly at namespaces/compiler/c_syntax.csl : 385.85 :
0x757b488be8b9    4d897e08                mov [r14+0x8], r15                                     
0x757b488be8bd    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be8c1    4981c620000000          add r14, 0x20                                          
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x757b488be8c8    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x757b488be8d0    49c747100c000000        mov qword [r15+0x10], 0xc                              
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be8d8    498b4708                mov rax, [r15+0x8]                                     
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be8dc    498b4f10                mov rcx, [r15+0x10]                                    
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be8e0    4803c1                  add rax, rcx                                           
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be8e3    b902000000              mov ecx, 0x2                                           
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be8e8    48c7c200000000          mov rdx, 0x0                                           
0x757b488be8ef    48f7f9                  idiv rcx                                               
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x757b488be8f2    49894718                mov [r15+0x18], rax                                    
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be8f6    498b4718                mov rax, [r15+0x18]                                    
0x757b488be8fa    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be8fe    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488be902    4983c608                add r14, 0x8                                           
 .. 2, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be906    498906                  mov [r14], rax                                         
 .. ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x757b488be909    c3                      ret                                                    
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x0000757b43e55118 :: Compiled at : 0x0000757b488be8b9
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 385.85 <::

DataStack at : namespaces/compiler/c_syntax.csl : 385.99 :
DataStack depth =   5 : Dsp (R14) = Top = 0x0000757b47211ae0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 385.109 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :> 
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return ( x ) ; } 
Source code file location of yadaYada : "namespaces/compiler/c_syntax.csl" : 386.14 :: we are now at : namespaces/compiler/c_syntax.csl : 386.103
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be90f -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x0000757b488be90f : disassembly at namespaces/compiler/c_syntax.csl : 386.103 :
0x757b488be90f    4d897e08                mov [r14+0x8], r15                                     
0x757b488be913    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488be917    4981c620000000          add r14, 0x20                                          
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  .. 
0x757b488be91e    49c7470802000000        mov qword [r15+0x8], 0x2                               
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  .. 
0x757b488be926    49c747100c000000        mov qword [r15+0x10], 0xc                              
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be92e    498b4708                mov rax, [r15+0x8]                                     
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be932    498b4f10                mov rcx, [r15+0x10]                                    
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be936    4803c1                  add rax, rcx                                           
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be939    b902000000              mov ecx, 0x2                                           
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be93e    48c7c200000000          mov rdx, 0x0                                           
0x757b488be945    48f7f9                  idiv rcx                                               
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be948    49894718                mov [r15+0x18], rax                                    
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be94c    498b4718                mov rax, [r15+0x18]                                    
0x757b488be950    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488be954    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488be958    4983c608                add r14, 0x8                                           
 .. 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be95c    498906                  mov [r14], rax                                         
 ..  = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x757b488be95f    c3                      ret                                                    
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x0000757b43e57d68 :: Compiled at : 0x0000757b488be90f
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 386.103 <::

DataStack at : namespaces/compiler/c_syntax.csl : 386.129 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

including namespaces/types.csl at namespaces/compiler/c_syntax.csl : 400.11 ...

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 401.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12264 : WordCreateCount = 13692 : WordsAdded = 5106 : FindWordCount = 147 : FindWordMaxCount = 150
RecycledWordCount : 502
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
 78024 653
 =============================
int.wtdInclude <:> csl compiled word
SourceCode for int.wtdInclude :> 
: wtdInclude "namespaces/types.csl" include ; 
Source code file location of wtdInclude : "namespaces/compiler/c_syntax.csl" : 399.2 :: we are now at : namespaces/compiler/c_syntax.csl : 403.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488be974 -- code size = 31 bytes
 -----------------------------
Word :: int.wtdInclude : definition = 0x0000757b488be974 : disassembly at namespaces/compiler/c_syntax.csl : 403.15 :
 ..                          : wtdInclude "namespaces/types.csl" include ;  .. 
0x757b488be974    48b80cca11487b750000    mov rax, 0x757b4811ca0c       < string : 'namespaces/types.csl' >
0x757b488be97e    4983c608                add r14, 0x8                                           
0x757b488be982    498906                  mov [r14], rax                                         
 ..   : wtdInclude "namespaces/types.csl" include ;  .. 
0x757b488be985    49ba6ec38a487b750000    mov r10, 0x757b488ac36e                                
0x757b488be98f    49ffd2                  call r10                      < Root.include : 0x0000757b488ac36e >
 .. nclude "namespaces/types.csl" include ; 
0x757b488be992    c3                      ret                                                    
Word_Disassemble : word - 'wtdInclude' :: codeSize = 31
Word : 0x0000757b43e5b3d8 :: Compiled at : 0x0000757b488be974
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 403.15 <::
 0x0000757b43e5b3d8
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 404.69 : data = '757b43e5b3d8' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x0000757b43e5b3d8
_Identifier

                  DLNode : S_Node : size = 88 : at 0000757b43e5b3d8
union

                 _DLNode : n_DLNode : size = 24 : at 0000757b43e5b3d8
union
0x0000757b43e5b3d8  dlnode           *   n_After                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3e0  dlnode           *   n_Before                 = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0

                  dlnode : n_Node : size = 16 : at 0000757b43e5b3d8
_node
union
0x0000757b43e5b3d8  _node            *   n_After                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  _node            *   n_Head                   = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8

union
0x0000757b43e5b3e0  _node            *   n_Before                 = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0
0x0000757b43e5b3e0  _node            *   n_Tail                   = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0


union
0x0000757b43e5b3e8  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x757b43e5b3e8
0x0000757b43e5b3ec  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x757b43e5b3ec
0x0000757b43e5b3ee  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x757b43e5b3ee
0x0000757b43e5b3ef  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x757b43e5b3ef
0x0000757b43e5b3d8  byte             *   n_unmap                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  byte             *   n_bData                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  int64            *   n_iData                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  int64                node                     = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  int64            *   n_CurrentNode            = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8


                 dobject : n_dobject : size = 32 : at 0000757b43e5b3d8
union
0x0000757b43e5b3d8  dlnode           *   do_After                 = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3e0  dlnode           *   do_Before                = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0

                  dlnode : do_Node : size = 16 : at 0000757b43e5b3d8
_node
union
0x0000757b43e5b3d8  _node            *   n_After                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  _node            *   n_Head                   = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8

union
0x0000757b43e5b3e0  _node            *   n_Before                 = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0
0x0000757b43e5b3e0  _node            *   n_Tail                   = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0


0x0000757b43e5b3e8  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x757b43e5b3e8
0x0000757b43e5b3ec  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x757b43e5b3ec
0x0000757b43e5b3ee  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x757b43e5b3ee
0x0000757b43e5b3ef  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x757b43e5b3ef
union
0x0000757b43e5b3f0  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x757b43e5b3f0
0x0000757b43e5b3f0  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x757b43e5b3f0
0x0000757b43e5b3f0  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x757b43e5b3f0



           AttributeInfo : n_Attributes : size = 56 : at 0000757b43e5b3f8
union
union
0x0000757b43e5b3f8  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x757b43e5b3f8
0x0000757b43e5b400  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x757b43e5b400
0x0000757b43e5b408  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x757b43e5b408
0x0000757b43e5b410  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x757b43e5b410
0x0000757b43e5b418  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x757b43e5b418
0x0000757b43e5b41c  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x757b43e5b41c
0x0000757b43e5b41e  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x757b43e5b41e

union
0x0000757b43e5b420  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x757b43e5b420
0x0000757b43e5b420  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x757b43e5b420

union
0x0000757b43e5b428  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x757b43e5b428
0x0000757b43e5b428  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x757b43e5b428

0x0000757b43e5b3f8  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x757b43e5b3f8

0x0000757b43e5b430  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x757b43e5b430
0x0000757b43e5b438  byte             *   S_Name                   = 0x0000757b4811c9ea          offset = 0x60 : dataPtr = 0x757b43e5b438
        S_Name = 'wtdInclude'
0x0000757b43e5b440  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x757b43e5b440
0x0000757b43e5b448  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x757b43e5b448
0x0000757b43e5b450  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x757b43e5b450
0x0000757b43e5b458  uint64           *   S_PtrToValue             = 0x0000757b43e5b468          offset = 0x80 : dataPtr = 0x757b43e5b458
0x0000757b43e5b460  block                Definition               = 0x0000757b488be974          offset = 0x88 : dataPtr = 0x757b43e5b460
union
0x0000757b43e5b468  uint64               S_Value                  = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468
0x0000757b43e5b468  byte             *   S_BytePtr                = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468
0x0000757b43e5b468  byte             *   S_Object                 = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468
0x0000757b43e5b468  _Identifier      *   S_ValueWord              = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468

union
0x0000757b43e5b470  _Identifier      *   S_ContainingNamespace    = 0x0000757b4845d7b4          offset = 0x98 : dataPtr = 0x757b43e5b470
0x0000757b43e5b470  _Identifier      *   S_ContainingList         = 0x0000757b4845d7b4          offset = 0x98 : dataPtr = 0x757b43e5b470
0x0000757b43e5b470  _Identifier      *   S_Prototype              = 0x0000757b4845d7b4          offset = 0x98 : dataPtr = 0x757b43e5b470
 0x0000757b43e5b3d8
Dump at : namespaces/compiler/c_syntax.csl : 405.54 :
Dump : Address = 0x0000757b43e5b3d8 : Number = 184 :: (little endian dump)
0x0000757b43e5b3d8 :  28 b2 e5 43 7b 75 00 00  7c d9 45 48 7b 75 00 00  (..C{u.. |.EH{u.. 
0x0000757b43e5b3e8 :  00 00 00 00 b0 01 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b43e5b3f8 :  02 00 00 00 00 00 04 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b43e5b408 :  00 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  ........ @....... 
0x0000757b43e5b418 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b43e5b428 :  00 00 00 00 00 00 00 00  1f 00 00 00 00 00 00 00  ........ ........ 
0x0000757b43e5b438 :  ea c9 11 48 7b 75 00 00  30 00 04 04 00 00 00 00  ...H{u.. 0....... 
0x0000757b43e5b448 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b43e5b458 :  68 b4 e5 43 7b 75 00 00  74 e9 8b 48 7b 75 00 00  h..C{u.. t..H{u.. 
0x0000757b43e5b468 :  74 e9 8b 48 7b 75 00 00  b4 d7 45 48 7b 75 00 00  t..H{u.. ..EH{u.. 
0x0000757b43e5b478 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b43e5b488 :  90 b4 e5 43 7b 75 00 00  00 00 00 00 00 00 00 00  ...C{u.. ........ 
 0x0000757b43e5b2b8 0x0000757b43e5b3d8 0x0000757b43e5b3d8 0x0000757b43e5b460 wtdInclude
Identifier = 757b47d132d5, Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


 =============================
C_Syntax.tfw1 <:> csl compiled word
SourceCode for C_Syntax.tfw1 :> 
void tfw1 ( Word * w ) { hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name ) ; hp ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_WordData->Filename ) ; } 
Source code file location of tfw1 : "namespaces/compiler/c_syntax.csl" : 414.10 :: we are now at : namespaces/compiler/c_syntax.csl : 419.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488bfc48 -- code size = 262 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.tfw1 : definition = 0x0000757b488bfc48 : disassembly at namespaces/compiler/c_syntax.csl : 419.9 :
0x757b488bfc48    4d897e08                mov [r14+0x8], r15                                     
0x757b488bfc4c    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488bfc50    4981c608000000          add r14, 0x8                                           
 ..   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filena .. 
0x757b488bfc57    498b47f8                mov rax, [r15-0x8]                                     
   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  .. 
0x757b488bfc5b    4881c088000000          add rax, 0x88                                          
0x757b488bfc62    488b00                  mov rax, [rax]                                         
0x757b488bfc65    4983c608                add r14, 0x8                                           
 ..  void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filenam .. 
0x757b488bfc69    498906                  mov [r14], rax                                         
0x757b488bfc6c    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488bfc76    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_ .. 
0x757b488bfc79    498b47f8                mov rax, [r15-0x8]                                     
 .. {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Fil .. 
0x757b488bfc7d    4881c060000000          add rax, 0x60                                          
0x757b488bfc84    488b00                  mov rax, [rax]                                         
0x757b488bfc87    4983c608                add r14, 0x8                                           
 ..   {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_F .. 
0x757b488bfc8b    498906                  mov [r14], rax                                         
 ..  * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps (  .. 
0x757b488bfc8e    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bfc98    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. efinition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData .. 
0x757b488bfc9b    498b47f8                mov rax, [r15-0x8]                                     
 .. n ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filena .. 
0x757b488bfc9f    4881c060000000          add rax, 0x60                                          
0x757b488bfca6    488b00                  mov rax, [rax]                                         
0x757b488bfca9    4983c608                add r14, 0x8                                           
 .. finition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData- .. 
0x757b488bfcad    498906                  mov [r14], rax                                         
 ..  w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_Wor .. 
0x757b488bfcb0    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bfcba    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ame ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W .. 
0x757b488bfcbd    498b47f8                mov rax, [r15-0x8]                                     
 .. ->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Fil .. 
0x757b488bfcc1    4881c0b0000000          add rax, 0xb0                                          
0x757b488bfcc8    488b00                  mov rax, [rax]                                         
 .. e  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;   .. 
0x757b488bfccb    4881c028000000          add rax, 0x28                                          
0x757b488bfcd2    488b00                  mov rax, [rax]                                         
0x757b488bfcd5    4983c608                add r14, 0x8                                           
 .. ame  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ; .. 
0x757b488bfcd9    498906                  mov [r14], rax                                         
 .. ->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( .. 
0x757b488bfcdc    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488bfce6    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. e W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfce9    498b47f8                mov rax, [r15-0x8]                                     
 .. Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfced    4881c0b0000000          add rax, 0xb0                                          
0x757b488bfcf4    488b00                  mov rax, [rax]                                         
 .. ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfcf7    4881c028000000          add rax, 0x28                                          
0x757b488bfcfe    488b00                  mov rax, [rax]                                         
0x757b488bfd01    4983c608                add r14, 0x8                                           
 .. ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd05    498906                  mov [r14], rax                                         
0x757b488bfd08    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bfd12    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. lename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd15    498b47f8                mov rax, [r15-0x8]                                     
 .. ame W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd19    4881c0b0000000          add rax, 0xb0                                          
0x757b488bfd20    488b00                  mov rax, [rax]                                         
 .. ta->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd23    4881c028000000          add rax, 0x28                                          
0x757b488bfd2a    488b00                  mov rax, [rax]                                         
0x757b488bfd2d    4983c608                add r14, 0x8                                           
 .. Data->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd31    498906                  mov [r14], rax                                         
 .. >W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd34    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488bfd3e    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488bfd41    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488bfd45    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488bfd49    4983ee08                sub r14, 0x8                                           
 ..  ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x757b488bfd4d    c3                      ret                                                    
Word_Disassemble : word - 'tfw1' :: codeSize = 262
Word : 0x0000757b43f1b3fb :: Compiled at : 0x0000757b488bfc48
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 419.9 <::
 0x0000757b488bfc48 tfw1 0x0000757b488bfc48 tfw1 tfw1 0x0000757b4811a674 namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
 -----------------------------
WordDisassemble : word = 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 423.25 <::
 0x0000757b488be974 wtdInclude
 0x0000757b47157b24 fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x0000757b47157b24 fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x0000757b43e5b3d8
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 434.69 : data = '757b43e5b3d8' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x0000757b43e5b3d8
_Identifier

                  DLNode : S_Node : size = 88 : at 0000757b43e5b3d8
union

                 _DLNode : n_DLNode : size = 24 : at 0000757b43e5b3d8
union
0x0000757b43e5b3d8  dlnode           *   n_After                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3e0  dlnode           *   n_Before                 = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0

                  dlnode : n_Node : size = 16 : at 0000757b43e5b3d8
_node
union
0x0000757b43e5b3d8  _node            *   n_After                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  _node            *   n_Head                   = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8

union
0x0000757b43e5b3e0  _node            *   n_Before                 = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0
0x0000757b43e5b3e0  _node            *   n_Tail                   = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0


union
0x0000757b43e5b3e8  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x757b43e5b3e8
0x0000757b43e5b3ec  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x757b43e5b3ec
0x0000757b43e5b3ee  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x757b43e5b3ee
0x0000757b43e5b3ef  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x757b43e5b3ef
0x0000757b43e5b3d8  byte             *   n_unmap                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  byte             *   n_bData                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  int64            *   n_iData                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  int64                node                     = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  int64            *   n_CurrentNode            = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8


                 dobject : n_dobject : size = 32 : at 0000757b43e5b3d8
union
0x0000757b43e5b3d8  dlnode           *   do_After                 = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3e0  dlnode           *   do_Before                = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0

                  dlnode : do_Node : size = 16 : at 0000757b43e5b3d8
_node
union
0x0000757b43e5b3d8  _node            *   n_After                  = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8
0x0000757b43e5b3d8  _node            *   n_Head                   = 0x0000757b43e5b228          offset = 0x0 : dataPtr = 0x757b43e5b3d8

union
0x0000757b43e5b3e0  _node            *   n_Before                 = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0
0x0000757b43e5b3e0  _node            *   n_Tail                   = 0x0000757b4845d97c          offset = 0x8 : dataPtr = 0x757b43e5b3e0


0x0000757b43e5b3e8  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x757b43e5b3e8
0x0000757b43e5b3ec  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x757b43e5b3ec
0x0000757b43e5b3ee  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x757b43e5b3ee
0x0000757b43e5b3ef  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x757b43e5b3ef
union
0x0000757b43e5b3f0  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x757b43e5b3f0
0x0000757b43e5b3f0  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x757b43e5b3f0
0x0000757b43e5b3f0  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x757b43e5b3f0



           AttributeInfo : n_Attributes : size = 56 : at 0000757b43e5b3f8
union
union
0x0000757b43e5b3f8  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x757b43e5b3f8
0x0000757b43e5b400  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x757b43e5b400
0x0000757b43e5b408  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x757b43e5b408
0x0000757b43e5b410  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x757b43e5b410
0x0000757b43e5b418  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x757b43e5b418
0x0000757b43e5b41c  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x757b43e5b41c
0x0000757b43e5b41e  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x757b43e5b41e

union
0x0000757b43e5b420  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x757b43e5b420
0x0000757b43e5b420  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x757b43e5b420

union
0x0000757b43e5b428  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x757b43e5b428
0x0000757b43e5b428  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x757b43e5b428

0x0000757b43e5b3f8  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x757b43e5b3f8

0x0000757b43e5b430  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x757b43e5b430
0x0000757b43e5b438  byte             *   S_Name                   = 0x0000757b4811c9ea          offset = 0x60 : dataPtr = 0x757b43e5b438
        S_Name = 'wtdInclude'
0x0000757b43e5b440  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x757b43e5b440
0x0000757b43e5b448  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x757b43e5b448
0x0000757b43e5b450  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x757b43e5b450
0x0000757b43e5b458  uint64           *   S_PtrToValue             = 0x0000757b43e5b468          offset = 0x80 : dataPtr = 0x757b43e5b458
0x0000757b43e5b460  block                Definition               = 0x0000757b488be974          offset = 0x88 : dataPtr = 0x757b43e5b460
union
0x0000757b43e5b468  uint64               S_Value                  = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468
0x0000757b43e5b468  byte             *   S_BytePtr                = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468
0x0000757b43e5b468  byte             *   S_Object                 = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468
0x0000757b43e5b468  _Identifier      *   S_ValueWord              = 0x0000757b488be974          offset = 0x90 : dataPtr = 0x757b43e5b468

union
0x0000757b43e5b470  _Identifier      *   S_ContainingNamespace    = 0x0000757b4845d7b4          offset = 0x98 : dataPtr = 0x757b43e5b470
0x0000757b43e5b470  _Identifier      *   S_ContainingList         = 0x0000757b4845d7b4          offset = 0x98 : dataPtr = 0x757b43e5b470
0x0000757b43e5b470  _Identifier      *   S_Prototype              = 0x0000757b4845d7b4          offset = 0x98 : dataPtr = 0x757b43e5b470

Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 16.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 441.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12337 : WordCreateCount = 13769 : WordsAdded = 5126 : FindWordCount = 152 : FindWordMaxCount = 156
RecycledWordCount : 503
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
 =============================
Infix.tt <:> csl compiled word
SourceCode for Infix.tt :> 
: tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name ps w->W_Filename W_WordData->Filename ps w->W_Filename W_WordData->Filename ps w->W_WordData->Filename ps ; 
Source code file location of tt : "namespaces/compiler/c_syntax.csl" : 443.2 :: we are now at : namespaces/compiler/c_syntax.csl : 444.7
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0079 -- code size = 319 bytes
TypeSignature : Object 
 -----------------------------
Word :: Infix.tt : definition = 0x0000757b488c0079 : disassembly at namespaces/compiler/c_syntax.csl : 444.7 :
0x757b488c0079    4d897e08                mov [r14+0x8], r15                                     
0x757b488c007d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0081    4981c608000000          add r14, 0x8                                           
 ..                     : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->File .. 
0x757b488c0088    48b8441813487b750000    mov rax, 0x757b48131844                                
0x757b488c0092    4983c608                add r14, 0x8                                           
0x757b488c0096    498906                  mov [r14], rax                                         
 ..           : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w .. 
0x757b488c0099    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c00a3    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..        : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W .. 
0x757b488c00a6    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c00aa    488b00                  mov rax, [rax]                                         
0x757b488c00ad    4983c608                add r14, 0x8                                           
0x757b488c00b1    498906                  mov [r14], rax                                         
 ..    : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Fil .. 
0x757b488c00b4    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488c00be    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 .. : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filena .. 
0x757b488c00c1    498b47f8                mov rax, [r15-0x8]                                     
 : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename  .. 
0x757b488c00c5    4881c088000000          add rax, 0x88                                          
0x757b488c00cc    488b00                  mov rax, [rax]                                         
0x757b488c00cf    4983c608                add r14, 0x8                                           
   : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filenam .. 
0x757b488c00d3    498906                  mov [r14], rax                                         
 .. w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData- .. 
0x757b488c00d6    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488c00e0    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
 ..  "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fi .. 
0x757b488c00e3    498b47f8                mov rax, [r15-0x8]                                     
 .. ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filen .. 
0x757b488c00e7    4881c060000000          add rax, 0x60                                          
0x757b488c00ee    488b00                  mov rax, [rax]                                         
0x757b488c00f1    4983c608                add r14, 0x8                                           
 .. "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fil .. 
0x757b488c00f5    498906                  mov [r14], rax                                         
 ..  ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps .. 
0x757b488c00f8    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0102    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w- .. 
0x757b488c0105    498b47f8                mov rax, [r15-0x8]                                     
 .. w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordD .. 
0x757b488c0109    4881c060000000          add rax, 0x60                                          
0x757b488c0110    488b00                  mov rax, [rax]                                         
0x757b488c0113    4983c608                add r14, 0x8                                           
 .. w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w-> .. 
0x757b488c0117    498906                  mov [r14], rax                                         
 .. ition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Fil .. 
0x757b488c011a    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0124    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. on hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filena .. 
0x757b488c0127    498b47f8                mov rax, [r15-0x8]                                     
 .. e ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c012b    4881c0b0000000          add rax, 0xb0                                          
0x757b488c0132    488b00                  mov rax, [rax]                                         
 ..  S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0135    4881c028000000          add rax, 0x28                                          
0x757b488c013c    488b00                  mov rax, [rax]                                         
0x757b488c013f    4983c608                add r14, 0x8                                           
 .. me S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0143    498906                  mov [r14], rax                                         
 .. s w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0146    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0150    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0153    498b47f8                mov rax, [r15-0x8]                                     
 .. _WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0157    4881c0b0000000          add rax, 0xb0                                          
0x757b488c015e    488b00                  mov rax, [rax]                                         
 .. ilename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0161    4881c028000000          add rax, 0x28                                          
0x757b488c0168    488b00                  mov rax, [rax]                                         
0x757b488c016b    4983c608                add r14, 0x8                                           
 .. >Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c016f    498906                  mov [r14], rax                                         
 .. s w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0172    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c017c    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c017f    498b47f8                mov rax, [r15-0x8]                                     
 .. _Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c0183    4881c0b0000000          add rax, 0xb0                                          
0x757b488c018a    488b00                  mov rax, [rax]                                         
 .. WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c018d    4881c028000000          add rax, 0x28                                          
0x757b488c0194    488b00                  mov rax, [rax]                                         
0x757b488c0197    4983c608                add r14, 0x8                                           
 .. W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c019b    498906                  mov [r14], rax                                         
 .. >Filename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c019e    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c01a8    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488c01ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c01af    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c01b3    4983ee08                sub r14, 0x8                                           
 .. lename  ps w->W_WordData->Filename ps ;  .. 
0x757b488c01b7    c3                      ret                                                    
Word_Disassemble : word - 'tt' :: codeSize = 319
Word : 0x0000757b43f24b83 :: Compiled at : 0x0000757b488c0079
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 444.7 <::

 0x0000757b43e5b3d8 
tt :  0x0000757b43e5b228 0x0000757b488be974 wtdInclude wtdInclude namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x0000757b43f283a3 
tti 0x0000757b488c01bd tti tti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 
ctti
ctti : word = 757b43f2b863 : Definition = 757b488c02e6 ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
C_Syntax.ctti <:> csl compiled word
SourceCode for C_Syntax.ctti :> 
void ctti ( Word * w | ptr l ) { ps ( "\nctti" ) ; l = w->Definition ; oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name ; ps(w->S_Name) ; ps ( ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps(ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps (ptr) ; ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ; ptr = w->W_WordData ; } 
Source code file location of ctti : "namespaces/compiler/c_syntax.csl" : 451.10 :: we are now at : namespaces/compiler/c_syntax.csl : 463.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c02e6 -- code size = 469 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.ctti : definition = 0x0000757b488c02e6 : disassembly at namespaces/compiler/c_syntax.csl : 463.9 :
0x757b488c02e6    4d897e08                mov [r14+0x8], r15                                     
0x757b488c02ea    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c02ee    4981c618000000          add r14, 0x18                                          
 .. tti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ;  .. 
0x757b488c02f5    48b82d1a13487b750000    mov rax, 0x757b48131a2d                                
0x757b488c02ff    4983c608                add r14, 0x8                                           
0x757b488c0303    498906                  mov [r14], rax                                         
0x757b488c0306    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0310    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; .. 
0x757b488c0313    498b47f8                mov rax, [r15-0x8]                                     
 ..  l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps .. 
0x757b488c0317    4881c088000000          add rax, 0x88                                          
0x757b488c031e    488b00                  mov rax, [rax]                                         
 .. w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Na .. 
0x757b488c0321    49894710                mov [r15+0x10], rax                                    
 ..  ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name .. 
0x757b488c0325    48b874d9d1477b750000    mov rax, 0x757b47d1d974                                
0x757b488c032f    488bf8                  mov rdi, rax                                           
 .. tti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = .. 
0x757b488c0332    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0336    4881c000000000          add rax, 0x0                                           
0x757b488c033d    488bf0                  mov rsi, rax                                           
 ..  : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w. .. 
0x757b488c0340    498b4710                mov rax, [r15+0x10]                                    
0x757b488c0344    488bd0                  mov rdx, rax                                           
 .. "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->N .. 
0x757b488c0347    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c0351    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c035b    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. x : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W .. 
0x757b488c035e    498b47f8                mov rax, [r15-0x8]                                     
 ..  Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_Wo .. 
0x757b488c0362    4881c060000000          add rax, 0x60                                          
0x757b488c0369    488b00                  mov rax, [rax]                                         
 .. d = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_File .. 
0x757b488c036c    49894708                mov [r15+0x8], rax                                     
 .. = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->File .. 
0x757b488c0370    498b4708                mov rax, [r15+0x8]                                     
0x757b488c0374    4983c608                add r14, 0x8                                           
0x757b488c0378    498906                  mov [r14], rax                                         
 .. on = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->F .. 
0x757b488c037b    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0385    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(p .. 
0x757b488c0388    498b47f8                mov rax, [r15-0x8]                                     
 .. = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; pt .. 
0x757b488c038c    4881c060000000          add rax, 0x60                                          
0x757b488c0393    488b00                  mov rax, [rax]                                         
 ..  w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ; .. 
0x757b488c0396    49894708                mov [r15+0x8], rax                                     
 ..  ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filen .. 
0x757b488c039a    498b47f8                mov rax, [r15-0x8]                                     
 .. (ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename .. 
0x757b488c039e    4881c060000000          add rax, 0x60                                          
0x757b488c03a5    488b00                  mov rax, [rax]                                         
0x757b488c03a8    4983c608                add r14, 0x8                                           
 .. ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filena .. 
0x757b488c03ac    498906                  mov [r14], rax                                         
 .. e ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Fi .. 
0x757b488c03af    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c03b9    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Fi .. 
0x757b488c03bc    498b4708                mov rax, [r15+0x8]                                     
0x757b488c03c0    4983c608                add r14, 0x8                                           
0x757b488c03c4    498906                  mov [r14], rax                                         
 .. r = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordDat .. 
0x757b488c03c7    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c03d1    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. s(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) .. 
0x757b488c03d4    498b47f8                mov rax, [r15-0x8]                                     
 .. ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = .. 
0x757b488c03d8    4881c0b0000000          add rax, 0xb0                                          
0x757b488c03df    488b00                  mov rax, [rax]                                         
 .. ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordDa .. 
0x757b488c03e2    4881c028000000          add rax, 0x28                                          
0x757b488c03e9    488b00                  mov rax, [rax]                                         
0x757b488c03ec    49894708                mov [r15+0x8], rax                                     
 .. _Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; p .. 
0x757b488c03f0    498b4708                mov rax, [r15+0x8]                                     
0x757b488c03f4    4983c608                add r14, 0x8                                           
0x757b488c03f8    498906                  mov [r14], rax                                         
 .. w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename  .. 
0x757b488c03fb    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0405    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps  .. 
0x757b488c0408    498b47f8                mov rax, [r15-0x8]                                     
 .. name  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordDat .. 
0x757b488c040c    4881c0b0000000          add rax, 0xb0                                          
0x757b488c0413    488b00                  mov rax, [rax]                                         
 .. ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) .. 
0x757b488c0416    4881c028000000          add rax, 0x28                                          
0x757b488c041d    488b00                  mov rax, [rax]                                         
 .. me W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) .. 
0x757b488c0420    49894708                mov [r15+0x8], rax                                     
 .. _Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w-> .. 
0x757b488c0424    498b4708                mov rax, [r15+0x8]                                     
0x757b488c0428    4983c608                add r14, 0x8                                           
0x757b488c042c    498906                  mov [r14], rax                                         
 ..  w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = .. 
0x757b488c042f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0439    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ta->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c043c    498b47f8                mov rax, [r15-0x8]                                     
 .. >Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c0440    4881c0b0000000          add rax, 0xb0                                          
0x757b488c0447    488b00                  mov rax, [rax]                                         
 ..  ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c044a    4881c028000000          add rax, 0x28                                          
0x757b488c0451    488b00                  mov rax, [rax]                                         
0x757b488c0454    49894708                mov [r15+0x8], rax                                     
 ..   ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c0458    498b4708                mov rax, [r15+0x8]                                     
0x757b488c045c    4983c608                add r14, 0x8                                           
0x757b488c0460    498906                  mov [r14], rax                                         
 ..       ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c0463    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c046d    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c0470    498b47f8                mov rax, [r15-0x8]                                     
 .. ordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c0474    4881c0b0000000          add rax, 0xb0                                          
0x757b488c047b    488b00                  mov rax, [rax]                                         
 .. ename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c047e    4881c028000000          add rax, 0x28                                          
0x757b488c0485    488b00                  mov rax, [rax]                                         
0x757b488c0488    4983c608                add r14, 0x8                                           
 .. ilename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c048c    498906                  mov [r14], rax                                         
 ..  w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c048f    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c0499    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c049c    498b47f8                mov rax, [r15-0x8]                                     
 .. >W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c04a0    4881c0b0000000          add rax, 0xb0                                          
0x757b488c04a7    488b00                  mov rax, [rax]                                         
 ..  ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c04aa    49894708                mov [r15+0x8], rax                                     
0x757b488c04ae    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c04b2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c04b6    4983ee08                sub r14, 0x8                                           
 .. ename) ;     ptr = w->W_WordData ;    }  .. 
0x757b488c04ba    c3                      ret                                                    
Word_Disassemble : word - 'ctti' :: codeSize = 469
Word : 0x0000757b43f2b863 :: Compiled at : 0x0000757b488c02e6
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 463.9 <::
 
ctti
ctti : word = 757b43f2b863 : Definition = 757b488c02e6 ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x0000757b43f2b863 0x0000757b43f2b91b
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 465.89 : data = '757b43f2b91b' : typedef = 'WordData'
               _WordData :: size = 248 :: at : 0x0000757b43f2b91b
_WordData
0x0000757b43f2b91b  uint64               WD_RunType               = 0x0000000000000000          offset = 0x0 : dataPtr = 0x757b43f2b91b
0x0000757b43f2b923  Namespace        *   TypeNamespace            = 0x0000000000000000          offset = 0x8 : dataPtr = 0x757b43f2b923
0x0000757b43f2b92b  byte             *   TypeNamespaceName        = 0x00005b5fa6ec8af6          offset = 0x10 : dataPtr = 0x757b43f2b92b
        TypeNamespaceName = 'Word'
0x0000757b43f2b933  byte             *   CodeStart                = 0x0000757b488c02e6          offset = 0x18 : dataPtr = 0x757b43f2b933
union
0x0000757b43f2b93b  byte             *   WD_Coding                = 0x0000757b488c02e1          offset = 0x20 : dataPtr = 0x757b43f2b93b
0x0000757b43f2b93b  byte             *   WD_LogicCodingAfter      = 0x0000757b488c02e1          offset = 0x20 : dataPtr = 0x757b43f2b93b

0x0000757b43f2b943  byte             *   Filename                 = 0x0000757b4811a674          offset = 0x28 : dataPtr = 0x757b43f2b943
        Filename = 'namespaces/compiler/c_syntax.csl'
0x0000757b43f2b94b  int64                LineNumber               = 0x00000000000001c3          offset = 0x30 : dataPtr = 0x757b43f2b94b
0x0000757b43f2b953  int64                TokenStart_LineIndex     = 0x000000000000000a          offset = 0x38 : dataPtr = 0x757b43f2b953
0x0000757b43f2b95b  int64                NumberOfNonRegisterArgs  = 0x0000000000000001          offset = 0x40 : dataPtr = 0x757b43f2b95b
0x0000757b43f2b963  int64                NumberOfNonRegisterLocals = 0x0000000000000002         offset = 0x48 : dataPtr = 0x757b43f2b963
0x0000757b43f2b96b  int64                NumberOfVariables        = 0x0000000000000003          offset = 0x50 : dataPtr = 0x757b43f2b96b
0x0000757b43f2b973  byte             *   ObjectCode               = 0x0000000000000000          offset = 0x58 : dataPtr = 0x757b43f2b973
0x0000757b43f2b97b  byte             *   StackPushRegisterCode    = 0x0000000000000000          offset = 0x60 : dataPtr = 0x757b43f2b97b
0x0000757b43f2b983  Word             *   AliasOf                  = 0x0000000000000000          offset = 0x68 : dataPtr = 0x757b43f2b983
0x0000757b43f2b98b  Word             *   OriginalWord             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x757b43f2b98b
0x0000757b43f2b993  int64                Offset                   = 0x0000000000000000          offset = 0x78 : dataPtr = 0x757b43f2b993
0x0000757b43f2b99b  uint8                RegToUse                 = '' : 0x00           offset = 0x80 : dataPtr = 0x757b43f2b99b
0x0000757b43f2b99c  uint8                Opt_Rm                   = '' : 0x00           offset = 0x81 : dataPtr = 0x757b43f2b99c
0x0000757b43f2b99d  uint8                Opt_Reg                  = '' : 0x00           offset = 0x82 : dataPtr = 0x757b43f2b99d
0x0000757b43f2b99e  uint8                SrcReg                   = '' : 0x00           offset = 0x83 : dataPtr = 0x757b43f2b99e
0x0000757b43f2b99f  uint8                DstReg                   = '' : 0x00           offset = 0x84 : dataPtr = 0x757b43f2b99f
0x0000757b43f2b9a0  uint8                RegFlags                 = '' : 0x00           offset = 0x85 : dataPtr = 0x757b43f2b9a0
0x0000757b43f2b9a1  uint8                OpInsnGroup              = '' : 0x00           offset = 0x86 : dataPtr = 0x757b43f2b9a1
0x0000757b43f2b9a2  uint8                OpInsnCode               = '' : 0x00           offset = 0x87 : dataPtr = 0x757b43f2b9a2
0x0000757b43f2b9a3  byte                 TypeSignature            = 'O' : 0x4f          offset = 0x88 : dataPtr = 0x757b43f2b9a3
union
0x0000757b43f2b9b3  dllist           *   LocalNamespaces          = 0x0000000000000000          offset = 0x98 : dataPtr = 0x757b43f2b9b3

                  dllist : Location : size = 24 : at 0000757b43f2b9b3

                 _dllist : l_List : size = 16 : at 0000757b43f2b9b3
_node
union
0x0000757b43f2b9b3  _node            *   n_After                  = 0x0000000000000000          offset = 0x0 : dataPtr = 0x757b43f2b9b3
0x0000757b43f2b9b3  _node            *   n_Head                   = 0x0000000000000000          offset = 0x0 : dataPtr = 0x757b43f2b9b3

union
0x0000757b43f2b9bb  _node            *   n_Before                 = 0x0000757b48131ae7          offset = 0x8 : dataPtr = 0x757b43f2b9bb
0x0000757b43f2b9bb  _node            *   n_Tail                   = 0x0000757b48131ae7          offset = 0x8 : dataPtr = 0x757b43f2b9bb


                 _dllist : node : size = 16 : at 0000757b43f2b9c3
_node
union
0x0000757b43f2b9c3  _node            *   n_After                  = 0x0000757b46d5add0          offset = 0x0 : dataPtr = 0x757b43f2b9c3
0x0000757b43f2b9c3  _node            *   n_Head                   = 0x0000757b46d5add0          offset = 0x0 : dataPtr = 0x757b43f2b9c3

union
0x0000757b43f2b9cb  _node            *   n_Before                 = 0x0000000000000000          offset = 0x8 : dataPtr = 0x757b43f2b9cb
0x0000757b43f2b9cb  _node            *   n_Tail                   = 0x0000000000000000          offset = 0x8 : dataPtr = 0x757b43f2b9cb

0x0000757b43f2b9c3  _dllist          *   l_CurrentNode            = 0x0000757b46d5add0          offset = 0x10 : dataPtr = 0x757b43f2b9c3
0x0000757b43f2b9b3  dllist           *   OurLocation              = 0x0000000000000000          offset = 0x98 : dataPtr = 0x757b43f2b9b3
0x0000757b43f2b9b3  Word             *   CompiledAsPartOf         = 0x0000000000000000          offset = 0x98 : dataPtr = 0x757b43f2b9b3

union
0x0000757b43f2b9bb  int64            *   WD_ArrayDimensions       = 0x0000757b48131ae7          offset = 0xa0 : dataPtr = 0x757b43f2b9bb
0x0000757b43f2b9bb  byte             *   WD_OriginalCodeText      = 0x0000757b48131ae7          offset = 0xa0 : dataPtr = 0x757b43f2b9bb
        WD_OriginalCodeText = 'void ctti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    } '

0x0000757b43f2b9c3  Stack            *   WD_NamespaceStack        = 0x0000757b46d5add0          offset = 0xa8 : dataPtr = 0x757b43f2b9c3
union
0x0000757b43f2b9cb  ListObject       *   LambdaBody               = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x757b43f2b9cb
0x0000757b43f2b9cb  int64                AccumulatedOffset        = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x757b43f2b9cb

union
0x0000757b43f2b9d3  ListObject       *   LambdaArgs               = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x757b43f2b9d3
0x0000757b43f2b9d3  int64                Index                    = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x757b43f2b9d3
0x0000757b43f2b9d3  int64                WD_ArrayNumberOfDimensions = 0x0000000000000000                offset = 0xb8 : dataPtr = 0x757b43f2b9d3

0x0000757b43f2b9db  dllist           *   SourceCodeWordList       = 0x0000757b46d592b0          offset = 0xc0 : dataPtr = 0x757b43f2b9db
0x0000757b43f2b9e3  int64                SourceCodeMemSpaceRandMarker = 0x0000000000000000              offset = 0xc8 : dataPtr = 0x757b43f2b9e3
0x0000757b43f2b9eb  dllist           *   DebugWordList            = 0x0000000000000000          offset = 0xd0 : dataPtr = 0x757b43f2b9eb
0x0000757b43f2b9f3  int64                StartCharRlIndex         = 0x0000000000000014          offset = 0xd8 : dataPtr = 0x757b43f2b9f3
0x0000757b43f2b9fb  int64                SC_WordIndex             = 0x0000000000000015          offset = 0xe0 : dataPtr = 0x757b43f2b9fb
0x0000757b43f2ba03  Identifier       *   CSLWord                  = 0x0000000000000000          offset = 0xe8 : dataPtr = 0x757b43f2ba03
0x0000757b43f2ba0b  Identifier       *   BaseObject               = 0x0000000000000000          offset = 0xf0 : dataPtr = 0x757b43f2ba0b
DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Experimental3.byteTest <:> structure : size = 0byteTest alias for _byteTest, immediate
SourceCode for Experimental3._byteTest :> 
typedef struct _byteTest { byte a8_123 ; int64 a64_123 ; byte b8_123 ; byte c8_123 ; union { int64 u64_123 ; int32 u32_123 ; int8 u8_123 ; } ; int32 a32_123 ; byte d8_123 ; int16 a16_123 ; } byteTest, abyteTest ; 
Source code file location of byteTest : "namespaces/compiler/c_syntax.csl" : 493.2 :: we are now at : namespaces/compiler/c_syntax.csl : 495.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x471642e4 -- code size = 34 bytes
 -----------------------------
Word :: Experimental3.byteTest : definition = 0x0000757b471642e4 : disassembly at namespaces/compiler/c_syntax.csl : 495.13 :
0x757b471642e4    48bf3b56f3437b750000    mov rdi, 0x757b43f3563b                                
0x757b471642ee    49bbd0c6e4a65f5b0000    mov r11, 0x5b5fa6e4c6d0                                
0x757b471642f8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b47164302    49ffd2                  call r10                      < C compiler code >        
0x757b47164305    c3                      ret                                                    
Word_Disassemble : word - 'byteTest' :: codeSize = 34
Word : 0x0000757b43f36c63 :: Compiled at : 0x0000757b471642e4
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 495.13 <::
 
bt.size = 26
DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
C_Syntax.bttt <:> csl compiled word
SourceCode for C_Syntax.bttt :> 
void bttt ( byteTest * xbt | btt byte bbtt) { oPrintf ( "\nbtt" ) ; dump ( &xbt, xbt.size ) ; xbt.a8_123 = 'a' ; bbtt = xbt.a8_123 ; oPrintf ( "\nbtt = %c", bbtt ) ; xbt.a64_123 = 0x123456789abcdef ; xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ; xbt.a32_123 = 0x12345678 ; xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ; xbt.d8_123 = 'd' ; oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ; oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ; oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ; oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ; oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ; oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ; oPrintf ( "\nbtt = %lx", btt ) ; dump ( &xbt, xbt.size ) ; hp ( &xbt.a8_123 ) ; } 
Source code file location of bttt : "namespaces/compiler/c_syntax.csl" : 499.5 :: we are now at : namespaces/compiler/c_syntax.csl : 525.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c04c0 -- code size = 903 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.bttt : definition = 0x0000757b488c04c0 : disassembly at namespaces/compiler/c_syntax.csl : 525.9 :
0x757b488c04c0    4d897e08                mov [r14+0x8], r15                                     
0x757b488c04c4    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c04c8    4981c618000000          add r14, 0x18                                          
 .. bt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;       .. 
0x757b488c04cf    48b86c59d2477b750000    mov rax, 0x757b47d2596c                                
0x757b488c04d9    488bf8                  mov rdi, rax                                           
 .. teTest * xbt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_1 .. 
0x757b488c04dc    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c04e6    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c04f0    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 ..     oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c",  .. 
0x757b488c04f3    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c04f7    4881c000000000          add rax, 0x0                                           
0x757b488c04fe    4983c608                add r14, 0x8                                           
0x757b488c0502    498906                  mov [r14], rax                                         
 .. Printf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt  .. 
0x757b488c0505    48b8b358f3437b750000    mov rax, 0x757b43f358b3                                
0x757b488c050f    488b00                  mov rax, [rax]                                         
0x757b488c0512    4983c608                add r14, 0x8                                           
0x757b488c0516    498906                  mov [r14], rax                                         
 .. tt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt .. 
0x757b488c0519    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488c0523    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c052d    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123  .. 
0x757b488c0530    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0534    4881c000000000          add rax, 0x0                                           
0x757b488c053b    b161                    mov cl, 0x61                                           
 .. &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x1234567 .. 
0x757b488c053d    488908                  mov [rax], rcx                                         
 ..        xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt. .. 
0x757b488c0540    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0544    4881c000000000          add rax, 0x0                                           
0x757b488c054b    488b00                  mov rax, [rax]                                         
 .. e ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;    .. 
0x757b488c054e    49894710                mov [r15+0x10], rax                                    
 ..    bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 =  .. 
0x757b488c0552    48b8115dd2477b750000    mov rax, 0x757b47d25d11                                
0x757b488c055c    488bf8                  mov rdi, rax                                           
 .. a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_ .. 
0x757b488c055f    498b4710                mov rax, [r15+0x10]                                    
0x757b488c0563    488bf0                  mov rsi, rax                                           
 .. = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt .. 
0x757b488c0566    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c0570    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c057a    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
0x757b488c057d    498b47f8                mov rax, [r15-0x8]                                     
 .. ntf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;     .. 
0x757b488c0581    4881c001000000          add rax, 0x1                                           
0x757b488c0588    48b9efcdab8967452301    mov rcx, 0x123456789abcdef                              
 .. nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a3 .. 
0x757b488c0592    488908                  mov [rax], rcx                                         
0x757b488c0595    498b47f8                mov rax, [r15-0x8]                                     
 .. 64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32 .. 
0x757b488c0599    4881c009000000          add rax, 0x9                                           
0x757b488c05a0    b162                    mov cl, 0x62                                           
 .. = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 =  .. 
0x757b488c05a2    488908                  mov [rax], rcx                                         
 .. 56789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x123456 .. 
0x757b488c05a5    498b47f8                mov rax, [r15-0x8]                                     
 .. 9abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, b .. 
0x757b488c05a9    4881c00a000000          add rax, 0xa                                           
0x757b488c05b0    b163                    mov cl, 0x63                                           
 ..  ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0x .. 
0x757b488c05b2    488908                  mov [rax], rcx                                         
 .. xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba098 .. 
0x757b488c05b5    498b47f8                mov rax, [r15-0x8]                                     
 .. b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654 .. 
0x757b488c05b9    4881c018000000          add rax, 0x18                                          
0x757b488c05c0    66b93412                mov cx, 0x1234                                         
 ..  'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;    .. 
0x757b488c05c4    488908                  mov [rax], rcx                                         
0x757b488c05c7    498b47f8                mov rax, [r15-0x8]                                     
 .. 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ; .. 
0x757b488c05cb    4881c013000000          add rax, 0x13                                          
0x757b488c05d2    b978563412              mov ecx, 0x12345678                                    
 .. t.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPr .. 
0x757b488c05d7    488908                  mov [rax], rcx                                         
 ..  ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_1 .. 
0x757b488c05da    498b47f8                mov rax, [r15-0x8]                                     
 ..     xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = .. 
0x757b488c05de    4881c00b000000          add rax, 0xb                                           
0x757b488c05e5    b967452301              mov ecx, 0x1234567                                     
 .. a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", .. 
0x757b488c05ea    488908                  mov [rax], rcx                                         
 .. 678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;  .. 
0x757b488c05ed    49ba2143658709badc0e    mov r10, 0xedcba0987654321                              
 .. 2345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123  .. 
0x757b488c05f7    4d895708                mov [r15+0x8], r10                                     
 .. 234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_1 .. 
0x757b488c05fb    498b47f8                mov rax, [r15-0x8]                                     
 .. 67, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = .. 
0x757b488c05ff    4881c017000000          add rax, 0x17                                          
0x757b488c0606    b164                    mov cl, 0x64                                           
 ..  = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx  .. 
0x757b488c0608    488908                  mov [rax], rcx                                         
 ..      xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;     .. 
0x757b488c060b    48b89b6bd2477b750000    mov rax, 0x757b47d26b9b                                
0x757b488c0615    488bf8                  mov rdi, rax                                           
 ..     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_12 .. 
0x757b488c0618    498b47f8                mov rax, [r15-0x8]                                     
 .. oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 =  .. 
0x757b488c061c    4881c018000000          add rax, 0x18                                          
0x757b488c0623    488b00                  mov rax, [rax]                                         
0x757b488c0626    488bf0                  mov rsi, rax                                           
 .. 87654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_1 .. 
0x757b488c0629    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c0633    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c063d    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;    .. 
0x757b488c0640    48b8af6bd2477b750000    mov rax, 0x757b47d26baf                                
0x757b488c064a    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_12 .. 
0x757b488c064d    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 =  .. 
0x757b488c0651    4881c013000000          add rax, 0x13                                          
0x757b488c0658    488b00                  mov rax, [rax]                                         
0x757b488c065b    488bf0                  mov rsi, rax                                           
 .. 16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_ .. 
0x757b488c065e    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c0668    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c0672    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. %lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;    .. 
0x757b488c0675    48b8c46bd2477b750000    mov rax, 0x757b47d26bc4                                
0x757b488c067f    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 .. 
0x757b488c0682    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = % .. 
0x757b488c0686    4881c001000000          add rax, 0x1                                           
0x757b488c068d    488b00                  mov rax, [rax]                                         
0x757b488c0690    488bf0                  mov rsi, rax                                           
 .. 2_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_ .. 
0x757b488c0693    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c069d    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c06a7    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. %lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oP .. 
0x757b488c06aa    48b8d96bd2477b750000    mov rax, 0x757b47d26bd9                                
0x757b488c06b4    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c .. 
0x757b488c06b7    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ",  .. 
0x757b488c06bb    4881c00b000000          add rax, 0xb                                           
0x757b488c06c2    488b00                  mov rax, [rax]                                         
0x757b488c06c5    488bf0                  mov rsi, rax                                           
 .. 4_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) .. 
0x757b488c06c8    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c06d2    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c06dc    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. %lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf .. 
0x757b488c06df    48b8ee6bd2477b750000    mov rax, 0x757b47d26bee                                
0x757b488c06e9    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c  .. 
0x757b488c06ec    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c06f0    4881c000000000          add rax, 0x0                                           
0x757b488c06f7    488b00                  mov rax, [rax]                                         
0x757b488c06fa    488bf0                  mov rsi, rax                                           
 .. 2_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;    .. 
0x757b488c06fd    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c0707    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c0711    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf .. 
0x757b488c0714    48b8ff6bd2477b750000    mov rax, 0x757b47d26bff                                
0x757b488c071e    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c  .. 
0x757b488c0721    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", x .. 
0x757b488c0725    4881c009000000          add rax, 0x9                                           
0x757b488c072c    488b00                  mov rax, [rax]                                         
0x757b488c072f    488bf0                  mov rsi, rax                                           
 .. bt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;    .. 
0x757b488c0732    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c073c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c0746    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf .. 
0x757b488c0749    48b8106cd2477b750000    mov rax, 0x757b47d26c10                                
0x757b488c0753    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt .. 
0x757b488c0756    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ; .. 
0x757b488c075a    4881c00a000000          add rax, 0xa                                           
0x757b488c0761    488b00                  mov rax, [rax]                                         
0x757b488c0764    488bf0                  mov rsi, rax                                           
 .. bt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;    .. 
0x757b488c0767    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c0771    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c077b    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.siz .. 
0x757b488c077e    48b8216cd2477b750000    mov rax, 0x757b47d26c21                                
0x757b488c0788    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt. .. 
0x757b488c078b    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_1 .. 
0x757b488c078f    4881c017000000          add rax, 0x17                                          
0x757b488c0796    488b00                  mov rax, [rax]                                         
0x757b488c0799    488bf0                  mov rsi, rax                                           
 .. bt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xb .. 
0x757b488c079c    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c07a6    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c07b0    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c07b3    48b8326cd2477b750000    mov rax, 0x757b47d26c32                                
0x757b488c07bd    488bf8                  mov rdi, rax                                           
 .. 123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c07c0    498b4708                mov rax, [r15+0x8]                                     
0x757b488c07c4    488bf0                  mov rsi, rax                                           
 .. bt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c07c7    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c07d1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c07db    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c07de    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c07e2    4881c000000000          add rax, 0x0                                           
0x757b488c07e9    4983c608                add r14, 0x8                                           
0x757b488c07ed    498906                  mov [r14], rax                                         
 .. btt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c07f0    48b8b358f3437b750000    mov rax, 0x757b43f358b3                                
0x757b488c07fa    488b00                  mov rax, [rax]                                         
0x757b488c07fd    4983c608                add r14, 0x8                                           
0x757b488c0801    498906                  mov [r14], rax                                         
 .. oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c0804    49bbb003eaa65f5b0000    mov r11, 0x5b5fa6ea03b0                                
0x757b488c080e    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c0818    49ffd2                  call r10                      < Debug.dump : 0x00005b5fa6ea03b0 >
 ..  dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c081b    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c081f    4881c000000000          add rax, 0x0                                           
0x757b488c0826    4983c608                add r14, 0x8                                           
0x757b488c082a    498906                  mov [r14], rax                                         
0x757b488c082d    49ba28c58a487b750000    mov r10, 0x757b488ac528                                
0x757b488c0837    49ffd2                  call r10                      < Int.hp : 0x0000757b488ac528 >
0x757b488c083a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c083e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c0842    4983ee08                sub r14, 0x8                                           
 .. bt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x757b488c0846    c3                      ret                                                    
Word_Disassemble : word - 'bttt' :: codeSize = 903
Word : 0x0000757b43f3721b :: Compiled at : 0x0000757b488c04c0
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 525.9 <::

btt
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x0000757b482004f5 : Number = 26 :: (little endian dump)
0x0000757b482004f5 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000757b48200505 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

btt = a
bt.a16_123 = 0x12345 
bt.a32_123 = 0x123456412345678 
bt.a64_123 = 0x123456789abcdef 
bt.u32_123 = 0x1234567 
bt.a8_123 = a 
bt.b8_123 = b 
bt.c8_123 = c 
bt.c8_123 = d 
btt = edcba0987654321
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x0000757b482004f5 : Number = 26 :: (little endian dump)
0x0000757b482004f5 :  61 ef cd ab 89 67 45 23  01 62 63 67 45 23 01 00  a....gE# .bcgE#.. 
0x0000757b48200505 :  00 00 00 78 56 34 12 64  45 23 01 00 00 00 00 01  ...xV4.d E#...... 
 0x0000757b482004f5
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 527.40 : data = '757b43f4457b' : typedef = 'byteTest'
               _byteTest :: size = 26 :: at : 0x0000757b43f4457b
_byteTest
0x0000757b43f4457b  byte                 a8_123                   = '3' : 0x33          offset = 0x0 : dataPtr = 0x757b43f4457b
0x0000757b43f4457c  int64                a64_123                  = 0x030000757b43f370          offset = 0x1 : dataPtr = 0x757b43f4457c
0x0000757b43f44584  byte                 b8_123                   = 'X' : 0x58          offset = 0x9 : dataPtr = 0x757b43f44584
0x0000757b43f44585  byte                 c8_123                   = '�' : 0xfffffff3            offset = 0xa : dataPtr = 0x757b43f44585
union
0x0000757b43f44586  int64                u64_123                  = 0x0000000000757b43          offset = 0xb : dataPtr = 0x757b43f44586
0x0000757b43f44586  int32                u32_123                  = 0x00757b43          offset = 0xb : dataPtr = 0x757b43f44586
0x0000757b43f44586  int8                 u8_123                   = 'C' : 0x43          offset = 0xb : dataPtr = 0x757b43f44586

0x0000757b43f4458e  int32                a32_123                  = 0x0001b000          offset = 0x13 : dataPtr = 0x757b43f4458e
0x0000757b43f44592  byte                 d8_123                   = '' : 0x00           offset = 0x17 : dataPtr = 0x757b43f44592
0x0000757b43f44593  int16                a16_123                  = 0x0000              offset = 0x18 : dataPtr = 0x757b43f44593
 0x0000000012345678
 0x0000000001234567
System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 536.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12450 : WordCreateCount = 13888 : WordsAdded = 5168 : FindWordCount = 100 : FindWordMaxCount = 161
RecycledWordCount : 503
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0 
Word size =  184 
WordData size =  248 
DLNode size =  88 
dobject size =  32 
AttributeInfo size =  56
 =============================
Experimental.Word <:> structure : size = 0Word alias for _Identifier, immediate
SourceCode for Experimental._Identifier :> 
typedef struct _Identifier { DLNode S_Node ; int64 CodeSize ; byte * S_Name ; uint64 State ; dllist * S_SymbolList ; uint64 S_DObjectValue ; uint64 * S_PtrToValue ; block Definition ; union { uint64 S_Value ; byte * S_BytePtr ; byte * S_Object ; struct _Identifier * S_ValueWord ; } ; union { struct _Identifier * S_ContainingNamespace ; struct _Identifier * S_ContainingList ; struct _Identifier * S_Prototype ; } ;
Source code file location of Word : "namespaces/types.csl" : 304.18 :: we are now at : namespaces/compiler/c_syntax.csl : 542.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x47158a8c -- code size = 34 bytes
 -----------------------------
Word :: Experimental.Word : definition = 0x0000757b47158a8c : disassembly at namespaces/compiler/c_syntax.csl : 542.9 :
0x757b47158a8c    48bfd691e6437b750000    mov rdi, 0x757b43e691d6                                
0x757b47158a96    49bbd0c6e4a65f5b0000    mov r11, 0x5b5fa6e4c6d0                                
0x757b47158aa0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b47158aaa    49ffd2                  call r10                      < C compiler code >        
0x757b47158aad    c3                      ret                                                    
Word_Disassemble : word - 'Word' :: codeSize = 34
Word : 0x0000757b43e6cf3e :: Compiled at : 0x0000757b47158a8c
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 542.9 <::

_ClassTypedef : at namespaces/compiler/c_syntax.csl : 555.17 : token = struct : cloneFlag = 0
DataStack at : namespaces/compiler/c_syntax.csl : 608.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 608.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 node -p " 1+1007 " > ./node.txt

OpenVmTil_SignalAction :: signal = 17

 =============================
Buffer2048.node-p <:> csl compiled word
SourceCode for Buffer2048.node-p :> 
: node-p ( txt, poftxt, buffer ) sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt ) buffer @ ash ; 
Source code file location of node-p : "namespaces/compiler/c_syntax.csl" : 610.2 :: we are now at : namespaces/compiler/c_syntax.csl : 616.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0930 -- code size = 114 bytes
TypeSignature : 
 -----------------------------
Word :: Buffer2048.node-p : definition = 0x0000757b488c0930 : disassembly at namespaces/compiler/c_syntax.csl : 616.11 :
0x757b488c0930    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0934    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0938    4981c608000000          add r14, 0x8                                           
 ..  txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x757b488c093f    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0943    488bf8                  mov rdi, rax                                           
0x757b488c0946    48b84d06d3477b750000    mov rax, 0x757b47d3064d       < string : 'node -p " %s " > %s' >
0x757b488c0950    488bf0                  mov rsi, rax                                           
 .. tf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x757b488c0953    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c0957    488bd0                  mov rdx, rax                                           
 .. buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x757b488c095a    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c095e    488bc8                  mov rcx, rax                                           
0x757b488c0961    b804000000              mov eax, 0x4                                           
 .. : node-p ( txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;  .. 
0x757b488c0966    49bb40eeec487b750000    mov r11, 0x757b48ecee40                                
0x757b488c0970    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c097a    49ffd2                  call r10                      < C.sprintf : 0x0000757b48ecee40 >
 .. -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x757b488c097d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0981    4983c608                add r14, 0x8                                           
0x757b488c0985    498906                  mov [r14], rax                                         
 .. \" > %s", txt, poftxt )      buffer @ ash    ; 
0x757b488c0988    49babe088c487b750000    mov r10, 0x757b488c08be                                
0x757b488c0992    49ffd2                  call r10                      < Buffer2048.ash : 0x0000757b488c08be >
0x757b488c0995    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0999    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c099d    4983ee18                sub r14, 0x18                                          
 .. ", txt, poftxt )      buffer @ ash    ; 
0x757b488c09a1    c3                      ret                                                    
Word_Disassemble : word - 'node-p' :: codeSize = 114
Word : 0x0000757b43f479e3 :: Compiled at : 0x0000757b488c0930
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 616.11 <::
1008

OpenVmTil_SignalAction :: signal = 17

including namespaces/test/dev0.csl at namespaces/test/initTest.csl : 86.41 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 17.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
 =============================
Experimental.tx <:> csl compiled word
SourceCode for Experimental.tx :> 
: tx 4 2 / 5 + ; 
Source code file location of tx : "namespaces/test/dev0.csl" : 24.2 :: we are now at : namespaces/test/dev0.csl : 25.7
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c09e0 -- code size = 21 bytes
TypeSignature : 
 -----------------------------
Word :: Experimental.tx : definition = 0x0000757b488c09e0 : disassembly at namespaces/test/dev0.csl : 25.7 :
 ..                                  : tx 4 2 / 5 + ;  .. 
0x757b488c09e0    b802000000              mov eax, 0x2                                           
 ..                            : tx 4 2 / 5 + ;  .. 
0x757b488c09e5    b905000000              mov ecx, 0x5                                           
 ..                          : tx 4 2 / 5 + ;  .. 
0x757b488c09ea    4803c1                  add rax, rcx                                           
0x757b488c09ed    4983c608                add r14, 0x8                                           
0x757b488c09f1    498906                  mov [r14], rax                                         
 ..                        : tx 4 2 / 5 + ;  .. 
0x757b488c09f4    c3                      ret                                                    
Word_Disassemble : word - 'tx' :: codeSize = 21
Word : 0x0000757b43f495c3 :: Compiled at : 0x0000757b488c09e0
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 25.7 <::

 =============================
Logic.tx1 <:> csl compiled word
SourceCode for Logic.tx1 :> 
: tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ; 
Source code file location of tx1 : "namespaces/test/dev0.csl" : 28.2 :: we are now at : namespaces/test/dev0.csl : 29.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0a09 -- code size = 90 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.tx1 : definition = 0x0000757b488c0a09 : disassembly at namespaces/test/dev0.csl : 29.8 :
 ..                                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a09    48c7c000000000          mov rax, 0x0                                           
 ..                               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a10    4883f800                cmp rax, 0x0                                           
0x757b488c0a14    0f95c0                  setnz al                                               
0x757b488c0a17    480fb6c0                movzx rax, al                                          
 ..                             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a1b    4983c608                add r14, 0x8                                           
0x757b488c0a1f    498906                  mov [r14], rax                                         
 ..                           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a22    b804000000              mov eax, 0x4                                           
 ..                     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a27    b902000000              mov ecx, 0x2                                           
 ..                   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a2c    48c7c200000000          mov rdx, 0x0                                           
0x757b488c0a33    48f7f9                  idiv rcx                                               
 ..                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a36    b903000000              mov ecx, 0x3                                           
 ..               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a3b    4823c1                  and rax, rcx                                           
 ..             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a3e    b904000000              mov ecx, 0x4                                           
 ..           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a43    480bc1                  or rax, rcx                                            
 ..         : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a46    b901000000              mov ecx, 0x1                                           
0x757b488c0a4b    4803c1                  add rax, rcx                                           
 ..       : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a4e    488bc8                  mov rcx, rax                                           
0x757b488c0a51    498b06                  mov rax, [r14]                                         
0x757b488c0a54    4983ee08                sub r14, 0x8                                           
 ..     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a58    4803c1                  add rax, rcx                                           
0x757b488c0a5b    4983c608                add r14, 0x8                                           
0x757b488c0a5f    498906                  mov [r14], rax                                         
 ..   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x757b488c0a62    c3                      ret                                                    
Word_Disassemble : word - 'tx1' :: codeSize = 90
Word : 0x0000757b43f4a193 :: Compiled at : 0x0000757b488c0a09
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 29.8 <::

 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :> 
int factoriali ( REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n-- ; res = res * (n--) ; } return res; } 
Source code file location of factoriali : "namespaces/test/dev0.csl" : 37.15 :: we are now at : namespaces/test/dev0.csl : 54.27
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0a77 -- code size = 42 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x0000757b488c0a77 : disassembly at namespaces/test/dev0.csl : 54.27 :
0x757b488c0a77    498b3e                  mov rdi, [r14]                                         
 .. toriali ( REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     re .. 
0x757b488c0a7a    be01000000              mov esi, 0x1                                           
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x757b488c0a7f    4883ff02                cmp rdi, 0x2                                           
0x757b488c0a83    7c18                    jl 0x488c0a9d                 < C_Syntax.factoriali+38 >
0x757b488c0a85    0f1f4000                nop [rax]                                              
 .. le ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x757b488c0a89    480faff7                imul rsi, rdi                                          
 .. ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x757b488c0a8d    48ffcf                  dec rdi                                                
 ..  res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x757b488c0a90    480faff7                imul rsi, rdi                                          
 ..  = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x757b488c0a94    48ffcf                  dec rdi                                                
0x757b488c0a97    4883ff02                cmp rdi, 0x2                                           
0x757b488c0a9b    7dec                    jge 0x488c0a89                < C_Syntax.factoriali+18 >
 ..  res = res * (n--) ;     }     return res; }  .. 
0x757b488c0a9d    498936                  mov [r14], rsi                                         
 .. = res * (n--) ;     }     return res; }  .. 
0x757b488c0aa0    c3                      ret                                                    
Word_Disassemble : word - 'factoriali' :: codeSize = 42
Word : 0x0000757b43f4be43 :: Compiled at : 0x0000757b488c0a77
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 54.27 <::
 5040 5040
 =============================
C.fac <:> csl compiled word
SourceCode for C.fac :> 
: fac ( n | rec ) rec 1 = { n @ 1 > } { n @ rec @ * rec store n -- } while return rec @ ; 
Source code file location of fac : "namespaces/test/dev0.csl" : 68.2 :: we are now at : namespaces/test/dev0.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0add -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.fac : definition = 0x0000757b488c0add : disassembly at namespaces/test/dev0.csl : 73.17 :
0x757b488c0add    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0ae1    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0ae5    4981c610000000          add r14, 0x10                                          
 ..         : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  .. 
0x757b488c0aec    49c7470801000000        mov qword [r15+0x8], 0x1                               
   : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  .. 
0x757b488c0af4    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0af9    7e1f                    jle 0x488c0b1a                < C.fac+61 >
0x757b488c0afb    0f1f4000                nop [rax]                                              
 .. rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0aff    498b47f8                mov rax, [r15-0x8]                                     
 .. )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0b03    498b4f08                mov rcx, [r15+0x8]                                     
 ..  rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0b07    480fafc1                imul rax, rcx                                          
 .. ec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0b0b    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0b0f    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0b13    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488c0b18    7fe5                    jg 0x488c0aff                 < C.fac+34 >
 .. @ rec @ * rec store n -- } while      return rec @ ; 
0x757b488c0b1a    498b4708                mov rax, [r15+0x8]                                     
0x757b488c0b1e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0b22    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * rec store n -- } while      return rec @ ; 
0x757b488c0b26    498906                  mov [r14], rax                                         
 ..  store n -- } while      return rec @ ; 
0x757b488c0b29    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x0000757b43f53543 :: Compiled at : 0x0000757b488c0add
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 73.17 <::
 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
Source code file location of factorial : "namespaces/test/dev0.csl" : 76.2 :: we are now at : namespaces/test/dev0.csl : 77.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0b3e -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x0000757b488c0b3e : disassembly at namespaces/test/dev0.csl : 77.14 :
 ..                           : factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;  .. 
0x757b488c0b3e    498b3e                  mov rdi, [r14]                                         
 .. torial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x757b488c0b41    be01000000              mov esi, 0x1                                           
 .. nt8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x757b488c0b46    4883ff01                cmp rdi, 0x1                                           
 .. 8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x757b488c0b4a    7e11                    jle 0x488c0b5d                < C.factorial+31 >
0x757b488c0b4c    0f1f4000                nop [rax]                                              
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x757b488c0b50    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x757b488c0b54    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x757b488c0b57    4883ff01                cmp rdi, 0x1                                           
0x757b488c0b5b    7ff3                    jg 0x488c0b50                 < C.factorial+18 >
 .. @ n @ * rec store n -- } while return rec ; 
0x757b488c0b5d    498936                  mov [r14], rsi                                         
 .. @ * rec store n -- } while return rec ; 
0x757b488c0b60    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 35
Word : 0x0000757b43f55fe3 :: Compiled at : 0x0000757b488c0b3e
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 77.14 <::
 5040 factorial  : ok


 namespaces/test/dev0.csl 79.12 
starting Lisp
 stack is ...
DataStack at : namespaces/test/dev0.csl : 79.52 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005
 g23
 7
 7
 q1x0
 7
 h01
 7
 7
 average

 =============================
LispDefines.average <:> variableaverage <:> lambdaCalculus compiled word
SourceCode for LispDefines.average :> 
(define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
Source code file location of average : "namespaces/test/dev0.csl" : 92.48 :: we are now at : namespaces/test/dev0.csl : 93.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488c0b66 -- code size = 57 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.average : definition = 0x0000757b488c0b66 : disassembly at namespaces/test/dev0.csl : 93.24 :
0x757b488c0b66    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0b6a    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0b6e    4981c608000000          add r14, 0x8                                           
 ..   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x757b488c0b75    498b47f0                mov rax, [r15-0x10]                                    
   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x757b488c0b79    498b4ff8                mov rcx, [r15-0x8]                                     
 ..     (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x757b488c0b7d    4803c1                  add rax, rcx                                           
 .. e average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
0x757b488c0b80    b902000000              mov ecx, 0x2                                           
0x757b488c0b85    48c7c200000000          mov rdx, 0x0                                           
0x757b488c0b8c    48f7f9                  idiv rcx                                               
0x757b488c0b8f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0b93    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c0b97    4983ee08                sub r14, 0x8                                           
0x757b488c0b9b    498906                  mov [r14], rax                                         
 ..         (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x757b488c0b9e    c3                      ret                                                    
Word_Disassemble : word - 'average' :: codeSize = 57
Word : 0x0000757b4830f638 :: Compiled at : 0x0000757b488c0b66
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 93.24 <::
 77
  : should show 77 7
 fib

 =============================
LispDefines.fib <:> variablefib <:> lambdaCalculus compiled word
SourceCode for LispDefines.fib :> 
(define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
Source code file location of fib : "namespaces/test/dev0.csl" : 97.76 :: we are now at : namespaces/test/dev0.csl : 98.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488c0ba4 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fib : definition = 0x0000757b488c0ba4 : disassembly at namespaces/test/dev0.csl : 98.20 :
0x757b488c0ba4    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0ba8    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0bac    4981c608000000          add r14, 0x8                                           
 ..   (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x757b488c0bb3    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..     (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x757b488c0bb8    7d14                    jge 0x488c0bce                < LispDefines.fib+42 >
0x757b488c0bba    0f1f4000                nop [rax]                                              
 .. (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x757b488c0bbe    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0bc2    4983c608                add r14, 0x8                                           
0x757b488c0bc6    498906                  mov [r14], rax                                         
 (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x757b488c0bc9    e945000000              jmp 0x757b488c0c13            < LispDefines.fib+111 >
 .. bda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0bce    498b47f8                mov rax, [r15-0x8]                                     
 .. a (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0bd2    b901000000              mov ecx, 0x1                                           
 .. ambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0bd7    482bc1                  sub rax, rcx                                           
0x757b488c0bda    4983c608                add r14, 0x8                                           
0x757b488c0bde    498906                  mov [r14], rax                                         
 .. ib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0be1    e8beffffff              call 0x757b488c0ba4           < LispDefines.fib : 0x0000757b488c0ba4 >
 .. se (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0be6    498b47f8                mov rax, [r15-0x8]                                     
 ..  (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0bea    b902000000              mov ecx, 0x2                                           
 .. Else (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0bef    482bc1                  sub rax, rcx                                           
0x757b488c0bf2    4983c608                add r14, 0x8                                           
0x757b488c0bf6    498906                  mov [r14], rax                                         
 ..  ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x757b488c0bf9    e8a6ffffff              call 0x757b488c0ba4           < LispDefines.fib : 0x0000757b488c0ba4 >
0x757b488c0bfe    498b0e                  mov rcx, [r14]                                         
0x757b488c0c01    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0c05    4983ee10                sub r14, 0x10                                          
0x757b488c0c09    4803c1                  add rax, rcx                                           
0x757b488c0c0c    4983c608                add r14, 0x8                                           
0x757b488c0c10    498906                  mov [r14], rax                                         
0x757b488c0c13    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0c17    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c0c1b    498906                  mov [r14], rax                                         
 ..             (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x757b488c0c1e    c3                      ret                                                    
Word_Disassemble : word - 'fib' :: codeSize = 123
Word : 0x0000757b48316a68 :: Compiled at : 0x0000757b488c0ba4
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 98.20 <::
 6765
 fib2
 6765
 7
 7
 7
 g
 h
 g1
 g2
 7
 7
 j
 h
 k

 77
 777
 77
 77
 777
 
before fib
 =============================
Compiler._fib1 <:> csl compiled word
SourceCode for Compiler._fib1 :> 
: _fib1 ( n ) { n @ 2 < } { n @ } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
Source code file location of _fib1 : "namespaces/test/dev0.csl" : 128.2 :: we are now at : namespaces/test/dev0.csl : 129.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0d3f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Compiler._fib1 : definition = 0x0000757b488c0d3f : disassembly at namespaces/test/dev0.csl : 129.19 :
0x757b488c0d3f    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0d43    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0d47    4981c608000000          add r14, 0x8                                           
 ..                       : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x757b488c0d4e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..               : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x757b488c0d53    7d14                    jge 0x488c0d69                < Compiler._fib1+42 >
0x757b488c0d55    0f1f4000                nop [rax]                                              
 ..           : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x757b488c0d59    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0d5d    4983c608                add r14, 0x8                                           
0x757b488c0d61    498906                  mov [r14], rax                                         
 ..      : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x757b488c0d64    e945000000              jmp 0x757b488c0dae            < Compiler._fib1+111 >
 ..  : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x757b488c0d69    498b47f8                mov rax, [r15-0x8]                                     
 : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x757b488c0d6d    b901000000              mov ecx, 0x1                                           
 .. b1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0d72    482bc1                  sub rax, rcx                                           
0x757b488c0d75    4983c608                add r14, 0x8                                           
0x757b488c0d79    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0d7c    e8beffffff              call 0x757b488c0d3f           < Compiler._fib1 : 0x0000757b488c0d3f >
 ..  { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0d81    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0d85    b902000000              mov ecx, 0x2                                           
 ..  2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0d8a    482bc1                  sub rax, rcx                                           
0x757b488c0d8d    4983c608                add r14, 0x8                                           
0x757b488c0d91    498906                  mov [r14], rax                                         
 ..  < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0d94    e8a6ffffff              call 0x757b488c0d3f           < Compiler._fib1 : 0x0000757b488c0d3f >
0x757b488c0d99    498b0e                  mov rcx, [r14]                                         
0x757b488c0d9c    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0da0    4983ee10                sub r14, 0x10                                          
 ..  n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0da4    4803c1                  add rax, rcx                                           
0x757b488c0da7    4983c608                add r14, 0x8                                           
0x757b488c0dab    498906                  mov [r14], rax                                         
0x757b488c0dae    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0db2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c0db6    498906                  mov [r14], rax                                         
 ..  @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x757b488c0db9    c3                      ret                                                    
Word_Disassemble : word - '_fib1' :: codeSize = 123
Word : 0x0000757b43f5fc33 :: Compiled at : 0x0000757b488c0d3f
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 129.19 <::
 6765
System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 132.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.Compiler fibbc

 =============================
LispDefines.fibbc <:> variablefibbc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibbc :> 
(define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
Source code file location of fibbc : "namespaces/test/dev0.csl" : 134.83 :: we are now at : namespaces/test/dev0.csl : 135.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488c0dbf -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibbc : definition = 0x0000757b488c0dbf : disassembly at namespaces/test/dev0.csl : 135.22 :
0x757b488c0dbf    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0dc3    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0dc7    4981c608000000          add r14, 0x8                                           
   (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x757b488c0dce    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x757b488c0dd3    7d14                    jge 0x488c0de9                < LispDefines.fibbc+42 >
0x757b488c0dd5    0f1f4000                nop [rax]                                              
 (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x757b488c0dd9    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0ddd    4983c608                add r14, 0x8                                           
0x757b488c0de1    498906                  mov [r14], rax                                         
 .. e fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0de4    e945000000              jmp 0x757b488c0e2e            < LispDefines.fibbc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0de9    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0ded    b901000000              mov ecx, 0x1                                           
 .. da ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0df2    482bc1                  sub rax, rcx                                           
0x757b488c0df5    4983c608                add r14, 0x8                                           
0x757b488c0df9    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0dfc    e8beffffff              call 0x757b488c0dbf           < LispDefines.fibbc : 0x0000757b488c0dbf >
 .. < n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0e01    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0e05    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0e0a    482bc1                  sub rax, rcx                                           
0x757b488c0e0d    4983c608                add r14, 0x8                                           
0x757b488c0e11    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x757b488c0e14    e8a6ffffff              call 0x757b488c0dbf           < LispDefines.fibbc : 0x0000757b488c0dbf >
0x757b488c0e19    498b0e                  mov rcx, [r14]                                         
0x757b488c0e1c    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0e20    4983ee10                sub r14, 0x10                                          
0x757b488c0e24    4803c1                  add rax, rcx                                           
0x757b488c0e27    4983c608                add r14, 0x8                                           
0x757b488c0e2b    498906                  mov [r14], rax                                         
0x757b488c0e2e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0e32    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c0e36    498906                  mov [r14], rax                                         
 ..          (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x757b488c0e39    c3                      ret                                                    
Word_Disassemble : word - 'fibbc' :: codeSize = 123
Word : 0x0000757b48303330 :: Compiled at : 0x0000757b488c0dbf
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 135.22 <::
 6765
 fibcc

 =============================
LispDefines.fibcc <:> variablefibcc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibcc :> 
(define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
Source code file location of fibcc : "namespaces/test/dev0.csl" : 138.83 :: we are now at : namespaces/test/dev0.csl : 139.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x488c0e3f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibcc : definition = 0x0000757b488c0e3f : disassembly at namespaces/test/dev0.csl : 139.22 :
0x757b488c0e3f    4d897e08                mov [r14+0x8], r15                                     
0x757b488c0e43    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c0e47    4981c608000000          add r14, 0x8                                           
   (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x757b488c0e4e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x757b488c0e53    7d14                    jge 0x488c0e69                < LispDefines.fibcc+42 >
0x757b488c0e55    0f1f4000                nop [rax]                                              
 (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x757b488c0e59    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c0e5d    4983c608                add r14, 0x8                                           
0x757b488c0e61    498906                  mov [r14], rax                                         
 .. e fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e64    e945000000              jmp 0x757b488c0eae            < LispDefines.fibcc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e69    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e6d    b901000000482bc149      mov rcx, 0x49c12b4800000001                              
0x757b488c0e76    83c608                  add rsi, 0x8                                           
0x757b488c0e79    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e7c    e8beffffff              call 0x757b488c0e3f           < LispDefines.fibcc : 0x0000757b488c0e3f >
 .. < n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e81    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e85    b902000000482bc149      mov rcx, 0x49c12b4800000002                              
0x757b488c0e8e    83c608                  add rsi, 0x8                                           
0x757b488c0e91    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x757b488c0e94    e8a6ffffff              call 0x757b488c0e3f           < LispDefines.fibcc : 0x0000757b488c0e3f >
0x757b488c0e99    498b0e                  mov rcx, [r14]                                         
0x757b488c0e9c    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0ea0    4983ee10                sub r14, 0x10                                          
0x757b488c0ea4    4803c1                  add rax, rcx                                           
0x757b488c0ea7    4983c608                add r14, 0x8                                           
0x757b488c0eab    498906                  mov [r14], rax                                         
0x757b488c0eae    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c0eb2    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c0eb6    498906                  mov [r14], rax                                         
 ..          (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x757b488c0eb9    c3                      ret                                                    
Word_Disassemble : word - 'fibcc' :: codeSize = 123
Word : 0x0000757b4830bc80 :: Compiled at : 0x0000757b488c0e3f
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 139.22 <::
 6765
 
after fib

 namespaces/test/dev0.csl 142.12 
ending Lisp

DataStack at : namespaces/test/dev0.csl : 142.35 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev0.csl : 148.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0ece -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x0000757b488c0ece : disassembly at namespaces/test/dev0.csl : 148.19 :
 ..                               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ece    498b06                  mov rax, [r14]                                         
0x757b488c0ed1    4983c608                add r14, 0x8                                           
0x757b488c0ed5    498906                  mov [r14], rax                                         
0x757b488c0ed8    b802000000488bc849      mov rax, 0x49c88b4800000002                              
0x757b488c0ee1    8b06                    mov rax, [rsi]                                         
0x757b488c0ee3    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ee7    483bc1                  cmp rax, rcx                                           
0x757b488c0eea    0f8d05000000            jge 0x757b488c0ef5            < C._fib2+39 >
0x757b488c0ef0    e94c000000              jmp 0x757b488c0f41            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ef5    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ef8    4983c608                add r14, 0x8                                           
0x757b488c0efc    498906                  mov [r14], rax                                         
0x757b488c0eff    498b06                  mov rax, [r14]                                         
0x757b488c0f02    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f06    48ffc8                  dec rax                                                
0x757b488c0f09    4983c608                add r14, 0x8                                           
0x757b488c0f0d    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f10    e8b9ffffff              call 0x757b488c0ece           < C._fib2 : 0x0000757b488c0ece >
 ..      : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f15    498b0e                  mov rcx, [r14]                                         
0x757b488c0f18    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0f1c    49894ef8                mov [r14-0x8], rcx                                     
0x757b488c0f20    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f23    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f27    e8a2ffffff              call 0x757b488c0ece           < C._fib2 : 0x0000757b488c0ece >
0x757b488c0f2c    498b0e                  mov rcx, [r14]                                         
0x757b488c0f2f    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0f33    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x757b488c0f37    4803c1                  add rax, rcx                                           
0x757b488c0f3a    4983c608                add r14, 0x8                                           
0x757b488c0f3e    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x757b488c0f41    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x0000757b43f64b23 :: Compiled at : 0x0000757b488c0ece
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 148.19 <::

 6765 6765 6765
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :> 
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev0.csl : 168.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1042 -- code size = 172 bytes
TypeSignature : 
 -----------------------------
Word :: C.fibPTC? : definition = 0x0000757b488c1042 : disassembly at namespaces/test/dev0.csl : 168.12 :
0x757b488c1042    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1046    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c104a    4981c620000000          add r14, 0x20                                          
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =       .. 
0x757b488c1051    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn f .. 
0x757b488c1059    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 .. 
0x757b488c1061    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = .. 
0x757b488c1069    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c106d    4883f800                cmp rax, 0x0                                           
0x757b488c1071    746b                    jz 0x488c10de                 < C.fibPTC?+156 >
0x757b488c1073    0f1f4000                nop [rax]                                              
0x757b488c1077    498d4710                lea rax, [r15+0x10]                                    
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c107b    498b4f18                mov rcx, [r15+0x18]                                    
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c107f    488908                  mov [rax], rcx                                         
0x757b488c1082    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c1086    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c108a    488908                  mov [rax], rcx                                         
0x757b488c108d    498d4708                lea rax, [r15+0x8]                                     
0x757b488c1091    4983c608                add r14, 0x8                                           
0x757b488c1095    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c1098    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c109c    498b4f18                mov rcx, [r15+0x18]                                    
0x757b488c10a0    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10a3    488bc8                  mov rcx, rax                                           
0x757b488c10a6    498b06                  mov rax, [r14]                                         
0x757b488c10a9    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10ad    488908                  mov [rax], rcx                                         
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  .. 
0x757b488c10b0    498d47f8                lea rax, [r15-0x8]                                     
0x757b488c10b4    4983c608                add r14, 0x8                                           
0x757b488c10b8    498906                  mov [r14], rax                                         
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    .. 
0x757b488c10bb    498b47f8                mov rax, [r15-0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo .. 
0x757b488c10bf    b901000000              mov ecx, 0x1                                           
0x757b488c10c4    482bc1                  sub rax, rcx                                           
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  .. 
0x757b488c10c7    488bc8                  mov rcx, rax                                           
0x757b488c10ca    498b06                  mov rax, [r14]                                         
0x757b488c10cd    4983ee08                sub r14, 0x8                                           
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    .. 
0x757b488c10d1    488908                  mov [rax], rcx                                         
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488c10d4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c10d8    4883f800                cmp rax, 0x0                                           
0x757b488c10dc    7599                    jnz 0x488c1077                < C.fibPTC?+53 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10de    498b4708                mov rax, [r15+0x8]                                     
0x757b488c10e2    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c10e6    4d8b7e08                mov r15, [r14+0x8]                                     
 .. @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10ea    498906                  mov [r14], rax                                         
 ..  @ + =      }     for     return fn @ ;  .. 
0x757b488c10ed    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC?' :: codeSize = 172
Word : 0x0000757b43f6b803 :: Compiled at : 0x0000757b488c1042
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 168.12 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
infibPTC2? ( n ){ int fn, fn1, fn2 ; for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev0.csl" : 187.9 :: we are now at : namespaces/test/dev0.csl : 198.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1218 -- code size = 114 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c1218 : disassembly at namespaces/test/dev0.csl : 198.13 :
0x757b488c1218    4d897e08                mov [r14+0x8], r15                                     
0x757b488c121c    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c1220    4981c620000000          add r14, 0x20                                          
 .. {     int fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x757b488c1227    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c122f    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..  fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c1237    49c7471801000000        mov qword [r15+0x18], 0x1                              
 ..      for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     ret .. 
0x757b488c123f    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c1243    4883f800                cmp rax, 0x0                                           
0x757b488c1247    7431                    jz 0x488c127a                 < C_Syntax.fibPTC2?+98 >
0x757b488c1249    0f1f4000                nop [rax]                                              
 ..  ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c124d    498b4718                mov rax, [r15+0x18]                                    
0x757b488c1251    49894710                mov [r15+0x10], rax                                    
 ..             fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1255    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1259    49894718                mov [r15+0x18], rax                                    
 .. fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c125d    498b4710                mov rax, [r15+0x10]                                    
 ..         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1261    498b4f18                mov rcx, [r15+0x18]                                    
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1265    4803c1                  add rax, rcx                                           
0x757b488c1268    49894708                mov [r15+0x8], rax                                     
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c126c    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1270    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c1274    4883f800                cmp rax, 0x0                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1278    75d3                    jnz 0x488c124d                < C_Syntax.fibPTC2?+53 >
 .. ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c127a    498b4708                mov rax, [r15+0x8]                                     
0x757b488c127e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c1282    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1286    498906                  mov [r14], rax                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c1289    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 114
Word : 0x0000757b43f766b3 :: Compiled at : 0x0000757b488c1218
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 198.13 <::
 6765
including namespaces/compiler/x64.csl at namespaces/test/initTest.csl : 86.41 ...

including namespaces/compiler/asmConstants.csl at namespaces/compiler/x64.csl : 92.47 ...

 =============================
Root.;; <:> csl compiled word, immediate
SourceCode for Root.;; :> 
: ;; '; find compileWord prefixable ; 
Source code file location of ;; : "namespaces/compiler/x64.csl" : 114.2 :: we are now at : namespaces/compiler/x64.csl : 114.55
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1496 -- code size = 37 bytes
 -----------------------------
Word :: Root.;; : definition = 0x0000757b488c1496 : disassembly at namespaces/compiler/x64.csl : 114.55 :
 ..                          : ;; '; find compileWord prefixable ;  .. 
0x757b488c1496    49baf0c88a487b750000    mov r10, 0x757b488ac8f0                                
0x757b488c14a0    49ffd2                  call r10                      < Interpreter.semi : 0x0000757b488ac8f0 >
 ..              : ;; '; find compileWord prefixable ;  .. 
0x757b488c14a3    49bbf013eaa65f5b0000    mov r11, 0x5b5fa6ea13f0                                
0x757b488c14ad    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c14b7    49ffd2                  call r10                      < Compiler.prefixable : 0x00005b5fa6ea13f0 >
 ..   : ;; '; find compileWord prefixable ;  .. 
0x757b488c14ba    c3                      ret                                                    
Word_Disassemble : word - ';;' :: codeSize = 37
Word : 0x0000757b43f827f7 :: Compiled at : 0x0000757b488c1496
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 114.55 <::

 =============================
C_Syntax.Calculate_Rex <:> csl compiled word
SourceCode for C_Syntax.Calculate_Rex :> 
uint8 Calculate_Rex ( uint8 reg, uint8 rm, uint8 rex_w_flag, uint8 rex_b_flag ) { uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ; if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ; return rex ; } 
Source code file location of Calculate_Rex : "namespaces/compiler/x64.csl" : 143.14 :: we are now at : namespaces/compiler/x64.csl : 150.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c157d -- code size = 250 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Calculate_Rex : definition = 0x0000757b488c157d : disassembly at namespaces/compiler/x64.csl : 150.18 :
0x757b488c157d    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1581    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c1585    4981c610000000          add r14, 0x10                                          
 .. t8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_f .. 
0x757b488c158c    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c1590    4883f800                cmp rax, 0x0                                           
0x757b488c1594    0f8411000000            jz 0x757b488c15ab             < C_Syntax.Calculate_Rex+46 >
 ..  ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_ .. 
0x757b488c159a    b808000000              mov eax, 0x8                                           
0x757b488c159f    4983c608                add r14, 0x8                                           
0x757b488c15a3    498906                  mov [r14], rax                                         
0x757b488c15a6    e90e000000              jmp 0x757b488c15b9            < C_Syntax.Calculate_Rex+60 >
 ..      uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag .. 
0x757b488c15ab    48c7c000000000          mov rax, 0x0                                           
0x757b488c15b2    4983c608                add r14, 0x8                                           
0x757b488c15b6    498906                  mov [r14], rax                                         
 ..  rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |=  .. 
0x757b488c15b9    49837fe007              cmp qword [r15-0x20], 0x7                              
0x757b488c15be    0f8e11000000            jle 0x757b488c15d5            < C_Syntax.Calculate_Rex+88 >
 .. ex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     r .. 
0x757b488c15c4    b804000000              mov eax, 0x4                                           
0x757b488c15c9    4983c608                add r14, 0x8                                           
0x757b488c15cd    498906                  mov [r14], rax                                         
0x757b488c15d0    e90e000000              jmp 0x757b488c15e3            < C_Syntax.Calculate_Rex+102 >
 .. _flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     retur .. 
0x757b488c15d5    48c7c000000000          mov rax, 0x0                                           
0x757b488c15dc    4983c608                add r14, 0x8                                           
0x757b488c15e0    498906                  mov [r14], rax                                         
 .. lag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return  .. 
0x757b488c15e3    498b0e                  mov rcx, [r14]                                         
0x757b488c15e6    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c15ea    4983ee10                sub r14, 0x10                                          
 ..  uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) r .. 
0x757b488c15ee    480bc1                  or rax, rcx                                            
0x757b488c15f1    4983c608                add r14, 0x8                                           
0x757b488c15f5    498906                  mov [r14], rax                                         
 .. : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c15f8    49837fe807              cmp qword [r15-0x18], 0x7                              
0x757b488c15fd    0f8e11000000            jle 0x757b488c1614            < C_Syntax.Calculate_Rex+151 >
 ..  reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1603    b801000000              mov eax, 0x1                                           
0x757b488c1608    4983c608                add r14, 0x8                                           
0x757b488c160c    498906                  mov [r14], rax                                         
0x757b488c160f    e90e000000              jmp 0x757b488c1622            < C_Syntax.Calculate_Rex+165 >
 ..  > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1614    48c7c000000000          mov rax, 0x0                                           
0x757b488c161b    4983c608                add r14, 0x8                                           
0x757b488c161f    498906                  mov [r14], rax                                         
 ..  7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1622    498b0e                  mov rcx, [r14]                                         
0x757b488c1625    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c1629    4983ee10                sub r14, 0x10                                          
 .. g ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return re .. 
0x757b488c162d    480bc1                  or rax, rcx                                            
 .. _flag, uint8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex  .. 
0x757b488c1630    49894708                mov [r15+0x8], rax                                     
 .. | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1634    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1638    4883f800                cmp rax, 0x0                                           
0x757b488c163c    0f851c000000            jnz 0x757b488c165e            < C_Syntax.Calculate_Rex+225 >
 .. m > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1642    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c1646    4883f800                cmp rax, 0x0                                           
0x757b488c164a    0f850e000000            jnz 0x757b488c165e            < C_Syntax.Calculate_Rex+225 >
 .. 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1650    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c1654    4883f800                cmp rax, 0x0                                           
0x757b488c1658    0f8405000000            jz 0x757b488c1663             < C_Syntax.Calculate_Rex+230 >
 ..  || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c165e    49834f0840              or qword [r15+0x8], 0x40                               
 .. lag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1663    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1667    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c166b    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c166f    4983ee18                sub r14, 0x18                                          
 .. rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1673    498906                  mov [r14], rax                                         
 .. flag ) rex |= 0x40 ;     return rex ; }  .. 
0x757b488c1676    c3                      ret                                                    
Word_Disassemble : word - 'Calculate_Rex' :: codeSize = 250
Word : 0x0000757b43f8b047 :: Compiled at : 0x0000757b488c157d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 150.18 <::

 =============================
C_Syntax.CalculateModRegardingDisplacement <:> csl compiled word
SourceCode for C_Syntax.CalculateModRegardingDisplacement :> 
uint8 CalculateModRegardingDisplacement ( uint8 mod, int64 disp ) { if ( mod != REG ) { if ( disp == 0 ) mod = 0 ; else if ( disp <= 0x7f ) mod = 1 ; else mod = 2 ; } return mod ; } 
Source code file location of CalculateModRegardingDisplacement : "namespaces/compiler/x64.csl" : 163.34 :: we are now at : namespaces/compiler/x64.csl : 177.38
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c172d -- code size = 102 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CalculateModRegardingDisplacement : definition = 0x0000757b488c172d : disassembly at namespaces/compiler/x64.csl : 177.38 :
0x757b488c172d    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1731    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c1735    4981c608000000          add r14, 0x8                                           
 .. mod, int64 disp ) {              if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f )  .. 
0x757b488c173c    49837ff003              cmp qword [r15-0x10], 0x3                              
0x757b488c1741    743c                    jz 0x488c177f                 < C_Syntax.CalculateModRegardingDisplacement+82 >
0x757b488c1743    0f1f4000                nop [rax]                                              
 ..  if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;  .. 
0x757b488c1747    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488c174c    7511                    jnz 0x488c175f                < C_Syntax.CalculateModRegardingDisplacement+50 >
0x757b488c174e    0f1f4000                nop [rax]                                              
 ..      if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c1752    49c747f000000000        mov qword [r15-0x10], 0x0                              
 ..  if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c175a    e920000000              jmp 0x757b488c177f            < C_Syntax.CalculateModRegardingDisplacement+82 >
 ..           mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c175f    49837ff87f              cmp qword [r15-0x8], 0x7f                              
0x757b488c1764    7f11                    jg 0x488c1777                 < C_Syntax.CalculateModRegardingDisplacement+74 >
0x757b488c1766    0f1f4000                nop [rax]                                              
 ..          else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c176a    49c747f001000000        mov qword [r15-0x10], 0x1                              
 ..      else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c1772    e908000000              jmp 0x757b488c177f            < C_Syntax.CalculateModRegardingDisplacement+82 >
 .. p <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c1777    49c747f002000000        mov qword [r15-0x10], 0x2                              
 .. = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x757b488c177f    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c1783    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c1787    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c178b    4983ee08                sub r14, 0x8                                           
 ..       else mod = 2 ;     }     return mod ; }  .. 
0x757b488c178f    498906                  mov [r14], rax                                         
 .. else mod = 2 ;     }     return mod ; }  .. 
0x757b488c1792    c3                      ret                                                    
Word_Disassemble : word - 'CalculateModRegardingDisplacement' :: codeSize = 102
Word : 0x0000757b43f95d47 :: Compiled at : 0x0000757b488c172d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 177.38 <::

 =============================
C_Syntax.CalculateModRmByte <:> csl compiled word
SourceCode for C_Syntax.CalculateModRmByte :> 
uint8 CalculateModRmByte ( uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp ) { uint8 modRm ; mod = CalculateModRegardingDisplacement ( mod, disp ) ; if ( ( mod < 3 ) && ( rm == 4 ) ) { alertColors ; ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ; ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ; defaultColors ; pause ; quit ; } if ( sib ) { rm = 4 ; reg = 0 ; } modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ; return modRm ; } 
Source code file location of CalculateModRmByte : "namespaces/compiler/x64.csl" : 222.19 :: we are now at : namespaces/compiler/x64.csl : 246.23
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1a08 -- code size = 427 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CalculateModRmByte : definition = 0x0000757b488c1a08 : disassembly at namespaces/compiler/x64.csl : 246.23 :
0x757b488c1a08    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1a0c    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c1a10    4981c610000000          add r14, 0x10                                          
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps  .. 
0x757b488c1a17    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c1a1b    4983c608                add r14, 0x8                                           
0x757b488c1a1f    498906                  mov [r14], rax                                         
 .. culateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n .. 
0x757b488c1a22    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c1a26    4983c608                add r14, 0x8                                           
0x757b488c1a2a    498906                  mov [r14], rax                                         
 ..  disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {      .. 
0x757b488c1a2d    49ba2d178c487b750000    mov r10, 0x757b488c172d                                
0x757b488c1a37    49ffd2                  call r10                      < C_Syntax.CalculateModRegardingDisplacement : 0x0000757b488c172d >
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {    .. 
0x757b488c1a3a    498d47d8                lea rax, [r15-0x28]                                    
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps  .. 
0x757b488c1a3e    488bc8                  mov rcx, rax                                           
0x757b488c1a41    498b06                  mov rax, [r14]                                         
0x757b488c1a44    4983ee08                sub r14, 0x8                                           
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {    .. 
0x757b488c1a48    488901                  mov [rcx], rax                                         
 .. splacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte .. 
0x757b488c1a4b    49837fd803              cmp qword [r15-0x28], 0x3                              
0x757b488c1a50    0f8dc3000000            jge 0x757b488c1b19            < C_Syntax.CalculateModRmByte+273 >
 .. d, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE .. 
0x757b488c1a56    49837fe804              cmp qword [r15-0x18], 0x4                              
0x757b488c1a5b    0f85b8000000            jnz 0x757b488c1b19            < C_Syntax.CalculateModRmByte+273 >
 ..  ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE .. 
0x757b488c1a61    498bc6                  mov rax, r14                                           
0x757b488c1a64    4983ee08                sub r14, 0x8                                           
0x757b488c1a68    48833800                cmp qword [rax], 0x0                                   
0x757b488c1a6c    7410                    jz 0x488c1a7e                 < C_Syntax.CalculateModRmByte+118 >
0x757b488c1a6e    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488c1a73    7409                    jz 0x488c1a7e                 < C_Syntax.CalculateModRmByte+118 >
0x757b488c1a75    49c70601000000          mov qword [r14], 0x1                                   
0x757b488c1a7c    eb07                    jmp 0x757b488c1a85            < C_Syntax.CalculateModRmByte+125 >
0x757b488c1a7e    49c70600000000          mov qword [r14], 0x0                                   
0x757b488c1a85    0f848e000000            jz 0x757b488c1b19             < C_Syntax.CalculateModRmByte+273 >
 .. < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps (  .. 
0x757b488c1a8b    49bb70d7e7a65f5b0000    mov r11, 0x5b5fa6e7d770                                
0x757b488c1a95    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1a9f    49ffd2                  call r10                      < Colors.alertColors : 0x00005b5fa6e7d770 >
 ..     alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666. .. 
0x757b488c1aa2    48b8165613487b750000    mov rax, 0x757b48135616                                
0x757b488c1aac    4983c608                add r14, 0x8                                           
0x757b488c1ab0    498906                  mov [r14], rax                                         
0x757b488c1ab3    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c1abd    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;    .. 
0x757b488c1ac0    48b8a05613487b750000    mov rax, 0x757b481356a0                                
0x757b488c1aca    4983c608                add r14, 0x8                                           
0x757b488c1ace    498906                  mov [r14], rax                                         
0x757b488c1ad1    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c1adb    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. 253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;                quit ;     }     if ( sib )     {         rm = 4 ;   .. 
0x757b488c1ade    49bb60d8e7a65f5b0000    mov r11, 0x5b5fa6e7d860                                
0x757b488c1ae8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1af2    49ffd2                  call r10                      < Colors.defaultColors : 0x00005b5fa6e7d860 >
0x757b488c1af5    49ba43e78a487b750000    mov r10, 0x757b488ae743                                
0x757b488c1aff    49ffd2                  call r10                      < User.pause : 0x0000757b488ae743 >
0x757b488c1b02    49bbe0ebe8a65f5b0000    mov r11, 0x5b5fa6e8ebe0                                
0x757b488c1b0c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1b16    49ffd2                  call r10                      < System.quit : 0x00005b5fa6e8ebe0 >
 ..                 quit ;     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) .. 
0x757b488c1b19    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c1b1d    4883f800                cmp rax, 0x0                                           
0x757b488c1b21    7414                    jz 0x488c1b37                 < C_Syntax.CalculateModRmByte+303 >
0x757b488c1b23    0f1f4000                nop [rax]                                              
 ..     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0 .. 
0x757b488c1b27    49c747e804000000        mov qword [r15-0x18], 0x4                              
 .. b )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return  .. 
0x757b488c1b2f    49c747e000000000        mov qword [r15-0x20], 0x0                              
 ..         reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b37    498b47d8                mov rax, [r15-0x28]                                    
 ..  reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b3b    b906000000              mov ecx, 0x6                                           
 ..     reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b40    48d3e0                  shl rax, cl                                            
0x757b488c1b43    4983c608                add r14, 0x8                                           
0x757b488c1b47    498906                  mov [r14], rax                                         
 ..      }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b4a    498b47e0                mov rax, [r15-0x20]                                    
 .. modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b4e    b907000000              mov ecx, 0x7                                           
 ..   modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b53    4823c1                  and rax, rcx                                           
 ..  mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b56    b903000000              mov ecx, 0x3                                           
 .. = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b5b    48d3e0                  shl rax, cl                                            
0x757b488c1b5e    4983c608                add r14, 0x8                                           
0x757b488c1b62    498906                  mov [r14], rax                                         
 .. od << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b65    498b0e                  mov rcx, [r14]                                         
0x757b488c1b68    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c1b6c    4983ee10                sub r14, 0x10                                          
 ..  = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b70    4803c1                  add rax, rcx                                           
0x757b488c1b73    4983c608                add r14, 0x8                                           
0x757b488c1b77    498906                  mov [r14], rax                                         
 .. 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b7a    498b47e8                mov rax, [r15-0x18]                                    
 .. reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b7e    b907000000              mov ecx, 0x7                                           
 .. ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b83    4823c1                  and rax, rcx                                           
0x757b488c1b86    4983c608                add r14, 0x8                                           
0x757b488c1b8a    498906                  mov [r14], rax                                         
 .. Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b8d    498b0e                  mov rcx, [r14]                                         
0x757b488c1b90    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c1b94    4983ee10                sub r14, 0x10                                          
 ..  << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b98    4803c1                  add rax, rcx                                           
 ..   rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b9b    49894708                mov [r15+0x8], rax                                     
 .. 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1b9f    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1ba3    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c1ba7    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c1bab    4983ee20                sub r14, 0x20                                          
 .. < 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1baf    498906                  mov [r14], rax                                         
 .. ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x757b488c1bb2    c3                      ret                                                    
Word_Disassemble : word - 'CalculateModRmByte' :: codeSize = 427
Word : 0x0000757b43fa91b7 :: Compiled at : 0x0000757b488c1a08
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 246.23 <::

 =============================
C_Syntax._Compile_Write_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax._Compile_Write_Instruction_X64 :> 
void _Compile_Write_Instruction_X64 ( uint8 rex, uint8 opCode0, uint8 opCode1, uint8 modRm, int16 controlFlags, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { int64 nbytes, _here ; if ( DBI ) { _here = Here ; } if ( rex ) _Compile_Int8 ( rex ) ; if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ; if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ; if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ; if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ; if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ; if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ; if ( DBI ) { nbytes = Here - _here ; if ( nbytes ) { location ( ) ; alertColors ; oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; udis1x ( _here ) ; defaultColors ; } else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; } } 
Source code file location of _Compile_Write_Instruction_X64 : "namespaces/compiler/x64.csl" : 249.31 :: we are now at : namespaces/compiler/x64.csl : 280.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1bb8 -- code size = 848 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_Write_Instruction_X64 : definition = 0x0000757b488c1bb8 : disassembly at namespaces/compiler/x64.csl : 280.35 :
0x757b488c1bb8    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1bbc    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c1bc0    4981c618000000          add r14, 0x18                                          
 .. ) {    int64 nbytes, _here ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 )  .. 
0x757b488c1bc7    48b8e710f8437b750000    mov rax, 0x757b43f810e7                                
0x757b488c1bd1    488b00                  mov rax, [rax]                                         
0x757b488c1bd4    4883f800                cmp rax, 0x0                                           
0x757b488c1bd8    742c                    jz 0x488c1c06                 < C_Syntax._Compile_Write_Instruction_X64+78 >
0x757b488c1bda    0f1f4000                nop [rax]                                              
 ..      if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opC .. 
0x757b488c1bde    49bb5005eaa65f5b0000    mov r11, 0x5b5fa6ea0550                                
0x757b488c1be8    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1bf2    49ffd2                  call r10                      < Compiler.Here : 0x00005b5fa6ea0550 >
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) o .. 
0x757b488c1bf5    498d4710                lea rax, [r15+0x10]                                    
0x757b488c1bf9    488bc8                  mov rcx, rax                                           
0x757b488c1bfc    498b06                  mov rax, [r14]                                         
0x757b488c1bff    4983ee08                sub r14, 0x8                                           
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) o .. 
0x757b488c1c03    488901                  mov [rcx], rax                                         
 ..         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCo .. 
0x757b488c1c06    498b47b0                mov rax, [r15-0x50]                                    
0x757b488c1c0a    4883f800                cmp rax, 0x0                                           
0x757b488c1c0e    7426                    jz 0x488c1c36                 < C_Syntax._Compile_Write_Instruction_X64+126 >
0x757b488c1c10    0f1f4000                nop [rax]                                              
 ..      }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 (  .. 
0x757b488c1c14    498b47b0                mov rax, [r15-0x50]                                    
0x757b488c1c18    4983c608                add r14, 0x8                                           
0x757b488c1c1c    498906                  mov [r14], rax                                         
 ..   _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 )  .. 
0x757b488c1c1f    49bb7006eaa65f5b0000    mov r11, 0x5b5fa6ea0670                                
0x757b488c1c29    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1c33    49ffd2                  call r10                      < Compiling.compileByte : 0x00005b5fa6ea0670 >
 .. ex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1  .. 
0x757b488c1c36    498b47b8                mov rax, [r15-0x48]                                    
0x757b488c1c3a    4883f800                cmp rax, 0x0                                           
0x757b488c1c3e    7426                    jz 0x488c1c66                 < C_Syntax._Compile_Write_Instruction_X64+174 >
0x757b488c1c40    0f1f4000                nop [rax]                                              
 ..  ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.&  .. 
0x757b488c1c44    498b47b8                mov rax, [r15-0x48]                                    
0x757b488c1c48    4983c608                add r14, 0x8                                           
0x757b488c1c4c    498906                  mov [r14], rax                                         
 .. ile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if .. 
0x757b488c1c4f    49bb7006eaa65f5b0000    mov r11, 0x5b5fa6ea0670                                
0x757b488c1c59    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1c63    49ffd2                  call r10                      < Compiling.compileByte : 0x00005b5fa6ea0670 >
 .. _Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_ .. 
0x757b488c1c66    498b47c0                mov rax, [r15-0x40]                                    
0x757b488c1c6a    4883f800                cmp rax, 0x0                                           
0x757b488c1c6e    7426                    jz 0x488c1c96                 < C_Syntax._Compile_Write_Instruction_X64+222 >
0x757b488c1c70    0f1f4000                nop [rax]                                              
 ..  ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && (  .. 
0x757b488c1c74    498b47c0                mov rax, [r15-0x40]                                    
0x757b488c1c78    4983c608                add r14, 0x8                                           
0x757b488c1c7c    498906                  mov [r14], rax                                         
 .. byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( mod .. 
0x757b488c1c7f    49bb7006eaa65f5b0000    mov r11, 0x5b5fa6ea0670                                
0x757b488c1c89    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1c93    49ffd2                  call r10                      < Compiling.compileByte : 0x00005b5fa6ea0670 >
 .. nt8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB .. 
0x757b488c1c96    498b47d0                mov rax, [r15-0x30]                                    
 .. e1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 .. 
0x757b488c1c9a    b902000000              mov ecx, 0x2                                           
 .. ode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_In .. 
0x757b488c1c9f    4823c1                  and rax, rcx                                           
0x757b488c1ca2    4883f800                cmp rax, 0x0                                           
 .. ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compi .. 
0x757b488c1ca6    7426                    jz 0x488c1cce                 < C_Syntax._Compile_Write_Instruction_X64+278 >
0x757b488c1ca8    0f1f4000                nop [rax]                                              
 .. gs Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp ||  .. 
0x757b488c1cac    498b47c8                mov rax, [r15-0x38]                                    
0x757b488c1cb0    4983c608                add r14, 0x8                                           
0x757b488c1cb4    498906                  mov [r14], rax                                         
 .. f ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;   .. 
0x757b488c1cb7    49bb7006eaa65f5b0000    mov r11, 0x5b5fa6ea0670                                
0x757b488c1cc1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1ccb    49ffd2                  call r10                      < Compiling.compileByte : 0x00005b5fa6ea0670 >
 ..  ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits .. 
0x757b488c1cce    498b47d8                mov rax, [r15-0x28]                                    
 ..  ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFla .. 
0x757b488c1cd2    4883f800                cmp rax, 0x0                                           
0x757b488c1cd6    7463                    jz 0x488c1d3b                 < C_Syntax._Compile_Write_Instruction_X64+387 >
0x757b488c1cd8    0f1f4000                nop [rax]                                              
 .. le_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B .. 
0x757b488c1cdc    498b47d0                mov rax, [r15-0x30]                                    
 ..     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDis .. 
0x757b488c1ce0    b904000000              mov ecx, 0x4                                           
 .. ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmD .. 
0x757b488c1ce5    4823c1                  and rax, rcx                                           
0x757b488c1ce8    4983c608                add r14, 0x8                                           
 .. Rm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile .. 
0x757b488c1cec    498906                  mov [r14], rax                                         
 .. Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& D .. 
0x757b488c1cef    498bc6                  mov rax, r14                                           
0x757b488c1cf2    4983ee08                sub r14, 0x8                                           
0x757b488c1cf6    48833800                cmp qword [rax], 0x0                                   
0x757b488c1cfa    7410                    jz 0x488c1d0c                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x757b488c1cfc    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488c1d01    7409                    jz 0x488c1d0c                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x757b488c1d03    49c70601000000          mov qword [r14], 0x1                                   
 .. & MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( contro .. 
0x757b488c1d0a    eb07                    jmp 0x757b488c1d13            < C_Syntax._Compile_Write_Instruction_X64+347 >
0x757b488c1d0c    49c70600000000          mov qword [r14], 0x0                                   
0x757b488c1d13    7426                    jz 0x488c1d3b                 < C_Syntax._Compile_Write_Instruction_X64+387 >
0x757b488c1d15    0f1f4000                nop [rax]                                              
 .. lags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0  .. 
0x757b488c1d19    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c1d1d    4983c608                add r14, 0x8                                           
0x757b488c1d21    498906                  mov [r14], rax                                         
 .. ib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( di .. 
0x757b488c1d24    49bb7006eaa65f5b0000    mov r11, 0x5b5fa6ea0670                                
0x757b488c1d2e    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1d38    49ffd2                  call r10                      < Compiling.compileByte : 0x00005b5fa6ea0670 >
 ..  ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm  .. 
0x757b488c1d3b    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c1d3f    4883f800                cmp rax, 0x0                                           
0x757b488c1d43    0f8513000000            jnz 0x757b488c1d5c            < C_Syntax._Compile_Write_Instruction_X64+420 >
 .. ile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( contr .. 
0x757b488c1d49    498b47d0                mov rax, [r15-0x30]                                    
 ..    if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B .. 
0x757b488c1d4d    b908000000              mov ecx, 0x8                                           
 ..      if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM .. 
0x757b488c1d52    4823c1                  and rax, rcx                                           
0x757b488c1d55    4983c608                add r14, 0x8                                           
 .. b ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits. .. 
0x757b488c1d59    498906                  mov [r14], rax                                         
 .. s.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, i .. 
0x757b488c1d5c    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c1d60    4983c608                add r14, 0x8                                           
0x757b488c1d64    498906                  mov [r14], rax                                         
 .. SP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize .. 
0x757b488c1d67    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c1d6b    4983c608                add r14, 0x8                                           
0x757b488c1d6f    498906                  mov [r14], rax                                         
 .. Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( contro .. 
0x757b488c1d72    48c7c000000000          mov rax, 0x0                                           
0x757b488c1d79    4983c608                add r14, 0x8                                           
0x757b488c1d7d    498906                  mov [r14], rax                                         
 .. p || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compi .. 
0x757b488c1d80    49ba28188c487b750000    mov r10, 0x757b488c1828                                
0x757b488c1d8a    49ffd2                  call r10                      < C_Syntax._Compile_ImmDispData : 0x0000757b488c1828 >
 .. Data ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& I .. 
0x757b488c1d8d    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c1d91    4883f800                cmp rax, 0x0                                           
0x757b488c1d95    0f8513000000            jnz 0x757b488c1dae            < C_Syntax._Compile_Write_Instruction_X64+502 >
 .. sp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) )  .. 
0x757b488c1d9b    498b47d0                mov rax, [r15-0x30]                                    
 ..     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     .. 
0x757b488c1d9f    b910000000              mov ecx, 0x10                                          
 .. ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )   .. 
0x757b488c1da4    4823c1                  and rax, rcx                                           
0x757b488c1da7    4983c608                add r14, 0x8                                           
 ..  0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DB .. 
0x757b488c1dab    498906                  mov [r14], rax                                         
 .. ts.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here  .. 
0x757b488c1dae    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c1db2    4983c608                add r14, 0x8                                           
0x757b488c1db6    498906                  mov [r14], rax                                         
 .. IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;     .. 
0x757b488c1db9    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c1dbd    4983c608                add r14, 0x8                                           
0x757b488c1dc1    498906                  mov [r14], rax                                         
 .. Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( n .. 
0x757b488c1dc4    498b47d0                mov rax, [r15-0x30]                                    
 .. ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {    .. 
0x757b488c1dc8    b910000000              mov ecx, 0x10                                          
 .. a ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {  .. 
0x757b488c1dcd    4823c1                  and rax, rcx                                           
0x757b488c1dd0    4983c608                add r14, 0x8                                           
0x757b488c1dd4    498906                  mov [r14], rax                                         
 .. mm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         .. 
0x757b488c1dd7    49ba28188c487b750000    mov r10, 0x757b488c1828                                
0x757b488c1de1    49ffd2                  call r10                      < C_Syntax._Compile_ImmDispData : 0x0000757b488c1828 >
 .. trolFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location (  .. 
0x757b488c1de4    48b8e710f8437b750000    mov rax, 0x757b43f810e7                                
0x757b488c1dee    488b00                  mov rax, [rax]                                         
0x757b488c1df1    4883f800                cmp rax, 0x0                                           
0x757b488c1df5    0f8400010000            jz 0x757b488c1efb             < C_Syntax._Compile_Write_Instruction_X64+835 >
 ..     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ; .. 
0x757b488c1dfb    49bb5005eaa65f5b0000    mov r11, 0x5b5fa6ea0550                                
0x757b488c1e05    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1e0f    49ffd2                  call r10                      < Compiler.Here : 0x00005b5fa6ea0550 >
0x757b488c1e12    498b4710                mov rax, [r15+0x10]                                    
 .. ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;        .. 
0x757b488c1e16    488bc8                  mov rcx, rax                                           
0x757b488c1e19    498b06                  mov rax, [r14]                                         
0x757b488c1e1c    4983ee08                sub r14, 0x8                                           
 .. f ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;      .. 
0x757b488c1e20    482bc1                  sub rax, rcx                                           
0x757b488c1e23    49894708                mov [r15+0x8], rax                                     
 ..  nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;             oPrintf ( "\n_C .. 
0x757b488c1e27    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1e2b    4883f800                cmp rax, 0x0                                           
0x757b488c1e2f    0f8494000000            jz 0x757b488c1ec9             < C_Syntax._Compile_Write_Instruction_X64+785 >
0x757b488c1e35    49baddce8a487b750000    mov r10, 0x757b488acedd                                
0x757b488c1e3f    49ffd2                  call r10                      < System.location : 0x0000757b488acedd >
 ..            location ( ) ;             alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _her .. 
0x757b488c1e42    49bb70d7e7a65f5b0000    mov r11, 0x5b5fa6e7d770                                
0x757b488c1e4c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1e56    49ffd2                  call r10                      < Colors.alertColors : 0x00005b5fa6e7d770 >
 ..   alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _ .. 
0x757b488c1e59    48b8d175d6477b750000    mov rax, 0x757b47d675d1                                
0x757b488c1e63    488bf8                  mov rdi, rax                                           
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else .. 
0x757b488c1e66    498b4710                mov rax, [r15+0x10]                                    
0x757b488c1e6a    488bf0                  mov rsi, rax                                           
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrint .. 
0x757b488c1e6d    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1e71    488bd0                  mov rdx, rax                                           
0x757b488c1e74    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c1e7e    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1e88    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
 .. here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_In .. 
0x757b488c1e8b    498b4710                mov rax, [r15+0x10]                                    
0x757b488c1e8f    4983c608                add r14, 0x8                                           
0x757b488c1e93    498906                  mov [r14], rax                                         
0x757b488c1e96    49bbf094e8a65f5b0000    mov r11, 0x5b5fa6e894f0                                
0x757b488c1ea0    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1eaa    49ffd2                  call r10                      < Debug.udis1x : 0x00005b5fa6e894f0 >
 ..        udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx :  .. 
0x757b488c1ead    49bb60d8e7a65f5b0000    mov r11, 0x5b5fa6e7d860                                
0x757b488c1eb7    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1ec1    49ffd2                  call r10                      < Colors.defaultColors : 0x00005b5fa6e7d860 >
 .. lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x757b488c1ec4    e932000000              jmp 0x757b488c1efb            < C_Syntax._Compile_Write_Instruction_X64+835 >
 .. rs ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x757b488c1ec9    48b80876d6477b750000    mov rax, 0x757b47d67608                                
0x757b488c1ed3    488bf8                  mov rdi, rax                                           
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x757b488c1ed6    498b4710                mov rax, [r15+0x10]                                    
0x757b488c1eda    488bf0                  mov rsi, rax                                           
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x757b488c1edd    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1ee1    488bd0                  mov rdx, rax                                           
 .. efaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;      .. 
0x757b488c1ee4    49bbe040e5a65f5b0000    mov r11, 0x5b5fa6e540e0                                
0x757b488c1eee    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c1ef8    49ffd2                  call r10                      < C.oPrintf : 0x00005b5fa6e540e0 >
0x757b488c1efb    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c1eff    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c1f03    4983ee50                sub r14, 0x50                                          
 .. bytes : ...", _here, nbytes ) ;     } }  .. 
0x757b488c1f07    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Write_Instruction_X64' :: codeSize = 848
Word : 0x0000757b43fb2857 :: Compiled at : 0x0000757b488c1bb8
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 280.35 <::

 =============================
C_Syntax.Compile_CalculateWrite_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax.Compile_CalculateWrite_Instruction_X64 :> 
void Compile_CalculateWrite_Instruction_X64 ( uint8 opCode0, uint8 opCode1, uint8 mod, uint8 reg, uint8 rm, uint16 controlFlags, uint8 sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize ) { uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ; uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ; _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; } 
Source code file location of Compile_CalculateWrite_Instruction_X64 : "namespaces/compiler/x64.csl" : 319.39 :: we are now at : namespaces/compiler/x64.csl : 327.43
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1f0d -- code size = 373 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_CalculateWrite_Instruction_X64 : definition = 0x0000757b488c1f0d : disassembly at namespaces/compiler/x64.csl : 327.43 :
0x757b488c1f0d    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1f11    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c1f15    4981c618000000          add r14, 0x18                                          
 .. e ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     u .. 
0x757b488c1f1c    498b47c0                mov rax, [r15-0x40]                                    
0x757b488c1f20    4983c608                add r14, 0x8                                           
0x757b488c1f24    498906                  mov [r14], rax                                         
 ..      uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8  .. 
0x757b488c1f27    498b47c8                mov rax, [r15-0x38]                                    
0x757b488c1f2b    4983c608                add r14, 0x8                                           
0x757b488c1f2f    498906                  mov [r14], rax                                         
 .. int8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm  .. 
0x757b488c1f32    49837ff808              cmp qword [r15-0x8], 0x8                               
0x757b488c1f37    0f94c0                  setz al                                                
0x757b488c1f3a    480fb6c0                movzx rax, al                                          
0x757b488c1f3e    4983c608                add r14, 0x8                                           
0x757b488c1f42    498906                  mov [r14], rax                                         
 .. _Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte .. 
0x757b488c1f45    498b47d0                mov rax, [r15-0x30]                                    
 .. mSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib .. 
0x757b488c1f49    b920000000              mov ecx, 0x20                                          
 .. immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, s .. 
0x757b488c1f4e    4823c1                  and rax, rcx                                           
0x757b488c1f51    4983c608                add r14, 0x8                                           
0x757b488c1f55    498906                  mov [r14], rax                                         
 .. == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp .. 
0x757b488c1f58    498b0e                  mov rcx, [r14]                                         
0x757b488c1f5b    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c1f5f    4983ee10                sub r14, 0x10                                          
 .. ulate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModR .. 
0x757b488c1f63    480bc1                  or rax, rcx                                            
0x757b488c1f66    0f95c0                  setnz al                                               
0x757b488c1f69    480fb6c0                movzx rax, al                                          
0x757b488c1f6d    4983c608                add r14, 0x8                                           
0x757b488c1f71    498906                  mov [r14], rax                                         
 .. ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;  .. 
0x757b488c1f74    498b47d0                mov rax, [r15-0x30]                                    
 .. Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_I .. 
0x757b488c1f78    b901000000              mov ecx, 0x1                                           
 .. s Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write .. 
0x757b488c1f7d    4823c1                  and rax, rcx                                           
0x757b488c1f80    4983c608                add r14, 0x8                                           
0x757b488c1f84    498906                  mov [r14], rax                                         
 .. mm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& R .. 
0x757b488c1f87    49ba7d158c487b750000    mov r10, 0x757b488c157d                                
0x757b488c1f91    49ffd2                  call r10                      < C_Syntax.Calculate_Rex : 0x0000757b488c157d >
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& .. 
0x757b488c1f94    498d4708                lea rax, [r15+0x8]                                     
 .. nt64 imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bi .. 
0x757b488c1f98    488bc8                  mov rcx, rax                                           
0x757b488c1f9b    498b06                  mov rax, [r14]                                         
0x757b488c1f9e    4983ee08                sub r14, 0x8                                           
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& .. 
0x757b488c1fa2    488901                  mov [rcx], rax                                         
 ..    uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, cont .. 
0x757b488c1fa5    498b47b8                mov rax, [r15-0x48]                                    
0x757b488c1fa9    4983c608                add r14, 0x8                                           
0x757b488c1fad    498906                  mov [r14], rax                                         
 .. nt8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFl .. 
0x757b488c1fb0    498b47c0                mov rax, [r15-0x40]                                    
0x757b488c1fb4    4983c608                add r14, 0x8                                           
0x757b488c1fb8    498906                  mov [r14], rax                                         
 .. odRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags,  .. 
0x757b488c1fbb    498b47c8                mov rax, [r15-0x38]                                    
0x757b488c1fbf    4983c608                add r14, 0x8                                           
0x757b488c1fc3    498906                  mov [r14], rax                                         
 ..  = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, .. 
0x757b488c1fc6    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c1fca    4983c608                add r14, 0x8                                           
0x757b488c1fce    498906                  mov [r14], rax                                         
 .. lculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp .. 
0x757b488c1fd1    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c1fd5    4983c608                add r14, 0x8                                           
0x757b488c1fd9    498906                  mov [r14], rax                                         
 ..  Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, .. 
0x757b488c1fdc    49ba081a8c487b750000    mov r10, 0x757b488c1a08                                
0x757b488c1fe6    49ffd2                  call r10                      < C_Syntax.CalculateModRmByte : 0x0000757b488c1a08 >
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode .. 
0x757b488c1fe9    498d4710                lea rax, [r15+0x10]                                    
 .. rolFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex,  .. 
0x757b488c1fed    488bc8                  mov rcx, rax                                           
0x757b488c1ff0    498b06                  mov rax, [r14]                                         
0x757b488c1ff3    4983ee08                sub r14, 0x8                                           
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode .. 
0x757b488c1ff7    488901                  mov [rcx], rax                                         
 ..      _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c1ffa    498b4708                mov rax, [r15+0x8]                                     
0x757b488c1ffe    4983c608                add r14, 0x8                                           
0x757b488c2002    498906                  mov [r14], rax                                         
 .. _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2005    498b47a8                mov rax, [r15-0x58]                                    
0x757b488c2009    4983c608                add r14, 0x8                                           
0x757b488c200d    498906                  mov [r14], rax                                         
 .. Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2010    498b47b0                mov rax, [r15-0x50]                                    
0x757b488c2014    4983c608                add r14, 0x8                                           
0x757b488c2018    498906                  mov [r14], rax                                         
 .. truction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c201b    498b4710                mov rax, [r15+0x10]                                    
0x757b488c201f    4983c608                add r14, 0x8                                           
0x757b488c2023    498906                  mov [r14], rax                                         
 .. n_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2026    498b47d0                mov rax, [r15-0x30]                                    
0x757b488c202a    4983c608                add r14, 0x8                                           
0x757b488c202e    498906                  mov [r14], rax                                         
 .. pCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2031    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c2035    4983c608                add r14, 0x8                                           
0x757b488c2039    498906                  mov [r14], rax                                         
 .. 0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c203c    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c2040    4983c608                add r14, 0x8                                           
0x757b488c2044    498906                  mov [r14], rax                                         
 .. ode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2047    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c204b    4983c608                add r14, 0x8                                           
0x757b488c204f    498906                  mov [r14], rax                                         
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2052    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c2056    4983c608                add r14, 0x8                                           
0x757b488c205a    498906                  mov [r14], rax                                         
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c205d    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c2061    4983c608                add r14, 0x8                                           
0x757b488c2065    498906                  mov [r14], rax                                         
 .. yte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, i .. 
0x757b488c2068    49bab81b8c487b750000    mov r10, 0x757b488c1bb8                                
0x757b488c2072    49ffd2                  call r10                      < C_Syntax._Compile_Write_Instruction_X64 : 0x0000757b488c1bb8 >
0x757b488c2075    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c2079    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c207d    4983ee58                sub r14, 0x58                                          
 .. sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2081    c3                      ret                                                    
Word_Disassemble : word - 'Compile_CalculateWrite_Instruction_X64' :: codeSize = 373
Word : 0x0000757b43fc16b7 :: Compiled at : 0x0000757b488c1f0d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 327.43 <::

 =============================
C_Syntax.Compile_Move <:> csl compiled word
SourceCode for C_Syntax.Compile_Move :> 
void Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { uint8 opCode0 = 0, opCode ; uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ; if ( ! operandSize ) operandSize = 8 ; if ( imm || immSize ) { reg = 0 ; controlFlags |= IMM_B ; if ( immSize >= 8 ) { controlFlags |= ( REX_W ) ; if ( imm <= 0xffffffff ) { opCode = 0xc7 ; immSize = 4 ; controlFlags |= ( MODRM_B ) ; } else { if ( direction == TO_MEM ) { alertColors ; ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ; pause ( ) ; quit ( ) ; } opCode = 0xb8 + ( rm Bits.& 7 ) ; } } else { if ( immSize == 1 ) opCode = 0xb0 + rm ; else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ; else if ( immSize == 4 ) opCode = 0xb8 | rm ; } } else { controlFlags |= ( MODRM_B ) ; opCode = 0x88 ; if ( operandSize > 1 ) opCode |= 1 ; if ( direction == TO_REG ) opCode |= 2 ; if ( operandSize == 2 ) opCode0 = 0x66 ; if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ; } Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; } 
Source code file location of Compile_Move : "namespaces/compiler/x64.csl" : 346.13 :: we are now at : namespaces/compiler/x64.csl : 396.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c2087 -- code size = 743 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_Move : definition = 0x0000757b488c2087 : disassembly at namespaces/compiler/x64.csl : 396.17 :
0x757b488c2087    4d897e08                mov [r14+0x8], r15                                     
0x757b488c208b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c208f    4981c620000000          add r14, 0x20                                          
 .. , uint8 immSize ) {     uint8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! op .. 
0x757b488c2096    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm .. 
0x757b488c209e    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c20a2    4883f800                cmp rax, 0x0                                           
0x757b488c20a6    0f8411000000            jz 0x757b488c20bd             < C_Syntax.Compile_Move+54 >
 ..  ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || imm .. 
0x757b488c20ac    b808000000              mov eax, 0x8                                           
0x757b488c20b1    4983c608                add r14, 0x8                                           
0x757b488c20b5    498906                  mov [r14], rax                                         
0x757b488c20b8    e90e000000              jmp 0x757b488c20cb            < C_Syntax.Compile_Move+68 >
 .. nt64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )    .. 
0x757b488c20bd    48c7c000000000          mov rax, 0x0                                           
0x757b488c20c4    4983c608                add r14, 0x8                                           
0x757b488c20c8    498906                  mov [r14], rax                                         
 .. trolFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {      .. 
0x757b488c20cb    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c20cf    4883f800                cmp rax, 0x0                                           
0x757b488c20d3    0f8411000000            jz 0x757b488c20ea             < C_Syntax.Compile_Move+99 >
 .. ags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         re .. 
0x757b488c20d9    b804000000              mov eax, 0x4                                           
0x757b488c20de    4983c608                add r14, 0x8                                           
0x757b488c20e2    498906                  mov [r14], rax                                         
0x757b488c20e5    e90e000000              jmp 0x757b488c20f8            < C_Syntax.Compile_Move+113 >
 .. disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;  .. 
0x757b488c20ea    48c7c000000000          mov rax, 0x0                                           
0x757b488c20f1    4983c608                add r14, 0x8                                           
0x757b488c20f5    498906                  mov [r14], rax                                         
 .. sp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;    .. 
0x757b488c20f8    498b0e                  mov rcx, [r14]                                         
0x757b488c20fb    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c20ff    4983ee10                sub r14, 0x10                                          
 ..  controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {  .. 
0x757b488c2103    480bc1                  or rax, rcx                                            
 .. int8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = .. 
0x757b488c2106    49894718                mov [r15+0x18], rax                                    
 ..  ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFla .. 
0x757b488c210a    498b47d0                mov rax, [r15-0x30]                                    
 ..  0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlF .. 
0x757b488c210e    4883f800                cmp rax, 0x0                                           
0x757b488c2112    750c                    jnz 0x488c2120                < C_Syntax.Compile_Move+153 >
0x757b488c2114    0f1f4000                nop [rax]                                              
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( .. 
0x757b488c2118    49c747d008000000        mov qword [r15-0x30], 0x8                              
 .. randSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 ) .. 
0x757b488c2120    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c2124    4883f800                cmp rax, 0x0                                           
0x757b488c2128    0f850e000000            jnz 0x757b488c213c            < C_Syntax.Compile_Move+181 >
 .. f ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, o .. 
0x757b488c212e    498b47f8                mov rax, [r15-0x8]                                     
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( .. 
0x757b488c2132    4883f800                cmp rax, 0x0                                           
0x757b488c2136    0f8444010000            jz 0x757b488c2280             < C_Syntax.Compile_Move+505 >
 ..  ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags .. 
0x757b488c213c    49c747c000000000        mov qword [r15-0x40], 0x0                              
 ..      reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             i .. 
0x757b488c2144    49834f1810              or qword [r15+0x18], 0x10                              
 ..  controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff .. 
0x757b488c2149    49837ff808              cmp qword [r15-0x8], 0x8                               
 ..  | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;     .. 
0x757b488c214e    0f8cc4000000            jl 0x757b488c2218             < C_Syntax.Compile_Move+401 >
 ..       {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;         .. 
0x757b488c2154    49834f1820              or qword [r15+0x18], 0x20                              
 .. Flags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;                 immSize = 4 ;      .. 
0x757b488c2159    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x757b488c215e    7f1e                    jg 0x488c217e                 < C_Syntax.Compile_Move+247 >
 ..  )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;    .. 
0x757b488c2160    0f1f4000                nop [rax]                                              
 .. )            {                 opCode = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }  .. 
0x757b488c2164    49c74710c7000000        mov qword [r15+0x10], 0xc7                              
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {    .. 
0x757b488c216c    49c747f804000000        mov qword [r15-0x8], 0x4                               
 .. 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {                 if ( direction == TO_MEM ) .. 
0x757b488c2174    49834f1802              or qword [r15+0x18], 0x2                               
0x757b488c2179    e995000000              jmp 0x757b488c2213            < C_Syntax.Compile_Move+396 >
 .. se             {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( .. 
0x757b488c217e    49837fb002              cmp qword [r15-0x50], 0x2                              
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {    .. 
0x757b488c2183    755d                    jnz 0x488c21e2                < C_Syntax.Compile_Move+347 >
0x757b488c2185    0f1f4000                nop [rax]                                              
0x757b488c2189    49bb70d7e7a65f5b0000    mov r11, 0x5b5fa6e7d770                                
 ..      {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( "\n Compi .. 
0x757b488c2193    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c219d    49ffd2                  call r10                      < Colors.alertColors : 0x00005b5fa6e7d770 >
 .. lertColors ;                     ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ;                     pause ( ) ;                     qu .. 
0x757b488c21a0    48b8f76413487b750000    mov rax, 0x757b481364f7                                
0x757b488c21aa    4983c608                add r14, 0x8                                           
0x757b488c21ae    498906                  mov [r14], rax                                         
0x757b488c21b1    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c21bb    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
0x757b488c21be    49ba43e78a487b750000    mov r10, 0x757b488ae743                                
0x757b488c21c8    49ffd2                  call r10                      < User.pause : 0x0000757b488ae743 >
0x757b488c21cb    49bbe0ebe8a65f5b0000    mov r11, 0x5b5fa6e8ebe0                                
0x757b488c21d5    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c21df    49ffd2                  call r10                      < System.quit : 0x00005b5fa6e8ebe0 >
 ..            }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == .. 
0x757b488c21e2    b8b8000000              mov eax, 0xb8                                          
0x757b488c21e7    4983c608                add r14, 0x8                                           
0x757b488c21eb    498906                  mov [r14], rax                                         
 ..   }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCo .. 
0x757b488c21ee    498b47c8                mov rax, [r15-0x38]                                    
 ..           opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0  .. 
0x757b488c21f2    b907000000              mov ecx, 0x7                                           
 ..             opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb .. 
0x757b488c21f7    4823c1                  and rax, rcx                                           
0x757b488c21fa    4983c608                add r14, 0x8                                           
0x757b488c21fe    498906                  mov [r14], rax                                         
 ..         opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 +  .. 
0x757b488c2201    498b0e                  mov rcx, [r14]                                         
0x757b488c2204    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c2208    4983ee10                sub r14, 0x10                                          
 ..       }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 )  .. 
0x757b488c220c    4803c1                  add rax, rcx                                           
0x757b488c220f    49894710                mov [r15+0x10], rax                                    
 ..  0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             .. 
0x757b488c2213    e963000000              jmp 0x757b488c227b            < C_Syntax.Compile_Move+500 >
 ..       else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0 .. 
0x757b488c2218    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488c221d    7519                    jnz 0x488c2238                < C_Syntax.Compile_Move+433 >
0x757b488c221f    0f1f4000                nop [rax]                                              
 ..          if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             e .. 
0x757b488c2223    b8b0000000              mov eax, 0xb0                                          
 ..   if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if  .. 
0x757b488c2228    498b4fc8                mov rcx, [r15-0x38]                                    
 ..     if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else i .. 
0x757b488c222c    4803c1                  add rax, rcx                                           
 ..     {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;      .. 
0x757b488c222f    49894710                mov [r15+0x10], rax                                    
 .. f ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( i .. 
0x757b488c2233    e943000000              jmp 0x757b488c227b            < C_Syntax.Compile_Move+500 >
 .. e = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0 .. 
0x757b488c2238    49837ff802              cmp qword [r15-0x8], 0x2                               
0x757b488c223d    7521                    jnz 0x488c2260                < C_Syntax.Compile_Move+473 >
0x757b488c223f    0f1f4000                nop [rax]                                              
 ..      else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }    .. 
0x757b488c2243    49c7470866000000        mov qword [r15+0x8], 0x66                              
 .. mSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    { .. 
0x757b488c224b    b8b8000000              mov eax, 0xb8                                          
 .. = 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {        .. 
0x757b488c2250    498b4fc8                mov rcx, [r15-0x38]                                    
 ..  == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {      .. 
0x757b488c2254    480bc1                  or rax, rcx                                            
 .. e if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }      .. 
0x757b488c2257    49894710                mov [r15+0x10], rax                                    
 ..  ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         c .. 
0x757b488c225b    e91b000000              jmp 0x757b488c227b            < C_Syntax.Compile_Move+500 >
 .. e = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B .. 
0x757b488c2260    49837ff804              cmp qword [r15-0x8], 0x4                               
0x757b488c2265    7514                    jnz 0x488c227b                < C_Syntax.Compile_Move+500 >
0x757b488c2267    0f1f4000                nop [rax]                                              
 ..     else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x .. 
0x757b488c226b    b8b8000000              mov eax, 0xb8                                          
 .. e if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;    .. 
0x757b488c2270    498b4fc8                mov rcx, [r15-0x38]                                    
 .. lse if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;  .. 
0x757b488c2274    480bc1                  or rax, rcx                                            
 ..              else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         op .. 
0x757b488c2277    49894710                mov [r15+0x10], rax                                    
 .. e == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( op .. 
0x757b488c227b    e95b000000              jmp 0x757b488c22db            < C_Syntax.Compile_Move+596 >
 ..   else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direct .. 
0x757b488c2280    49834f1802              or qword [r15+0x18], 0x2                               
 .. Flags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 .. 
0x757b488c2285    49c7471088000000        mov qword [r15+0x10], 0x88                              
 ..          opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operand .. 
0x757b488c228d    49837fd001              cmp qword [r15-0x30], 0x1                              
0x757b488c2292    7e09                    jle 0x488c229d                < C_Syntax.Compile_Move+534 >
0x757b488c2294    0f1f4000                nop [rax]                                              
 ..      if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ; .. 
0x757b488c2298    49834f1001              or qword [r15+0x10], 0x1                               
 .. dSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( o .. 
0x757b488c229d    49837fb003              cmp qword [r15-0x50], 0x3                              
 .. ode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 )  .. 
0x757b488c22a2    7509                    jnz 0x488c22ad                < C_Syntax.Compile_Move+550 >
0x757b488c22a4    0f1f4000                nop [rax]                                              
 ..  if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize > .. 
0x757b488c22a8    49834f1002              or qword [r15+0x10], 0x2                               
 .. == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlF .. 
0x757b488c22ad    49837fd002              cmp qword [r15-0x30], 0x2                              
 .. ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize .. 
0x757b488c22b2    750c                    jnz 0x488c22c0                < C_Syntax.Compile_Move+569 >
0x757b488c22b4    0f1f4000                nop [rax]                                              
 ..       if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }  .. 
0x757b488c22b8    49c7470866000000        mov qword [r15+0x8], 0x66                              
 .. == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWr .. 
0x757b488c22c0    49837fd008              cmp qword [r15-0x30], 0x8                              
0x757b488c22c5    7d0f                    jge 0x488c22d6                < C_Syntax.Compile_Move+591 >
0x757b488c22c7    0f1f4000                nop [rax]                                              
 ..        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( op .. 
0x757b488c22cb    49837ff808              cmp qword [r15-0x8], 0x8                               
0x757b488c22d0    7c09                    jl 0x488c22db                 < C_Syntax.Compile_Move+596 >
0x757b488c22d2    0f1f4000                nop [rax]                                              
 ..  ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, contro .. 
0x757b488c22d6    49834f1820              or qword [r15+0x18], 0x20                              
 .. pile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c22db    498b4708                mov rax, [r15+0x8]                                     
0x757b488c22df    4983c608                add r14, 0x8                                           
0x757b488c22e3    498906                  mov [r14], rax                                         
 .. ulateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c22e6    498b4710                mov rax, [r15+0x10]                                    
 ..  ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCo .. 
0x757b488c22ea    4983c608                add r14, 0x8                                           
0x757b488c22ee    498906                  mov [r14], rax                                         
 .. te_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c22f1    498b47b8                mov rax, [r15-0x48]                                    
0x757b488c22f5    4983c608                add r14, 0x8                                           
 ..  ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, c .. 
0x757b488c22f9    498906                  mov [r14], rax                                         
 .. struction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c22fc    498b47c0                mov rax, [r15-0x40]                                    
0x757b488c2300    4983c608                add r14, 0x8                                           
0x757b488c2304    498906                  mov [r14], rax                                         
 .. tion_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2307    498b47c8                mov rax, [r15-0x38]                                    
0x757b488c230b    4983c608                add r14, 0x8                                           
0x757b488c230f    498906                  mov [r14], rax                                         
 .. _X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2312    498b4718                mov rax, [r15+0x18]                                    
0x757b488c2316    4983c608                add r14, 0x8                                           
0x757b488c231a    498906                  mov [r14], rax                                         
 .. , opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c231d    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c2321    4983c608                add r14, 0x8                                           
0x757b488c2325    498906                  mov [r14], rax                                         
 .. ode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2328    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c232c    4983c608                add r14, 0x8                                           
0x757b488c2330    498906                  mov [r14], rax                                         
 .. od, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2333    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c2337    4983c608                add r14, 0x8                                           
0x757b488c233b    498906                  mov [r14], rax                                         
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c233e    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c2342    4983c608                add r14, 0x8                                           
0x757b488c2346    498906                  mov [r14], rax                                         
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c2349    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c234d    4983c608                add r14, 0x8                                           
0x757b488c2351    498906                  mov [r14], rax                                         
 .. ontrolFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, di .. 
0x757b488c2354    49ba0d1f8c487b750000    mov r10, 0x757b488c1f0d                                
0x757b488c235e    49ffd2                  call r10                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x0000757b488c1f0d >
0x757b488c2361    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c2365    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c2369    4983ee50                sub r14, 0x50                                          
 .. sib, disp, dispSize, imm, immSize ) ; }  .. 
0x757b488c236d    c3                      ret                                                    
Word_Disassemble : word - 'Compile_Move' :: codeSize = 743
Word : 0x0000757b43fc6677 :: Compiled at : 0x0000757b488c2087
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 396.17 <::

 =============================
C_Syntax.Compile_MoveImm <:> csl compiled word
SourceCode for C_Syntax.Compile_MoveImm :> 
void Compile_MoveImm ( Boolean mod, Boolean rm, int64 disp, int64 imm, byte immSize ) { if ( ! immSize ) immSize = 8 ; if ( mod == MEM ) { if ( disp && ( imm <= 0xffffffff ) ) { Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ; } else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) { Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ; Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ; } } else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;} 
Source code file location of Compile_MoveImm : "namespaces/compiler/x64.csl" : 430.16 :: we are now at : namespaces/compiler/x64.csl : 450.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c2657 -- code size = 631 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_MoveImm : definition = 0x0000757b488c2657 : disassembly at namespaces/compiler/x64.csl : 450.20 :
0x757b488c2657    4d897e08                mov [r14+0x8], r15                                     
0x757b488c265b    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c265f    4981c608000000          add r14, 0x8                                           
 .. nt64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff .. 
0x757b488c2666    498b47f8                mov rax, [r15-0x8]                                     
 ..  int64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffff .. 
0x757b488c266a    4883f800                cmp rax, 0x0                                           
0x757b488c266e    750c                    jnz 0x488c267c                < C_Syntax.Compile_MoveImm+37 >
0x757b488c2670    0f1f4000                nop [rax]                                              
 .. Size ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {     .. 
0x757b488c2674    49c747f808000000        mov qword [r15-0x8], 0x8                               
 ..  ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compil .. 
0x757b488c267c    49837fd800              cmp qword [r15-0x28], 0x0                              
0x757b488c2681    0f85b2010000            jnz 0x757b488c2839            < C_Syntax.Compile_MoveImm+482 >
 .. od == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp .. 
0x757b488c2687    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c268b    4883f800                cmp rax, 0x0                                           
0x757b488c268f    0f84c2000000            jz 0x757b488c2757             < C_Syntax.Compile_MoveImm+256 >
 .. )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm,  .. 
0x757b488c2695    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x757b488c269a    0f8fb7000000            jg 0x757b488c2757             < C_Syntax.Compile_MoveImm+256 >
 ..  MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0,  .. 
0x757b488c26a0    498bc6                  mov rax, r14                                           
 ..                 if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize .. 
0x757b488c26a3    4983ee08                sub r14, 0x8                                           
0x757b488c26a7    48833800                cmp qword [rax], 0x0                                   
0x757b488c26ab    7410                    jz 0x488c26bd                 < C_Syntax.Compile_MoveImm+102 >
0x757b488c26ad    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488c26b2    7409                    jz 0x488c26bd                 < C_Syntax.Compile_MoveImm+102 >
 ..   {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immS .. 
0x757b488c26b4    49c70601000000          mov qword [r14], 0x1                                   
0x757b488c26bb    eb07                    jmp 0x757b488c26c4            < C_Syntax.Compile_MoveImm+109 >
0x757b488c26bd    49c70600000000          mov qword [r14], 0x0                                   
0x757b488c26c4    0f8e8d000000            jle 0x757b488c2757            < C_Syntax.Compile_MoveImm+256 >
 ..          {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || .. 
0x757b488c26ca    b802000000              mov eax, 0x2                                           
0x757b488c26cf    4983c608                add r14, 0x8                                           
0x757b488c26d3    498906                  mov [r14], rax                                         
 ..  {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > .. 
0x757b488c26d6    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c26da    4983c608                add r14, 0x8                                           
0x757b488c26de    498906                  mov [r14], rax                                         
 ..           Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xff .. 
0x757b488c26e1    48c7c000000000          mov rax, 0x0                                           
0x757b488c26e8    4983c608                add r14, 0x8                                           
0x757b488c26ec    498906                  mov [r14], rax                                         
 ..        Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xfffff .. 
0x757b488c26ef    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c26f3    4983c608                add r14, 0x8                                           
0x757b488c26f7    498906                  mov [r14], rax                                         
 ..    Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff  .. 
0x757b488c26fa    48c7c000000000          mov rax, 0x0                                           
0x757b488c2701    4983c608                add r14, 0x8                                           
0x757b488c2705    498906                  mov [r14], rax                                         
 .. Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) .. 
0x757b488c2708    48c7c000000000          mov rax, 0x0                                           
0x757b488c270f    4983c608                add r14, 0x8                                           
0x757b488c2713    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )    .. 
0x757b488c2716    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c271a    4983c608                add r14, 0x8                                           
0x757b488c271e    498906                  mov [r14], rax                                         
 .. ove ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )          .. 
0x757b488c2721    48c7c000000000          mov rax, 0x0                                           
0x757b488c2728    4983c608                add r14, 0x8                                           
0x757b488c272c    498906                  mov [r14], rax                                         
 ..  ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {   .. 
0x757b488c272f    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c2733    4983c608                add r14, 0x8                                           
0x757b488c2737    498906                  mov [r14], rax                                         
 .. _MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {        .. 
0x757b488c273a    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c273e    4983c608                add r14, 0x8                                           
0x757b488c2742    498906                  mov [r14], rax                                         
 ..  0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( im .. 
0x757b488c2745    49ba87208c487b750000    mov r10, 0x757b488c2087                                
0x757b488c274f    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x0000757b488c2087 >
0x757b488c2752    e9dd000000              jmp 0x757b488c2834            < C_Syntax.Compile_MoveImm+477 >
 .. ize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, RE .. 
0x757b488c2757    49837ff808              cmp qword [r15-0x8], 0x8                               
0x757b488c275c    7d0f                    jge 0x488c276d                < C_Syntax.Compile_MoveImm+278 >
0x757b488c275e    0f1f4000                nop [rax]                                              
 ..       else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0 .. 
0x757b488c2762    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x757b488c2767    0f8ec7000000            jle 0x757b488c2834            < C_Syntax.Compile_MoveImm+477 >
 ..                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THR .. 
0x757b488c276d    b803000000              mov eax, 0x3                                           
0x757b488c2772    4983c608                add r14, 0x8                                           
0x757b488c2776    498906                  mov [r14], rax                                         
 ..                Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, d .. 
0x757b488c2779    b803000000              mov eax, 0x3                                           
0x757b488c277e    4983c608                add r14, 0x8                                           
 ..   else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, .. 
0x757b488c2782    498906                  mov [r14], rax                                         
 ..           Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp,  .. 
0x757b488c2785    48c7c000000000          mov rax, 0x0                                           
0x757b488c278c    4983c608                add r14, 0x8                                           
0x757b488c2790    498906                  mov [r14], rax                                         
 ..        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, imm .. 
0x757b488c2793    b809000000              mov eax, 0x9                                           
0x757b488c2798    4983c608                add r14, 0x8                                           
0x757b488c279c    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;   .. 
0x757b488c279f    48c7c000000000          mov rax, 0x0                                           
0x757b488c27a6    4983c608                add r14, 0x8                                           
0x757b488c27aa    498906                  mov [r14], rax                                         
 .. e_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;      .. 
0x757b488c27ad    48c7c000000000          mov rax, 0x0                                           
0x757b488c27b4    4983c608                add r14, 0x8                                           
0x757b488c27b8    498906                  mov [r14], rax                                         
 .. ove ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         .. 
0x757b488c27bb    48c7c000000000          mov rax, 0x0                                           
0x757b488c27c2    4983c608                add r14, 0x8                                           
0x757b488c27c6    498906                  mov [r14], rax                                         
 ..  ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }  .. 
0x757b488c27c9    48c7c000000000          mov rax, 0x0                                           
0x757b488c27d0    4983c608                add r14, 0x8                                           
0x757b488c27d4    498906                  mov [r14], rax                                         
 .. TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     .. 
0x757b488c27d7    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c27db    4983c608                add r14, 0x8                                           
0x757b488c27df    498906                  mov [r14], rax                                         
 .. G, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }    .. 
0x757b488c27e2    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c27e6    4983c608                add r14, 0x8                                           
0x757b488c27ea    498906                  mov [r14], rax                                         
 ..  ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_ .. 
0x757b488c27ed    49ba87208c487b750000    mov r10, 0x757b488c2087                                
0x757b488c27f7    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x0000757b488c2087 >
 ..              Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, d .. 
0x757b488c27fa    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c27fe    4983c608                add r14, 0x8                                           
0x757b488c2802    498906                  mov [r14], rax                                         
 ..          Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, .. 
0x757b488c2805    b809000000              mov eax, 0x9                                           
0x757b488c280a    4983c608                add r14, 0x8                                           
0x757b488c280e    498906                  mov [r14], rax                                         
 .. ompile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, i .. 
0x757b488c2811    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c2815    4983c608                add r14, 0x8                                           
0x757b488c2819    498906                  mov [r14], rax                                         
 .. _Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize .. 
0x757b488c281c    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c2820    4983c608                add r14, 0x8                                           
0x757b488c2824    498906                  mov [r14], rax                                         
 .. 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO .. 
0x757b488c2827    49ba3f248c487b750000    mov r10, 0x757b488c243f                                
0x757b488c2831    49ffd2                  call r10                      < C_Syntax.Compile_Move_Reg_To_Rm : 0x0000757b488c243f >
 .. , THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2834    e988000000              jmp 0x757b488c28c1            < C_Syntax.Compile_MoveImm+618 >
 ..       }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2839    b803000000              mov eax, 0x3                                           
0x757b488c283e    4983c608                add r14, 0x8                                           
0x757b488c2842    498906                  mov [r14], rax                                         
 ..     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2845    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c2849    4983c608                add r14, 0x8                                           
0x757b488c284d    498906                  mov [r14], rax                                         
 ..      else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2850    48c7c000000000          mov rax, 0x0                                           
0x757b488c2857    4983c608                add r14, 0x8                                           
0x757b488c285b    498906                  mov [r14], rax                                         
 ..   else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c285e    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c2862    4983c608                add r14, 0x8                                           
0x757b488c2866    498906                  mov [r14], rax                                         
 .. se Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2869    48c7c000000000          mov rax, 0x0                                           
0x757b488c2870    4983c608                add r14, 0x8                                           
0x757b488c2874    498906                  mov [r14], rax                                         
 .. Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2877    48c7c000000000          mov rax, 0x0                                           
0x757b488c287e    4983c608                add r14, 0x8                                           
0x757b488c2882    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2885    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c2889    4983c608                add r14, 0x8                                           
0x757b488c288d    498906                  mov [r14], rax                                         
 .. ove ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c2890    48c7c000000000          mov rax, 0x0                                           
0x757b488c2897    4983c608                add r14, 0x8                                           
0x757b488c289b    498906                  mov [r14], rax                                         
 ..  ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c289e    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c28a2    4983c608                add r14, 0x8                                           
0x757b488c28a6    498906                  mov [r14], rax                                         
 .. _REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c28a9    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c28ad    4983c608                add r14, 0x8                                           
0x757b488c28b1    498906                  mov [r14], rax                                         
 ..  immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c28b4    49ba87208c487b750000    mov r10, 0x757b488c2087                                
0x757b488c28be    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x0000757b488c2087 >
0x757b488c28c1    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c28c5    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c28c9    4983ee28                sub r14, 0x28                                          
 .. 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x757b488c28cd    c3                      ret                                                    
Word_Disassemble : word - 'Compile_MoveImm' :: codeSize = 631
Word : 0x0000757b43fe84a7 :: Compiled at : 0x0000757b488c2657
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 450.20 <::

 =============================
C_Syntax._Compile_X_Group1_Immediate <:> csl compiled word
SourceCode for C_Syntax._Compile_X_Group1_Immediate :> 
void _Compile_X_Group1_Immediate ( Boolean code, Boolean mod, Boolean rm, int64 disp, uint64 imm, Boolean iSize ) { byte opCode = 0x80 ; int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ; if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) ) { Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ; _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ; } else { rm &= 0xff, controlFlags |= REX_W ; if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ; else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ; Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ; } } 
Source code file location of _Compile_X_Group1_Immediate : "namespaces/compiler/x64.csl" : 562.28 :: we are now at : namespaces/compiler/x64.csl : 587.32
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c2e8b -- code size = 642 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_X_Group1_Immediate : definition = 0x0000757b488c2e8b : disassembly at namespaces/compiler/x64.csl : 587.32 :
0x757b488c2e8b    4d897e08                mov [r14+0x8], r15                                     
0x757b488c2e8f    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c2e93    4981c618000000          add r14, 0x18                                          
 .. an iSize ) {              byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == M .. 
0x757b488c2e9a    49c7470880000000        mov qword [r15+0x8], 0x80                              
 .. e = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0 .. 
0x757b488c2ea2    b812000000              mov eax, 0x12                                          
0x757b488c2ea7    4983c608                add r14, 0x8                                           
0x757b488c2eab    498906                  mov [r14], rax                                         
 ..  controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )      .. 
0x757b488c2eae    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c2eb2    4883f800                cmp rax, 0x0                                           
0x757b488c2eb6    0f8411000000            jz 0x757b488c2ecd             < C_Syntax._Compile_X_Group1_Immediate+66 >
 .. lFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {       .. 
0x757b488c2ebc    b808000000              mov eax, 0x8                                           
0x757b488c2ec1    4983c608                add r14, 0x8                                           
0x757b488c2ec5    498906                  mov [r14], rax                                         
0x757b488c2ec8    e90e000000              jmp 0x757b488c2edb            < C_Syntax._Compile_X_Group1_Immediate+80 >
 .. ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                .. 
0x757b488c2ecd    48c7c000000000          mov rax, 0x0                                           
0x757b488c2ed4    4983c608                add r14, 0x8                                           
0x757b488c2ed8    498906                  mov [r14], rax                                         
 .. IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                  .. 
0x757b488c2edb    498b0e                  mov rcx, [r14]                                         
0x757b488c2ede    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c2ee2    4983ee10                sub r14, 0x10                                          
 .. nt64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )  .. 
0x757b488c2ee6    480bc1                  or rax, rcx                                            
 ..        byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > .. 
0x757b488c2ee9    49894710                mov [r15+0x10], rax                                    
 ..  ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_Mov .. 
0x757b488c2eed    49837fd800              cmp qword [r15-0x28], 0x0                              
0x757b488c2ef2    0f85e2000000            jnz 0x757b488c2fda            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..  ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_R .. 
0x757b488c2ef8    49837ff804              cmp qword [r15-0x8], 0x4                               
0x757b488c2efd    0f8f35000000            jg 0x757b488c2f38             < C_Syntax._Compile_X_Group1_Immediate+173 >
 ..  mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize )  .. 
0x757b488c2f03    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x757b488c2f08    0f8ecc000000            jle 0x757b488c2fda            < C_Syntax._Compile_X_Group1_Immediate+335 >
 .. P_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( .. 
0x757b488c2f0e    498bc6                  mov rax, r14                                           
0x757b488c2f11    4983ee08                sub r14, 0x8                                           
0x757b488c2f15    48833800                cmp qword [rax], 0x0                                   
0x757b488c2f19    7410                    jz 0x488c2f2b                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x757b488c2f1b    488378f800              cmp qword [rax-0x8], 0x0                               
0x757b488c2f20    7409                    jz 0x488c2f2b                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x757b488c2f22    49c70601000000          mov qword [r14], 0x1                                   
0x757b488c2f29    eb07                    jmp 0x757b488c2f32            < C_Syntax._Compile_X_Group1_Immediate+167 >
0x757b488c2f2b    49c70600000000          mov qword [r14], 0x0                                   
0x757b488c2f32    0f8ea2000000            jle 0x757b488c2fda            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..              Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL )  .. 
0x757b488c2f38    b809000000              mov eax, 0x9                                           
0x757b488c2f3d    4983c608                add r14, 0x8                                           
0x757b488c2f41    498906                  mov [r14], rax                                         
 ..    Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }    .. 
0x757b488c2f44    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c2f48    4983c608                add r14, 0x8                                           
0x757b488c2f4c    498906                  mov [r14], rax                                         
 .. mpile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     els .. 
0x757b488c2f4f    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c2f53    4983c608                add r14, 0x8                                           
0x757b488c2f57    498906                  mov [r14], rax                                         
 .. fff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_ .. 
0x757b488c2f5a    49bad3288c487b750000    mov r10, 0x757b488c28d3                                
0x757b488c2f64    49ffd2                  call r10                      < C_Syntax.Compile_MoveImm_To_Reg : 0x0000757b488c28d3 >
 .. iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFla .. 
0x757b488c2f67    498b47d0                mov rax, [r15-0x30]                                    
0x757b488c2f6b    4983c608                add r14, 0x8                                           
0x757b488c2f6f    498906                  mov [r14], rax                                         
 .. ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |=  .. 
0x757b488c2f72    b803000000              mov eax, 0x3                                           
0x757b488c2f77    4983c608                add r14, 0x8                                           
0x757b488c2f7b    498906                  mov [r14], rax                                         
 ..        _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W .. 
0x757b488c2f7e    48c7c000000000          mov rax, 0x0                                           
0x757b488c2f85    4983c608                add r14, 0x8                                           
0x757b488c2f89    498906                  mov [r14], rax                                         
 ..   _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;    .. 
0x757b488c2f8c    b809000000              mov eax, 0x9                                           
0x757b488c2f91    4983c608                add r14, 0x8                                           
0x757b488c2f95    498906                  mov [r14], rax                                         
 .. _X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if (  .. 
0x757b488c2f98    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c2f9c    4983c608                add r14, 0x8                                           
0x757b488c2fa0    498906                  mov [r14], rax                                         
 .. roup1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iS .. 
0x757b488c2fa3    48c7c000000000          mov rax, 0x0                                           
0x757b488c2faa    4983c608                add r14, 0x8                                           
0x757b488c2fae    498906                  mov [r14], rax                                         
 .. p1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize .. 
0x757b488c2fb1    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c2fb5    4983c608                add r14, 0x8                                           
0x757b488c2fb9    498906                  mov [r14], rax                                         
 .. ode, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYT .. 
0x757b488c2fbc    b808000000              mov eax, 0x8                                           
0x757b488c2fc1    4983c608                add r14, 0x8                                           
0x757b488c2fc5    498906                  mov [r14], rax                                         
 .. eg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm .. 
0x757b488c2fc8    49ba2c2c8c487b750000    mov r10, 0x757b488c2c2c                                
0x757b488c2fd2    49ffd2                  call r10                      < C_Syntax._Compile_X_Group1 : 0x0000757b488c2c2c >
0x757b488c2fd5    e926010000              jmp 0x757b488c3100            < C_Syntax._Compile_X_Group1_Immediate+629 >
 ..  ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |=  .. 
0x757b488c2fda    498367e0ff              and qword [r15-0x20], 0xffffffffffffffff                              
 .. {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if (  .. 
0x757b488c2fdf    49834f1020              or qword [r15+0x10], 0x20                              
 .. controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( .. 
0x757b488c2fe4    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488c2fe9    7f34                    jg 0x488c301f                 < C_Syntax._Compile_X_Group1_Immediate+404 >
0x757b488c2feb    0f1f4000                nop [rax]                                              
 ..      if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) o .. 
0x757b488c2fef    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c2ff3    4983c608                add r14, 0x8                                           
 ..    {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if .. 
0x757b488c2ff7    498906                  mov [r14], rax                                         
 .. W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 .. 
0x757b488c2ffa    49bac0148c487b750000    mov r10, 0x757b488c14c0                                
0x757b488c3004    49ffd2                  call r10                      < C_Syntax.Abs : 0x0000757b488c14c0 >
0x757b488c3007    b800010000              mov eax, 0x100                                         
 ..  ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |=  .. 
0x757b488c300c    488bc8                  mov rcx, rax                                           
0x757b488c300f    498b06                  mov rax, [r14]                                         
0x757b488c3012    4983ee08                sub r14, 0x8                                           
 .. f ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode  .. 
0x757b488c3016    483bc1                  cmp rax, rcx                                           
0x757b488c3019    7c0e                    jl 0x488c3029                 < C_Syntax._Compile_X_Group1_Immediate+414 >
0x757b488c301b    0f1f4000                nop [rax]                                              
 ..  ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;       .. 
0x757b488c301f    49834f0801              or qword [r15+0x8], 0x1                                
 ..  Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;         .. 
0x757b488c3024    e948000000              jmp 0x757b488c3071            < C_Syntax._Compile_X_Group1_Immediate+486 >
 .. ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               .. 
0x757b488c3029    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488c302e    7e34                    jle 0x488c3064                < C_Syntax._Compile_X_Group1_Immediate+473 >
0x757b488c3030    0f1f4000                nop [rax]                                              
 .. lse if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Ins .. 
0x757b488c3034    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c3038    4983c608                add r14, 0x8                                           
0x757b488c303c    498906                  mov [r14], rax                                         
 ..      else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWri .. 
0x757b488c303f    49bac0148c487b750000    mov r10, 0x757b488c14c0                                
0x757b488c3049    49ffd2                  call r10                      < C_Syntax.Abs : 0x0000757b488c14c0 >
0x757b488c304c    b800010000              mov eax, 0x100                                         
 ..  ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction .. 
0x757b488c3051    488bc8                  mov rcx, rax                                           
0x757b488c3054    498b06                  mov rax, [r14]                                         
0x757b488c3057    4983ee08                sub r14, 0x8                                           
 ..  ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instructi .. 
0x757b488c305b    483bc1                  cmp rax, rcx                                           
0x757b488c305e    7d11                    jge 0x488c3071                < C_Syntax._Compile_X_Group1_Immediate+486 >
0x757b488c3060    0f1f4000                nop [rax]                                              
 .. | ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mo .. 
0x757b488c3064    49834f0803              or qword [r15+0x8], 0x3                                
 ..  imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code,  .. 
0x757b488c3069    49c747f801000000        mov qword [r15-0x8], 0x1                               
 .. pile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c3071    48c7c000000000          mov rax, 0x0                                           
0x757b488c3078    4983c608                add r14, 0x8                                           
0x757b488c307c    498906                  mov [r14], rax                                         
 .. e_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c307f    498b4708                mov rax, [r15+0x8]                                     
0x757b488c3083    4983c608                add r14, 0x8                                           
 .. ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, .. 
0x757b488c3087    498906                  mov [r14], rax                                         
 .. ateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c308a    498b47d8                mov rax, [r15-0x28]                                    
0x757b488c308e    4983c608                add r14, 0x8                                           
0x757b488c3092    498906                  mov [r14], rax                                         
 .. ite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c3095    498b47d0                mov rax, [r15-0x30]                                    
0x757b488c3099    4983c608                add r14, 0x8                                           
0x757b488c309d    498906                  mov [r14], rax                                         
 .. struction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30a0    498b47e0                mov rax, [r15-0x20]                                    
0x757b488c30a4    4983c608                add r14, 0x8                                           
0x757b488c30a8    498906                  mov [r14], rax                                         
 .. ction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30ab    498b4710                mov rax, [r15+0x10]                                    
0x757b488c30af    4983c608                add r14, 0x8                                           
0x757b488c30b3    498906                  mov [r14], rax                                         
 ..  opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30b6    48c7c000000000          mov rax, 0x0                                           
0x757b488c30bd    4983c608                add r14, 0x8                                           
0x757b488c30c1    498906                  mov [r14], rax                                         
 .. Code, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30c4    498b47e8                mov rax, [r15-0x18]                                    
0x757b488c30c8    4983c608                add r14, 0x8                                           
0x757b488c30cc    498906                  mov [r14], rax                                         
 .. mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30cf    48c7c000000000          mov rax, 0x0                                           
0x757b488c30d6    4983c608                add r14, 0x8                                           
0x757b488c30da    498906                  mov [r14], rax                                         
 .. , code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30dd    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c30e1    4983c608                add r14, 0x8                                           
0x757b488c30e5    498906                  mov [r14], rax                                         
 .. e, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c30e8    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c30ec    4983c608                add r14, 0x8                                           
0x757b488c30f0    498906                  mov [r14], rax                                         
 .. e = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, i .. 
0x757b488c30f3    49ba0d1f8c487b750000    mov r10, 0x757b488c1f0d                                
0x757b488c30fd    49ffd2                  call r10                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x0000757b488c1f0d >
0x757b488c3100    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c3104    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c3108    4983ee30                sub r14, 0x30                                          
 .. ags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x757b488c310c    c3                      ret                                                    
Word_Disassemble : word - '_Compile_X_Group1_Immediate' :: codeSize = 642
Word : 0x0000757b440097f7 :: Compiled at : 0x0000757b488c2e8b
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 587.32 <::

 =============================
C_Syntax._Compile_Move_DataStackN_ToReg <:> csl compiled word
SourceCode for C_Syntax._Compile_Move_DataStackN_ToReg :> 
void _Compile_Move_DataStackN_ToReg ( reg, n ) { Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
Source code file location of _Compile_Move_DataStackN_ToReg : "namespaces/compiler/x64.csl" : 640.31 :: we are now at : namespaces/compiler/x64.csl : 645.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3695 -- code size = 178 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_Move_DataStackN_ToReg : definition = 0x0000757b488c3695 : disassembly at namespaces/compiler/x64.csl : 645.35 :
0x757b488c3695    4d897e08                mov [r14+0x8], r15                                     
0x757b488c3699    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c369d    4981c608000000          add r14, 0x8                                           
 .. eg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36a4    b803000000              mov eax, 0x3                                           
0x757b488c36a9    4983c608                add r14, 0x8                                           
0x757b488c36ad    498906                  mov [r14], rax                                         
 .. reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36b0    48c7c000000000          mov rax, 0x0                                           
0x757b488c36b7    4983c608                add r14, 0x8                                           
0x757b488c36bb    498906                  mov [r14], rax                                         
 .. n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36be    498b47f0                mov rax, [r15-0x10]                                    
0x757b488c36c2    4983c608                add r14, 0x8                                           
0x757b488c36c6    498906                  mov [r14], rax                                         
 ..         Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36c9    b80e000000              mov eax, 0xe                                           
0x757b488c36ce    4983c608                add r14, 0x8                                           
0x757b488c36d2    498906                  mov [r14], rax                                         
 ..    Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36d5    b808000000              mov eax, 0x8                                           
0x757b488c36da    4983c608                add r14, 0x8                                           
0x757b488c36de    498906                  mov [r14], rax                                         
 .. Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36e1    48c7c000000000          mov rax, 0x0                                           
0x757b488c36e8    4983c608                add r14, 0x8                                           
0x757b488c36ec    498906                  mov [r14], rax                                         
 .. pile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36ef    498b47f8                mov rax, [r15-0x8]                                     
 .. _Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36f3    b908000000              mov ecx, 0x8                                           
 .. le_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c36f8    480fafc1                imul rax, rcx                                          
0x757b488c36fc    4983c608                add r14, 0x8                                           
0x757b488c3700    498906                  mov [r14], rax                                         
 .. ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c3703    48c7c000000000          mov rax, 0x0                                           
0x757b488c370a    4983c608                add r14, 0x8                                           
0x757b488c370e    498906                  mov [r14], rax                                         
 .. EG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c3711    48c7c000000000          mov rax, 0x0                                           
0x757b488c3718    4983c608                add r14, 0x8                                           
0x757b488c371c    498906                  mov [r14], rax                                         
 ..  MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c371f    48c7c000000000          mov rax, 0x0                                           
0x757b488c3726    4983c608                add r14, 0x8                                           
0x757b488c372a    498906                  mov [r14], rax                                         
 .. _DataStackN_ToReg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c372d    49ba87208c487b750000    mov r10, 0x757b488c2087                                
0x757b488c3737    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x0000757b488c2087 >
0x757b488c373a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c373e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c3742    4983ee10                sub r14, 0x10                                          
 .. reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x757b488c3746    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Move_DataStackN_ToReg' :: codeSize = 178
Word : 0x0000757b44024aa7 :: Compiled at : 0x0000757b488c3695
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 645.35 <::

 =============================
Interpreter._Compile_Stack_PopToReg <:> csl compiled word
SourceCode for Interpreter._Compile_Stack_PopToReg :> 
: _Compile_Stack_PopToReg ( reg ) _Compile_Move_DataStackN_ToReg ( reg, 0 ) _Compile_SUBI_DSP ( CELL ) ; 
Source code file location of _Compile_Stack_PopToReg : "namespaces/compiler/x64.csl" : 655.2 :: we are now at : namespaces/compiler/x64.csl : 660.28
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c374c -- code size = 91 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._Compile_Stack_PopToReg : definition = 0x0000757b488c374c : disassembly at namespaces/compiler/x64.csl : 660.28 :
0x757b488c374c    4d897e08                mov [r14+0x8], r15                                     
0x757b488c3750    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c3754    4981c608000000          add r14, 0x8                                           
 ..      _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x757b488c375b    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c375f    4983c608                add r14, 0x8                                           
0x757b488c3763    498906                  mov [r14], rax                                         
 .. _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x757b488c3766    48c7c000000000          mov rax, 0x0                                           
0x757b488c376d    4983c608                add r14, 0x8                                           
0x757b488c3771    498906                  mov [r14], rax                                         
 .. : _Compile_Stack_PopToReg ( reg )     _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; .. 
0x757b488c3774    49ba95368c487b750000    mov r10, 0x757b488c3695                                
0x757b488c377e    49ffd2                  call r10                      < C_Syntax._Compile_Move_DataStackN_ToReg : 0x0000757b488c3695 >
 .. reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x757b488c3781    b808000000              mov eax, 0x8                                           
0x757b488c3786    4983c608                add r14, 0x8                                           
0x757b488c378a    498906                  mov [r14], rax                                         
 .. _DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x757b488c378d    49ba9f338c487b750000    mov r10, 0x757b488c339f                                
0x757b488c3797    49ffd2                  call r10                      < C_Syntax._Compile_SUBI_DSP : 0x0000757b488c339f >
0x757b488c379a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c379e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c37a2    4983ee08                sub r14, 0x8                                           
 .. SUBI_DSP ( CELL )                     ; 
0x757b488c37a6    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Stack_PopToReg' :: codeSize = 91
Word : 0x0000757b440262b7 :: Compiled at : 0x0000757b488c374c
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 660.28 <::

 =============================
Combinators.iax <:> csl compiled word
SourceCode for Combinators.iax :> 
asm: iax _Compile_Stack_PopToReg ( R8D ) _Compile_CallThruReg ( R8D ) ;asm 
Source code file location of iax : "namespaces/compiler/x64.csl" : 665.5 :: we are now at : namespaces/compiler/x64.csl : 673.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c37bb -- code size = 11 bytes
 -----------------------------
Word :: Combinators.iax : definition = 0x0000757b488c37bb : disassembly at namespaces/compiler/x64.csl : 673.17 :
 ..                         asm: iax      _Compile_Stack_PopToReg ( R8D )                                       _Compile_CallThruReg ( R8D )  .. 
0x757b488c37bb    4d8b06                  mov r8, [r14]                                          
0x757b488c37be    4983ee08                sub r14, 0x8                                           
 ..                                       _Compile_CallThruReg ( R8D )                                       ;asm  .. 
0x757b488c37c2    49ffd0                  call r8                                                
 ..                                       ;asm  .. 
0x757b488c37c5    c3                      ret                                                    
Word_Disassemble : word - 'iax' :: codeSize = 11
Word : 0x0000757b44027407 :: Compiled at : 0x0000757b488c37bb
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 673.17 <::

 =============================
Combinators.Compile_Stack_Push_R8D <:> csl compiled word
SourceCode for Combinators.Compile_Stack_Push_R8D :> 
: Compile_Stack_Push_R8D ( ) _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
Source code file location of Compile_Stack_Push_R8D : "namespaces/compiler/x64.csl" : 696.2 :: we are now at : namespaces/compiler/x64.csl : 701.27
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3a26 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: Combinators.Compile_Stack_Push_R8D : definition = 0x0000757b488c3a26 : disassembly at namespaces/compiler/x64.csl : 701.27 :
 .. _Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x757b488c3a26    b808000000              mov eax, 0x8                                           
0x757b488c3a2b    4983c608                add r14, 0x8                                           
0x757b488c3a2f    498906                  mov [r14], rax                                         
 ..      : Compile_Stack_Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;  .. 
0x757b488c3a32    49ba29398c487b750000    mov r10, 0x757b488c3929                                
0x757b488c3a3c    49ffd2                  call r10                      < Combinators._Compile_ADDI_DSP : 0x0000757b488c3929 >
 .. LL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x757b488c3a3f    b80e000000              mov eax, 0xe                                           
0x757b488c3a44    4983c608                add r14, 0x8                                           
0x757b488c3a48    498906                  mov [r14], rax                                         
 ..     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x757b488c3a4b    48c7c000000000          mov rax, 0x0                                           
0x757b488c3a52    4983c608                add r14, 0x8                                           
0x757b488c3a56    498906                  mov [r14], rax                                         
 ..  _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x757b488c3a59    b808000000              mov eax, 0x8                                           
0x757b488c3a5e    4983c608                add r14, 0x8                                           
0x757b488c3a62    498906                  mov [r14], rax                                         
 ..  )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x757b488c3a65    49ba81358c487b750000    mov r10, 0x757b488c3581                                
0x757b488c3a6f    49ffd2                  call r10                      < C_Syntax._Compile_MoveReg_To_StackN : 0x0000757b488c3581 >
 .. ile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x757b488c3a72    c3                      ret                                                    
Word_Disassemble : word - 'Compile_Stack_Push_R8D' :: codeSize = 77
Word : 0x0000757b4402e237 :: Compiled at : 0x0000757b488c3a26
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 701.27 <::

 =============================
User.qeval <:> csl compiled word
SourceCode for User.qeval :> 
: qeval s iax ; 
Source code file location of qeval : "namespaces/compiler/x64.csl" : 704.2 :: we are now at : namespaces/compiler/x64.csl : 705.19
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3a87 -- code size = 37 bytes
 -----------------------------
Word :: User.qeval : definition = 0x0000757b488c3a87 : disassembly at namespaces/compiler/x64.csl : 705.19 :
 ..                               : qeval s iax ;  .. 
0x757b488c3a87    49bbf0e5e6a65f5b0000    mov r11, 0x5b5fa6e6e5f0                                
0x757b488c3a91    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c3a9b    49ffd2                  call r10                      < Debug.stack : 0x00005b5fa6e6e5f0 >
 ..                             : qeval s iax ;  .. 
0x757b488c3a9e    49babb378c487b750000    mov r10, 0x757b488c37bb                                
0x757b488c3aa8    49ffd2                  call r10                      < Combinators.iax : 0x0000757b488c37bb >
 ..                         : qeval s iax ;  .. 
0x757b488c3aab    c3                      ret                                                    
Word_Disassemble : word - 'qeval' :: codeSize = 37
Word : 0x0000757b4402ee77 :: Compiled at : 0x0000757b488c3a87
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 705.19 <::

 =============================
User.stest <:> csl compiled word
SourceCode for User.stest :> 
asm: stest _Compile_MoveTOS_To_R8D ( ) _Compile_Move_DataStackN_ToReg ( R8D, 0 ) Compile_Stack_Push_R8D ( ) _Compile_SUBI_DSP ( CELL ) ;asm 
Source code file location of stest : "namespaces/compiler/x64.csl" : 708.5 :: we are now at : namespaces/compiler/x64.csl : 714.10
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3ac0 -- code size = 18 bytes
 -----------------------------
Word :: User.stest : definition = 0x0000757b488c3ac0 : disassembly at namespaces/compiler/x64.csl : 714.10 :
 ..                        asm: stest     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8 .. 
0x757b488c3ac0    4d8b06                  mov r8, [r14]                                          
 .. t     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CE .. 
0x757b488c3ac3    4d8b06                  mov r8, [r14]                                          
 .. _Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x757b488c3ac6    4983c608                add r14, 0x8                                           
0x757b488c3aca    4d8906                  mov [r14], r8                                          
 ..  )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x757b488c3acd    4983ee08                sub r14, 0x8                                           
 .. 8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x757b488c3ad1    c3                      ret                                                    
Word_Disassemble : word - 'stest' :: codeSize = 18
Word : 0x0000757b4402f387 :: Compiled at : 0x0000757b488c3ac0
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 714.10 <::
 
this is some purposefully funky code for testing

DataStack at : namespaces/compiler/x64.csl : 718.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 718.10 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 x64 test ok
 =============================
Stack.ndup <:> csl compiled word
SourceCode for Stack.ndup :> 
asm: ndup _Compile_MoveTOS_To_R8D ( ) _Compile_SUBI_DSP ( CELL ) _Compile_Move_DataStackN_ToReg ( R9D, 0 ) "start" label _Compile_TESTreg_Toreg ( R8D, R8D ) "end" 0 EQ jcc _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R9D ) _Compile_IncDecreg ( DEC, R8D ) "start" goto "end" label;asm 
Source code file location of ndup : "namespaces/compiler/x64.csl" : 722.5 :: we are now at : namespaces/compiler/x64.csl : 736.22
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3ae6 -- code size = 35 bytes
 -----------------------------
Word :: Stack.ndup : definition = 0x0000757b488c3ae6 : disassembly at namespaces/compiler/x64.csl : 736.22 :
 ..                         asm: ndup     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D .. 
0x757b488c3ae6    4d8b06                  mov r8, [r14]                                          
 .. p     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Com .. 
0x757b488c3ae9    4983ee08                sub r14, 0x8                                           
 ..  )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D ) .. 
0x757b488c3aed    4d8b0e                  mov r9, [r14]                                          
 .. oReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_ .. 
0x757b488c3af0    4585c0                  test r8d, r8d                                          
 .. reg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncD .. 
0x757b488c3af3    0f840f000000            jz 0x757b488c3b08             < Stack.ndup+34 >
 .. g ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg (  .. 
0x757b488c3af9    4983c608                add r14, 0x8                                           
 .. cc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     .. 
0x757b488c3afd    4d890e                  mov [r14], r9                                          
 .. MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  .. 
0x757b488c3b00    41ffc8                  dec r8d                                                
 .. le_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  .. 
0x757b488c3b03    e9e8ffffff              jmp 0x757b488c3af0            < Stack.ndup+10 >
 .. R8D )     "start" goto     "end" label;asm  .. 
0x757b488c3b08    c3                      ret                                                    
Word_Disassemble : word - 'ndup' :: codeSize = 35
Word : 0x0000757b4402ff57 :: Compiled at : 0x0000757b488c3ae6
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 736.22 <::

DataStack at : namespaces/compiler/x64.csl : 737.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 737.27 :
DataStack depth =  11 : Dsp (R14) = Top = 0x0000757b47211b10, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211b10 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x0000757b47211b08 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x0000757b47211b00 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x0000757b47211af8 > = 0x0000000000000007
  DataStack   [  -4 ] < 0x0000757b47211af0 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x0000757b47211ae8 > = 0x0000000000000007
  DataStack   [  -6 ] < 0x0000757b47211ae0 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x0000757b47211ad8 > = 0x0000000000000007
  DataStack   [  -8 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x0000757b47211ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 737.37 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Asm.testAsm <:> csl compiled word
SourceCode for Asm.testAsm :> 
asm: testAsm MOVrr RDX, RAX MOVrr RAX, RBX MOVrr RBX, RAX MOVrr RAX, RDX ;asm 
Source code file location of testAsm : "namespaces/compiler/x64.csl" : 786.5 :: we are now at : namespaces/compiler/x64.csl : 792.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3d6b -- code size = 13 bytes
 -----------------------------
Word :: Asm.testAsm : definition = 0x0000757b488c3d6b : disassembly at namespaces/compiler/x64.csl : 792.12 :
 ..                      asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  .. 
0x757b488c3d6b    488bd0                  mov rdx, rax                                           
 ..   asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  .. 
0x757b488c3d6e    488bc3                  mov rax, rbx                                           
 .. MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x757b488c3d71    488bd8                  mov rbx, rax                                           
 .. MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x757b488c3d74    488bc2                  mov rax, rdx                                           
 ..     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x757b488c3d77    c3                      ret                                                    
Word_Disassemble : word - 'testAsm' :: codeSize = 13
Word : 0x0000757b44038237 :: Compiled at : 0x0000757b488c3d6b
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 792.12 <::

 _TestDone_ = 1

including namespaces/test/dev.csl at namespaces/ninit.csl : 13.22 ...
 5040 5040
 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :> 
int factoriali ( int8 REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n ; n = n - 1 ; res = res * (n--) ; } return res; } 
Source code file location of factoriali : "namespaces/test/dev.csl" : 22.15 :: we are now at : namespaces/test/dev.csl : 45.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3e0c -- code size = 39 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x0000757b488c3e0c : disassembly at namespaces/test/dev.csl : 45.15 :
0x757b488c3e0c    498b3e                  mov rdi, [r14]                                         
 .. li ( int8 REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;    .. 
0x757b488c3e0f    be01000000              mov esi, 0x1                                           
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return r .. 
0x757b488c3e14    4883ff02                cmp rdi, 0x2                                           
0x757b488c3e18    7c15                    jl 0x488c3e2f                 < C_Syntax.factoriali+35 >
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x757b488c3e1a    480faff7                imul rsi, rdi                                          
 .. )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x757b488c3e1e    4883ef01                sub rdi, 0x1                                           
 ..  * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x757b488c3e22    480faff7                imul rsi, rdi                                          
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x757b488c3e26    48ffcf                  dec rdi                                                
0x757b488c3e29    4883ff02                cmp rdi, 0x2                                           
0x757b488c3e2d    7deb                    jge 0x488c3e1a                < C_Syntax.factoriali+14 >
 .. s = res * (n--) ;     }        return res; }  .. 
0x757b488c3e2f    498936                  mov [r14], rsi                                         
 .. es * (n--) ;     }        return res; }  .. 
0x757b488c3e32    c3                      ret                                                    
Word_Disassemble : word - 'factoriali' :: codeSize = 39
Word : 0x0000757b4403a75b :: Compiled at : 0x0000757b488c3e0c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 45.15 <::

 =============================
C_Syntax.factoriali2 <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali2 :> 
int factoriali2 ( int8 REG n | REG res ) { res = 1; do { res = res * n ; n = n - 1 ; } while ( n >= 2 ) ; return res; } 
Source code file location of factoriali2 : "namespaces/test/dev.csl" : 49.16 :: we are now at : namespaces/test/dev.csl : 59.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3e47 -- code size = 26 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali2 : definition = 0x0000757b488c3e47 : disassembly at namespaces/test/dev.csl : 59.16 :
0x757b488c3e47    498b3e                  mov rdi, [r14]                                         
 .. i2 ( int8 REG n | REG res ) {     res = 1;     do      {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x757b488c3e4a    be01000000              mov esi, 0x1                                           
 ..  ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x757b488c3e4f    480faff7                imul rsi, rdi                                          
 ..       {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x757b488c3e53    4883ef01                sub rdi, 0x1                                           
 .. * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x757b488c3e57    4883ff02                cmp rdi, 0x2                                           
0x757b488c3e5b    7df2                    jge 0x488c3e4f                < C_Syntax.factoriali2+8 >
 ..   }     while ( n >= 2 ) ;     return res; } 
0x757b488c3e5d    498936                  mov [r14], rsi                                         
 ..    while ( n >= 2 ) ;     return res; } 
0x757b488c3e60    c3                      ret                                                    
Word_Disassemble : word - 'factoriali2' :: codeSize = 26
Word : 0x0000757b4403fa7b :: Compiled at : 0x0000757b488c3e47
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 59.16 <::
 5040 5040 5040
 =============================
User.factorial006 <:> csl compiled word
SourceCode for User.factorial006 :> 
: factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
Source code file location of factorial006 : "namespaces/test/dev.csl" : 70.2 :: we are now at : namespaces/test/dev.csl : 72.25
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3ec3 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial006 : definition = 0x0000757b488c3ec3 : disassembly at namespaces/test/dev.csl : 72.25 :
 ..                        : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x757b488c3ec3    498b3e                  mov rdi, [r14]                                         
 : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x757b488c3ec6    be01000000              mov esi, 0x1                                           
 .. 6 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488c3ecb    4883ff01                cmp rdi, 0x1                                           
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488c3ecf    7e0d                    jle 0x488c3ede                < User.factorial006+27 >
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488c3ed1    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488c3ed5    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488c3ed8    4883ff01                cmp rdi, 0x1                                           
0x757b488c3edc    7ff3                    jg 0x488c3ed1                 < User.factorial006+14 >
 .. n @ * rec store n -- } while return ( rec @ ) ; 
0x757b488c3ede    498936                  mov [r14], rsi                                         
 .. c store n -- } while return ( rec @ ) ; 
0x757b488c3ee1    c3                      ret                                                    
Word_Disassemble : word - 'factorial006' :: codeSize = 31
Word : 0x0000757b4404624b :: Compiled at : 0x0000757b488c3ec3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 72.25 <::
 5040 factorial006  : ok


 =============================
User.qexp <:> csl compiled word
SourceCode for User.qexp :> 
: qexp dup 1 <= if{ }else{ dup -- qexp * }fi ; 
Source code file location of qexp : "namespaces/test/dev.csl" : 74.2 :: we are now at : namespaces/test/dev.csl : 74.64
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c3ef6 -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: User.qexp : definition = 0x0000757b488c3ef6 : disassembly at namespaces/test/dev.csl : 74.64 :
 ..                                : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3ef6    498b06                  mov rax, [r14]                                         
0x757b488c3ef9    4983c608                add r14, 0x8                                           
0x757b488c3efd    498906                  mov [r14], rax                                         
0x757b488c3f00    b801000000              mov eax, 0x1                                           
 ..                            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f05    488bc8                  mov rcx, rax                                           
0x757b488c3f08    498b06                  mov rax, [r14]                                         
0x757b488c3f0b    4983ee08                sub r14, 0x8                                           
 ..                          : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f0f    483bc1                  cmp rax, rcx                                           
0x757b488c3f12    0f8f05000000            jg 0x757b488c3f1d             < User.qexp+39 >
 ..                   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f18    e936000000              jmp 0x757b488c3f53            < User.qexp+93 >
 ..            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f1d    498b06                  mov rax, [r14]                                         
 ..                       : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f20    4983c608                add r14, 0x8                                           
0x757b488c3f24    498906                  mov [r14], rax                                         
0x757b488c3f27    498b06                  mov rax, [r14]                                         
0x757b488c3f2a    4983ee08                sub r14, 0x8                                           
 ..        : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f2e    48ffc8                  dec rax                                                
0x757b488c3f31    4983c608                add r14, 0x8                                           
0x757b488c3f35    498906                  mov [r14], rax                                         
 ..     : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f38    e8b9ffffff              call 0x757b488c3ef6           < User.qexp : 0x0000757b488c3ef6 >
0x757b488c3f3d    498b0e                  mov rcx, [r14]                                         
0x757b488c3f40    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c3f44    4983ee10                sub r14, 0x10                                          
   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x757b488c3f48    480fafc1                imul rax, rcx                                          
0x757b488c3f4c    4983c608                add r14, 0x8                                           
0x757b488c3f50    498906                  mov [r14], rax                                         
 .. dup 1 <= if{ }else{ dup -- qexp * }fi ; 
0x757b488c3f53    c3                      ret                                                    
Word_Disassemble : word - 'qexp' :: codeSize = 94
Word : 0x0000757b44048e9b :: Compiled at : 0x0000757b488c3ef6
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 74.64 <::
 5040 5040 5040 5040
 5040
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :> 
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs3 : "namespaces/test/dev.csl" : 84.7 :: we are now at : namespaces/test/dev.csl : 92.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4129 -- code size = 73 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x0000757b488c4129 : disassembly at namespaces/test/dev.csl : 92.20 :
0x757b488c4129    4d897e08                mov [r14+0x8], r15                                     
0x757b488c412d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4131    4981c610000000          add r14, 0x10                                          
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x757b488c4138    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c4140    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c4145    7e1b                    jle 0x488c4162                < C_Syntax.faccs3+57 >
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c4147    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c414b    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c414f    480fafc1                imul rax, rcx                                          
0x757b488c4153    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c4157    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c415b    49837ff801              cmp qword [r15-0x8], 0x1                               
0x757b488c4160    7fe5                    jg 0x488c4147                 < C_Syntax.faccs3+30 >
 ..           rec = rec * n ;      }      return rec ; } 
0x757b488c4162    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4166    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c416a    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x757b488c416e    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x757b488c4171    c3                      ret                                                    
Word_Disassemble : word - 'faccs3' :: codeSize = 73
Word : 0x0000757b44050b1b :: Compiled at : 0x0000757b488c4129
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 92.20 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc = facc * ( n -- ) ; } return facc ; } 
Source code file location of fac5 : "namespaces/test/dev.csl" : 98.5 :: we are now at : namespaces/test/dev.csl : 108.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4186 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x0000757b488c4186 : disassembly at namespaces/test/dev.csl : 108.21 :
0x757b488c4186    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x757b488c4189    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x757b488c418e    4883ff01                cmp rdi, 0x1                                           
0x757b488c4192    7e0d                    jle 0x488c41a1                < C_Syntax.fac5+27 >
 .. 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x757b488c4194    480faff7                imul rsi, rdi                                          
 ..    {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x757b488c4198    48ffcf                  dec rdi                                                
0x757b488c419b    4883ff01                cmp rdi, 0x1                                           
0x757b488c419f    7ff3                    jg 0x488c4194                 < C_Syntax.fac5+14 >
 .. c = facc * ( n -- ) ;    }     return facc ; } 
0x757b488c41a1    498936                  mov [r14], rsi                                         
 .. c * ( n -- ) ;    }     return facc ; } 
0x757b488c41a4    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 31
Word : 0x0000757b440544eb :: Compiled at : 0x0000757b488c4186
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 108.21 <::
 5040
 =============================
C_Syntax.faccs <:> csl compiled word
SourceCode for C_Syntax.faccs :> 
int faccs ( REG n | REG rec ) { rec = 1 ; while ( n > 1 ) { rec = rec * n ; n-- ; } return rec ; } 
Source code file location of faccs : "namespaces/test/dev.csl" : 112.6 :: we are now at : namespaces/test/dev.csl : 121.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c41b9 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs : definition = 0x0000757b488c41b9 : disassembly at namespaces/test/dev.csl : 121.19 :
0x757b488c41b9    498b3e                  mov rdi, [r14]                                         
 int faccs ( REG n | REG rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }  .. 
0x757b488c41bc    be01000000              mov esi, 0x1                                           
 .. rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x757b488c41c1    4883ff01                cmp rdi, 0x1                                           
0x757b488c41c5    7e0d                    jle 0x488c41d4                < C_Syntax.faccs+27 >
 .. le ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x757b488c41c7    480faff7                imul rsi, rdi                                          
 ..  1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x757b488c41cb    48ffcf                  dec rdi                                                
0x757b488c41ce    4883ff01                cmp rdi, 0x1                                           
0x757b488c41d2    7ff3                    jg 0x488c41c7                 < C_Syntax.faccs+14 >
 .. = rec * n ;  n-- ;      }      return rec ; } 
0x757b488c41d4    498936                  mov [r14], rsi                                         
 .. * n ;  n-- ;      }      return rec ; } 
0x757b488c41d7    c3                      ret                                                    
Word_Disassemble : word - 'faccs' :: codeSize = 31
Word : 0x0000757b44057ebb :: Compiled at : 0x0000757b488c41b9
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 121.19 <::
 5040
 =============================
C_Syntax.faccs1 <:> csl compiled word
SourceCode for C_Syntax.faccs1 :> 
int faccs1 ( REG n | REG rec ) { rec = 1 ; if ( n > 1 ) { do { rec = rec * n ; n-- ; } while ( n > 1 ) ; } return rec ; } 
Source code file location of faccs1 : "namespaces/test/dev.csl" : 125.7 :: we are now at : namespaces/test/dev.csl : 138.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c41ec -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs1 : definition = 0x0000757b488c41ec : disassembly at namespaces/test/dev.csl : 138.20 :
0x757b488c41ec    498b3e                  mov rdi, [r14]                                         
int faccs1 ( REG n | REG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }    .. 
0x757b488c41ef    be01000000              mov esi, 0x1                                           
 .. EG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }          while ( n > .. 
0x757b488c41f4    4883ff01                cmp rdi, 0x1                                           
0x757b488c41f8    7f00                    jg 0x488c41fa                 < C_Syntax.faccs1+14 >
 .. n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x757b488c41fa    480faff7                imul rsi, rdi                                          
 ..      {              rec = rec * n ;  n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x757b488c41fe    48ffcf                  dec rdi                                                
 ..   n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x757b488c4201    4883ff01                cmp rdi, 0x1                                           
0x757b488c4205    7ff3                    jg 0x488c41fa                 < C_Syntax.faccs1+14 >
 ..    while ( n > 1 ) ;     }     return rec ; }  .. 
0x757b488c4207    498936                  mov [r14], rsi                                         
 .. le ( n > 1 ) ;     }     return rec ; }  .. 
0x757b488c420a    c3                      ret                                                    
Word_Disassemble : word - 'faccs1' :: codeSize = 31
Word : 0x0000757b4405b52b :: Compiled at : 0x0000757b488c41ec
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 138.20 <::
 5040 5040
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :> 
int faccs2 ( REG n | REG rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs2 : "namespaces/test/dev.csl" : 167.7 :: we are now at : namespaces/test/dev.csl : 175.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c42a0 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x0000757b488c42a0 : disassembly at namespaces/test/dev.csl : 175.20 :
0x757b488c42a0    498b3e                  mov rdi, [r14]                                         
 ..  ( REG n | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c42a3    be01000000              mov esi, 0x1                                           
 ..  | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c42a8    4883ff01                cmp rdi, 0x1                                           
 .. EG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c42ac    7e0d                    jle 0x488c42bb                < C_Syntax.faccs2+27 >
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c42ae    480faff7                imul rsi, rdi                                          
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c42b2    48ffcf                  dec rdi                                                
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x757b488c42b5    4883ff01                cmp rdi, 0x1                                           
0x757b488c42b9    7ff3                    jg 0x488c42ae                 < C_Syntax.faccs2+14 >
 ..    rec = rec * n ;      }      return rec ; } 
0x757b488c42bb    498936                  mov [r14], rsi                                         
 ..  = rec * n ;      }      return rec ; } 
0x757b488c42be    c3                      ret                                                    
Word_Disassemble : word - 'faccs2' :: codeSize = 31
Word : 0x0000757b4406587b :: Compiled at : 0x0000757b488c42a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 175.20 <::
 5040 5040
 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 196.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 196.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 196.15 <::

 =============================
User.ifx <:> csl compiled word
SourceCode for User.ifx :> 
: ifx ( n w | k ) { k 1 = } { k @ n @ <= } { k ++ } { w @ _ifx } for ; 
Source code file location of ifx : "namespaces/test/dev.csl" : 220.2 :: we are now at : namespaces/test/dev.csl : 224.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4631 -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: User.ifx : definition = 0x0000757b488c4631 : disassembly at namespaces/test/dev.csl : 224.16 :
0x757b488c4631    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4635    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4639    4981c610000000          add r14, 0x10                                          
 ..          : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x757b488c4640    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..    : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x757b488c4648    498b4708                mov rax, [r15+0x8]                                     
   : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x757b488c464c    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c4650    483bc1                  cmp rax, rcx                                           
 .. n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c4653    7f2d                    jg 0x488c4682                 < User.ifx+81 >
0x757b488c4655    0f1f4000                nop [rax]                                              
 ..  1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c4659    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c465d    4983c608                add r14, 0x8                                           
0x757b488c4661    498906                  mov [r14], rax                                         
 ..  } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c4664    49ba0c458c487b750000    mov r10, 0x757b488c450c                                
0x757b488c466e    49ffd2                  call r10                      < User._ifx : 0x0000757b488c450c >
 .. k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c4671    49ff4708                inc qword [r15+0x8]                                    
 ..       { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c4675    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4679    498b4ff0                mov rcx, [r15-0x10]                                    
0x757b488c467d    483bc1                  cmp rax, rcx                                           
0x757b488c4680    7ed7                    jle 0x488c4659                < User.ifx+40 >
0x757b488c4682    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4686    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c468a    4983ee10                sub r14, 0x10                                          
 .. @ <= } { k ++ }      { w @ _ifx } for ; 
0x757b488c468e    c3                      ret                                                    
Word_Disassemble : word - 'ifx' :: codeSize = 94
Word : 0x0000757b4407b3cb :: Compiled at : 0x0000757b488c4631
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 224.16 <::

 =============================
User._ffx <:> csl compiled word
SourceCode for User._ffx :> 
: _ffx ( n w | t ) nl 7 w @ wordRun decimal p nl { t 0 = } { t @ n @ < } { t ++ } { reps @ w @ ifx } for ; 
Source code file location of _ffx : "namespaces/test/dev.csl" : 227.2 :: we are now at : namespaces/test/dev.csl : 232.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c46f7 -- code size = 242 bytes
TypeSignature : 
 -----------------------------
Word :: User._ffx : definition = 0x0000757b488c46f7 : disassembly at namespaces/test/dev.csl : 232.17 :
0x757b488c46f7    4d897e08                mov [r14+0x8], r15                                     
0x757b488c46fb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c46ff    4981c610000000          add r14, 0x10                                          
0x757b488c4706    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c4710    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c471a    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..            : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x757b488c471d    b807000000              mov eax, 0x7                                           
0x757b488c4722    4983c608                add r14, 0x8                                           
0x757b488c4726    498906                  mov [r14], rax                                         
 ..          : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x757b488c4729    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c472d    4983c608                add r14, 0x8                                           
0x757b488c4731    498906                  mov [r14], rax                                         
 ..      : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x757b488c4734    49bb000eeaa65f5b0000    mov r11, 0x5b5fa6ea0e00                                
0x757b488c473e    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c4748    49ffd2                  call r10                      < Word.wordRun : 0x00005b5fa6ea0e00 >
 : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x757b488c474b    49bb9003eaa65f5b0000    mov r11, 0x5b5fa6ea0390                                
0x757b488c4755    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c475f    49ffd2                  call r10                      < System.decimal : 0x00005b5fa6ea0390 >
 .. w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c4762    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488c476c    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c476f    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c4779    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c4783    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. l 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c4786    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c478e    498b4708                mov rax, [r15+0x8]                                     
 .. rdRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c4792    498b4ff0                mov rcx, [r15-0x10]                                    
 .. n decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c4796    483bc1                  cmp rax, rcx                                           
 .. decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c4799    7d41                    jge 0x488c47dc                < User._ffx+229 >
0x757b488c479b    0f1f4000                nop [rax]                                              
 .. t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c479f    48b83b0608447b750000    mov rax, 0x757b4408063b                                
0x757b488c47a9    488b00                  mov rax, [rax]                                         
0x757b488c47ac    4983c608                add r14, 0x8                                           
0x757b488c47b0    498906                  mov [r14], rax                                         
 ..  { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c47b3    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c47b7    4983c608                add r14, 0x8                                           
0x757b488c47bb    498906                  mov [r14], rax                                         
 ..  @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c47be    49ba31468c487b750000    mov r10, 0x757b488c4631                                
0x757b488c47c8    49ffd2                  call r10                      < User.ifx : 0x0000757b488c4631 >
 .. l p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c47cb    49ff4708                inc qword [r15+0x8]                                    
 ..  nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c47cf    498b4708                mov rax, [r15+0x8]                                     
0x757b488c47d3    498b4ff0                mov rcx, [r15-0x10]                                    
0x757b488c47d7    483bc1                  cmp rax, rcx                                           
0x757b488c47da    7cc3                    jl 0x488c479f                 < User._ffx+168 >
0x757b488c47dc    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c47e0    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c47e4    4983ee10                sub r14, 0x10                                          
 .. { t ++ }      { reps @ w @ ifx } for  ; 
0x757b488c47e8    c3                      ret                                                    
Word_Disassemble : word - '_ffx' :: codeSize = 242
Word : 0x0000757b4408075b :: Compiled at : 0x0000757b488c46f7
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 232.17 <::

 ffx ... 

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 246.9 :: we are now at : namespaces/test/dev.csl : 259.22
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4c16 -- code size = 49 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c4c16 : disassembly at namespaces/test/dev.csl : 259.22 :
0x757b488c4c16    498b0e                  mov rcx, [r14]                                         
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x757b488c4c19    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c4c20    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c4c27    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c4c2c    4883f900                cmp rcx, 0x0                                           
0x757b488c4c30    7411                    jz 0x488c4c43                 < C_Syntax.fibPTC2?+45 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c4c32    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c4c35    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c4c38    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c4c3b    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c4c3e    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c4c41    75ef                    jnz 0x488c4c32                < C_Syntax.fibPTC2?+28 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c4c43    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c4c46    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 49
Word : 0x0000757b4408dacb :: Compiled at : 0x0000757b488c4c16
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 259.22 <::
 6765
 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000457993 seconds
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000861323 seconds
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000436954 seconds
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000431754 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000437285 seconds
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002925326 seconds
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003380585 seconds
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003246191 seconds
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002915237 seconds
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 qexp2 :
Timer [ 1 ] : elapsed time = 0.002929924 seconds
 :: function : qexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003339236 seconds
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003219592 seconds
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp3 :
Timer [ 1 ] : elapsed time = 0.002634148 seconds
 :: function : bexp3 : called on args : 1 - 23 : 1000 reps

 5040

 fac :
Timer [ 1 ] : elapsed time = 0.000757879 seconds
 :: function : fac : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000616943 seconds
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000457061 seconds
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 factorial2 :
Timer [ 1 ] : elapsed time = 0.000583360 seconds
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 5040

 factorial006 :
Timer [ 1 ] : elapsed time = 0.000443546 seconds
 :: function : factorial006 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000437645 seconds
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000465948 seconds
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000474164 seconds
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000448195 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000844853 seconds
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000441923 seconds
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000444218 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial_O3 :
Timer [ 1 ] : elapsed time = 0.000970911 seconds
 :: function : cfactorial_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2_O3 :
Timer [ 1 ] : elapsed time = 0.000452012 seconds
 :: function : cfactorial2_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3_O3 :
Timer [ 1 ] : elapsed time = 0.000446852 seconds
 :: function : cfactorial3_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial4_O3 :
Timer [ 1 ] : elapsed time = 0.000400535 seconds
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

Using Namespaces :> User Root C int Locals Int Logic Compiler Interpreter Shell Defines Stack Asm void Combinators X64 int64 byte uint64 uint8 Bits Compiling a Ar1 DLLNodeAlloc DLLNode Buffer Class Experimental Buffer2048 typedef byteTest Experimental3 xbt _byteTest w Experimental libc CBuffer Dlsym String chey0 CObj chey System Debug Ar9 Ar3 Ar2 Control DObject Lexer testD a112 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil Io Word Macro Namespace StartupMacros Reserved PreProcessor Memory Colors File Array MemorySpace Forth L9 

 5040

 faccs :
Timer [ 1 ] : elapsed time = 0.000479684 seconds
 :: function : faccs : called on args : 1 - 23 : 1000 reps

 5040

 faccs1 :
Timer [ 1 ] : elapsed time = 0.000628886 seconds
 :: function : faccs1 : called on args : 1 - 23 : 1000 reps

 5040

 faccs2 :
Timer [ 1 ] : elapsed time = 0.000477220 seconds
 :: function : faccs2 : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000611974 seconds
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 fac40 :
Timer [ 1 ] : elapsed time = 0.000786163 seconds
 :: function : fac40 : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.cpow <:> csl compiled word
SourceCode for C_Syntax.cpow :> 
int cpow ( base power | out ) { for ( out = 1 ; power ; power -- ) { out = out * base ; } return out ; } 
Source code file location of cpow : "namespaces/test/dev.csl" : 315.9 :: we are now at : namespaces/test/dev.csl : 317.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4c4c -- code size = 87 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x0000757b488c4c4c : disassembly at namespaces/test/dev.csl : 317.17 :
0x757b488c4c4c    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4c50    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4c54    4981c610000000          add r14, 0x10                                          
int cpow ( base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }  .. 
0x757b488c4c5b    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c63    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c4c67    4883f800                cmp rax, 0x0                                           
0x757b488c4c6b    7422                    jz 0x488c4c8f                 < C_Syntax.cpow+67 >
0x757b488c4c6d    0f1f4000                nop [rax]                                              
 .. out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c71    498b4708                mov rax, [r15+0x8]                                     
 .. 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c75    498b4ff0                mov rcx, [r15-0x10]                                    
 .. = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c79    480fafc1                imul rax, rcx                                          
 .. for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c7d    49894708                mov [r15+0x8], rax                                     
 .. out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c81    49ff4ff8                dec qword [r15-0x8]                                    
 .. ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c85    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c4c89    4883f800                cmp rax, 0x0                                           
0x757b488c4c8d    75e2                    jnz 0x488c4c71                < C_Syntax.cpow+37 >
 ..  ; power --  ) { out = out * base ; } return out ; } 
0x757b488c4c8f    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4c93    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4c97    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4c9b    4983ee08                sub r14, 0x8                                           
 .. r --  ) { out = out * base ; } return out ; } 
0x757b488c4c9f    498906                  mov [r14], rax                                         
 .. ) { out = out * base ; } return out ; } 
0x757b488c4ca2    c3                      ret                                                    
Word_Disassemble : word - 'cpow' :: codeSize = 87
Word : 0x0000757b4409365b :: Compiled at : 0x0000757b488c4c4c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 317.17 <::
 1073741824 1073741824
 =============================
Root.pow <:> csl compiled word
SourceCode for Root.pow :> 
: pow ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of pow : "namespaces/test/dev.csl" : 322.2 :: we are now at : namespaces/test/dev.csl : 325.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4ca8 -- code size = 101 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.pow : definition = 0x0000757b488c4ca8 : disassembly at namespaces/test/dev.csl : 325.11 :
0x757b488c4ca8    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4cac    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4cb0    4981c610000000          add r14, 0x10                                          
 ..  ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cb7    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cbf    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cc4    7e33                    jle 0x488c4cf9                < Root.pow+81 >
0x757b488c4cc6    0f1f4000                nop [rax]                                              
 .. 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cca    498d4708                lea rax, [r15+0x8]                                     
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cce    4983c608                add r14, 0x8                                           
0x757b488c4cd2    498906                  mov [r14], rax                                         
 .. } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cd5    498b4708                mov rax, [r15+0x8]                                     
 .. wer @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cd9    498b4ff0                mov rcx, [r15-0x10]                                    
0x757b488c4cdd    480fafc1                imul rax, rcx                                          
 ..  > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4ce1    488bc8                  mov rcx, rax                                           
0x757b488c4ce4    498b06                  mov rax, [r14]                                         
0x757b488c4ce7    4983ee08                sub r14, 0x8                                           
 ..  } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4ceb    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cee    49ff4ff8                dec qword [r15-0x8]                                    
 .. out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cf2    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488c4cf7    7fd1                    jg 0x488c4cca                 < Root.pow+34 >
 .. er --  } { out out @ base @ * = } for return out @ ; 
0x757b488c4cf9    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4cfd    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4d01    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4d05    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4d09    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4d0c    c3                      ret                                                    
Word_Disassemble : word - 'pow' :: codeSize = 101
Word : 0x0000757b44096ccb :: Compiled at : 0x0000757b488c4ca8
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 325.11 <::

 65536

Timer [ 1 ] : elapsed time = 0.000990016 seconds

 1073741824
 =============================
Root.powReg <:> csl compiled word
SourceCode for Root.powReg :> 
: powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg : "namespaces/test/dev.csl" : 326.2 :: we are now at : namespaces/test/dev.csl : 328.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4d21 -- code size = 46 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg : definition = 0x0000757b488c4d21 : disassembly at namespaces/test/dev.csl : 328.14 :
 ..                              : powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base  .. 
0x757b488c4d21    498b36                  mov rsi, [r14]                                         
0x757b488c4d24    498b7ef8                mov rdi, [r14-0x8]                                     
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d28    ba01000000              mov edx, 0x1                                           
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d2d    4883fe00                cmp rsi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d31    7e14                    jle 0x488c4d47                < Root.powReg+38 >
 .. power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d33    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d37    488bc2                  mov rax, rdx                                           
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d3a    480fafd7                imul rdx, rdi                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d3e    48ffce                  dec rsi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d41    4883fe00                cmp rsi, 0x0                                           
0x757b488c4d45    7ff0                    jg 0x488c4d37                 < Root.powReg+22 >
0x757b488c4d47    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4d4b    498916                  mov [r14], rdx                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4d4e    c3                      ret                                                    
Word_Disassemble : word - 'powReg' :: codeSize = 46
Word : 0x0000757b44099fdb :: Compiled at : 0x0000757b488c4d21
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 328.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.000864410 seconds

 1073741824
 =============================
Root.powReg2 <:> csl compiled word
SourceCode for Root.powReg2 :> 
: powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg2 : "namespaces/test/dev.csl" : 329.2 :: we are now at : namespaces/test/dev.csl : 331.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4d54 -- code size = 70 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg2 : definition = 0x0000757b488c4d54 : disassembly at namespaces/test/dev.csl : 331.15 :
0x757b488c4d54    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4d58    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4d5c    4981c608000000          add r14, 0x8                                           
 ..                             : powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x757b488c4d63    498b7ff8                mov rdi, [r15-0x8]                                     
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d67    be01000000              mov esi, 0x1                                           
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d6c    4883ff00                cmp rdi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d70    7e18                    jle 0x488c4d8a                < Root.powReg2+54 >
 .. power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d72    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d76    488bc6                  mov rax, rsi                                           
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d79    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d7d    480faff1                imul rsi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d81    48ffcf                  dec rdi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4d84    4883ff00                cmp rdi, 0x0                                           
0x757b488c4d88    7fec                    jg 0x488c4d76                 < Root.powReg2+34 >
0x757b488c4d8a    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4d8e    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4d92    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4d96    498936                  mov [r14], rsi                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4d99    c3                      ret                                                    
Word_Disassemble : word - 'powReg2' :: codeSize = 70
Word : 0x0000757b4409d2eb :: Compiled at : 0x0000757b488c4d54
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 331.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000859070 seconds

 1073741824
 =============================
Root.powReg3 <:> csl compiled word
SourceCode for Root.powReg3 :> 
: powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg3 : "namespaces/test/dev.csl" : 332.2 :: we are now at : namespaces/test/dev.csl : 335.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4d9f -- code size = 69 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg3 : definition = 0x0000757b488c4d9f : disassembly at namespaces/test/dev.csl : 335.15 :
0x757b488c4d9f    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4da3    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4da7    4981c608000000          add r14, 0x8                                           
 ..                             : powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x757b488c4dae    498b7ff0                mov rdi, [r15-0x10]                                    
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4db2    be01000000              mov esi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4db7    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4dbc    7e16                    jle 0x488c4dd4                < Root.powReg3+53 >
0x757b488c4dbe    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4dc2    488bc6                  mov rax, rsi                                           
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4dc5    480faff7                imul rsi, rdi                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4dc9    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4dcd    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4dd2    7fee                    jg 0x488c4dc2                 < Root.powReg3+35 >
0x757b488c4dd4    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4dd8    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4ddc    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4de0    498936                  mov [r14], rsi                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4de3    c3                      ret                                                    
Word_Disassemble : word - 'powReg3' :: codeSize = 69
Word : 0x0000757b440a05fb :: Compiled at : 0x0000757b488c4d9f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 335.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000817432 seconds

 1073741824
 =============================
Root.powReg4 <:> csl compiled word
SourceCode for Root.powReg4 :> 
: powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg4 : "namespaces/test/dev.csl" : 336.2 :: we are now at : namespaces/test/dev.csl : 339.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4de9 -- code size = 102 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg4 : definition = 0x0000757b488c4de9 : disassembly at namespaces/test/dev.csl : 339.15 :
0x757b488c4de9    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4ded    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4df1    4981c610000000          add r14, 0x10                                          
 ..                             : powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x757b488c4df8    498b77f8                mov rsi, [r15-0x8]                                     
0x757b488c4dfc    498b7ff0                mov rdi, [r15-0x10]                                    
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e00    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e08    4883fe00                cmp rsi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e0c    7e2d                    jle 0x488c4e3b                < Root.powReg4+82 >
 .. REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e0e    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e12    498d4708                lea rax, [r15+0x8]                                     
0x757b488c4e16    4983c608                add r14, 0x8                                           
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e1a    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e1d    498b4708                mov rax, [r15+0x8]                                     
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e21    480fafc7                imul rax, rdi                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e25    488bc8                  mov rcx, rax                                           
0x757b488c4e28    498b06                  mov rax, [r14]                                         
0x757b488c4e2b    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e2f    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e32    48ffce                  dec rsi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e35    4883fe00                cmp rsi, 0x0                                           
0x757b488c4e39    7fd7                    jg 0x488c4e12                 < Root.powReg4+41 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e3b    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4e3f    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4e43    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4e47    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4e4b    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4e4e    c3                      ret                                                    
Word_Disassemble : word - 'powReg4' :: codeSize = 102
Word : 0x0000757b440a390b :: Compiled at : 0x0000757b488c4de9
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 339.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000930134 seconds

 1073741824
 =============================
Root.powReg5 <:> csl compiled word
SourceCode for Root.powReg5 :> 
: powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg5 : "namespaces/test/dev.csl" : 340.2 :: we are now at : namespaces/test/dev.csl : 343.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4e54 -- code size = 102 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg5 : definition = 0x0000757b488c4e54 : disassembly at namespaces/test/dev.csl : 343.15 :
0x757b488c4e54    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4e58    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4e5c    4981c610000000          add r14, 0x10                                          
 ..                             : powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = }  .. 
0x757b488c4e63    498b7ff8                mov rdi, [r15-0x8]                                     
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e67    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e6f    4883ff00                cmp rdi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e73    7e31                    jle 0x488c4ea6                < Root.powReg5+82 >
 .. REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e75    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e79    498d4708                lea rax, [r15+0x8]                                     
0x757b488c4e7d    4983c608                add r14, 0x8                                           
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e81    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e84    498b4708                mov rax, [r15+0x8]                                     
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e88    498b4ff0                mov rcx, [r15-0x10]                                    
0x757b488c4e8c    480fafc1                imul rax, rcx                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e90    488bc8                  mov rcx, rax                                           
0x757b488c4e93    498b06                  mov rax, [r14]                                         
0x757b488c4e96    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e9a    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4e9d    48ffcf                  dec rdi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ea0    4883ff00                cmp rdi, 0x0                                           
0x757b488c4ea4    7fd3                    jg 0x488c4e79                 < Root.powReg5+37 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ea6    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4eaa    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4eae    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4eb2    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4eb6    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4eb9    c3                      ret                                                    
Word_Disassemble : word - 'powReg5' :: codeSize = 102
Word : 0x0000757b440a6c1b :: Compiled at : 0x0000757b488c4e54
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 343.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.001074857 seconds

 1073741824
 =============================
Root.powReg6 <:> csl compiled word
SourceCode for Root.powReg6 :> 
: powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg6 : "namespaces/test/dev.csl" : 344.2 :: we are now at : namespaces/test/dev.csl : 346.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4ebf -- code size = 101 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg6 : definition = 0x0000757b488c4ebf : disassembly at namespaces/test/dev.csl : 346.15 :
0x757b488c4ebf    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4ec3    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4ec7    4981c610000000          add r14, 0x10                                          
 ..                             : powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = }  .. 
0x757b488c4ece    498b7ff0                mov rdi, [r15-0x10]                                    
 .. EG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ed2    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4eda    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4edf    7e2f                    jle 0x488c4f10                < Root.powReg6+81 >
0x757b488c4ee1    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ee5    498d4708                lea rax, [r15+0x8]                                     
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ee9    4983c608                add r14, 0x8                                           
0x757b488c4eed    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ef0    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4ef4    480fafc7                imul rax, rdi                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4ef8    488bc8                  mov rcx, rax                                           
0x757b488c4efb    498b06                  mov rax, [r14]                                         
0x757b488c4efe    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f02    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f05    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f09    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488c4f0e    7fd5                    jg 0x488c4ee5                 < Root.powReg6+38 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f10    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4f14    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4f18    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4f1c    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4f20    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4f23    c3                      ret                                                    
Word_Disassemble : word - 'powReg6' :: codeSize = 101
Word : 0x0000757b440a9f2b :: Compiled at : 0x0000757b488c4ebf
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 346.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.001760750 seconds

 1073741824
 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :> 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg7 : "namespaces/test/dev.csl" : 347.2 :: we are now at : namespaces/test/dev.csl : 349.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4f29 -- code size = 69 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg7 : definition = 0x0000757b488c4f29 : disassembly at namespaces/test/dev.csl : 349.20 :
0x757b488c4f29    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4f2d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4f31    4981c608000000          add r14, 0x8                                           
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f38    bf01000000              mov edi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f3d    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f42    7e1a                    jle 0x488c4f5e                < Root.powReg7+53 >
0x757b488c4f44    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f48    488bc7                  mov rax, rdi                                           
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f4b    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f4f    480faff9                imul rdi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f53    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f57    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488c4f5c    7fea                    jg 0x488c4f48                 < Root.powReg7+31 >
0x757b488c4f5e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4f62    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4f66    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4f6a    49893e                  mov [r14], rdi                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4f6d    c3                      ret                                                    
Word_Disassemble : word - 'powReg7' :: codeSize = 69
Word : 0x0000757b440ad23b :: Compiled at : 0x0000757b488c4f29
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 349.20 <::

 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :> 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg7 : "namespaces/test/dev.csl" : 347.2 :: we are now at : namespaces/test/dev.csl : 350.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c4f29 -- code size = 69 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg7 : definition = 0x0000757b488c4f29 : disassembly at namespaces/test/dev.csl : 350.15 :
0x757b488c4f29    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4f2d    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4f31    4981c608000000          add r14, 0x8                                           
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f38    bf01000000              mov edi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f3d    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f42    7e1a                    jle 0x488c4f5e                < Root.powReg7+53 >
0x757b488c4f44    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f48    488bc7                  mov rax, rdi                                           
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f4b    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f4f    480faff9                imul rdi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f53    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x757b488c4f57    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488c4f5c    7fea                    jg 0x488c4f48                 < Root.powReg7+31 >
0x757b488c4f5e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4f62    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c4f66    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x757b488c4f6a    49893e                  mov [r14], rdi                                         
 .. t out @ base @ * = } for return out @ ; 
0x757b488c4f6d    c3                      ret                                                    
Word_Disassemble : word - 'powReg7' :: codeSize = 69
Word : 0x0000757b440ad23b :: Compiled at : 0x0000757b488c4f29
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 350.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000863508 seconds


 =============================
Int.** <:> C compiled primitive, infixable
SourceCode for Int.** :> 
C Primitive
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Int.** : definition = 0x00005b5fa6ea4610 : disassembly at namespaces/test/dev.csl : 352.10 :
0x5b5fa6ea4610    498b3e                  mov rdi, [r14]                                         
0x5b5fa6ea4613    498b4ef8                mov rcx, [r14-0x8]                                     
0x5b5fa6ea4617    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea461a    4889fa                  mov rdx, rdi                                           
0x5b5fa6ea461d    4889c8                  mov rax, rcx                                           
0x5b5fa6ea4620    4883ea01                sub rdx, 0x1                                           
0x5b5fa6ea4624    7428                    jz 0xa6ea464e                 < C compiler code >        
0x5b5fa6ea4626    f6c201                  test dl, 0x1                                           
0x5b5fa6ea4629    7415                    jz 0xa6ea4640                 < C compiler code >        
0x5b5fa6ea462b    480fafc1                imul rax, rcx                                          
0x5b5fa6ea462f    4883ef02                sub rdi, 0x2                                           
0x5b5fa6ea4633    4889fa                  mov rdx, rdi                                           
0x5b5fa6ea4636    7416                    jz 0xa6ea464e                 < C compiler code >        
0x5b5fa6ea4638    0f1f840000000000        nop [rax+rax]                                          
0x5b5fa6ea4640    480fafc1                imul rax, rcx                                          
0x5b5fa6ea4644    480fafc1                imul rax, rcx                                          
0x5b5fa6ea4648    4883ea02                sub rdx, 0x2                                           
0x5b5fa6ea464c    75f2                    jnz 0xa6ea4640                < C compiler code >        
0x5b5fa6ea464e    488946f8                mov [rsi-0x8], rax                                     
0x5b5fa6ea4652    e9a99efcff              jmp 0x5b5fa6e6e500            < C compiler code >        
0x5b5fa6ea4657    660f1f840000000000      o16 nop [rax+rax]                                      
0x5b5fa6ea4660    498b16                  mov rdx, [r14]                                         
0x5b5fa6ea4663    4c89f1                  mov rcx, r14                                           
0x5b5fa6ea4666    b801000000              mov eax, 0x1                                           
0x5b5fa6ea466b    4883fa01                cmp rdx, 0x1                                           
0x5b5fa6ea466f    7f07                    jg 0xa6ea4678                 < C compiler code >        
0x5b5fa6ea4671    488901                  mov [rcx], rax                                         
0x5b5fa6ea4674    c3                      ret                                                    
Word_Disassemble : word - '**' :: codeSize = 102
Word : 0x0000757b48418468 :: Compiled at : 0x00005b5fa6ea4610
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 352.10 <::

 65536

Timer [ 1 ] : elapsed time = 0.000955331 seconds


 =============================
Int.pow_03 <:> C compiled primitive, infixable
SourceCode for Int.pow_03 :> 
C Primitive
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Int.pow_03 : definition = 0x00005b5fa6ea3e20 : disassembly at namespaces/test/dev.csl : 353.14 :
0x5b5fa6ea3e20    498b3e                  mov rdi, [r14]                                         
0x5b5fa6ea3e23    498b4ef8                mov rcx, [r14-0x8]                                     
0x5b5fa6ea3e27    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea3e2a    4889fa                  mov rdx, rdi                                           
0x5b5fa6ea3e2d    4889c8                  mov rax, rcx                                           
0x5b5fa6ea3e30    4883ea01                sub rdx, 0x1                                           
0x5b5fa6ea3e34    7428                    jz 0xa6ea3e5e                 < C compiler code >        
0x5b5fa6ea3e36    f6c201                  test dl, 0x1                                           
0x5b5fa6ea3e39    7415                    jz 0xa6ea3e50                 < C compiler code >        
0x5b5fa6ea3e3b    480fafc1                imul rax, rcx                                          
0x5b5fa6ea3e3f    4883ef02                sub rdi, 0x2                                           
0x5b5fa6ea3e43    4889fa                  mov rdx, rdi                                           
0x5b5fa6ea3e46    7416                    jz 0xa6ea3e5e                 < C compiler code >        
0x5b5fa6ea3e48    0f1f840000000000        nop [rax+rax]                                          
0x5b5fa6ea3e50    480fafc1                imul rax, rcx                                          
0x5b5fa6ea3e54    480fafc1                imul rax, rcx                                          
0x5b5fa6ea3e58    4883ea02                sub rdx, 0x2                                           
0x5b5fa6ea3e5c    75f2                    jnz 0xa6ea3e50                < C compiler code >        
0x5b5fa6ea3e5e    488946f8                mov [rsi-0x8], rax                                     
0x5b5fa6ea3e62    e999a6fcff              jmp 0x5b5fa6e6e500            < C compiler code >        
0x5b5fa6ea3e67    660f1f840000000000      o16 nop [rax+rax]                                      
0x5b5fa6ea3e70    4155                    push r13                                               
0x5b5fa6ea3e72    4989fd                  mov r13, rdi                                           
0x5b5fa6ea3e75    4154                    push r12                                               
0x5b5fa6ea3e77    55                      push rbp                                               
0x5b5fa6ea3e78    53                      push rbx                                               
0x5b5fa6ea3e79    4881ecc8000000          sub rsp, 0xc8                                          
0x5b5fa6ea3e80    4883ff01                cmp rdi, 0x1                                           
0x5b5fa6ea3e84    0f8ee6030000            jle 0x5b5fa6ea4270            < C compiler code >        
0x5b5fa6ea3e8a    488d57ff                lea rdx, [rdi-0x1]                                     
0x5b5fa6ea3e8e    4889fd                  mov rbp, rdi                                           
0x5b5fa6ea3e91    4531e4                  xor r12d, r12d                                         
0x5b5fa6ea3e94    4889d0                  mov rax, rdx                                           
0x5b5fa6ea3e97    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea3e9a    4883e0fe                and rax, 0xfffffffffffffffe                              
0x5b5fa6ea3e9e    4829                    invalid                                                
Word_Disassemble : word - 'pow_03' :: codeSize = 127
Word : 0x0000757b484187c8 :: Compiled at : 0x00005b5fa6ea3e20
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 353.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.001079505 seconds



Word :: C.tt : definition = 0x0000757b488c4f73 : disassembly at namespaces/test/dev.csl : 359.22 :
0x757b488c4f73    4d897e08                mov [r14+0x8], r15                                     
0x757b488c4f77    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c4f7b    4981c610000000          add r14, 0x10                                          
 ..                      : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x757b488c4f82    49c7470806000000        mov qword [r15+0x8], 0x6                               
 ..                  : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x757b488c4f8a    49ff4708                inc qword [r15+0x8]                                    
 ..               : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x757b488c4f8e    498b4708                mov rax, [r15+0x8]                                     
0x757b488c4f92    4983c608                add r14, 0x8                                           
0x757b488c4f96    498906                  mov [r14], rax                                         
 ..           : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x757b488c4f99    49bae5c48a487b750000    mov r10, 0x757b488ac4e5                                
0x757b488c4fa3    49ffd2                  call r10                      < Int.p : 0x0000757b488ac4e5 >
0x757b488c4fa6    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c4faa    4d8b7e08                mov r15, [r14+0x8]                                     
 ..         : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x757b488c4fae    c3                      ret                                                    
Word_Disassemble : word - 'tt' :: codeSize = 60 7 
should show 7
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :> 
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev.csl : 386.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c1042 -- code size = 172 bytes
TypeSignature : 
 -----------------------------
Word :: C.fibPTC? : definition = 0x0000757b488c1042 : disassembly at namespaces/test/dev.csl : 386.21 :
0x757b488c1042    4d897e08                mov [r14+0x8], r15                                     
0x757b488c1046    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c104a    4981c620000000          add r14, 0x20                                          
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =       .. 
0x757b488c1051    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn f .. 
0x757b488c1059    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 .. 
0x757b488c1061    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = .. 
0x757b488c1069    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c106d    4883f800                cmp rax, 0x0                                           
0x757b488c1071    746b                    jz 0x488c10de                 < C.fibPTC?+156 >
0x757b488c1073    0f1f4000                nop [rax]                                              
0x757b488c1077    498d4710                lea rax, [r15+0x10]                                    
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c107b    498b4f18                mov rcx, [r15+0x18]                                    
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c107f    488908                  mov [rax], rcx                                         
0x757b488c1082    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c1086    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c108a    488908                  mov [rax], rcx                                         
0x757b488c108d    498d4708                lea rax, [r15+0x8]                                     
0x757b488c1091    4983c608                add r14, 0x8                                           
0x757b488c1095    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c1098    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c109c    498b4f18                mov rcx, [r15+0x18]                                    
0x757b488c10a0    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10a3    488bc8                  mov rcx, rax                                           
0x757b488c10a6    498b06                  mov rax, [r14]                                         
0x757b488c10a9    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10ad    488908                  mov [rax], rcx                                         
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  .. 
0x757b488c10b0    498d47f8                lea rax, [r15-0x8]                                     
0x757b488c10b4    4983c608                add r14, 0x8                                           
0x757b488c10b8    498906                  mov [r14], rax                                         
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    .. 
0x757b488c10bb    498b47f8                mov rax, [r15-0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo .. 
0x757b488c10bf    b901000000              mov ecx, 0x1                                           
0x757b488c10c4    482bc1                  sub rax, rcx                                           
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  .. 
0x757b488c10c7    488bc8                  mov rcx, rax                                           
0x757b488c10ca    498b06                  mov rax, [r14]                                         
0x757b488c10cd    4983ee08                sub r14, 0x8                                           
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    .. 
0x757b488c10d1    488908                  mov [rax], rcx                                         
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488c10d4    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c10d8    4883f800                cmp rax, 0x0                                           
0x757b488c10dc    7599                    jnz 0x488c1077                < C.fibPTC?+53 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10de    498b4708                mov rax, [r15+0x8]                                     
0x757b488c10e2    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c10e6    4d8b7e08                mov r15, [r14+0x8]                                     
 .. @ fn2 @ + =      }     for     return fn @ ;  .. 
0x757b488c10ea    498906                  mov [r14], rax                                         
 ..  @ + =      }     for     return fn @ ;  .. 
0x757b488c10ed    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC?' :: codeSize = 172
Word : 0x0000757b43f6b803 :: Compiled at : 0x0000757b488c1042
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 386.21 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 400.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 400.13 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 400.13 <::
 6765
 13

 fibPTC? :
Timer [ 1 ] : elapsed time = 0.002546982 seconds
 :: function : fibPTC? : called on args : 1 - 23 : 1000 reps

 13

 fibPTC2? :
Timer [ 1 ] : elapsed time = 0.000436853 seconds
 :: function : fibPTC2? : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.fibPTC4? <:> csl compiled word
SourceCode for C_Syntax.fibPTC4? :> 
int fibPTC4? ( REG n | REG fn, REG fn1, REG fn2 ) { fn = 0, fn1 = 0, fn2 = 1 ; do { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; n -- ; } while ( n > 0 ) ; return fn ; } 
Source code file location of fibPTC4? : "namespaces/test/dev.csl" : 405.9 :: we are now at : namespaces/test/dev.csl : 418.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50fc -- code size = 51 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC4? : definition = 0x0000757b488c50fc : disassembly at namespaces/test/dev.csl : 418.13 :
0x757b488c50fc    498b0e                  mov rcx, [r14]                                         
 .. | REG fn, REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + .. 
0x757b488c50ff    48c7c200000000          mov rdx, 0x0                                           
 ..  REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;    .. 
0x757b488c5106    48c7c700000000          mov rdi, 0x0                                           
 ..  REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n  .. 
0x757b488c510d    be01000000              mov esi, 0x1                                           
 .. 2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     .. 
0x757b488c5112    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c5115    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c5118    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c511b    488bd7                  mov rdx, rdi                                           
 .. ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c511e    48ffc9                  dec rcx                                                
 .. ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c5121    4883f900                cmp rcx, 0x0                                           
0x757b488c5125    7feb                    jg 0x488c5112                 < C_Syntax.fibPTC4?+22 >
 .. fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c5127    0f1f4000                nop [rax]                                              
 ..    }     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c512b    498916                  mov [r14], rdx                                         
 ..     while ( n > 0 ) ;     return fn ; }  .. 
0x757b488c512e    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC4?' :: codeSize = 51
Word : 0x0000757b440c078b :: Compiled at : 0x0000757b488c50fc
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 418.13 <::

 13

 fibPTC4? :
Timer [ 1 ] : elapsed time = 0.000456861 seconds
 :: function : fibPTC4? : called on args : 1 - 23 : 1000 reps
 6765
 13

 cfib2_O3 :
Timer [ 1 ] : elapsed time = 0.000440881 seconds
 :: function : cfib2_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User._fibn1 <:> csl compiled word
SourceCode for User._fibn1 :> 
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @ _fibn1 + } ifElse return tos ; 
Source code file location of _fibn1 : "namespaces/test/dev.csl" : 427.2 :: we are now at : namespaces/test/dev.csl : 428.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c5134 -- code size = 115 bytes
TypeSignature : 
 -----------------------------
Word :: User._fibn1 : definition = 0x0000757b488c5134 : disassembly at namespaces/test/dev.csl : 428.20 :
0x757b488c5134    4d897e08                mov [r14+0x8], r15                                     
0x757b488c5138    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c513c    4981c608000000          add r14, 0x8                                           
 ..                      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x757b488c5143    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..              : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x757b488c5148    7d14                    jge 0x488c515e                < User._fibn1+42 >
0x757b488c514a    0f1f4000                nop [rax]                                              
 ..          : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x757b488c514e    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c5152    4983c608                add r14, 0x8                                           
0x757b488c5156    498906                  mov [r14], rax                                         
 ..      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x757b488c5159    e93d000000              jmp 0x757b488c519b            < User._fibn1+103 >
   : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x757b488c515e    49ff4ff8                dec qword [r15-0x8]                                    
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x757b488c5162    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c5166    4983c608                add r14, 0x8                                           
0x757b488c516a    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x757b488c516d    e8c2ffffff              call 0x757b488c5134           < User._fibn1 : 0x0000757b488c5134 >
 .. n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x757b488c5172    49ff4ff8                dec qword [r15-0x8]                                    
 ..  2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x757b488c5176    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c517a    4983c608                add r14, 0x8                                           
0x757b488c517e    498906                  mov [r14], rax                                         
 .. } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x757b488c5181    e8aeffffff              call 0x757b488c5134           < User._fibn1 : 0x0000757b488c5134 >
0x757b488c5186    498b0e                  mov rcx, [r14]                                         
0x757b488c5189    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c518d    4983ee10                sub r14, 0x10                                          
 ..  } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x757b488c5191    4803c1                  add rax, rcx                                           
0x757b488c5194    4983c608                add r14, 0x8                                           
0x757b488c5198    498906                  mov [r14], rax                                         
0x757b488c519b    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c519f    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c51a3    498906                  mov [r14], rax                                         
 ..  -- n @  _fibn1 + } ifElse return tos ; 
0x757b488c51a6    c3                      ret                                                    
Word_Disassemble : word - '_fibn1' :: codeSize = 115
Word : 0x0000757b440c682b :: Compiled at : 0x0000757b488c5134
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 428.20 <::
 6765
 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 439.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0ece -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x0000757b488c0ece : disassembly at namespaces/test/dev.csl : 439.19 :
 ..                               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ece    498b06                  mov rax, [r14]                                         
0x757b488c0ed1    4983c608                add r14, 0x8                                           
0x757b488c0ed5    498906                  mov [r14], rax                                         
0x757b488c0ed8    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0edd    488bc8                  mov rcx, rax                                           
0x757b488c0ee0    498b06                  mov rax, [r14]                                         
0x757b488c0ee3    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ee7    483bc1                  cmp rax, rcx                                           
0x757b488c0eea    0f8d05000000            jge 0x757b488c0ef5            < C._fib2+39 >
0x757b488c0ef0    e94c000000              jmp 0x757b488c0f41            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ef5    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ef8    4983c608                add r14, 0x8                                           
0x757b488c0efc    498906                  mov [r14], rax                                         
0x757b488c0eff    498b06                  mov rax, [r14]                                         
0x757b488c0f02    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f06    48ffc8                  dec rax                                                
0x757b488c0f09    4983c608                add r14, 0x8                                           
0x757b488c0f0d    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f10    e8b9ffffff              call 0x757b488c0ece           < C._fib2 : 0x0000757b488c0ece >
0x757b488c0f15    498b0e                  mov rcx, [r14]                                         
0x757b488c0f18    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0f1c    49894ef8                mov [r14-0x8], rcx                                     
0x757b488c0f20    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f23    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f27    e8a2ffffff              call 0x757b488c0ece           < C._fib2 : 0x0000757b488c0ece >
0x757b488c0f2c    498b0e                  mov rcx, [r14]                                         
0x757b488c0f2f    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0f33    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x757b488c0f37    4803c1                  add rax, rcx                                           
0x757b488c0f3a    4983c608                add r14, 0x8                                           
0x757b488c0f3e    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x757b488c0f41    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x0000757b43f64b23 :: Compiled at : 0x0000757b488c0ece
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 439.19 <::
 6765
 6765
 =============================
User._fib3 <:> csl compiled word
SourceCode for User._fib3 :> 
: _fib3 dup 2 < ?< >:< dup -- _fib3 swap 2 - _fib3 + >; ; 
Source code file location of _fib3 : "namespaces/test/dev.csl" : 443.2 :: we are now at : namespaces/test/dev.csl : 449.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c5346 -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: User._fib3 : definition = 0x0000757b488c5346 : disassembly at namespaces/test/dev.csl : 449.19 :
0x757b488c5346    498b06                  mov rax, [r14]                                         
0x757b488c5349    4983c608                add r14, 0x8                                           
0x757b488c534d    498906                  mov [r14], rax                                         
0x757b488c5350    b802000000              mov eax, 0x2                                           
 ..                      : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x757b488c5355    488bc8                  mov rcx, rax                                           
0x757b488c5358    498b06                  mov rax, [r14]                                         
0x757b488c535b    4983ee08                sub r14, 0x8                                           
 ..                    : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x757b488c535f    483bc1                  cmp rax, rcx                                           
0x757b488c5362    0f8d05000000            jge 0x757b488c536d            < User._fib3+39 >
 ..          : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x757b488c5368    e94c000000              jmp 0x757b488c53b9            < User._fib3+115 >
0x757b488c536d    498b06                  mov rax, [r14]                                         
0x757b488c5370    4983c608                add r14, 0x8                                           
0x757b488c5374    498906                  mov [r14], rax                                         
0x757b488c5377    498b06                  mov rax, [r14]                                         
0x757b488c537a    4983ee08                sub r14, 0x8                                           
 ..      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c537e    48ffc8                  dec rax                                                
0x757b488c5381    4983c608                add r14, 0x8                                           
0x757b488c5385    498906                  mov [r14], rax                                         
 ..   dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c5388    e8b9ffffff              call 0x757b488c5346           < User._fib3 : 0x0000757b488c5346 >
 .. 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c538d    498b0e                  mov rcx, [r14]                                         
0x757b488c5390    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c5394    49894ef8                mov [r14-0x8], rcx                                     
0x757b488c5398    498906                  mov [r14], rax                                         
 ..   ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c539b    49832e02                sub qword [r14], 0x2                                   
 .. ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c539f    e8a2ffffff              call 0x757b488c5346           < User._fib3 : 0x0000757b488c5346 >
0x757b488c53a4    498b0e                  mov rcx, [r14]                                         
0x757b488c53a7    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c53ab    4983ee10                sub r14, 0x10                                          
 ..           dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c53af    4803c1                  add rax, rcx                                           
0x757b488c53b2    4983c608                add r14, 0x8                                           
0x757b488c53b6    498906                  mov [r14], rax                                         
 .. up -- _fib3 swap 2 - _fib3 +      >;  ; 
0x757b488c53b9    c3                      ret                                                    
Word_Disassemble : word - '_fib3' :: codeSize = 116
Word : 0x0000757b440ceafb :: Compiled at : 0x0000757b488c5346
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 449.19 <::
 6765
 =============================
User._fib4 <:> csl compiled word
SourceCode for User._fib4 :> 
: _fib4 { dup 2 >= } { dup -- _fib4 swap 2 - _fib4 + } if2 ; 
Source code file location of _fib4 : "namespaces/test/dev.csl" : 451.2 :: we are now at : namespaces/test/dev.csl : 457.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c53ce -- code size = 105 bytes
TypeSignature : 
 -----------------------------
Word :: User._fib4 : definition = 0x0000757b488c53ce : disassembly at namespaces/test/dev.csl : 457.19 :
 ..                        : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x757b488c53ce    498b06                  mov rax, [r14]                                         
0x757b488c53d1    4983c608                add r14, 0x8                                           
0x757b488c53d5    498906                  mov [r14], rax                                         
0x757b488c53d8    b802000000              mov eax, 0x2                                           
 ..                    : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x757b488c53dd    488bc8                  mov rcx, rax                                           
0x757b488c53e0    498b06                  mov rax, [r14]                                         
0x757b488c53e3    4983ee08                sub r14, 0x8                                           
 ..                  : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x757b488c53e7    483bc1                  cmp rax, rcx                                           
 ..               : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x757b488c53ea    7c4a                    jl 0x488c5436                 < User._fib4+104 >
0x757b488c53ec    0f1f4000                nop [rax]                                              
0x757b488c53f0    498b06                  mov rax, [r14]                                         
0x757b488c53f3    4983c608                add r14, 0x8                                           
0x757b488c53f7    4983ee08                sub r14, 0x8                                           
 ..       { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c53fb    48ffc8                  dec rax                                                
0x757b488c53fe    4983c608                add r14, 0x8                                           
0x757b488c5402    498906                  mov [r14], rax                                         
 ..    { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c5405    e8c4ffffff              call 0x757b488c53ce           < User._fib4 : 0x0000757b488c53ce >
 .. up 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c540a    498b0e                  mov rcx, [r14]                                         
0x757b488c540d    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c5411    49894ef8                mov [r14-0x8], rcx                                     
0x757b488c5415    498906                  mov [r14], rax                                         
 ..  }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c5418    49832e02                sub qword [r14], 0x2                                   
 ..      {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c541c    e8adffffff              call 0x757b488c53ce           < User._fib4 : 0x0000757b488c53ce >
0x757b488c5421    498b0e                  mov rcx, [r14]                                         
0x757b488c5424    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c5428    4983ee10                sub r14, 0x10                                          
 ..           dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c542c    4803c1                  add rax, rcx                                           
0x757b488c542f    4983c608                add r14, 0x8                                           
0x757b488c5433    498906                  mov [r14], rax                                         
 .. -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x757b488c5436    c3                      ret                                                    
Word_Disassemble : word - '_fib4' :: codeSize = 105
Word : 0x0000757b440cff3b :: Compiled at : 0x0000757b488c53ce
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 457.19 <::
 6765
 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 467.21 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C compiler code >        
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C compiler code >        
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 467.21 <::

 0x0000757b47211ae0
 The fibonacci sequence 15 :
 C -O3 :  610
Timer [ 1 ] : elapsed time = 0.000007273 seconds

 no locals fib  :  610
Timer [ 1 ] : elapsed time = 0.000009087 seconds

 locals fib1    :  610
Timer [ 1 ] : elapsed time = 0.000010120 seconds

 no locals fib2 :  610
Timer [ 1 ] : elapsed time = 0.000009257 seconds

 no locals fib3 :  610
Timer [ 1 ] : elapsed time = 0.000008937 seconds

 fibPTC?        :  610
Timer [ 1 ] : elapsed time = 0.000006482 seconds

 fibPTC2?       :  610
Timer [ 1 ] : elapsed time = 0.000006553 seconds


 0x0000757b47211ae0
 The fibonacci sequence 30 :
 C -O3 :  832040
Timer [ 1 ] : elapsed time = 0.001411962 seconds

 no locals fib  :  832040
Timer [ 1 ] : elapsed time = 0.005611460 seconds

 locals fib1    :  832040
Timer [ 1 ] : elapsed time = 0.006285182 seconds

 no locals fib2 :  832040
Timer [ 1 ] : elapsed time = 0.005585913 seconds

 no locals fib3 :  832040
Timer [ 1 ] : elapsed time = 0.005606049 seconds

 fibPTC?        :  832040
Timer [ 1 ] : elapsed time = 0.000005521 seconds

 fibPTC2?       :  832040
Timer [ 1 ] : elapsed time = 0.000006041 seconds


DataStack at : namespaces/test/dev.csl : 492.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x0000757b47211ad0, InitialTos = 0x0000757b47211ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x0000757b47211ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x0000757b47211ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x0000757b47211ac0 > = 0x0000000000000005

 =============================
Interpreter.tfib3 <:> csl compiled word
SourceCode for Interpreter.tfib3 :> 
: tfib3 ( n | m ) "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ; 
Source code file location of tfib3 : "namespaces/test/dev.csl" : 515.2 :: we are now at : namespaces/test/dev.csl : 521.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c6ae7 -- code size = 908 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.tfib3 : definition = 0x0000757b488c6ae7 : disassembly at namespaces/test/dev.csl : 521.19 :
0x757b488c6ae7    4d897e08                mov [r14+0x8], r15                                     
0x757b488c6aeb    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c6aef    4981c610000000          add r14, 0x10                                          
0x757b488c6af6    48b8cacf13487b750000    mov rax, 0x757b4813cfca       < string : 'Cfib2_O3       : ' >
0x757b488c6b00    4983c608                add r14, 0x8                                           
0x757b488c6b04    498906                  mov [r14], rax                                         
 .. 3 ( n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps  .. 
0x757b488c6b07    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c6b11    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 ..  n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 t .. 
0x757b488c6b14    b801000000              mov eax, 0x1                                           
0x757b488c6b19    4983c608                add r14, 0x8                                           
0x757b488c6b1d    498906                  mov [r14], rax                                         
 ..  | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti  .. 
0x757b488c6b20    49ba0ed58a487b750000    mov r10, 0x757b488ad50e                                
0x757b488c6b2a    49ffd2                  call r10                      < System.ti : 0x0000757b488ad50e >
 ..       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { .. 
0x757b488c6b2d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ .. 
0x757b488c6b35    498b4708                mov rax, [r15+0x8]                                     
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ .. 
0x757b488c6b39    498b4ff8                mov rcx, [r15-0x8]                                     
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x757b488c6b3d    483bc1                  cmp rax, rcx                                           
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x757b488c6b40    7f44                    jg 0x488c6b86                 < Interpreter.tfib3+159 >
0x757b488c6b42    0f1f4000                nop [rax]                                              
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x757b488c6b46    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6b4a    4983c608                add r14, 0x8                                           
0x757b488c6b4e    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fib .. 
0x757b488c6b51    49bb6043eaa65f5b0000    mov r11, 0x5b5fa6ea4360                                
0x757b488c6b5b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6b65    49ffd2                  call r10                      < C.cfib2_O3 : 0x00005b5fa6ea4360 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m  .. 
0x757b488c6b68    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488c6b72    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } .. 
0x757b488c6b75    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } wh .. 
0x757b488c6b79    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6b7d    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488c6b81    483bc1                  cmp rax, rcx                                           
0x757b488c6b84    7ec0                    jle 0x488c6b46                < Interpreter.tfib3+95 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 ti .. 
0x757b488c6b86    b801000000              mov eax, 0x1                                           
0x757b488c6b8b    4983c608                add r14, 0x8                                           
0x757b488c6b8f    498906                  mov [r14], rax                                         
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time .. 
0x757b488c6b92    49bbc0fce9a65f5b0000    mov r11, 0x5b5fa6e9fcc0                                
0x757b488c6b9c    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6ba6    49ffd2                  call r10                      < System.time : 0x00005b5fa6e9fcc0 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl n .. 
0x757b488c6ba9    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6bb3    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6bbd    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl   .. 
0x757b488c6bc0    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6bca    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6bd4    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488c6bd7    48b80ad013487b750000    mov rax, 0x757b4813d00a       < string : 'locals fibPTC? : ' >
0x757b488c6be1    4983c608                add r14, 0x8                                           
0x757b488c6be5    498906                  mov [r14], rax                                         
 ..  1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps  .. 
0x757b488c6be8    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c6bf2    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 t .. 
0x757b488c6bf5    b801000000              mov eax, 0x1                                           
0x757b488c6bfa    4983c608                add r14, 0x8                                           
0x757b488c6bfe    498906                  mov [r14], rax                                         
 .. me nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti  .. 
0x757b488c6c01    49ba0ed58a487b750000    mov r10, 0x757b488ad50e                                
0x757b488c6c0b    49ffd2                  call r10                      < System.ti : 0x0000757b488ad50e >
 .. l     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { .. 
0x757b488c6c0e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ .. 
0x757b488c6c16    498b4708                mov rax, [r15+0x8]                                     
 .. ocals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ .. 
0x757b488c6c1a    498b4ff8                mov rcx, [r15-0x8]                                     
 .. s fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x757b488c6c1e    483bc1                  cmp rax, rcx                                           
 .. ibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x757b488c6c21    7f3a                    jg 0x488c6c5d                 < Interpreter.tfib3+374 >
0x757b488c6c23    0f1f4000                nop [rax]                                              
 .. C? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x757b488c6c27    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6c2b    4983c608                add r14, 0x8                                           
0x757b488c6c2f    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fib .. 
0x757b488c6c32    49ba42108c487b750000    mov r10, 0x757b488c1042                                
0x757b488c6c3c    49ffd2                  call r10                      < C.fibPTC? : 0x0000757b488c1042 >
 .. ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p  .. 
0x757b488c6c3f    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488c6c49    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 ..  1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ .. 
0x757b488c6c4c    49ff4708                inc qword [r15+0x8]                                    
 .. = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ }  .. 
0x757b488c6c50    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6c54    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488c6c58    483bc1                  cmp rax, rcx                                           
0x757b488c6c5b    7eca                    jle 0x488c6c27                < Interpreter.tfib3+320 >
 .. n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1  .. 
0x757b488c6c5d    b801000000              mov eax, 0x1                                           
0x757b488c6c62    4983c608                add r14, 0x8                                           
0x757b488c6c66    498906                  mov [r14], rax                                         
 .. @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 ti .. 
0x757b488c6c69    49bbc0fce9a65f5b0000    mov r11, 0x5b5fa6e9fcc0                                
0x757b488c6c73    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6c7d    49ffd2                  call r10                      < System.time : 0x00005b5fa6e9fcc0 >
 .. } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl .. 
0x757b488c6c80    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6c8a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6c94    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 ..  m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl .. 
0x757b488c6c97    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6ca1    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6cab    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488c6cae    48b84bd013487b750000    mov rax, 0x757b4813d04b       < string : 'locals fibPTC2? : ' >
0x757b488c6cb8    4983c608                add r14, 0x8                                           
0x757b488c6cbc    498906                  mov [r14], rax                                         
 .. 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps  .. 
0x757b488c6cbf    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c6cc9    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. ime nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 t .. 
0x757b488c6ccc    b801000000              mov eax, 0x1                                           
0x757b488c6cd1    4983c608                add r14, 0x8                                           
0x757b488c6cd5    498906                  mov [r14], rax                                         
 .. e nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti  .. 
0x757b488c6cd8    49ba0ed58a487b750000    mov r10, 0x757b488ad50e                                
0x757b488c6ce2    49ffd2                  call r10                      < System.ti : 0x0000757b488ad50e >
 ..      "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { .. 
0x757b488c6ce5    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ .. 
0x757b488c6ced    498b4708                mov rax, [r15+0x8]                                     
 .. cals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ .. 
0x757b488c6cf1    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x757b488c6cf5    483bc1                  cmp rax, rcx                                           
 .. bPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x757b488c6cf8    7f3a                    jg 0x488c6d34                 < Interpreter.tfib3+589 >
0x757b488c6cfa    0f1f4000                nop [rax]                                              
 .. 2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x757b488c6cfe    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6d02    4983c608                add r14, 0x8                                           
0x757b488c6d06    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfi .. 
0x757b488c6d09    49bab3508c487b750000    mov r10, 0x757b488c50b3                                
0x757b488c6d13    49ffd2                  call r10                      < C_Syntax.fibPTC2? : 0x0000757b488c50b3 >
 .. i m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m .. 
0x757b488c6d16    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488c6d20    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++  .. 
0x757b488c6d23    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } w .. 
0x757b488c6d27    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6d2b    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488c6d2f    483bc1                  cmp rax, rcx                                           
0x757b488c6d32    7eca                    jle 0x488c6cfe                < Interpreter.tfib3+535 >
 ..  @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 t .. 
0x757b488c6d34    b801000000              mov eax, 0x1                                           
0x757b488c6d39    4983c608                add r14, 0x8                                           
0x757b488c6d3d    498906                  mov [r14], rax                                         
 ..  <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 tim .. 
0x757b488c6d40    49bbc0fce9a65f5b0000    mov r11, 0x5b5fa6e9fcc0                                
0x757b488c6d4a    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6d54    49ffd2                  call r10                      < System.time : 0x00005b5fa6e9fcc0 >
 ..  { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl  .. 
0x757b488c6d57    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6d61    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6d6b    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl  .. 
0x757b488c6d6e    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6d78    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6d82    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488c6d85    48b88dd013487b750000    mov rax, 0x757b4813d08d       < string : 'Cfib2_O3       : ' >
0x757b488c6d8f    4983c608                add r14, 0x8                                           
0x757b488c6d93    498906                  mov [r14], rax                                         
 ..  1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6d96    49ba1ec48a487b750000    mov r10, 0x757b488ac41e                                
0x757b488c6da0    49ffd2                  call r10                      < Int.ps : 0x0000757b488ac41e >
 .. time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6da3    b801000000              mov eax, 0x1                                           
0x757b488c6da8    4983c608                add r14, 0x8                                           
0x757b488c6dac    498906                  mov [r14], rax                                         
 .. me nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6daf    49ba0ed58a487b750000    mov r10, 0x757b488ad50e                                
0x757b488c6db9    49ffd2                  call r10                      < System.ti : 0x0000757b488ad50e >
 .. l     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6dbc    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6dc4    498b4708                mov rax, [r15+0x8]                                     
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6dc8    498b4ff8                mov rcx, [r15-0x8]                                     
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6dcc    483bc1                  cmp rax, rcx                                           
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6dcf    7f44                    jg 0x488c6e15                 < Interpreter.tfib3+814 >
0x757b488c6dd1    0f1f4000                nop [rax]                                              
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6dd5    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6dd9    4983c608                add r14, 0x8                                           
0x757b488c6ddd    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6de0    49bb6043eaa65f5b0000    mov r11, 0x5b5fa6ea4360                                
0x757b488c6dea    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6df4    49ffd2                  call r10                      < C.cfib2_O3 : 0x00005b5fa6ea4360 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6df7    49bad0c68a487b750000    mov r10, 0x757b488ac6d0                                
0x757b488c6e01    49ffd2                  call r10                      < User.p : 0x0000757b488ac6d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e04    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e08    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6e0c    498b4ff8                mov rcx, [r15-0x8]                                     
0x757b488c6e10    483bc1                  cmp rax, rcx                                           
0x757b488c6e13    7ec0                    jle 0x488c6dd5                < Interpreter.tfib3+750 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e15    b801000000              mov eax, 0x1                                           
0x757b488c6e1a    4983c608                add r14, 0x8                                           
0x757b488c6e1e    498906                  mov [r14], rax                                         
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e21    49bbc0fce9a65f5b0000    mov r11, 0x5b5fa6e9fcc0                                
0x757b488c6e2b    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6e35    49ffd2                  call r10                      < System.time : 0x00005b5fa6e9fcc0 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e38    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6e42    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6e4c    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e4f    49bbd0dfe9a65f5b0000    mov r11, 0x5b5fa6e9dfd0                                
0x757b488c6e59    49ba32d70f477b750000    mov r10, 0x757b470fd732                                
0x757b488c6e63    49ffd2                  call r10                      < Io.newline : 0x00005b5fa6e9dfd0 >
0x757b488c6e66    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c6e6a    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c6e6e    4983ee08                sub r14, 0x8                                           
 ..  cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x757b488c6e72    c3                      ret                                                    
Word_Disassemble : word - 'tfib3' :: codeSize = 908
Word : 0x0000757b44110bfb :: Compiled at : 0x0000757b488c6ae7
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 521.19 <::

 The fibonacci sequence:: first : 30 ...
 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002328050 seconds


 Cfib            :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002321477 seconds


 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002324112 seconds


 no locals _fib  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009141076 seconds


 locals   _fibn0 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010712299 seconds


 locals   _fibn1 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010420941 seconds


 locals   _fib1  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010235941 seconds


 no locals _fib2 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009165012 seconds


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009249982 seconds


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008122556 seconds


 fibPTC?         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000181191 seconds


 fibPTC2?        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000174279 seconds


 Cfib_O3        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002392682 seconds


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008139469 seconds


 locals _fibn1   :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010514025 seconds


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009205639 seconds


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000546350 seconds


 locals fibPTC? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000564885 seconds


 locals fibPTC2? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000548825 seconds


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000553413 seconds



 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 531.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c0ece -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x0000757b488c0ece : disassembly at namespaces/test/dev.csl : 531.19 :
 ..                               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ece    498b06                  mov rax, [r14]                                         
0x757b488c0ed1    4983c608                add r14, 0x8                                           
0x757b488c0ed5    498906                  mov [r14], rax                                         
0x757b488c0ed8    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0edd    488bc8                  mov rcx, rax                                           
0x757b488c0ee0    498b06                  mov rax, [r14]                                         
0x757b488c0ee3    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ee7    483bc1                  cmp rax, rcx                                           
0x757b488c0eea    0f8d05000000            jge 0x757b488c0ef5            < C._fib2+39 >
0x757b488c0ef0    e94c000000              jmp 0x757b488c0f41            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ef5    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0ef8    4983c608                add r14, 0x8                                           
0x757b488c0efc    498906                  mov [r14], rax                                         
0x757b488c0eff    498b06                  mov rax, [r14]                                         
0x757b488c0f02    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f06    48ffc8                  dec rax                                                
0x757b488c0f09    4983c608                add r14, 0x8                                           
0x757b488c0f0d    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f10    e8b9ffffff              call 0x757b488c0ece           < C._fib2 : 0x0000757b488c0ece >
0x757b488c0f15    498b0e                  mov rcx, [r14]                                         
0x757b488c0f18    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0f1c    49894ef8                mov [r14-0x8], rcx                                     
0x757b488c0f20    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f23    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x757b488c0f27    e8a2ffffff              call 0x757b488c0ece           < C._fib2 : 0x0000757b488c0ece >
0x757b488c0f2c    498b0e                  mov rcx, [r14]                                         
0x757b488c0f2f    498b46f8                mov rax, [r14-0x8]                                     
0x757b488c0f33    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x757b488c0f37    4803c1                  add rax, rcx                                           
0x757b488c0f3a    4983c608                add r14, 0x8                                           
0x757b488c0f3e    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x757b488c0f41    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x0000757b43f64b23 :: Compiled at : 0x0000757b488c0ece
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 531.19 <::
 9
 should be 9
 =============================
Interpreter.fibBN <:> csl compiled word
SourceCode for Interpreter.fibBN :> 
: fibBN ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibBN : "namespaces/test/dev.csl" : 538.2 :: we are now at : namespaces/test/dev.csl : 549.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c6ed5 -- code size = 135 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.fibBN : definition = 0x0000757b488c6ed5 : disassembly at namespaces/test/dev.csl : 549.19 :
0x757b488c6ed5    4d897e08                mov [r14+0x8], r15                                     
0x757b488c6ed9    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c6edd    4981c620000000          add r14, 0x20                                          
   : fibBN ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x757b488c6ee4    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x757b488c6eec    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x757b488c6ef4    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x757b488c6efc    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x757b488c6f01    7e49                    jle 0x488c6f4c                < Interpreter.fibBN+119 >
0x757b488c6f03    0f1f4000                nop [rax]                                              
0x757b488c6f07    498d4710                lea rax, [r15+0x10]                                    
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f0b    498b4f18                mov rcx, [r15+0x18]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f0f    488908                  mov [rax], rcx                                         
0x757b488c6f12    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f16    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f1a    488908                  mov [rax], rcx                                         
0x757b488c6f1d    498d4708                lea rax, [r15+0x8]                                     
0x757b488c6f21    4983c608                add r14, 0x8                                           
0x757b488c6f25    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f28    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f2c    498b4f18                mov rcx, [r15+0x18]                                    
0x757b488c6f30    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f33    488bc8                  mov rcx, rax                                           
0x757b488c6f36    498b06                  mov rax, [r14]                                         
0x757b488c6f39    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f3d    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x757b488c6f40    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x757b488c6f45    49837ff800              cmp qword [r15-0x8], 0x0                               
0x757b488c6f4a    7fbb                    jg 0x488c6f07                 < Interpreter.fibBN+50 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f4c    498b4708                mov rax, [r15+0x8]                                     
0x757b488c6f50    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c6f54    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x757b488c6f58    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x757b488c6f5b    c3                      ret                                                    
Word_Disassemble : word - 'fibBN' :: codeSize = 135
Word : 0x0000757b4411eb9b :: Compiled at : 0x0000757b488c6ed5
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 549.19 <::
 6765

 locals fibBN :  1 :  1, 2 :  1, 3 :  2, 4 :  3, 5 :  5, 6 :  8, 7 :  13, 8 :  21, 9 :  34, 10 :  55, 11 :  89, 12 :  144, 13 :  233, 14 :  377, 15 :  610, 16 :  987, 17 :  1597, 18 :  2584, 19 :  4181, 20 :  6765, 21 :  10946, 22 :  17711, 23 :  28657, 24 :  46368, 25 :  75025, 26 :  121393, 27 :  196418, 28 :  317811, 29 :  514229, 30 :  832040, 31 :  1346269, 32 :  2178309, 33 :  3524578, 34 :  5702887, 35 :  9227465, 36 :  14930352, 37 :  24157817, 38 :  39088169, 39 :  63245986, 40 :  102334155, 41 :  165580141, 42 :  267914296, 43 :  433494437, 44 :  701408733, 45 :  1134903170, 46 :  1836311903, 47 :  2971215073, 48 :  4807526976, 49 :  7778742049, 50 :  12586269025, 51 :  20365011074, 52 :  32951280099, 53 :  53316291173, 54 :  86267571272, 55 :  139583862445, 56 :  225851433717, 57 :  365435296162, 58 :  591286729879, 59 :  956722026041, 60 :  1548008755920, 61 :  2504730781961, 62 :  4052739537881, 63 :  6557470319842, 64 :  10610209857723, 65 :  17167680177565, 66 :  27777890035288, 67 :  44945570212853, 68 :  72723460248141, 69 :  117669030460994, 70 :  190392490709135, 71 :  308061521170129, 72 :  498454011879264, 73 :  806515533049393, 74 :  1304969544928657, 75 :  2111485077978050, 76 :  3416454622906707, 77 :  5527939700884757, 78 :  8944394323791464, 79 :  14472334024676221, 80 :  23416728348467685, 81 :  37889062373143906, 82 :  61305790721611591, 83 :  99194853094755497, 84 :  160500643816367088, 85 :  259695496911122585, 86 :  420196140727489673, 87 :  679891637638612258, 88 :  1100087778366101931, 89 :  1779979416004714189, 90 :  2880067194370816120, 91 :  4660046610375530309, 92 :  7540113804746346429
 92 7540113804746346429 6765 ok
 =============================
Interpreter._ifx <:> csl compiled word
SourceCode for Interpreter._ifx :> 
: _ifx ( w | j ) { j 1 = } { j @ reps0 @ <= } { j ++ } { j @ w @ wrun drop } for ; 
Source code file location of _ifx : "namespaces/test/dev.csl" : 564.2 :: we are now at : namespaces/test/dev.csl : 575.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c70e6 -- code size = 127 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._ifx : definition = 0x0000757b488c70e6 : disassembly at namespaces/test/dev.csl : 575.9 :
0x757b488c70e6    4d897e08                mov [r14+0x8], r15                                     
0x757b488c70ea    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c70ee    4981c610000000          add r14, 0x10                                          
 ..            : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     fo .. 
0x757b488c70f5    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..      : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  .. 
0x757b488c70fd    498b4708                mov rax, [r15+0x8]                                     
 ..  : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  .. 
0x757b488c7101    48b92b4907447b750000    mov rcx, 0x757b4407492b                                
0x757b488c710b    488b09                  mov rcx, [rcx]                                         
 .. ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x757b488c710e    483bc1                  cmp rax, rcx                                           
 ..  | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x757b488c7111    7f45                    jg 0x488c7158                 < Interpreter._ifx+114 >
0x757b488c7113    0f1f4000                nop [rax]                                              
0x757b488c7117    498b4708                mov rax, [r15+0x8]                                     
0x757b488c711b    4983c608                add r14, 0x8                                           
0x757b488c711f    498906                  mov [r14], rax                                         
 .. }      {                          j @ w @ wrun drop          }     for ; 
0x757b488c7122    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c7126    4983c608                add r14, 0x8                                           
0x757b488c712a    498906                  mov [r14], rax                                         
 ..    {                          j @ w @ wrun drop          }     for ; 
0x757b488c712d    49ba47dd0f477b750000    mov r10, 0x757b470fdd47                                
0x757b488c7137    49ffd2                  call r10                      < System.wrun : 0x0000757b470fdd47 >
 ..                          j @ w @ wrun drop          }     for ; 
0x757b488c713a    4983ee08                sub r14, 0x8                                           
 ..      { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x757b488c713e    49ff4708                inc qword [r15+0x8]                                    
 ..   { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x757b488c7142    498b4708                mov rax, [r15+0x8]                                     
0x757b488c7146    48b92b4907447b750000    mov rcx, 0x757b4407492b                                
0x757b488c7150    488b09                  mov rcx, [rcx]                                         
0x757b488c7153    483bc1                  cmp rax, rcx                                           
0x757b488c7156    7ebf                    jle 0x488c7117                < Interpreter._ifx+49 >
0x757b488c7158    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c715c    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c7160    4983ee08                sub r14, 0x8                                           
 ..  j @ w @ wrun drop          }     for ; 
0x757b488c7164    c3                      ret                                                    
Word_Disassemble : word - '_ifx' :: codeSize = 127
Word : 0x0000757b441291db :: Compiled at : 0x0000757b488c70e6
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 575.9 <::

 =============================
Interpreter._ffx <:> csl compiled word
SourceCode for Interpreter._ffx :> 
: _ffx ( n w ) { n @ 0 > } { reps @ w @ ifx n -- } while ; 
Source code file location of _ffx : "namespaces/test/dev.csl" : 580.2 :: we are now at : namespaces/test/dev.csl : 585.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c71cd -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._ffx : definition = 0x0000757b488c71cd : disassembly at namespaces/test/dev.csl : 585.9 :
0x757b488c71cd    4d897e08                mov [r14+0x8], r15                                     
0x757b488c71d1    4d8d7e08                lea r15, [r14+0x8]                                     
0x757b488c71d5    4981c608000000          add r14, 0x8                                           
 ..                 : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x757b488c71dc    49837ff000              cmp qword [r15-0x10], 0x0                              
 ..         : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x757b488c71e1    7e3b                    jle 0x488c721e                < Interpreter._ffx+81 >
0x757b488c71e3    0f1f4000                nop [rax]                                              
   : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x757b488c71e7    48b83b0608447b750000    mov rax, 0x757b4408063b                                
0x757b488c71f1    488b00                  mov rax, [rax]                                         
0x757b488c71f4    4983c608                add r14, 0x8                                           
0x757b488c71f8    498906                  mov [r14], rax                                         
 ..  n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x757b488c71fb    498b47f8                mov rax, [r15-0x8]                                     
0x757b488c71ff    4983c608                add r14, 0x8                                           
0x757b488c7203    498906                  mov [r14], rax                                         
 ..  )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x757b488c7206    49ba6a718c487b750000    mov r10, 0x757b488c716a                                
0x757b488c7210    49ffd2                  call r10                      < Interpreter.ifx : 0x0000757b488c716a >
 ..   { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x757b488c7213    49ff4ff0                dec qword [r15-0x10]                                   
 ..  n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x757b488c7217    49837ff000              cmp qword [r15-0x10], 0x0                              
0x757b488c721c    7fc9                    jg 0x488c71e7                 < Interpreter._ffx+26 >
0x757b488c721e    4d8d77f8                lea r14, [r15-0x8]                                     
0x757b488c7222    4d8b7e08                mov r15, [r14+0x8]                                     
0x757b488c7226    4983ee10                sub r14, 0x10                                          
 ..   { reps @ w @ ifx n -- }       while ; 
0x757b488c722a    c3                      ret                                                    
Word_Disassemble : word - '_ffx' :: codeSize = 94
Word : 0x0000757b4412ef8b :: Compiled at : 0x0000757b488c71cd
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 585.9 <::
 

fib_shootout begin ...

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.035205494 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.034062690 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036172357 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.035996986 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.037266711 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.034101372 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.034256685 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.035820743 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036460019 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.034473976 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036552304 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033992857 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.034893716 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.036091606 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.034693368 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.034183807 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c50b3 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000757b488c50b3 : disassembly at namespaces/test/dev.csl : 638.15 :
0x757b488c50b3    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x757b488c50b6    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x757b488c50bd    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x757b488c50c4    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x757b488c50c9    4883f900                cmp rcx, 0x0                                           
0x757b488c50cd    7415                    jz 0x488c50e4                 < C_Syntax.fibPTC2?+49 >
0x757b488c50cf    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d3    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d6    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50d9    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50dc    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x757b488c50df    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x757b488c50e2    75ef                    jnz 0x488c50d3                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e4    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x757b488c50e7    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000757b440babfb :: Compiled at : 0x0000757b488c50b3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.034884618 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0xa6ea4360 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b5fa6ea4360 : disassembly at namespaces/test/dev.csl : 638.15 :
0x5b5fa6ea4360    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4363    4c89f7                  mov rdi, r14                                           
0x5b5fa6ea4366    4885c0                  test rax, rax                                          
0x5b5fa6ea4369    742d                    jz 0xa6ea4398                 < C compiler code >        
0x5b5fa6ea436b    b901000000              mov ecx, 0x1                                           
0x5b5fa6ea4370    31d2                    xor edx, edx                                           
0x5b5fa6ea4372    eb0f                    jmp 0x5b5fa6ea4383            < C.cfib2_O3+35 >
0x5b5fa6ea4374    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea437f    90                      nop                                                    
0x5b5fa6ea4380    4889f2                  mov rdx, rsi                                           
0x5b5fa6ea4383    488d340a                lea rsi, [rdx+rcx]                                     
0x5b5fa6ea4387    4889d1                  mov rcx, rdx                                           
0x5b5fa6ea438a    4883e801                sub rax, 0x1                                           
0x5b5fa6ea438e    75f0                    jnz 0xa6ea4380                < C.cfib2_O3+32 >
0x5b5fa6ea4390    488937                  mov [rdi], rsi                                         
0x5b5fa6ea4393    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000757b48409788 :: Compiled at : 0x00005b5fa6ea4360
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.035774819 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps
 
fib_shootout end ...
 

fac_shootout begin ...

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003412515 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x00005b5fa6ea44e0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea44e0    498b06                  mov rax, [r14]                                         
0x5b5fa6ea44e3    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea44e6    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea44eb    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea44ef    7e45                    jle 0xa6ea4536                < C compiler code >        
0x5b5fa6ea44f1    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea44f5    a801                    test al, 0x1                                           
0x5b5fa6ea44f7    7527                    jnz 0xa6ea4520                < C compiler code >        
0x5b5fa6ea44f9    4889c2                  mov rdx, rax                                           
0x5b5fa6ea44fc    4889c8                  mov rax, rcx                                           
0x5b5fa6ea44ff    4883f901                cmp rcx, 0x1                                           
0x5b5fa6ea4503    7431                    jz 0xa6ea4536                 < C compiler code >        
0x5b5fa6ea4505    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea4510    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea451b    0f1f440000              nop [rax+rax]                                          
0x5b5fa6ea4520    480fafd0                imul rdx, rax                                          
0x5b5fa6ea4524    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea4528    4883e802                sub rax, 0x2                                           
0x5b5fa6ea452c    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea4530    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea4534    75ea                    jnz 0xa6ea4520                < C compiler code >        
0x5b5fa6ea4536    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4539    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000757b48409e48 :: Compiled at : 0x00005b5fa6ea44e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002277505 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003629545 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0xa6ea44e0 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x00005b5fa6ea44e0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea44e0    498b06                  mov rax, [r14]                                         
0x5b5fa6ea44e3    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea44e6    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea44eb    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea44ef    7e45                    jle 0xa6ea4536                < C.cfactorial4_O3+86 >
0x5b5fa6ea44f1    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea44f5    a801                    test al, 0x1                                           
0x5b5fa6ea44f7    7527                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea44f9    4889c2                  mov rdx, rax                                           
0x5b5fa6ea44fc    4889c8                  mov rax, rcx                                           
0x5b5fa6ea44ff    4883f901                cmp rcx, 0x1                                           
0x5b5fa6ea4503    7431                    jz 0xa6ea4536                 < C.cfactorial4_O3+86 >
0x5b5fa6ea4505    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea4510    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea451b    0f1f440000              nop [rax+rax]                                          
0x5b5fa6ea4520    480fafd0                imul rdx, rax                                          
0x5b5fa6ea4524    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea4528    4883e802                sub rax, 0x2                                           
0x5b5fa6ea452c    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea4530    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea4534    75ea                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea4536    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4539    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000757b48409e48 :: Compiled at : 0x00005b5fa6ea44e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002286171 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003629324 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :> 
C Primitive
 -----------------------------
Word :: C.cfactorial3 : definition = 0x00005b5fa6ea4760 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea4760    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4763    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea4766    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea476b    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea476f    7e20                    jle 0xa6ea4791                < C compiler code >        
0x5b5fa6ea4771    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea477c    0f1f4000                nop [rax]                                              
0x5b5fa6ea4780    4889c1                  mov rcx, rax                                           
0x5b5fa6ea4783    4883e801                sub rax, 0x1                                           
0x5b5fa6ea4787    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea478b    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea478f    75ef                    jnz 0xa6ea4780                < C compiler code >        
0x5b5fa6ea4791    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4794    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial3' :: codeSize = 54
Word : 0x0000757b48409428 :: Compiled at : 0x00005b5fa6ea4760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002889870 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003636887 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0xa6ea44e0 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x00005b5fa6ea44e0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea44e0    498b06                  mov rax, [r14]                                         
0x5b5fa6ea44e3    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea44e6    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea44eb    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea44ef    7e45                    jle 0xa6ea4536                < C.cfactorial4_O3+86 >
0x5b5fa6ea44f1    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea44f5    a801                    test al, 0x1                                           
0x5b5fa6ea44f7    7527                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea44f9    4889c2                  mov rdx, rax                                           
0x5b5fa6ea44fc    4889c8                  mov rax, rcx                                           
0x5b5fa6ea44ff    4883f901                cmp rcx, 0x1                                           
0x5b5fa6ea4503    7431                    jz 0xa6ea4536                 < C.cfactorial4_O3+86 >
0x5b5fa6ea4505    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea4510    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea451b    0f1f440000              nop [rax+rax]                                          
0x5b5fa6ea4520    480fafd0                imul rdx, rax                                          
0x5b5fa6ea4524    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea4528    4883e802                sub rax, 0x2                                           
0x5b5fa6ea452c    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea4530    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea4534    75ea                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea4536    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4539    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000757b48409e48 :: Compiled at : 0x00005b5fa6ea44e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002300057 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003626769 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0xa6ea44e0 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x00005b5fa6ea44e0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea44e0    498b06                  mov rax, [r14]                                         
0x5b5fa6ea44e3    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea44e6    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea44eb    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea44ef    7e45                    jle 0xa6ea4536                < C.cfactorial4_O3+86 >
0x5b5fa6ea44f1    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea44f5    a801                    test al, 0x1                                           
0x5b5fa6ea44f7    7527                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea44f9    4889c2                  mov rdx, rax                                           
0x5b5fa6ea44fc    4889c8                  mov rax, rcx                                           
0x5b5fa6ea44ff    4883f901                cmp rcx, 0x1                                           
0x5b5fa6ea4503    7431                    jz 0xa6ea4536                 < C.cfactorial4_O3+86 >
0x5b5fa6ea4505    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea4510    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea451b    0f1f440000              nop [rax+rax]                                          
0x5b5fa6ea4520    480fafd0                imul rdx, rax                                          
0x5b5fa6ea4524    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea4528    4883e802                sub rax, 0x2                                           
0x5b5fa6ea452c    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea4530    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea4534    75ea                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea4536    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4539    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000757b48409e48 :: Compiled at : 0x00005b5fa6ea44e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002321428 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003626408 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :> 
C Primitive
starting at address : 0xa6ea4760 -- code size = 54 bytes
 -----------------------------
Word :: C.cfactorial3 : definition = 0x00005b5fa6ea4760 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea4760    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4763    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea4766    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea476b    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea476f    7e20                    jle 0xa6ea4791                < C.cfactorial3+49 >
0x5b5fa6ea4771    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea477c    0f1f4000                nop [rax]                                              
0x5b5fa6ea4780    4889c1                  mov rcx, rax                                           
0x5b5fa6ea4783    4883e801                sub rax, 0x1                                           
0x5b5fa6ea4787    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea478b    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea478f    75ef                    jnz 0xa6ea4780                < C.cfactorial3+32 >
0x5b5fa6ea4791    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4794    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial3' :: codeSize = 54
Word : 0x0000757b48409428 :: Compiled at : 0x00005b5fa6ea4760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002497299 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003588937 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0xa6ea44e0 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x00005b5fa6ea44e0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea44e0    498b06                  mov rax, [r14]                                         
0x5b5fa6ea44e3    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea44e6    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea44eb    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea44ef    7e45                    jle 0xa6ea4536                < C.cfactorial4_O3+86 >
0x5b5fa6ea44f1    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea44f5    a801                    test al, 0x1                                           
0x5b5fa6ea44f7    7527                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea44f9    4889c2                  mov rdx, rax                                           
0x5b5fa6ea44fc    4889c8                  mov rax, rcx                                           
0x5b5fa6ea44ff    4883f901                cmp rcx, 0x1                                           
0x5b5fa6ea4503    7431                    jz 0xa6ea4536                 < C.cfactorial4_O3+86 >
0x5b5fa6ea4505    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea4510    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea451b    0f1f440000              nop [rax+rax]                                          
0x5b5fa6ea4520    480fafd0                imul rdx, rax                                          
0x5b5fa6ea4524    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea4528    4883e802                sub rax, 0x2                                           
0x5b5fa6ea452c    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea4530    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea4534    75ea                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea4536    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4539    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000757b48409e48 :: Compiled at : 0x00005b5fa6ea44e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002329652 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003610097 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0xa6ea44e0 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x00005b5fa6ea44e0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea44e0    498b06                  mov rax, [r14]                                         
0x5b5fa6ea44e3    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea44e6    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea44eb    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea44ef    7e45                    jle 0xa6ea4536                < C.cfactorial4_O3+86 >
0x5b5fa6ea44f1    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea44f5    a801                    test al, 0x1                                           
0x5b5fa6ea44f7    7527                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea44f9    4889c2                  mov rdx, rax                                           
0x5b5fa6ea44fc    4889c8                  mov rax, rcx                                           
0x5b5fa6ea44ff    4883f901                cmp rcx, 0x1                                           
0x5b5fa6ea4503    7431                    jz 0xa6ea4536                 < C.cfactorial4_O3+86 >
0x5b5fa6ea4505    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea4510    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea451b    0f1f440000              nop [rax+rax]                                          
0x5b5fa6ea4520    480fafd0                imul rdx, rax                                          
0x5b5fa6ea4524    488d48ff                lea rcx, [rax-0x1]                                     
0x5b5fa6ea4528    4883e802                sub rax, 0x2                                           
0x5b5fa6ea452c    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea4530    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea4534    75ea                    jnz 0xa6ea4520                < C.cfactorial4_O3+64 >
0x5b5fa6ea4536    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4539    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000757b48409e48 :: Compiled at : 0x00005b5fa6ea44e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002310336 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x488c44ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x0000757b488c44ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x757b488c44f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c44fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4501    7ff3                    jg 0x488c44f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x757b488c4506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000757b44071fab :: Compiled at : 0x0000757b488c44ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003495572 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :> 
C Primitive
starting at address : 0xa6ea4760 -- code size = 54 bytes
 -----------------------------
Word :: C.cfactorial3 : definition = 0x00005b5fa6ea4760 : disassembly at namespaces/test/dev.csl : 668.15 :
0x5b5fa6ea4760    498b06                  mov rax, [r14]                                         
0x5b5fa6ea4763    4c89f6                  mov rsi, r14                                           
0x5b5fa6ea4766    ba01000000              mov edx, 0x1                                           
0x5b5fa6ea476b    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea476f    7e20                    jle 0xa6ea4791                < C.cfactorial3+49 >
0x5b5fa6ea4771    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b5fa6ea477c    0f1f4000                nop [rax]                                              
0x5b5fa6ea4780    4889c1                  mov rcx, rax                                           
0x5b5fa6ea4783    4883e801                sub rax, 0x1                                           
0x5b5fa6ea4787    480fafd1                imul rdx, rcx                                          
0x5b5fa6ea478b    4883f801                cmp rax, 0x1                                           
0x5b5fa6ea478f    75ef                    jnz 0xa6ea4780                < C.cfactorial3+32 >
0x5b5fa6ea4791    488916                  mov [rsi], rdx                                         
0x5b5fa6ea4794    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial3' :: codeSize = 54
Word : 0x0000757b48409428 :: Compiled at : 0x00005b5fa6ea4760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002496127 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps
 

fac_shootout end ...


NamespaceTree - All Namespaces : using : not using :: with : words
         - Root powReg7 powReg6 powReg5 powReg4 powReg3 powReg2 powReg pow ;; sp sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
                 - Interpreter fac_shootout fib_shootout _shootout SHOOTOUT comment _ffx ifx _ifx dbg tfib3 fibBN tbn tfib3 tfib2 tfib1 tfib fibPTC2 fibPTC Cfib_O3 Cfib fibn0 sp _Compile_Stack_PopToReg sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
                 - C fib4 fib3 fib2 fib tt fibPTC3? fibPTC? _fib1 _fib2 factorial fac hi x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf oPrintf
                         - C_Syntax fibPTC4? fibPTC2? fibPTC? _fibn0 cpow fibPTC2? faccs2 fac5 fac40 faccs1 faccs fac5 faccs3 factoriali2 factoriali MOVrr MOVmr MOV32rm MOV8rm _Compile_Move _Compile_Move_DataStackN_ToReg _Compile_TESTreg_Toreg _Compile_MoveReg_To_StackN _Compile_MoveReg_To_Rm _Compile_Test _Compile_SUBI_DSP _Compile_CallThruReg _Compile_Group5 _Compile_X_Group1_Immediate _Compile_X_Group1_Reg_To_Reg _Compile_X_Group1 _Compile_SetAtAddress_WithReg _Compile_Move_Literal_Immediate_To_Reg Compile_MoveReg_ToAddress_ThruReg Compile_MoveMemValue_ToReg_ThruReg Compile_MoveMemValue_To_Reg Compile_MoveImm_To_Mem Compile_MoveImm_To_Reg Compile_MoveImm Compile_Move_Reg_To_Reg Compile_Move_Rm_To_Reg Compile_Move_Reg_To_Rm Compile_Move_WithSib Compile_Move Compile_CalculateWrite_Instruction_X64 _Compile_Write_Instruction_X64 CalculateModRmByte _Compile_ImmDispData CalculateSib CalculateModRegardingDisplacement Calculate_Mod Calculate_Rex _CalculateRex Abs fibPTC2? _fib1c factorial factoriali ash bttt ctti tfw1 tfw yadaYada yada fac5 $ faccs3 interpret4 faccs2 fac40 interpret3 interpret2 chi interpret testc1 thi42 thi41 thi42 ctof1 ctof yadaYada yada csMatchExWithReturn csMatchEx taa CSL_a10 ctcta cmoe cmoe cpow fac5 ctof1 ctof0 factorial tl l0030 l0061 l0052 l0060 l0051 l0050 l0041 l0040 l0020 l002 l0010 l001 pbAssert StringEqual rpn match & typedef type c_class ? ! , ; } {
                         - int wtdInclude fw this size
                         - void Error ftoc ctof this size
                         - int64 this size
                         - byte this size
                         - uint64 this size
                         - uint8 this size
                         - typedef buf this size
                                 - Buffer2048 node-p ash buffer this size
                         - Experimental3 abyteTest
                                 - byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                                 - _byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                         - Dlsym
                                 - libc buf xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
                                         - CBuffer this size
                         - CObj this size
                                 - chey
                         - block this size
                         - Pointer this size
                         - Boolean this size
                         - quad this size
                         - long this size
                         - char this size
                         - uint32 this size
                         - int32 this size
                         - uint16 this size
                         - int16 this size
                         - int8 this size
                         - Experimental OMS RemainingAllocated Freed Allocated OvtMemChunkList OVT_MemChunk OSMS RemainingAllocated Freed Allocated HistorySpace_MemChunkStringList OVT_StaticMemList StaticMemSpace OS_MemChunk TSI TypeStatusInfo Ppibs PreProcessorIfBlockStatus SuperNamespace NameSpace i32_FunctionArg Function blk_CallHook ui64_ObjectAttributes ui64_MorphismAttributes ccp_Name SuperNamespace const NameSpace const ui64_LispAttributes ui64_ObjectAttributes ui64_MorphismAttributes blk_Definition OpInsnCode OpInsnCodeGroup uint64_TypeSignature TypeSignature pb_TypeSignature ccp_Name ] 8 [ Pbf8 Pblc JmpBuf0 sigjmp_buf PrintBufferConcatCopy PrintBufferCopy PrintBuffer Thrown StringSpaceSize BufferSpaceSize CSLSize OpenVmTilSize DataStackSize SessionObjectsSize WordRecylingSize CompilerTempObjectsSize TempObjectsSize ContextSize LispSpaceSize InternalObjectsSize ObjectSpaceSize MachineCodeSize LispTempSize LispCopySize DictionarySize Dbi ReAllocations SigSegvs Restarts StartedTimes StartIncludeTries Verbosity CSL_InternalSpace OpenVmTilSpace InternalObjectSpace HistorySpace RecycledOptInfoList RecycledWordList BufferList NBAs MemorySpaceList MemorySpace0 TotalMemSizeTarget TotalNbaAccountedMemAllocated TotalNbaAccountedMemRemaining TotalRemainingAccounted Notice Alert Default Current SigLocation SigAddress Argv Argc ExceptionWord ExceptionToken ExceptionSpecialMessage ExceptionMessage VersionString ErrorFilename StartupFilename StartupString InitString Console ExceptionCode Signal RestartCondition LastRestartCondition SignalExceptionsHandled DebugOutputFlag LogFlag CodeByteArray OVT_LC OVT_Interpreter OVT_Context OVT_CSL State OVT_MemChunk ics_IntColors rgbcs_RgbColors Bg Fg rgbc_Bg rgbc_Fg Blue Green Red SavedCslNamespaces InNamespace Namespaces WordsAllocated WordsInRecycling RecycledWordCount NBAs StringSpace DictionarySpace LispSpace ObjectSpace CodeSpace BufferSpace LispCopySpace LispTempSpace WordRecylingSpace ContextSpace CompilerTempObjectSpace TempObjectSpace SessionObjectsSpace MS_MemChunk ContextSensitiveLanguage StrTokInfo StringTokenInfo CharInfo 16 CharType CharType 16 CharFunctionTableIndex CharFunctionTableIndex LambdaCalculus CombinatorInfo LexerFunction cntx ContextFunction arg cntx ContextFunction_1 arg2 arg1 cntx ContextFunction_2 arg3 arg2 arg1 cntx ContextFunction_3 JmpBuf0 sigjmp_buf ContextNba PreprocessorStackList CurrentlyRunningWordDefinition TypeCastNamespace QidInNamespace BaseObject SC_CurrentCombinator ArrayBaseFieldObject CurrentWordBeingCompiled LastCompiledWord CurrentDisassemblyWord SourceCodeWord CurrentCombinator NlsWord LastEvalWord CurrentEvalWord TokenDebugSetupWord CurrentTokenWord LastRanWord CurrentlyRunningWord SpecialDelimiterOrDotCharSet SpecialDelimiterCharSet SpecialTokenDelimiters DefaultDelimiterOrDotCharSet DefaultDelimiterCharSet DefaultTokenDelimiters CurrentToken Location ContextDataStack System0 Compiler0 Interpreter0 Finder0 Lexer0 ReadLiner0 WordCount NsCount State C_Node Timers IncludeFileStackNumber ExceptionFlag BigNum_Printf_Width BigNum_Printf_Precision NumberBase State Debugger struct DebuggerFunction Interpreter TDI_StructUnionStack CurrentTopBlockInfo OptimizeInfoList InfixOperatorStack InternalNamespacesStack CombinatorStack BlockStack CombinatorBlockInfoStack LocalsCompilingNamespacesStack PointerToJmpInsnStack PostfixLists OptInfo JccAdressOffsetList RegisterParameterList CurrentMatchList SetccMovedList GotoList NonCompilingNs LocalsNamespace Qid_BackgroundNamespace C_FunctionBackgroundNamespace C_BackgroundNamespace PrefixWord LHS_Word Current_Word_Create Current_Word_New ReturnLParenOperandWord ReturnVariableWord ReturnWord RspRestoreOffset RspSaveOffset BlocksBegun FrameSizeCellOffset AccumulatedOffsetPointer BeginBlockFlag TakesLParenAsBlock SemicolonEndsThisBlock InLParenBlock AccumulatedOptimizeOffsetPointer InitHere ArrayEnds OptimizeForcedReturn CombinatorLevel BlockLevel GlobalParenLevel ParenLevel SaveOptimizeState SaveCompileMode LocalsFrameSize NumberOfArgs NumberOfRegisterArgs NumberOfNonRegisterArgs NumberOfVariables NumberOfRegisterVariables NumberOfNonRegisterVariables NumberOfLocals NumberOfRegisterLocals NumberOfNonRegisterLocals CombinatorEndsAt CombinatorStartsAt StartPoint BreakPoint ContinuePoint IfZElseOffset State JON OffsetPointer JmpToAddress JON_Node TDSCI COI wordArg2_Op wordArg1_Op wordArg2_literal wordArg1_literal wordArg2_rvalue wordArg1_rvalue rvalue wordArg1Node wordArg2Node nextNode wordNode nodem node lparen2 lparen1 wordArg0_ForOpEqual xBetweenArg1AndArg2 wordArg2 wordArg1 wordm wordn opWord rparenPrevOp ControlFlags NumberOfArgs rtrn CPState CpuPipelineState COIW coiw_seven coiw_six coiw_five coiw_four coiw_three coiw_two coiw_one coiw_zero UseReg CO_DstReg CO_SrcReg CO_ImmSize CO_Imm CO_Disp CO_Rm CO_Reg CO_Mod CO_Dest_RegOrMem OptimizeFlag State_OREG2 State_OREG State_ACC State S_Node Lexer QualifyingNamespace FoundWord State ReadLineFunction struct ReadLiner_KeyFunction TabCompletionInfo Registers Rip RFlags R15d R14d R13d R12d R11d R10d R9d R8d Rdi Rsi Rbp Rsp Rbx Rdx Rcx Rax State Disp OffsetSize InsnSize Insn InsnType InsnAddress IiFlags BI_LocalsNamespace BI_Rllafl BI_Gi RegisterVariableControlWord OurCombinator LogicCodeWord ResetFlag N SetccNegFlag Ttt SetccTtt JmpToAddress ActualCopiedToJccCode CopiedToLogicJccCode CopiedToEnd MovzxCode SetccCode BI_StackPushRegisterCode CopiedToStart OriginalActualCodeStart AfterCmpCode CmpCode TestCode JccAddedCode JccCode TttnCode CompiledAtAddress PtrToJmpInsn PtrToJumpOffset bp_Last bp_First AfterLocalFrame LocalFrameStart ParenLevel JccType CopiedSize State BI_Symbol andOrCount la_code pparenlvl mparenlvl oparenlvl rtrn j i orAfterAnd andAfterOr orAfter2rparen andAfter2rparen Ncll Ncul ncp ncm nc PtrToJmpInsn pb_JmpOffsetPointer LabeledAddress OriginalAddress CompiledAtAddress pb_LabelName GI_BlockInfo CombinatorLevel BlockLevel Combinator GI_Word AddressSet GI_Symbol NBA BA_Data bp_Last EndIndex StartIndex MemRemaining BA_DataSize OurNBA NamedByteArray BA_Symbol BA_MemChunk TypeNamespace TypeSignatureCodes StackMapFunction4 StackMapFunction2 StackMapFunction1 StackMapFunction0 symbol VMapSymbol2 MapNodeFunction MapSymbolFunction2 VMapNodeFunction MapSymbolFunction MapFunction_2 MapFunction_Word MapFunction_1 MapFunction MapFunction_Word_PtrInt ListFunction4 ListFunction3 ListFunction2 ListFunction ListFunction0 cMapFunction_1 HistoryStringNode MemChunk CaseNode Buffer Symbol ListObject DObject DynamicObject Class Vocabulary Namespace Combinator ID BoolMapFunction_1 MapFunction5 MapFunction4 MapFunction4wReturn MapFunction3 MapFunction2_64 MapFunction2 MapFunction1 MapFunction0 List DLList ListNode Node n_Attributes n_dobject n_DLNode _DLList _ListNode _Node n_CurrentNode n_iData n_bData n_unmap n_InUseFlag n_Slots n_Size n_Type n_Node n_Before n_After do_iData do_bData do_unmap do_InUseFlag do_Slots do_Size do_Type do_Node do_Before do_After l_CurrentNode l_List _dllist node TI AttributeArray T_ChunkSize T_Size T_NumberOfBytes T_NumberOfSlots T_Unused T_NumberOfPrefixedArgs T_WordAttributes T_WAllocationType T_LispAttributes T_ObjectAttributes T_MorphismAttributes slot object function StackData InitialTosPointer StackMax StackMin StackPointer StackSize cFunction_2_Arg cFunction_1_Arg cFunction_0_Arg vFunction_2_Arg vFunction_1_UArg vFunction_1_Arg VoidFunction
                                 - dlnode n_Tail n_Before n_Head n_After this size
                                 - dllist this size
                                 - TypeInfo this size
                                 - Stack this size
                                 - Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - OpenVmTil this size
                                 - CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - OVT_MemSystem this size
                                 - OVT_StaticMemSystem this size
                                 - typeStatusInfo OpWordReturnSignatureLetterCode OpWord_ReturnsACodedValue_Flag TypeErrorStatus ] 128 [ ActualTypeStackRecordingBuffer ] 32 [ ExpandedTypeCodeBuffer OpWordTypeSignature OpWordFunctionTypeSignatureLength TypeStackDepth StackWord1 StackWord0 WordBeingCompiled OpWord TypeWordStack this size
                                 - ppibs LineNumber Filename 1 SvIfCond SvIfCond 1 ElifCond ElifCond 1 IfCond IfCond 1 Status Status 1 AccumStatus AccumStatus int64_Ppibs this size
                                 - MachineCodePrimitive this size
                                 - CPrimitive this size
                                 - Colors this size
                                 - IntColors this size
                                 - RgbColors this size
                                 - RgbColor this size
                                 - MemorySpace this size
                                 - _CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - _StringTokenInfo CharSet0 CharSet SMNamespace Delimiters Out In EndIndex StartIndex State this size
                                 - CharacterType this size
                                 - _LambdaCalculus LC_JmpBuf sigjmp_buf OurCSL _CSL IndentDbgPrint SavedTypeCheckState LetFlag ApplyFlag Lambda_SC_WordList Code outBuffer buffer PrintBuffer OutBuffer BaseObject ArrayBaseObject Sc_Word LC_Here LC_SourceCode SaveStackPointer CombinatorInfoStack QuoteStateStack QuoteState ItemQuoteState SavedCodeSpace LastInterpretedWord FunctionArgs FunctionParameters True Nil Largs1 Largs Largs0 Locals Lvalue Lfunction Lfunction0 Lfirst L1 L0 Lread BackgroundNamespace LispTempNamespace LispDefinesNamespace LispNamespace ParenLevel Loop DontCopyFlag DebuggerSetupFlag DebuggerState State this size
                                 - _CombinatorInfo 16 ParenLevel ParenLevel 16 BlockLevel BlockLevel CI_i32_Info this size
                                 - Context this size
                                 - System this size
                                 - _Debugger DebugWordList Udis ud_t CharacterFunctionTable DebuggerFunction CharacterTable StepInstructionBA cs_Cpu LocalsCompilingNamespacesStack BreakReturnStack ReturnStack RestoreCpuState SaveCpuState Filename ShowLine LastDisStart StartHere SpecialPreHere PreHere LastSourceCodeAddress CopyRBP CopyRSP ReturnAddress DebugAddress Token Menu SubstitutedWord LastSourceCodeWord CurrentlyRunningWord SteppedWord LastPreSetupWord LocalsNamespace NextEvalWord LastShowEffectsWord LastShowInfoWord EntryWord w_AliasOf w_Alias w_Word InsnSize Edi Esi LastScwi SaveKey Key SaveStackDepth SaveTOS RL_ReadIndex Insn LevelBitNamespaceMap LastRsp DebugRDI DebugRSI DebugRBP DebugRSP WordDsp SaveRsp SaveEdi AddressModeSaveDsp RaDsp InitDsp SaveDsp State this size
                                 - _Interpreter InterpList WordType ThisNamespace CurrentObjectNamespace LastWord w_Word Token Compiler0 Lexer0 Finder0 ReadLiner0 State this size
                                 - Compiler this size
                                 - JccOffsetNode this size
                                 - TypeDefStructCompileInfo StructureUnionName FieldName TdsciToken DataPtr NextChar Tdsci_Field_Object Tdsci_Field_Type_Namespace Tdsci_StructureUnion_Namespace Tdsci_InNamespace Tdsci_ArrayNumberOfDimensions Tdsci_ArrayDimensions Token_StartIndex Token_EndIndex LineNumber Tdsci_Field_Size Tdsci_Union_Size Tdsci_Structure_Size Tdsci_StructureUnion_Size Tdsci_Offset State this size
                                 - CompileOptimizeInfo this size
                                 - _Lexer TokenList SCI ReadLiner0 NextPeekListItem TokenWord LiteralString Literal CurrentChar TokenBuffer lexer struct NextChar LastToken Filename DelimiterOrDotCharSet DelimiterCharSet TokenDelimiters CurrentTokenDelimiter LastLexedChar TokenInputByte ParsedToken OriginalToken LineNumber TokenWriteIndex CurrentReadIndex SC_Index Token_Length TokenEnd_FileIndex TokenStart_FileIndex TokenEnd_ReadLineIndex TokenStart_ReadLineIndex Token_CompiledDataFieldByteSize L_ObjectAttributes L_MorphismAttributes State this size
                                 - SourceCodeInfo SciBuffer SciWord SciFileIndexScEnd SciFileIndexScStart SciQuoteMode SciIndex this size
                                 - Finder this size
                                 - ReadLiner TciNamespaceStack TabCompletionInfo0 HistoryNode OutputFile InputFile FILE Key ReadLiner_KeyFunction svLine InputStringCurrent InputStringOriginal InputLineString InputLine Prompt AltPrompt NormalPrompt DebugAltPrompt DebugPrompt LastCheckedInputKeyedCharacter Filename LineStartFileIndex InputStringLength InputStringIndex EscapeModeFlag CursorPosition MaxEndPosition EndPosition svReadIndex ReadIndex OutputLineCharacterNumber LineNumber FileCharacterNumber InputKeyedCharacter svState State this size
                                 - TCI MarkNamespace OriginalContainingNamespace LastFoundWord ObjectExtWord NextWord OriginalRunWord RunWord OriginalWord TrialWord Identifier PreviousIdentifier SearchToken ShownWrap StartFlag FoundMarker LastWordWrapCount WordWrapCount WordCount FoundWrapCount MaxFoundCount FoundCount TokenLength DotSeparator EndDottedPos TokenLastChar TokenFirstChar State this size
                                 - Cpu this size
                                 - BlockInfo this size
                                 - Rllafl this size
                                 - GotoInfo this size
                                 - NamedByteArray NBA_ML_TailNode NBA_ML_HeadNode NBA_BaList InitFreedRandMarker Allocations NumberOfByteArrays SmallestRemaining LargestRemaining MemRemaining MemAllocated MemInitial TotalAllocSize NBA_DataSize OriginalSize ba_CurrentByteArray NBA_Symbol NBA_MemChunk this size
                                 - ByteArray this size
                                 - _WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - TypeSignatureInfo this size
                                 - location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - _Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - _DLNode this size
                                 - _node n_Tail n_Before n_Head n_After this size
                                 - int64 this size
                                 - Location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - block this size
                                 - Pointer this size
                                 - AttributeInfo this size
                                 - dobject this size
                                 - DLNode this size
                                 - WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - Word wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                         - PrefixCombinators loop for do while if
                         - Infix tti tt ftfw2 ftfw1 moe moe =
                 - User fib1 _fib4 _fib3 _fib2 _fib _fib1 _fibn1 ffx2 ffx comment _ffx2 _ffx reps ifx2 ifx _ifx2 _ifx reps0 factorial2 factorial s fac bexp3 bexp2 bexp qexp2 qexp factorial006 factorial005 stest qeval sp heey1 hey1 hi1 heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
                         - Experimental tx
                         - StartupMacros namespaces Delimiters
                 - Locals (| (
                 - Int mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / ^^ pow_03 pow ** * -= += - +
                 - Logic tx1 l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
                         - Bits tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
                 - Compiler _fib1 vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
                         - Compiling pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
                         - Reserved {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
                 - Shell hio ppxe ppx epause apause test sh $ _sh endif else if
                 - Defines _DEV_H_ Compile_DEC Compile_INC _X64_CSL_ TSE_SIZE_MISMATCH TSE_ERROR SC_Index SC_QuoteMode SC_Buffer SC_Word STI_INITIALIZED TDI_POST_STRUCT TDI_UNION_PRINTED TDI_POINTER TDI_PRINT TDI_UNION TDI_STRUCT TDI_CLONE_FLAG OP_RESULT ARG2_R ARG2_L ARG1_R ARG1_L STACK_ARGS_TO_STANDARD_REGS OP_RESULT_OREG2 OP_RESULT_OREG OP_RESULT_ACC OREG2_2R OREG2_2L OREG2_1R OREG2_1L OREG_2R OREG_2L OREG_1R OREG_1L ACC_2R ACC_2L ACC_1R ACC_1L REG_LOCK_BIT LOC_OREG LOC_ACC LOC_STACK_1 LOC_STACK_0 IDEAL_LOC_OREG2 IDEAL_LOC_OREG IDEAL_LOC_ACC IDEAL_STACK_3 IDEAL_STACK_2 IDEAL_STACK_1 IDEAL_STACK_0 IDEAL_LOC_LITERAL ASSUMED_LOC_OREG2 ASSUMED_LOC_OREG ASSUMED_LOC_ACC ASSUMED_STACK_3 ASSUMED_STACK_2 ASSUMED_STACK_1 ASSUMED_STACK_0 ASSUMED_LOC_LITERAL LOGIC_FLAG SHOULD_BE_32 COULD_BE_16 COULD_BE_8 PRESERVE_INSN_SIZE GI_CAttribute CN_CaseUint64Value CN_CaseBytePtrValue CN_CaseBlock NBA_Name NBA_Chunk_Size NBA_AAttribute BA_AAttribute BA_AllocSize mc_TotalAllocSize mc_Data mc_Name mc_AllocType mc_ChunkSize mc_unmap mc_Type mc_Node B_Data B_Size B_CAttribute W_DObjectValue W_PtrToValue W_BytePtr W_Value3 W_Value2 W_Object W_Value W_List Lo_LambdaBody Lo_LambdaParameters Lo_String Lo_Integer Lo_UInteger Lo_Object Lo_PtrToValue Lo_Value Lo_List Lo_NumberOfSlots Lo_Tail Lo_Head Lo_Size Lo_Name Lo_LProp Lo_CProp Lo_LAttribute Lo_CAttribute InUseFlag Data WProp LProp CProp2 CProp W_LineNumber W_Filename W_AllocType W_NumberOfPrefixedArgs W_TypeAttributes W_LispAttributes W_ObjectAttributes W_MorphismAttributes Name S_MacroLength S_CodeSize S_unmap S_String S_Pointer S_NumberOfSlots S_ChunkSize ObjectByteSize CompiledDataFieldByteSize Size S_Size S_NumberOfPrefixedArgs S_LispAttributes S_WAllocType S_WordAttributes S_ObjectAttributes S_MorphismAttributes S_CurrentNode S_Before S_After S_Cdr S_Car n_Cdr n_Car Tail Head ENUM BITFIELDS xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
                 - Stack ndup stackCheck setDsp dsp _swap stackDepth depth pick _ndrop dropN drop ndup tos dup _dup
                 - Asm testAsm ;asm asm: asmEnd asmBegin svDsp jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
                         - X64 _Compile_Int64 _Compile_Int32 _Compile_Int16 _Compile_Int8 fa dbiOff dbiOn DBI x64_dbg REX_W IMM_B DISP_B SIB_B MODRM_B REX_B DEC INC N TO_MEM TO_REG INT32_SIZE CELL_SIZE CELL BYTE CALL CMP SUB ADD NG LE LESS NA BE Z ZERO EQ EQUAL BELOW SREG THRU_REG ACC FP DSP R15D R14D R13D R12D R11D R10D R9D R8D RDI RSI RBP RSP RBX RDX RCX RAX MEM MEM0 MEM32 MEM8 REG off on false true sp
                 - Combinators Compile_Stack_Push_R8D _Compile_CMPreg_IMM _Compile_ADDI_DSP _Compile_MoveTOS_To_R8D _Compile_IncDecreg _Compile_Test_Imm iax ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
                 - Class . clone new struct class :{ +:{ };
                         - Buffer buf this size
                                 - DLLNode sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
                                         - DLLNodeAlloc testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
                                                 - Ar1 a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
                                                         - a
                                                         - Ar2 a5 a4 ar this size
                                                                 - Ar3 a7 a8 a6x a6 ar this size
                                                                         - Ar9 arr9 a9 a9dump _adump ar dimSize this size
                                                                                 - Ar10 a10dump ar dimSize this size
                                                                                         - arr10
                                                                                 - ct0 ac a tct ab ar this size
                                                                                         - cta a caba cadump a tcta aba ar this size
                                                                                 - ar9
                                                 - testD testC
                                                         - a112 c1138
                                                 - DLLNodeAlloc4 testna5 dlna4o testna5 testna4 nodes this size
                                         - DLList hey hi hey hi testList init TailNode HeadNode this size
                                                 - DLListClone testClone init Accum Four Three Twelve Sum Prototype Category this size
                         - Pointer this size
                                 - Integer
                         - BigNum ctof2 ftoc ctof tfib3 fibBN tbn bexpl !! ! bexp0 bexp aexp x ! qexp _bassert eprint p fprint _bfprint _beprint ** ^^ pow sqrt != == > >= < <= / * -- ++ /= -= *= += - +
                 - Experimental xyxz <does <do does> do> locationPrint locationPush
                 - String hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
                 - System ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwi pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackInit warmInit init reset _include
                         - Colors alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
                         - File freadToString fexists fsize ftell fseek fread fwrite fclose fopen
                 - Debug dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState dbg udis1x udis1 dsOn dsOff stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
                 - Control maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
                 - DObject new clone dobject
                         - DO_Experimental o12
                                 - o1
                                         - o2 ay
                                                 - o3 ott o4
                 - Lexer sp heey hey hi ofile orpfile % "
                 - List bexp3 lcRestoreStack dupList printList eval _( _lisp
                 - OpenVmTil ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
                         - Memory recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
                 - Io Error logWrite logAppend logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc space tab cr newline kbhit key emit printString
                 - Word code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
                 - Macro rdim rdi s _s tm: findAlias alias sm:
                 - Namespace usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
                 - PreProcessor ifndef ifdef undef defined include define elif if else endif !
                 - Array [ ]
                 - MemorySpace msDelete memspace
                 - Forth rpn n, 8, 4, , 2, 1, '
                 - L9 l9
                 - Test hey2 hey
                         - test2 hi
                         - test hi
                 - Lisp /| /. /\ lambda sp lcDbOff lcDbOn ;;; lcShowLisp lcShowLispDefines lcClearDefines lcReset = :: ,@ unquoteSplicing , unquote ` quasiquote @ ' load list eval quote cdr car if* cond if condc ifc macro let set begin lambda _lambda definec define _Printf ) print _( (
         - LispTemp
         - LispDefines
Total namespaces = 160 :: Total words = 3201

Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =   3068324 : Unused =   1125980 : Allocations =    2 : Largest =  1109500 : Smallest =    16480 : AllocSize =  2097152
SessionObjectsSpace     InUse =   1253266 : Unused =    843886 : Allocations =    2 : Largest =   843706 : Smallest =      180 : AllocSize =  1048576
WordRecylingSpace       InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CompilerTempObjectSpace InUse =   7156712 : Unused =   1231896 : Allocations =    2 : Largest =  1231776 : Smallest =      120 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =       105 : Unused =   4194199 : Allocations =    2 : Largest =  4194199 : Smallest =  4194199 : AllocSize =  4194304
BufferSpace             InUse =    341962 : Unused =    706614 : Allocations =    1 : Largest =   706614 : Smallest =   706614 : AllocSize =  1048576
StringSpace             InUse =    266206 : Unused =    782370 : Allocations =    1 : Largest =   782370 : Smallest =   782370 : AllocSize =  1048576
ObjectSpace             InUse =         0 : Unused =   1048576 : Allocations =    3 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
LispSpace               InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CodeSpace               InUse =    240920 : Unused =    807656 : Allocations =    1 : Largest =   807656 : Smallest =   807656 : AllocSize =  1048576
DictionarySpace         InUse =   7674947 : Unused =    713661 : Allocations =    2 : Largest =   713245 : Smallest =      416 : AllocSize =  4194304
InternalObjectSpace     InUse =    501288 : Unused =    547288 : Allocations =    1 : Largest =   547288 : Smallest =   547288 : AllocSize =  1048576
CSLInternalSpace        InUse =    828440 : Unused =    220136 : Allocations =    1 : Largest =   220136 : Smallest =   220136 : AllocSize =  1048576
StaticSpace             InUse =       115 : Unused =      1933 : Allocations =    1 : Largest =     1933 : Smallest =     1933 : AllocSize =     2048
Data Stack              InUse =        24 : Unused =      8168
Total Accounted Mem     InUse =  21573285 : Unused =  15369923
Non-Static Mem Allocated      =  36943208
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         9
WordsAllocation               =  15273360 : 35355 x 432 bytes
Recycled-Bytes:WordCount      =    241488 : 559   x 432 bytes
InRecycling-Bytes:Words       =   4771872 : 11046 x 432 bytes

Timer [ 1 ] : elapsed time = 0.974100880 seconds

Timer [ 2 ] : elapsed time = 2.242763125 seconds

System Startup [ 0 ] : elapsed time = 3.810547840 seconds
OVT Startup : elapsed time = 3.810540977 seconds
version 0.940.140
<: 
