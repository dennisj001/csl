[dennisj@infinity-a5 csl]$ bin/csl.939.483 

including ./init.csl at <command line> : 0.21 ...

System Startup [ 0 ] : elapsed time = 0.016804585 seconds
OVT Startup : elapsed time = 0.021315466 seconds
version 0.939.483
<: tc

including namespaces/ninit.csl at <command line> : 1.3 ...

including namespaces/test/initTest.csl at namespaces/ninit.csl : 10.23 ...

before testAll 
test nested elif 1 - correct 

including namespaces/compiler/preprocessor.csl at namespaces/test/initTest.csl : 86.41 ...
 
preprocessor test ok1
 
preprocessor test ok2
 
ppx = 2 
ppxe = 0
including namespaces/test/logic.csl at namespaces/test/initTest.csl : 86.41 ...
 1 0
 =============================
Bits.lnt <:> csl compiled word
SourceCode for Bits.lnt :> 
: lnt ( n ) n @ 7 < dup p return tos ; 
Source code file location of lnt : "namespaces/test/logic.csl" : 12.2 :: we are now at : namespaces/test/logic.csl : 13.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84413d -- code size = 66 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.lnt : definition = 0x000078722b84413d : disassembly at namespaces/test/logic.csl : 13.17 :
0x78722b84413d    4d897e08                mov [r14+0x8], r15                                     
0x78722b844141    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844145    4981c608000000          add r14, 0x8                                           
 ..                           : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x78722b84414c    49837ff807              cmp qword [r15-0x8], 0x7                               
0x78722b844151    0f9cc0                  setl al                                                
0x78722b844154    480fb6c0                movzx rax, al                                          
0x78722b844158    4983c610                add r14, 0x10                                          
0x78722b84415c    498906                  mov [r14], rax                                         
 ..                   : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x78722b84415f    498946f8                mov [r14-0x8], rax                                     
 ..               : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x78722b844163    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84416d    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..             : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x78722b844170    498b06                  mov rax, [r14]                                         
0x78722b844173    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844177    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84417b    498906                  mov [r14], rax                                         
 ..  : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x78722b84417e    c3                      ret                                                    
Word_Disassemble : word - 'lnt' :: codeSize = 66
Word : 0x000078722b9826a7 :: Compiled at : 0x000078722b84413d
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 13.17 <::
 1 0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 1 0
 =============================
Bits.lnt2 <:> csl compiled word
SourceCode for Bits.lnt2 :> 
: lnt2 ( n m ) n @ m @ >= dup p return tos ; 
Source code file location of lnt2 : "namespaces/test/logic.csl" : 25.2 :: we are now at : namespaces/test/logic.csl : 26.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84434c -- code size = 76 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.lnt2 : definition = 0x000078722b84434c : disassembly at namespaces/test/logic.csl : 26.18 :
0x78722b84434c    4d897e08                mov [r14+0x8], r15                                     
0x78722b844350    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844354    4981c608000000          add r14, 0x8                                           
 ..                        : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x78722b84435b    498b47f0                mov rax, [r15-0x10]                                    
 ..                    : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x78722b84435f    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x78722b844363    483bc1                  cmp rax, rcx                                           
0x78722b844366    0f9dc0                  setge al                                               
0x78722b844369    480fb6c0                movzx rax, al                                          
0x78722b84436d    4983c610                add r14, 0x10                                          
0x78722b844371    498906                  mov [r14], rax                                         
 ..             : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x78722b844374    498946f8                mov [r14-0x8], rax                                     
 ..         : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x78722b844378    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b844382    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..       : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x78722b844385    498b06                  mov rax, [r14]                                         
0x78722b844388    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84438c    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b844390    4983ee08                sub r14, 0x8                                           
0x78722b844394    498906                  mov [r14], rax                                         
 .. 2 ( n m ) n @ m @ >= dup p return tos ; 
0x78722b844397    c3                      ret                                                    
Word_Disassemble : word - 'lnt2' :: codeSize = 76
Word : 0x000078722b98b0b7 :: Compiled at : 0x000078722b84434c
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 26.18 <::

 0 0 1 1 0 0 0 0 1 1
 1 0 0
 =============================
Bits.tnot <:> csl compiled word
SourceCode for Bits.tnot :> 
: tnot ( n ) n @ not dup n store n @ dup p return tos ; 
Source code file location of tnot : "namespaces/test/logic.csl" : 46.2 :: we are now at : namespaces/test/logic.csl : 47.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84468a -- code size = 101 bytes
TypeSignature : Integer -> Integer 
 -----------------------------
Word :: Bits.tnot : definition = 0x000078722b84468a : disassembly at namespaces/test/logic.csl : 47.18 :
0x78722b84468a    4d897e08                mov [r14+0x8], r15                                     
0x78722b84468e    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844692    4981c608000000          add r14, 0x8                                           
 ..                          : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b844699    498b47f8                mov rax, [r15-0x8]                                     
 ..                      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b84469d    4883f800                cmp rax, 0x0                                           
0x78722b8446a1    0f94c0                  setz al                                                
0x78722b8446a4    480fb6c0                movzx rax, al                                          
0x78722b8446a8    4983c610                add r14, 0x10                                          
0x78722b8446ac    498906                  mov [r14], rax                                         
 ..                  : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b8446af    498946f8                mov [r14-0x8], rax                                     
0x78722b8446b3    498d47f8                lea rax, [r15-0x8]                                     
 ..              : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b8446b7    488bc8                  mov rcx, rax                                           
0x78722b8446ba    498b06                  mov rax, [r14]                                         
0x78722b8446bd    4983ee08                sub r14, 0x8                                           
 ..            : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b8446c1    488901                  mov [rcx], rax                                         
 ..      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b8446c4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8446c8    4983c610                add r14, 0x10                                          
0x78722b8446cc    498906                  mov [r14], rax                                         
 ..  : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b8446cf    498946f8                mov [r14-0x8], rax                                     
 : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x78722b8446d3    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b8446dd    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. t ( n ) n @ not dup n store n @ dup p return tos ; 
0x78722b8446e0    498b06                  mov rax, [r14]                                         
0x78722b8446e3    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8446e7    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8446eb    498906                  mov [r14], rax                                         
 ..  not dup n store n @ dup p return tos ; 
0x78722b8446ee    c3                      ret                                                    
Word_Disassemble : word - 'tnot' :: codeSize = 101
Word : 0x000078722b996eb7 :: Compiled at : 0x000078722b84468a
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 47.18 <::
 tnot1_assert  : ok

 tnot2_assert  : ok

 1 tnot3_assert  : ok

 0 tnot4_assert  : ok


 =============================
Bits.tnot2 <:> csl compiled word
SourceCode for Bits.tnot2 :> 
: tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
Source code file location of tnot2 : "namespaces/test/logic.csl" : 53.2 :: we are now at : namespaces/test/logic.csl : 54.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8446f4 -- code size = 98 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.tnot2 : definition = 0x000078722b8446f4 : disassembly at namespaces/test/logic.csl : 54.19 :
0x78722b8446f4    4d897e08                mov [r14+0x8], r15                                     
0x78722b8446f8    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8446fc    4981c610000000          add r14, 0x10                                          
 ..                   : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b844703    498b47f0                mov rax, [r15-0x10]                                    
 ..               : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b844707    498b4ff8                mov rcx, [r15-0x8]                                     
 ..           : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b84470b    480bc1                  or rax, rcx                                            
 ..         : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b84470e    4883f800                cmp rax, 0x0                                           
0x78722b844712    0f94c0                  setz al                                                
0x78722b844715    480fb6c0                movzx rax, al                                          
0x78722b844719    4983c610                add r14, 0x10                                          
0x78722b84471d    498906                  mov [r14], rax                                         
 ..     : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b844720    498946f8                mov [r14-0x8], rax                                     
0x78722b844724    498d4708                lea rax, [r15+0x8]                                     
 .. : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b844728    488bc8                  mov rcx, rax                                           
0x78722b84472b    498b06                  mov rax, [r14]                                         
0x78722b84472e    4983ee08                sub r14, 0x8                                           
  : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x78722b844732    488901                  mov [rcx], rax                                         
 .. ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
0x78722b844735    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84473f    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
0x78722b844742    498b4708                mov rax, [r15+0x8]                                     
0x78722b844746    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84474a    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84474e    4983ee08                sub r14, 0x8                                           
 ..  n @ m @ | not dup v store p return ( v @ ) ; 
0x78722b844752    498906                  mov [r14], rax                                         
 ..  @ | not dup v store p return ( v @ ) ; 
0x78722b844755    c3                      ret                                                    
Word_Disassemble : word - 'tnot2' :: codeSize = 98
Word : 0x000078722b9986c7 :: Compiled at : 0x000078722b8446f4
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 54.19 <::
 1 0
 =============================
Bits.tnot3 <:> csl compiled word
SourceCode for Bits.tnot3 :> 
: tnot3 ( n ) n @ not dup p return tos ; 
Source code file location of tnot3 : "namespaces/test/logic.csl" : 57.2 :: we are now at : namespaces/test/logic.csl : 58.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84475b -- code size = 69 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.tnot3 : definition = 0x000078722b84475b : disassembly at namespaces/test/logic.csl : 58.19 :
0x78722b84475b    4d897e08                mov [r14+0x8], r15                                     
0x78722b84475f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844763    4981c608000000          add r14, 0x8                                           
 ..                         : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x78722b84476a    498b47f8                mov rax, [r15-0x8]                                     
 ..                     : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x78722b84476e    4883f800                cmp rax, 0x0                                           
0x78722b844772    0f94c0                  setz al                                                
0x78722b844775    480fb6c0                movzx rax, al                                          
0x78722b844779    4983c610                add r14, 0x10                                          
0x78722b84477d    498906                  mov [r14], rax                                         
 ..                 : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x78722b844780    498946f8                mov [r14-0x8], rax                                     
 ..             : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x78722b844784    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84478e    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..           : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x78722b844791    498b06                  mov rax, [r14]                                         
0x78722b844794    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844798    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84479c    498906                  mov [r14], rax                                         
   : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x78722b84479f    c3                      ret                                                    
Word_Disassemble : word - 'tnot3' :: codeSize = 69
Word : 0x000078722b99a237 :: Compiled at : 0x000078722b84475b
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 58.19 <::
 0
 =============================
Bits.tAnd <:> csl compiled word
SourceCode for Bits.tAnd :> 
: tAnd ( n m ) n @ m @ && dup p return tos ; 
Source code file location of tAnd : "namespaces/test/logic.csl" : 61.2 :: we are now at : namespaces/test/logic.csl : 62.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8447a5 -- code size = 121 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Bits.tAnd : definition = 0x000078722b8447a5 : disassembly at namespaces/test/logic.csl : 62.18 :
0x78722b8447a5    4d897e08                mov [r14+0x8], r15                                     
0x78722b8447a9    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8447ad    4981c608000000          add r14, 0x8                                           
 ..                        : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x78722b8447b4    498b47f0                mov rax, [r15-0x10]                                    
0x78722b8447b8    4983c608                add r14, 0x8                                           
0x78722b8447bc    498906                  mov [r14], rax                                         
 ..                    : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x78722b8447bf    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8447c3    4983c608                add r14, 0x8                                           
0x78722b8447c7    498906                  mov [r14], rax                                         
 ..                : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x78722b8447ca    498bc6                  mov rax, r14                                           
0x78722b8447cd    4983ee08                sub r14, 0x8                                           
0x78722b8447d1    48833800                cmp qword [rax], 0x0                                   
0x78722b8447d5    7410                    jz 0x2b8447e7                 < Bits.tAnd+66 >
0x78722b8447d7    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b8447dc    7409                    jz 0x2b8447e7                 < Bits.tAnd+66 >
0x78722b8447de    49c70601000000          mov qword [r14], 0x1                                   
0x78722b8447e5    eb07                    jmp 0x78722b8447ee            < Bits.tAnd+73 >
0x78722b8447e7    49c70600000000          mov qword [r14], 0x0                                   
0x78722b8447ee    0f8400000000            jz 0x78722b8447f4             < Bits.tAnd+79 >
 ..             : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x78722b8447f4    498b06                  mov rax, [r14]                                         
0x78722b8447f7    4983c608                add r14, 0x8                                           
0x78722b8447fb    498906                  mov [r14], rax                                         
 ..         : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x78722b8447fe    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b844808    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..       : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x78722b84480b    498b06                  mov rax, [r14]                                         
0x78722b84480e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844812    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b844816    4983ee08                sub r14, 0x8                                           
0x78722b84481a    498906                  mov [r14], rax                                         
 .. d ( n m ) n @ m @ && dup p return tos ; 
0x78722b84481d    c3                      ret                                                    
Word_Disassemble : word - 'tAnd' :: codeSize = 121
Word : 0x000078722b99b387 :: Compiled at : 0x000078722b8447a5
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 62.18 <::
 0 1 0  : ok

 1 1 1  : ok

 0 0 0  : ok

 0 0 1  : ok


 =============================
Bits.tNotAnd <:> csl compiled word
SourceCode for Bits.tNotAnd :> 
: tNotAnd ( n m ) n @ m @ not && dup p return tos ; 
Source code file location of tNotAnd : "namespaces/test/logic.csl" : 68.2 :: we are now at : namespaces/test/logic.csl : 69.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b844823 -- code size = 132 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Bits.tNotAnd : definition = 0x000078722b844823 : disassembly at namespaces/test/logic.csl : 69.21 :
0x78722b844823    4d897e08                mov [r14+0x8], r15                                     
0x78722b844827    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84482b    4981c608000000          add r14, 0x8                                           
 ..                     : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b844832    498b47f0                mov rax, [r15-0x10]                                    
0x78722b844836    4983c608                add r14, 0x8                                           
0x78722b84483a    498906                  mov [r14], rax                                         
 ..                 : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b84483d    498b47f8                mov rax, [r15-0x8]                                     
 ..             : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b844841    4883f800                cmp rax, 0x0                                           
0x78722b844845    0f94c0                  setz al                                                
0x78722b844848    480fb6c0                movzx rax, al                                          
0x78722b84484c    4983c608                add r14, 0x8                                           
0x78722b844850    498906                  mov [r14], rax                                         
 ..         : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b844853    498bc6                  mov rax, r14                                           
0x78722b844856    4983ee08                sub r14, 0x8                                           
0x78722b84485a    48833800                cmp qword [rax], 0x0                                   
0x78722b84485e    7410                    jz 0x2b844870                 < Bits.tNotAnd+77 >
0x78722b844860    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b844865    7409                    jz 0x2b844870                 < Bits.tNotAnd+77 >
0x78722b844867    49c70601000000          mov qword [r14], 0x1                                   
0x78722b84486e    eb07                    jmp 0x78722b844877            < Bits.tNotAnd+84 >
0x78722b844870    49c70600000000          mov qword [r14], 0x0                                   
0x78722b844877    0f8400000000            jz 0x78722b84487d             < Bits.tNotAnd+90 >
 ..      : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b84487d    498b06                  mov rax, [r14]                                         
0x78722b844880    4983c608                add r14, 0x8                                           
0x78722b844884    498906                  mov [r14], rax                                         
 ..  : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b844887    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b844891    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
   : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x78722b844894    498b06                  mov rax, [r14]                                         
0x78722b844897    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84489b    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84489f    4983ee08                sub r14, 0x8                                           
0x78722b8448a3    498906                  mov [r14], rax                                         
 .. n m ) n @ m @ not && dup p return tos ; 
0x78722b8448a6    c3                      ret                                                    
Word_Disassemble : word - 'tNotAnd' :: codeSize = 132
Word : 0x000078722b99c837 :: Compiled at : 0x000078722b844823
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 69.21 <::
 1 tNotAnd1 1 0  : ok

 0 tNotAnd2 1 1  : ok

 0 tNotAnd3 0 0  : ok

 0 tNotAnd4 0 1  : ok


 0x0000000100000000  >  0x00000000ffffffff 1
DataStack at : namespaces/test/logic.csl : 77.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 0x00000000ffffffff  >  0x0000000100000000 0
 =============================
Logic.nt <:> csl compiled word
SourceCode for Logic.nt :> 
: nt ( n ) n @ ! ! ! return tos ; 
Source code file location of nt : "namespaces/test/logic.csl" : 80.2 :: we are now at : namespaces/test/logic.csl : 83.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b844962 -- code size = 42 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.nt : definition = 0x000078722b844962 : disassembly at namespaces/test/logic.csl : 83.15 :
0x78722b844962    4d897e08                mov [r14+0x8], r15                                     
0x78722b844966    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84496a    4981c608000000          add r14, 0x8                                           
 ..                            : nt ( n ) n @ ! ! ! return tos ;  .. 
0x78722b844971    498b47f8                mov rax, [r15-0x8]                                     
 ..                        : nt ( n ) n @ ! ! ! return tos ;  .. 
0x78722b844975    4883f800                cmp rax, 0x0                                           
0x78722b844979    0f94c0                  setz al                                                
0x78722b84497c    480fb6c0                movzx rax, al                                          
 ..                    : nt ( n ) n @ ! ! ! return tos ;  .. 
0x78722b844980    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844984    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b844988    498906                  mov [r14], rax                                         
 ..       : nt ( n ) n @ ! ! ! return tos ;  .. 
0x78722b84498b    c3                      ret                                                    
Word_Disassemble : word - 'nt' :: codeSize = 42
Word : 0x000078722b9a00c7 :: Compiled at : 0x000078722b844962
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 83.15 <::
 1 0 1 0 0 1 0 1 
 1 0 1 0 0 1 0 1 : above line should show
 1 0 1 0 0 1 0 1 
 1 0 1 0 0 1 0 1 : above line should show
 =============================
C_Syntax.l001 <:> csl compiled word
SourceCode for C_Syntax.l001 :> 
void l001 ( a b c d ) { if ( a || b || c || d ) return 1 ; else return 0 ; } 
Source code file location of l001 : "namespaces/test/logic.csl" : 107.10 :: we are now at : namespaces/test/logic.csl : 112.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b844b4b -- code size = 104 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l001 : definition = 0x000078722b844b4b : disassembly at namespaces/test/logic.csl : 112.9 :
0x78722b844b4b    4d897e08                mov [r14+0x8], r15                                     
0x78722b844b4f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844b53    4981c608000000          add r14, 0x8                                           
 ..     void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  .. 
0x78722b844b5a    498b47e0                mov rax, [r15-0x20]                                    
0x78722b844b5e    4883f800                cmp rax, 0x0                                           
0x78722b844b62    0f852a000000            jnz 0x78722b844b92            < C_Syntax.l001+71 >
   void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  .. 
0x78722b844b68    498b47e8                mov rax, [r15-0x18]                                    
0x78722b844b6c    4883f800                cmp rax, 0x0                                           
0x78722b844b70    0f851c000000            jnz 0x78722b844b92            < C_Syntax.l001+71 >
 .. 001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x78722b844b76    498b47f0                mov rax, [r15-0x10]                                    
0x78722b844b7a    4883f800                cmp rax, 0x0                                           
0x78722b844b7e    0f850e000000            jnz 0x78722b844b92            < C_Syntax.l001+71 >
 ..  a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x78722b844b84    498b47f8                mov rax, [r15-0x8]                                     
0x78722b844b88    4883f800                cmp rax, 0x0                                           
0x78722b844b8c    0f840a000000            jz 0x78722b844b9c             < C_Syntax.l001+81 >
 ..  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x78722b844b92    b801000000              mov eax, 0x1                                           
 ..     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x78722b844b97    e907000000              jmp 0x78722b844ba3            < C_Syntax.l001+88 >
0x78722b844b9c    48c7c000000000          mov rax, 0x0                                           
0x78722b844ba3    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844ba7    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b844bab    4983ee18                sub r14, 0x18                                          
 .. c || d ) return 1  ;      else return 0 ;  } 
0x78722b844baf    498906                  mov [r14], rax                                         
 .. d ) return 1  ;      else return 0 ;  } 
0x78722b844bb2    c3                      ret                                                    
Word_Disassemble : word - 'l001' :: codeSize = 104
Word : 0x000078722b9a4157 :: Compiled at : 0x000078722b844b4b
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 112.9 <::

 =============================
C_Syntax.l0010 <:> csl compiled word
SourceCode for C_Syntax.l0010 :> 
void l0010 ( a b c d ) { if ( a && b && c && d ) return 1 ; else return 0 ; } 
Source code file location of l0010 : "namespaces/test/logic.csl" : 123.11 :: we are now at : namespaces/test/logic.csl : 128.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b844bb8 -- code size = 230 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0010 : definition = 0x000078722b844bb8 : disassembly at namespaces/test/logic.csl : 128.10 :
0x78722b844bb8    4d897e08                mov [r14+0x8], r15                                     
0x78722b844bbc    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844bc0    4981c608000000          add r14, 0x8                                           
 ..    void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x78722b844bc7    498b47e0                mov rax, [r15-0x20]                                    
0x78722b844bcb    4883f800                cmp rax, 0x0                                           
0x78722b844bcf    0f84b2000000            jz 0x78722b844c87             < C_Syntax.l0010+207 >
  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x78722b844bd5    498b47e8                mov rax, [r15-0x18]                                    
0x78722b844bd9    4883f800                cmp rax, 0x0                                           
0x78722b844bdd    0f84a4000000            jz 0x78722b844c87             < C_Syntax.l0010+207 >
 ..  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x78722b844be3    498bc6                  mov rax, r14                                           
0x78722b844be6    4983ee08                sub r14, 0x8                                           
0x78722b844bea    48833800                cmp qword [rax], 0x0                                   
0x78722b844bee    7410                    jz 0x2b844c00                 < C_Syntax.l0010+72 >
0x78722b844bf0    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b844bf5    7409                    jz 0x2b844c00                 < C_Syntax.l0010+72 >
0x78722b844bf7    49c70601000000          mov qword [r14], 0x1                                   
0x78722b844bfe    eb07                    jmp 0x78722b844c07            < C_Syntax.l0010+79 >
0x78722b844c00    49c70600000000          mov qword [r14], 0x0                                   
0x78722b844c07    747e                    jz 0x2b844c87                 < C_Syntax.l0010+207 >
0x78722b844c09    0f1f4000                nop [rax]                                              
 .. 010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x78722b844c0d    498b47f0                mov rax, [r15-0x10]                                    
0x78722b844c11    4883f800                cmp rax, 0x0                                           
0x78722b844c15    7470                    jz 0x2b844c87                 < C_Syntax.l0010+207 >
0x78722b844c17    0f1f4000                nop [rax]                                              
void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x78722b844c1b    498bc6                  mov rax, r14                                           
0x78722b844c1e    4983ee08                sub r14, 0x8                                           
0x78722b844c22    48833800                cmp qword [rax], 0x0                                   
0x78722b844c26    7410                    jz 0x2b844c38                 < C_Syntax.l0010+128 >
0x78722b844c28    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b844c2d    7409                    jz 0x2b844c38                 < C_Syntax.l0010+128 >
0x78722b844c2f    49c70601000000          mov qword [r14], 0x1                                   
0x78722b844c36    eb07                    jmp 0x78722b844c3f            < C_Syntax.l0010+135 >
0x78722b844c38    49c70600000000          mov qword [r14], 0x0                                   
0x78722b844c3f    7446                    jz 0x2b844c87                 < C_Syntax.l0010+207 >
0x78722b844c41    0f1f4000                nop [rax]                                              
 ..  a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x78722b844c45    498b47f8                mov rax, [r15-0x8]                                     
0x78722b844c49    4883f800                cmp rax, 0x0                                           
0x78722b844c4d    7438                    jz 0x2b844c87                 < C_Syntax.l0010+207 >
0x78722b844c4f    0f1f4000                nop [rax]                                              
 .. 0 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x78722b844c53    498bc6                  mov rax, r14                                           
0x78722b844c56    4983ee08                sub r14, 0x8                                           
0x78722b844c5a    48833800                cmp qword [rax], 0x0                                   
0x78722b844c5e    7410                    jz 0x2b844c70                 < C_Syntax.l0010+184 >
0x78722b844c60    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b844c65    7409                    jz 0x2b844c70                 < C_Syntax.l0010+184 >
0x78722b844c67    49c70601000000          mov qword [r14], 0x1                                   
0x78722b844c6e    eb07                    jmp 0x78722b844c77            < C_Syntax.l0010+191 >
0x78722b844c70    49c70600000000          mov qword [r14], 0x0                                   
0x78722b844c77    740e                    jz 0x2b844c87                 < C_Syntax.l0010+207 >
0x78722b844c79    0f1f4000                nop [rax]                                              
 ..  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x78722b844c7d    b801000000              mov eax, 0x1                                           
 ..     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x78722b844c82    e907000000              jmp 0x78722b844c8e            < C_Syntax.l0010+214 >
0x78722b844c87    48c7c000000000          mov rax, 0x0                                           
0x78722b844c8e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844c92    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b844c96    4983ee18                sub r14, 0x18                                          
 .. c && d ) return 1  ;      else return 0 ;  } 
0x78722b844c9a    498906                  mov [r14], rax                                         
 .. d ) return 1  ;      else return 0 ;  } 
0x78722b844c9d    c3                      ret                                                    
Word_Disassemble : word - 'l0010' :: codeSize = 230
Word : 0x000078722b9a61d7 :: Compiled at : 0x000078722b844bb8
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 128.10 <::

 =============================
C_Syntax.l0041 <:> csl compiled word
SourceCode for C_Syntax.l0041 :> 
void l0041 ( a b c ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1 ; else return 0 ; } 
Source code file location of l0041 : "namespaces/test/logic.csl" : 187.11 :: we are now at : namespaces/test/logic.csl : 192.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b844e63 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0041 : definition = 0x000078722b844e63 : disassembly at namespaces/test/logic.csl : 192.10 :
0x78722b844e63    4d897e08                mov [r14+0x8], r15                                     
0x78722b844e67    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b844e6b    4981c608000000          add r14, 0x8                                           
 ..    void l0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }  .. 
0x78722b844e72    49837fe801              cmp qword [r15-0x18], 0x1                              
0x78722b844e77    0f8535000000            jnz 0x78722b844eb2            < C_Syntax.l0041+79 >
 .. ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x78722b844e7d    49837ff001              cmp qword [r15-0x10], 0x1                              
0x78722b844e82    0f8435000000            jz 0x78722b844ebd             < C_Syntax.l0041+90 >
 .. 0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x78722b844e88    498bc6                  mov rax, r14                                           
0x78722b844e8b    4983ee08                sub r14, 0x8                                           
0x78722b844e8f    48833800                cmp qword [rax], 0x0                                   
0x78722b844e93    7410                    jz 0x2b844ea5                 < C_Syntax.l0041+66 >
0x78722b844e95    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b844e9a    7409                    jz 0x2b844ea5                 < C_Syntax.l0041+66 >
0x78722b844e9c    49c70601000000          mov qword [r14], 0x1                                   
0x78722b844ea3    eb07                    jmp 0x78722b844eac            < C_Syntax.l0041+73 >
0x78722b844ea5    49c70600000000          mov qword [r14], 0x0                                   
0x78722b844eac    0f8400000000            jz 0x78722b844eb2             < C_Syntax.l0041+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x78722b844eb2    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b844eb7    0f850a000000            jnz 0x78722b844ec7            < C_Syntax.l0041+100 >
 ..  && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x78722b844ebd    b801000000              mov eax, 0x1                                           
 ..  ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x78722b844ec2    e907000000              jmp 0x78722b844ece            < C_Syntax.l0041+107 >
0x78722b844ec7    48c7c000000000          mov rax, 0x0                                           
0x78722b844ece    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b844ed2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b844ed6    4983ee10                sub r14, 0x10                                          
 .. == 1 ) ) return 1  ;      else return 0 ;  } 
0x78722b844eda    498906                  mov [r14], rax                                         
 .. ) ) return 1  ;      else return 0 ;  } 
0x78722b844edd    c3                      ret                                                    
Word_Disassemble : word - 'l0041' :: codeSize = 123
Word : 0x000078722aec6e18 :: Compiled at : 0x000078722b844e63
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 192.10 <::

 =============================
C_Syntax.l0030 <:> csl compiled word
SourceCode for C_Syntax.l0030 :> 
void l0030 ( a b c d ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ; else return 0 ; } 
Source code file location of l0030 : "namespaces/test/logic.csl" : 287.11 :: we are now at : namespaces/test/logic.csl : 292.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8451a3 -- code size = 176 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0030 : definition = 0x000078722b8451a3 : disassembly at namespaces/test/logic.csl : 292.10 :
0x78722b8451a3    4d897e08                mov [r14+0x8], r15                                     
0x78722b8451a7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8451ab    4981c608000000          add r14, 0x8                                           
 ..  void l0030 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }  .. 
0x78722b8451b2    49837fe001              cmp qword [r15-0x20], 0x1                              
0x78722b8451b7    0f8535000000            jnz 0x78722b8451f2            < C_Syntax.l0030+79 >
 .. a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b8451bd    49837fe801              cmp qword [r15-0x18], 0x1                              
0x78722b8451c2    0f8435000000            jz 0x78722b8451fd             < C_Syntax.l0030+90 >
 .. 30 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b8451c8    498bc6                  mov rax, r14                                           
0x78722b8451cb    4983ee08                sub r14, 0x8                                           
0x78722b8451cf    48833800                cmp qword [rax], 0x0                                   
0x78722b8451d3    7410                    jz 0x2b8451e5                 < C_Syntax.l0030+66 >
0x78722b8451d5    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b8451da    7409                    jz 0x2b8451e5                 < C_Syntax.l0030+66 >
0x78722b8451dc    49c70601000000          mov qword [r14], 0x1                                   
0x78722b8451e3    eb07                    jmp 0x78722b8451ec            < C_Syntax.l0030+73 >
0x78722b8451e5    49c70600000000          mov qword [r14], 0x0                                   
0x78722b8451ec    0f8400000000            jz 0x78722b8451f2             < C_Syntax.l0030+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b8451f2    49837ff001              cmp qword [r15-0x10], 0x1                              
0x78722b8451f7    0f853f000000            jnz 0x78722b84523c            < C_Syntax.l0030+153 >
 ..  1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b8451fd    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b845202    0f8534000000            jnz 0x78722b84523c            < C_Syntax.l0030+153 >
 ..  a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b845208    498bc6                  mov rax, r14                                           
0x78722b84520b    4983ee08                sub r14, 0x8                                           
0x78722b84520f    48833800                cmp qword [rax], 0x0                                   
0x78722b845213    7410                    jz 0x2b845225                 < C_Syntax.l0030+130 >
0x78722b845215    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b84521a    7409                    jz 0x2b845225                 < C_Syntax.l0030+130 >
0x78722b84521c    49c70601000000          mov qword [r14], 0x1                                   
0x78722b845223    eb07                    jmp 0x78722b84522c            < C_Syntax.l0030+137 >
0x78722b845225    49c70600000000          mov qword [r14], 0x0                                   
0x78722b84522c    0f840a000000            jz 0x78722b84523c             < C_Syntax.l0030+153 >
 ..  || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b845232    b801000000              mov eax, 0x1                                           
 .. | ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b845237    e907000000              jmp 0x78722b845243            < C_Syntax.l0030+160 >
0x78722b84523c    48c7c000000000          mov rax, 0x0                                           
0x78722b845243    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b845247    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84524b    4983ee18                sub r14, 0x18                                          
 ..  == 1 ) ) return 1 ;      else return 0 ;  } 
0x78722b84524f    498906                  mov [r14], rax                                         
 ..  ) ) return 1 ;      else return 0 ;  } 
0x78722b845252    c3                      ret                                                    
Word_Disassemble : word - 'l0030' :: codeSize = 176
Word : 0x000078722aedbed8 :: Compiled at : 0x000078722b8451a3
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 292.10 <::

 =============================
Logic.l0031 <:> csl compiled word
SourceCode for Logic.l0031 :> 
: l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1 } { return 0 } ifElse ; 
Source code file location of l0031 : "namespaces/test/logic.csl" : 310.2 :: we are now at : namespaces/test/logic.csl : 311.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b845258 -- code size = 222 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.l0031 : definition = 0x000078722b845258 : disassembly at namespaces/test/logic.csl : 311.10 :
0x78722b845258    4d897e08                mov [r14+0x8], r15                                     
0x78722b84525c    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b845260    4981c608000000          add r14, 0x8                                           
 ..                 : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x78722b845267    49837fe001              cmp qword [r15-0x20], 0x1                              
0x78722b84526c    0f94c0                  setz al                                                
0x78722b84526f    480fb6c0                movzx rax, al                                          
0x78722b845273    4983c608                add r14, 0x8                                           
 ..             : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x78722b845277    498906                  mov [r14], rax                                         
 ..        : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x78722b84527a    49837fe801              cmp qword [r15-0x18], 0x1                              
0x78722b84527f    0f94c0                  setz al                                                
0x78722b845282    480fb6c0                movzx rax, al                                          
0x78722b845286    4983c608                add r14, 0x8                                           
 ..    : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x78722b84528a    498906                  mov [r14], rax                                         
  : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x78722b84528d    498bc6                  mov rax, r14                                           
0x78722b845290    4983ee08                sub r14, 0x8                                           
0x78722b845294    48833800                cmp qword [rax], 0x0                                   
0x78722b845298    7410                    jz 0x2b8452aa                 < Logic.l0031+82 >
0x78722b84529a    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b84529f    7409                    jz 0x2b8452aa                 < Logic.l0031+82 >
0x78722b8452a1    49c70601000000          mov qword [r14], 0x1                                   
0x78722b8452a8    eb07                    jmp 0x78722b8452b1            < Logic.l0031+89 >
0x78722b8452aa    49c70600000000          mov qword [r14], 0x0                                   
 .. 31 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b8452b1    49837ff001              cmp qword [r15-0x10], 0x1                              
0x78722b8452b6    0f94c0                  setz al                                                
0x78722b8452b9    480fb6c0                movzx rax, al                                          
 ..  b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b8452bd    488bc8                  mov rcx, rax                                           
0x78722b8452c0    498b06                  mov rax, [r14]                                         
0x78722b8452c3    4983ee08                sub r14, 0x8                                           
 .. c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b8452c7    480bc1                  or rax, rcx                                            
0x78722b8452ca    0f95c0                  setnz al                                               
0x78722b8452cd    480fb6c0                movzx rax, al                                          
0x78722b8452d1    4983c608                add r14, 0x8                                           
0x78722b8452d5    498906                  mov [r14], rax                                         
 ..  ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b8452d8    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b8452dd    0f94c0                  setz al                                                
0x78722b8452e0    480fb6c0                movzx rax, al                                          
0x78722b8452e4    4983c608                add r14, 0x8                                           
 ..  a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b8452e8    498906                  mov [r14], rax                                         
 .. 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b8452eb    498bc6                  mov rax, r14                                           
0x78722b8452ee    4983ee08                sub r14, 0x8                                           
0x78722b8452f2    48833800                cmp qword [rax], 0x0                                   
0x78722b8452f6    7410                    jz 0x2b845308                 < Logic.l0031+176 >
0x78722b8452f8    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b8452fd    7409                    jz 0x2b845308                 < Logic.l0031+176 >
0x78722b8452ff    49c70601000000          mov qword [r14], 0x1                                   
0x78722b845306    eb07                    jmp 0x78722b84530f            < Logic.l0031+183 >
0x78722b845308    49c70600000000          mov qword [r14], 0x0                                   
0x78722b84530f    0f840a000000            jz 0x78722b84531f             < Logic.l0031+199 >
 .. && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b845315    b801000000              mov eax, 0x1                                           
 .. c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b84531a    e907000000              jmp 0x78722b845326            < Logic.l0031+206 >
 .. 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b84531f    48c7c000000000          mov rax, 0x0                                           
0x78722b845326    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84532a    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84532e    4983ee18                sub r14, 0x18                                          
 ..  d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x78722b845332    498906                  mov [r14], rax                                         
 ..  } { return 1  } { return 0  } ifElse ; 
0x78722b845335    c3                      ret                                                    
Word_Disassemble : word - 'l0031' :: codeSize = 222
Word : 0x000078722aedfa58 :: Compiled at : 0x000078722b845258
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 311.10 <::

n = 1
n = 2
n = 3
n = 4
n = 5
n = 6 
pbAssert : ok

including namespaces/test/namespace.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Test.hey <:> csl compiled word
SourceCode for Test.hey :> 
: hey test hi test2.hi hi ; 
Source code file location of hey : "namespaces/test/namespace.csl" : 20.2 :: we are now at : namespaces/test/namespace.csl : 22.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b845552 -- code size = 40 bytes
TypeSignature : 
 -----------------------------
Word :: Test.hey : definition = 0x000078722b845552 : disassembly at namespaces/test/namespace.csl : 22.8 :
 ..                            : hey test hi test2.hi hi ;  .. 
0x78722b845552    49baf654842b72780000    mov r10, 0x78722b8454f6                                
0x78722b84555c    49ffd2                  call r10                      < test.hi : 0x000078722b8454f6 >
 ..                   : hey test hi test2.hi hi ;  .. 
0x78722b84555f    49ba2455842b72780000    mov r10, 0x78722b845524                                
0x78722b845569    49ffd2                  call r10                      < test2.hi : 0x000078722b845524 >
 ..                : hey test hi test2.hi hi ;  .. 
0x78722b84556c    49baf654842b72780000    mov r10, 0x78722b8454f6                                
0x78722b845576    49ffd2                  call r10                      < test.hi : 0x000078722b8454f6 >
 ..             : hey test hi test2.hi hi ;  .. 
0x78722b845579    c3                      ret                                                    
Word_Disassemble : word - 'hey' :: codeSize = 40
Word : 0x000078722aeed998 :: Compiled at : 0x000078722b845552
 =============================
::> 'wdiss' was called at namespaces/test/namespace.csl 22.8 <::
 3 4 3 3 7 7 
pbAssert : ok
 
above line should show : 3 4 3 3 7 7
 3 4 3 3 7 7 
pbAssert : ok
 
above line should show : 3 4 3 3 7 7
including namespaces/test/bigNum.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 16.2 :: we are now at : namespaces/test/bigNum.csl : 17.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8455df -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x000078722b8455df : disassembly at namespaces/test/bigNum.csl : 17.22 :
 ..                           : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x78722b8455df    498b3e                  mov rdi, [r14]                                         
 .. : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x78722b8455e2    be01000000              mov esi, 0x1                                           
 .. l ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b8455e7    4883ff01                cmp rdi, 0x1                                           
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b8455eb    7e11                    jle 0x2b8455fe                < C.factorial+31 >
0x78722b8455ed    0f1f4000                nop [rax]                                              
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b8455f1    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b8455f5    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b8455f8    4883ff01                cmp rdi, 0x1                                           
0x78722b8455fc    7ff3                    jg 0x2b8455f1                 < C.factorial+18 >
 .. n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b8455fe    498936                  mov [r14], rsi                                         
 .. c store n -- } while return ( rec @ ) ; 
0x78722b845601    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 35
Word : 0x000078722aeeedd8 :: Compiled at : 0x000078722b8455df
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 17.22 <::
 5040 factorial  : ok

 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 25.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b845607 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x000078722b845607 : disassembly at namespaces/test/bigNum.csl : 25.14 :
0x78722b845607    4d897e08                mov [r14+0x8], r15                                     
0x78722b84560b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84560f    4981c610000000          add r14, 0x10                                          
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  .. 
0x78722b845616    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b84561e    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845623    7e1f                    jle 0x2b845644                < C.factorial+61 >
0x78722b845625    0f1f4000                nop [rax]                                              
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845629    498b47f8                mov rax, [r15-0x8]                                     
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b84562d    498b4f08                mov rcx, [r15+0x8]                                     
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845631    480fafc1                imul rax, rcx                                          
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845635    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845639    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b84563d    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b845642    7fe5                    jg 0x2b845629                 < C.factorial+34 >
 .. @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845644    498b4708                mov rax, [r15+0x8]                                     
0x78722b845648    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84564c    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * fac store n -- } while      return fac @ ; 
0x78722b845650    498906                  mov [r14], rax                                         
 ..  store n -- } while      return fac @ ; 
0x78722b845653    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 77
Word : 0x000078722aef1a28 :: Compiled at : 0x000078722b845607
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 25.14 <::
 5040 factorial  : ok


 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 40.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b845607 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x000078722b845607 : disassembly at namespaces/test/bigNum.csl : 40.14 :
0x78722b845607    4d897e08                mov [r14+0x8], r15                                     
0x78722b84560b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84560f    4981c610000000          add r14, 0x10                                          
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  .. 
0x78722b845616    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b84561e    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845623    7e1f                    jle 0x2b845644                < C.factorial+61 >
0x78722b845625    0f1f4000                nop [rax]                                              
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845629    498b47f8                mov rax, [r15-0x8]                                     
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b84562d    498b4f08                mov rcx, [r15+0x8]                                     
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845631    480fafc1                imul rax, rcx                                          
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845635    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845639    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b84563d    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b845642    7fe5                    jg 0x2b845629                 < C.factorial+34 >
 .. @ fac @ * fac store n -- } while      return fac @ ; 
0x78722b845644    498b4708                mov rax, [r15+0x8]                                     
0x78722b845648    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84564c    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * fac store n -- } while      return fac @ ; 
0x78722b845650    498906                  mov [r14], rax                                         
 ..  store n -- } while      return fac @ ; 
0x78722b845653    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 77
Word : 0x000078722aef1a28 :: Compiled at : 0x000078722b845607
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 40.14 <::
 5040 5040 5040
 =============================
BigNum.qexp <:> csl compiled word
SourceCode for BigNum.qexp :> 
: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ; 
Source code file location of qexp : "namespaces/test/bigNum.csl" : 67.2 :: we are now at : namespaces/test/bigNum.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b84570c -- code size = 155 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.qexp : definition = 0x000078722b84570c : disassembly at namespaces/test/bigNum.csl : 68.17 :
 ..                              : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b84570c    498b06                  mov rax, [r14]                                         
0x78722b84570f    4983c608                add r14, 0x8                                           
0x78722b845713    498906                  mov [r14], rax                                         
 ..                          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b845716    48b8c8e1632b72780000    mov rax, 0x78722b63e1c8                                
0x78722b845720    4983c608                add r14, 0x8                                           
0x78722b845724    498906                  mov [r14], rax                                         
 ..                        : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b845727    49bb8067ef89c8600000    mov r11, 0x60c889ef6780                                
0x78722b845731    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84573b    49ffd2                  call r10                      < BigNum.>= : 0x000060c889ef6780 >
 ..                     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b84573e    498b06                  mov rax, [r14]                                         
0x78722b845741    4983ee08                sub r14, 0x8                                           
0x78722b845745    4883f800                cmp rax, 0x0                                           
0x78722b845749    7446                    jz 0x2b845791                 < BigNum.qexp+133 >
0x78722b84574b    0f1f4000                nop [rax]                                              
 ..                 : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b84574f    498b06                  mov rax, [r14]                                         
0x78722b845752    4983c608                add r14, 0x8                                           
0x78722b845756    498906                  mov [r14], rax                                         
 ..             : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b845759    49bb0065ef89c8600000    mov r11, 0x60c889ef6500                                
0x78722b845763    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84576d    49ffd2                  call r10                      < BigNum.-- : 0x000060c889ef6500 >
 ..          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b845770    e897ffffff              call 0x78722b84570c           < BigNum.qexp : 0x000078722b84570c >
 ..     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b845775    49bb605fef89c8600000    mov r11, 0x60c889ef5f60                                
0x78722b84577f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845789    49ffd2                  call r10                      < BigNum.* : 0x000060c889ef5f60 >
 ..   : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b84578c    e915000000              jmp 0x78722b8457a6            < BigNum.qexp+154 >
  : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x78722b845791    4983ee08                sub r14, 0x8                                           
 .. { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ; 
0x78722b845795    48b8e8e1632b72780000    mov rax, 0x78722b63e1e8                                
0x78722b84579f    4983c608                add r14, 0x8                                           
0x78722b8457a3    498906                  mov [r14], rax                                         
 .. } { dup -- qexp * } { drop 1 } ifElse ; 
0x78722b8457a6    c3                      ret                                                    
Word_Disassemble : word - 'qexp' :: codeSize = 155
Word : 0x000078722aef9f18 :: Compiled at : 0x000078722b84570c
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 68.17 <::
  5040.00000000000000000000000000000000
 3 ! =   6.00000000000000000000000000000000

 64 ! =   126886932185884165437806897585122925290119029064705209778508545103477590511637067401789440.00000000000000000000000000000000

 1000 ! =   402387260077093317429838470612651212102966544163507701660266720704119769806989908398209100071577186893068783090923128165735185588027950353406889129247368414891358045299136715953285063420682021387062794693734409198431464246127206235813045990002520274575909913104326478290225140523401539128692178502019758932379457660249046286531112392122380536653533830469747019332630736468271962539511539517441084091548395205048568212151444266888000138311891331566327132041056785317671646218089496261058757458787888541256427910203949128089206098055125528721518540745206161392721407919025351918548714416743327782559176825452026920939896650865615375932384088669573776686670230120401967406703221961478508625793738568876894309533382821706462209404383271115048542505623589393244859172067791463260443310322632277086216651948161974359681932191356240096436367728220552696578891140360197109166205168814488843752507533608852420430013930971847404190565644080893716664167484606779509284725356307607453587140866090513556602389786314751645178165892536096487015707711106075548237758750720237969870741884999152710615300248006635156934216386533604180800310044427576766526698205875054102420138835953783455601875460666959726091571753923250888678519341775500944897553109652505576219868712943936816004071499019660567823510797715276436660145634137500784272753784426136757887964608313021469311145437608977653284416534488769657576551428116889055034143916030868893389979589311091787747753219895109769658109225123470666446036735269784453370721503321062189796734101265733985144495303980387714235857934638061903831020065022291748914637789230739688113987278630835326137898889409963697611934221880018811713177314813564661145933534317386414684061553856935609663369047123517526541585122825292881833314108423140887719392737182402316020908137071516792711706047934013431336843979924451761308238654898682984005419308645871979362328241353332225797576735874429116813731278034586920918899118608957379765314107649804799427092368500214215026155655045463410885162072371026890934825997956670061525624894885363999426927042531844766438019218864096423481135872477323129779559975108350645074636085739110547195349803925936614194372873277654120733612780634323002524104511888215344901671044835044792618211134128152728410000993830277064175810066870964517723058282768208805399871089529259410156036114796318882403031559180723928162345304700421054310769024829129647665165341148171035020178261641554401108640147151436811311148320263879332249366165087443125790648495729573323524293680134965188784846657625841212990509177684364910061642842112.00000000000000000000000000000000

 =============================
BigNum.aexp <:> csl compiled word
SourceCode for BigNum.aexp :> 
: aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
Source code file location of aexp : "namespaces/test/bigNum.csl" : 77.2 :: we are now at : namespaces/test/bigNum.csl : 78.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b8457bb -- code size = 155 bytes
TypeSignature : BigNum -> BigNum 
 -----------------------------
Word :: BigNum.aexp : definition = 0x000078722b8457bb : disassembly at namespaces/test/bigNum.csl : 78.17 :
 ..                   : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b8457bb    498b06                  mov rax, [r14]                                         
0x78722b8457be    4983c608                add r14, 0x8                                           
0x78722b8457c2    498906                  mov [r14], rax                                         
 ..               : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b8457c5    48b808e2632b72780000    mov rax, 0x78722b63e208                                
0x78722b8457cf    4983c608                add r14, 0x8                                           
0x78722b8457d3    498906                  mov [r14], rax                                         
 ..             : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b8457d6    49bb2067ef89c8600000    mov r11, 0x60c889ef6720                                
0x78722b8457e0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8457ea    49ffd2                  call r10                      < BigNum.<= : 0x000060c889ef6720 >
 ..          : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b8457ed    498b06                  mov rax, [r14]                                         
0x78722b8457f0    4983ee08                sub r14, 0x8                                           
0x78722b8457f4    4883f800                cmp rax, 0x0                                           
0x78722b8457f8    741e                    jz 0x2b845818                 < BigNum.aexp+93 >
0x78722b8457fa    0f1f4000                nop [rax]                                              
 ..      : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b8457fe    4983ee08                sub r14, 0x8                                           
 .. : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b845802    48b828e2632b72780000    mov rax, 0x78722b63e228                                
0x78722b84580c    4983c608                add r14, 0x8                                           
0x78722b845810    498906                  mov [r14], rax                                         
  : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x78722b845813    e93d000000              jmp 0x78722b845855            < BigNum.aexp+154 >
 ..  ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x78722b845818    498b06                  mov rax, [r14]                                         
0x78722b84581b    4983c608                add r14, 0x8                                           
0x78722b84581f    498906                  mov [r14], rax                                         
 .. t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x78722b845822    49bb0065ef89c8600000    mov r11, 0x60c889ef6500                                
0x78722b84582c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845836    49ffd2                  call r10                      < BigNum.-- : 0x000060c889ef6500 >
 .. .N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x78722b845839    e87dffffff              call 0x78722b8457bb           < BigNum.aexp : 0x000078722b8457bb >
 .. { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x78722b84583e    49bb605fef89c8600000    mov r11, 0x60c889ef5f60                                
0x78722b845848    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845852    49ffd2                  call r10                      < BigNum.* : 0x000060c889ef5f60 >
 .. } { drop 1 } { dup -- aexp * } ifElse ; 
0x78722b845855    c3                      ret                                                    
Word_Disassemble : word - 'aexp' :: codeSize = 155
Word : 0x000078722aefba18 :: Compiled at : 0x000078722b8457bb
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 78.17 <::

 =============================
BigNum.bexp <:> csl compiled word
SourceCode for BigNum.bexp :> 
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
Source code file location of bexp : "namespaces/test/bigNum.csl" : 79.2 :: we are now at : namespaces/test/bigNum.csl : 81.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b84585b -- code size = 203 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexp : definition = 0x000078722b84585b : disassembly at namespaces/test/bigNum.csl : 81.9 :
0x78722b84585b    4d897e08                mov [r14+0x8], r15                                     
0x78722b84585f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b845863    4981c608000000          add r14, 0x8                                           
 ..                        : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b84586a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84586e    4983c608                add r14, 0x8                                           
0x78722b845872    498906                  mov [r14], rax                                         
 ..                    : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b845875    48b848e2632b72780000    mov rax, 0x78722b63e248                                
0x78722b84587f    4983c608                add r14, 0x8                                           
0x78722b845883    498906                  mov [r14], rax                                         
0x78722b845886    49bb2067ef89c8600000    mov r11, 0x60c889ef6720                                
0x78722b845890    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84589a    49ffd2                  call r10                      < BigNum.<= : 0x000060c889ef6720 >
 ..               : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b84589d    498b06                  mov rax, [r14]                                         
0x78722b8458a0    4983ee08                sub r14, 0x8                                           
0x78722b8458a4    4883f800                cmp rax, 0x0                                           
0x78722b8458a8    741a                    jz 0x2b8458c4                 < BigNum.bexp+105 >
0x78722b8458aa    0f1f4000                nop [rax]                                              
 ..           : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b8458ae    48b868e2632b72780000    mov rax, 0x78722b63e268                                
0x78722b8458b8    4983c608                add r14, 0x8                                           
0x78722b8458bc    498906                  mov [r14], rax                                         
 ..         : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b8458bf    e953000000              jmp 0x78722b845917            < BigNum.bexp+188 >
 ..     : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b8458c4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8458c8    4983c610                add r14, 0x10                                          
0x78722b8458cc    498906                  mov [r14], rax                                         
 .. : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b8458cf    498946f8                mov [r14-0x8], rax                                     
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x78722b8458d3    48b888e2632b72780000    mov rax, 0x78722b63e288                                
0x78722b8458dd    4983c608                add r14, 0x8                                           
0x78722b8458e1    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x78722b8458e4    49bba060ef89c8600000    mov r11, 0x60c889ef60a0                                
0x78722b8458ee    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8458f8    49ffd2                  call r10                      < BigNum.- : 0x000060c889ef60a0 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x78722b8458fb    e85bffffff              call 0x78722b84585b           < BigNum.bexp : 0x000078722b84585b >
0x78722b845900    49bb605fef89c8600000    mov r11, 0x60c889ef5f60                                
0x78722b84590a    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845914    49ffd2                  call r10                      < BigNum.* : 0x000060c889ef5f60 >
 .. } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x78722b845917    498b06                  mov rax, [r14]                                         
0x78722b84591a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84591e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b845922    498906                  mov [r14], rax                                         
 ..  @ dup 1 - bexp * } ifElse return tos ; 
0x78722b845925    c3                      ret                                                    
Word_Disassemble : word - 'bexp' :: codeSize = 203
Word : 0x000078722aefd588 :: Compiled at : 0x000078722b84585b
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.9 <::

 =============================
BigNum.bexp0 <:> csl compiled word
SourceCode for BigNum.bexp0 :> 
: bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
Source code file location of bexp0 : "namespaces/test/bigNum.csl" : 80.2 :: we are now at : namespaces/test/bigNum.csl : 81.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b84592b -- code size = 186 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexp0 : definition = 0x000078722b84592b : disassembly at namespaces/test/bigNum.csl : 81.19 :
0x78722b84592b    4d897e08                mov [r14+0x8], r15                                     
0x78722b84592f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b845933    4981c608000000          add r14, 0x8                                           
 ..                       : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b84593a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84593e    4983c608                add r14, 0x8                                           
0x78722b845942    498906                  mov [r14], rax                                         
 ..                   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b845945    48b8a8e2632b72780000    mov rax, 0x78722b63e2a8                                
0x78722b84594f    4983c608                add r14, 0x8                                           
0x78722b845953    498906                  mov [r14], rax                                         
 ..                 : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b845956    49bb2067ef89c8600000    mov r11, 0x60c889ef6720                                
0x78722b845960    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84596a    49ffd2                  call r10                      < BigNum.<= : 0x000060c889ef6720 >
 ..              : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b84596d    498b06                  mov rax, [r14]                                         
0x78722b845970    4983ee08                sub r14, 0x8                                           
0x78722b845974    4883f800                cmp rax, 0x0                                           
0x78722b845978    741a                    jz 0x2b845994                 < BigNum.bexp0+105 >
0x78722b84597a    0f1f4000                nop [rax]                                              
 ..          : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b84597e    48b8c8e2632b72780000    mov rax, 0x78722b63e2c8                                
0x78722b845988    4983c608                add r14, 0x8                                           
0x78722b84598c    498906                  mov [r14], rax                                         
 ..        : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b84598f    e942000000              jmp 0x78722b8459d6            < BigNum.bexp0+171 >
 ..    : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b845994    498b47f8                mov rax, [r15-0x8]                                     
0x78722b845998    4983c610                add r14, 0x10                                          
0x78722b84599c    498906                  mov [r14], rax                                         
   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x78722b84599f    498946f8                mov [r14-0x8], rax                                     
 .. p0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x78722b8459a3    49bb0065ef89c8600000    mov r11, 0x60c889ef6500                                
0x78722b8459ad    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8459b7    49ffd2                  call r10                      < BigNum.-- : 0x000060c889ef6500 >
 .. ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x78722b8459ba    e86cffffff              call 0x78722b84592b           < BigNum.bexp0 : 0x000078722b84592b >
 .. { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x78722b8459bf    49bb605fef89c8600000    mov r11, 0x60c889ef5f60                                
0x78722b8459c9    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8459d3    49ffd2                  call r10                      < BigNum.* : 0x000060c889ef5f60 >
 .. } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x78722b8459d6    498b06                  mov rax, [r14]                                         
0x78722b8459d9    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8459dd    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8459e1    498906                  mov [r14], rax                                         
 ..  @ dup -- bexp0 * } ifElse return tos ; 
0x78722b8459e4    c3                      ret                                                    
Word_Disassemble : word - 'bexp0' :: codeSize = 186
Word : 0x000078722aeff7b8 :: Compiled at : 0x000078722b84592b
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.19 <::
  5040.00000000000000000000000000000000  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000  40320.00000000000000000000000000000000
  5040.00000000000000000000000000000000  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000
 =============================
BigNum.!! <:> csl compiled word
SourceCode for BigNum.!! :> 
: !! ! p nl ; 
Source code file location of !! : "namespaces/test/bigNum.csl" : 91.2 :: we are now at : namespaces/test/bigNum.csl : 92.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b8459f9 -- code size = 50 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.!! : definition = 0x000078722b8459f9 : disassembly at namespaces/test/bigNum.csl : 92.15 :
 ..                                  : !! ! p nl ;  .. 
0x78722b8459f9    49ba2b59842b72780000    mov r10, 0x78722b84592b                                
0x78722b845a03    49ffd2                  call r10                      < BigNum.bexp0 : 0x000078722b84592b >
 ..                                : !! ! p nl ;  .. 
0x78722b845a06    49ba9e0a842b72780000    mov r10, 0x78722b840a9e                                
0x78722b845a10    49ffd2                  call r10                      < BigNum.fprint : 0x000078722b840a9e >
 ..                              : !! ! p nl ;  .. 
0x78722b845a13    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b845a1d    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845a27    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..                           : !! ! p nl ;  .. 
0x78722b845a2a    c3                      ret                                                    
Word_Disassemble : word - '!!' :: codeSize = 50
Word : 0x000078722af019e8 :: Compiled at : 0x000078722b8459f9
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 92.15 <::
  5040.00000000000000000000000000000000
  40320.00000000000000000000000000000000
  40320.00000000000000000000000000000000

 =============================
BigNum.bexpl <:> csl compiled word
SourceCode for BigNum.bexpl :> 
: bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
Source code file location of bexpl : "namespaces/test/bigNum.csl" : 101.2 :: we are now at : namespaces/test/bigNum.csl : 102.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b845a30 -- code size = 203 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexpl : definition = 0x000078722b845a30 : disassembly at namespaces/test/bigNum.csl : 102.10 :
0x78722b845a30    4d897e08                mov [r14+0x8], r15                                     
0x78722b845a34    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b845a38    4981c608000000          add r14, 0x8                                           
 ..                       : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a3f    498b47f8                mov rax, [r15-0x8]                                     
0x78722b845a43    4983c608                add r14, 0x8                                           
0x78722b845a47    498906                  mov [r14], rax                                         
 ..                   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a4a    48b8e8e2632b72780000    mov rax, 0x78722b63e2e8                                
0x78722b845a54    4983c608                add r14, 0x8                                           
0x78722b845a58    498906                  mov [r14], rax                                         
 ..                 : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a5b    49bb2067ef89c8600000    mov r11, 0x60c889ef6720                                
0x78722b845a65    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845a6f    49ffd2                  call r10                      < BigNum.<= : 0x000060c889ef6720 >
 ..              : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a72    498b06                  mov rax, [r14]                                         
0x78722b845a75    4983ee08                sub r14, 0x8                                           
0x78722b845a79    4883f800                cmp rax, 0x0                                           
0x78722b845a7d    741a                    jz 0x2b845a99                 < BigNum.bexpl+105 >
0x78722b845a7f    0f1f4000                nop [rax]                                              
 ..          : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a83    48b808e3632b72780000    mov rax, 0x78722b63e308                                
0x78722b845a8d    4983c608                add r14, 0x8                                           
0x78722b845a91    498906                  mov [r14], rax                                         
 ..        : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a94    e953000000              jmp 0x78722b845aec            < BigNum.bexpl+188 >
 ..    : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845a99    498b47f8                mov rax, [r15-0x8]                                     
0x78722b845a9d    4983c610                add r14, 0x10                                          
0x78722b845aa1    498906                  mov [r14], rax                                         
   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x78722b845aa4    498946f8                mov [r14-0x8], rax                                     
 .. pl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x78722b845aa8    48b828e3632b72780000    mov rax, 0x78722b63e328                                
0x78722b845ab2    4983c608                add r14, 0x8                                           
0x78722b845ab6    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x78722b845ab9    49bba060ef89c8600000    mov r11, 0x60c889ef60a0                                
0x78722b845ac3    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845acd    49ffd2                  call r10                      < BigNum.- : 0x000060c889ef60a0 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x78722b845ad0    e85bffffff              call 0x78722b845a30           < BigNum.bexpl : 0x000078722b845a30 >
 ..  n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x78722b845ad5    49bb605fef89c8600000    mov r11, 0x60c889ef5f60                                
0x78722b845adf    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845ae9    49ffd2                  call r10                      < BigNum.* : 0x000060c889ef5f60 >
 ..  { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x78722b845aec    498b06                  mov rax, [r14]                                         
0x78722b845aef    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b845af3    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b845af7    498906                  mov [r14], rax                                         
 .. @ dup 1 - bexpl * } ifElse return tos ; 
0x78722b845afa    c3                      ret                                                    
Word_Disassemble : word - 'bexpl' :: codeSize = 203
Word : 0x000078722af02258 :: Compiled at : 0x000078722b845a30
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 102.10 <::
  5040.00000000000000000000000000000000
 starting BigNum
  0.33333333333333331482961625624739  1.73205080756887719317660412343685  2.99999999999999955591079014993738  9.00000000000000000000000000000000  : should be 9
 
fib  200.00000000000000000000000000000000 =  280571172992510158789853658433108939112448.00000000000000000000000000000000
 =============================
BigNum.tfib3 <:> csl compiled word
SourceCode for BigNum.tfib3 :> 
: tfib3 ( n | m ) "locals fibBN : " ps { m 1 = } { m @ n @ <= } { m 1 += } { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } for ; 
Source code file location of tfib3 : "namespaces/test/bigNum.csl" : 129.2 :: we are now at : namespaces/test/bigNum.csl : 135.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x2b845d09 -- code size = 386 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.tfib3 : definition = 0x000078722b845d09 : disassembly at namespaces/test/bigNum.csl : 135.10 :
0x78722b845d09    4d897e08                mov [r14+0x8], r15                                     
0x78722b845d0d    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b845d11    4981c610000000          add r14, 0x10                                          
0x78722b845d18    48b800ae5d2b72780000    mov rax, 0x78722b5dae00       < string : 'locals fibBN : ' >
0x78722b845d22    4983c608                add r14, 0x8                                           
0x78722b845d26    498906                  mov [r14], rax                                         
: tfib3 ( n | m )       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," .. 
0x78722b845d29    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b845d33    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }   .. 
0x78722b845d36    49ba28e4632b72780000    mov r10, 0x78722b63e428                                
0x78722b845d40    4d895708                mov [r15+0x8], r10                                     
 .. "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      fo .. 
0x78722b845d44    498b4708                mov rax, [r15+0x8]                                     
0x78722b845d48    4983c608                add r14, 0x8                                           
0x78722b845d4c    498906                  mov [r14], rax                                         
 .. als fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d4f    498b47f8                mov rax, [r15-0x8]                                     
0x78722b845d53    4983c608                add r14, 0x8                                           
0x78722b845d57    498906                  mov [r14], rax                                         
 .. fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d5a    49bb2067ef89c8600000    mov r11, 0x60c889ef6720                                
0x78722b845d64    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845d6e    49ffd2                  call r10                      < BigNum.<= : 0x000060c889ef6720 >
 .. BN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d71    498b06                  mov rax, [r14]                                         
0x78722b845d74    4983ee08                sub r14, 0x8                                           
0x78722b845d78    4883f800                cmp rax, 0x0                                           
0x78722b845d7c    0f84fc000000            jz 0x78722b845e7e             < BigNum.tfib3+373 >
 .. = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d82    498b4708                mov rax, [r15+0x8]                                     
0x78722b845d86    4983c610                add r14, 0x10                                          
0x78722b845d8a    498906                  mov [r14], rax                                         
 .. { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d8d    498946f8                mov [r14-0x8], rax                                     
 .. @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d91    49ba9e0a842b72780000    mov r10, 0x78722b840a9e                                
0x78722b845d9b    49ffd2                  call r10                      < BigNum.fprint : 0x000078722b840a9e >
 .. n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845d9e    48b82cae5d2b72780000    mov rax, 0x78722b5dae2c       < string : ' : ' >
0x78722b845da8    4983c608                add r14, 0x8                                           
0x78722b845dac    498906                  mov [r14], rax                                         
 ..  } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845daf    49bb1004f289c8600000    mov r11, 0x60c889f20410                                
0x78722b845db9    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845dc3    49ffd2                  call r10                      < Io.printString : 0x000060c889f20410 >
 ..  m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845dc6    49bad85b842b72780000    mov r10, 0x78722b845bd8                                
0x78722b845dd0    49ffd2                  call r10                      < BigNum.fibBN : 0x000078722b845bd8 >
 .. =  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845dd3    49ba9e0a842b72780000    mov r10, 0x78722b840a9e                                
0x78722b845ddd    49ffd2                  call r10                      < BigNum.fprint : 0x000078722b840a9e >
 ..       { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845de0    498b47f8                mov rax, [r15-0x8]                                     
0x78722b845de4    4983c608                add r14, 0x8                                           
0x78722b845de8    498906                  mov [r14], rax                                         
 ..   { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845deb    498b4708                mov rax, [r15+0x8]                                     
0x78722b845def    4983c608                add r14, 0x8                                           
0x78722b845df3    498906                  mov [r14], rax                                         
 .. m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845df6    49bb5067ef89c8600000    mov r11, 0x60c889ef6750                                
0x78722b845e00    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845e0a    49ffd2                  call r10                      < BigNum.> : 0x000060c889ef6750 >
 .. @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e0d    498b06                  mov rax, [r14]                                         
0x78722b845e10    4983ee08                sub r14, 0x8                                           
0x78722b845e14    4883f800                cmp rax, 0x0                                           
0x78722b845e18    742c                    jz 0x2b845e46                 < BigNum.tfib3+317 >
0x78722b845e1a    0f1f4000                nop [rax]                                              
 .. p p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e1e    48b83aae5d2b72780000    mov rax, 0x78722b5dae3a       < string : ',' >
0x78722b845e28    4983c608                add r14, 0x8                                           
0x78722b845e2c    498906                  mov [r14], rax                                         
 .. " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e2f    49bb1004f289c8600000    mov r11, 0x60c889f20410                                
0x78722b845e39    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845e43    49ffd2                  call r10                      < Io.printString : 0x000060c889f20410 >
 ..  " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e46    498d4708                lea rax, [r15+0x8]                                     
0x78722b845e4a    4983c608                add r14, 0x8                                           
0x78722b845e4e    498906                  mov [r14], rax                                         
 ..  ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e51    48b848e4632b72780000    mov rax, 0x78722b63e448                                
0x78722b845e5b    4983c608                add r14, 0x8                                           
0x78722b845e5f    498906                  mov [r14], rax                                         
 .. s      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e62    49bbe061ef89c8600000    mov r11, 0x60c889ef61e0                                
0x78722b845e6c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b845e76    49ffd2                  call r10                      < BigNum.+= : 0x000060c889ef61e0 >
 ..    { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e79    e9c6feffff              jmp 0x78722b845d44            < BigNum.tfib3+59 >
0x78722b845e7e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b845e82    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b845e86    4983ee08                sub r14, 0x8                                           
 ..  @ m @ > } { "," _ps } if2 }      for ;  .. 
0x78722b845e8a    c3                      ret                                                    
Word_Disassemble : word - 'tfib3' :: codeSize = 386
Word : 0x000078722af0bb88 :: Compiled at : 0x000078722b845d09
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 135.10 <::


 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000

 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000
  52.53799999999999670308170607313514  11.40999999999999836575170775176957
 51
 =============================
void.ctof <:> csl compiled word
SourceCode for void.ctof :> 
: ctof ( c ) c 18 *= c 10 /= c 32 += nl return ( c @ ) ; 
Source code file location of ctof : "namespaces/test/bigNum.csl" : 145.2 :: we are now at : namespaces/test/bigNum.csl : 146.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846167 -- code size = 99 bytes
TypeSignature : 
 -----------------------------
Word :: void.ctof : definition = 0x000078722b846167 : disassembly at namespaces/test/bigNum.csl : 146.9 :
0x78722b846167    4d897e08                mov [r14+0x8], r15                                     
0x78722b84616b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84616f    4981c608000000          add r14, 0x8                                           
 ..                        : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b846176    b912000000              mov ecx, 0x12                                          
 ..                          : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b84617b    498b47f8                mov rax, [r15-0x8]                                     
 ..                     : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b84617f    480fafc1                imul rax, rcx                                          
0x78722b846183    498947f8                mov [r15-0x8], rax                                     
 ..               : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b846187    b90a000000              mov ecx, 0xa                                           
 ..                 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b84618c    498b47f8                mov rax, [r15-0x8]                                     
 ..            : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b846190    48c7c200000000          mov rdx, 0x0                                           
0x78722b846197    48f7f9                  idiv rcx                                               
0x78722b84619a    498947f8                mov [r15-0x8], rax                                     
 ..         : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b84619e    498347f820              add qword [r15-0x8], 0x20                              
 .. : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b8461a3    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b8461ad    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8461b7    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x78722b8461ba    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8461be    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8461c2    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  c 18 *=  c 10 /= c 32 += nl return ( c @ ) ; 
0x78722b8461c6    498906                  mov [r14], rax                                         
 .. *=  c 10 /= c 32 += nl return ( c @ ) ; 
0x78722b8461c9    c3                      ret                                                    
Word_Disassemble : word - 'ctof' :: codeSize = 99
Word : 0x000078722af15fb8 :: Compiled at : 0x000078722b846167
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 146.9 <::
 11
 =============================
void.ftoc <:> csl compiled word
SourceCode for void.ftoc :> 
: ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ; 
Source code file location of ftoc : "namespaces/test/bigNum.csl" : 147.2 :: we are now at : namespaces/test/bigNum.csl : 148.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8461cf -- code size = 76 bytes
TypeSignature : 
 -----------------------------
Word :: void.ftoc : definition = 0x000078722b8461cf : disassembly at namespaces/test/bigNum.csl : 148.9 :
0x78722b8461cf    4d897e08                mov [r14+0x8], r15                                     
0x78722b8461d3    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8461d7    4981c608000000          add r14, 0x8                                           
 ..                          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461de    49836ff820              sub qword [r15-0x8], 0x20                              
 ..                : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461e3    b90a000000              mov ecx, 0xa                                           
 ..                  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461e8    498b47f8                mov rax, [r15-0x8]                                     
 ..             : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461ec    480fafc1                imul rax, rcx                                          
0x78722b8461f0    498947f8                mov [r15-0x8], rax                                     
 ..        : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461f4    b912000000              mov ecx, 0x12                                          
 ..          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461f9    498b47f8                mov rax, [r15-0x8]                                     
 ..     : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b8461fd    48c7c200000000          mov rdx, 0x0                                           
0x78722b846204    48f7f9                  idiv rcx                                               
0x78722b846207    498947f8                mov [r15-0x8], rax                                     
 ..  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x78722b84620b    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84620f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b846213    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ; 
0x78722b846217    498906                  mov [r14], rax                                         
 ..  32 -= f 10 *= f 18 /= return ( f @ ) ; 
0x78722b84621a    c3                      ret                                                    
Word_Disassemble : word - 'ftoc' :: codeSize = 76
Word : 0x000078722af17cd8 :: Compiled at : 0x000078722b8461cf
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 148.9 <::
 fibc2

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :> 
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
Source code file location of fibc2 : "namespaces/test/bigNum.csl" : 155.100 :: we are now at : namespaces/test/bigNum.csl : 156.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b846220 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x000078722b846220 : disassembly at namespaces/test/bigNum.csl : 156.10 :
0x78722b846220    4d897e08                mov [r14+0x8], r15                                     
0x78722b846224    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b846228    4981c608000000          add r14, 0x8                                           
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x78722b84622f    49837ff802              cmp qword [r15-0x8], 0x2                               
  (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x78722b846234    7d14                    jge 0x2b84624a                < LispDefines.fibc2+42 >
0x78722b846236    0f1f4000                nop [rax]                                              
 .. e fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b84623a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84623e    4983c608                add r14, 0x8                                           
0x78722b846242    498906                  mov [r14], rax                                         
 .. bc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b846245    e945000000              jmp 0x78722b84628f            < LispDefines.fibc2+111 >
 ..  ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b84624a    498b47f8                mov rax, [r15-0x8]                                     
 ..  ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b84624e    b901000000              mov ecx, 0x1                                           
 ..  ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b846253    482bc1                  sub rax, rcx                                           
0x78722b846256    4983c608                add r14, 0x8                                           
0x78722b84625a    498906                  mov [r14], rax                                         
 .. mbda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b84625d    e8beffffff              call 0x78722b846220           < LispDefines.fibc2 : 0x000078722b846220 >
 .. n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b846262    498b47f8                mov rax, [r15-0x8]                                     
 .. ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b846266    b902000000              mov ecx, 0x2                                           
 .. ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b84626b    482bc1                  sub rax, rcx                                           
0x78722b84626e    4983c608                add r14, 0x8                                           
0x78722b846272    498906                  mov [r14], rax                                         
 .. ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x78722b846275    e8a6ffffff              call 0x78722b846220           < LispDefines.fibc2 : 0x000078722b846220 >
0x78722b84627a    498b0e                  mov rcx, [r14]                                         
0x78722b84627d    498b46f8                mov rax, [r14-0x8]                                     
0x78722b846281    4983ee10                sub r14, 0x10                                          
0x78722b846285    4803c1                  add rax, rcx                                           
0x78722b846288    4983c608                add r14, 0x8                                           
0x78722b84628c    498906                  mov [r14], rax                                         
0x78722b84628f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b846293    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b846297    498906                  mov [r14], rax                                         
 ..        (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x78722b84629a    c3                      ret                                                    
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x000078722b743330 :: Compiled at : 0x000078722b846220
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 156.10 <::
 6765
 fibbc
 6765
 x7

 ( 1 2 3 x7 )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 7 8 9 45 )

 ( 1 2 3 7 8 9 45 )

 77
 77
 77
 alist
 ( 1 2 3 7 8 9 45 )
 yfac45
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac

 =============================
LispDefines.yfac <:> variableyfac <:> lambdaCalculus defined word
SourceCode for LispDefines.yfac :> 
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1))))))
Source code file location of yfac : "namespaces/test/bigNum.csl" : 218.65 :: we are now at : namespaces/test/bigNum.csl : 219.21
Lambda Calculus word : interpreted not compiled
TypeSignature : 
 -----------------------------
Word :: LispDefines.yfac : definition = 0x0000000000000000 : disassembly at namespaces/test/bigNum.csl : 219.21 :
Word : 0x000078722b7fc7e8 :: Compiled at : 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 219.21 <::
 3628800

 yfacc
 3628800

 5040

 yfac
 3628800

 yfacc
 3628800

 5040

 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ff
 ( ( /\ "let" 132431739868659 ) 6 )
 ( ( /\ "let" 132431739868659 ) ( ( /\ y 132431749171352 ) 4 ) )
 7

 h36
 ( n09 my6 n09 my6 n09 n09 my6 my6 )
 
 should show : ( n09 my6 n09 my6 n09 n09 my6 my6 )
 n09
 my6
 ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 
 should show : ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 id
 ( "the" "the" b b )
 id1
 ( 7 7 11 11 7 7 )
 swch
 ( 11 7 )
 swch2
 ( ( 7 11 ) ( 11 7 ) )
 id2
 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) )
 id3
 ( 7 7 11 7 11 11 7 7 )
 swch3
 id4
 ( 7 7 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) ) 11 11 7 7 )
 x
 ( ( 3 4 ) ( 4 3 ) )
 x
 7
 x
 11
 7
 7
 7
 7

 namespaces/test/bigNum.csl 285.9
'7'
'( ( lambda ( a b ) ( + a b ) ) 3 4 )'

'( ( lambda ( a b ) ( + a b ) ) 3 4 )'
'7'

'7'

 =============================
List.bexp3 <:> csl compiled word
SourceCode for List.bexp3 :> 
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 * } { 1 } ifElse ; 
Source code file location of bexp3 : "namespaces/test/bigNum.csl" : 289.2 :: we are now at : namespaces/test/bigNum.csl : 290.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84634c -- code size = 107 bytes
 -----------------------------
Word :: List.bexp3 : definition = 0x000078722b84634c : disassembly at namespaces/test/bigNum.csl : 290.18 :
0x78722b84634c    4d897e08                mov [r14+0x8], r15                                     
0x78722b846350    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b846354    4981c608000000          add r14, 0x8                                           
0x78722b84635b    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b846360    7e3d                    jle 0x2b84639f                < List.bexp3+83 >
0x78722b846362    0f1f4000                nop [rax]                                              
0x78722b846366    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84636a    4983c608                add r14, 0x8                                           
0x78722b84636e    498906                  mov [r14], rax                                         
0x78722b846371    498b47f8                mov rax, [r15-0x8]                                     
0x78722b846375    48ffc8                  dec rax                                                
0x78722b846378    4983c608                add r14, 0x8                                           
0x78722b84637c    498906                  mov [r14], rax                                         
0x78722b84637f    e8c8ffffff              call 0x78722b84634c           < List.bexp3 : 0x000078722b84634c >
0x78722b846384    498b0e                  mov rcx, [r14]                                         
0x78722b846387    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84638b    4983ee10                sub r14, 0x10                                          
0x78722b84638f    480fafc1                imul rax, rcx                                          
0x78722b846393    4983c608                add r14, 0x8                                           
0x78722b846397    498906                  mov [r14], rax                                         
0x78722b84639a    e90c000000              jmp 0x78722b8463ab            < List.bexp3+95 >
0x78722b84639f    b801000000              mov eax, 0x1                                           
0x78722b8463a4    4983c608                add r14, 0x8                                           
0x78722b8463a8    498906                  mov [r14], rax                                         
0x78722b8463ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8463af    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8463b3    498906                  mov [r14], rax                                         
0x78722b8463b6    c3                      ret                                                    
Word_Disassemble : word - 'bexp3' :: codeSize = 107
Word : 0x000078722af2b9f8 :: Compiled at : 0x000078722b84634c
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 290.18 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word, prefix
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; } 
Source code file location of fac5 : "namespaces/test/bigNum.csl" : 293.5 :: we are now at : namespaces/test/bigNum.csl : 306.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8463cb -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x000078722b8463cb : disassembly at namespaces/test/bigNum.csl : 306.21 :
0x78722b8463cb    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x78722b8463ce    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x78722b8463d3    4883ff01                cmp rdi, 0x1                                           
0x78722b8463d7    7e11                    jle 0x2b8463ea                < C_Syntax.fac5+31 >
0x78722b8463d9    0f1f4000                nop [rax]                                              
 ..   while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x78722b8463dd    480faff7                imul rsi, rdi                                          
 .. le ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x78722b8463e1    48ffcf                  dec rdi                                                
0x78722b8463e4    4883ff01                cmp rdi, 0x1                                           
0x78722b8463e8    7ff3                    jg 0x2b8463dd                 < C_Syntax.fac5+18 >
 ..       facc *= n -- ;     }     return facc ; } 
0x78722b8463ea    498936                  mov [r14], rsi                                         
 .. acc *= n -- ;     }     return facc ; } 
0x78722b8463ed    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 35
Word : 0x000078722af2ddd8 :: Compiled at : 0x000078722b8463cb
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 306.21 <::
 5040
 =============================
C_Syntax.cpow <:> csl compiled word, prefix
SourceCode for C_Syntax.cpow :> 
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
Source code file location of cpow : "namespaces/test/bigNum.csl" : 312.9 :: we are now at : namespaces/test/bigNum.csl : 314.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8463f3 -- code size = 88 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x000078722b8463f3 : disassembly at namespaces/test/bigNum.csl : 314.9 :
0x78722b8463f3    4d897e08                mov [r14+0x8], r15                                     
0x78722b8463f7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8463fb    4981c610000000          add r14, 0x10                                          
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }  .. 
0x78722b846402    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b84640a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84640e    4883f800                cmp rax, 0x0                                           
0x78722b846412    7423                    jz 0x2b846437                 < C_Syntax.cpow+68 >
0x78722b846414    0f1f4000                nop [rax]                                              
 .. ut = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b846418    498b4708                mov rax, [r15+0x8]                                     
 ..  ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b84641c    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b846420    480fafc1                imul rax, rcx                                          
 .. or ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b846424    49894708                mov [r15+0x8], rax                                     
 ..  ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b846428    49836ff801              sub qword [r15-0x8], 0x1                               
 ..  { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x78722b84642d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b846431    4883f800                cmp rax, 0x0                                           
0x78722b846435    75e1                    jnz 0x2b846418                < C_Syntax.cpow+37 >
 .. ; power -= 1 ) { out = out * base ; } return out } 
0x78722b846437    498b4708                mov rax, [r15+0x8]                                     
0x78722b84643b    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84643f    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b846443    4983ee08                sub r14, 0x8                                           
 ..  -= 1 ) { out = out * base ; } return out } 
0x78722b846447    498906                  mov [r14], rax                                         
 .. 1 ) { out = out * base ; } return out } 
0x78722b84644a    c3                      ret                                                    
Word_Disassemble : word - 'cpow' :: codeSize = 88
Word : 0x000078722af30a28 :: Compiled at : 0x000078722b8463f3
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 314.9 <::
 2 ^ 30 :  1073741824
 =============================
Root.pow0 <:> csl compiled word
SourceCode for Root.pow0 :> 
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
Source code file location of pow0 : "namespaces/test/bigNum.csl" : 318.2 :: we are now at : namespaces/test/bigNum.csl : 321.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846450 -- code size = 133 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.pow0 : definition = 0x000078722b846450 : disassembly at namespaces/test/bigNum.csl : 321.9 :
0x78722b846450    4d897e08                mov [r14+0x8], r15                                     
0x78722b846454    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b846458    4981c610000000          add r14, 0x10                                          
 ..   : pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  .. 
0x78722b84645f    49c7470801000000        mov qword [r15+0x8], 0x1                               
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  .. 
0x78722b846467    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. wer | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b84646c    7e53                    jle 0x2b8464c1                < Root.pow0+113 >
0x78722b84646e    0f1f4000                nop [rax]                                              
 .. wer @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b846472    498d4708                lea rax, [r15+0x8]                                     
 .. power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b846476    4983c608                add r14, 0x8                                           
0x78722b84647a    498906                  mov [r14], rax                                         
 .. @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b84647d    498b4708                mov rax, [r15+0x8]                                     
 .. } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b846481    498b4ff0                mov rcx, [r15-0x10]                                    
0x78722b846485    480fafc1                imul rax, rcx                                          
 .. er power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b846489    488bc8                  mov rcx, rax                                           
0x78722b84648c    498b06                  mov rax, [r14]                                         
0x78722b84648f    4983ee08                sub r14, 0x8                                           
 ..  power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b846493    488908                  mov [rax], rcx                                         
 .. | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b846496    498d47f8                lea rax, [r15-0x8]                                     
0x78722b84649a    4983c608                add r14, 0x8                                           
0x78722b84649e    498906                  mov [r14], rax                                         
 .. ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b8464a1    498b47f8                mov rax, [r15-0x8]                                     
 .. 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b8464a5    b901000000              mov ecx, 0x1                                           
0x78722b8464aa    482bc1                  sub rax, rcx                                           
 .. = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b8464ad    488bc8                  mov rcx, rax                                           
0x78722b8464b0    498b06                  mov rax, [r14]                                         
0x78722b8464b3    4983ee08                sub r14, 0x8                                           
 .. } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b8464b7    488908                  mov [rax], rcx                                         
 .. { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b8464ba    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b8464bf    7fb1                    jg 0x2b846472                 < Root.pow0+34 >
 ..  1 - = } { out out @ base @ * = } for return out @ ; 
0x78722b8464c1    498b4708                mov rax, [r15+0x8]                                     
0x78722b8464c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8464c9    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8464cd    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b8464d1    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b8464d4    c3                      ret                                                    
Word_Disassemble : word - 'pow0' :: codeSize = 133
Word : 0x000078722af33d38 :: Compiled at : 0x000078722b846450
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 321.9 <::
 1073741824 1073741824 xyfac
 yfac
 
yfac : 10 factorial =  3628800.00000000000000000000000000000000
 yfacc
 3628800

 5040

 yfac
 3628800
 yfacc
 3628800

 5040

 fib
 fib2
 55
 55
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )

 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 379.2 :: we are now at : namespaces/test/bigNum.csl : 390.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846664 -- code size = 135 bytes
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b846664 : disassembly at namespaces/test/bigNum.csl : 390.10 :
0x78722b846664    4d897e08                mov [r14+0x8], r15                                     
0x78722b846668    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84666c    4981c620000000          add r14, 0x20                                          
0x78722b846673    49c7470800000000        mov qword [r15+0x8], 0x0                               
0x78722b84667b    49c7471000000000        mov qword [r15+0x10], 0x0                              
0x78722b846683    49c7471801000000        mov qword [r15+0x18], 0x1                              
0x78722b84668b    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b846690    7e49                    jle 0x2b8466db                < Root.fib01+119 >
0x78722b846692    0f1f4000                nop [rax]                                              
0x78722b846696    498d4710                lea rax, [r15+0x10]                                    
0x78722b84669a    498b4f18                mov rcx, [r15+0x18]                                    
0x78722b84669e    488908                  mov [rax], rcx                                         
0x78722b8466a1    498d4718                lea rax, [r15+0x18]                                    
0x78722b8466a5    498b4f08                mov rcx, [r15+0x8]                                     
0x78722b8466a9    488908                  mov [rax], rcx                                         
0x78722b8466ac    498d4708                lea rax, [r15+0x8]                                     
0x78722b8466b0    4983c608                add r14, 0x8                                           
0x78722b8466b4    498906                  mov [r14], rax                                         
0x78722b8466b7    498b4710                mov rax, [r15+0x10]                                    
0x78722b8466bb    498b4f18                mov rcx, [r15+0x18]                                    
0x78722b8466bf    4803c1                  add rax, rcx                                           
0x78722b8466c2    488bc8                  mov rcx, rax                                           
0x78722b8466c5    498b06                  mov rax, [r14]                                         
0x78722b8466c8    4983ee08                sub r14, 0x8                                           
0x78722b8466cc    488908                  mov [rax], rcx                                         
0x78722b8466cf    49836ff801              sub qword [r15-0x8], 0x1                               
0x78722b8466d4    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b8466d9    7fbb                    jg 0x2b846696                 < Root.fib01+50 >
0x78722b8466db    498b4708                mov rax, [r15+0x8]                                     
0x78722b8466df    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8466e3    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8466e7    498906                  mov [r14], rax                                         
0x78722b8466ea    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 135
Word : 0x000078722af427e8 :: Compiled at : 0x000078722b846664
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 390.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn REG fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 392.2 :: we are now at : namespaces/test/bigNum.csl : 403.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8466f0 -- code size = 126 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b8466f0 : disassembly at namespaces/test/bigNum.csl : 403.10 :
0x78722b8466f0    4d897e08                mov [r14+0x8], r15                                     
0x78722b8466f4    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8466f8    4981c618000000          add r14, 0x18                                          
 .. 01 ( n | fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b8466ff    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b846707    48c7c700000000          mov rdi, 0x0                                           
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b84670e    49c7471001000000        mov qword [r15+0x10], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x78722b846716    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x78722b84671b    7e41                    jle 0x2b84675e                < Root.fib01+110 >
0x78722b84671d    0f1f4000                nop [rax]                                              
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846721    498b4f10                mov rcx, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846725    488bf9                  mov rdi, rcx                                           
0x78722b846728    498d4710                lea rax, [r15+0x10]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84672c    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846730    488908                  mov [rax], rcx                                         
0x78722b846733    498d4708                lea rax, [r15+0x8]                                     
0x78722b846737    4983c608                add r14, 0x8                                           
0x78722b84673b    498906                  mov [r14], rax                                         
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84673e    498b4f10                mov rcx, [r15+0x10]                                    
0x78722b846742    4803f9                  add rdi, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846745    488bc8                  mov rcx, rax                                           
0x78722b846748    498b06                  mov rax, [r14]                                         
0x78722b84674b    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84674f    488938                  mov [rax], rdi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b846752    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b846757    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b84675c    7fc3                    jg 0x2b846721                 < Root.fib01+49 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84675e    498b4708                mov rax, [r15+0x8]                                     
0x78722b846762    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b846766    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b84676a    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b84676d    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 126
Word : 0x000078722af475f8 :: Compiled at : 0x000078722b8466f0
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 403.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn, REG fn1, REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 405.2 :: we are now at : namespaces/test/bigNum.csl : 416.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846773 -- code size = 111 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b846773 : disassembly at namespaces/test/bigNum.csl : 416.10 :
0x78722b846773    4d897e08                mov [r14+0x8], r15                                     
0x78722b846777    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84677b    4981c610000000          add r14, 0x10                                          
 ..  | fn, REG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b846782    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. EG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b84678a    48c7c700000000          mov rdi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b846791    be0100000049837ff8      mov rsi, 0xf87f834900000001                              
0x78722b84679a    007e35                  add [rsi+0x35], dil                                    
0x78722b84679d    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467a1    488bfe                  mov rdi, rsi                                           
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467a4    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467a8    488bf1                  mov rsi, rcx                                           
0x78722b8467ab    498d4708                lea rax, [r15+0x8]                                     
0x78722b8467af    4983c608                add r14, 0x8                                           
0x78722b8467b3    498906                  mov [r14], rax                                         
0x78722b8467b6    4803fe                  add rdi, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467b9    488bc8                  mov rcx, rax                                           
0x78722b8467bc    498b06                  mov rax, [r14]                                         
0x78722b8467bf    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467c3    488938                  mov [rax], rdi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b8467c6    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b8467cb    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b8467d0    7fcf                    jg 0x2b8467a1                 < Root.fib01+46 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467d2    498b4708                mov rax, [r15+0x8]                                     
0x78722b8467d6    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8467da    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b8467de    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b8467e1    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 111
Word : 0x000078722af4c408 :: Compiled at : 0x000078722b846773
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 416.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | REG fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 419.2 :: we are now at : namespaces/test/bigNum.csl : 430.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8467e7 -- code size = 84 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b8467e7 : disassembly at namespaces/test/bigNum.csl : 430.10 :
0x78722b8467e7    4d897e08                mov [r14+0x8], r15                                     
0x78722b8467eb    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8467ef    4981c608000000          add r14, 0x8                                           
 ..  REG fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b8467f6    48c7c700000000          mov rdi, 0x0                                           
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b8467fd    48c7c600000000          mov rsi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b846804    ba01000000              mov edx, 0x1                                           
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x78722b846809    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x78722b84680e    7e1f                    jle 0x2b84682f                < Root.fib01+72 >
0x78722b846810    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846814    488bf2                  mov rsi, rdx                                           
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846817    488bd7                  mov rdx, rdi                                           
0x78722b84681a    488bc7                  mov rax, rdi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84681d    4803f2                  add rsi, rdx                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846820    488bfe                  mov rdi, rsi                                           
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b846823    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b846828    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b84682d    7fe5                    jg 0x2b846814                 < Root.fib01+45 >
0x78722b84682f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b846833    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b846837    49893e                  mov [r14], rdi                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b84683a    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 84
Word : 0x000078722af51218 :: Compiled at : 0x000078722b8467e7
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 430.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 433.2 :: we are now at : namespaces/test/bigNum.csl : 444.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846840 -- code size = 121 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b846840 : disassembly at namespaces/test/bigNum.csl : 444.10 :
0x78722b846840    4d897e08                mov [r14+0x8], r15                                     
0x78722b846844    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b846848    4981c618000000          add r14, 0x18                                          
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            .. 
0x78722b84684f    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b846853    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b84685b    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b846863    be01000000              mov esi, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x78722b846868    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x78722b84686c    7e3b                    jle 0x2b8468a9                < Root.fib01+105 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x78722b84686e    0f1f4000                nop [rax]                                              
0x78722b846872    498d4710                lea rax, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846876    488930                  mov [rax], rsi                                         
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846879    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84687d    488bf1                  mov rsi, rcx                                           
0x78722b846880    498d4708                lea rax, [r15+0x8]                                     
0x78722b846884    4983c608                add r14, 0x8                                           
0x78722b846888    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84688b    498b4710                mov rax, [r15+0x10]                                    
0x78722b84688f    4803c6                  add rax, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846892    488bc8                  mov rcx, rax                                           
0x78722b846895    498b06                  mov rax, [r14]                                         
0x78722b846898    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84689c    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b84689f    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b8468a3    4883ff00                cmp rdi, 0x0                                           
0x78722b8468a7    7fc9                    jg 0x2b846872                 < Root.fib01+50 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8468a9    498b4708                mov rax, [r15+0x8]                                     
0x78722b8468ad    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8468b1    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b8468b5    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b8468b8    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 121
Word : 0x000078722af56028 :: Compiled at : 0x000078722b846840
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 444.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 446.2 :: we are now at : namespaces/test/bigNum.csl : 457.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8468be -- code size = 112 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b8468be : disassembly at namespaces/test/bigNum.csl : 457.10 :
0x78722b8468be    4d897e08                mov [r14+0x8], r15                                     
0x78722b8468c2    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8468c6    4981c610000000          add r14, 0x10                                          
 ..                               : fib01 ( REG n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {        .. 
0x78722b8468cd    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b8468d1    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b8468d9    48c7c600000000          mov rsi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b8468e0    ba01000000              mov edx, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x78722b8468e5    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x78722b8468e9    7e33                    jle 0x2b84691e                < Root.fib01+96 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x78722b8468eb    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8468ef    488bf2                  mov rsi, rdx                                           
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8468f2    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b8468f6    488bd1                  mov rdx, rcx                                           
0x78722b8468f9    498d4708                lea rax, [r15+0x8]                                     
0x78722b8468fd    4983c608                add r14, 0x8                                           
0x78722b846901    498906                  mov [r14], rax                                         
0x78722b846904    4803f2                  add rsi, rdx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846907    488bc8                  mov rcx, rax                                           
0x78722b84690a    498b06                  mov rax, [r14]                                         
0x78722b84690d    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846911    488930                  mov [rax], rsi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b846914    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b846918    4883ff00                cmp rdi, 0x0                                           
0x78722b84691c    7fd1                    jg 0x2b8468ef                 < Root.fib01+49 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84691e    498b4708                mov rax, [r15+0x8]                                     
0x78722b846922    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b846926    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b84692a    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b84692d    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 112
Word : 0x000078722af5ae38 :: Compiled at : 0x000078722b8468be
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 457.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 459.2 :: we are now at : namespaces/test/bigNum.csl : 470.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846933 -- code size = 126 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x000078722b846933 : disassembly at namespaces/test/bigNum.csl : 470.10 :
0x78722b846933    4d897e08                mov [r14+0x8], r15                                     
0x78722b846937    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84693b    4981c618000000          add r14, 0x18                                          
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            .. 
0x78722b846942    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b846946    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b84694e    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b846956    be01000000              mov esi, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x78722b84695b    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x78722b84695f    7e3b                    jle 0x2b84699c                < Root.fib01+105 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x78722b846961    0f1f4000                nop [rax]                                              
0x78722b846965    498d4710                lea rax, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846969    488930                  mov [rax], rsi                                         
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84696c    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846970    488bf1                  mov rsi, rcx                                           
0x78722b846973    498d4708                lea rax, [r15+0x8]                                     
0x78722b846977    4983c608                add r14, 0x8                                           
0x78722b84697b    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84697e    498b4710                mov rax, [r15+0x10]                                    
0x78722b846982    4803c6                  add rax, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b846985    488bc8                  mov rcx, rax                                           
0x78722b846988    498b06                  mov rax, [r14]                                         
0x78722b84698b    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84698f    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b846992    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b846996    4883ff00                cmp rdi, 0x0                                           
0x78722b84699a    7fc9                    jg 0x2b846965                 < Root.fib01+50 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b84699c    498b4708                mov rax, [r15+0x8]                                     
0x78722b8469a0    e900000000              jmp 0x78722b8469a5            < Root.fib01+114 >
0x78722b8469a5    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8469a9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b8469ad    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b8469b0    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 126
Word : 0x000078722af5fc48 :: Compiled at : 0x000078722b846933
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 470.10 <::
 6765
including namespaces/test/classTest.csl at namespaces/test/initTest.csl : 86.41 ...
 
classTest.csl
Using Namespaces :> C Root Class Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

Pointer.size =  8

Integer size =  8

Using Namespaces :> Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 34.18 : token = class : cloneFlag = 0
Using Namespaces :> Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

Buffer size =  256

_ClassTypedef : at namespaces/test/classTest.csl : 40.3 : token = class : cloneFlag = 0
Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

DLLNode size =  16

_ClassTypedef : at namespaces/test/classTest.csl : 47.3 : token = :{ : cloneFlag = 0
DLLNode size =  18

Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 55.3 : token = :{ : cloneFlag = 0
DLLNode size =  16

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 65.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 16
Dump at : namespaces/test/classTest.csl : 66.51 :
Dump : Address = 0x000078722b63e568 : Number = 16 :: (little endian dump)
0x000078722b63e568 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/classTest.csl : 67.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

_ClassTypedef : at namespaces/test/classTest.csl : 71.3 : token = class : cloneFlag = 0
 =============================
DLList.init <:> csl compiled word
SourceCode for DLList.init :> 
: init ( this ) this.HeadNode.AfterReference this.TailNode.BeforeReference = this.TailNode.BeforeReference this.HeadNode.AfterReference = this.HeadNode.BeforeReference 1 = this.TailNode.AfterReference 2 = ; 
Source code file location of init : "namespaces/test/classTest.csl" : 77.2 :: we are now at : namespaces/test/classTest.csl : 83.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8469cb -- code size = 109 bytes
TypeSignature : 
 -----------------------------
Word :: DLList.init : definition = 0x000078722b8469cb : disassembly at namespaces/test/classTest.csl : 83.18 :
0x78722b8469cb    4d897e08                mov [r14+0x8], r15                                     
0x78722b8469cf    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8469d3    4981c608000000          add r14, 0x8                                           
 ..                   : init ( this )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this .. 
0x78722b8469da    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8469de    4881c000000000          add rax, 0x0                                           
 .. is )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =    .. 
0x78722b8469e5    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8469e9    4881c118000000          add rcx, 0x18                                          
 .. ference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReferenc .. 
0x78722b8469f0    488908                  mov [rax], rcx                                         
 .. e this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =  .. 
0x78722b8469f3    498b47f8                mov rax, [r15-0x8]                                     
 .. e.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailN .. 
0x78722b8469f7    4881c018000000          add rax, 0x18                                          
 .. e =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReferen .. 
0x78722b8469fe    498b4ff8                mov rcx, [r15-0x8]                                     
 .. eference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a02    488908                  mov [rax], rcx                                         
 .. ce this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a05    498b47f8                mov rax, [r15-0x8]                                     
 .. de.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a09    4881c008000000          add rax, 0x8                                           
0x78722b846a10    b901000000              mov ecx, 0x1                                           
 .. =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a15    488908                  mov [rax], rcx                                         
 .. this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a18    498b47f8                mov rax, [r15-0x8]                                     
 .. HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a1c    4881c010000000          add rax, 0x10                                          
0x78722b846a23    b902000000              mov ecx, 0x2                                           
 .. =     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a28    488908                  mov [rax], rcx                                         
0x78722b846a2b    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b846a2f    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b846a33    4983ee08                sub r14, 0x8                                           
 ..     this.TailNode.AfterReference  2 = ;  .. 
0x78722b846a37    c3                      ret                                                    
Word_Disassemble : word - 'init' :: codeSize = 109
Word : 0x000078722af67978 :: Compiled at : 0x000078722b8469cb
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 83.18 <::

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 32
Dump at : namespaces/test/classTest.csl : 86.36 :
Dump : Address = 0x000078722b63e578 : Number = 32 :: (little endian dump)
0x000078722b63e578 :  90 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e588 :  02 00 00 00 00 00 00 00  78 e5 63 2b 72 78 00 00  ........ x.c+rx.. 
 class init test :   : ok

 15 15 15 15 15 
yada yada yada yada neti 
 below line should show several 15's
 15 15 15 15 15
 
 above line should show several 15's
Using Namespaces :> DLList DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 97.4 : token =  : cloneFlag = 1
 =============================
DLListClone.init <:> csl compiled word
SourceCode for DLListClone.init :> 
: init ( this ) this.Category 12 = this.Three 3 = this.Prototype this.Three @ = this.Prototype @ dup p 3 "init_assert1" assert this.Prototype @ p this.Sum 0 = this.Four 4 = this.Twelve 12 = this.Accum this.Sum @ = this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert this.Accum this.Three @ this.Four @ * this.Three @ / = this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * this.Category @ - = this.Sum @ dup hex p 24 "init_assert5" assert decimal nl this.Category @ dup p 12 "init_assert7" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert this.Sum this.Category @ this.Prototype @ - dup p = this.Sum this.Category @ this.Prototype @ && dup p = this.Sum this.Category @ this.Prototype @ & dup p = this.Accum this.Prototype @ = this.Sum this.Category @ this.Prototype @ | dup p = this.Sum this.Category @ this.Prototype @ || dup p = this.Sum this.Category @ this.Prototype @ / dup p = this.Category @ dup p 12 _assert this.Sum @ p this.Prototype @ p "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps hex "\nthis = " ps this p "\nthis @ = " ps this @ p "\nthis.size = " ps this.size @ p nl this dup p this.size @ dump this.Accum this.Prototype @ dup p = this this.size @ dump decimal this.Accum @ dup 3 "\nAccum should be 3 : assert9 =" assert p this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p; 
Source code file location of init : "namespaces/test/classTest.csl" : 107.2 :: we are now at : namespaces/test/classTest.csl : 162.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b846bdb -- code size = 2648 bytes
TypeSignature : 
 -----------------------------
Word :: DLListClone.init : definition = 0x000078722b846bdb : disassembly at namespaces/test/classTest.csl : 162.18 :
0x78722b846bdb    4d897e08                mov [r14+0x8], r15                                     
0x78722b846bdf    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b846be3    4981c608000000          add r14, 0x8                                           
 ..                   : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p  .. 
0x78722b846bea    498b47f8                mov rax, [r15-0x8]                                     
 ..              : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "in .. 
0x78722b846bee    4881c020000000          add rax, 0x20                                          
0x78722b846bf5    b90c000000              mov ecx, 0xc                                           
 ..  : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1"  .. 
0x78722b846bfa    488908                  mov [rax], rcx                                         
 .. t ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert .. 
0x78722b846bfd    498b47f8                mov rax, [r15-0x8]                                     
 .. his )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      .. 
0x78722b846c01    4881c040000000          add rax, 0x40                                          
0x78722b846c08    b903000000              mov ecx, 0x3                                           
 ..   this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Pr .. 
0x78722b846c0d    488908                  mov [rax], rcx                                         
 .. Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype .. 
0x78722b846c10    498b47f8                mov rax, [r15-0x8]                                     
 .. ory 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p  .. 
0x78722b846c14    4881c028000000          add rax, 0x28                                          
 ..    this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this. .. 
0x78722b846c1b    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846c1f    4881c140000000          add rcx, 0x40                                          
 .. is.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 .. 
0x78722b846c26    488b09                  mov rcx, [rcx]                                         
 ..  3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     t .. 
0x78722b846c29    488908                  mov [rax], rcx                                         
 ..      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.F .. 
0x78722b846c2c    498b47f8                mov rax, [r15-0x8]                                     
 .. this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 .. 
0x78722b846c30    4881c028000000          add rax, 0x28                                          
0x78722b846c37    488b00                  mov rax, [rax]                                         
0x78722b846c3a    4983c610                add r14, 0x10                                          
0x78722b846c3e    498906                  mov [r14], rax                                         
 .. pe this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this .. 
0x78722b846c41    498946f8                mov [r14-0x8], rax                                     
 .. his.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twe .. 
0x78722b846c45    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b846c4f    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. s.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelv .. 
0x78722b846c52    b803000000              mov eax, 0x3                                           
0x78722b846c57    4983c608                add r14, 0x8                                           
0x78722b846c5b    498906                  mov [r14], rax                                         
 .. Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve  .. 
0x78722b846c5e    48b804f35d2b72780000    mov rax, 0x78722b5df304       < string : 'init_assert1' >
0x78722b846c68    4983c608                add r14, 0x8                                           
0x78722b846c6c    498906                  mov [r14], rax                                         
0x78722b846c6f    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b846c79    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..  @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Su .. 
0x78722b846c7c    498b47f8                mov rax, [r15-0x8]                                     
 .. p p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ = .. 
0x78722b846c80    4881c028000000          add rax, 0x28                                          
0x78722b846c87    488b00                  mov rax, [rax]                                         
0x78722b846c8a    4983c608                add r14, 0x8                                           
0x78722b846c8e    498906                  mov [r14], rax                                         
 .. assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this. .. 
0x78722b846c91    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b846c9b    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. " assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum thi .. 
0x78722b846c9e    498b47f8                mov rax, [r15-0x8]                                     
 .. ert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Cat .. 
0x78722b846ca2    4881c030000000          add rax, 0x30                                          
0x78722b846ca9    48c7c100000000          mov rcx, 0x0                                           
 ..    this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category  .. 
0x78722b846cb0    488908                  mov [rax], rcx                                         
 .. s.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 +  .. 
0x78722b846cb3    498b47f8                mov rax, [r15-0x8]                                     
 .. totype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this. .. 
0x78722b846cb7    4881c048000000          add rax, 0x48                                          
0x78722b846cbe    b904000000              mov ecx, 0x4                                           
 .. @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototy .. 
0x78722b846cc3    488908                  mov [rax], rcx                                         
 ..   this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ &  .. 
0x78722b846cc6    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = thi .. 
0x78722b846cca    4881c038000000          add rax, 0x38                                          
0x78722b846cd1    b90c000000              mov ecx, 0xc                                           
 ..     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3  .. 
0x78722b846cd6    488908                  mov [rax], rcx                                         
 .. is.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_ .. 
0x78722b846cd9    498b47f8                mov rax, [r15-0x8]                                     
 .. ur 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_asser .. 
0x78722b846cdd    4881c050000000          add rax, 0x50                                          
 ..       this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| .. 
0x78722b846ce4    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846ce8    4881c130000000          add rcx, 0x30                                          
 ..  this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| loca .. 
0x78722b846cef    488b09                  mov rcx, [rcx]                                         
 .. Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPu .. 
0x78722b846cf2    488908                  mov [rax], rcx                                         
 .. 2 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} lo .. 
0x78722b846cf5    498b47f8                mov rax, [r15-0x8]                                     
 ..    this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locatio .. 
0x78722b846cf9    4881c030000000          add rax, 0x30                                          
0x78722b846d00    4983c608                add r14, 0x8                                           
0x78722b846d04    498906                  mov [r14], rax                                         
 .. his.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPri .. 
0x78722b846d07    498b47f8                mov rax, [r15-0x8]                                     
 .. ccum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint as .. 
0x78722b846d0b    4881c020000000          add rax, 0x20                                          
0x78722b846d12    488b00                  mov rax, [rax]                                         
 .. um @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     th .. 
0x78722b846d15    b903000000              mov ecx, 0x3                                           
 ..  @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this .. 
0x78722b846d1a    4803c1                  add rax, rcx                                           
 ..  =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.A .. 
0x78722b846d1d    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846d21    4881c128000000          add rcx, 0x28                                          
 ..     this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum  .. 
0x78722b846d28    488b09                  mov rcx, [rcx]                                         
0x78722b846d2b    4823c1                  and rax, rcx                                           
 ..  this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ .. 
0x78722b846d2e    488bc8                  mov rcx, rax                                           
0x78722b846d31    498b06                  mov rax, [r14]                                         
0x78722b846d34    4983ee08                sub r14, 0x8                                           
 .. his.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ t .. 
0x78722b846d38    488908                  mov [rax], rcx                                         
 .. s.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ thi .. 
0x78722b846d3b    498b47f8                mov rax, [r15-0x8]                                     
 .. egory @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Fou .. 
0x78722b846d3f    4881c030000000          add rax, 0x30                                          
0x78722b846d46    488b00                  mov rax, [rax]                                         
0x78722b846d49    4983c608                add r14, 0x8                                           
0x78722b846d4d    498906                  mov [r14], rax                                         
 .. @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ *  .. 
0x78722b846d50    b803000000              mov eax, 0x3                                           
0x78722b846d55    4983c608                add r14, 0x8                                           
0x78722b846d59    498906                  mov [r14], rax                                         
 .. 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * th .. 
0x78722b846d5c    48b83cf35d2b72780000    mov rax, 0x78722b5df33c       < string : 'init_assert2' >
0x78722b846d66    4983c608                add r14, 0x8                                           
0x78722b846d6a    498906                  mov [r14], rax                                         
 .. ype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =  .. 
0x78722b846d6d    48b898e5632b72780000    mov rax, 0x78722b63e598                                
0x78722b846d77    4983c608                add r14, 0x8                                           
0x78722b846d7b    498906                  mov [r14], rax                                         
 .. @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 .. 
0x78722b846d7e    49bbb034f289c8600000    mov r11, 0x60c889f234b0                                
0x78722b846d88    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b846d92    49ffd2                  call r10                      < Experimental.locationPrint : 0x000060c889f234b0 >
0x78722b846d95    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b846d9f    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. ationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : t .. 
0x78722b846da2    498b47f8                mov rax, [r15-0x8]                                     
 .. Push |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.A .. 
0x78722b846da6    4881c050000000          add rax, 0x50                                          
0x78722b846dad    4983c608                add r14, 0x8                                           
0x78722b846db1    498906                  mov [r14], rax                                         
 .. } locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = .. 
0x78722b846db4    498b47f8                mov rax, [r15-0x8]                                     
 .. ationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" p .. 
0x78722b846db8    4881c040000000          add rax, 0x40                                          
0x78722b846dbf    488b00                  mov rax, [rax]                                         
 .. nt assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_ .. 
0x78722b846dc2    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846dc6    4881c148000000          add rcx, 0x48                                          
 .. sert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_asser .. 
0x78722b846dcd    488b09                  mov rcx, [rcx]                                         
 ..   this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" ass .. 
0x78722b846dd0    480fafc1                imul rax, rcx                                          
 .. this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" asser .. 
0x78722b846dd4    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846dd8    4881c140000000          add rcx, 0x40                                          
 .. Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert     .. 
0x78722b846ddf    488b09                  mov rcx, [rcx]                                         
0x78722b846de2    48c7c200000000          mov rdx, 0x0                                           
0x78722b846de9    48f7f9                  idiv rcx                                               
 .. is.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.P .. 
0x78722b846dec    488bc8                  mov rcx, rax                                           
0x78722b846def    498b06                  mov rax, [r14]                                         
0x78722b846df2    4983ee08                sub r14, 0x8                                           
 .. .Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Pro .. 
0x78722b846df6    488908                  mov [rax], rcx                                         
 .. @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype  .. 
0x78722b846df9    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p   .. 
0x78722b846dfd    4881c050000000          add rax, 0x50                                          
0x78722b846e04    488b00                  mov rax, [rax]                                         
0x78722b846e07    4983c608                add r14, 0x8                                           
0x78722b846e0b    498906                  mov [r14], rax                                         
 ..  * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.S .. 
0x78722b846e0e    b804000000              mov eax, 0x4                                           
0x78722b846e13    4983c608                add r14, 0x8                                           
0x78722b846e17    498906                  mov [r14], rax                                         
 ..  this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum .. 
0x78722b846e1a    48b882f35d2b72780000    mov rax, 0x78722b5df382                                
0x78722b846e24    4983c608                add r14, 0x8                                           
0x78722b846e28    498906                  mov [r14], rax                                         
 .. \n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * thi .. 
0x78722b846e2b    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b846e35    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.C .. 
0x78722b846e38    48b8dbf35d2b72780000    mov rax, 0x78722b5df3db       < string : 'init_assert3' >
0x78722b846e42    4983c608                add r14, 0x8                                           
0x78722b846e46    498906                  mov [r14], rax                                         
0x78722b846e49    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b846e53    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. um = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ .. 
0x78722b846e56    498b47f8                mov rax, [r15-0x8]                                     
 .. :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup  .. 
0x78722b846e5a    4881c028000000          add rax, 0x28                                          
0x78722b846e61    488b00                  mov rax, [rax]                                         
0x78722b846e64    4983c608                add r14, 0x8                                           
0x78722b846e68    498906                  mov [r14], rax                                         
 .. assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "i .. 
0x78722b846e6b    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b846e75    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. t3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_a .. 
0x78722b846e78    498b47f8                mov rax, [r15-0x8]                                     
 .. ssert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert .. 
0x78722b846e7c    4881c030000000          add rax, 0x30                                          
0x78722b846e83    4983c608                add r14, 0x8                                           
0x78722b846e87    498906                  mov [r14], rax                                         
 .. t      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" a .. 
0x78722b846e8a    498b47f8                mov rax, [r15-0x8]                                     
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert .. 
0x78722b846e8e    4881c020000000          add rax, 0x20                                          
0x78722b846e95    488b00                  mov rax, [rax]                                         
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl .. 
0x78722b846e98    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846e9c    4881c128000000          add rcx, 0x28                                          
 ..  @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl      .. 
0x78722b846ea3    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Categor .. 
0x78722b846ea6    480fafc1                imul rax, rcx                                          
 .. um this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category  .. 
0x78722b846eaa    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846eae    4881c120000000          add rcx, 0x20                                          
 .. is.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup .. 
0x78722b846eb5    488b09                  mov rcx, [rcx]                                         
0x78722b846eb8    482bc1                  sub rax, rcx                                           
 ..  @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "ini .. 
0x78722b846ebb    488bc8                  mov rcx, rax                                           
0x78722b846ebe    498b06                  mov rax, [r14]                                         
0x78722b846ec1    4983ee08                sub r14, 0x8                                           
 ..  this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_ .. 
0x78722b846ec5    488908                  mov [rax], rcx                                         
 .. .Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_asser .. 
0x78722b846ec8    498b47f8                mov rax, [r15-0x8]                                     
 .. otype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" a .. 
0x78722b846ecc    4881c030000000          add rax, 0x30                                          
0x78722b846ed3    488b00                  mov rax, [rax]                                         
0x78722b846ed6    4983c610                add r14, 0x10                                          
0x78722b846eda    498906                  mov [r14], rax                                         
 .. @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert  .. 
0x78722b846edd    498946f8                mov [r14-0x8], rax                                     
 .. this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    t .. 
0x78722b846ee1    49bbc027f289c8600000    mov r11, 0x60c889f227c0                                
0x78722b846eeb    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b846ef5    49ffd2                  call r10                      < System.hex : 0x000060c889f227c0 >
 .. .Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this. .. 
0x78722b846ef8    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b846f02    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. ategory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Pr .. 
0x78722b846f05    b818000000              mov eax, 0x18                                          
0x78722b846f0a    4983c608                add r14, 0x8                                           
0x78722b846f0e    498906                  mov [r14], rax                                         
 .. ory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Protot .. 
0x78722b846f11    48b809f45d2b72780000    mov rax, 0x78722b5df409       < string : 'init_assert5' >
0x78722b846f1b    4983c608                add r14, 0x8                                           
0x78722b846f1f    498906                  mov [r14], rax                                         
0x78722b846f22    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b846f2c    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum th .. 
0x78722b846f2f    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b846f39    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b846f43    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
 .. x p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Categ .. 
0x78722b846f46    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b846f50    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b846f5a    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ t .. 
0x78722b846f5d    498b47f8                mov rax, [r15-0x8]                                     
 .. t_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.P .. 
0x78722b846f61    4881c020000000          add rax, 0x20                                          
0x78722b846f68    488b00                  mov rax, [rax]                                         
0x78722b846f6b    4983c610                add r14, 0x10                                          
0x78722b846f6f    498906                  mov [r14], rax                                         
 .. assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @  .. 
0x78722b846f72    498946f8                mov [r14-0x8], rax                                     
 .. rt decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * =  .. 
0x78722b846f76    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b846f80    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = th .. 
0x78722b846f83    b80c000000              mov eax, 0xc                                           
0x78722b846f88    4983c608                add r14, 0x8                                           
0x78722b846f8c    498906                  mov [r14], rax                                         
 .. imal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.S .. 
0x78722b846f8f    48b837f45d2b72780000    mov rax, 0x78722b5df437       < string : 'init_assert7' >
0x78722b846f99    4983c608                add r14, 0x8                                           
0x78722b846f9d    498906                  mov [r14], rax                                         
0x78722b846fa0    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b846faa    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..  @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" .. 
0x78722b846fad    498b47f8                mov rax, [r15-0x8]                                     
 .. p p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 3 .. 
0x78722b846fb1    4881c028000000          add rax, 0x28                                          
0x78722b846fb8    488b00                  mov rax, [rax]                                         
0x78722b846fbb    4983c608                add r14, 0x8                                           
0x78722b846fbf    498906                  mov [r14], rax                                         
 .. t_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_asse .. 
0x78722b846fc2    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b846fcc    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. ert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8"  .. 
0x78722b846fcf    498b47f8                mov rax, [r15-0x8]                                     
 ..  assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" asser .. 
0x78722b846fd3    4881c030000000          add rax, 0x30                                          
0x78722b846fda    4983c608                add r14, 0x8                                           
0x78722b846fde    498906                  mov [r14], rax                                         
 .. ert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    .. 
0x78722b846fe1    498b47f8                mov rax, [r15-0x8]                                     
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this .. 
0x78722b846fe5    4881c020000000          add rax, 0x20                                          
0x78722b846fec    488b00                  mov rax, [rax]                                         
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.C .. 
0x78722b846fef    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b846ff3    4881c128000000          add rcx, 0x28                                          
 ..  @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Catego .. 
0x78722b846ffa    488b09                  mov rcx, [rcx]                                         
0x78722b846ffd    480fafc1                imul rax, rcx                                          
 .. .Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Pr .. 
0x78722b847001    488bc8                  mov rcx, rax                                           
0x78722b847004    498b06                  mov rax, [r14]                                         
0x78722b847007    4983ee08                sub r14, 0x8                                           
 .. um this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prot .. 
0x78722b84700b    488908                  mov [rax], rcx                                         
 ..  this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Protot .. 
0x78722b84700e    498b47f8                mov rax, [r15-0x8]                                     
 .. .Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ .. 
0x78722b847012    4881c030000000          add rax, 0x30                                          
0x78722b847019    488b00                  mov rax, [rax]                                         
0x78722b84701c    4983c610                add r14, 0x10                                          
0x78722b847020    498906                  mov [r14], rax                                         
 .. ory @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup .. 
0x78722b847023    498946f8                mov [r14-0x8], rax                                     
 .. @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p = .. 
0x78722b847027    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847031    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =   .. 
0x78722b847034    48b862f45d2b72780000    mov rax, 0x78722b5df462       < string : 'testing yada' >
0x78722b84703e    4983c608                add r14, 0x8                                           
0x78722b847042    498906                  mov [r14], rax                                         
 .. @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this .. 
0x78722b847045    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84704f    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Ca .. 
0x78722b847052    b824000000              mov eax, 0x24                                          
0x78722b847057    4983c608                add r14, 0x8                                           
0x78722b84705b    498906                  mov [r14], rax                                         
 .. this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Categ .. 
0x78722b84705e    48b890f45d2b72780000    mov rax, 0x78722b5df490       < string : 'init_assert8' >
0x78722b847068    4983c608                add r14, 0x8                                           
0x78722b84706c    498906                  mov [r14], rax                                         
0x78722b84706f    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b847079    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..  yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && .. 
0x78722b84707c    498b47f8                mov rax, [r15-0x8]                                     
 .. " ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup  .. 
0x78722b847080    4881c030000000          add rax, 0x30                                          
0x78722b847087    4983c608                add r14, 0x8                                           
0x78722b84708b    498906                  mov [r14], rax                                         
 ..  36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =  .. 
0x78722b84708e    498b47f8                mov rax, [r15-0x8]                                     
 .. init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    th .. 
0x78722b847092    4881c020000000          add rax, 0x20                                          
0x78722b847099    488b00                  mov rax, [rax]                                         
 .. 8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this .. 
0x78722b84709c    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8470a0    4881c128000000          add rcx, 0x28                                          
 .. sert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Cate .. 
0x78722b8470a7    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this. .. 
0x78722b8470aa    482bc1                  sub rax, rcx                                           
0x78722b8470ad    4983c610                add r14, 0x10                                          
0x78722b8470b1    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Pr .. 
0x78722b8470b4    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Protot .. 
0x78722b8470b8    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b8470c2    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b8470c5    498b0e                  mov rcx, [r14]                                         
0x78722b8470c8    498b46f8                mov rax, [r14-0x8]                                     
0x78722b8470cc    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototyp .. 
0x78722b8470d0    488908                  mov [rax], rcx                                         
 .. egory @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & .. 
0x78722b8470d3    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup  .. 
0x78722b8470d7    4881c030000000          add rax, 0x30                                          
0x78722b8470de    4983c608                add r14, 0x8                                           
0x78722b8470e2    498906                  mov [r14], rax                                         
 .. his.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =  .. 
0x78722b8470e5    498b47f8                mov rax, [r15-0x8]                                     
 .. rototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    th .. 
0x78722b8470e9    4881c020000000          add rax, 0x20                                          
0x78722b8470f0    488b00                  mov rax, [rax]                                         
0x78722b8470f3    4983c608                add r14, 0x8                                           
0x78722b8470f7    498906                  mov [r14], rax                                         
 .. - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum th .. 
0x78722b8470fa    498b47f8                mov rax, [r15-0x8]                                     
 ..  p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Pr .. 
0x78722b8470fe    4881c028000000          add rax, 0x28                                          
0x78722b847105    488b00                  mov rax, [rax]                                         
0x78722b847108    4983c608                add r14, 0x8                                           
0x78722b84710c    498906                  mov [r14], rax                                         
 .. .Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =  .. 
0x78722b84710f    498bc6                  mov rax, r14                                           
0x78722b847112    4983ee08                sub r14, 0x8                                           
0x78722b847116    48833800                cmp qword [rax], 0x0                                   
0x78722b84711a    7410                    jz 0x2b84712c                 < DLListClone.init+1361 >
0x78722b84711c    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b847121    7409                    jz 0x2b84712c                 < DLListClone.init+1361 >
0x78722b847123    49c70601000000          mov qword [r14], 0x1                                   
0x78722b84712a    eb07                    jmp 0x78722b847133            < DLListClone.init+1368 >
0x78722b84712c    49c70600000000          mov qword [r14], 0x0                                   
0x78722b847133    0f8400000000            jz 0x78722b847139             < DLListClone.init+1374 >
 .. m this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     .. 
0x78722b847139    498b06                  mov rax, [r14]                                         
0x78722b84713c    4983c608                add r14, 0x8                                           
0x78722b847140    498906                  mov [r14], rax                                         
 .. is.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     thi .. 
0x78722b847143    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84714d    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b847150    498b0e                  mov rcx, [r14]                                         
0x78722b847153    498b46f8                mov rax, [r14-0x8]                                     
0x78722b847157    4983ee10                sub r14, 0x10                                          
 .. .Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this. .. 
0x78722b84715b    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum t .. 
0x78722b84715e    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.C .. 
0x78722b847162    4881c030000000          add rax, 0x30                                          
0x78722b847169    4983c608                add r14, 0x8                                           
0x78722b84716d    498906                  mov [r14], rax                                         
 .. is.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Categ .. 
0x78722b847170    498b47f8                mov rax, [r15-0x8]                                     
 .. ototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ .. 
0x78722b847174    4881c020000000          add rax, 0x20                                          
0x78722b84717b    488b00                  mov rax, [rax]                                         
 .. & dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Proto .. 
0x78722b84717e    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b847182    4881c128000000          add rcx, 0x28                                          
 ..  p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype  .. 
0x78722b847189    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =  .. 
0x78722b84718c    4823c1                  and rax, rcx                                           
0x78722b84718f    4983c610                add r14, 0x10                                          
0x78722b847193    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =    .. 
0x78722b847196    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     th .. 
0x78722b84719a    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b8471a4    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b8471a7    498b0e                  mov rcx, [r14]                                         
0x78722b8471aa    498b46f8                mov rax, [r14-0x8]                                     
0x78722b8471ae    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this .. 
0x78722b8471b2    488908                  mov [rax], rcx                                         
 .. egory @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum  .. 
0x78722b8471b5    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this. .. 
0x78722b8471b9    4881c050000000          add rax, 0x50                                          
 .. s.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Catego .. 
0x78722b8471c0    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8471c4    4881c128000000          add rcx, 0x28                                          
 .. totype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @  .. 
0x78722b8471cb    488b09                  mov rcx, [rcx]                                         
 .. up p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototy .. 
0x78722b8471ce    488908                  mov [rax], rcx                                         
 ..     this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ | .. 
0x78722b8471d1    498b47f8                mov rax, [r15-0x8]                                     
 .. his.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup .. 
0x78722b8471d5    4881c030000000          add rax, 0x30                                          
0x78722b8471dc    4983c608                add r14, 0x8                                           
0x78722b8471e0    498906                  mov [r14], rax                                         
 .. Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p = .. 
0x78722b8471e3    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =      .. 
0x78722b8471e7    4881c020000000          add rax, 0x20                                          
0x78722b8471ee    488b00                  mov rax, [rax]                                         
 .. type @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum th .. 
0x78722b8471f1    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8471f5    4881c128000000          add rcx, 0x28                                          
 .. @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Ca .. 
0x78722b8471fc    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ thi .. 
0x78722b8471ff    480bc1                  or rax, rcx                                            
0x78722b847202    4983c610                add r14, 0x10                                          
0x78722b847206    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this. .. 
0x78722b847209    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prot .. 
0x78722b84720d    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847217    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b84721a    498b0e                  mov rcx, [r14]                                         
0x78722b84721d    498b46f8                mov rax, [r14-0x8]                                     
0x78722b847221    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Protot .. 
0x78722b847225    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @  .. 
0x78722b847228    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup .. 
0x78722b84722c    4881c030000000          add rax, 0x30                                          
0x78722b847233    4983c608                add r14, 0x8                                           
0x78722b847237    498906                  mov [r14], rax                                         
 .. is.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p = .. 
0x78722b84723a    498b47f8                mov rax, [r15-0x8]                                     
 .. ototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =      .. 
0x78722b84723e    4881c020000000          add rax, 0x20                                          
0x78722b847245    488b00                  mov rax, [rax]                                         
 ..  dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Catego .. 
0x78722b847248    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b84724c    4881c128000000          add rcx, 0x28                                          
 .. p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @  .. 
0x78722b847253    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _as .. 
0x78722b847256    480bc1                  or rax, rcx                                            
0x78722b847259    0f95c0                  setnz al                                               
0x78722b84725c    480fb6c0                movzx rax, al                                          
0x78722b847260    4983c610                add r14, 0x10                                          
0x78722b847264    498906                  mov [r14], rax                                         
 .. m this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _asser .. 
0x78722b847267    498946f8                mov [r14-0x8], rax                                     
 .. is.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    .. 
0x78722b84726b    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847275    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b847278    498b0e                  mov rcx, [r14]                                         
0x78722b84727b    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84727f    4983ee10                sub r14, 0x10                                          
 .. .Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    t .. 
0x78722b847283    488908                  mov [rax], rcx                                         
 .. ory @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Su .. 
0x78722b847286    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p .. 
0x78722b84728a    4881c030000000          add rax, 0x30                                          
0x78722b847291    4983c608                add r14, 0x8                                           
0x78722b847295    498906                  mov [r14], rax                                         
 .. s.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p     .. 
0x78722b847298    498b47f8                mov rax, [r15-0x8]                                     
 .. totype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this. .. 
0x78722b84729c    4881c020000000          add rax, 0x20                                          
0x78722b8472a3    488b00                  mov rax, [rax]                                         
 ..  dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ .. 
0x78722b8472a6    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8472aa    4881c128000000          add rcx, 0x28                                          
 .. p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    .. 
0x78722b8472b1    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 .. 
0x78722b8472b4    48c7c200000000          mov rdx, 0x0                                           
0x78722b8472bb    48f7f9                  idiv rcx                                               
0x78722b8472be    4983c610                add r14, 0x10                                          
0x78722b8472c2    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 t .. 
0x78722b8472c5    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testi .. 
0x78722b8472c9    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b8472d3    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b8472d6    498b0e                  mov rcx, [r14]                                         
0x78722b8472d9    498b46f8                mov rax, [r14-0x8]                                     
0x78722b8472dd    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing .. 
0x78722b8472e1    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada  .. 
0x78722b8472e4    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 .. 
0x78722b8472e8    4881c020000000          add rax, 0x20                                          
0x78722b8472ef    488b00                  mov rax, [rax]                                         
0x78722b8472f2    4983c610                add r14, 0x10                                          
0x78722b8472f6    498906                  mov [r14], rax                                         
 .. otype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12  .. 
0x78722b8472f9    498946f8                mov [r14-0x8], rax                                     
 .. e @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3  .. 
0x78722b8472fd    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847307    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 :  .. 
0x78722b84730a    b80c000000              mov eax, 0xc                                           
0x78722b84730f    4983c608                add r14, 0x8                                           
0x78722b847313    498906                  mov [r14], rax                                         
0x78722b847316    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b847320    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 ..   this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above s .. 
0x78722b847323    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should .. 
0x78722b847327    4881c030000000          add rax, 0x30                                          
0x78722b84732e    488b00                  mov rax, [rax]                                         
0x78722b847331    4983c608                add r14, 0x8                                           
0x78722b847335    498906                  mov [r14], rax                                         
 .. gory @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (appr .. 
0x78722b847338    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847342    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approxima .. 
0x78722b847345    498b47f8                mov rax, [r15-0x8]                                     
 ..  p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) .. 
0x78722b847349    4881c028000000          add rax, 0x28                                          
0x78722b847350    488b00                  mov rax, [rax]                                         
0x78722b847353    4983c608                add r14, 0x8                                           
0x78722b847357    498906                  mov [r14], rax                                         
 .. t    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps  .. 
0x78722b84735a    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847364    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b847367    48b807f55d2b72780000    mov rax, 0x78722b5df507                                
0x78722b847371    4983c608                add r14, 0x8                                           
0x78722b847375    498906                  mov [r14], rax                                         
 .. ut above should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.si .. 
0x78722b847378    49baa617842b72780000    mov r10, 0x78722b8417a6                                
0x78722b847382    49ffd2                  call r10                      < System.ddps : 0x000078722b8417a6 >
 ..  should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p n .. 
0x78722b847385    49bbc027f289c8600000    mov r11, 0x60c889f227c0                                
0x78722b84738f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b847399    49ffd2                  call r10                      < System.hex : 0x000060c889f227c0 >
0x78722b84739c    48b8c0f55d2b72780000    mov rax, 0x78722b5df5c0                                
0x78722b8473a6    4983c608                add r14, 0x8                                           
0x78722b8473aa    498906                  mov [r14], rax                                         
 .. ly) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p thi .. 
0x78722b8473ad    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8473b7    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.s .. 
0x78722b8473ba    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8473be    4881c000000000          add rax, 0x0                                           
0x78722b8473c5    4983c608                add r14, 0x8                                           
0x78722b8473c9    498906                  mov [r14], rax                                         
 .. " ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ .. 
0x78722b8473cc    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b8473d6    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b8473d9    48b8e1f55d2b72780000    mov rax, 0x78722b5df5e1                                
0x78722b8473e3    4983c608                add r14, 0x8                                           
0x78722b8473e7    498906                  mov [r14], rax                                         
 .. nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum .. 
0x78722b8473ea    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8473f4    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. is = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum th .. 
0x78722b8473f7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8473fb    488b00                  mov rax, [rax]                                         
0x78722b8473fe    4983c608                add r14, 0x8                                           
0x78722b847402    498906                  mov [r14], rax                                         
 .. ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prot .. 
0x78722b847405    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84740f    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b847412    48b809f65d2b72780000    mov rax, 0x78722b5df609                                
0x78722b84741c    4983c608                add r14, 0x8                                           
0x78722b847420    498906                  mov [r14], rax                                         
 ..  = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     thi .. 
0x78722b847423    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84742d    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this t .. 
0x78722b847430    498b47f8                mov rax, [r15-0x8]                                     
0x78722b847434    4881c000000000          add rax, 0x0                                           
0x78722b84743b    4983c608                add r14, 0x8                                           
0x78722b84743f    498906                  mov [r14], rax                                         
 .. this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.s .. 
0x78722b847442    48b8e8e6f62a72780000    mov rax, 0x78722af6e6e8       < string : 'X' >
0x78722b84744c    488b00                  mov rax, [rax]                                         
0x78722b84744f    4983c608                add r14, 0x8                                           
0x78722b847453    498906                  mov [r14], rax                                         
 .. p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ d .. 
0x78722b847456    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847460    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dum .. 
0x78722b847463    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84746d    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b847477    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. this.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     d .. 
0x78722b84747a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84747e    4881c000000000          add rax, 0x0                                           
0x78722b847485    4983c610                add r14, 0x10                                          
0x78722b847489    498906                  mov [r14], rax                                         
 .. size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decima .. 
0x78722b84748c    498946f8                mov [r14-0x8], rax                                     
 ..  = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal    .. 
0x78722b847490    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84749a    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal      .. 
0x78722b84749d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8474a1    4881c000000000          add rax, 0x0                                           
0x78722b8474a8    4983c608                add r14, 0x8                                           
0x78722b8474ac    498906                  mov [r14], rax                                         
 ..  this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this. .. 
0x78722b8474af    48b8e8e6f62a72780000    mov rax, 0x78722af6e6e8       < string : 'X' >
0x78722b8474b9    488b00                  mov rax, [rax]                                         
0x78722b8474bc    4983c608                add r14, 0x8                                           
0x78722b8474c0    498906                  mov [r14], rax                                         
 .. ize @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ .. 
0x78722b8474c3    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b8474cd    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8474d7    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. l     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\ .. 
0x78722b8474da    498b47f8                mov rax, [r15-0x8]                                     
 ..  this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccu .. 
0x78722b8474de    4881c050000000          add rax, 0x50                                          
0x78722b8474e5    4983c608                add r14, 0x8                                           
0x78722b8474e9    498906                  mov [r14], rax                                         
 .. dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum shou .. 
0x78722b8474ec    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be .. 
0x78722b8474f0    4881c028000000          add rax, 0x28                                          
0x78722b8474f7    488b00                  mov rax, [rax]                                         
0x78722b8474fa    4983c610                add r14, 0x10                                          
0x78722b8474fe    498906                  mov [r14], rax                                         
 ..  dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 .. 
0x78722b847501    498946f8                mov [r14-0x8], rax                                     
 .. p     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  .. 
0x78722b847505    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84750f    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b847512    498b0e                  mov rcx, [r14]                                         
0x78722b847515    498b46f8                mov rax, [r14-0x8]                                     
0x78722b847519    4983ee10                sub r14, 0x10                                          
 ..     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  a .. 
0x78722b84751d    488908                  mov [rax], rcx                                         
 .. is.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert  .. 
0x78722b847520    498b47f8                mov rax, [r15-0x8]                                     
0x78722b847524    4881c000000000          add rax, 0x0                                           
0x78722b84752b    4983c608                add r14, 0x8                                           
0x78722b84752f    498906                  mov [r14], rax                                         
 .. cum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p     .. 
0x78722b847532    498b47f8                mov rax, [r15-0x8]                                     
0x78722b847536    4881c000000000          add rax, 0x0                                           
0x78722b84753d    4983c608                add r14, 0x8                                           
0x78722b847541    498906                  mov [r14], rax                                         
 .. his.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this. .. 
0x78722b847544    48b8e8e6f62a72780000    mov rax, 0x78722af6e6e8       < string : 'X' >
0x78722b84754e    488b00                  mov rax, [rax]                                         
0x78722b847551    4983c608                add r14, 0x8                                           
0x78722b847555    498906                  mov [r14], rax                                         
 .. totype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Categor .. 
0x78722b847558    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b847562    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84756c    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 1 .. 
0x78722b84756f    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b847579    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b847583    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
 .. this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategor .. 
0x78722b847586    498b47f8                mov rax, [r15-0x8]                                     
 .. this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory sho .. 
0x78722b84758a    4881c050000000          add rax, 0x50                                          
0x78722b847591    488b00                  mov rax, [rax]                                         
0x78722b847594    4983c610                add r14, 0x10                                          
0x78722b847598    498906                  mov [r14], rax                                         
 .. e @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 1 .. 
0x78722b84759b    498946f8                mov [r14-0x8], rax                                     
 .. dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 :  .. 
0x78722b84759f    b803000000              mov eax, 0x3                                           
0x78722b8475a4    4983c608                add r14, 0x8                                           
0x78722b8475a8    498906                  mov [r14], rax                                         
 .. mp     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : as .. 
0x78722b8475ab    48b84af65d2b72780000    mov rax, 0x78722b5df64a                                
0x78722b8475b5    4983c608                add r14, 0x8                                           
0x78722b8475b9    498906                  mov [r14], rax                                         
0x78722b8475bc    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b8475c6    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. ccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x78722b8475c9    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b8475d3    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x78722b8475d6    498b47f8                mov rax, [r15-0x8]                                     
 .. d be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x78722b8475da    4881c020000000          add rax, 0x20                                          
0x78722b8475e1    488b00                  mov rax, [rax]                                         
0x78722b8475e4    4983c610                add r14, 0x10                                          
0x78722b8475e8    498906                  mov [r14], rax                                         
 .. sert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x78722b8475eb    498946f8                mov [r14-0x8], rax                                     
 .. 9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x78722b8475ef    b80c000000              mov eax, 0xc                                           
0x78722b8475f4    4983c608                add r14, 0x8                                           
0x78722b8475f8    498906                  mov [r14], rax                                         
 .. "  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x78722b8475fb    48b8b3f65d2b72780000    mov rax, 0x78722b5df6b3                                
0x78722b847605    4983c608                add r14, 0x8                                           
0x78722b847609    498906                  mov [r14], rax                                         
0x78722b84760c    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b847616    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. ory should be 12 : assert10 =" assert p;  .. 
0x78722b847619    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b847623    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b847626    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84762a    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84762e    4983ee08                sub r14, 0x8                                           
 .. ry should be 12 : assert10 =" assert p;  .. 
0x78722b847632    c3                      ret                                                    
Word_Disassemble : word - 'init' :: codeSize = 2648
Word : 0x000078722af6f588 :: Compiled at : 0x000078722b846bdb
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 162.18 <::

DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 3 init_assert1  : ok

 3
Run Time Location : namespaces/test/classTest.csl 125.98 init_assert2  : ok

 
 DLListClone init : this.Accum = : init_assert3  : ok

 3 0x0000000000000018 init_assert5  : ok


 12 init_assert7  : ok

 3 36 testing yada init_assert8  : ok

 9 1 0 15 1 4 12 4 3 
 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read 
this =  0x000078722b63e5b8 
this @ =  0x000078722b63e5d0 
this.size =  0x0000000000000058
 0x000078722b63e5b8
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x000078722b63e5b8 : Number = 88 :: (little endian dump)
0x000078722b63e5b8 :  d0 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e5c8 :  02 00 00 00 00 00 00 00  b8 e5 63 2b 72 78 00 00  ........ ..c+rx.. 
0x000078722b63e5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000003
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x000078722b63e5b8 : Number = 88 :: (little endian dump)
0x000078722b63e5b8 :  d0 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e5c8 :  02 00 00 00 00 00 00 00  b8 e5 63 2b 72 78 00 00  ........ ..c+rx.. 
0x000078722b63e5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
Accum should be 3 : assert9 =  : ok

 3 
Category should be 12 : assert10 =  : ok

 12
DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 
this =  0x000078722af6e898
Dump at : namespaces/test/classTest.csl : 169.27 :
Dump : Address = 0x000078722b63e5b8 : Number = 88 :: (little endian dump)
0x000078722b63e5b8 :  d0 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e5c8 :  02 00 00 00 00 00 00 00  b8 e5 63 2b 72 78 00 00  ........ ..c+rx.. 
0x000078722b63e5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/classTest.csl : 170.32 :
Dump : Address = 0x000078722b63e5b8 : Number = 88 :: (little endian dump)
0x000078722b63e5b8 :  d0 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e5c8 :  02 00 00 00 00 00 00 00  b8 e5 63 2b 72 78 00 00  ........ ..c+rx.. 
0x000078722b63e5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 


DataStack at : namespaces/test/classTest.csl : 171.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 DLListClone size = 88
 Clone size  : ok

 DLListClone init test :   : ok

 
this @ size @ p  88 
this.size =  88
Using Namespaces :> C Root DLListClone DLList DLLNode Buffer Class Integer Pointer Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 
 
printf output = this.size = 88
 0x000078722b63e5b8 88
Dump at : namespaces/test/classTest.csl : 183.48 :
Dump : Address = 0x000078722b63e5b8 : Number = 88 :: (little endian dump)
0x000078722b63e5b8 :  d0 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e5c8 :  02 00 00 00 00 00 00 00  b8 e5 63 2b 72 78 00 00  ........ ..c+rx.. 
0x000078722b63e5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 


 -----------------------------
 'this' semantics have yet to be solidified namespaces/test/classTest.csl 185.53
 -----------------------------


Dump at : namespaces/test/classTest.csl : 186.32 :
Dump : Address = 0x000078722b63e5b8 : Number = 88 :: (little endian dump)
0x000078722b63e5b8 :  d0 e5 63 2b 72 78 00 00  01 00 00 00 00 00 00 00  ..c+rx.. ........ 
0x000078722b63e5c8 :  02 00 00 00 00 00 00 00  b8 e5 63 2b 72 78 00 00  ........ ..c+rx.. 
0x000078722b63e5d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e5f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e608 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 DLListClone init test4 :   : ok


including namespaces/test/math.csl at namespaces/test/initTest.csl : 86.41 ...
 
math test

 =============================
C.t* <:> csl compiled word
SourceCode for C.t* :> 
: t* ( a b c d ) a @ b @ c @ d @ * * * return tos ; 
Source code file location of t* : "namespaces/test/math.csl" : 25.2 :: we are now at : namespaces/test/math.csl : 26.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847907 -- code size = 93 bytes
TypeSignature : 
 -----------------------------
Word :: C.t* : definition = 0x000078722b847907 : disassembly at namespaces/test/math.csl : 26.16 :
0x78722b847907    4d897e08                mov [r14+0x8], r15                                     
0x78722b84790b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84790f    4981c608000000          add r14, 0x8                                           
 ..                      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b847916    498b47e0                mov rax, [r15-0x20]                                    
0x78722b84791a    4983c608                add r14, 0x8                                           
0x78722b84791e    498906                  mov [r14], rax                                         
 ..                  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b847921    498b47e8                mov rax, [r15-0x18]                                    
0x78722b847925    4983c608                add r14, 0x8                                           
0x78722b847929    498906                  mov [r14], rax                                         
 ..              : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b84792c    498b47f0                mov rax, [r15-0x10]                                    
 ..          : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b847930    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b847934    480fafc1                imul rax, rcx                                          
 ..      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b847938    488bc8                  mov rcx, rax                                           
0x78722b84793b    498b06                  mov rax, [r14]                                         
0x78722b84793e    4983ee08                sub r14, 0x8                                           
0x78722b847942    480fafc1                imul rax, rcx                                          
 ..    : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b847946    488bc8                  mov rcx, rax                                           
0x78722b847949    498b06                  mov rax, [r14]                                         
0x78722b84794c    4983ee08                sub r14, 0x8                                           
 ..  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x78722b847950    480fafc1                imul rax, rcx                                          
0x78722b847954    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847958    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84795c    4983ee18                sub r14, 0x18                                          
0x78722b847960    498906                  mov [r14], rax                                         
 ..  d ) a @ b @ c @ d @ * * * return tos ; 
0x78722b847963    c3                      ret                                                    
Word_Disassemble : word - 't*' :: codeSize = 93
Word : 0x000078722af81b98 :: Compiled at : 0x000078722b847907
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 26.16 <::

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ <<= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 44.2 :: we are now at : namespaces/test/math.csl : 45.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847b12 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x000078722b847b12 : disassembly at namespaces/test/math.csl : 45.17 :
0x78722b847b12    4d897e08                mov [r14+0x8], r15                                     
0x78722b847b16    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847b1a    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x78722b847b21    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                   : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x78722b847b25    49d367f0                shl qword [r15-0x10], cl                               
 ..               : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x78722b847b29    498b47f0                mov rax, [r15-0x10]                                    
0x78722b847b2d    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847b31    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847b35    4983ee08                sub r14, 0x8                                           
0x78722b847b39    498906                  mov [r14], rax                                         
   : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x78722b847b3c    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x000078722af73108 :: Compiled at : 0x000078722b847b12
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 45.17 <::
 moe_assert1  : ok

 moe_assert2  : ok

 moe_assert3  : ok

 moe_assert3  : ok



 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :> 
: moe ( n m ) n <<= m n return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 53.2 :: we are now at : namespaces/test/math.csl : 54.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847b72 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: Infix.moe : definition = 0x000078722b847b72 : disassembly at namespaces/test/math.csl : 54.17 :
0x78722b847b72    4d897e08                mov [r14+0x8], r15                                     
0x78722b847b76    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847b7a    4981c608000000          add r14, 0x8                                           
 ..                   : moe ( n m ) n <<= m n return tos ;  .. 
0x78722b847b81    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                       : moe ( n m ) n <<= m n return tos ;  .. 
0x78722b847b85    49d367f0                shl qword [r15-0x10], cl                               
 ..                 : moe ( n m ) n <<= m n return tos ;  .. 
0x78722b847b89    498b47f0                mov rax, [r15-0x10]                                    
0x78722b847b8d    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847b91    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847b95    4983ee08                sub r14, 0x8                                           
0x78722b847b99    498906                  mov [r14], rax                                         
 ..    : moe ( n m ) n <<= m n return tos ;  .. 
0x78722b847b9c    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x000078722af8fce0 :: Compiled at : 0x000078722b847b72
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 54.17 <::

 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :> 
: moe ( n m ) n >>= m n return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 56.2 :: we are now at : namespaces/test/math.csl : 57.20
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847ba2 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: Infix.moe : definition = 0x000078722b847ba2 : disassembly at namespaces/test/math.csl : 57.20 :
0x78722b847ba2    4d897e08                mov [r14+0x8], r15                                     
0x78722b847ba6    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847baa    4981c608000000          add r14, 0x8                                           
 ..                   : moe ( n m ) n >>= m n return tos ;  .. 
0x78722b847bb1    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                       : moe ( n m ) n >>= m n return tos ;  .. 
0x78722b847bb5    49d36ff0                shr qword [r15-0x10], cl                               
 ..                 : moe ( n m ) n >>= m n return tos ;  .. 
0x78722b847bb9    498b47f0                mov rax, [r15-0x10]                                    
0x78722b847bbd    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847bc1    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847bc5    4983ee08                sub r14, 0x8                                           
0x78722b847bc9    498906                  mov [r14], rax                                         
 ..    : moe ( n m ) n >>= m n return tos ;  .. 
0x78722b847bcc    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x000078722af90e30 :: Compiled at : 0x000078722b847ba2
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 57.20 <::
 128 65536 
should show 128 65536
 2 1 
should show 2 1

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ *= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 67.2 :: we are now at : namespaces/test/math.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847c62 -- code size = 51 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x000078722b847c62 : disassembly at namespaces/test/math.csl : 68.17 :
0x78722b847c62    4d897e08                mov [r14+0x8], r15                                     
0x78722b847c66    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847c6a    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x78722b847c71    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                         : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x78722b847c75    498b47f0                mov rax, [r15-0x10]                                    
 ..                   : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x78722b847c79    480fafc1                imul rax, rcx                                          
0x78722b847c7d    498947f0                mov [r15-0x10], rax                                    
 ..                : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x78722b847c81    498b47f0                mov rax, [r15-0x10]                                    
0x78722b847c85    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847c89    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847c8d    4983ee08                sub r14, 0x8                                           
0x78722b847c91    498906                  mov [r14], rax                                         
 .. : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x78722b847c94    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 51
Word : 0x000078722af94c40 :: Compiled at : 0x000078722b847c62
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 68.17 <::


 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ /= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 71.2 :: we are now at : namespaces/test/math.csl : 72.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847c9a -- code size = 57 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x000078722b847c9a : disassembly at namespaces/test/math.csl : 72.17 :
0x78722b847c9a    4d897e08                mov [r14+0x8], r15                                     
0x78722b847c9e    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847ca2    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x78722b847ca9    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                         : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x78722b847cad    498b47f0                mov rax, [r15-0x10]                                    
 ..                   : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x78722b847cb1    48c7c200000000          mov rdx, 0x0                                           
0x78722b847cb8    48f7f9                  idiv rcx                                               
0x78722b847cbb    498947f0                mov [r15-0x10], rax                                    
 ..                : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x78722b847cbf    498b47f0                mov rax, [r15-0x10]                                    
0x78722b847cc3    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847cc7    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847ccb    4983ee08                sub r14, 0x8                                           
0x78722b847ccf    498906                  mov [r14], rax                                         
 .. : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x78722b847cd2    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 57
Word : 0x000078722af95f40 :: Compiled at : 0x000078722b847c9a
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 72.17 <::


 =============================
C.moe2 <:> csl compiled word
SourceCode for C.moe2 :> 
: moe2 ( n ) n 2 /= n @ return tos ; 
Source code file location of moe2 : "namespaces/test/math.csl" : 75.2 :: we are now at : namespaces/test/math.csl : 76.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847cd8 -- code size = 54 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe2 : definition = 0x000078722b847cd8 : disassembly at namespaces/test/math.csl : 76.18 :
0x78722b847cd8    4d897e08                mov [r14+0x8], r15                                     
0x78722b847cdc    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847ce0    4981c608000000          add r14, 0x8                                           
 ..                        : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x78722b847ce7    b902000000              mov ecx, 0x2                                           
 ..                          : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x78722b847cec    498b47f8                mov rax, [r15-0x8]                                     
 ..                      : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x78722b847cf0    48c7c200000000          mov rdx, 0x0                                           
0x78722b847cf7    48f7f9                  idiv rcx                                               
0x78722b847cfa    498947f8                mov [r15-0x8], rax                                     
 ..                   : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x78722b847cfe    498b47f8                mov rax, [r15-0x8]                                     
0x78722b847d02    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847d06    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847d0a    498906                  mov [r14], rax                                         
 ..    : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x78722b847d0d    c3                      ret                                                    
Word_Disassemble : word - 'moe2' :: codeSize = 54
Word : 0x000078722af97240 :: Compiled at : 0x000078722b847cd8
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 76.18 <::


 moe3_assert1  : ok


 moe3_assert2  : ok



 =============================
C.t64bitAdd2 <:> csl compiled word
SourceCode for C.t64bitAdd2 :> 
: t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ; 
Source code file location of t64bitAdd2 : "namespaces/test/math.csl" : 83.2 :: we are now at : namespaces/test/math.csl : 84.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847d72 -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: C.t64bitAdd2 : definition = 0x000078722b847d72 : disassembly at namespaces/test/math.csl : 84.23 :
0x78722b847d72    4d897e08                mov [r14+0x8], r15                                     
0x78722b847d76    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847d7a    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x78722b847d81    48b80000000001000000    mov rax, 0x100000000                                   
 ..      : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x78722b847d8b    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x78722b847d8f    4803c1                  add rax, rcx                                           
   : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x78722b847d92    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ; 
0x78722b847d96    4803c1                  add rax, rcx                                           
0x78722b847d99    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847d9d    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847da1    4983ee08                sub r14, 0x8                                           
0x78722b847da5    498906                  mov [r14], rax                                         
 ..  ) 0x100000000 n @ + m @ + return tos ; 
0x78722b847da8    c3                      ret                                                    
Word_Disassemble : word - 't64bitAdd2' :: codeSize = 55
Word : 0x000078722af9a7e0 :: Compiled at : 0x000078722b847d72
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 84.23 <::
 t64bitAdd2_assert  : ok


 0x0000000000000002
 =============================
C.t64bitSub2 <:> csl compiled word
SourceCode for C.t64bitSub2 :> 
: t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ; 
Source code file location of t64bitSub2 : "namespaces/test/math.csl" : 87.2 :: we are now at : namespaces/test/math.csl : 88.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847df8 -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: C.t64bitSub2 : definition = 0x000078722b847df8 : disassembly at namespaces/test/math.csl : 88.23 :
0x78722b847df8    4d897e08                mov [r14+0x8], r15                                     
0x78722b847dfc    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847e00    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x78722b847e07    48b80300000001000000    mov rax, 0x100000003                                   
 ..      : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x78722b847e11    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x78722b847e15    482bc1                  sub rax, rcx                                           
   : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x78722b847e18    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ; 
0x78722b847e1c    482bc1                  sub rax, rcx                                           
0x78722b847e1f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847e23    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847e27    4983ee08                sub r14, 0x8                                           
0x78722b847e2b    498906                  mov [r14], rax                                         
 ..  ) 0x100000003 n @ - m @ - return tos ; 
0x78722b847e2e    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub2' :: codeSize = 55
Word : 0x000078722af9d140 :: Compiled at : 0x000078722b847df8
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 88.23 <::
 t64bitSub2_assert  : ok


 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :> 
: t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ; 
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 90.2 :: we are now at : namespaces/test/math.csl : 91.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847e34 -- code size = 55 bytes
TypeSignature : 
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x000078722b847e34 : disassembly at namespaces/test/math.csl : 91.23 :
0x78722b847e34    4d897e08                mov [r14+0x8], r15                                     
0x78722b847e38    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847e3c    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x78722b847e43    48b80400000001000000    mov rax, 0x100000004                                   
 ..      : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x78722b847e4d    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x78722b847e51    482bc1                  sub rax, rcx                                           
   : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x78722b847e54    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ; 
0x78722b847e58    482bc1                  sub rax, rcx                                           
0x78722b847e5b    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847e5f    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847e63    4983ee08                sub r14, 0x8                                           
0x78722b847e67    498906                  mov [r14], rax                                         
 ..  ) 0x100000004 n @ - m @ - return tos ; 
0x78722b847e6a    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub3' :: codeSize = 55
Word : 0x000078722af9e5f0 :: Compiled at : 0x000078722b847e34
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 91.23 <::

 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :> 
: t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 93.2 :: we are now at : namespaces/test/math.csl : 94.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b847e70 -- code size = 63 bytes
TypeSignature : 
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x000078722b847e70 : disassembly at namespaces/test/math.csl : 94.23 :
0x78722b847e70    4d897e08                mov [r14+0x8], r15                                     
0x78722b847e74    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b847e78    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;  .. 
0x78722b847e7f    b801000000              mov eax, 0x1                                           
 .. ub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x78722b847e84    48b90300000001000000    mov rcx, 0x100000003                                   
 .. 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x78722b847e8e    4803c1                  add rax, rcx                                           
 .. 100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x78722b847e91    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 00003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x78722b847e95    482bc1                  sub rax, rcx                                           
 .. 003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x78722b847e98    498b4ff8                mov rcx, [r15-0x8]                                     
 .. 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x78722b847e9c    482bc1                  sub rax, rcx                                           
0x78722b847e9f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b847ea3    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b847ea7    4983ee08                sub r14, 0x8                                           
0x78722b847eab    498906                  mov [r14], rax                                         
 ..  0x100000003 + n @ - m @ - return tos ; 
0x78722b847eae    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub3' :: codeSize = 63
Word : 0x000078722af9faa0 :: Compiled at : 0x000078722b847e70
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 94.23 <::

 7176105502331971041 
 0110 0011  1001 0110   1010 0101  1110 1111    0000 1001  0011 1001   0010 0101  1110 0001 
including namespaces/test/arrayTest.csl at namespaces/test/initTest.csl : 86.41 ...

_ClassTypedef : at namespaces/test/arrayTest.csl : 11.23 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
DLLNode size =  16
DLLNodeAlloc size =  512

Dump at : namespaces/test/arrayTest.csl : 24.15 :
Dump : Address = 0x000078722b63e610 : Number = 64 :: (little endian dump)
0x000078722b63e610 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e620 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e630 :  00 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63e640 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 27.25 : token = class : cloneFlag = 0DLLNodeAlloc4 size =  2048

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 
testna4 =  0x000078722b63e810
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :> 
: testna5 ( DLLNodeAlloc4 dlna4o ) "\ndlna4o = " ps dlna4o hp dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 = dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = dlna4o.nodes [ 1 ] [ 0 ] 32 dump dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 = dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps dlna4o.nodes [ 2 ] [ 1 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference 1 = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference dlna4o.nodes [ 3 ] [ 2 ].BeforeReference = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference dlna4o.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump "dlna4o = " ps dlna4o hp ; 
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 34.2 :: we are now at : namespaces/test/arrayTest.csl : 53.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b848c87 -- code size = 616 bytes
TypeSignature : Object 
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x000078722b848c87 : disassembly at namespaces/test/arrayTest.csl : 53.21 :
0x78722b848c87    4d897e08                mov [r14+0x8], r15                                     
0x78722b848c8b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b848c8f    4981c608000000          add r14, 0x8                                           
0x78722b848c96    48b8af1d5e2b72780000    mov rax, 0x78722b5e1daf                                
0x78722b848ca0    4983c608                add r14, 0x8                                           
0x78722b848ca4    498906                  mov [r14], rax                                         
 .. NodeAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRef .. 
0x78722b848ca7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b848cb1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. eAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRefere .. 
0x78722b848cb4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848cb8    4881c000000000          add rax, 0x0                                           
0x78722b848cbf    4983c608                add r14, 0x8                                           
0x78722b848cc3    498906                  mov [r14], rax                                         
 ..  dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = .. 
0x78722b848cc6    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b848cd0    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..  )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dl .. 
0x78722b848cd3    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848cd7    4881c000020000          add rax, 0x200                                         
0x78722b848cde    b901000000              mov ecx, 0x1                                           
 .. 4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o. .. 
0x78722b848ce3    488908                  mov [rax], rcx                                         
 .. es [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes  .. 
0x78722b848ce6    498b47f8                mov rax, [r15-0x8]                                     
 .. ence 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReferenc .. 
0x78722b848cea    4881c008020000          add rax, 0x208                                         
0x78722b848cf1    b902000000              mov ecx, 0x2                                           
 .. o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.n .. 
0x78722b848cf6    488908                  mov [rax], rcx                                         
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ .. 
0x78722b848cf9    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848cfd    4881c000020000          add rax, 0x200                                         
0x78722b848d04    4983c608                add r14, 0x8                                           
0x78722b848d08    498906                  mov [r14], rax                                         
 .. ence 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReferenc .. 
0x78722b848d0b    b820000000              mov eax, 0x20                                          
0x78722b848d10    4983c608                add r14, 0x8                                           
0x78722b848d14    498906                  mov [r14], rax                                         
 .. e 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 .. 
0x78722b848d17    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b848d21    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b848d2b    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..  dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\ .. 
0x78722b848d2e    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848d32    4881c010040000          add rax, 0x410                                         
0x78722b848d39    b901000000              mov ecx, 0x1                                           
 .. 4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 .. 
0x78722b848d3e    488908                  mov [rax], rcx                                         
 .. es [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" .. 
0x78722b848d41    498b47f8                mov rax, [r15-0x8]                                     
 .. ence 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 .. 
0x78722b848d45    4881c018040000          add rax, 0x418                                         
0x78722b848d4c    b902000000              mov ecx, 0x2                                           
 .. o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump   .. 
0x78722b848d51    488908                  mov [rax], rcx                                         
0x78722b848d54    48b8181e5e2b72780000    mov rax, 0x78722b5e1e18                                
0x78722b848d5e    4983c608                add r14, 0x8                                           
0x78722b848d62    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4 .. 
0x78722b848d65    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b848d6f    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. 4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes  .. 
0x78722b848d72    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848d76    4881c010040000          add rax, 0x410                                         
0x78722b848d7d    4983c608                add r14, 0x8                                           
0x78722b848d81    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReferen .. 
0x78722b848d84    b820000000              mov eax, 0x20                                          
0x78722b848d89    4983c608                add r14, 0x8                                           
0x78722b848d8d    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  .. 
0x78722b848d90    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b848d9a    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b848da4    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..  dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =      .. 
0x78722b848da7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848dab    4881c020060000          add rax, 0x620                                         
0x78722b848db2    b901000000              mov ecx, 0x1                                           
 .. o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 3 .. 
0x78722b848db7    488908                  mov [rax], rcx                                         
 .. s [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump .. 
0x78722b848dba    498b47f8                mov rax, [r15-0x8]                                     
 .. nce  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [  .. 
0x78722b848dbe    4881c028060000          add rax, 0x628                                         
0x78722b848dc5    b902000000              mov ecx, 0x2                                           
 .. .nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump   .. 
0x78722b848dca    488908                  mov [rax], rcx                                         
0x78722b848dcd    48b8bf1e5e2b72780000    mov rax, 0x78722b5e1ebf                                
0x78722b848dd7    4983c608                add r14, 0x8                                           
0x78722b848ddb    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes  .. 
0x78722b848dde    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b848de8    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [  .. 
0x78722b848deb    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848def    4881c020060000          add rax, 0x620                                         
0x78722b848df6    4983c608                add r14, 0x8                                           
0x78722b848dfa    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     .. 
0x78722b848dfd    b820000000              mov eax, 0x20                                          
0x78722b848e02    4983c608                add r14, 0x8                                           
0x78722b848e06    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dl .. 
0x78722b848e09    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b848e13    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b848e1d    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..  dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.node .. 
0x78722b848e20    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848e24    4881c020060000          add rax, 0x620                                         
 .. a4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nod .. 
0x78722b848e2b    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b848e2f    4881c128060000          add rcx, 0x628                                         
 .. a4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\nju .. 
0x78722b848e36    488908                  mov [rax], rcx                                         
 .. des [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust bef .. 
0x78722b848e39    498b47f8                mov rax, [r15-0x8]                                     
 .. erence =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ]  .. 
0x78722b848e3d    4881c028060000          add rax, 0x628                                         
 .. 4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps .. 
0x78722b848e44    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b848e48    4881c120060000          add rcx, 0x620                                         
 .. na4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump   .. 
0x78722b848e4f    488908                  mov [rax], rcx                                         
0x78722b848e52    48b86a1f5e2b72780000    mov rax, 0x78722b5e1f6a                                
0x78722b848e5c    4983c608                add r14, 0x8                                           
0x78722b848e60    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848e63    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b848e6d    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848e70    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848e74    4881c020060000          add rax, 0x620                                         
0x78722b848e7b    4983c608                add r14, 0x8                                           
0x78722b848e7f    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848e82    b820000000              mov eax, 0x20                                          
0x78722b848e87    4983c608                add r14, 0x8                                           
0x78722b848e8b    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848e8e    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b848e98    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b848ea2    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b848ea5    48b8df1f5e2b72780000    mov rax, 0x78722b5e1fdf       < string : 'dlna4o = ' >
0x78722b848eaf    4983c608                add r14, 0x8                                           
0x78722b848eb3    498906                  mov [r14], rax                                         
 .. s [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848eb6    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b848ec0    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848ec3    498b47f8                mov rax, [r15-0x8]                                     
0x78722b848ec7    4881c000000000          add rax, 0x0                                           
0x78722b848ece    4983c608                add r14, 0x8                                           
0x78722b848ed2    498906                  mov [r14], rax                                         
 .. 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848ed5    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b848edf    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
0x78722b848ee2    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b848ee6    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b848eea    4983ee08                sub r14, 0x8                                           
 ..  32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x78722b848eee    c3                      ret                                                    
Word_Disassemble : word - 'testna5' :: codeSize = 616
Word : 0x000078722aa53564 :: Compiled at : 0x000078722b848c87
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 53.21 <::
 
dlna4o =  0x000078722b63e810
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x000078722b63ea10 : Number = 32 :: (little endian dump)
0x000078722b63ea10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63ea20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x000078722b63ec20 : Number = 32 :: (little endian dump)
0x000078722b63ec20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63ec30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x000078722b63ee30 : Number = 32 :: (little endian dump)
0x000078722b63ee30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63ee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x000078722b63ee30 : Number = 32 :: (little endian dump)
0x000078722b63ee30 :  38 ee 63 2b 72 78 00 00  30 ee 63 2b 72 78 00 00  8.c+rx.. 0.c+rx.. 
0x000078722b63ee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 dlna4o =  0x000078722b63e810
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :> 
: testna5 "\ntestna4 = " ps testna4 hp testna4.nodes [ 1 ] [ 0 ].AfterReference 1 = testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 = testna4.nodes [ 1 ] [ 0 ] 32 dump testna4.nodes [ 2 ] [ 1 ].AfterReference 1 = testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps testna4.nodes [ 2 ] [ 1 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference 1 = testna4.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference testna4.nodes [ 3 ] [ 2 ].BeforeReference = testna4.nodes [ 3 ] [ 2 ].BeforeReference testna4.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump "testna4 = " ps testna4 hp ; 
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 56.2 :: we are now at : namespaces/test/arrayTest.csl : 75.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b848f03 -- code size = 685 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x000078722b848f03 : disassembly at namespaces/test/arrayTest.csl : 75.21 :
0x78722b848f03    48b887235e2b72780000    mov rax, 0x78722b5e2387                                
0x78722b848f0d    4983c608                add r14, 0x8                                           
0x78722b848f11    498906                  mov [r14], rax                                         
 ..         : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].Before .. 
0x78722b848f14    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b848f1e    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..      : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeRef .. 
0x78722b848f21    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b848f2b    4881c000000000          add rax, 0x0                                           
0x78722b848f32    4983c608                add r14, 0x8                                           
0x78722b848f36    498906                  mov [r14], rax                                         
 : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 .. 
0x78722b848f39    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b848f43    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =      .. 
0x78722b848f46    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b848f50    4881c000020000          add rax, 0x200                                         
0x78722b848f57    b901000000              mov ecx, 0x1                                           
 .. a4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testn .. 
0x78722b848f5c    488908                  mov [rax], rcx                                         
 .. es [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nod .. 
0x78722b848f5f    48b810e8632b72780000    mov rax, 0x78722b63e810                                
 .. nce 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterRefere .. 
0x78722b848f69    4881c008020000          add rax, 0x208                                         
0x78722b848f70    b902000000              mov ecx, 0x2                                           
 .. 4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna .. 
0x78722b848f75    488908                  mov [rax], rcx                                         
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.node .. 
0x78722b848f78    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b848f82    4881c000020000          add rax, 0x200                                         
0x78722b848f89    4983c608                add r14, 0x8                                           
0x78722b848f8d    498906                  mov [r14], rax                                         
 .. nce 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeRefere .. 
0x78722b848f90    b820000000              mov eax, 0x20                                          
0x78722b848f95    4983c608                add r14, 0x8                                           
0x78722b848f99    498906                  mov [r14], rax                                         
 ..  2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference .. 
0x78722b848f9c    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b848fa6    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b848fb0    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =      .. 
0x78722b848fb3    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b848fbd    4881c010040000          add rax, 0x410                                         
0x78722b848fc4    b901000000              mov ecx, 0x1                                           
 .. a4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ]  .. 
0x78722b848fc9    488908                  mov [rax], rcx                                         
 .. es [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dum .. 
0x78722b848fcc    48b810e8632b72780000    mov rax, 0x78722b63e810                                
 .. nce 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ .. 
0x78722b848fd6    4881c018040000          add rax, 0x418                                         
0x78722b848fdd    b902000000              mov ecx, 0x2                                           
 .. 4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump .. 
0x78722b848fe2    488908                  mov [rax], rcx                                         
0x78722b848fe5    48b8f3235e2b72780000    mov rax, 0x78722b5e23f3                                
0x78722b848fef    4983c608                add r14, 0x8                                           
0x78722b848ff3    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     tes .. 
0x78722b848ff6    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b849000    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. a4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nod .. 
0x78722b849003    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b84900d    4881c010040000          add rax, 0x410                                         
0x78722b849014    4983c608                add r14, 0x8                                           
0x78722b849018    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeRefer .. 
0x78722b84901b    b820000000              mov eax, 0x20                                          
0x78722b849020    4983c608                add r14, 0x8                                           
0x78722b849024    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReferenc .. 
0x78722b849027    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b849031    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84903b    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =    .. 
0x78722b84903e    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b849048    4881c020060000          add rax, 0x620                                         
0x78722b84904f    b901000000              mov ecx, 0x1                                           
 .. 4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] .. 
0x78722b849054    488908                  mov [rax], rcx                                         
 .. s [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 du .. 
0x78722b849057    48b810e8632b72780000    mov rax, 0x78722b63e810                                
 .. ce  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes  .. 
0x78722b849061    4881c028060000          add rax, 0x628                                         
0x78722b849068    b902000000              mov ecx, 0x2                                           
 .. .nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump .. 
0x78722b84906d    488908                  mov [rax], rcx                                         
0x78722b849070    48b89d245e2b72780000    mov rax, 0x78722b5e249d                                
0x78722b84907a    4983c608                add r14, 0x8                                           
0x78722b84907e    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nod .. 
0x78722b849081    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84908b    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. a4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] .. 
0x78722b84908e    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b849098    4881c020060000          add rax, 0x620                                         
0x78722b84909f    4983c608                add r14, 0x8                                           
0x78722b8490a3    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =   .. 
0x78722b8490a6    b820000000              mov eax, 0x20                                          
0x78722b8490ab    4983c608                add r14, 0x8                                           
0x78722b8490af    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =      .. 
0x78722b8490b2    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b8490bc    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8490c6    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.n .. 
0x78722b8490c9    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b8490d3    4881c020060000          add rax, 0x620                                         
 .. na4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4. .. 
0x78722b8490da    48b910e8632b72780000    mov rcx, 0x78722b63e810                                
0x78722b8490e4    4881c128060000          add rcx, 0x628                                         
 .. na4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\n .. 
0x78722b8490eb    488908                  mov [rax], rcx                                         
 .. des [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust b .. 
0x78722b8490ee    48b810e8632b72780000    mov rax, 0x78722b63e810                                
 .. rence =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3  .. 
0x78722b8490f8    4881c028060000          add rax, 0x628                                         
 .. a4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump"  .. 
0x78722b8490ff    48b910e8632b72780000    mov rcx, 0x78722b63e810                                
0x78722b849109    4881c120060000          add rcx, 0x620                                         
 .. tna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump .. 
0x78722b849110    488908                  mov [rax], rcx                                         
0x78722b849113    48b84b255e2b72780000    mov rax, 0x78722b5e254b                                
0x78722b84911d    4983c608                add r14, 0x8                                           
0x78722b849121    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b849124    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84912e    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. a4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b849131    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b84913b    4881c020060000          add rax, 0x620                                         
0x78722b849142    4983c608                add r14, 0x8                                           
0x78722b849146    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b849149    b820000000              mov eax, 0x20                                          
0x78722b84914e    4983c608                add r14, 0x8                                           
0x78722b849152    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b849155    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b84915f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849169    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b84916c    48b8c3255e2b72780000    mov rax, 0x78722b5e25c3       < string : 'testna4 = ' >
0x78722b849176    4983c608                add r14, 0x8                                           
0x78722b84917a    498906                  mov [r14], rax                                         
 ..  [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b84917d    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b849187    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b84918a    48b810e8632b72780000    mov rax, 0x78722b63e810                                
0x78722b849194    4881c000000000          add rax, 0x0                                           
0x78722b84919b    4983c608                add r14, 0x8                                           
0x78722b84919f    498906                  mov [r14], rax                                         
 .. ] 32 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b8491a2    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b8491ac    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. 2 dump     "testna4 = " ps testna4 hp ;  .. 
0x78722b8491af    c3                      ret                                                    
Word_Disassemble : word - 'testna5' :: codeSize = 685
Word : 0x000078722aa61eb4 :: Compiled at : 0x000078722b848f03
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 75.21 <::
 
testna4 =  0x000078722b63e810
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x000078722b63ea10 : Number = 32 :: (little endian dump)
0x000078722b63ea10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63ea20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x000078722b63ec20 : Number = 32 :: (little endian dump)
0x000078722b63ec20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63ec30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x000078722b63ee30 : Number = 32 :: (little endian dump)
0x000078722b63ee30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63ee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x000078722b63ee30 : Number = 32 :: (little endian dump)
0x000078722b63ee30 :  38 ee 63 2b 72 78 00 00  30 ee 63 2b 72 78 00 00  8.c+rx.. 0.c+rx.. 
0x000078722b63ee40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 testna4 =  0x000078722b63e810 
testna4 =  0x000078722b63e810
DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna <:> csl compiled word
SourceCode for DLLNodeAlloc.tna :> 
: tna testnarr2.nodes [ 1 ] 32 dump testnarr2.nodes [ 1 ].AfterReference 1 = testnarr2.nodes [ 1 ].BeforeReference 2 = testnarr2.nodes [ 1 ] 32 dump ; 
Source code file location of tna : "namespaces/test/arrayTest.csl" : 84.2 :: we are now at : namespaces/test/arrayTest.csl : 90.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8491c4 -- code size = 169 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tna : definition = 0x000078722b8491c4 : disassembly at namespaces/test/arrayTest.csl : 90.17 :
 ..                             : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [  .. 
0x78722b8491c4    48b810f0632b72780000    mov rax, 0x78722b63f010                                
0x78722b8491ce    4881c010000000          add rax, 0x10                                          
0x78722b8491d5    4983c608                add r14, 0x8                                           
0x78722b8491d9    498906                  mov [r14], rax                                         
 ..       : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2  .. 
0x78722b8491dc    b820000000              mov eax, 0x20                                          
0x78722b8491e1    4983c608                add r14, 0x8                                           
0x78722b8491e5    498906                  mov [r14], rax                                         
 ..    : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =   .. 
0x78722b8491e8    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b8491f2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8491fc    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..    testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testna .. 
0x78722b8491ff    48b810f0632b72780000    mov rax, 0x78722b63f010                                
0x78722b849209    4881c010000000          add rax, 0x10                                          
0x78722b849210    b901000000              mov ecx, 0x1                                           
 .. estnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b849215    488908                  mov [rax], rcx                                         
 .. 2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b849218    48b810f0632b72780000    mov rax, 0x78722b63f010                                
 .. erence 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b849222    4881c018000000          add rax, 0x18                                          
0x78722b849229    b902000000              mov ecx, 0x2                                           
 .. stnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b84922e    488908                  mov [rax], rcx                                         
 .. .nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b849231    48b810f0632b72780000    mov rax, 0x78722b63f010                                
0x78722b84923b    4881c010000000          add rax, 0x10                                          
0x78722b849242    4983c608                add r14, 0x8                                           
0x78722b849246    498906                  mov [r14], rax                                         
 .. erence 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b849249    b820000000              mov eax, 0x20                                          
0x78722b84924e    4983c608                add r14, 0x8                                           
0x78722b849252    498906                  mov [r14], rax                                         
 .. nce 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b849255    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b84925f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849269    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x78722b84926c    c3                      ret                                                    
Word_Disassemble : word - 'tna' :: codeSize = 169
Word : 0x000078722aa70b2c :: Compiled at : 0x000078722b8491c4
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 90.17 <::

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x000078722b63f020 : Number = 32 :: (little endian dump)
0x000078722b63f020 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f030 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x000078722b63f020 : Number = 32 :: (little endian dump)
0x000078722b63f020 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f030 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
DLLNodeAlloc.tnarr2a <:> csl compiled word
SourceCode for DLLNodeAlloc.tnarr2a :> 
: tnarr2a ( this ) "tnarr2a" ps nl this . nodes [ 2 ].AfterReference 1 = this . nodes [ 2 ].BeforeReference 2 = this this.size @ dump ; 
Source code file location of tnarr2a : "namespaces/test/arrayTest.csl" : 106.2 :: we are now at : namespaces/test/arrayTest.csl : 112.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b849378 -- code size = 198 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tnarr2a : definition = 0x000078722b849378 : disassembly at namespaces/test/arrayTest.csl : 112.21 :
0x78722b849378    4d897e08                mov [r14+0x8], r15                                     
0x78722b84937c    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b849380    4981c608000000          add r14, 0x8                                           
0x78722b849387    48b8592b5e2b72780000    mov rax, 0x78722b5e2b59       < string : 'tnarr2a' >
0x78722b849391    4983c608                add r14, 0x8                                           
0x78722b849395    498906                  mov [r14], rax                                         
 .. : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.siz .. 
0x78722b849398    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8493a2    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ .. 
0x78722b8493a5    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b8493af    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8493b9    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. 2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493bc    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8493c0    4881c020000000          add rax, 0x20                                          
0x78722b8493c7    b901000000              mov ecx, 0x1                                           
 ..   this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493cc    488908                  mov [rax], rcx                                         
 .. his . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493cf    498b47f8                mov rax, [r15-0x8]                                     
 .. fterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493d3    4881c028000000          add rax, 0x28                                          
0x78722b8493da    b902000000              mov ecx, 0x2                                           
 ..  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493df    488908                  mov [rax], rcx                                         
 .. is . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493e2    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8493e6    4881c000000000          add rax, 0x0                                           
0x78722b8493ed    4983c608                add r14, 0x8                                           
0x78722b8493f1    498906                  mov [r14], rax                                         
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8493f4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8493f8    4881c000000000          add rax, 0x0                                           
0x78722b8493ff    4983c608                add r14, 0x8                                           
0x78722b849403    498906                  mov [r14], rax                                         
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b849406    48b8341aa52a72780000    mov rax, 0x78722aa51a34                                
0x78722b849410    488b00                  mov rax, [rax]                                         
0x78722b849413    4983c608                add r14, 0x8                                           
0x78722b849417    498906                  mov [r14], rax                                         
 .. BeforeReference 2 =  this this.size @ dump ; 
0x78722b84941a    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b849424    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84942e    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b849431    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b849435    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b849439    4983ee08                sub r14, 0x8                                           
 .. eReference 2 =  this this.size @ dump ; 
0x78722b84943d    c3                      ret                                                    
Word_Disassemble : word - 'tnarr2a' :: codeSize = 198
Word : 0x000078722aa7686c :: Compiled at : 0x000078722b849378
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 112.21 <::

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 tnarr2a

Dump at : namespaces/test/arrayTest.csl : 115.15 :
Dump : Address = 0x000078722b63f210 : Number = 512 :: (little endian dump)
0x000078722b63f210 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f220 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f230 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f240 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f250 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f260 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f270 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f280 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f290 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f2a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f2b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f2c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f2d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f2e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f2f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f300 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f310 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f320 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f330 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f340 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f350 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f360 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f370 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f380 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f390 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f3a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f3b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f3c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f3d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f3e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f3f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f400 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna3 <:> csl compiled word
SourceCode for DLLNodeAlloc.tna3 :> 
: tna3 ( this ) "tna3" ps this.nodes [ 2 ].AfterReference 1 = this.nodes [ 2 ].BeforeReference 2 = this this.size @ dump ; 
Source code file location of tna3 : "namespaces/test/arrayTest.csl" : 119.2 :: we are now at : namespaces/test/arrayTest.csl : 129.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b849443 -- code size = 175 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tna3 : definition = 0x000078722b849443 : disassembly at namespaces/test/arrayTest.csl : 129.9 :
0x78722b849443    4d897e08                mov [r14+0x8], r15                                     
0x78722b849447    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84944b    4981c608000000          add r14, 0x8                                           
0x78722b849452    48b84a2c5e2b72780000    mov rax, 0x78722b5e2c4a       < string : 'tna3' >
0x78722b84945c    4983c608                add r14, 0x8                                           
0x78722b849460    498906                  mov [r14], rax                                         
 ..        : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dum .. 
0x78722b849463    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84946d    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..    : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;  .. 
0x78722b849470    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849474    4881c020000000          add rax, 0x20                                          
0x78722b84947b    b901000000              mov ecx, 0x1                                           
 .. ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b849480    488908                  mov [rax], rcx                                         
 ..  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b849483    498b47f8                mov rax, [r15-0x8]                                     
 .. .AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b849487    4881c028000000          add rax, 0x28                                          
0x78722b84948e    b902000000              mov ecx, 0x2                                           
 .. =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b849493    488908                  mov [rax], rcx                                         
 .. this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b849496    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84949a    4881c000000000          add rax, 0x0                                           
0x78722b8494a1    4983c608                add r14, 0x8                                           
0x78722b8494a5    498906                  mov [r14], rax                                         
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8494a8    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8494ac    4881c000000000          add rax, 0x0                                           
0x78722b8494b3    4983c608                add r14, 0x8                                           
0x78722b8494b7    498906                  mov [r14], rax                                         
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x78722b8494ba    48b8341aa52a72780000    mov rax, 0x78722aa51a34                                
0x78722b8494c4    488b00                  mov rax, [rax]                                         
0x78722b8494c7    4983c608                add r14, 0x8                                           
0x78722b8494cb    498906                  mov [r14], rax                                         
 .. BeforeReference 2 =  this this.size @ dump ; 
0x78722b8494ce    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b8494d8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8494e2    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b8494e5    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8494e9    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8494ed    4983ee08                sub r14, 0x8                                           
 .. eReference 2 =  this this.size @ dump ; 
0x78722b8494f1    c3                      ret                                                    
Word_Disassemble : word - 'tna3' :: codeSize = 175
Word : 0x000078722aa794f4 :: Compiled at : 0x000078722b849443
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 129.9 <::
 tna3
Dump at : namespaces/test/arrayTest.csl : 130.12 :
Dump : Address = 0x000078722b63f410 : Number = 512 :: (little endian dump)
0x000078722b63f410 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f420 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f430 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f440 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f450 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f460 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f470 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f480 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f490 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f500 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f530 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x000078722b63f410 tnarr2

 0x000078722b63f410

Dump at : namespaces/test/arrayTest.csl : 133.14 :
Dump : Address = 0x000078722b63f410 : Number = 512 :: (little endian dump)
0x000078722b63f410 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f420 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f430 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f440 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f450 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f460 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f470 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f480 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f490 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f4f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f500 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f530 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f5f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
DLLNodeAlloc.tnax1 <:> csl compiled word
SourceCode for DLLNodeAlloc.tnax1 :> 
: tnax1 ( this ) this nl hp nl this.nodes[3].AfterReference 1 = this.nodes[4].BeforeReference 2 = this.nodes[3] hp this.nodes[3].AfterReference dup hp 16 dump this.nodes[4] hp this.nodes[4].BeforeReference dup hp 16 dump ; 
Source code file location of tnax1 : "namespaces/test/arrayTest.csl" : 135.2 :: we are now at : namespaces/test/arrayTest.csl : 144.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8494f7 -- code size = 345 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tnax1 : definition = 0x000078722b8494f7 : disassembly at namespaces/test/arrayTest.csl : 144.19 :
0x78722b8494f7    4d897e08                mov [r14+0x8], r15                                     
0x78722b8494fb    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8494ff    4981c608000000          add r14, 0x8                                           
0x78722b849506    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84950a    4881c000000000          add rax, 0x0                                           
0x78722b849511    4983c608                add r14, 0x8                                           
0x78722b849515    498906                  mov [r14], rax                                         
 ..         : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   t .. 
0x78722b849518    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b849522    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84952c    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..      : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this .. 
0x78722b84952f    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849539    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..   : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.no .. 
0x78722b84953c    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b849546    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849550    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
  : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[ .. 
0x78722b849553    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849557    4881c030000000          add rax, 0x30                                          
0x78722b84955e    b901000000              mov ecx, 0x1                                           
 .. hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dum .. 
0x78722b849563    488908                  mov [rax], rcx                                         
 .. nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump   .. 
0x78722b849566    498b47f8                mov rax, [r15-0x8]                                     
 .. [3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4]  .. 
0x78722b84956a    4881c048000000          add rax, 0x48                                          
0x78722b849571    b902000000              mov ecx, 0x2                                           
 ..  1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4] .. 
0x78722b849576    488908                  mov [rax], rcx                                         
 .. =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].Be .. 
0x78722b849579    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84957d    4881c030000000          add rax, 0x30                                          
0x78722b849584    4983c608                add r14, 0x8                                           
0x78722b849588    498906                  mov [r14], rax                                         
 .. 4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference  .. 
0x78722b84958b    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849595    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. foreReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup h .. 
0x78722b849598    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84959c    4881c030000000          add rax, 0x30                                          
0x78722b8495a3    4983c610                add r14, 0x10                                          
0x78722b8495a7    498906                  mov [r14], rax                                         
 .. [3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495aa    498946f8                mov [r14-0x8], rax                                     
 .. hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495ae    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b8495b8    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495bb    b810000000              mov eax, 0x10                                          
0x78722b8495c0    4983c608                add r14, 0x8                                           
0x78722b8495c4    498906                  mov [r14], rax                                         
 .. his.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495c7    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b8495d1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8495db    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 .. des[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495de    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8495e2    4881c040000000          add rax, 0x40                                          
0x78722b8495e9    4983c608                add r14, 0x8                                           
0x78722b8495ed    498906                  mov [r14], rax                                         
 .. ference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495f0    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b8495fa    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. ce dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b8495fd    498b47f8                mov rax, [r15-0x8]                                     
 .. ump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b849601    4881c048000000          add rax, 0x48                                          
0x78722b849608    4983c610                add r14, 0x10                                          
0x78722b84960c    498906                  mov [r14], rax                                         
 .. 4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b84960f    498946f8                mov [r14-0x8], rax                                     
 .. p   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b849613    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b84961d    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..  this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b849620    b810000000              mov eax, 0x10                                          
0x78722b849625    4983c608                add r14, 0x8                                           
0x78722b849629    498906                  mov [r14], rax                                         
 .. is.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b84962c    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b849636    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849640    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b849643    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b849647    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84964b    4983ee08                sub r14, 0x8                                           
 .. des[4].BeforeReference dup hp 16 dump ;  .. 
0x78722b84964f    c3                      ret                                                    
Word_Disassemble : word - 'tnax1' :: codeSize = 345
Word : 0x000078722aa7bc6c :: Compiled at : 0x000078722b8494f7
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 144.19 <::

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 0x000078722b63f610
 0x000078722b63f640 0x000078722b63f640
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x000078722b63f640 : Number = 16 :: (little endian dump)
0x000078722b63f640 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x000078722b63f650 0x000078722b63f658
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x000078722b63f658 : Number = 16 :: (little endian dump)
0x000078722b63f658 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 168.15 : token = class : cloneFlag = 0
 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :> 
: arr2 ( Ar1 a ) a.b1 0x23 = a.c1 0x4567 = a.d1 0x456789 = a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ; 
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 169.2 :: we are now at : namespaces/test/arrayTest.csl : 179.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b849655 -- code size = 227 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr2 : definition = 0x000078722b849655 : disassembly at namespaces/test/arrayTest.csl : 179.18 :
0x78722b849655    4d897e08                mov [r14+0x8], r15                                     
0x78722b849659    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84965d    4981c608000000          add r14, 0x8                                           
0x78722b849664    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849668    4881c000000000          add rax, 0x0                                           
0x78722b84966f    b923000000              mov ecx, 0x23                                          
 ..       : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar .. 
0x78722b849674    488908                  mov [rax], rcx                                         
0x78722b849677    498b47f8                mov rax, [r15-0x8]                                     
 : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup .. 
0x78722b84967b    4881c001000000          add rax, 0x1                                           
0x78722b849682    b967450000              mov ecx, 0x4567                                        
 .. a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p .. 
0x78722b849687    488908                  mov [rax], rcx                                         
0x78722b84968a    498b47f8                mov rax, [r15-0x8]                                     
 ..  a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _a .. 
0x78722b84968e    4881c003000000          add rax, 0x3                                           
0x78722b849695    b989674500              mov ecx, 0x456789                                      
 ..       a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b84969a    488908                  mov [rax], rcx                                         
0x78722b84969d    498b47f8                mov rax, [r15-0x8]                                     
 .. c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496a1    4881c00f000000          add rax, 0xf                                           
 .. 567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496a8    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8496ac    4881c11f000000          add rcx, 0x1f                                          
 .. 7 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496b3    488b09                  mov rcx, [rcx]                                         
 .. a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496b6    488908                  mov [rax], rcx                                         
0x78722b8496b9    498b47f8                mov rax, [r15-0x8]                                     
 .. 6789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496bd    4881c017000000          add rax, 0x17                                          
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496c4    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b8496c8    4881c11f000000          add rcx, 0x1f                                          
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496cf    488b09                  mov rcx, [rcx]                                         
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496d2    488908                  mov [rax], rcx                                         
0x78722b8496d5    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496d9    4881c00f000000          add rax, 0xf                                           
0x78722b8496e0    488b00                  mov rax, [rax]                                         
0x78722b8496e3    4983c610                add r14, 0x10                                          
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496e7    498906                  mov [r14], rax                                         
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496ea    498946f8                mov [r14-0x8], rax                                     
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8496ee    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b8496f8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849702    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b849705    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84970f    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b849712    b889000000              mov eax, 0x89                                          
0x78722b849717    4983c608                add r14, 0x8                                           
0x78722b84971b    498906                  mov [r14], rax                                         
0x78722b84971e    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849728    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b84972b    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84972f    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b849733    4983ee08                sub r14, 0x8                                           
 .. a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b849737    c3                      ret                                                    
Word_Disassemble : word - 'arr2' :: codeSize = 227
Word : 0x000078722aa827a4 :: Compiled at : 0x000078722b849655
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 179.18 <::

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 arr1 :  namespaces/test/arrayTest.csl 181.22
Dump at : namespaces/test/arrayTest.csl : 181.39 :
Dump : Address = 0x000078722b63f810 : Number = 39 :: (little endian dump)
0x000078722b63f810 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f820 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 arr1 :  namespaces/test/arrayTest.csl 186.22
Dump at : namespaces/test/arrayTest.csl : 186.39 :
Dump : Address = 0x000078722b63f810 : Number = 39 :: (little endian dump)
0x000078722b63f810 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f820 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 89  ........ ........ 
0x000078722b63f830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 137
 =============================
Ar1.arr3 <:> csl compiled word
SourceCode for Ar1.arr3 :> 
: arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
Source code file location of arr3 : "namespaces/test/arrayTest.csl" : 191.2 :: we are now at : namespaces/test/arrayTest.csl : 191.99
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84973d -- code size = 167 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr3 : definition = 0x000078722b84973d : disassembly at namespaces/test/arrayTest.csl : 191.99 :
0x78722b84973d    4d897e08                mov [r14+0x8], r15                                     
0x78722b849741    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b849745    4981c608000000          add r14, 0x8                                           
 ..                      : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x78722b84974c    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849750    488b00                  mov rax, [rax]                                         
0x78722b849753    4983c608                add r14, 0x8                                           
0x78722b849757    480fb6c0                movzx rax, al                                          
0x78722b84975b    498906                  mov [r14], rax                                         
 ..              : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x78722b84975e    b823000000              mov eax, 0x23                                          
0x78722b849763    4983c608                add r14, 0x8                                           
0x78722b849767    498906                  mov [r14], rax                                         
0x78722b84976a    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849774    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 .. : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x78722b849777    498b47f8                mov rax, [r15-0x8]                                     
  : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x78722b84977b    4881c001000000          add rax, 0x1                                           
0x78722b849782    488b00                  mov rax, [rax]                                         
0x78722b849785    4983c608                add r14, 0x8                                           
0x78722b849789    480fb7c0                movzx rax, ax                                          
0x78722b84978d    498906                  mov [r14], rax                                         
 .. Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x78722b849790    b867450000              mov eax, 0x4567                                        
0x78722b849795    4983c608                add r14, 0x8                                           
0x78722b849799    498906                  mov [r14], rax                                         
0x78722b84979c    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b8497a6    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 ..  0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x78722b8497a9    498b47f8                mov rax, [r15-0x8]                                     
 .. x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x78722b8497ad    4881c003000000          add rax, 0x3                                           
0x78722b8497b4    488b00                  mov rax, [rax]                                         
0x78722b8497b7    4983c608                add r14, 0x8                                           
0x78722b8497bb    498906                  mov [r14], rax                                         
 .. sert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x78722b8497be    b889674500              mov eax, 0x456789                                      
0x78722b8497c3    4983c608                add r14, 0x8                                           
0x78722b8497c7    498906                  mov [r14], rax                                         
0x78722b8497ca    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b8497d4    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b8497d7    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8497db    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8497df    4983ee08                sub r14, 0x8                                           
 .. 567 _assert a.d1 32@ 0x456789 _assert ; 
0x78722b8497e3    c3                      ret                                                    
Word_Disassemble : word - 'arr3' :: codeSize = 167
Word : 0x000078722aa8794c :: Compiled at : 0x000078722b84973d
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 191.99 <::
 
arr1 :  namespaces/test/arrayTest.csl 192.24
Dump at : namespaces/test/arrayTest.csl : 192.41 :
Dump : Address = 0x000078722b63f810 : Number = 39 :: (little endian dump)
0x000078722b63f810 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........ 
0x000078722b63f820 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........ 
0x000078722b63f830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :> 
: arr2 ( Ar1 a ) a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ; 
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 196.2 :: we are now at : namespaces/test/arrayTest.csl : 204.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8497e9 -- code size = 170 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr2 : definition = 0x000078722b8497e9 : disassembly at namespaces/test/arrayTest.csl : 204.18 :
0x78722b8497e9    4d897e08                mov [r14+0x8], r15                                     
0x78722b8497ed    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8497f1    4981c608000000          add r14, 0x8                                           
0x78722b8497f8    498b47f8                mov rax, [r15-0x8]                                     
 ..         : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b8497fc    4881c00f000000          add rax, 0xf                                           
 ..   : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b849803    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b849807    4881c11f000000          add rcx, 0x1f                                          
 .. : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x78722b84980e    488b09                  mov rcx, [rcx]                                         
 ..  Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849811    488908                  mov [rax], rcx                                         
0x78722b849814    498b47f8                mov rax, [r15-0x8]                                     
 ..            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849818    4881c017000000          add rax, 0x17                                          
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b84981f    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b849823    4881c11f000000          add rcx, 0x1f                                          
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b84982a    488b09                  mov rcx, [rcx]                                         
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b84982d    488908                  mov [rax], rcx                                         
0x78722b849830    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849834    4881c00f000000          add rax, 0xf                                           
0x78722b84983b    488b00                  mov rax, [rax]                                         
0x78722b84983e    4983c610                add r14, 0x10                                          
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849842    498906                  mov [r14], rax                                         
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849845    498946f8                mov [r14-0x8], rax                                     
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849849    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b849853    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84985d    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849860    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84986a    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b84986d    b889000000              mov eax, 0x89                                          
0x78722b849872    4983c608                add r14, 0x8                                           
0x78722b849876    498906                  mov [r14], rax                                         
0x78722b849879    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849883    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b849886    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84988a    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84988e    4983ee08                sub r14, 0x8                                           
 .. a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x78722b849892    c3                      ret                                                    
Word_Disassemble : word - 'arr2' :: codeSize = 170
Word : 0x000078722aa88fac :: Compiled at : 0x000078722b8497e9
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 204.18 <::
 137 
arr1 :  namespaces/test/arrayTest.csl 206.24
Dump at : namespaces/test/arrayTest.csl : 206.41 :
Dump : Address = 0x000078722b63f810 : Number = 39 :: (little endian dump)
0x000078722b63f810 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........ 
0x000078722b63f820 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........ 
0x000078722b63f830 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/arrayTest.csl : 207.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Ar1.a3 <:> csl compiled word
SourceCode for Ar1.a3 :> 
: a3 ( n Ar1 a ) a.ar [n @ 1 +] a.ar[n @ 2 +] @ = a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal a.ar[2] @ dup hp 0x89 _assert decimal ; 
Source code file location of a3 : "namespaces/test/arrayTest.csl" : 208.2 :: we are now at : namespaces/test/arrayTest.csl : 213.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b849898 -- code size = 340 bytes
TypeSignature : 
 -----------------------------
Word :: Ar1.a3 : definition = 0x000078722b849898 : disassembly at namespaces/test/arrayTest.csl : 213.16 :
0x78722b849898    4d897e08                mov [r14+0x8], r15                                     
0x78722b84989c    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8498a0    4981c608000000          add r14, 0x8                                           
0x78722b8498a7    498b47f8                mov rax, [r15-0x8]                                     
 ..               : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup  .. 
0x78722b8498ab    4881c007000000          add rax, 0x7                                           
0x78722b8498b2    4983c608                add r14, 0x8                                           
0x78722b8498b6    498906                  mov [r14], rax                                         
 ..           : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0 .. 
0x78722b8498b9    498b47f0                mov rax, [r15-0x10]                                    
 ..       : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89  .. 
0x78722b8498bd    b901000000              mov ecx, 0x1                                           
0x78722b8498c2    4803c1                  add rax, rcx                                           
0x78722b8498c5    486bc008                imul rax, rax, 0x8                                     
 ..     : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _a .. 
0x78722b8498c9    490106                  add [r14], rax                                         
 ..  : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _asse .. 
0x78722b8498cc    498b47f8                mov rax, [r15-0x8]                                     
   : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert .. 
0x78722b8498d0    4881c007000000          add rax, 0x7                                           
0x78722b8498d7    4983c608                add r14, 0x8                                           
0x78722b8498db    498906                  mov [r14], rax                                         
: a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert de .. 
0x78722b8498de    498b47f0                mov rax, [r15-0x10]                                    
 ..  Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8498e2    b902000000              mov ecx, 0x2                                           
0x78722b8498e7    4803c1                  add rax, rcx                                           
0x78722b8498ea    486bc008                imul rax, rax, 0x8                                     
 .. r1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8498ee    490106                  add [r14], rax                                         
 .. a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8498f1    498b06                  mov rax, [r14]                                         
0x78722b8498f4    488b00                  mov rax, [rax]                                         
0x78722b8498f7    498906                  mov [r14], rax                                         
 .. )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8498fa    498b0e                  mov rcx, [r14]                                         
0x78722b8498fd    498b46f8                mov rax, [r14-0x8]                                     
0x78722b849901    488908                  mov [rax], rcx                                         
0x78722b849904    4983ee10                sub r14, 0x10                                          
0x78722b849908    498b47f8                mov rax, [r15-0x8]                                     
 .. ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84990c    4881c007000000          add rax, 0x7                                           
0x78722b849913    4983c608                add r14, 0x8                                           
0x78722b849917    498906                  mov [r14], rax                                         
 .. n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84991a    498b47f0                mov rax, [r15-0x10]                                    
 .. 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84991e    b901000000              mov ecx, 0x1                                           
0x78722b849923    4803c1                  add rax, rcx                                           
0x78722b849926    486bc008                imul rax, rax, 0x8                                     
 .. +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84992a    490106                  add [r14], rax                                         
 .. a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84992d    498b06                  mov rax, [r14]                                         
0x78722b849930    488b00                  mov rax, [rax]                                         
0x78722b849933    498906                  mov [r14], rax                                         
 .. ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b849936    498b06                  mov rax, [r14]                                         
0x78722b849939    4983c608                add r14, 0x8                                           
0x78722b84993d    498906                  mov [r14], rax                                         
 ..  @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b849940    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b84994a    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84994d    b889000000              mov eax, 0x89                                          
0x78722b849952    4983c608                add r14, 0x8                                           
0x78722b849956    498906                  mov [r14], rax                                         
0x78722b849959    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849963    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 ..  a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b849966    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b849970    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84997a    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
0x78722b84997d    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b849981    4881c017000000          add rax, 0x17                                          
0x78722b849988    4983c608                add r14, 0x8                                           
0x78722b84998c    498906                  mov [r14], rax                                         
 .. p hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b84998f    498b06                  mov rax, [r14]                                         
0x78722b849992    488b00                  mov rax, [rax]                                         
0x78722b849995    498906                  mov [r14], rax                                         
 .. hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b849998    498b06                  mov rax, [r14]                                         
0x78722b84999b    4983c608                add r14, 0x8                                           
0x78722b84999f    498906                  mov [r14], rax                                         
 .. x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8499a2    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b8499ac    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..  _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8499af    b889000000              mov eax, 0x89                                          
0x78722b8499b4    4983c608                add r14, 0x8                                           
0x78722b8499b8    498906                  mov [r14], rax                                         
0x78722b8499bb    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b8499c5    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 .. mal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8499c8    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b8499d2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8499dc    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
0x78722b8499df    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8499e3    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8499e7    4983ee10                sub r14, 0x10                                          
 .. a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x78722b8499eb    c3                      ret                                                    
Word_Disassemble : word - 'a3' :: codeSize = 340
Word : 0x000078722aa8ccdc :: Compiled at : 0x000078722b849898
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 213.16 <::
 0x0000000000000089 0x0000000000000089
_ClassTypedef : at namespaces/test/arrayTest.csl : 217.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 219.20
Dump at : namespaces/test/arrayTest.csl : 219.35 :
Dump : Address = 0x000078722b63f837 : Number = 128 :: (little endian dump)
0x000078722b63f837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f887 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8a7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's a4 :  namespaces/test/arrayTest.csl 222.20
Dump at : namespaces/test/arrayTest.csl : 222.35 :
Dump : Address = 0x000078722b63f837 : Number = 128 :: (little endian dump)
0x000078722b63f837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f887 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's with one 0x89 - can you find it?
 =============================
Ar2.a5 <:> csl compiled word
SourceCode for Ar2.a5 :> 
: a5 ( n m Ar2 a ) a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ = nl "a4 : " ps location a a.size @ dump a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert ; 
Source code file location of a5 : "namespaces/test/arrayTest.csl" : 224.2 :: we are now at : namespaces/test/arrayTest.csl : 229.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8499f1 -- code size = 397 bytes
TypeSignature : 
 -----------------------------
Word :: Ar2.a5 : definition = 0x000078722b8499f1 : disassembly at namespaces/test/arrayTest.csl : 229.16 :
0x78722b8499f1    4d897e08                mov [r14+0x8], r15                                     
0x78722b8499f5    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8499f9    4981c608000000          add r14, 0x8                                           
0x78722b849a00    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849a04    4881c000000000          add rax, 0x0                                           
0x78722b849a0b    4983c608                add r14, 0x8                                           
0x78722b849a0f    498906                  mov [r14], rax                                         
 ..          : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][ .. 
0x78722b849a12    498b47e8                mov rax, [r15-0x18]                                    
 ..      : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] .. 
0x78722b849a16    b901000000              mov ecx, 0x1                                           
0x78722b849a1b    4803c1                  add rax, rcx                                           
0x78722b849a1e    486bc020                imul rax, rax, 0x20                                    
 ..    : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ .. 
0x78722b849a22    490106                  add [r14], rax                                         
 .. : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ du .. 
0x78722b849a25    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849a29    486bc008                imul rax, rax, 0x8                                     
  : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup  .. 
0x78722b849a2d    490106                  add [r14], rax                                         
 .. ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp  .. 
0x78722b849a30    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849a34    4881c000000000          add rax, 0x0                                           
0x78722b849a3b    4983c608                add r14, 0x8                                           
0x78722b849a3f    498906                  mov [r14], rax                                         
 ..  Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89  .. 
0x78722b849a42    498b47e8                mov rax, [r15-0x18]                                    
 ..  a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _ass .. 
0x78722b849a46    b902000000              mov ecx, 0x2                                           
0x78722b849a4b    4803c1                  add rax, rcx                                           
0x78722b849a4e    486bc020                imul rax, rax, 0x20                                    
 ..  )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _asser .. 
0x78722b849a52    490106                  add [r14], rax                                         
 ..      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert   .. 
0x78722b849a55    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849a59    486bc008                imul rax, rax, 0x8                                     
 ..    a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849a5d    490106                  add [r14], rax                                         
 .. a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849a60    498b06                  mov rax, [r14]                                         
0x78722b849a63    488b00                  mov rax, [rax]                                         
0x78722b849a66    498906                  mov [r14], rax                                         
 .. ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849a69    498b0e                  mov rcx, [r14]                                         
0x78722b849a6c    498b46f8                mov rax, [r14-0x8]                                     
0x78722b849a70    488908                  mov [rax], rcx                                         
0x78722b849a73    4983ee10                sub r14, 0x10                                          
0x78722b849a77    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b849a81    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849a8b    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. ][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849a8e    48b82f335e2b72780000    mov rax, 0x78722b5e332f       < string : 'a4 : ' >
0x78722b849a98    4983c608                add r14, 0x8                                           
0x78722b849a9c    498906                  mov [r14], rax                                         
 .. .ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849a9f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b849aa9    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. [n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849aac    49badd0e842b72780000    mov r10, 0x78722b840edd                                
0x78722b849ab6    49ffd2                  call r10                      < System.location : 0x000078722b840edd >
 .. [m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849ab9    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849abd    4881c000000000          add rax, 0x0                                           
0x78722b849ac4    4983c608                add r14, 0x8                                           
0x78722b849ac8    498906                  mov [r14], rax                                         
 ..  @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849acb    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849acf    4881c000000000          add rax, 0x0                                           
0x78722b849ad6    4983c608                add r14, 0x8                                           
0x78722b849ada    498906                  mov [r14], rax                                         
 .. ] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849add    48b8340ea92a72780000    mov rax, 0x78722aa90e34                                
0x78722b849ae7    488b00                  mov rax, [rax]                                         
0x78722b849aea    4983c608                add r14, 0x8                                           
0x78722b849aee    498906                  mov [r14], rax                                         
 ..     nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849af1    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b849afb    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849b05    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b849b08    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849b0c    4881c000000000          add rax, 0x0                                           
0x78722b849b13    4983c608                add r14, 0x8                                           
0x78722b849b17    498906                  mov [r14], rax                                         
 ..  ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b1a    498b47e8                mov rax, [r15-0x18]                                    
 .. location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b1e    b901000000              mov ecx, 0x1                                           
0x78722b849b23    4803c1                  add rax, rcx                                           
0x78722b849b26    486bc020                imul rax, rax, 0x20                                    
 .. cation a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b2a    490106                  add [r14], rax                                         
 .. ion a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b2d    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849b31    486bc008                imul rax, rax, 0x8                                     
 .. n a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b35    490106                  add [r14], rax                                         
 ..  a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b38    498b06                  mov rax, [r14]                                         
0x78722b849b3b    488b00                  mov rax, [rax]                                         
0x78722b849b3e    498906                  mov [r14], rax                                         
 .. .size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b41    498b06                  mov rax, [r14]                                         
0x78722b849b44    4983c608                add r14, 0x8                                           
0x78722b849b48    498906                  mov [r14], rax                                         
 .. e @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b4b    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849b55    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..  dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b58    b889000000              mov eax, 0x89                                          
0x78722b849b5d    4983c608                add r14, 0x8                                           
0x78722b849b61    498906                  mov [r14], rax                                         
0x78722b849b64    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849b6e    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b849b71    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b849b75    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b849b79    4983ee18                sub r14, 0x18                                          
 .. [n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x78722b849b7d    c3                      ret                                                    
Word_Disassemble : word - 'a5' :: codeSize = 397
Word : 0x000078722aa9180c :: Compiled at : 0x000078722b8499f1
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 229.16 <::

 a4 :  namespaces/test/arrayTest.csl 231.10
Dump at : namespaces/test/arrayTest.csl : 231.10 :
Dump : Address = 0x000078722b63f837 : Number = 128 :: (little endian dump)
0x000078722b63f837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f887 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 231.12 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 232.20
Dump at : namespaces/test/arrayTest.csl : 232.32 :
Dump : Address = 0x000078722b63f837 : Number = 128 :: (little endian dump)
0x000078722b63f837 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f847 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f857 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f867 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f877 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f887 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f897 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's with one 0x89 - can you find it?
_ClassTypedef : at namespaces/test/arrayTest.csl : 234.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 235.11 :
DataStack depth =   4 : Dsp (R14) = Top = 0x000078722c065ad0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad0 > = 0x000078722b5e34d6       < string : 'a6' >
  DataStack   [  -1 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 0x000078722b63f97f 0x000078722b63f97f 0x0000000000000089 0x000078722b63f97f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 243.20
Dump at : namespaces/test/arrayTest.csl : 243.38 :
Dump : Address = 0x000078722b63f8b7 : Number = 144 :: (little endian dump)
0x000078722b63f8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 0x000078722b63f97f 0x000078722b63f97f 0x0000000000000089
 0x000078722b63f937
DataStack at : namespaces/test/arrayTest.csl : 247.42 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x000078722b63f97f
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x000078722b63f937
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005
 0x000078722b63f97f 0x000078722b63f97f 0x0000000000000089
 a6 :  namespaces/test/arrayTest.csl 250.23
Dump at : namespaces/test/arrayTest.csl : 250.38 :
Dump : Address = 0x000078722b63f8b7 : Number = 144 :: (little endian dump)
0x000078722b63f8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 137 0x000078722b63f97f 0x0000000000000089 0x000078722b63f937 0x0000000000000089 0x000078722b63f937 0x0000000000000089 0x000078722b63f937 0x0000000000000000
 a6 :  namespaces/test/arrayTest.csl 258.23
Dump at : namespaces/test/arrayTest.csl : 258.43 :
Dump : Address = 0x000078722b63f92f : Number = 16 :: (little endian dump)
0x000078722b63f92f :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar3.a8 <:> csl compiled word
SourceCode for Ar3.a8 :> 
: a8 ( Ar3 a ) a.ar[1][2][1] a.ar[2][2][1] @ = nl "a8.a : " ps location a size @ dump a.ar[1][2][1] dup hp @ dup hp 0x89 _assert a.ar[2][2][1] dup hp @ dup hp 0x89 _assert ; 
Source code file location of a8 : "namespaces/test/arrayTest.csl" : 260.2 :: we are now at : namespaces/test/arrayTest.csl : 271.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b849b83 -- code size = 367 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar3.a8 : definition = 0x000078722b849b83 : disassembly at namespaces/test/arrayTest.csl : 271.16 :
0x78722b849b83    4d897e08                mov [r14+0x8], r15                                     
0x78722b849b87    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b849b8b    4981c608000000          add r14, 0x8                                           
0x78722b849b92    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849b96    4881c080000000          add rax, 0x80                                          
 ..     : a8 ( Ar3 a )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x8 .. 
0x78722b849b9d    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b849ba1    4881c1c8000000          add rcx, 0xc8                                          
0x78722b849ba8    488b09                  mov rcx, [rcx]                                         
 ..  )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a .. 
0x78722b849bab    488908                  mov [rax], rcx                                         
0x78722b849bae    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b849bb8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849bc2    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][ .. 
0x78722b849bc5    48b8d1355e2b72780000    mov rax, 0x78722b5e35d1       < string : 'a8.a : ' >
0x78722b849bcf    4983c608                add r14, 0x8                                           
0x78722b849bd3    498906                  mov [r14], rax                                         
 .. ] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp  .. 
0x78722b849bd6    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b849be0    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. .ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ d .. 
0x78722b849be3    49badd0e842b72780000    mov r10, 0x78722b840edd                                
0x78722b849bed    49ffd2                  call r10                      < System.location : 0x000078722b840edd >
 .. [1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x8 .. 
0x78722b849bf0    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849bf4    4881c000000000          add rax, 0x0                                           
0x78722b849bfb    4983c608                add r14, 0x8                                           
0x78722b849bff    498906                  mov [r14], rax                                         
 .. ] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89  .. 
0x78722b849c02    48b8d461a92a72780000    mov rax, 0x78722aa961d4                                
0x78722b849c0c    488b00                  mov rax, [rax]                                         
0x78722b849c0f    4983c608                add r14, 0x8                                           
0x78722b849c13    498906                  mov [r14], rax                                         
 ..     nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert .. 
0x78722b849c16    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b849c20    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849c2a    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b849c2d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849c31    4881c080000000          add rax, 0x80                                          
0x78722b849c38    4983c610                add r14, 0x10                                          
0x78722b849c3c    498906                  mov [r14], rax                                         
 .. ation a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c3f    498946f8                mov [r14-0x8], rax                                     
 .. n a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c43    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849c4d    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..  size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c50    498b06                  mov rax, [r14]                                         
0x78722b849c53    488b00                  mov rax, [rax]                                         
0x78722b849c56    498906                  mov [r14], rax                                         
 .. ize @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c59    498b06                  mov rax, [r14]                                         
0x78722b849c5c    4983c608                add r14, 0x8                                           
0x78722b849c60    498906                  mov [r14], rax                                         
 .. @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c63    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849c6d    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. ump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c70    b889000000              mov eax, 0x89                                          
0x78722b849c75    4983c608                add r14, 0x8                                           
0x78722b849c79    498906                  mov [r14], rax                                         
0x78722b849c7c    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849c86    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b849c89    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849c8d    4881c0c8000000          add rax, 0xc8                                          
0x78722b849c94    4983c610                add r14, 0x10                                          
0x78722b849c98    498906                  mov [r14], rax                                         
 .. up hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c9b    498946f8                mov [r14-0x8], rax                                     
 .. p 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849c9f    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849ca9    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849cac    498b06                  mov rax, [r14]                                         
0x78722b849caf    488b00                  mov rax, [rax]                                         
0x78722b849cb2    498906                  mov [r14], rax                                         
 .. 9 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849cb5    498b06                  mov rax, [r14]                                         
0x78722b849cb8    4983c608                add r14, 0x8                                           
0x78722b849cbc    498906                  mov [r14], rax                                         
 .. ssert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849cbf    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849cc9    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. rt      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849ccc    b889000000              mov eax, 0x89                                          
0x78722b849cd1    4983c608                add r14, 0x8                                           
0x78722b849cd5    498906                  mov [r14], rax                                         
0x78722b849cd8    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849ce2    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b849ce5    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b849ce9    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b849ced    4983ee08                sub r14, 0x8                                           
 .. ][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x78722b849cf1    c3                      ret                                                    
Word_Disassemble : word - 'a8' :: codeSize = 367
Word : 0x000078722aa9aa24 :: Compiled at : 0x000078722b849b83
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 271.16 <::
 0x000078722b63f97f 137 a6 :  namespaces/test/arrayTest.csl 274.20
Dump at : namespaces/test/arrayTest.csl : 274.43 :
Dump : Address = 0x000078722b63f97f : Number = 16 :: (little endian dump)
0x000078722b63f97f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 a8.a :  namespaces/test/arrayTest.csl 275.6
Dump at : namespaces/test/arrayTest.csl : 275.6 :
Dump : Address = 0x000078722b63f8b7 : Number = 144 :: (little endian dump)
0x000078722b63f8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x000078722b63f937 0x0000000000000089 0x000078722b63f97f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 276.20
Dump at : namespaces/test/arrayTest.csl : 276.43 :
Dump : Address = 0x000078722b63f97f : Number = 16 :: (little endian dump)
0x000078722b63f97f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar3.a7 <:> csl compiled word, prefix
SourceCode for Ar3.a7 :> 
: a7 ( n, m, o, Ar3 a ) a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ = nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;; 
Source code file location of a7 : "namespaces/test/arrayTest.csl" : 277.2 :: we are now at : namespaces/test/arrayTest.csl : 283.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b849cf7 -- code size = 468 bytes
TypeSignature : 
 -----------------------------
Word :: Ar3.a7 : definition = 0x000078722b849cf7 : disassembly at namespaces/test/arrayTest.csl : 283.16 :
0x78722b849cf7    4d897e08                mov [r14+0x8], r15                                     
0x78722b849cfb    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b849cff    4981c608000000          add r14, 0x8                                           
0x78722b849d06    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849d0a    4881c000000000          add rax, 0x0                                           
0x78722b849d11    4983c608                add r14, 0x8                                           
0x78722b849d15    498906                  mov [r14], rax                                         
 ..     : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @ .. 
0x78722b849d18    498b47e0                mov rax, [r15-0x20]                                    
 .. : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 .. 
0x78722b849d1c    b901000000              mov ecx, 0x1                                           
0x78722b849d21    4803c1                  add rax, rcx                                           
0x78722b849d24    486bc048                imul rax, rax, 0x48                                    
  : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 d .. 
0x78722b849d28    490106                  add [r14], rax                                         
 .. ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump .. 
0x78722b849d2b    498b47e8                mov rax, [r15-0x18]                                    
0x78722b849d2f    486bc018                imul rax, rax, 0x18                                    
 .. n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump   .. 
0x78722b849d33    490106                  add [r14], rax                                         
 .. m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump      .. 
0x78722b849d36    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849d3a    486bc008                imul rax, rax, 0x8                                     
 ..  o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        .. 
0x78722b849d3e    490106                  add [r14], rax                                         
 ..  Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a. .. 
0x78722b849d41    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849d45    4881c000000000          add rax, 0x0                                           
0x78722b849d4c    4983c608                add r14, 0x8                                           
0x78722b849d50    498906                  mov [r14], rax                                         
 .. a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n  .. 
0x78722b849d53    498b47e0                mov rax, [r15-0x20]                                    
 ..      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1  .. 
0x78722b849d57    b902000000              mov ecx, 0x2                                           
0x78722b849d5c    4803c1                  add rax, rcx                                           
0x78722b849d5f    486bc048                imul rax, rax, 0x48                                    
 ..    a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +] .. 
0x78722b849d63    490106                  add [r14], rax                                         
 .. a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m  .. 
0x78722b849d66    498b47e8                mov rax, [r15-0x18]                                    
0x78722b849d6a    486bc018                imul rax, rax, 0x18                                    
 .. ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @] .. 
0x78722b849d6e    490106                  add [r14], rax                                         
 .. n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o  .. 
0x78722b849d71    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849d75    486bc008                imul rax, rax, 0x8                                     
 .. @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] .. 
0x78722b849d79    490106                  add [r14], rax                                         
 ..  +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @  .. 
0x78722b849d7c    498b06                  mov rax, [r14]                                         
0x78722b849d7f    488b00                  mov rax, [rax]                                         
0x78722b849d82    498906                  mov [r14], rax                                         
 .. ][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ du .. 
0x78722b849d85    498b0e                  mov rcx, [r14]                                         
0x78722b849d88    498b46f8                mov rax, [r14-0x8]                                     
0x78722b849d8c    488908                  mov [rax], rcx                                         
0x78722b849d8f    4983ee10                sub r14, 0x10                                          
0x78722b849d93    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b849d9d    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849da7    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. ] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89  .. 
0x78722b849daa    48b829375e2b72780000    mov rax, 0x78722b5e3729       < string : 'a7.a : ' >
0x78722b849db4    4983c608                add r14, 0x8                                           
0x78722b849db8    498906                  mov [r14], rax                                         
 ..  2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert; .. 
0x78722b849dbb    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b849dc5    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849dc8    49badd0e842b72780000    mov r10, 0x78722b840edd                                
0x78722b849dd2    49ffd2                  call r10                      < System.location : 0x000078722b840edd >
 ..  @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849dd5    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849dd9    4881c000000000          add rax, 0x0                                           
0x78722b849de0    4983c608                add r14, 0x8                                           
0x78722b849de4    498906                  mov [r14], rax                                         
 ..  =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849de7    498b47e0                mov rax, [r15-0x20]                                    
 ..     nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849deb    b901000000              mov ecx, 0x1                                           
0x78722b849df0    4803c1                  add rax, rcx                                           
0x78722b849df3    486bc048                imul rax, rax, 0x48                                    
 ..   nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849df7    490106                  add [r14], rax                                         
 .. l "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849dfa    498b47e8                mov rax, [r15-0x18]                                    
0x78722b849dfe    486bc018                imul rax, rax, 0x18                                    
 .. "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e02    490106                  add [r14], rax                                         
 .. .a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e05    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849e09    486bc008                imul rax, rax, 0x8                                     
 ..  : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e0d    490106                  add [r14], rax                                         
 .. " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e10    b810000000              mov eax, 0x10                                          
0x78722b849e15    4983c608                add r14, 0x8                                           
0x78722b849e19    498906                  mov [r14], rax                                         
 .. s location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e1c    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b849e26    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849e30    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b849e33    498b47f8                mov rax, [r15-0x8]                                     
0x78722b849e37    4881c000000000          add rax, 0x0                                           
0x78722b849e3e    4983c608                add r14, 0x8                                           
0x78722b849e42    498906                  mov [r14], rax                                         
 ..  @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e45    498b47e0                mov rax, [r15-0x20]                                    
 ..  +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e49    b901000000              mov ecx, 0x1                                           
0x78722b849e4e    4803c1                  add rax, rcx                                           
0x78722b849e51    486bc048                imul rax, rax, 0x48                                    
 .. ][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e55    490106                  add [r14], rax                                         
 ..  @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e58    498b47e8                mov rax, [r15-0x18]                                    
0x78722b849e5c    486bc018                imul rax, rax, 0x18                                    
 .. ][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e60    490106                  add [r14], rax                                         
 ..  @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e63    498b47f0                mov rax, [r15-0x10]                                    
0x78722b849e67    486bc008                imul rax, rax, 0x8                                     
 .. ] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e6b    490106                  add [r14], rax                                         
 .. 6 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e6e    498b06                  mov rax, [r14]                                         
0x78722b849e71    488b00                  mov rax, [rax]                                         
0x78722b849e74    498906                  mov [r14], rax                                         
 .. dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e77    498b06                  mov rax, [r14]                                         
0x78722b849e7a    4983c608                add r14, 0x8                                           
0x78722b849e7e    498906                  mov [r14], rax                                         
 ..         a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e81    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b849e8b    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..      a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e8e    b889000000              mov eax, 0x89                                          
0x78722b849e93    4983c608                add r14, 0x8                                           
0x78722b849e97    498906                  mov [r14], rax                                         
 .. a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849e9a    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b849ea4    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b849eae    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
0x78722b849eb1    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b849ebb    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b849ebe    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b849ec2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b849ec6    4983ee20                sub r14, 0x20                                          
 .. 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x78722b849eca    c3                      ret                                                    
Word_Disassemble : word - 'a7' :: codeSize = 468
Word : 0x000078722aaa0e24 :: Compiled at : 0x000078722b849cf7
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 283.16 <::
 a6 :  namespaces/test/arrayTest.csl 285.20
Dump at : namespaces/test/arrayTest.csl : 285.43 :
Dump : Address = 0x000078722b63f97f : Number = 16 :: (little endian dump)
0x000078722b63f97f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 a7.a :  namespaces/test/arrayTest.csl 287.12
Dump at : namespaces/test/arrayTest.csl : 287.12 :
Dump : Address = 0x000078722b63f937 : Number = 16 :: (little endian dump)
0x000078722b63f937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 287.12 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000078722c065b00, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b00 > = 0x0000000000000089
  DataStack   [  -1 ] < 0x000078722c065af8 > = 0x0000000000000089
  DataStack   [  -2 ] < 0x000078722c065af0 > = 0x000060c889f6dbf0
  DataStack   [  -3 ] < 0x000078722c065ae8 > = 0x000078722b63f8b7
  DataStack   [  -4 ] < 0x000078722c065ae0 > = 0x0000000000000001
  DataStack   [  -5 ] < 0x000078722c065ad8 > = 0x0000000000000002
  DataStack   [  -6 ] < 0x000078722c065ad0 > = 0x0000000000000000
  DataStack   [  -7 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000078722c065ab8 > = 0x0000000000000005
 a6 :  namespaces/test/arrayTest.csl 288.20
Dump at : namespaces/test/arrayTest.csl : 288.38 :
Dump : Address = 0x000078722b63f8b7 : Number = 144 :: (little endian dump)
0x000078722b63f8b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f8f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f907 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f917 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f927 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722b63f937 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 289.15 : token = class : cloneFlag = 0
_ClassTypedef : at namespaces/test/arrayTest.csl : 307.16 : token = class : cloneFlag = 0
 =============================
Ar9.a9 <:> csl compiled word
SourceCode for Ar9.a9 :> 
: a9 ( Ar9 ar9 | d x y z ) x 0 = y 0 = z 0 = d ar9.dimSize @ = { z @ d @ < } { { y @ d @ < } { { x @ d @ < } { ar9.ar [z @][y @][x @ ] x @ = x ++ } while x 0 = y ++ } while x 0 = y 0 = z ++ } while oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67]) a9dump ( 0 246 67 ar9 ) ; 
Source code file location of a9 : "namespaces/test/arrayTest.csl" : 324.2 :: we are now at : namespaces/test/arrayTest.csl : 355.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84a3d2 -- code size = 376 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar9.a9 : definition = 0x000078722b84a3d2 : disassembly at namespaces/test/arrayTest.csl : 355.16 :
0x78722b84a3d2    4d897e08                mov [r14+0x8], r15                                     
0x78722b84a3d6    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84a3da    4981c628000000          add r14, 0x28                                          
 ..   : a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             .. 
0x78722b84a3e1    49c7471000000000        mov qword [r15+0x10], 0x0                              
: a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ .. 
0x78722b84a3e9    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..  ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < .. 
0x78722b84a3f1    49c7472000000000        mov qword [r15+0x20], 0x0                              
 .. r9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < } .. 
0x78722b84a3f9    498d4708                lea rax, [r15+0x8]                                     
 ..  | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }   .. 
0x78722b84a3fd    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b84a401    488b09                  mov rcx, [rcx]                                         
 ..     x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {   .. 
0x78722b84a404    488908                  mov [rax], rcx                                         
 .. = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {           .. 
0x78722b84a407    498b4720                mov rax, [r15+0x20]                                    
 .. 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {               .. 
0x78722b84a40b    498b4f08                mov rcx, [r15+0x8]                                     
 .. z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 a .. 
0x78722b84a40f    483bc1                  cmp rax, rcx                                           
 .. 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9 .. 
0x78722b84a412    0f8dae000000            jge 0x78722b84a4c6            < Ar9.a9+244 >
 .. @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ .. 
0x78722b84a418    498b4718                mov rax, [r15+0x18]                                    
 ..     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x .. 
0x78722b84a41c    498b4f08                mov rcx, [r15+0x8]                                     
 .. { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ = .. 
0x78722b84a420    483bc1                  cmp rax, rcx                                           
 .. z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =   .. 
0x78722b84a423    0f8d84000000            jge 0x78722b84a4ad            < Ar9.a9+219 >
 .. { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++        .. 
0x78722b84a429    498b4710                mov rax, [r15+0x10]                                    
 .. @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++            .. 
0x78722b84a42d    498b4f08                mov rcx, [r15+0x8]                                     
 .. @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++                .. 
0x78722b84a431    483bc1                  cmp rax, rcx                                           
 .. < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }  .. 
0x78722b84a434    7d66                    jge 0x2b84a49c                < Ar9.a9+202 >
0x78722b84a436    0f1f4000                nop [rax]                                              
0x78722b84a43a    498b47f8                mov rax, [r15-0x8]                                     
 .. < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 = .. 
0x78722b84a43e    4881c008000000          add rax, 0x8                                           
0x78722b84a445    4983c608                add r14, 0x8                                           
0x78722b84a449    498906                  mov [r14], rax                                         
 ..             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =     .. 
0x78722b84a44c    498b4720                mov rax, [r15+0x20]                                    
0x78722b84a450    4869c000000100          imul rax, rax, 0x10000                                 
 ..           {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =       .. 
0x78722b84a457    490106                  add [r14], rax                                         
 ..        {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =          .. 
0x78722b84a45a    498b4718                mov rax, [r15+0x18]                                    
0x78722b84a45e    4869c000010000          imul rax, rax, 0x100                                   
 ..      {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =            .. 
0x78722b84a465    490106                  add [r14], rax                                         
 ..   {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =               .. 
0x78722b84a468    498b4710                mov rax, [r15+0x10]                                    
 .. {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                 .. 
0x78722b84a46c    490106                  add [r14], rax                                         
 ..               ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                     .. 
0x78722b84a46f    498d4710                lea rax, [r15+0x10]                                    
0x78722b84a473    488b00                  mov rax, [rax]                                         
0x78722b84a476    4983c608                add r14, 0x8                                           
 ..             ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                       .. 
0x78722b84a47a    498906                  mov [r14], rax                                         
 ..           ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                         .. 
0x78722b84a47d    498b0e                  mov rcx, [r14]                                         
0x78722b84a480    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84a484    488908                  mov [rax], rcx                                         
0x78722b84a487    4983ee10                sub r14, 0x10                                          
 .. @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                        y ++          }      .. 
0x78722b84a48b    49ff4710                inc qword [r15+0x10]                                   
0x78722b84a48f    498b4710                mov rax, [r15+0x10]                                    
0x78722b84a493    498b4f08                mov rcx, [r15+0x8]                                     
0x78722b84a497    483bc1                  cmp rax, rcx                                           
0x78722b84a49a    7c9e                    jl 0x2b84a43a                 < Ar9.a9+104 >
 ..  }             while              x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     .. 
0x78722b84a49c    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..        x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     }     while     oPrintf (  .. 
0x78722b84a4a4    49ff4718                inc qword [r15+0x18]                                   
0x78722b84a4a8    e96bffffff              jmp 0x78722b84a418            < Ar9.a9+70 >
 ..           }         while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][ .. 
0x78722b84a4ad    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..       while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      .. 
0x78722b84a4b5    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0  .. 
0x78722b84a4bd    49ff4720                inc qword [r15+0x20]                                   
0x78722b84a4c1    e941ffffff              jmp 0x78722b84a407            < Ar9.a9+53 >
 ..    z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a4c6    48b8e203932a72780000    mov rax, 0x78722a9303e2                                
0x78722b84a4d0    488bf8                  mov rdi, rax                                           
 .. rintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a4d3    498b47f8                mov rax, [r15-0x8]                                     
 .. f ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a4d7    4881c008003901          add rax, 0x1390008                                     
0x78722b84a4de    488bc8                  mov rcx, rax                                           
 ..  0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a4e1    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b84a4eb    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84a4f5    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. x", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a4f8    48c7c000000000          mov rax, 0x0                                           
0x78722b84a4ff    4983c608                add r14, 0x8                                           
0x78722b84a503    498906                  mov [r14], rax                                         
 .. , ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a506    b8f6000000              mov eax, 0xf6                                          
0x78722b84a50b    4983c608                add r14, 0x8                                           
0x78722b84a50f    498906                  mov [r14], rax                                         
 .. 9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a512    b843000000              mov eax, 0x43                                          
0x78722b84a517    4983c608                add r14, 0x8                                           
0x78722b84a51b    498906                  mov [r14], rax                                         
 .. r[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a51e    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a522    4881c000000000          add rax, 0x0                                           
0x78722b84a529    4983c608                add r14, 0x8                                           
0x78722b84a52d    498906                  mov [r14], rax                                         
 .. [67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a530    49ba1e9f842b72780000    mov r10, 0x78722b849f1e                                
0x78722b84a53a    49ffd2                  call r10                      < Ar9.a9dump : 0x000078722b849f1e >
0x78722b84a53d    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84a541    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84a545    4983ee08                sub r14, 0x8                                           
 .. 46][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x78722b84a549    c3                      ret                                                    
Word_Disassemble : word - 'a9' :: codeSize = 376
Word : 0x000078722aab3e94 :: Compiled at : 0x000078722b84a3d2
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 355.16 <::

DataStack at : namespaces/test/arrayTest.csl : 355.18 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 256
ar9.ar[0][246][67] = 0
 Ar9 :  namespaces/test/arrayTest.csl 360.8 : x = 0 y = 246 z = 67
 dimSize = 256
 a = 0x00007872298001a8 : a.ar = 0x00007872298001b0

Dump at : namespaces/test/arrayTest.csl : 360.8 :
Dump : Address = 0x0000787229c3f7b0 : Number = 256 :: (little endian dump)
0x0000787229c3f7b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x0000787229c3f7c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x0000787229c3f7d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x0000787229c3f7e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x0000787229c3f7f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x0000787229c3f800 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x0000787229c3f810 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x0000787229c3f820 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x0000787229c3f830 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x0000787229c3f840 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x0000787229c3f850 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x0000787229c3f860 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x0000787229c3f870 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x0000787229c3f880 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x0000787229c3f890 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x0000787229c3f8a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

 Ar9 :  namespaces/test/arrayTest.csl 361.25 : x = 0 y = 123 z = 234
 dimSize = 256
 a = 0x00007872298001a8 : a.ar = 0x00007872298001b0

Dump at : namespaces/test/arrayTest.csl : 361.25 :
Dump : Address = 0x000078722a6a7cb0 : Number = 256 :: (little endian dump)
0x000078722a6a7cb0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x000078722a6a7cc0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x000078722a6a7cd0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x000078722a6a7ce0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x000078722a6a7cf0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x000078722a6a7d00 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x000078722a6a7d10 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x000078722a6a7d20 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x000078722a6a7d30 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x000078722a6a7d40 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x000078722a6a7d50 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x000078722a6a7d60 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x000078722a6a7d70 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x000078722a6a7d80 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x000078722a6a7d90 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x000078722a6a7da0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 364.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 0x00007872286001a8 0x00007872286001a9 0x00007872286001b1 26 254
DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 0x00007872286001e6
 0x00007872286001de

 -----------------------------
 array out of bounds checking with variables?! namespaces/test/arrayTest.csl 386.9
 -----------------------------


Dump at : namespaces/test/arrayTest.csl : 386.9 :
Dump : Address = 0x00007872286001c3 : Number = 32 :: (little endian dump)
0x00007872286001c3 :  77 00 00 00 00 00 77 00  00 00 00 00 00 00 00 00  w.....w. ........ 
0x00007872286001d3 :  00 00 00 00 00 00 00 00  77 00 00 77 00 00 00 00  ........ w..w.... 

 =============================
ct0.tct <:> csl compiled word
SourceCode for ct0.tct :> 
: tct ( y ct0 a ) a.ar [0][0][0] 0x77 = a.ar [0][y @][0] a.ar [0][0][0] @ = a.ar [y @][y @][0] a.ar [0][0][0] @ = a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ = a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ = TODO ( "array out of bounds checking with variables?!" ) a.ar 32 dump a.ar [1][2][2] 7 = a.ar [1][2][2] @ 7 _assert ; 
Source code file location of tct : "namespaces/test/arrayTest.csl" : 373.2 :: we are now at : namespaces/test/arrayTest.csl : 387.16
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84a54f -- code size = 630 bytes
TypeSignature : 
 -----------------------------
Word :: ct0.tct : definition = 0x000078722b84a54f : disassembly at namespaces/test/arrayTest.csl : 387.16 :
0x78722b84a54f    4d897e08                mov [r14+0x8], r15                                     
0x78722b84a553    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84a557    4981c608000000          add r14, 0x8                                           
0x78722b84a55e    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a562    4881c000000000          add rax, 0x0                                           
0x78722b84a569    b977000000              mov ecx, 0x77                                          
: tct ( y ct0 a )     a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @  .. 
0x78722b84a56e    488908                  mov [rax], rcx                                         
0x78722b84a571    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a575    4881c000000000          add rax, 0x0                                           
0x78722b84a57c    4983c608                add r14, 0x8                                           
0x78722b84a580    498906                  mov [r14], rax                                         
 ..   a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] d .. 
0x78722b84a583    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84a587    486bc003                imul rax, rax, 0x3                                     
 .. a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup .. 
0x78722b84a58b    490106                  add [r14], rax                                         
 .. 0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp .. 
0x78722b84a58e    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a592    4881c000000000          add rax, 0x0                                           
0x78722b84a599    4983c608                add r14, 0x8                                           
0x78722b84a59d    498906                  mov [r14], rax                                         
 ..       a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] .. 
0x78722b84a5a0    498b06                  mov rax, [r14]                                         
0x78722b84a5a3    488b00                  mov rax, [rax]                                         
0x78722b84a5a6    498906                  mov [r14], rax                                         
 ..     a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ .. 
0x78722b84a5a9    498b0e                  mov rcx, [r14]                                         
0x78722b84a5ac    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84a5b0    488908                  mov [rax], rcx                                         
0x78722b84a5b3    4983ee10                sub r14, 0x10                                          
0x78722b84a5b7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a5bb    4881c000000000          add rax, 0x0                                           
0x78722b84a5c2    4983c608                add r14, 0x8                                           
0x78722b84a5c6    498906                  mov [r14], rax                                         
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [ .. 
0x78722b84a5c9    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84a5cd    486bc009                imul rax, rax, 0x9                                     
 ..  @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y  .. 
0x78722b84a5d1    490106                  add [r14], rax                                         
 .. [0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][ .. 
0x78722b84a5d4    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84a5d8    486bc003                imul rax, rax, 0x3                                     
 .. ] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y  .. 
0x78722b84a5dc    490106                  add [r14], rax                                         
 ..  [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ .. 
0x78722b84a5df    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a5e3    4881c000000000          add rax, 0x0                                           
0x78722b84a5ea    4983c608                add r14, 0x8                                           
0x78722b84a5ee    498906                  mov [r14], rax                                         
 ..     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp .. 
0x78722b84a5f1    498b06                  mov rax, [r14]                                         
0x78722b84a5f4    488b00                  mov rax, [rax]                                         
0x78722b84a5f7    498906                  mov [r14], rax                                         
 ..   a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a .. 
0x78722b84a5fa    498b0e                  mov rcx, [r14]                                         
0x78722b84a5fd    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84a601    488908                  mov [rax], rcx                                         
0x78722b84a604    4983ee10                sub r14, 0x10                                          
0x78722b84a608    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a60c    4881c000000000          add rax, 0x0                                           
0x78722b84a613    4983c608                add r14, 0x8                                           
0x78722b84a617    498906                  mov [r14], rax                                         
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0 .. 
0x78722b84a61a    498b47f0                mov rax, [r15-0x10]                                    
 .. ][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @  .. 
0x78722b84a61e    b901000000              mov ecx, 0x1                                           
0x78722b84a623    4803c1                  add rax, rcx                                           
0x78722b84a626    486bc009                imul rax, rax, 0x9                                     
 .. 0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =  .. 
0x78722b84a62a    490106                  add [r14], rax                                         
 .. a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     .. 
0x78722b84a62d    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84a631    486bc003                imul rax, rax, 0x3                                     
 .. ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     T .. 
0x78722b84a635    490106                  add [r14], rax                                         
 .. [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO .. 
0x78722b84a638    498b47f0                mov rax, [r15-0x10]                                    
 .. ][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( .. 
0x78722b84a63c    490106                  add [r14], rax                                         
 .. ][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "a .. 
0x78722b84a63f    498b06                  mov rax, [r14]                                         
0x78722b84a642    4983c608                add r14, 0x8                                           
0x78722b84a646    498906                  mov [r14], rax                                         
 ..  @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array .. 
0x78722b84a649    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84a653    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84a65d    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array ou .. 
0x78722b84a660    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b84a66a    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..    a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out o .. 
0x78722b84a66d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a671    4881c000000000          add rax, 0x0                                           
0x78722b84a678    4983c608                add r14, 0x8                                           
0x78722b84a67c    498906                  mov [r14], rax                                         
 .. +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checki .. 
0x78722b84a67f    498b06                  mov rax, [r14]                                         
0x78722b84a682    488b00                  mov rax, [rax]                                         
0x78722b84a685    498906                  mov [r14], rax                                         
 .. [y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking .. 
0x78722b84a688    498b0e                  mov rcx, [r14]                                         
0x78722b84a68b    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84a68f    488908                  mov [rax], rcx                                         
0x78722b84a692    4983ee10                sub r14, 0x10                                          
0x78722b84a696    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a69a    4881c000000000          add rax, 0x0                                           
0x78722b84a6a1    4983c608                add r14, 0x8                                           
0x78722b84a6a5    498906                  mov [r14], rax                                         
 .. dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with varia .. 
0x78722b84a6a8    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84a6ac    486bc009                imul rax, rax, 0x9                                     
 .. p nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variabl .. 
0x78722b84a6b0    490106                  add [r14], rax                                         
 .. l hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables? .. 
0x78722b84a6b3    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84a6b7    486bc003                imul rax, rax, 0x3                                     
 .. hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" .. 
0x78722b84a6bb    490106                  add [r14], rax                                         
 .. a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )  .. 
0x78722b84a6be    498b47f0                mov rax, [r15-0x10]                                    
 ..  [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )      .. 
0x78722b84a6c2    b901000000              mov ecx, 0x1                                           
0x78722b84a6c7    4803c1                  add rax, rcx                                           
 .. 0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a. .. 
0x78722b84a6ca    490106                  add [r14], rax                                         
 .. 0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar  .. 
0x78722b84a6cd    498b06                  mov rax, [r14]                                         
0x78722b84a6d0    4983c608                add r14, 0x8                                           
0x78722b84a6d4    498906                  mov [r14], rax                                         
 .. ] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 d .. 
0x78722b84a6d7    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84a6e1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84a6eb    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump .. 
0x78722b84a6ee    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b84a6f8    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump    .. 
0x78722b84a6fb    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a6ff    4881c000000000          add rax, 0x0                                           
0x78722b84a706    4983c608                add r14, 0x8                                           
0x78722b84a70a    498906                  mov [r14], rax                                         
 ..  @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2 .. 
0x78722b84a70d    498b06                  mov rax, [r14]                                         
0x78722b84a710    488b00                  mov rax, [rax]                                         
0x78722b84a713    498906                  mov [r14], rax                                         
 .. ][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2]  .. 
0x78722b84a716    498b0e                  mov rcx, [r14]                                         
0x78722b84a719    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84a71d    488908                  mov [rax], rcx                                         
0x78722b84a720    4983ee10                sub r14, 0x10                                          
 .. p nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar  .. 
0x78722b84a724    48b809405e2b72780000    mov rax, 0x78722b5e4009       < string : 'array out of bounds checking with variables?!' >
0x78722b84a72e    4983c608                add r14, 0x8                                           
0x78722b84a732    498906                  mov [r14], rax                                         
 .. 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =    .. 
0x78722b84a735    49badb2f842b72780000    mov r10, 0x78722b842fdb                                
0x78722b84a73f    49ffd2                  call r10                      < Root.TODO : 0x000078722b842fdb >
0x78722b84a742    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a746    4881c000000000          add rax, 0x0                                           
0x78722b84a74d    4983c608                add r14, 0x8                                           
0x78722b84a751    498906                  mov [r14], rax                                         
 .. checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x78722b84a754    b820000000              mov eax, 0x20                                          
0x78722b84a759    4983c608                add r14, 0x8                                           
0x78722b84a75d    498906                  mov [r14], rax                                         
 .. cking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x78722b84a760    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b84a76a    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84a774    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b84a777    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a77b    4881c011000000          add rax, 0x11                                          
0x78722b84a782    b907000000              mov ecx, 0x7                                           
 ..     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x78722b84a787    488908                  mov [rax], rcx                                         
0x78722b84a78a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a78e    4881c011000000          add rax, 0x11                                          
0x78722b84a795    488b00                  mov rax, [rax]                                         
0x78722b84a798    4983c608                add r14, 0x8                                           
 ..  dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x78722b84a79c    498906                  mov [r14], rax                                         
 .. ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x78722b84a79f    b807000000              mov eax, 0x7                                           
0x78722b84a7a4    4983c608                add r14, 0x8                                           
0x78722b84a7a8    498906                  mov [r14], rax                                         
0x78722b84a7ab    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b84a7b5    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b84a7b8    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84a7bc    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84a7c0    4983ee10                sub r14, 0x10                                          
 .. ] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x78722b84a7c4    c3                      ret                                                    
Word_Disassemble : word - 'tct' :: codeSize = 630
Word : 0x000078722aabf964 :: Compiled at : 0x000078722b84a54f
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 387.16 <::

_ClassTypedef : at namespaces/test/arrayTest.csl : 389.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 0x00007872286001e7
 0x00007872286001f9
 0x00007872286001e7
Dump at : namespaces/test/arrayTest.csl : 397.11 :
Dump : Address = 0x00007872286001de : Number = 32 :: (little endian dump)
0x00007872286001de :  77 00 00 00 00 00 77 00  77 4d 00 00 00 00 00 00  w.....w. wM...... 
0x00007872286001ee :  00 00 00 00 00 00 00 00  00 00 00 4d 00 00 00 00  ........ ...M.... 

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
C_Syntax.ctcta <:> csl compiled word, prefix
SourceCode for C_Syntax.ctcta :> 
void ctcta ( y cta a ) { a.ar [0][y + 1][0] = 'M' ; a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ; a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ; a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ; hp ( a.ar [y ][y + 1][1] ) ; a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ; a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ; a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ; hp ( &a.ar ) ; cadump ( &a.ar 27 ) ; } 
Source code file location of ctcta : "namespaces/test/arrayTest.csl" : 407.6 :: we are now at : namespaces/test/arrayTest.csl : 421.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84a9a9 -- code size = 1000 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.ctcta : definition = 0x000078722b84a9a9 : disassembly at namespaces/test/arrayTest.csl : 421.10 :
0x78722b84a9a9    4d897e08                mov [r14+0x8], r15                                     
0x78722b84a9ad    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84a9b1    4981c608000000          add r14, 0x8                                           
0x78722b84a9b8    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a9bc    4881c000000000          add rax, 0x0                                           
0x78722b84a9c3    4983c608                add r14, 0x8                                           
0x78722b84a9c7    498906                  mov [r14], rax                                         
 .. void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar  .. 
0x78722b84a9ca    498b47f0                mov rax, [r15-0x10]                                    
void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ] .. 
0x78722b84a9ce    b901000000              mov ecx, 0x1                                           
0x78722b84a9d3    4803c1                  add rax, rcx                                           
0x78722b84a9d6    486bc003                imul rax, rax, 0x3                                     
  void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y .. 
0x78722b84a9da    490106                  add [r14], rax                                         
 ..  y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][ .. 
0x78722b84a9dd    b84d000000              mov eax, 0x4d                                          
0x78722b84a9e2    4983c608                add r14, 0x8                                           
0x78722b84a9e6    498906                  mov [r14], rax                                         
 ..  ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1 .. 
0x78722b84a9e9    498b0e                  mov rcx, [r14]                                         
0x78722b84a9ec    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84a9f0    488908                  mov [rax], rcx                                         
0x78722b84a9f3    4983ee10                sub r14, 0x10                                          
0x78722b84a9f7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84a9fb    4881c000000000          add rax, 0x0                                           
0x78722b84aa02    4983c608                add r14, 0x8                                           
0x78722b84aa06    498906                  mov [r14], rax                                         
0x78722b84aa09    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84aa0d    486bc009                imul rax, rax, 0x9                                     
 ..   a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar  .. 
0x78722b84aa11    490106                  add [r14], rax                                         
 .. ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + .. 
0x78722b84aa14    498b47f0                mov rax, [r15-0x10]                                    
 .. 0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][ .. 
0x78722b84aa18    b901000000              mov ecx, 0x1                                           
0x78722b84aa1d    4803c1                  add rax, rcx                                           
0x78722b84aa20    486bc003                imul rax, rax, 0x3                                     
 ..  [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1 .. 
0x78722b84aa24    490106                  add [r14], rax                                         
 .. [0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 .. 
0x78722b84aa27    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84aa2b    4881c000000000          add rax, 0x0                                           
0x78722b84aa32    4983c608                add r14, 0x8                                           
0x78722b84aa36    498906                  mov [r14], rax                                         
 ..  ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar .. 
0x78722b84aa39    498b47f0                mov rax, [r15-0x10]                                    
 ..   a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y  .. 
0x78722b84aa3d    b901000000              mov ecx, 0x1                                           
0x78722b84aa42    4803c1                  add rax, rcx                                           
0x78722b84aa45    486bc003                imul rax, rax, 0x3                                     
 ..     a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [ .. 
0x78722b84aa49    490106                  add [r14], rax                                         
 .. 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ .. 
0x78722b84aa4c    498b0e                  mov rcx, [r14]                                         
0x78722b84aa4f    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84aa53    488908                  mov [rax], rcx                                         
0x78722b84aa56    4983ee10                sub r14, 0x10                                          
0x78722b84aa5a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84aa5e    4881c000000000          add rax, 0x0                                           
0x78722b84aa65    4983c608                add r14, 0x8                                           
0x78722b84aa69    498906                  mov [r14], rax                                         
0x78722b84aa6c    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84aa70    486bc009                imul rax, rax, 0x9                                     
 .. ] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp .. 
0x78722b84aa74    490106                  add [r14], rax                                         
 .. a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a .. 
0x78722b84aa77    498b47f0                mov rax, [r15-0x10]                                    
 ..  [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar  .. 
0x78722b84aa7b    b901000000              mov ecx, 0x1                                           
0x78722b84aa80    4803c1                  add rax, rcx                                           
0x78722b84aa83    486bc003                imul rax, rax, 0x3                                     
 .. ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.a .. 
0x78722b84aa87    490106                  add [r14], rax                                         
0x78722b84aa8a    b801000000              mov eax, 0x1                                           
 .. ][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y  .. 
0x78722b84aa8f    490106                  add [r14], rax                                         
 ..  1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + .. 
0x78722b84aa92    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84aa96    4881c000000000          add rax, 0x0                                           
0x78722b84aa9d    4983c608                add r14, 0x8                                           
0x78722b84aaa1    498906                  mov [r14], rax                                         
0x78722b84aaa4    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84aaa8    486bc009                imul rax, rax, 0x9                                     
 ..  ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] .. 
0x78722b84aaac    490106                  add [r14], rax                                         
 ..       a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ; .. 
0x78722b84aaaf    498b47f0                mov rax, [r15-0x10]                                    
 ..   a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;     .. 
0x78722b84aab3    b901000000              mov ecx, 0x1                                           
0x78722b84aab8    4803c1                  add rax, rcx                                           
0x78722b84aabb    486bc003                imul rax, rax, 0x3                                     
 ..     a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;   .. 
0x78722b84aabf    490106                  add [r14], rax                                         
 ..  + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y .. 
0x78722b84aac2    498b0e                  mov rcx, [r14]                                         
0x78722b84aac5    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84aac9    488908                  mov [rax], rcx                                         
0x78722b84aacc    4983ee10                sub r14, 0x10                                          
0x78722b84aad0    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84aad4    4881c000000000          add rax, 0x0                                           
0x78722b84aadb    4983c608                add r14, 0x8                                           
0x78722b84aadf    498906                  mov [r14], rax                                         
 .. 1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1] .. 
0x78722b84aae2    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1]  .. 
0x78722b84aae6    b901000000              mov ecx, 0x1                                           
0x78722b84aaeb    4803c1                  add rax, rcx                                           
0x78722b84aaee    486bc009                imul rax, rax, 0x9                                     
 ..  = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1 .. 
0x78722b84aaf2    490106                  add [r14], rax                                         
 .. ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a .. 
0x78722b84aaf5    498b47f0                mov rax, [r15-0x10]                                    
 .. y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar  .. 
0x78722b84aaf9    b901000000              mov ecx, 0x1                                           
0x78722b84aafe    4803c1                  add rax, rcx                                           
0x78722b84ab01    486bc003                imul rax, rax, 0x3                                     
 ..  [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.a .. 
0x78722b84ab05    490106                  add [r14], rax                                         
 .. [0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y  .. 
0x78722b84ab08    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ab0c    4881c000000000          add rax, 0x0                                           
0x78722b84ab13    4983c608                add r14, 0x8                                           
0x78722b84ab17    498906                  mov [r14], rax                                         
0x78722b84ab1a    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84ab1e    486bc009                imul rax, rax, 0x9                                     
 ..      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0 .. 
0x78722b84ab22    490106                  add [r14], rax                                         
 ..  a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;  .. 
0x78722b84ab25    498b47f0                mov rax, [r15-0x10]                                    
 .. r [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      .. 
0x78722b84ab29    b901000000              mov ecx, 0x1                                           
0x78722b84ab2e    4803c1                  add rax, rcx                                           
0x78722b84ab31    486bc003                imul rax, rax, 0x3                                     
 .. .ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;    .. 
0x78722b84ab35    490106                  add [r14], rax                                         
0x78722b84ab38    b801000000              mov eax, 0x1                                           
 .. y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a. .. 
0x78722b84ab3d    490106                  add [r14], rax                                         
 .. 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][ .. 
0x78722b84ab40    498b0e                  mov rcx, [r14]                                         
0x78722b84ab43    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ab47    488908                  mov [rax], rcx                                         
0x78722b84ab4a    4983ee10                sub r14, 0x10                                          
 .. 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y +  .. 
0x78722b84ab4e    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ab52    4881c000000000          add rax, 0x0                                           
0x78722b84ab59    4983c608                add r14, 0x8                                           
0x78722b84ab5d    498906                  mov [r14], rax                                         
0x78722b84ab60    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84ab64    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y  .. 
0x78722b84ab68    490106                  add [r14], rax                                         
 ..  [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] =  .. 
0x78722b84ab6b    498b47f0                mov rax, [r15-0x10]                                    
 .. ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar .. 
0x78722b84ab6f    b901000000              mov ecx, 0x1                                           
0x78722b84ab74    4803c1                  add rax, rcx                                           
0x78722b84ab77    486bc003                imul rax, rax, 0x3                                     
 .. y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a. .. 
0x78722b84ab7b    490106                  add [r14], rax                                         
0x78722b84ab7e    b801000000              mov eax, 0x1                                           
 ..  + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y .. 
0x78722b84ab83    490106                  add [r14], rax                                         
0x78722b84ab86    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b84ab90    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
0x78722b84ab93    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ab97    4881c000000000          add rax, 0x0                                           
0x78722b84ab9e    4983c608                add r14, 0x8                                           
0x78722b84aba2    498906                  mov [r14], rax                                         
 .. hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1]  .. 
0x78722b84aba5    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;    .. 
0x78722b84aba9    b901000000              mov ecx, 0x1                                           
0x78722b84abae    4803c1                  add rax, rcx                                           
0x78722b84abb1    486bc009                imul rax, rax, 0x9                                     
 ..  ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;  .. 
0x78722b84abb5    490106                  add [r14], rax                                         
 .. ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;       .. 
0x78722b84abb8    498b47f0                mov rax, [r15-0x10]                                    
 .. y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar .. 
0x78722b84abbc    b901000000              mov ecx, 0x1                                           
0x78722b84abc1    4803c1                  add rax, rcx                                           
0x78722b84abc4    486bc003                imul rax, rax, 0x3                                     
 ..  [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a. .. 
0x78722b84abc8    490106                  add [r14], rax                                         
0x78722b84abcb    b801000000              mov eax, 0x1                                           
 .. [y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y .. 
0x78722b84abd0    490106                  add [r14], rax                                         
 .. 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1] .. 
0x78722b84abd3    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84abd7    4881c000000000          add rax, 0x0                                           
0x78722b84abde    4983c608                add r14, 0x8                                           
0x78722b84abe2    498906                  mov [r14], rax                                         
 .. ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1 .. 
0x78722b84abe5    498b47f0                mov rax, [r15-0x10]                                    
 ..    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y  .. 
0x78722b84abe9    b901000000              mov ecx, 0x1                                           
0x78722b84abee    4803c1                  add rax, rcx                                           
0x78722b84abf1    486bc009                imul rax, rax, 0x9                                     
 .. ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][ .. 
0x78722b84abf5    490106                  add [r14], rax                                         
 .. a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1 .. 
0x78722b84abf8    498b47f0                mov rax, [r15-0x10]                                    
 ..  [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] =  .. 
0x78722b84abfc    b901000000              mov ecx, 0x1                                           
0x78722b84ac01    4803c1                  add rax, rcx                                           
0x78722b84ac04    486bc003                imul rax, rax, 0x3                                     
 .. ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1]  .. 
0x78722b84ac08    490106                  add [r14], rax                                         
 .. + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y +  .. 
0x78722b84ac0b    498b0e                  mov rcx, [r14]                                         
0x78722b84ac0e    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ac12    488908                  mov [rax], rcx                                         
0x78722b84ac15    4983ee10                sub r14, 0x10                                          
0x78722b84ac19    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ac1d    4881c000000000          add rax, 0x0                                           
0x78722b84ac24    4983c608                add r14, 0x8                                           
0x78722b84ac28    498906                  mov [r14], rax                                         
 .. = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1] .. 
0x78722b84ac2b    498b47f0                mov rax, [r15-0x10]                                    
 .. ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y]  .. 
0x78722b84ac2f    b901000000              mov ecx, 0x1                                           
0x78722b84ac34    4803c1                  add rax, rcx                                           
0x78722b84ac37    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y .. 
0x78722b84ac3b    490106                  add [r14], rax                                         
 .. [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;   .. 
0x78722b84ac3e    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;       .. 
0x78722b84ac42    b901000000              mov ecx, 0x1                                           
0x78722b84ac47    4803c1                  add rax, rcx                                           
0x78722b84ac4a    486bc003                imul rax, rax, 0x3                                     
 ..  + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;     .. 
0x78722b84ac4e    490106                  add [r14], rax                                         
0x78722b84ac51    498b47f0                mov rax, [r15-0x10]                                    
 .. y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( .. 
0x78722b84ac55    490106                  add [r14], rax                                         
 .. [0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar .. 
0x78722b84ac58    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ac5c    4881c000000000          add rax, 0x0                                           
0x78722b84ac63    4983c608                add r14, 0x8                                           
0x78722b84ac67    498906                  mov [r14], rax                                         
 ..      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;   .. 
0x78722b84ac6a    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     c .. 
0x78722b84ac6e    b901000000              mov ecx, 0x1                                           
0x78722b84ac73    4803c1                  add rax, rcx                                           
0x78722b84ac76    486bc009                imul rax, rax, 0x9                                     
 ..    a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     .. 
0x78722b84ac7a    490106                  add [r14], rax                                         
 .. ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadu .. 
0x78722b84ac7d    498b47f0                mov rax, [r15-0x10]                                    
 .. y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( .. 
0x78722b84ac81    b901000000              mov ecx, 0x1                                           
0x78722b84ac86    4803c1                  add rax, rcx                                           
0x78722b84ac89    486bc003                imul rax, rax, 0x3                                     
 ..  [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump .. 
0x78722b84ac8d    490106                  add [r14], rax                                         
0x78722b84ac90    b801000000              mov eax, 0x1                                           
 ..  1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a .. 
0x78722b84ac95    490106                  add [r14], rax                                         
 .. 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a. .. 
0x78722b84ac98    498b0e                  mov rcx, [r14]                                         
0x78722b84ac9b    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ac9f    488908                  mov [rax], rcx                                         
0x78722b84aca2    4983ee10                sub r14, 0x10                                          
0x78722b84aca6    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84acaa    4881c000000000          add rax, 0x0                                           
0x78722b84acb1    4983c608                add r14, 0x8                                           
0x78722b84acb5    498906                  mov [r14], rax                                         
 .. = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acb8    498b47f0                mov rax, [r15-0x10]                                    
 .. ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acbc    b901000000              mov ecx, 0x1                                           
0x78722b84acc1    4803c1                  add rax, rcx                                           
0x78722b84acc4    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acc8    490106                  add [r14], rax                                         
 .. [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84accb    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84accf    b901000000              mov ecx, 0x1                                           
0x78722b84acd4    4803c1                  add rax, rcx                                           
0x78722b84acd7    486bc003                imul rax, rax, 0x3                                     
 ..  + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acdb    490106                  add [r14], rax                                         
 .. [y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acde    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ace2    b901000000              mov ecx, 0x1                                           
0x78722b84ace7    4803c1                  add rax, rcx                                           
 ..  + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acea    490106                  add [r14], rax                                         
 .. ] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84aced    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84acf1    4881c000000000          add rax, 0x0                                           
0x78722b84acf8    4983c608                add r14, 0x8                                           
0x78722b84acfc    498906                  mov [r14], rax                                         
 ..    a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84acff    498b47f0                mov rax, [r15-0x10]                                    
 .. .ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad03    b901000000              mov ecx, 0x1                                           
0x78722b84ad08    4803c1                  add rax, rcx                                           
0x78722b84ad0b    486bc009                imul rax, rax, 0x9                                     
 ..  a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad0f    490106                  add [r14], rax                                         
 ..  [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad12    498b47f0                mov rax, [r15-0x10]                                    
 .. + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad16    b901000000              mov ecx, 0x1                                           
0x78722b84ad1b    4803c1                  add rax, rcx                                           
0x78722b84ad1e    486bc003                imul rax, rax, 0x3                                     
 .. y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad22    490106                  add [r14], rax                                         
0x78722b84ad25    498b47f0                mov rax, [r15-0x10]                                    
 .. ][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad29    490106                  add [r14], rax                                         
 .. [1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad2c    498b0e                  mov rcx, [r14]                                         
0x78722b84ad2f    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ad33    488908                  mov [rax], rcx                                         
0x78722b84ad36    4983ee10                sub r14, 0x10                                          
 .. = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad3a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ad3e    4881c000000000          add rax, 0x0                                           
0x78722b84ad45    4983c608                add r14, 0x8                                           
0x78722b84ad49    498906                  mov [r14], rax                                         
0x78722b84ad4c    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b84ad56    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. ] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad59    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ad5d    4881c000000000          add rax, 0x0                                           
0x78722b84ad64    4983c608                add r14, 0x8                                           
0x78722b84ad68    498906                  mov [r14], rax                                         
 ..     hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad6b    b81b000000              mov eax, 0x1b                                          
0x78722b84ad70    4983c608                add r14, 0x8                                           
0x78722b84ad74    498906                  mov [r14], rax                                         
 .. ][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad77    49ba5ba9842b72780000    mov r10, 0x78722b84a95b                                
0x78722b84ad81    49ffd2                  call r10                      < cta.cadump : 0x000078722b84a95b >
0x78722b84ad84    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84ad88    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84ad8c    4983ee10                sub r14, 0x10                                          
 ..  &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x78722b84ad90    c3                      ret                                                    
Word_Disassemble : word - 'ctcta' :: codeSize = 1000
Word : 0x000078722aad22fc :: Compiled at : 0x000078722b84a9a9
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 421.10 <::
 0x0000787228600209 0x00007872286001f9
Dump at : namespaces/test/arrayTest.csl : 422.16 :
Dump : Address = 0x00007872286001f9 : Number = 27 :: (little endian dump)
0x00007872286001f9 :  4d 00 00 00 00 00 4d 00  00 00 00 00 00 00 00 ff  M.....M. ........ 
0x0000787228600209 :  08 02 60 28 72 78 00 00  09 12 12 02 60 28 72 78  ..`(rx.. ....`(rx 

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

arr10 = 7872274001a8 : arr10->dimSize = 256
Dump at : namespaces/test/arrayTest.csl : 434.17 :
Dump : Address = 0x00007872274001a8 : Number = 16 :: (little endian dump)
0x00007872274001a8 :  00 01 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x00007872274001a8
 =============================
C_Syntax.CSL_a10 <:> csl compiled word
SourceCode for C_Syntax.CSL_a10 :> 
void CSL_a10 ( ) { Ar10 * a = arr10 ; int64 x, y, z, dSize = a->dimSize ; x = 0, y = 0, z = 0 ; while ( z < dSize ) { while ( y < dSize ) { while ( x < dSize ) { a->ar [z][y][x] = x ; x ++ ; } x = 0, y ++ ; } x = 0, y = 0, z ++ ; } oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ; a10dump ( 0 0 0 a ) ; a10dump ( 1 4 0 a ) ; oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; a10dump ( 67 246 0 a ) ; a10dump ( 1 34 0 a ) ; } 
Source code file location of CSL_a10 : "namespaces/test/arrayTest.csl" : 448.8 :: we are now at : namespaces/test/arrayTest.csl : 488.12
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ae29 -- code size = 655 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CSL_a10 : definition = 0x000078722b84ae29 : disassembly at namespaces/test/arrayTest.csl : 488.12 :
0x78722b84ae29    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ae2d    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ae31    4981c630000000          add r14, 0x30                                          
 ..  void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize   .. 
0x78722b84ae38    48b8a801402772780000    mov rax, 0x7872274001a8                                
0x78722b84ae42    4881c000000000          add rax, 0x0                                           
 ..      void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSi .. 
0x78722b84ae49    49894708                mov [r15+0x8], rax                                     
 ..  = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize ) .. 
0x78722b84ae4d    498b4708                mov rax, [r15+0x8]                                     
0x78722b84ae51    4881c000000000          add rax, 0x0                                           
0x78722b84ae58    488b00                  mov rax, [rax]                                         
 .. Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < .. 
0x78722b84ae5b    49894728                mov [r15+0x28], rax                                    
 .. 4 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {          .. 
0x78722b84ae5f    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..  z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             whi .. 
0x78722b84ae67    49c7471800000000        mov qword [r15+0x18], 0x0                              
 .. ze = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x  .. 
0x78722b84ae6f    49c7472000000000        mov qword [r15+0x20], 0x0                              
 ..   x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )            .. 
0x78722b84ae77    498b4720                mov rax, [r15+0x20]                                    
 .. = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {  .. 
0x78722b84ae7b    498b4f28                mov rcx, [r15+0x28]                                    
 .. x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )              .. 
0x78722b84ae7f    483bc1                  cmp rax, rcx                                           
0x78722b84ae82    0f8dab000000            jge 0x78722b84af33            < C_Syntax.CSL_a10+266 >
 ..  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] .. 
0x78722b84ae88    498b4718                mov rax, [r15+0x18]                                    
 ..  < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x .. 
0x78722b84ae8c    498b4f28                mov rcx, [r15+0x28]                                    
 ..  z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = .. 
0x78722b84ae90    483bc1                  cmp rax, rcx                                           
0x78722b84ae93    0f8d81000000            jge 0x78722b84af1a            < C_Syntax.CSL_a10+241 >
 .. dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             .. 
0x78722b84ae99    498b4710                mov rax, [r15+0x10]                                    
 .. e )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }   .. 
0x78722b84ae9d    498b4f28                mov rcx, [r15+0x28]                                    
 .. ize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             } .. 
0x78722b84aea1    483bc1                  cmp rax, rcx                                           
0x78722b84aea4    7d63                    jge 0x2b84af09                < C_Syntax.CSL_a10+224 >
0x78722b84aea6    0f1f4000                nop [rax]                                              
0x78722b84aeaa    498b4708                mov rax, [r15+0x8]                                     
 .. ze )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }       .. 
0x78722b84aeae    4881c008000000          add rax, 0x8                                           
0x78722b84aeb5    4983c608                add r14, 0x8                                           
0x78722b84aeb9    498906                  mov [r14], rax                                         
 .. )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }          .. 
0x78722b84aebc    498b4720                mov rax, [r15+0x20]                                    
0x78722b84aec0    4869c000000100          imul rax, rax, 0x10000                                 
 ..              {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x .. 
0x78722b84aec7    490106                  add [r14], rax                                         
0x78722b84aeca    498b4718                mov rax, [r15+0x18]                                    
0x78722b84aece    4869c000010000          imul rax, rax, 0x100                                   
 ..           {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x =  .. 
0x78722b84aed5    490106                  add [r14], rax                                         
0x78722b84aed8    498b4710                mov rax, [r15+0x10]                                    
 ..        {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0,  .. 
0x78722b84aedc    490106                  add [r14], rax                                         
 ..   {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0 .. 
0x78722b84aedf    498b4710                mov rax, [r15+0x10]                                    
0x78722b84aee3    4983c608                add r14, 0x8                                           
0x78722b84aee7    498906                  mov [r14], rax                                         
 ..     {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = .. 
0x78722b84aeea    498b0e                  mov rcx, [r14]                                         
0x78722b84aeed    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84aef1    488908                  mov [rax], rcx                                         
0x78722b84aef4    4983ee10                sub r14, 0x10                                          
 .. >ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        .. 
0x78722b84aef8    49ff4710                inc qword [r15+0x10]                                   
0x78722b84aefc    498b4710                mov rax, [r15+0x10]                                    
0x78722b84af00    498b4f28                mov rcx, [r15+0x28]                                    
0x78722b84af04    483bc1                  cmp rax, rcx                                           
0x78722b84af07    7ca1                    jl 0x2b84aeaa                 < C_Syntax.CSL_a10+129 >
 ..   x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx .. 
0x78722b84af09    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar .. 
0x78722b84af11    49ff4718                inc qword [r15+0x18]                                   
0x78722b84af15    e96effffff              jmp 0x78722b84ae88            < C_Syntax.CSL_a10+95 >
 ..    x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump  .. 
0x78722b84af1a    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 .. 
0x78722b84af22    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..  ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;   .. 
0x78722b84af2a    49ff4720                inc qword [r15+0x20]                                   
0x78722b84af2e    e944ffffff              jmp 0x78722b84ae77            < C_Syntax.CSL_a10+78 >
 .. y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;    .. 
0x78722b84af33    48b832b8942a72780000    mov rax, 0x78722a94b832                                
0x78722b84af3d    488bf8                  mov rdi, rax                                           
 ..   oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][2 .. 
0x78722b84af40    498b4708                mov rax, [r15+0x8]                                     
 .. Printf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246] .. 
0x78722b84af44    4881c008000d00          add rax, 0xd0008                                       
0x78722b84af4b    488bc8                  mov rcx, rax                                           
 ..    x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4  .. 
0x78722b84af4e    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b84af58    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84af62    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67 .. 
0x78722b84af65    48c7c000000000          mov rax, 0x0                                           
0x78722b84af6c    4983c608                add r14, 0x8                                           
0x78722b84af70    498906                  mov [r14], rax                                         
 .. x", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) .. 
0x78722b84af73    48c7c000000000          mov rax, 0x0                                           
0x78722b84af7a    4983c608                add r14, 0x8                                           
0x78722b84af7e    498906                  mov [r14], rax                                         
 .. , a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; .. 
0x78722b84af81    48c7c000000000          mov rax, 0x0                                           
0x78722b84af88    4983c608                add r14, 0x8                                           
0x78722b84af8c    498906                  mov [r14], rax                                         
 .. a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;   .. 
0x78722b84af8f    498b4708                mov rax, [r15+0x8]                                     
0x78722b84af93    4881c000000000          add rax, 0x0                                           
0x78722b84af9a    4983c608                add r14, 0x8                                           
0x78722b84af9e    498906                  mov [r14], rax                                         
 .. ][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[ .. 
0x78722b84afa1    49ba78a1842b72780000    mov r10, 0x78722b84a178                                
0x78722b84afab    49ffd2                  call r10                      < Ar10.a10dump : 0x000078722b84a178 >
 ..  a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 .. 
0x78722b84afae    b801000000              mov eax, 0x1                                           
0x78722b84afb3    4983c608                add r14, 0x8                                           
0x78722b84afb7    498906                  mov [r14], rax                                         
 .. 10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a .. 
0x78722b84afba    b804000000              mov eax, 0x4                                           
0x78722b84afbf    4983c608                add r14, 0x8                                           
0x78722b84afc3    498906                  mov [r14], rax                                         
 .. dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) .. 
0x78722b84afc6    48c7c000000000          mov rax, 0x0                                           
0x78722b84afcd    4983c608                add r14, 0x8                                           
0x78722b84afd1    498906                  mov [r14], rax                                         
 .. mp ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ; .. 
0x78722b84afd4    498b4708                mov rax, [r15+0x8]                                     
0x78722b84afd8    4881c000000000          add rax, 0x0                                           
0x78722b84afdf    4983c608                add r14, 0x8                                           
0x78722b84afe3    498906                  mov [r14], rax                                         
 .. [7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump  .. 
0x78722b84afe6    49ba78a1842b72780000    mov r10, 0x78722b84a178                                
0x78722b84aff0    49ffd2                  call r10                      < Ar10.a10dump : 0x000078722b84a178 >
 ..  a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34  .. 
0x78722b84aff3    48b818ba942a72780000    mov rax, 0x78722a94ba18                                
0x78722b84affd    488bf8                  mov rdi, rax                                           
 .. Printf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b000    498b4708                mov rax, [r15+0x8]                                     
 .. ntf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b004    4881c008003901          add rax, 0x1390008                                     
0x78722b84b00b    488bc8                  mov rcx, rax                                           
 .. a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10du .. 
0x78722b84b00e    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b84b018    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84b022    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. ", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b025    b843000000              mov eax, 0x43                                          
0x78722b84b02a    4983c608                add r14, 0x8                                           
0x78722b84b02e    498906                  mov [r14], rax                                         
 .. a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b031    b8f6000000              mov eax, 0xf6                                          
0x78722b84b036    4983c608                add r14, 0x8                                           
0x78722b84b03a    498906                  mov [r14], rax                                         
 .. r[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b03d    48c7c000000000          mov rax, 0x0                                           
0x78722b84b044    4983c608                add r14, 0x8                                           
0x78722b84b048    498906                  mov [r14], rax                                         
 .. 0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b04b    498b4708                mov rax, [r15+0x8]                                     
0x78722b84b04f    4881c000000000          add rax, 0x0                                           
0x78722b84b056    4983c608                add r14, 0x8                                           
0x78722b84b05a    498906                  mov [r14], rax                                         
 .. [67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b05d    49ba78a1842b72780000    mov r10, 0x78722b84a178                                
0x78722b84b067    49ffd2                  call r10                      < Ar10.a10dump : 0x000078722b84a178 >
 .. 0dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b06a    b801000000              mov eax, 0x1                                           
0x78722b84b06f    4983c608                add r14, 0x8                                           
0x78722b84b073    498906                  mov [r14], rax                                         
 .. ump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b076    b822000000              mov eax, 0x22                                          
0x78722b84b07b    4983c608                add r14, 0x8                                           
0x78722b84b07f    498906                  mov [r14], rax                                         
 ..  ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b082    48c7c000000000          mov rax, 0x0                                           
0x78722b84b089    4983c608                add r14, 0x8                                           
0x78722b84b08d    498906                  mov [r14], rax                                         
 ..  67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b090    498b4708                mov rax, [r15+0x8]                                     
0x78722b84b094    4881c000000000          add rax, 0x0                                           
0x78722b84b09b    4983c608                add r14, 0x8                                           
0x78722b84b09f    498906                  mov [r14], rax                                         
 .. ) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b0a2    49ba78a1842b72780000    mov r10, 0x78722b84a178                                
0x78722b84b0ac    49ffd2                  call r10                      < Ar10.a10dump : 0x000078722b84a178 >
0x78722b84b0af    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84b0b3    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x78722b84b0b7    c3                      ret                                                    
Word_Disassemble : word - 'CSL_a10' :: codeSize = 655
Word : 0x000078722aae2ff4 :: Compiled at : 0x000078722b84ae29
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 488.12 <::
 0x00007872274001a8
arr10->dimSize = 256
a->ar[0][6][7] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 0 y = 0 z = 0
 dimSize = 256
 a = 0x00007872274001a8 a.ar = 0x00007872274001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007872274001b0 : Number = 256 :: (little endian dump)
0x00007872274001b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x00007872274001c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x00007872274001d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x00007872274001e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x00007872274001f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x0000787227400200 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x0000787227400210 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x0000787227400220 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x0000787227400230 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x0000787227400240 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x0000787227400250 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x0000787227400260 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x0000787227400270 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x0000787227400280 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x0000787227400290 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x00007872274002a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 4 z = 0
 dimSize = 256
 a = 0x00007872274001a8 a.ar = 0x00007872274001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007872274005b1 : Number = 256 :: (little endian dump)
0x00007872274005b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........ 
0x00007872274005c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......  
0x00007872274005d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0 
0x00007872274005e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@ 
0x00007872274005f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 
0x0000787227400601 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_` 
0x0000787227400611 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop 
0x0000787227400621 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~.. 
0x0000787227400631 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........ 
0x0000787227400641 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........ 
0x0000787227400651 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........ 
0x0000787227400661 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........ 
0x0000787227400671 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........ 
0x0000787227400681 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........ 
0x0000787227400691 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........ 
0x00007872274006a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........ 

a->ar[0][246][67] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 67 y = 246 z = 0
 dimSize = 256
 a = 0x00007872274001a8 a.ar = 0x00007872274001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x000078722740f7f3 : Number = 256 :: (little endian dump)
0x000078722740f7f3 :  43 44 45 46 47 48 49 4a  4b 4c 4d 4e 4f 50 51 52  CDEFGHIJ KLMNOPQR 
0x000078722740f803 :  53 54 55 56 57 58 59 5a  5b 5c 5d 5e 5f 60 61 62  STUVWXYZ [\]^_`ab 
0x000078722740f813 :  63 64 65 66 67 68 69 6a  6b 6c 6d 6e 6f 70 71 72  cdefghij klmnopqr 
0x000078722740f823 :  73 74 75 76 77 78 79 7a  7b 7c 7d 7e 7f 80 81 82  stuvwxyz {|}~.... 
0x000078722740f833 :  83 84 85 86 87 88 89 8a  8b 8c 8d 8e 8f 90 91 92  ........ ........ 
0x000078722740f843 :  93 94 95 96 97 98 99 9a  9b 9c 9d 9e 9f a0 a1 a2  ........ ........ 
0x000078722740f853 :  a3 a4 a5 a6 a7 a8 a9 aa  ab ac ad ae af b0 b1 b2  ........ ........ 
0x000078722740f863 :  b3 b4 b5 b6 b7 b8 b9 ba  bb bc bd be bf c0 c1 c2  ........ ........ 
0x000078722740f873 :  c3 c4 c5 c6 c7 c8 c9 ca  cb cc cd ce cf d0 d1 d2  ........ ........ 
0x000078722740f883 :  d3 d4 d5 d6 d7 d8 d9 da  db dc dd de df e0 e1 e2  ........ ........ 
0x000078722740f893 :  e3 e4 e5 e6 e7 e8 e9 ea  eb ec ed ee ef f0 f1 f2  ........ ........ 
0x000078722740f8a3 :  f3 f4 f5 f6 f7 f8 f9 fa  fb fc fd fe ff 00 01 02  ........ ........ 
0x000078722740f8b3 :  03 04 05 06 07 08 09 0a  0b 0c 0d 0e 0f 10 11 12  ........ ........ 
0x000078722740f8c3 :  13 14 15 16 17 18 19 1a  1b 1c 1d 1e 1f 20 21 22  ........ ..... !" 
0x000078722740f8d3 :  23 24 25 26 27 28 29 2a  2b 2c 2d 2e 2f 30 31 32  #$%&'()* +,-./012 
0x000078722740f8e3 :  33 34 35 36 37 38 39 3a  3b 3c 3d 3e 3f 40 41 42  3456789: ;<=>?@AB 

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 34 z = 0
 dimSize = 256
 a = 0x00007872274001a8 a.ar = 0x00007872274001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007872274023b1 : Number = 256 :: (little endian dump)
0x00007872274023b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........ 
0x00007872274023c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......  
0x00007872274023d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0 
0x00007872274023e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@ 
0x00007872274023f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 
0x0000787227402401 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_` 
0x0000787227402411 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop 
0x0000787227402421 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~.. 
0x0000787227402431 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........ 
0x0000787227402441 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........ 
0x0000787227402451 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........ 
0x0000787227402461 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........ 
0x0000787227402471 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........ 
0x0000787227402481 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........ 
0x0000787227402491 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........ 
0x00007872274024a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........ 

including namespaces/test/localsTest.csl at namespaces/test/initTest.csl : 86.41 ...
 1 2 3 12

 =============================
C_Syntax.taa <:> csl compiled word
SourceCode for C_Syntax.taa :> 
int64 taa ( one two three ) { int64 four, five ; four = one + two + three ; five = one + two + three + four ; p ( one ) ; p ( two ) ; p ( three ) ; p ( five ) ; nl () ; } 
Source code file location of taa : "namespaces/test/localsTest.csl" : 10.4 :: we are now at : namespaces/test/localsTest.csl : 22.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84b18c -- code size = 198 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.taa : definition = 0x000078722b84b18c : disassembly at namespaces/test/localsTest.csl : 22.16 :
0x78722b84b18c    4d897e08                mov [r14+0x8], r15                                     
0x78722b84b190    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84b194    4981c618000000          add r14, 0x18                                          
 .. ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( t .. 
0x78722b84b19b    498b47e8                mov rax, [r15-0x18]                                    
 ..   int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) .. 
0x78722b84b19f    498b4ff0                mov rcx, [r15-0x10]                                    
 ..     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three .. 
0x78722b84b1a3    4803c1                  add rax, rcx                                           
 .. 4 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     .. 
0x78722b84b1a6    498b4ff8                mov rcx, [r15-0x8]                                     
 .. t64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;   .. 
0x78722b84b1aa    4803c1                  add rax, rcx                                           
 ..  three ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;    .. 
0x78722b84b1ad    49894708                mov [r15+0x8], rax                                     
 .. four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     n .. 
0x78722b84b1b1    498b47e8                mov rax, [r15-0x18]                                    
 ..  one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; .. 
0x78722b84b1b5    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () .. 
0x78722b84b1b9    4803c1                  add rax, rcx                                           
 ..  two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1bc    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1c0    4803c1                  add rax, rcx                                           
 .. hree ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1c3    498b4f08                mov rcx, [r15+0x8]                                     
 ..  three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1c7    4803c1                  add rax, rcx                                           
 ..  ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five )  .. 
0x78722b84b1ca    49894710                mov [r15+0x10], rax                                    
 ..  = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1ce    498b47e8                mov rax, [r15-0x18]                                    
0x78722b84b1d2    4983c608                add r14, 0x8                                           
0x78722b84b1d6    498906                  mov [r14], rax                                         
0x78722b84b1d9    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84b1e3    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. hree + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1e6    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84b1ea    4983c608                add r14, 0x8                                           
0x78722b84b1ee    498906                  mov [r14], rax                                         
0x78722b84b1f1    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84b1fb    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..   p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b1fe    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84b202    4983c608                add r14, 0x8                                           
0x78722b84b206    498906                  mov [r14], rax                                         
0x78722b84b209    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84b213    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b216    498b4710                mov rax, [r15+0x10]                                    
0x78722b84b21a    4983c608                add r14, 0x8                                           
0x78722b84b21e    498906                  mov [r14], rax                                         
0x78722b84b221    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84b22b    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b84b22e    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84b238    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84b242    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b84b245    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84b249    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84b24d    4983ee18                sub r14, 0x18                                          
 .. hree ) ;     p ( five ) ;     nl () ; }  .. 
0x78722b84b251    c3                      ret                                                    
Word_Disassemble : word - 'taa' :: codeSize = 198
Word : 0x000078722aaee6a4 :: Compiled at : 0x000078722b84b18c
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 22.16 <::
 1 2 3 12
 3 3 3
 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 1 2 3
 1 2 3 4 3 3 3 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 1 2 3
 1 2 3 4
 =============================
C.hey <:> csl compiled word
SourceCode for C.hey :> 
: hey ( n m | o q ) o m @ = m @ o @ "hey_1_assert" assert q n @ = n @ q @ "hey_2_assert" assert n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert ; 
Source code file location of hey : "namespaces/test/localsTest.csl" : 90.2 :: we are now at : namespaces/test/localsTest.csl : 98.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ba8a -- code size = 386 bytes
TypeSignature : 
 -----------------------------
Word :: C.hey : definition = 0x000078722b84ba8a : disassembly at namespaces/test/localsTest.csl : 98.17 :
0x78722b84ba8a    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ba8e    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ba92    4981c618000000          add r14, 0x18                                          
 ..                  : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ +  .. 
0x78722b84ba99    498d4708                lea rax, [r15+0x8]                                     
 ..                : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + +  .. 
0x78722b84ba9d    498b4ff8                mov rcx, [r15-0x8]                                     
 ..            : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1  .. 
0x78722b84baa1    488908                  mov [rax], rcx                                         
 ..         : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + d .. 
0x78722b84baa4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84baa8    4983c608                add r14, 0x8                                           
0x78722b84baac    498906                  mov [r14], rax                                         
 ..     : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p .. 
0x78722b84baaf    498b4708                mov rax, [r15+0x8]                                     
0x78722b84bab3    4983c608                add r14, 0x8                                           
0x78722b84bab7    498906                  mov [r14], rax                                         
 .. : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 " .. 
0x78722b84baba    48b864525e2b72780000    mov rax, 0x78722b5e5264       < string : 'hey_1_assert' >
0x78722b84bac4    4983c608                add r14, 0x8                                           
0x78722b84bac8    498906                  mov [r14], rax                                         
0x78722b84bacb    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84bad5    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n .. 
0x78722b84bad8    498d4710                lea rax, [r15+0x10]                                    
 .. @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ .. 
0x78722b84badc    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ .. 
0x78722b84bae0    488908                  mov [rax], rcx                                         
 ..  o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o .. 
0x78722b84bae3    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84bae7    4983c608                add r14, 0x8                                           
0x78722b84baeb    498906                  mov [r14], rax                                         
 ..  "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + .. 
0x78722b84baee    498b4710                mov rax, [r15+0x10]                                    
0x78722b84baf2    4983c608                add r14, 0x8                                           
0x78722b84baf6    498906                  mov [r14], rax                                         
 .. y_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ .. 
0x78722b84baf9    48b88f525e2b72780000    mov rax, 0x78722b5e528f       < string : 'hey_2_assert' >
0x78722b84bb03    4983c608                add r14, 0x8                                           
0x78722b84bb07    498906                  mov [r14], rax                                         
0x78722b84bb0a    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84bb14    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..  @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_a .. 
0x78722b84bb17    498b47f0                mov rax, [r15-0x10]                                    
0x78722b84bb1b    4983c608                add r14, 0x8                                           
0x78722b84bb1f    498906                  mov [r14], rax                                         
 ..    n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_asser .. 
0x78722b84bb22    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84bb26    4983c608                add r14, 0x8                                           
0x78722b84bb2a    498906                  mov [r14], rax                                         
 ..  @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" a .. 
0x78722b84bb2d    498b4708                mov rax, [r15+0x8]                                     
 ..  @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" asser .. 
0x78722b84bb31    498b4f10                mov rcx, [r15+0x10]                                    
0x78722b84bb35    4803c1                  add rax, rcx                                           
 .. hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert    .. 
0x78722b84bb38    488bc8                  mov rcx, rax                                           
0x78722b84bb3b    498b06                  mov rax, [r14]                                         
0x78722b84bb3e    4983ee08                sub r14, 0x8                                           
0x78722b84bb42    4803c1                  add rax, rcx                                           
 .. y_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert      .. 
0x78722b84bb45    488bc8                  mov rcx, rax                                           
0x78722b84bb48    498b06                  mov rax, [r14]                                         
0x78722b84bb4b    4983ee08                sub r14, 0x8                                           
 .. 2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        .. 
0x78722b84bb4f    4803c1                  add rax, rcx                                           
 .. assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ; .. 
0x78722b84bb52    b901000000              mov ecx, 0x1                                           
 .. sert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bb57    4803c1                  add rax, rcx                                           
0x78722b84bb5a    4983c610                add r14, 0x10                                          
0x78722b84bb5e    498906                  mov [r14], rax                                         
 .. rt" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bb61    498946f8                mov [r14-0x8], rax                                     
 .. assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bb65    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84bb6f    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. sert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bb72    b807000000              mov eax, 0x7                                           
0x78722b84bb77    4983c608                add r14, 0x8                                           
0x78722b84bb7b    498906                  mov [r14], rax                                         
 .. rt  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bb7e    48b8be525e2b72780000    mov rax, 0x78722b5e52be       < string : 'hey_3_assert' >
0x78722b84bb88    4983c608                add r14, 0x8                                           
0x78722b84bb8c    498906                  mov [r14], rax                                         
0x78722b84bb8f    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84bb99    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..  + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bb9c    498b47f0                mov rax, [r15-0x10]                                    
 ..  + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bba0    498b4ff8                mov rcx, [r15-0x8]                                     
 .. up p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bba4    4803c1                  add rax, rcx                                           
 ..  p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bba7    498b4f08                mov rcx, [r15+0x8]                                     
 ..  "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbab    4803c1                  add rax, rcx                                           
 .. hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbae    498b4f10                mov rcx, [r15+0x10]                                    
 .. 3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbb2    4803c1                  add rax, rcx                                           
 .. assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbb5    b901000000              mov ecx, 0x1                                           
 .. sert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbba    4803c1                  add rax, rcx                                           
0x78722b84bbbd    4983c610                add r14, 0x10                                          
0x78722b84bbc1    498906                  mov [r14], rax                                         
 .. rt" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbc4    498946f8                mov [r14-0x8], rax                                     
 .. assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbc8    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84bbd2    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. sert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbd5    b807000000              mov eax, 0x7                                           
0x78722b84bbda    4983c608                add r14, 0x8                                           
0x78722b84bbde    498906                  mov [r14], rax                                         
 .. rt  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bbe1    48b8ed525e2b72780000    mov rax, 0x78722b5e52ed       < string : 'hey_4_assert' >
0x78722b84bbeb    4983c608                add r14, 0x8                                           
0x78722b84bbef    498906                  mov [r14], rax                                         
0x78722b84bbf2    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84bbfc    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84bbff    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84bc03    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84bc07    4983ee10                sub r14, 0x10                                          
 ..  dup p 7 "hey_4_assert" assert        ;  .. 
0x78722b84bc0b    c3                      ret                                                    
Word_Disassemble : word - 'hey' :: codeSize = 386
Word : 0x000078722ab09894 :: Compiled at : 0x000078722b84ba8a
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 98.17 <::
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
beforeHeey
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
afterHeey
DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

testA1 =  0x00007872262001a8
 0x00007872262001a8 0x000078722c065ae0 0x00007872262001a8
 this =  0x00007872262001a8

 t1 @ =  0x00007872262001a8
 t1 =  0x000078722c065ae0
 done showing variables

Dump at : namespaces/test/localsTest.csl : 144.48 :
Dump : Address = 0x00007872262001a8 : Number = 128 :: (little endian dump)
0x00007872262001a8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262001b8 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262001c8 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262001d8 :  00 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007872262001e8 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007872262001f8 :  00 00 00 00 00 00 00 00  05 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200208 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200218 :  00 00 00 00 00 00 00 00  07 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

Dump at : namespaces/test/localsTest.csl : 153.15 :
Dump : Address = 0x00007872262005a8 : Number = 50 :: (little endian dump)
0x00007872262005a8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262005b8 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262005c8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262005d8 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000003 0x0000000000000004
 before test

Using Namespaces :> DLLNodeAlloc DLLNode Buffer Class Root C User int64 arr10 Ar10 Ar9 Ar3 Ar2 Ar1 void Defines cta ct0 ar9 DLLNodeAlloc4 Int DLListClone DLList Integer Pointer Compiler Logic Shell int List Combinators Bits System libc OpenVmTil Lexer Interpreter Debug byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

 array test ok
 0x0000000000000001
Dump at : namespaces/test/localsTest.csl : 162.15 :
Dump : Address = 0x00007872262005a8 : Number = 50 :: (little endian dump)
0x00007872262005a8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262005b8 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262005c8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262005d8 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/localsTest.csl : 165.15 :
Dump : Address = 0x00007872262007a8 : Number = 50 :: (little endian dump)
0x00007872262007a8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262007b8 :  05 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262007c8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007872262007d8 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 0x0000000000000077 0x000078722c065ad0 0x0000000000000001 0x000078722c065ae0 0x000060c889f6dbf0 0x0000000000000001 0x000078722c065ae8 0x0000000000000001 0x000078722c065af8 0x000078722c065ae0 0x0000000000000001 0x000078722c065ae8 0x0000000000000001 0x000078722c065af8 0x0000000000000001 0x0000000000000001 

testing nested locals

 =============================
User.goedel <:> csl compiled word
SourceCode for User.goedel :> 
: goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
Source code file location of goedel : "namespaces/test/localsTest.csl" : 201.2 :: we are now at : namespaces/test/localsTest.csl : 203.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84c38e -- code size = 162 bytes
TypeSignature : 
 -----------------------------
Word :: User.goedel : definition = 0x000078722b84c38e : disassembly at namespaces/test/localsTest.csl : 203.19 :
0x78722b84c38e    4d897e08                mov [r14+0x8], r15                                     
0x78722b84c392    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84c396    4981c618000000          add r14, 0x18                                          
 ..                 : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x78722b84c39d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..               : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x78722b84c3a5    498b4708                mov rax, [r15+0x8]                                     
 ..           : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x78722b84c3a9    b906000000              mov ecx, 0x6                                           
 ..         : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x78722b84c3ae    4803c1                  add rax, rcx                                           
0x78722b84c3b1    4983c610                add r14, 0x10                                          
0x78722b84c3b5    498906                  mov [r14], rax                                         
 ..       : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x78722b84c3b8    498946f8                mov [r14-0x8], rax                                     
 ..   : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x78722b84c3bc    b807000000              mov eax, 0x7                                           
0x78722b84c3c1    4983c608                add r14, 0x8                                           
0x78722b84c3c5    498906                  mov [r14], rax                                         
0x78722b84c3c8    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b84c3d2    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 ..  { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c3d5    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c3df    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c3e2    49c7471003000000        mov qword [r15+0x10], 0x3                              
 .. + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c3ea    498b4710                mov rax, [r15+0x10]                                    
 .. p 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c3ee    b904000000              mov ecx, 0x4                                           
 .. 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c3f3    4803c1                  add rax, rcx                                           
0x78722b84c3f6    4983c610                add r14, 0x10                                          
0x78722b84c3fa    498906                  mov [r14], rax                                         
 .. _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c3fd    498946f8                mov [r14-0x8], rax                                     
 .. ert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c401    b807000000              mov eax, 0x7                                           
0x78722b84c406    4983c608                add r14, 0x8                                           
0x78722b84c40a    498906                  mov [r14], rax                                         
0x78722b84c40d    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b84c417    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 ..  { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c41a    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c424    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b84c427    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84c42b    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x78722b84c42f    c3                      ret                                                    
Word_Disassemble : word - 'goedel' :: codeSize = 162
Word : 0x0000787229705768 :: Compiled at : 0x000078722b84c38e
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 203.19 <::

 goedel ::  7 7
 =============================
User.goedel2 <:> csl compiled word
SourceCode for User.goedel2 :> 
: goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
Source code file location of goedel2 : "namespaces/test/localsTest.csl" : 205.2 :: we are now at : namespaces/test/localsTest.csl : 206.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84c435 -- code size = 220 bytes
TypeSignature : 
 -----------------------------
Word :: User.goedel2 : definition = 0x000078722b84c435 : disassembly at namespaces/test/localsTest.csl : 206.20 :
0x78722b84c435    4d897e08                mov [r14+0x8], r15                                     
0x78722b84c439    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84c43d    4981c618000000          add r14, 0x18                                          
 ..                : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_as .. 
0x78722b84c444    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..              : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_asse .. 
0x78722b84c44c    498b4708                mov rax, [r15+0x8]                                     
 ..          : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert"  .. 
0x78722b84c450    b905000000              mov ecx, 0x5                                           
0x78722b84c455    4803c1                  add rax, rcx                                           
0x78722b84c458    4983c610                add r14, 0x10                                          
0x78722b84c45c    498906                  mov [r14], rax                                         
 ..      : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" asse .. 
0x78722b84c45f    498946f8                mov [r14-0x8], rax                                     
 ..  : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } .. 
0x78722b84c463    b807000000              mov eax, 0x7                                           
0x78722b84c468    4983c608                add r14, 0x8                                           
0x78722b84c46c    498906                  mov [r14], rax                                         
   : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } i .. 
0x78722b84c46f    48b8035d5e2b72780000    mov rax, 0x78722b5e5d03       < string : 'goedel2_1_assert' >
0x78722b84c479    4983c608                add r14, 0x8                                           
0x78722b84c47d    498906                  mov [r14], rax                                         
0x78722b84c480    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84c48a    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c48d    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c497    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. del2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c49a    498b4710                mov rax, [r15+0x10]                                    
0x78722b84c49e    4983c608                add r14, 0x8                                           
0x78722b84c4a2    498906                  mov [r14], rax                                         
 .. _1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4a5    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c4af    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4b2    49c7471003000000        mov qword [r15+0x10], 0x3                              
 .. t" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4ba    498b4710                mov rax, [r15+0x10]                                    
 .. ssert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4be    b904000000              mov ecx, 0x4                                           
0x78722b84c4c3    4803c1                  add rax, rcx                                           
0x78722b84c4c6    4983c610                add r14, 0x10                                          
0x78722b84c4ca    498906                  mov [r14], rax                                         
 .. t p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4cd    498946f8                mov [r14-0x8], rax                                     
 .. } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4d1    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c4db    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4de    b807000000              mov eax, 0x7                                           
0x78722b84c4e3    4983c608                add r14, 0x8                                           
0x78722b84c4e7    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c4ea    48b84b5d5e2b72780000    mov rax, 0x78722b5e5d4b       < string : 'goedel2_2_assert' >
0x78722b84c4f4    4983c608                add r14, 0x8                                           
0x78722b84c4f8    498906                  mov [r14], rax                                         
0x78722b84c4fb    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84c505    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84c508    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84c50c    4d8b7e08                mov r15, [r14+0x8]                                     
 .. up p 7 "goedel2_2_assert" assert } ix ; 
0x78722b84c510    c3                      ret                                                    
Word_Disassemble : word - 'goedel2' :: codeSize = 220
Word : 0x0000787229708e48 :: Compiled at : 0x000078722b84c435
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 206.20 <::

 goedel2 ::  goedel2_1_assert  : ok

 7 0 7 goedel2_2_assert  : ok


 =============================
User.goedel4 <:> csl compiled word
SourceCode for User.goedel4 :> 
: goedel4 (| n ) nl "goedel4 :: " ps nl n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix n @ 6 + 8 _assert } ix { (| n ) n @ p n 3 = n dup @ 4 + dup dup 7 "goedel4_3_assert" assert p = n @ p n @ 7 "goedel4_4_assert" assert } ix n @ dup p return tos ; 
Source code file location of goedel4 : "namespaces/test/localsTest.csl" : 209.2 :: we are now at : namespaces/test/localsTest.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84c516 -- code size = 622 bytes
TypeSignature : -> Integer 
 -----------------------------
Word :: User.goedel4 : definition = 0x000078722b84c516 : disassembly at namespaces/test/localsTest.csl : 229.21 :
0x78722b84c516    4d897e08                mov [r14+0x8], r15                                     
0x78722b84c51a    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84c51e    4981c628000000          add r14, 0x28                                          
0x78722b84c525    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84c52f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84c539    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..              : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" asse .. 
0x78722b84c53c    48b8475e5e2b72780000    mov rax, 0x78722b5e5e47       < string : 'goedel4 :: ' >
0x78722b84c546    4983c608                add r14, 0x8                                           
0x78722b84c54a    498906                  mov [r14], rax                                         
   : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| .. 
0x78722b84c54d    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84c557    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
: goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n  .. 
0x78722b84c55a    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84c564    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84c56e    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 .. 
0x78722b84c571    49c7470809000000        mov qword [r15+0x8], 0x9                               
 .. ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x78722b84c579    498b4710                mov rax, [r15+0x10]                                    
0x78722b84c57d    4983c608                add r14, 0x8                                           
0x78722b84c581    498906                  mov [r14], rax                                         
 .. l     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_ .. 
0x78722b84c584    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c58e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_asse .. 
0x78722b84c591    49c7471002000000        mov qword [r15+0x10], 0x2                              
 .. 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert .. 
0x78722b84c599    498b4710                mov rax, [r15+0x10]                                    
0x78722b84c59d    4983c610                add r14, 0x10                                          
0x78722b84c5a1    498906                  mov [r14], rax                                         
 ..     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" as .. 
0x78722b84c5a4    498946f8                mov [r14-0x8], rax                                     
 .. {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert .. 
0x78722b84c5a8    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c5b2    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } .. 
0x78722b84c5b5    b802000000              mov eax, 0x2                                           
0x78722b84c5ba    4983c608                add r14, 0x8                                           
0x78722b84c5be    498906                  mov [r14], rax                                         
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } i .. 
0x78722b84c5c1    48b8855e5e2b72780000    mov rax, 0x78722b5e5e85       < string : 'goedel4_1_assert' >
0x78722b84c5cb    4983c608                add r14, 0x8                                           
0x78722b84c5cf    498906                  mov [r14], rax                                         
0x78722b84c5d2    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84c5dc    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. del4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { .. 
0x78722b84c5df    498b4718                mov rax, [r15+0x18]                                    
0x78722b84c5e3    4983c608                add r14, 0x8                                           
0x78722b84c5e7    498906                  mov [r14], rax                                         
 .. _1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (|  .. 
0x78722b84c5ea    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c5f4    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )    .. 
0x78722b84c5f7    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. t" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )      .. 
0x78722b84c5ff    498b4718                mov rax, [r15+0x18]                                    
 .. ssert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          .. 
0x78722b84c603    b904000000              mov ecx, 0x4                                           
0x78722b84c608    4803c1                  add rax, rcx                                           
0x78722b84c60b    4983c610                add r14, 0x10                                          
0x78722b84c60f    498906                  mov [r14], rax                                         
 .. t        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ .. 
0x78722b84c612    498946f8                mov [r14-0x8], rax                                     
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p   .. 
0x78722b84c616    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c620    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p     .. 
0x78722b84c623    b807000000              mov eax, 0x7                                           
0x78722b84c628    4983c608                add r14, 0x8                                           
0x78722b84c62c    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p       .. 
0x78722b84c62f    48b8cd5e5e2b72780000    mov rax, 0x78722b5e5ecd       < string : 'goedel4_2_assert' >
0x78722b84c639    4983c608                add r14, 0x8                                           
0x78722b84c63d    498906                  mov [r14], rax                                         
0x78722b84c640    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84c64a    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84c64d    498b4710                mov rax, [r15+0x10]                                    
 .. del4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup d .. 
0x78722b84c651    b906000000              mov ecx, 0x6                                           
 .. l4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup .. 
0x78722b84c656    4803c1                  add rax, rcx                                           
0x78722b84c659    4983c608                add r14, 0x8                                           
0x78722b84c65d    498906                  mov [r14], rax                                         
 .. _2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 .. 
0x78722b84c660    b808000000              mov eax, 0x8                                           
0x78722b84c665    4983c608                add r14, 0x8                                           
0x78722b84c669    498906                  mov [r14], rax                                         
0x78722b84c66c    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b84c676    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b84c679    498b4720                mov rax, [r15+0x20]                                    
0x78722b84c67d    4983c608                add r14, 0x8                                           
0x78722b84c681    498906                  mov [r14], rax                                         
 .. t      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =  .. 
0x78722b84c684    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c68e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..  { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n  .. 
0x78722b84c691    49c7472003000000        mov qword [r15+0x20], 0x3                              
0x78722b84c699    498d4720                lea rax, [r15+0x20]                                    
0x78722b84c69d    4983c610                add r14, 0x10                                          
0x78722b84c6a1    498906                  mov [r14], rax                                         
 ..        n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4 .. 
0x78722b84c6a4    498946f8                mov [r14-0x8], rax                                     
 ..    n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_a .. 
0x78722b84c6a8    498b06                  mov rax, [r14]                                         
0x78722b84c6ab    488b00                  mov rax, [rax]                                         
0x78722b84c6ae    498906                  mov [r14], rax                                         
 ..  @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_asser .. 
0x78722b84c6b1    49830604                add qword [r14], 0x4                                   
0x78722b84c6b5    498b06                  mov rax, [r14]                                         
0x78722b84c6b8    4983c608                add r14, 0x8                                           
0x78722b84c6bc    4983c608                add r14, 0x8                                           
0x78722b84c6c0    498906                  mov [r14], rax                                         
 ..  =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix .. 
0x78722b84c6c3    b807000000              mov eax, 0x7                                           
0x78722b84c6c8    4983c608                add r14, 0x8                                           
0x78722b84c6cc    498906                  mov [r14], rax                                         
 ..          n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix   .. 
0x78722b84c6cf    48b8195f5e2b72780000    mov rax, 0x78722b5e5f19       < string : 'goedel4_3_assert' >
0x78722b84c6d9    4983c608                add r14, 0x8                                           
0x78722b84c6dd    498906                  mov [r14], rax                                         
0x78722b84c6e0    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84c6ea    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84c6ed    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c6f7    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b84c6fa    498b0e                  mov rcx, [r14]                                         
0x78722b84c6fd    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84c701    4983ee10                sub r14, 0x10                                          
0x78722b84c705    488908                  mov [rax], rcx                                         
0x78722b84c708    498b4720                mov rax, [r15+0x20]                                    
0x78722b84c70c    4983c608                add r14, 0x8                                           
0x78722b84c710    498906                  mov [r14], rax                                         
 ..  assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c713    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c71d    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ssert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c720    498b4720                mov rax, [r15+0x20]                                    
0x78722b84c724    4983c608                add r14, 0x8                                           
0x78722b84c728    498906                  mov [r14], rax                                         
 .. t        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c72b    b807000000              mov eax, 0x7                                           
0x78722b84c730    4983c608                add r14, 0x8                                           
0x78722b84c734    498906                  mov [r14], rax                                         
 ..        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c737    48b8525f5e2b72780000    mov rax, 0x78722b5e5f52       < string : 'goedel4_4_assert' >
0x78722b84c741    4983c608                add r14, 0x8                                           
0x78722b84c745    498906                  mov [r14], rax                                         
0x78722b84c748    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84c752    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84c755    498b4708                mov rax, [r15+0x8]                                     
0x78722b84c759    4983c610                add r14, 0x10                                          
0x78722b84c75d    498906                  mov [r14], rax                                         
 .. el4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c760    498946f8                mov [r14-0x8], rax                                     
 .. 4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c764    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84c76e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ert" assert    } ix      n @ dup p    return tos ;  .. 
0x78722b84c771    498b06                  mov rax, [r14]                                         
0x78722b84c774    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84c778    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84c77c    4983c608                add r14, 0x8                                           
0x78722b84c780    498906                  mov [r14], rax                                         
 ..     } ix      n @ dup p    return tos ;  .. 
0x78722b84c783    c3                      ret                                                    
Word_Disassemble : word - 'goedel4' :: codeSize = 622
Word : 0x000078722970cd98 :: Compiled at : 0x000078722b84c516
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 229.21 <::

 goedel4 :: 
 132431716863384 2 goedel4_1_assert  : ok

 132431760218840 7 goedel4_2_assert  : ok

 132431749140739 goedel4_3_assert  : ok

 132431760218840 7 goedel4_4_assert  : ok

 9 goedel4_0_assert  : ok

 
goedel4 :: output should have read : 
'junk' 2 'junk' 7 'junk' 7 7 9
 goedel5 :: 
 106414424382448 2 goedel5_1_assert  : ok

 132431749142646 7 goedel5_2_assert  : ok

 goedel5_3_assert  : ok

 7 7 goedel5_4_assert  : ok

 9 goedel5_0_assert  : ok

 
goedel5 :: output should read : junk' 2 'junk' 7 7 9
 goedel6 :: 
 106414424382448 2 goedel6_1_assert  : ok

 132431749142646 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 7 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok

 
goedel6 :: goedel6 output should read : 
'junk' 2 'junk' 7 7 'junk' 9
 goedel7 :: 

 goedel7 :: 
 0 2 goedel7_1_assert  : ok

 0 7 goedel7_2_assert  : ok

 18 goedel7_0_assert  : ok

 
goedel7 :: goedel7 output should read : 
'junk' 2 'junk' 7 18
including namespaces/test/file.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Lexer.ofile <:> csl compiled word, prefix
SourceCode for Lexer.ofile :> 
: ofile ( name | file input result ) input 0 = "open/read/print :: " ps name @ ps nl file name @ fopen = nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile file @ fclose ; 
Source code file location of ofile : "namespaces/test/file.csl" : 5.2 :: we are now at : namespaces/test/file.csl : 13.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84cdc2 -- code size = 356 bytes
TypeSignature : 
 -----------------------------
Word :: Lexer.ofile : definition = 0x000078722b84cdc2 : disassembly at namespaces/test/file.csl : 13.19 :
0x78722b84cdc2    4d897e08                mov [r14+0x8], r15                                     
0x78722b84cdc6    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84cdca    4981c620000000          add r14, 0x20                                          
 .. ame | file input result )     input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1  .. 
0x78722b84cdd1    49c7471000000000        mov qword [r15+0x10], 0x0                              
0x78722b84cdd9    48b8df6d5e2b72780000    mov rax, 0x78722b5e6ddf       < string : 'open/read/print :: ' >
0x78722b84cde3    4983c608                add r14, 0x8                                           
0x78722b84cde7    498906                  mov [r14], rax                                         
 ..   input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { res .. 
0x78722b84cdea    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84cdf4    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. nput 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result .. 
0x78722b84cdf7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84cdfb    4983c608                add r14, 0x8                                           
0x78722b84cdff    498906                  mov [r14], rax                                         
 .. =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == .. 
0x78722b84ce02    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84ce0c    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..    "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == }  .. 
0x78722b84ce0f    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84ce19    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84ce23    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. n/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile .. 
0x78722b84ce26    498d4708                lea rax, [r15+0x8]                                     
0x78722b84ce2a    4983c608                add r14, 0x8                                           
0x78722b84ce2e    498906                  mov [r14], rax                                         
 .. d/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      .. 
0x78722b84ce31    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84ce35    4983c608                add r14, 0x8                                           
0x78722b84ce39    498906                  mov [r14], rax                                         
 ..  :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ .. 
0x78722b84ce3c    49bb1042f289c8600000    mov r11, 0x60c889f24210                                
0x78722b84ce46    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84ce50    49ffd2                  call r10                      < File.fopen : 0x000060c889f24210 >
0x78722b84ce53    498b0e                  mov rcx, [r14]                                         
0x78722b84ce56    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ce5a    4983ee10                sub r14, 0x10                                          
 .. ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclos .. 
0x78722b84ce5e    488908                  mov [rax], rcx                                         
0x78722b84ce61    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84ce6b    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84ce75    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. s nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ce78    498d4718                lea rax, [r15+0x18]                                    
0x78722b84ce7c    4983c608                add r14, 0x8                                           
0x78722b84ce80    498906                  mov [r14], rax                                         
 ..   file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ce83    498b4708                mov rax, [r15+0x8]                                     
0x78722b84ce87    4983c608                add r14, 0x8                                           
0x78722b84ce8b    498906                  mov [r14], rax                                         
 .. name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ce8e    498d4710                lea rax, [r15+0x10]                                    
0x78722b84ce92    4983c608                add r14, 0x8                                           
0x78722b84ce96    498906                  mov [r14], rax                                         
 ..  fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ce99    b801000000              mov eax, 0x1                                           
0x78722b84ce9e    4983c608                add r14, 0x8                                           
0x78722b84cea2    498906                  mov [r14], rax                                         
 .. open =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cea5    49bb6042f289c8600000    mov r11, 0x60c889f24260                                
0x78722b84ceaf    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84ceb9    49ffd2                  call r10                      < File.fread : 0x000060c889f24260 >
0x78722b84cebc    498b0e                  mov rcx, [r14]                                         
0x78722b84cebf    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84cec3    4983ee10                sub r14, 0x10                                          
 ..      nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cec7    488908                  mov [rax], rcx                                         
 ..    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ceca    498b4710                mov rax, [r15+0x10]                                    
0x78722b84cece    4983c608                add r14, 0x8                                           
0x78722b84ced2    498906                  mov [r14], rax                                         
 .. result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ced5    49bbe007f289c8600000    mov r11, 0x60c889f207e0                                
0x78722b84cedf    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84cee9    49ffd2                  call r10                      < Io.emit : 0x000060c889f207e0 >
 .. le @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84ceec    49837f1801              cmp qword [r15+0x18], 0x1                              
 .. read = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cef1    7485                    jz 0x2b84ce78                 < Lexer.ofile+182 >
0x78722b84cef3    0f1f4000                nop [rax]                                              
 .. emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cef7    498b4708                mov rax, [r15+0x8]                                     
 .. 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cefb    4983c608                add r14, 0x8                                           
0x78722b84ceff    498906                  mov [r14], rax                                         
 .. { result @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cf02    49bb4042f289c8600000    mov r11, 0x60c889f24240                                
0x78722b84cf0c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84cf16    49ffd2                  call r10                      < File.fclose : 0x000060c889f24240 >
0x78722b84cf19    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84cf1d    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84cf21    4983ee08                sub r14, 0x8                                           
 .. t @ 1 == } doWhile      file @ fclose ;  .. 
0x78722b84cf25    c3                      ret                                                    
Word_Disassemble : word - 'ofile' :: codeSize = 356
Word : 0x0000787229731db8 :: Compiled at : 0x000078722b84cdc2
 =============================
::> 'wdiss' was called at namespaces/test/file.csl 13.19 <::
 open/read/print ::  namespaces/test/file.csl

5
#if 1 // already added to .init.csl
C Compiler Int Lexer
jcc8_Off
: ofile ( name | file input result )
    input 0 =
    "open/read/print :: " ps name @ ps nl
    file name @ fopen =
    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile 
    file @ fclose
; prefix
#endif 
' ofile find wdiss //pause
ofile ( "namespaces/test/file.csl" )
//pause
: hi 1 2 + p ;
: hey hi hi ;
: heey hey hey ;
heey
2 + 7 assertStkChk // stack checking


 3 3 3 3
including namespaces/test/dobject.csl at namespaces/test/initTest.csl : 86.41 ...
 
dynamic object test
 object new slot test :   : ok

 object clone test :   : ok

 object clone test2 :   : ok

 object clone test3 :   : ok

 object clone test4 :   : ok

 object clone test5 :   : ok

 object compile test6 :   : ok

 object compile test7 :   : ok

 object compile test8 :   : ok


including namespaces/test/control.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Control.abrkcon <:> csl compiled word
SourceCode for Control.abrkcon :> 
: abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
Source code file location of abrkcon : "namespaces/test/control.csl" : 14.2 :: we are now at : namespaces/test/control.csl : 15.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84d0f8 -- code size = 150 bytes
TypeSignature : 
 -----------------------------
Word :: Control.abrkcon : definition = 0x000078722b84d0f8 : disassembly at namespaces/test/control.csl : 15.20 :
 ..                         : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d0f8    48b8a8c7732972780000    mov rax, 0x78722973c7a8                                
0x78722b84d102    488b00                  mov rax, [rax]                                         
 ..                   : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d105    4883f800                cmp rax, 0x0                                           
 ..                : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d109    750e                    jnz 0x2b84d119                < Control.abrkcon+33 >
0x78722b84d10b    0f1f4000                nop [rax]                                              
 ..            : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d10f    e979000000              jmp 0x78722b84d18d            < Control.abrkcon+149 >
 ..      : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d114    e956000000              jmp 0x78722b84d16f            < Control.abrkcon+119 >
 ..  : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d119    48b8a8c7732972780000    mov rax, 0x78722973c7a8                                
0x78722b84d123    488b00                  mov rax, [rax]                                         
0x78722b84d126    4983c608                add r14, 0x8                                           
0x78722b84d12a    498906                  mov [r14], rax                                         
 : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x78722b84d12d    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d137    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. kcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d13a    48b8a8c7732972780000    mov rax, 0x78722973c7a8                                
0x78722b84d144    4983c610                add r14, 0x10                                          
0x78722b84d148    498906                  mov [r14], rax                                         
 .. on { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d14b    498946f8                mov [r14-0x8], rax                                     
 ..  { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d14f    498b06                  mov rax, [r14]                                         
0x78722b84d152    488b00                  mov rax, [rax]                                         
0x78722b84d155    498906                  mov [r14], rax                                         
 ..  @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d158    49832e01                sub qword [r14], 0x1                                   
 .. reak } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d15c    498b0e                  mov rcx, [r14]                                         
0x78722b84d15f    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84d163    4983ee10                sub r14, 0x10                                          
 ..  0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d167    488908                  mov [rax], rcx                                         
 ..  == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d16a    e989ffffff              jmp 0x78722b84d0f8            < Control.abrkcon : 0x000078722b84d0f8 >
 .. x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d16f    b802000000              mov eax, 0x2                                           
0x78722b84d174    4983c608                add r14, 0x8                                           
0x78722b84d178    498906                  mov [r14], rax                                         
 .. @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d17b    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d185    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d188    e96bffffff              jmp 0x78722b84d0f8            < Control.abrkcon : 0x000078722b84d0f8 >
 ..  @ 1 - = continue } ifElse 2 p } loop ; 
0x78722b84d18d    c3                      ret                                                    
Word_Disassemble : word - 'abrkcon' :: codeSize = 150
Word : 0x000078722973c8c8 :: Compiled at : 0x000078722b84d0f8
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 15.20 <::
 10 9 8 7 6 5 4 3 2 1
 =============================
Control.abrk0 <:> csl compiled word
SourceCode for Control.abrk0 :> 
: abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
Source code file location of abrk0 : "namespaces/test/control.csl" : 17.2 :: we are now at : namespaces/test/control.csl : 18.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84d193 -- code size = 110 bytes
TypeSignature : 
 -----------------------------
Word :: Control.abrk0 : definition = 0x000078722b84d193 : disassembly at namespaces/test/control.csl : 18.10 :
0x78722b84d193    4d897e08                mov [r14+0x8], r15                                     
0x78722b84d197    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84d19b    4981c608000000          add r14, 0x8                                           
 ..  ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1a2    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..            : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x78722b84d1a7    750e                    jnz 0x2b84d1b7                < Control.abrk0+36 >
0x78722b84d1a9    0f1f4000                nop [rax]                                              
 ..        : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x78722b84d1ad    e942000000              jmp 0x78722b84d1f4            < Control.abrk0+97 >
 ..  : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x78722b84d1b2    e922000000              jmp 0x78722b84d1d9            < Control.abrk0+70 >
 : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x78722b84d1b7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d1bb    4983c608                add r14, 0x8                                           
0x78722b84d1bf    498906                  mov [r14], rax                                         
 ..  ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1c2    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d1cc    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1cf    49836ff801              sub qword [r15-0x8], 0x1                               
 .. { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1d4    e9c9ffffff              jmp 0x78722b84d1a2            < Control.abrk0+15 >
 .. ak } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1d9    b8020000004983c608      mov rax, 0x8c6834900000002                              
0x78722b84d1e2    498906                  mov [r14], rax                                         
 ..  } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1e5    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d1ef    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d1f2    ebae                    jmp 0x78722b84d1a2            < Control.abrk0+15 >
0x78722b84d1f4    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84d1f8    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84d1fc    4983ee08                sub r14, 0x8                                           
 .. p x 1 -= continue } ifElse 2 p } loop ; 
0x78722b84d200    c3                      ret                                                    
Word_Disassemble : word - 'abrk0' :: codeSize = 110
Word : 0x000078722973ef98 :: Compiled at : 0x000078722b84d193
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 18.10 <::

 10 9 8 7 6 5 4 3 2 1
 =============================
Control.ct00 <:> csl compiled word
SourceCode for Control.ct00 :> 
: ct00 ( n | j ) { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p } for ; 
Source code file location of ct00 : "namespaces/test/control.csl" : 34.2 :: we are now at : namespaces/test/control.csl : 41.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84d2f7 -- code size = 118 bytes
TypeSignature : 
 -----------------------------
Word :: Control.ct00 : definition = 0x000078722b84d2f7 : disassembly at namespaces/test/control.csl : 41.17 :
0x78722b84d2f7    4d897e08                mov [r14+0x8], r15                                     
0x78722b84d2fb    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84d2ff    4981c610000000          add r14, 0x10                                          
 ..           : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x78722b84d306    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..     : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x78722b84d30e    498b4708                mov rax, [r15+0x8]                                     
 .. : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x78722b84d312    498b4ff8                mov rcx, [r15-0x8]                                     
: ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x78722b84d316    483bc1                  cmp rax, rcx                                           
 .. ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x78722b84d319    7f45                    jg 0x2b84d360                 < Control.ct00+105 >
0x78722b84d31b    0f1f4000                nop [rax]                                              
0x78722b84d31f    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d323    4983c608                add r14, 0x8                                           
0x78722b84d327    498906                  mov [r14], rax                                         
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x78722b84d32a    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d334    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x78722b84d337    498b4708                mov rax, [r15+0x8]                                     
0x78722b84d33b    4983c608                add r14, 0x8                                           
0x78722b84d33f    498906                  mov [r14], rax                                         
 ..  <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x78722b84d342    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d34c    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x78722b84d34f    49ff4708                inc qword [r15+0x8]                                    
 ..       { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x78722b84d353    498b4708                mov rax, [r15+0x8]                                     
0x78722b84d357    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b84d35b    483bc1                  cmp rax, rcx                                           
0x78722b84d35e    7ebf                    jle 0x2b84d31f                < Control.ct00+40 >
0x78722b84d360    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84d364    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84d368    4983ee08                sub r14, 0x8                                           
 ..   {        n @ p j @ p      }     for ; 
0x78722b84d36c    c3                      ret                                                    
Word_Disassemble : word - 'ct00' :: codeSize = 118
Word : 0x0000787229743758 :: Compiled at : 0x000078722b84d2f7
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 41.17 <::
 17 1 17 2 17 3 17 4 17 5 17 6 17 7 17 8 17 9 17 10 17 11 17 12 17 13 17 14 17 15 17 16 17 17
 =============================
Control.ct0 <:> csl compiled word
SourceCode for Control.ct0 :> 
: ct0 ( n | j ) nl "ct0 : " ps nl { label: test1 "ct0 before goto/label works" ps nl goto: leave } _ { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse } for label: leave "ct0" n @ j @ leaving ; 
Source code file location of ct0 : "namespaces/test/control.csl" : 44.2 :: we are now at : namespaces/test/control.csl : 60.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84d372 -- code size = 412 bytes
TypeSignature : 
 -----------------------------
Word :: Control.ct0 : definition = 0x000078722b84d372 : disassembly at namespaces/test/control.csl : 60.16 :
0x78722b84d372    4d897e08                mov [r14+0x8], r15                                     
0x78722b84d376    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84d37a    4981c610000000          add r14, 0x10                                          
0x78722b84d381    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d38b    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d395    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..               : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          go .. 
0x78722b84d398    48b810775e2b72780000    mov rax, 0x78722b5e7710       < string : 'ct0 : ' >
0x78722b84d3a2    4983c608                add r14, 0x8                                           
0x78722b84d3a6    498906                  mov [r14], rax                                         
 ..      : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave .. 
0x78722b84d3a9    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84d3b3    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..   : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave    .. 
0x78722b84d3b6    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d3c0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d3ca    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b84d3cd    e93b000000              jmp 0x78722b84d40d            < Control.ct0+155 >
0x78722b84d3d2    48b84f775e2b72780000    mov rax, 0x78722b5e774f       < string : 'ct0 before goto/label works' >
0x78722b84d3dc    4983c608                add r14, 0x8                                           
0x78722b84d3e0    498906                  mov [r14], rax                                         
 ..         "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p  .. 
0x78722b84d3e3    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84d3ed    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..      "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p     .. 
0x78722b84d3f0    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d3fa    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d404    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b84d407    e9c1000000              jmp 0x78722b84d4cd            < Control.ct0+347 >
0x78722b84d40c    c3                      ret                                                    
 ..        goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : got .. 
0x78722b84d40d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/labe .. 
0x78722b84d415    498b4708                mov rax, [r15+0x8]                                     
 .. o: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \' .. 
0x78722b84d419    498b4ff8                mov rcx, [r15-0x8]                                     
 .. eave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' .. 
0x78722b84d41d    483bc1                  cmp rax, rcx                                           
 .. e      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' -> .. 
0x78722b84d420    0f8fa7000000            jg 0x78722b84d4cd             < Control.ct0+347 >
0x78722b84d426    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d42a    4983c608                add r14, 0x8                                           
0x78722b84d42e    498906                  mov [r14], rax                                         
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "contin .. 
0x78722b84d431    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d43b    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continui .. 
0x78722b84d43e    498b4708                mov rax, [r15+0x8]                                     
0x78722b84d442    4983c608                add r14, 0x8                                           
0x78722b84d446    498906                  mov [r14], rax                                         
 ..  <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing c .. 
0x78722b84d449    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d453    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifE .. 
0x78722b84d456    498b47f8                mov rax, [r15-0x8]                                     
 ..    {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse  .. 
0x78722b84d45a    498b4f08                mov rcx, [r15+0x8]                                     
 ..         n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse      .. 
0x78722b84d45e    483bc1                  cmp rax, rcx                                           
 ..      n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }   .. 
0x78722b84d461    7543                    jnz 0x2b84d4a6                < Control.ct0+308 >
0x78722b84d463    0f1f4000                nop [rax]                                              
 ..  n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     f .. 
0x78722b84d467    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d471    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d47b    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for  .. 
0x78722b84d47e    48b8ae775e2b72780000    mov rax, 0x78722b5e77ae       < string : 'testing ct0 : goto/label 'hi' ->' >
0x78722b84d488    4983c608                add r14, 0x8                                           
0x78722b84d48c    498906                  mov [r14], rax                                         
 ..  "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ l .. 
0x78722b84d48f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84d499    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. esting ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leav .. 
0x78722b84d49c    e931ffffff              jmp 0x78722b84d3d2            < Control.ct0+96 >
 ..  goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d4a1    e91e000000              jmp 0x78722b84d4c4            < Control.ct0+338 >
 .. o/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d4a6    48b803785e2b72780000    mov rax, 0x78722b5e7803       < string : 'continuing ct0' >
0x78722b84d4b0    4983c608                add r14, 0x8                                           
0x78722b84d4b4    498906                  mov [r14], rax                                         
 .. " ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d4b7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84d4c1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps g .. 
0x78722b84d4c4    49ff4708                inc qword [r15+0x8]                                    
 .. _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto .. 
0x78722b84d4c8    e948ffffff              jmp 0x78722b84d415            < Control.ct0+163 >
0x78722b84d4cd    48b82f785e2b72780000    mov rax, 0x78722b5e782f       < string : 'ct0' >
0x78722b84d4d7    4983c608                add r14, 0x8                                           
0x78722b84d4db    498906                  mov [r14], rax                                         
 .. }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d4de    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d4e2    4983c608                add r14, 0x8                                           
0x78722b84d4e6    498906                  mov [r14], rax                                         
 ..   for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d4e9    498b4708                mov rax, [r15+0x8]                                     
0x78722b84d4ed    4983c608                add r14, 0x8                                           
0x78722b84d4f1    498906                  mov [r14], rax                                         
 .. r     label: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d4f4    49ba06d2842b72780000    mov r10, 0x78722b84d206                                
0x78722b84d4fe    49ffd2                  call r10                      < Control.leaving : 0x000078722b84d206 >
0x78722b84d501    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84d505    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84d509    4983ee08                sub r14, 0x8                                           
 .. bel: leave      "ct0" n @ j @ leaving ;  .. 
0x78722b84d50d    c3                      ret                                                    
Word_Disassemble : word - 'ct0' :: codeSize = 412
Word : 0x0000787229746558 :: Compiled at : 0x000078722b84d372
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 60.16 <::

 ct0 : 
 17 1 continuing ct0 17 2 continuing ct0 17 3 continuing ct0 17 4 continuing ct0 17 5 continuing ct0 17 6 continuing ct0 17 7 continuing ct0 17 8 continuing ct0 17 9 continuing ct0 17 10 continuing ct0 17 11 continuing ct0 17 12 continuing ct0 17 13 continuing ct0 17 14 continuing ct0 17 15 continuing ct0 17 16 continuing ct0 17 17
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000078722c065b00, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b00 > = 0x000078722c065ad8
  DataStack   [  -1 ] < 0x000078722c065af8 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x000078722c065af0 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x000078722c065ae8 > = 0x000078722b5e782f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000078722c065ae0 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -6 ] < 0x000078722c065ad0 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000078722c065ab8 > = 0x0000000000000005
 leaving ct0 n = 17 j =  17
DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000078722c065b00, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b00 > = 0x000078722c065ad8
  DataStack   [  -1 ] < 0x000078722c065af8 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x000078722c065af0 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x000078722c065ae8 > = 0x000078722b5e782f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000078722c065ae0 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -6 ] < 0x000078722c065ad0 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct1 : 
 17 1 continuing ct1 17 2 continuing ct1 17 3 continuing ct1 17 4 continuing ct1 17 5 continuing ct1 17 6 continuing ct1 17 7 continuing ct1 17 8 continuing ct1 17 9 continuing ct1 17 10 continuing ct1 17 11 continuing ct1 17 12 continuing ct1 17 13 continuing ct1 17 14 continuing ct1 17 15 continuing ct1 17 16 continuing ct1 17 17
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

 =============================
Control.hic2 <:> csl compiled word
SourceCode for Control.hic2 :> 
: hic2 ( n ) nl "hic2 : start " ps nl s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p nl "hic2 : done " ps nl ; 
Source code file location of hic2 : "namespaces/test/control.csl" : 83.2 :: we are now at : namespaces/test/control.csl : 88.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84d762 -- code size = 438 bytes
TypeSignature : 
 -----------------------------
Word :: Control.hic2 : definition = 0x000078722b84d762 : disassembly at namespaces/test/control.csl : 88.17 :
0x78722b84d762    4d897e08                mov [r14+0x8], r15                                     
0x78722b84d766    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84d76a    4981c608000000          add r14, 0x8                                           
0x78722b84d771    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d77b    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d785    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..                  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps .. 
0x78722b84d788    48b8b37d5e2b72780000    mov rax, 0x78722b5e7db3       < string : 'hic2 : start ' >
0x78722b84d792    4983c608                add r14, 0x8                                           
0x78722b84d796    498906                  mov [r14], rax                                         
 ..  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  .. 
0x78722b84d799    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84d7a3    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  .. 
0x78722b84d7a6    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d7b0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d7ba    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b84d7bd    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b84d7c7    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d7d1    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 .. )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d7d4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d7d8    4983c608                add r14, 0x8                                           
0x78722b84d7dc    498906                  mov [r14], rax                                         
 ..    nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d7df    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d7e9    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d7ec    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d7f0    4983c608                add r14, 0x8                                           
0x78722b84d7f4    498906                  mov [r14], rax                                         
 .. "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d7f7    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b84d801    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d80b    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 .. ic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d80e    49ba72d3842b72780000    mov r10, 0x78722b84d372                                
0x78722b84d818    49ffd2                  call r10                      < Control.ct0 : 0x000078722b84d372 >
 .. : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d81b    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b84d825    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d82f    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 .. start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d832    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d836    4983c608                add r14, 0x8                                           
0x78722b84d83a    498906                  mov [r14], rax                                         
 .. t " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d83d    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b84d847    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d851    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 .. " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d854    49ba13d5842b72780000    mov r10, 0x78722b84d513                                
0x78722b84d85e    49ffd2                  call r10                      < Control.ct1 : 0x000078722b84d513 >
 ..  nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d861    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d865    4983c608                add r14, 0x8                                           
0x78722b84d869    498906                  mov [r14], rax                                         
 ..     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d86c    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b84d876    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d880    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 ..   s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d883    49ba9bd6842b72780000    mov r10, 0x78722b84d69b                                
0x78722b84d88d    49ffd2                  call r10                      < Control.ct2 : 0x000078722b84d69b >
 .. n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d890    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b84d89a    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d8a4    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 .. @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d8a7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84d8ab    4983c608                add r14, 0x8                                           
0x78722b84d8af    498906                  mov [r14], rax                                         
 .. n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d8b2    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84d8bc    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b84d8bf    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d8c9    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d8d3    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d8d6    48b8e07d5e2b72780000    mov rax, 0x78722b5e7de0       < string : 'hic2 : done ' >
0x78722b84d8e0    4983c608                add r14, 0x8                                           
0x78722b84d8e4    498906                  mov [r14], rax                                         
 ..  s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d8e7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84d8f1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d8f4    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84d8fe    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84d908    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b84d90b    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84d90f    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84d913    4983ee08                sub r14, 0x8                                           
 .. s n @ p      nl "hic2 : done " ps nl  ; 
0x78722b84d917    c3                      ret                                                    
Word_Disassemble : word - 'hic2' :: codeSize = 438
Word : 0x0000787229755218 :: Compiled at : 0x000078722b84d762
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 88.17 <::

 hic2 : start 

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005
 3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct0 : 
 3 1 continuing ct0 3 2 continuing ct0 3 3
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000078722c065b10, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b10 > = 0x000078722c065ae8
  DataStack   [  -1 ] < 0x000078722c065b08 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000078722c065b00 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000078722c065af8 > = 0x000078722b5e782f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000078722c065af0 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x000078722c065ae8 > = 0x000078722c065ad8
  DataStack   [  -6 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -8 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000078722c065ab8 > = 0x0000000000000005
 leaving ct0 n = 3 j =  3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000078722c065b10, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b10 > = 0x000078722c065ae8
  DataStack   [  -1 ] < 0x000078722c065b08 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000078722c065b00 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000078722c065af8 > = 0x000078722b5e782f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000078722c065af0 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x000078722c065ae8 > = 0x000078722c065ad8
  DataStack   [  -6 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -8 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct1 : 
 3 1 continuing ct1 3 2 continuing ct1 3 3
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005
 3
 hic2 : done 

 hic2 : start 

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005
 7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct0 : 
 7 1 continuing ct0 7 2 continuing ct0 7 3 continuing ct0 7 4 continuing ct0 7 5 continuing ct0 7 6 continuing ct0 7 7
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000078722c065b10, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b10 > = 0x000078722c065ae8
  DataStack   [  -1 ] < 0x000078722c065b08 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065b00 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065af8 > = 0x000078722b5e782f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000078722c065af0 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x000078722c065ae8 > = 0x000078722c065ad8
  DataStack   [  -6 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -8 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000078722c065ab8 > = 0x0000000000000005
 leaving ct0 n = 7 j =  7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000078722c065b10, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b10 > = 0x000078722c065ae8
  DataStack   [  -1 ] < 0x000078722c065b08 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065b00 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065af8 > = 0x000078722b5e782f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000078722c065af0 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x000078722c065ae8 > = 0x000078722c065ad8
  DataStack   [  -6 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -8 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct1 : 
 7 1 continuing ct1 7 2 continuing ct1 7 3 continuing ct1 7 4 continuing ct1 7 5 continuing ct1 7 6 continuing ct1 7 7
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000078722c065ae0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -2 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000078722c065ab8 > = 0x0000000000000005
 7
 hic2 : done 

 7
 3
 2
 '1
 1
 77
 7
 9
 9
 8

 7
 7
 3
 2
 1
 77
 3
 8
 9

 =============================
C_Syntax.csMatchExWithReturn <:> csl compiled word
SourceCode for C_Syntax.csMatchExWithReturn :> 
void csMatchExWithReturn ( n | x rtn ) { x = 1111 ; match ( n ) { case '1 { nl ; p (1) ; rtn = x ; } case '2 { nl ; p (2) ; rtn = n ; } case '3 { nl ; p (3) ; rtn = x ; } case 3 { nl ; p (3) ; rtn = n ; } case 77 { nl ; p (77) ; rtn = n ; } case 'seven { nl ; p (7) ; rtn = n ; } case 'eight { nl ; p (8) ; rtn = n ; } case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; } case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; } case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; } } p ( x - 103 ) ; return rtn ; } 
Source code file location of csMatchExWithReturn : "namespaces/test/control.csl" : 154.20 :: we are now at : namespaces/test/control.csl : 173.24
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ddb7 -- code size = 934 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.csMatchExWithReturn : definition = 0x000078722b84ddb7 : disassembly at namespaces/test/control.csl : 173.24 :
0x78722b84ddb7    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ddbb    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ddbf    4981c618000000          add r14, 0x18                                          
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p  .. 
0x78722b84ddc6    49c7470857040000        mov qword [r15+0x8], 0x457                              
 ..  x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }     .. 
0x78722b84ddce    498b47f8                mov rax, [r15-0x8]                                     
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p  .. 
0x78722b84ddd2    4983c608                add r14, 0x8                                           
0x78722b84ddd6    498906                  mov [r14], rax                                         
0x78722b84ddd9    e927030000              jmp 0x78722b84e105            < C_Syntax.csMatchExWithReturn+846 >
 ..      match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3 .. 
0x78722b84ddde    e939000000              jmp 0x78722b84de1c            < C_Syntax.csMatchExWithReturn+101 >
 ..    match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3)  .. 
0x78722b84dde3    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84dded    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84ddf7    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn =  .. 
0x78722b84ddfa    b801000000              mov eax, 0x1                                           
0x78722b84ddff    4983c608                add r14, 0x8                                           
0x78722b84de03    498906                  mov [r14], rax                                         
 .. tch ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn .. 
0x78722b84de06    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84de10    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..          case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }       .. 
0x78722b84de13    498b4708                mov rax, [r15+0x8]                                     
 .. )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; } .. 
0x78722b84de17    49894710                mov [r15+0x10], rax                                    
 ..      case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }           .. 
0x78722b84de1b    c3                      ret                                                    
 ..  p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) .. 
0x78722b84de1c    e939000000              jmp 0x78722b84de5a            < C_Syntax.csMatchExWithReturn+163 >
 ..  (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; .. 
0x78722b84de21    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84de2b    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84de35    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. tn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n .. 
0x78722b84de38    b802000000              mov eax, 0x2                                           
0x78722b84de3d    4983c608                add r14, 0x8                                           
0x78722b84de41    498906                  mov [r14], rax                                         
 .. ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn  .. 
0x78722b84de44    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84de4e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }        .. 
0x78722b84de51    498b47f8                mov rax, [r15-0x8]                                     
 .. x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }  .. 
0x78722b84de55    49894710                mov [r15+0x10], rax                                    
 ..      case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          c .. 
0x78722b84de59    c3                      ret                                                    
 ..  p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77 .. 
0x78722b84de5a    e939000000              jmp 0x78722b84de98            < C_Syntax.csMatchExWithReturn+225 >
 ..  (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77)  .. 
0x78722b84de5f    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84de69    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84de73    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. tn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn =  .. 
0x78722b84de76    b803000000              mov eax, 0x3                                           
0x78722b84de7b    4983c608                add r14, 0x8                                           
0x78722b84de7f    498906                  mov [r14], rax                                         
 .. ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn .. 
0x78722b84de82    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84de8c    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }       .. 
0x78722b84de8f    498b4708                mov rax, [r15+0x8]                                     
 .. n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; } .. 
0x78722b84de93    49894710                mov [r15+0x10], rax                                    
 ..      case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }           .. 
0x78722b84de97    c3                      ret                                                    
 .. l ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl .. 
0x78722b84de98    b803000000              mov eax, 0x3                                           
0x78722b84de9d    4983c608                add r14, 0x8                                           
0x78722b84dea1    498906                  mov [r14], rax                                         
 .. ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; .. 
0x78722b84dea4    e939000000              jmp 0x78722b84dee2            < C_Syntax.csMatchExWithReturn+299 >
 .. p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p .. 
0x78722b84dea9    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84deb3    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84debd    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; r .. 
0x78722b84dec0    b803000000              mov eax, 0x3                                           
0x78722b84dec5    4983c608                add r14, 0x8                                           
0x78722b84dec9    498906                  mov [r14], rax                                         
 ..  ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7)  .. 
0x78722b84decc    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84ded6    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..           case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }  .. 
0x78722b84ded9    498b47f8                mov rax, [r15-0x8]                                     
 ..  x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn =  .. 
0x78722b84dedd    49894710                mov [r15+0x10], rax                                    
 ..       case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }      .. 
0x78722b84dee1    c3                      ret                                                    
 .. l ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight .. 
0x78722b84dee2    b84d000000              mov eax, 0x4d                                          
0x78722b84dee7    4983c608                add r14, 0x8                                           
0x78722b84deeb    498906                  mov [r14], rax                                         
 ..  p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight {  .. 
0x78722b84deee    e939000000              jmp 0x78722b84df2c            < C_Syntax.csMatchExWithReturn+373 >
 ..  (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl .. 
0x78722b84def3    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84defd    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84df07    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. tn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) .. 
0x78722b84df0a    b84d000000              mov eax, 0x4d                                          
0x78722b84df0f    4983c608                add r14, 0x8                                           
0x78722b84df13    498906                  mov [r14], rax                                         
 .. ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p  .. 
0x78722b84df16    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84df20    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..         case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; .. 
0x78722b84df23    498b47f8                mov rax, [r15-0x8]                                     
 ..  ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn .. 
0x78722b84df27    49894710                mov [r15+0x10], rax                                    
 ..     case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }   .. 
0x78722b84df2b    c3                      ret                                                    
 .. 7) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine )  .. 
0x78722b84df2c    e939000000              jmp 0x78722b84df6a            < C_Syntax.csMatchExWithReturn+435 >
 ..  ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) {  .. 
0x78722b84df31    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84df3b    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84df45    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps  .. 
0x78722b84df48    b807000000              mov eax, 0x7                                           
0x78722b84df4d    4983c608                add r14, 0x8                                           
0x78722b84df51    498906                  mov [r14], rax                                         
 .. n = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ;  .. 
0x78722b84df54    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84df5e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..      case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p ( .. 
0x78722b84df61    498b47f8                mov rax, [r15-0x8]                                     
 .. }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) .. 
0x78722b84df65    49894710                mov [r15+0x10], rax                                    
 ..  case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; .. 
0x78722b84df69    c3                      ret                                                    
 .. 7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" )  .. 
0x78722b84df6a    e939000000              jmp 0x78722b84dfa8            < C_Syntax.csMatchExWithReturn+497 >
 ..  ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ;  .. 
0x78722b84df6f    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84df79    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84df83    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x  .. 
0x78722b84df86    b808000000              mov eax, 0x8                                           
0x78722b84df8b    4983c608                add r14, 0x8                                           
0x78722b84df8f    498906                  mov [r14], rax                                         
 .. n = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = .. 
0x78722b84df92    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84df9c    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..      case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }         .. 
0x78722b84df9f    498b47f8                mov rax, [r15-0x8]                                     
 .. }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }   .. 
0x78722b84dfa3    49894710                mov [r15+0x10], rax                                    
 ..  case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          ca .. 
0x78722b84dfa7    c3                      ret                                                    
 .. ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; .. 
0x78722b84dfa8    e96f000000              jmp 0x78722b84e01c            < C_Syntax.csMatchExWithReturn+613 >
 .. rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p .. 
0x78722b84dfad    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84dfb7    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84dfc1    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps  .. 
0x78722b84dfc4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84dfc8    4983c608                add r14, 0x8                                           
0x78722b84dfcc    498906                  mov [r14], rax                                         
 ..  n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9)  .. 
0x78722b84dfcf    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84dfd9    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..   case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "single .. 
0x78722b84dfdc    b809000000              mov eax, 0x9                                           
0x78722b84dfe1    4983c608                add r14, 0x8                                           
0x78722b84dfe5    498906                  mov [r14], rax                                         
 ..      case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "sin .. 
0x78722b84dfe8    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84dff2    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" )  .. 
0x78722b84dff5    48b8a9825e2b72780000    mov rax, 0x78722b5e82a9       < string : 'singleQuote1' >
0x78722b84dfff    4983c608                add r14, 0x8                                           
0x78722b84e003    498906                  mov [r14], rax                                         
 .. e ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote .. 
0x78722b84e006    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84e010    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          ca .. 
0x78722b84e013    498b4708                mov rax, [r15+0x8]                                     
 .. n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }       .. 
0x78722b84e017    49894710                mov [r15+0x10], rax                                    
 .. ) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( .. 
0x78722b84e01b    c3                      ret                                                    
 .. " ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n .. 
0x78722b84e01c    e96f000000              jmp 0x78722b84e090            < C_Syntax.csMatchExWithReturn+729 >
 .. ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n)  .. 
0x78722b84e021    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84e02b    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84e035    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ;  .. 
0x78722b84e038    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e03c    4983c608                add r14, 0x8                                           
0x78722b84e040    498906                  mov [r14], rax                                         
 .. tn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p ( .. 
0x78722b84e043    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84e04d    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..       case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "dou .. 
0x78722b84e050    b809000000              mov eax, 0x9                                           
0x78722b84e055    4983c608                add r14, 0x8                                           
0x78722b84e059    498906                  mov [r14], rax                                         
 ..          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( " .. 
0x78722b84e05c    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84e066    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..  'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote"  .. 
0x78722b84e069    48b8db825e2b72780000    mov rax, 0x78722b5e82db       < string : 'singleQuote2' >
0x78722b84e073    4983c608                add r14, 0x8                                           
0x78722b84e077    498906                  mov [r14], rax                                         
 ..  case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQu .. 
0x78722b84e07a    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84e084    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }    .. 
0x78722b84e087    498b4708                mov rax, [r15+0x8]                                     
 .. n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }     .. 
0x78722b84e08b    49894710                mov [r15+0x10], rax                                    
 .. ) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p .. 
0x78722b84e08f    c3                      ret                                                    
 ..  rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return r .. 
0x78722b84e090    e96f000000              jmp 0x78722b84e104            < C_Syntax.csMatchExWithReturn+845 >
 .. tn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn .. 
0x78722b84e095    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b84e09f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84e0a9    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0ac    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e0b0    4983c608                add r14, 0x8                                           
0x78722b84e0b4    498906                  mov [r14], rax                                         
 .. x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0b7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84e0c1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..    case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0c4    b809000000              mov eax, 0x9                                           
0x78722b84e0c9    4983c608                add r14, 0x8                                           
0x78722b84e0cd    498906                  mov [r14], rax                                         
 ..       case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0d0    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84e0da    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0dd    48b81a835e2b72780000    mov rax, 0x78722b5e831a       < string : 'doubleQuote' >
0x78722b84e0e7    4983c608                add r14, 0x8                                           
0x78722b84e0eb    498906                  mov [r14], rax                                         
 .. se ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0ee    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84e0f8    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0fb    498b4708                mov rax, [r15+0x8]                                     
 ..  (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e0ff    49894710                mov [r15+0x10], rax                                    
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e103    c3                      ret                                                    
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e104    c3                      ret                                                    
0x78722b84e105    48b828bb762972780000    mov rax, 0x78722976bb28                                
0x78722b84e10f    4983c608                add r14, 0x8                                           
0x78722b84e113    498906                  mov [r14], rax                                         
0x78722b84e116    49bb301bed89c8600000    mov r11, 0x60c889ed1b30                                
0x78722b84e120    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b84e12a    49ffd2                  call r10                      < C compiler code >        
 .. uote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e12d    498b4708                mov rax, [r15+0x8]                                     
 .. " ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e131    b967000000              mov ecx, 0x67                                          
 .. te" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e136    482bc1                  sub rax, rcx                                           
0x78722b84e139    4983c608                add r14, 0x8                                           
0x78722b84e13d    498906                  mov [r14], rax                                         
0x78722b84e140    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84e14a    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e14d    498b4710                mov rax, [r15+0x10]                                    
0x78722b84e151    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e155    4d8b7e08                mov r15, [r14+0x8]                                     
 ..     }      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e159    498906                  mov [r14], rax                                         
 ..      p ( x - 103 ) ;     return rtn ; }  .. 
0x78722b84e15c    c3                      ret                                                    
Word_Disassemble : word - 'csMatchExWithReturn' :: codeSize = 934
Word : 0x0000787229768c70 :: Compiled at : 0x000078722b84ddb7
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 173.24 <::

 1 1008 1111
 7 1008 seven
 7 1008 seven
 3 1008 1111
 2 1008 2
 77 1008 77
 3 1008 3
 8 1008 eight
 8 1008 eight
 nine 9 singleQuote1 1008 1111
 nine 9 singleQuote1 1008 1111
 1008 1111
 1 2 2 2 
last line should show : 2 2 2
including namespaces/test/lisp.csl at namespaces/test/initTest.csl : 86.41 ...
 
starting lisp.csl
 7
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 above line should show :: 
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 777
 7
 f

 =============================
LispDefines.f <:> variablef <:> lambdaCalculus compiled word
SourceCode for LispDefines.f :> 
( define f ( lambda (a) ( + a 1 2 ) ) )
Source code file location of f : "namespaces/test/lisp.csl" : 31.38 :: we are now at : namespaces/test/lisp.csl : 33.6
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e289 -- code size = 47 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.f : definition = 0x000078722b84e289 : disassembly at namespaces/test/lisp.csl : 33.6 :
0x78722b84e289    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e28d    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e291    4981c608000000          add r14, 0x8                                           
 ..           ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x78722b84e298    498b47f8                mov rax, [r15-0x8]                                     
 ..         ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x78722b84e29c    b901000000              mov ecx, 0x1                                           
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x78722b84e2a1    4803c1                  add rax, rcx                                           
 ..       ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x78722b84e2a4    b902000000              mov ecx, 0x2                                           
0x78722b84e2a9    4803c1                  add rax, rcx                                           
0x78722b84e2ac    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e2b0    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e2b4    498906                  mov [r14], rax                                         
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x78722b84e2b7    c3                      ret                                                    
Word_Disassemble : word - 'f' :: codeSize = 47
Word : 0x000078722b753040 :: Compiled at : 0x000078722b84e289
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 33.6 <::
 7
 f1
 7
 f2
 7
 7
 7
 f
 7
 7
 777
 7
 77
 77
 77
 77
 77
 77
 77
 x
 7
 f1
 7
 7
 7
 f4
 zs1 abc
 zs1
 f3
 13
 f4
 77
 zs1
 7
 7
 7
 0
 0
 1
 
 if :: should show 7 7 7 0 0 1 
 7
 7
 7
 7
 7
 11
 
 cond :: should show 7 7 7 7 7 11
 g
 h
 7
 7
 7
 7
 7
 7
 7
 h1
 7
 7
 7
 7
 7
 7
 7
 7
 7
 77
 77
 pd
 7
 
starting BigNum
 g
 h
 1.00000000000000000000000000000000
 -1.00000000000000000000000000000000
 -2.00000000000000000000000000000000
 0.33333333333333331482961625624739
 3.00000000000000000000000000000000
 7.00000000000000000000000000000000
 7.00000000000000000000000000000000
 
ending BigNum
 a
 b
 ( 3 4 1 2 )
 ( a b 1 2 )
 x
 x
 ( x x x x )
 ( x x x 3 4 1 2 )
 y
 y
 ( y y y y )
 ( y y y x x x 3 4 1 2 )
 
lisp test
 namespaces/test/lisp.csl 169.30 a
 b
 y
 x
 y
 ( x x x 1 2 3 4 5 6 7 8 9 y )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 7
 x
 ( 1 2 3 x )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 7 8 9 47 )
 77
 q1x
 q2
 7
 q3
 q4
 q5
 77
 above line should show 77
DataStack at : namespaces/test/lisp.csl : 202.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 7
 yfac
 3628800
 5040
 fibc

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :> 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 209.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e44f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc : definition = 0x000078722b84e44f : disassembly at namespaces/test/lisp.csl : 209.21 :
0x78722b84e44f    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e453    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e457    4981c608000000          add r14, 0x8                                           
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e45e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e463    7d14                    jge 0x2b84e479                < LispDefines.fibc+42 >
0x78722b84e465    0f1f4000                nop [rax]                                              
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e469    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e46d    4983c608                add r14, 0x8                                           
0x78722b84e471    498906                  mov [r14], rax                                         
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e474    e945000000              jmp 0x78722b84e4be            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e479    498b47f8                mov rax, [r15-0x8]                                     
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e47d    b901000000482bc149      mov rcx, 0x49c12b4800000001                              
0x78722b84e486    83c608                  add rsi, 0x8                                           
0x78722b84e489    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e48c    e8beffffff              call 0x78722b84e44f           < LispDefines.fibc : 0x000078722b84e44f >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e491    498b47f8                mov rax, [r15-0x8]                                     
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e495    b902000000482bc149      mov rcx, 0x49c12b4800000002                              
0x78722b84e49e    83c608                  add rsi, 0x8                                           
0x78722b84e4a1    498906                  mov [r14], rax                                         
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e4a4    e8a6ffffff              call 0x78722b84e44f           < LispDefines.fibc : 0x000078722b84e44f >
0x78722b84e4a9    498b0e                  mov rcx, [r14]                                         
0x78722b84e4ac    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84e4b0    4983ee10                sub r14, 0x10                                          
0x78722b84e4b4    4803c1                  add rax, rcx                                           
0x78722b84e4b7    4983c608                add r14, 0x8                                           
0x78722b84e4bb    498906                  mov [r14], rax                                         
0x78722b84e4be    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e4c2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e4c6    498906                  mov [r14], rax                                         
 ..           (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e4c9    c3                      ret                                                    
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x000078722b7a2338 :: Compiled at : 0x000078722b84e44f
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 209.21 <::
 fibc1
 fibc2

 =============================
LispDefines.fibc1 <:> variablefibc1 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc1 :> 
(define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
Source code file location of fibc1 : "namespaces/test/lisp.csl" : 213.83 :: we are now at : namespaces/test/lisp.csl : 215.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e4cf -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc1 : definition = 0x000078722b84e4cf : disassembly at namespaces/test/lisp.csl : 215.22 :
0x78722b84e4cf    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e4d3    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e4d7    4981c608000000          add r14, 0x8                                           
   (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x78722b84e4de    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x78722b84e4e3    7d14                    jge 0x2b84e4f9                < LispDefines.fibc1+42 >
0x78722b84e4e5    0f1f4000                nop [rax]                                              
 (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x78722b84e4e9    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e4ed    4983c608                add r14, 0x8                                           
0x78722b84e4f1    498906                  mov [r14], rax                                         
 .. e fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e4f4    e945000000              jmp 0x78722b84e53e            < LispDefines.fibc1+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e4f9    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e4fd    b901000000              mov ecx, 0x1                                           
 .. da ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e502    482bc1                  sub rax, rcx                                           
0x78722b84e505    4983c608                add r14, 0x8                                           
0x78722b84e509    498906                  mov [r14], rax                                         
 .. 1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e50c    e8beffffff              call 0x78722b84e4cf           < LispDefines.fibc1 : 0x000078722b84e4cf >
 .. < n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e511    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e515    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e51a    482bc1                  sub rax, rcx                                           
0x78722b84e51d    4983c608                add r14, 0x8                                           
0x78722b84e521    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x78722b84e524    e8a6ffffff              call 0x78722b84e4cf           < LispDefines.fibc1 : 0x000078722b84e4cf >
0x78722b84e529    498b0e                  mov rcx, [r14]                                         
0x78722b84e52c    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84e530    4983ee10                sub r14, 0x10                                          
0x78722b84e534    4803c1                  add rax, rcx                                           
0x78722b84e537    4983c608                add r14, 0x8                                           
0x78722b84e53b    498906                  mov [r14], rax                                         
0x78722b84e53e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e542    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e546    498906                  mov [r14], rax                                         
0x78722b84e549    c3                      ret                                                    
Word_Disassemble : word - 'fibc1' :: codeSize = 123
Word : 0x000078722b7aa3e0 :: Compiled at : 0x000078722b84e4cf
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 215.22 <::

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :> 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 216.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e44f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc : definition = 0x000078722b84e44f : disassembly at namespaces/test/lisp.csl : 216.21 :
0x78722b84e44f    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e453    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e457    4981c608000000          add r14, 0x8                                           
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e45e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e463    7d14                    jge 0x2b84e479                < LispDefines.fibc+42 >
0x78722b84e465    0f1f4000                nop [rax]                                              
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x78722b84e469    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e46d    4983c608                add r14, 0x8                                           
0x78722b84e471    498906                  mov [r14], rax                                         
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e474    e945000000              jmp 0x78722b84e4be            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e479    498b47f8                mov rax, [r15-0x8]                                     
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e47d    b901000000              mov ecx, 0x1                                           
 .. bda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e482    482bc1                  sub rax, rcx                                           
0x78722b84e485    4983c608                add r14, 0x8                                           
0x78722b84e489    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e48c    e8beffffff              call 0x78722b84e44f           < LispDefines.fibc : 0x000078722b84e44f >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e491    498b47f8                mov rax, [r15-0x8]                                     
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e495    b902000000              mov ecx, 0x2                                           
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e49a    482bc1                  sub rax, rcx                                           
0x78722b84e49d    4983c608                add r14, 0x8                                           
0x78722b84e4a1    498906                  mov [r14], rax                                         
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x78722b84e4a4    e8a6ffffff              call 0x78722b84e44f           < LispDefines.fibc : 0x000078722b84e44f >
0x78722b84e4a9    498b0e                  mov rcx, [r14]                                         
0x78722b84e4ac    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84e4b0    4983ee10                sub r14, 0x10                                          
0x78722b84e4b4    4803c1                  add rax, rcx                                           
0x78722b84e4b7    4983c608                add r14, 0x8                                           
0x78722b84e4bb    498906                  mov [r14], rax                                         
0x78722b84e4be    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e4c2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e4c6    498906                  mov [r14], rax                                         
0x78722b84e4c9    c3                      ret                                                    
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x000078722b7a2338 :: Compiled at : 0x000078722b84e44f
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 216.21 <::

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :> 
(definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
Source code file location of fibc2 : "namespaces/test/lisp.csl" : 214.75 :: we are now at : namespaces/test/lisp.csl : 217.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e54f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x000078722b84e54f : disassembly at namespaces/test/lisp.csl : 217.22 :
0x78722b84e54f    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e553    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e557    4981c608000000          add r14, 0x8                                           
 ..       (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x78722b84e55e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..         (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x78722b84e563    7d14                    jge 0x2b84e579                < LispDefines.fibc2+42 >
0x78722b84e565    0f1f4000                nop [rax]                                              
 ..     (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x78722b84e569    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e56d    4983c608                add r14, 0x8                                           
0x78722b84e571    498906                  mov [r14], rax                                         
 ..  (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x78722b84e574    e945000000              jmp 0x78722b84e5be            < LispDefines.fibc2+111 >
 .. c2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e579    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e57d    b901000000              mov ecx, 0x1                                           
 .. ibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e582    482bc1                  sub rax, rcx                                           
0x78722b84e585    4983c608                add r14, 0x8                                           
0x78722b84e589    498906                  mov [r14], rax                                         
 .. nec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e58c    e8beffffff              call 0x78722b84e54f           < LispDefines.fibc2 : 0x000078722b84e54f >
 .. < n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e591    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e595    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e59a    482bc1                  sub rax, rcx                                           
0x78722b84e59d    4983c608                add r14, 0x8                                           
0x78722b84e5a1    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x78722b84e5a4    e8a6ffffff              call 0x78722b84e54f           < LispDefines.fibc2 : 0x000078722b84e54f >
0x78722b84e5a9    498b0e                  mov rcx, [r14]                                         
0x78722b84e5ac    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84e5b0    4983ee10                sub r14, 0x10                                          
0x78722b84e5b4    4803c1                  add rax, rcx                                           
0x78722b84e5b7    4983c608                add r14, 0x8                                           
0x78722b84e5bb    498906                  mov [r14], rax                                         
0x78722b84e5be    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e5c2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e5c6    498906                  mov [r14], rax                                         
 ..                 (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x78722b84e5c9    c3                      ret                                                    
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x000078722b7b26e0 :: Compiled at : 0x000078722b84e54f
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 217.22 <::
 
fibc1 20 =  6765
 
fibc 20 =  6765
 
fibc2 20 =  6765

 11 7
DataStack at : namespaces/test/lisp.csl : 227.80 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 7 11 11 7
 =============================
Root.hioo <:> csl compiled word
SourceCode for Root.hioo :> 
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hioo : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e5de -- code size = 30 bytes
 -----------------------------
Word :: Root.hioo : definition = 0x000078722b84e5de : disassembly at namespaces/test/lisp.csl : 229.21 :
 ..                           ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x78722b84e5de    b807000000              mov eax, 0x7                                           
0x78722b84e5e3    4983c610                add r14, 0x10                                          
0x78722b84e5e7    498906                  mov [r14], rax                                         
 ..                     ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x78722b84e5ea    498946f8                mov [r14-0x8], rax                                     
0x78722b84e5ee    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84e5f8    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..                 ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x78722b84e5fb    c3                      ret                                                    
Word_Disassemble : word - 'hioo' :: codeSize = 30
Word : 0x000078722978df68 :: Compiled at : 0x000078722b84e5de
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 229.21 <::

 =============================
Root.hio <:> csl compiled word
SourceCode for Root.hio :> 
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hio : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 230.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e610 -- code size = 30 bytes
 -----------------------------
Word :: Root.hio : definition = 0x000078722b84e610 : disassembly at namespaces/test/lisp.csl : 230.20 :
 ..       ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x78722b84e610    b80b000000              mov eax, 0xb                                           
0x78722b84e615    4983c610                add r14, 0x10                                          
0x78722b84e619    498906                  mov [r14], rax                                         
 .. ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x78722b84e61c    498946f8                mov [r14-0x8], rax                                     
0x78722b84e620    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84e62a    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x78722b84e62d    c3                      ret                                                    
Word_Disassemble : word - 'hio' :: codeSize = 30
Word : 0x000078722978eb38 :: Compiled at : 0x000078722b84e610
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 230.20 <::

 =============================
C.bexp43 <:> csl compiled word
SourceCode for C.bexp43 :> 
: bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
Source code file location of bexp43 : "namespaces/test/lisp.csl" : 233.2 :: we are now at : namespaces/test/lisp.csl : 234.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84e633 -- code size = 107 bytes
TypeSignature : 
 -----------------------------
Word :: C.bexp43 : definition = 0x000078722b84e633 : disassembly at namespaces/test/lisp.csl : 234.19 :
0x78722b84e633    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e637    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e63b    4981c608000000          add r14, 0x8                                           
 ..                      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x78722b84e642    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..              : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x78722b84e647    7e3d                    jle 0x2b84e686                < C.bexp43+83 >
0x78722b84e649    0f1f4000                nop [rax]                                              
 ..          : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x78722b84e64d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e651    4983c608                add r14, 0x8                                           
0x78722b84e655    498906                  mov [r14], rax                                         
 ..      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x78722b84e658    498b47f8                mov rax, [r15-0x8]                                     
 ..  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x78722b84e65c    48ffc8                  dec rax                                                
0x78722b84e65f    4983c608                add r14, 0x8                                           
0x78722b84e663    498906                  mov [r14], rax                                         
  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x78722b84e666    e8c8ffffff              call 0x78722b84e633           < C.bexp43 : 0x000078722b84e633 >
0x78722b84e66b    498b0e                  mov rcx, [r14]                                         
0x78722b84e66e    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84e672    4983ee10                sub r14, 0x10                                          
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x78722b84e676    480fafc1                imul rax, rcx                                          
0x78722b84e67a    4983c608                add r14, 0x8                                           
0x78722b84e67e    498906                  mov [r14], rax                                         
 .. n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x78722b84e681    e90c000000              jmp 0x78722b84e692            < C.bexp43+95 >
 .. { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x78722b84e686    b801000000              mov eax, 0x1                                           
0x78722b84e68b    4983c608                add r14, 0x8                                           
0x78722b84e68f    498906                  mov [r14], rax                                         
0x78722b84e692    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e696    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e69a    498906                  mov [r14], rax                                         
 ..  { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x78722b84e69d    c3                      ret                                                    
Word_Disassemble : word - 'bexp43' :: codeSize = 107
Word : 0x000078722978f708 :: Compiled at : 0x000078722b84e633
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 234.19 <::
 C : bexp43_assert  : ok

 5040

 =============================
C.bexp44 <:> csl compiled word
SourceCode for C.bexp44 :> 
( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
Source code file location of bexp44 : "namespaces/test/lisp.csl" : 239.73 :: we are now at : namespaces/test/lisp.csl : 240.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84e6a3 -- code size = 107 bytes
TypeSignature : 
 -----------------------------
Word :: C.bexp44 : definition = 0x000078722b84e6a3 : disassembly at namespaces/test/lisp.csl : 240.23 :
0x78722b84e6a3    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e6a7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e6ab    4981c608000000          add r14, 0x8                                           
 ..               ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x78722b84e6b2    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..       ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x78722b84e6b7    7e3d                    jle 0x2b84e6f6                < C.bexp44+83 >
0x78722b84e6b9    0f1f4000                nop [rax]                                              
 ..   ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x78722b84e6bd    498b47f8                mov rax, [r15-0x8]                                     
0x78722b84e6c1    4983c608                add r14, 0x8                                           
0x78722b84e6c5    498906                  mov [r14], rax                                         
  ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x78722b84e6c8    498b47f8                mov rax, [r15-0x8]                                     
 ..  : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x78722b84e6cc    48ffc8                  dec rax                                                
0x78722b84e6cf    4983c608                add r14, 0x8                                           
0x78722b84e6d3    498906                  mov [r14], rax                                         
 .. bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x78722b84e6d6    e8c8ffffff              call 0x78722b84e6a3           < C.bexp44 : 0x000078722b84e6a3 >
0x78722b84e6db    498b0e                  mov rcx, [r14]                                         
0x78722b84e6de    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84e6e2    4983ee10                sub r14, 0x10                                          
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x78722b84e6e6    480fafc1                imul rax, rcx                                          
0x78722b84e6ea    4983c608                add r14, 0x8                                           
0x78722b84e6ee    498906                  mov [r14], rax                                         
 .. n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x78722b84e6f1    e90c000000              jmp 0x78722b84e702            < C.bexp44+95 >
 .. { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x78722b84e6f6    b801000000              mov eax, 0x1                                           
0x78722b84e6fb    4983c608                add r14, 0x8                                           
0x78722b84e6ff    498906                  mov [r14], rax                                         
0x78722b84e702    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84e706    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84e70a    498906                  mov [r14], rax                                         
 .. @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x78722b84e70d    c3                      ret                                                    
Word_Disassemble : word - 'bexp44' :: codeSize = 107
Word : 0x0000787229791c98 :: Compiled at : 0x000078722b84e6a3
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 240.23 <::
 C : bexp43_assert  : ok

 5040 goedel3 ::  
 goedel3 ::  132431749231075 2 goedel3_assert1  : ok

 106414424382448 7 goedel3_assert2  : ok

 goedel3_assert4  : ok

 132431749142646 7 goedel3_assert5  : ok

 9 
goedel3 output should read (after ignoring _asserts) : 
'junk' 2 'junk' 7 'junk' 7 9
 =============================
Root.goedel6 <:> csl compiled word
SourceCode for Root.goedel6 :> 
( :: : goedel6 (| n ) "\n goedel6 :: " ps n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix n @ 6 + 8 "goedel6_3_assert" assert } ix { (| n ) n @ p n 3 = n dup @ 4 + = n @ dup p 7 "goedel6_4_assert" assert } ix n @ dup p return tos ; ".I" typeSignature ' goedel6 find wdiss 9 goedel6 "goedel6_0_assert" assert "\ngoedel6 output should read (after ignoring _asserts) : \n 'junk' 2 'junk' 7 'junk' 7 9" ps )
Source code file location of goedel6 : "namespaces/test/lisp.csl" : 290.0 :: we are now at : namespaces/test/lisp.csl : 290.1
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84e91d -- code size = 517 bytes
TypeSignature : -> Integer 
 -----------------------------
Word :: Root.goedel6 : definition = 0x000078722b84e91d : disassembly at namespaces/test/lisp.csl : 290.1 :
0x78722b84e91d    4d897e08                mov [r14+0x8], r15                                     
0x78722b84e921    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84e925    4981c628000000          add r14, 0x28                                          
 ..   ( ::      : goedel6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1 .. 
0x78722b84e92c    48b800bd5e2b72780000    mov rax, 0x78722b5ebd00                                
0x78722b84e936    4983c608                add r14, 0x8                                           
0x78722b84e93a    498906                  mov [r14], rax                                         
 .. del6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert   .. 
0x78722b84e93d    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84e947    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..      "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n .. 
0x78722b84e94a    49c7470809000000        mov qword [r15+0x8], 0x9                               
 ..   n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 " .. 
0x78722b84e952    498b4710                mov rax, [r15+0x10]                                    
0x78722b84e956    4983c608                add r14, 0x8                                           
0x78722b84e95a    498906                  mov [r14], rax                                         
 .. 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x78722b84e95d    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84e967    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..       {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_ .. 
0x78722b84e96a    49c7471002000000        mov qword [r15+0x10], 0x2                              
 ..     {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_as .. 
0x78722b84e972    498b4710                mov rax, [r15+0x10]                                    
0x78722b84e976    4983c610                add r14, 0x10                                          
0x78722b84e97a    498906                  mov [r14], rax                                         
 .. {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert .. 
0x78722b84e97d    498946f8                mov [r14-0x8], rax                                     
 ..            (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" as .. 
0x78722b84e981    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84e98b    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" asse .. 
0x78722b84e98e    b802000000              mov eax, 0x2                                           
0x78722b84e993    4983c608                add r14, 0x8                                           
0x78722b84e997    498906                  mov [r14], rax                                         
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert .. 
0x78722b84e99a    48b82fbd5e2b72780000    mov rax, 0x78722b5ebd2f       < string : 'goedel6_1_assert' >
0x78722b84e9a4    4983c608                add r14, 0x8                                           
0x78722b84e9a8    498906                  mov [r14], rax                                         
0x78722b84e9ab    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84e9b5    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. _1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert"  .. 
0x78722b84e9b8    498b4718                mov rax, [r15+0x18]                                    
0x78722b84e9bc    4983c608                add r14, 0x8                                           
0x78722b84e9c0    498906                  mov [r14], rax                                         
 .. ssert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" asse .. 
0x78722b84e9c3    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84e9cd    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert     .. 
0x78722b84e9d0    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. ssert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert       .. 
0x78722b84e9d8    498b4718                mov rax, [r15+0x18]                                    
 .. t            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert           .. 
0x78722b84e9dc    b904000000              mov ecx, 0x4                                           
0x78722b84e9e1    4803c1                  add rax, rcx                                           
0x78722b84e9e4    4983c610                add r14, 0x10                                          
0x78722b84e9e8    498906                  mov [r14], rax                                         
 ..          { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix .. 
0x78722b84e9eb    498946f8                mov [r14-0x8], rax                                     
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix     .. 
0x78722b84e9ef    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84e9f9    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix       .. 
0x78722b84e9fc    b807000000              mov eax, 0x7                                           
0x78722b84ea01    4983c608                add r14, 0x8                                           
0x78722b84ea05    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         .. 
0x78722b84ea08    48b864bd5e2b72780000    mov rax, 0x78722b5ebd64       < string : 'goedel6_2_assert' >
0x78722b84ea12    4983c608                add r14, 0x8                                           
0x78722b84ea16    498906                  mov [r14], rax                                         
0x78722b84ea19    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84ea23    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84ea26    498b4710                mov rax, [r15+0x10]                                    
 .. _2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3  .. 
0x78722b84ea2a    b906000000              mov ecx, 0x6                                           
 .. _assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =  .. 
0x78722b84ea2f    4803c1                  add rax, rcx                                           
0x78722b84ea32    4983c608                add r14, 0x8                                           
0x78722b84ea36    498906                  mov [r14], rax                                         
 .. ssert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =    .. 
0x78722b84ea39    b808000000              mov eax, 0x8                                           
0x78722b84ea3e    4983c608                add r14, 0x8                                           
0x78722b84ea42    498906                  mov [r14], rax                                         
 .. ert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =      .. 
0x78722b84ea45    48b88cbd5e2b72780000    mov rax, 0x78722b5ebd8c       < string : 'goedel6_3_assert' >
0x78722b84ea4f    4983c608                add r14, 0x8                                           
0x78722b84ea53    498906                  mov [r14], rax                                         
0x78722b84ea56    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84ea60    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84ea63    498b4720                mov rax, [r15+0x20]                                    
0x78722b84ea67    4983c608                add r14, 0x8                                           
0x78722b84ea6b    498906                  mov [r14], rax                                         
 ..  ix         { (| n )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert  .. 
0x78722b84ea6e    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84ea78    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix       .. 
0x78722b84ea7b    49c7472003000000        mov qword [r15+0x20], 0x3                              
0x78722b84ea83    498d4720                lea rax, [r15+0x20]                                    
0x78722b84ea87    4983c610                add r14, 0x10                                          
0x78722b84ea8b    498906                  mov [r14], rax                                         
 .. @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p       .. 
0x78722b84ea8e    498946f8                mov [r14-0x8], rax                                     
 ..              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         r .. 
0x78722b84ea92    498b06                  mov rax, [r14]                                         
0x78722b84ea95    488b00                  mov rax, [rax]                                         
0x78722b84ea98    498906                  mov [r14], rax                                         
 ..          n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         retur .. 
0x78722b84ea9b    49830604                add qword [r14], 0x4                                   
 .. 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ .. 
0x78722b84ea9f    498b0e                  mov rcx, [r14]                                         
0x78722b84eaa2    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84eaa6    4983ee10                sub r14, 0x10                                          
 ..        n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return  .. 
0x78722b84eaaa    488908                  mov [rax], rcx                                         
0x78722b84eaad    498b4720                mov rax, [r15+0x20]                                    
0x78722b84eab1    4983c610                add r14, 0x10                                          
0x78722b84eab5    498906                  mov [r14], rax                                         
 ..        n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" type .. 
0x78722b84eab8    498946f8                mov [r14-0x8], rax                                     
 ..    n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSign .. 
0x78722b84eabc    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84eac6    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignat .. 
0x78722b84eac9    b807000000              mov eax, 0x7                                           
0x78722b84eace    4983c608                add r14, 0x8                                           
0x78722b84ead2    498906                  mov [r14], rax                                         
 ..  dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignatur .. 
0x78722b84ead5    48b8c1bd5e2b72780000    mov rax, 0x78722b5ebdc1       < string : 'goedel6_4_assert' >
0x78722b84eadf    4983c608                add r14, 0x8                                           
0x78722b84eae3    498906                  mov [r14], rax                                         
0x78722b84eae6    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84eaf0    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84eaf3    498b4708                mov rax, [r15+0x8]                                     
0x78722b84eaf7    4983c610                add r14, 0x10                                          
0x78722b84eafb    498906                  mov [r14], rax                                         
 .. sert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_ .. 
0x78722b84eafe    498946f8                mov [r14-0x8], rax                                     
0x78722b84eb02    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84eb0c    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b84eb0f    498b06                  mov rax, [r14]                                         
0x78722b84eb12    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84eb16    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84eb1a    4983c608                add r14, 0x8                                           
0x78722b84eb1e    498906                  mov [r14], rax                                         
 .. " assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_asse .. 
0x78722b84eb21    c3                      ret                                                    
Word_Disassemble : word - 'goedel6' :: codeSize = 517
Word : 0x000078722979d358 :: Compiled at : 0x000078722b84e91d
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 290.1 <::
 
 goedel6 ::  132431717454680 2 goedel6_1_assert  : ok

 132431760218840 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 132431749140739 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok

 
goedel6 output should read (after ignoring _asserts) : 
 'junk' 2 'junk' 7 'junk' 7 9
 
goedel8 output :  0 2 goedel8_1_assert  : ok

 0 7 goedel8_3_assert  : ok

 goedel8_4_assert  : ok

 0 10 goedel8_5_assert  : ok

 9 goedel8_6_assert  : ok

 
goedel8 output should read : 
'junk' 2 'junk' 7 'junk' 10 9

 =============================
Root.goedel8 <:> csl compiled word
SourceCode for Root.goedel8 :> 
( :: "\ngoedel8 output : " ps : goedel8 (| n -t "V.I" ) n 1 = { 'n var n @ p n 2 = n @ dup p 2 "goedel8_1_assert" assert { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix n @ 6 + 8 "goedel8_4_assert" assert } ix { 'n var n @ p n 3 = n dup @ 7 + = n @ dup p 10 "goedel8_5_assert" assert } ix n @ 8 + dup p return tos ; goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read : \n'junk' 2 'junk' 7 'junk' 10 9" ps)
Source code file location of goedel8 : "namespaces/test/lisp.csl" : 313.0 :: we are now at : namespaces/test/lisp.csl : 314.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b84eb27 -- code size = 594 bytes
TypeSignature : 
 -----------------------------
Word :: Root.goedel8 : definition = 0x000078722b84eb27 : disassembly at namespaces/test/lisp.csl : 314.24 :
0x78722b84eb27    4d897e08                mov [r14+0x8], r15                                     
0x78722b84eb2b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84eb2f    4981c628000000          add r14, 0x28                                          
 .. goedel8 (| n -t "V.I"  )          n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert      .. 
0x78722b84eb36    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @  .. 
0x78722b84eb3e    48b8a8677a2972780000    mov rax, 0x7872297a67a8                                
0x78722b84eb48    488b00                  mov rax, [rax]                                         
0x78722b84eb4b    4983c608                add r14, 0x8                                           
0x78722b84eb4f    498906                  mov [r14], rax                                         
 .. 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n  .. 
0x78722b84eb52    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84eb5c    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b84eb5f    48b8a8677a2972780000    mov rax, 0x7872297a67a8                                
0x78722b84eb69    b902000000              mov ecx, 0x2                                           
 ..         'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 .. 
0x78722b84eb6e    488908                  mov [rax], rcx                                         
 ..       'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 " .. 
0x78722b84eb71    48b8a8677a2972780000    mov rax, 0x7872297a67a8                                
0x78722b84eb7b    488b00                  mov rax, [rax]                                         
0x78722b84eb7e    4983c610                add r14, 0x10                                          
0x78722b84eb82    498906                  mov [r14], rax                                         
 ..   'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x78722b84eb85    498946f8                mov [r14-0x8], rax                                     
 ..  var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_ .. 
0x78722b84eb89    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84eb93    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 .. ar n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_ .. 
0x78722b84eb96    b802000000              mov eax, 0x2                                           
0x78722b84eb9b    4983c608                add r14, 0x8                                           
0x78722b84eb9f    498906                  mov [r14], rax                                         
 ..  n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_as .. 
0x78722b84eba2    48b873c55e2b72780000    mov rax, 0x78722b5ec573       < string : 'goedel8_1_assert' >
0x78722b84ebac    4983c608                add r14, 0x8                                           
0x78722b84ebb0    498906                  mov [r14], rax                                         
0x78722b84ebb3    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84ebbd    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. ssert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert"  .. 
0x78722b84ebc0    48b818837a2972780000    mov rax, 0x7872297a8318                                
0x78722b84ebca    488b00                  mov rax, [rax]                                         
0x78722b84ebcd    4983c608                add r14, 0x8                                           
0x78722b84ebd1    498906                  mov [r14], rax                                         
 .. t                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" asse .. 
0x78722b84ebd4    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84ebde    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert .. 
0x78722b84ebe1    48b818837a2972780000    mov rax, 0x7872297a8318                                
0x78722b84ebeb    b903000000              mov ecx, 0x3                                           
 ..                    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert     .. 
0x78722b84ebf0    488908                  mov [rax], rcx                                         
 ..                  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert       .. 
0x78722b84ebf3    48b818837a2972780000    mov rax, 0x7872297a8318                                
0x78722b84ebfd    488b00                  mov rax, [rax]                                         
 ..              { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert           .. 
0x78722b84ec00    b904000000              mov ecx, 0x4                                           
0x78722b84ec05    4803c1                  add rax, rcx                                           
0x78722b84ec08    4983c610                add r14, 0x10                                          
0x78722b84ec0c    498906                  mov [r14], rax                                         
 ..          { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix .. 
0x78722b84ec0f    498946f8                mov [r14-0x8], rax                                     
 ..      { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix     .. 
0x78722b84ec13    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84ec1d    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix       .. 
0x78722b84ec20    b807000000              mov eax, 0x7                                           
0x78722b84ec25    4983c608                add r14, 0x8                                           
0x78722b84ec29    498906                  mov [r14], rax                                         
 ..  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         .. 
0x78722b84ec2c    48b8aac55e2b72780000    mov rax, 0x78722b5ec5aa       < string : 'goedel8_3_assert' >
0x78722b84ec36    4983c608                add r14, 0x8                                           
0x78722b84ec3a    498906                  mov [r14], rax                                         
0x78722b84ec3d    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84ec47    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84ec4a    48b8a8677a2972780000    mov rax, 0x7872297a67a8                                
0x78722b84ec54    488b00                  mov rax, [rax]                                         
 .. _3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3  .. 
0x78722b84ec57    b906000000              mov ecx, 0x6                                           
 .. _assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =  .. 
0x78722b84ec5c    4803c1                  add rax, rcx                                           
0x78722b84ec5f    4983c608                add r14, 0x8                                           
0x78722b84ec63    498906                  mov [r14], rax                                         
 .. ssert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =    .. 
0x78722b84ec66    b808000000              mov eax, 0x8                                           
0x78722b84ec6b    4983c608                add r14, 0x8                                           
0x78722b84ec6f    498906                  mov [r14], rax                                         
 .. ert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =      .. 
0x78722b84ec72    48b8d2c55e2b72780000    mov rax, 0x78722b5ec5d2       < string : 'goedel8_4_assert' >
0x78722b84ec7c    4983c608                add r14, 0x8                                           
0x78722b84ec80    498906                  mov [r14], rax                                         
0x78722b84ec83    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84ec8d    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..    } ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" as .. 
0x78722b84ec90    48b878b47a2972780000    mov rax, 0x7872297ab478                                
0x78722b84ec9a    488b00                  mov rax, [rax]                                         
0x78722b84ec9d    4983c608                add r14, 0x8                                           
0x78722b84eca1    498906                  mov [r14], rax                                         
 ..  ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert .. 
0x78722b84eca4    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84ecae    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b84ecb1    48b878b47a2972780000    mov rax, 0x7872297ab478                                
0x78722b84ecbb    b903000000              mov ecx, 0x3                                           
 ..         'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix      .. 
0x78722b84ecc0    488908                  mov [rax], rcx                                         
0x78722b84ecc3    48b878b47a2972780000    mov rax, 0x7872297ab478                                
0x78722b84eccd    4983c610                add r14, 0x10                                          
0x78722b84ecd1    498906                  mov [r14], rax                                         
 .. @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p  .. 
0x78722b84ecd4    498946f8                mov [r14-0x8], rax                                     
 ..              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p      .. 
0x78722b84ecd8    498b06                  mov rax, [r14]                                         
0x78722b84ecdb    488b00                  mov rax, [rax]                                         
0x78722b84ecde    498906                  mov [r14], rax                                         
 ..          n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p          .. 
0x78722b84ece1    49830607                add qword [r14], 0x7                                   
0x78722b84ece5    498b0e                  mov rcx, [r14]                                         
0x78722b84ece8    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ecec    4983ee10                sub r14, 0x10                                          
 ..        n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         re .. 
0x78722b84ecf0    488908                  mov [rax], rcx                                         
0x78722b84ecf3    48b878b47a2972780000    mov rax, 0x7872297ab478                                
0x78722b84ecfd    488b00                  mov rax, [rax]                                         
0x78722b84ed00    4983c610                add r14, 0x10                                          
0x78722b84ed04    498906                  mov [r14], rax                                         
 ..        n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     .. 
0x78722b84ed07    498946f8                mov [r14-0x8], rax                                     
 ..    n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goe .. 
0x78722b84ed0b    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84ed15    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
 ..  n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goede .. 
0x78722b84ed18    b80a000000              mov eax, 0xa                                           
0x78722b84ed1d    4983c608                add r14, 0x8                                           
0x78722b84ed21    498906                  mov [r14], rax                                         
 .. dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8  .. 
0x78722b84ed24    48b80ac65e2b72780000    mov rax, 0x78722b5ec60a       < string : 'goedel8_5_assert' >
0x78722b84ed2e    4983c608                add r14, 0x8                                           
0x78722b84ed32    498906                  mov [r14], rax                                         
0x78722b84ed35    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b84ed3f    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
0x78722b84ed42    498b4708                mov rax, [r15+0x8]                                     
 .. sert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output shou .. 
0x78722b84ed46    b908000000              mov ecx, 0x8                                           
 .. rt" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should .. 
0x78722b84ed4b    4803c1                  add rax, rcx                                           
0x78722b84ed4e    4983c610                add r14, 0x10                                          
0x78722b84ed52    498906                  mov [r14], rax                                         
 .. " assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should r .. 
0x78722b84ed55    498946f8                mov [r14-0x8], rax                                     
0x78722b84ed59    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b84ed63    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b84ed66    498b06                  mov rax, [r14]                                         
0x78722b84ed69    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84ed6d    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84ed71    4983c608                add r14, 0x8                                           
0x78722b84ed75    498906                  mov [r14], rax                                         
 .. sert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read  .. 
0x78722b84ed78    c3                      ret                                                    
Word_Disassemble : word - 'goedel8' :: codeSize = 594
Word : 0x00007872297a5708 :: Compiled at : 0x000078722b84eb27
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 314.24 <::
 ( ( 1 2 ) )
 ( 1 2 )
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 
ending lisp.csl
total 44
drwxr-xr-x 11 root root 4096 Oct  3  2023 .
drwxr-xr-x 14 root root 4096 Jul 28 07:45 ..
drwxr-xr-x  2 root root 4096 Jul 28 15:45 bin
drwxr-xr-x  2 root root 4096 Oct  5  2023 etc
drwxr-xr-x  2 root root 4096 Sep 18  2023 games
drwxr-xr-x  3 root root 4096 Oct  5  2023 include
drwxr-xr-x  3 root root 4096 Jul 28 15:45 lib
drwxr-xr-x  2 root root 4096 Sep 18  2023 man
drwxr-xr-x  2 root root 4096 Sep 18  2023 sbin
drwxr-xr-x  3 root root 4096 Apr  7 16:24 share
drwxr-xr-x  2 root root 4096 Sep 18  2023 src

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.135
 7 7 7
version 0.940.135
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x94af400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x00007708094af400 : disassembly at etc/script : 35.8 :
0x7708094af400    4d897e08                mov [r14+0x8], r15                                     
0x7708094af404    4d8d7e08                lea r15, [r14+0x8]                                     
0x7708094af408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7708094af40f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7708094af417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af41c    7e1f                    jle 0x94af43d                 < Int.fac+61 >
0x7708094af41e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af42a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af42e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7708094af43b    7fe5                    jg 0x94af422                  < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7708094af43d    498b4708                mov rax, [r15+0x8]                                     
0x7708094af441    e900000000              jmp 0x7708094af446            < Int.fac+70 >
0x7708094af446    4d8d77f8                lea r14, [r15-0x8]                                     
0x7708094af44a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x7708094af44e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x7708094af451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x00007708090bd437 :: Compiled at : 0x00007708094af400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.140
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21166 : Unused =   1027410 : Allocations =    1 : Largest =  1027410 : Smallest =  1027410 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    753727 : Unused =   3440577 : Allocations =    1 : Largest =  3440577 : Smallest =  3440577 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1895753 : Unused =  23289671
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    848016 : 1963  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xca90237f -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x00007c4cca90237f : disassembly at etc/lispScript : 28.17 :
0x7c4cca90237f    4d897e08                mov [r14+0x8], r15                                     
0x7c4cca902383    4d8d7e08                lea r15, [r14+0x8]                                     
0x7c4cca902387    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7c4cca90238e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7c4cca902396    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca90239b    7e1f                    jle 0xca9023bc                < Int.fac+61 >
0x7c4cca90239d    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023a1    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023a5    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023a9    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023ad    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023b1    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023b5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7c4cca9023ba    7fe5                    jg 0xca9023a1                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023bc    498b4708                mov rax, [r15+0x8]                                     
0x7c4cca9023c0    e900000000              jmp 0x7c4cca9023c5            < Int.fac+70 >
0x7c4cca9023c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7c4cca9023c9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x7c4cca9023cd    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x7c4cca9023d0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x00007c4ccaabc1a7 :: Compiled at : 0x00007c4cca90237f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye
 3
total 3964
drwxr-xr-x  8 dennisj dennisj    4096 Jul 28 16:02 .
drwx------ 46 dennisj dennisj   12288 Jul 28 15:59 ..
drwxr-xr-x  2 dennisj dennisj    4096 Jul 28 16:07 bin
-rw-r--r--  1 dennisj dennisj       8 Jul 19 07:47 csl.cflags
-rw-r--r--  1 dennisj dennisj      86 Jul 19 07:47 csl.config
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.creator
-rw-r--r--  1 dennisj dennisj   18232 Jul 27 08:57 csl.creator.user
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.cxxflags
-rw-r--r--  1 dennisj dennisj    4889 Jul 20 10:07 csl.files
-rw-r--r--  1 dennisj dennisj      12 Jul 20 10:07 csl.includes
-rw-r--r--  1 dennisj dennisj 1953687 Jul 28 15:58 csl.out.939.483.txt
-rw-r--r--  1 dennisj dennisj 1857679 Jul 28 16:02 csl.out.txt
drwxr-xr-x  2 dennisj dennisj    4096 Jul 25 22:24 etc
drwxr-xr-x  8 dennisj dennisj    4096 Jul 27 00:06 .git
-rw-r--r--  1 dennisj dennisj   18845 Jul 27 09:43 init.csl
-rw-r--r--  1 dennisj dennisj     163 Apr  2  2022 itestf
-rw-r--r--  1 dennisj dennisj    1067 Aug  4  2023 LICENSE
-rw-r--r--  1 dennisj dennisj   20368 Apr  2  2022 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj     220 Apr  2  2022 m
-rwxr-xr-x  1 dennisj dennisj     664 Apr  2  2022 m0
-rwxr-xr-x  1 dennisj dennisj     224 Apr  2  2022 ma
-rw-r--r--  1 dennisj dennisj    8884 Jul 26 03:03 Makefile
-rwxr-xr-x  1 dennisj dennisj     613 Jul 23 13:35 mir
-rwxr-xr-x  1 dennisj dennisj     504 Apr  2  2022 mira
-rwxr-xr-x  1 dennisj dennisj     549 Apr  2  2022 mirAll
-rwxr-xr-x  1 dennisj dennisj     518 Apr  2  2022 mirs
drwxr-xr-x  4 dennisj dennisj    4096 Jul 25 23:15 namespaces
drwxr-xr-x  3 dennisj dennisj    4096 Jul 25 22:25 nbproject
-rwxr-xr-x  1 dennisj dennisj      52 Sep 29  2022 netbeans
-rw-r--r--  1 dennisj dennisj       5 Jul 28 16:02 node.txt
-rw-r--r--  1 dennisj dennisj      40 Apr  2  2022 nt.csl
-rwxr-xr-x  1 dennisj dennisj     124 Apr  2  2022 r
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.md
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.txt
drwxr-xr-x  5 dennisj dennisj    4096 Jul 25 22:24 src
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test.txt

3
 namespaces/test/lisp.csl 351.9
including namespaces/compiler/syntax.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :> 
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
Source code file location of yada : "namespaces/compiler/syntax.csl" : 7.10 :: we are now at : namespaces/compiler/syntax.csl : 7.83
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ee1b -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yada : definition = 0x000078722b84ee1b : disassembly at namespaces/compiler/syntax.csl : 7.83 :
0x78722b84ee1b    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ee1f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ee23    4981c620000000          add r14, 0x20                                          
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x78722b84ee2a    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x78722b84ee32    49c747100c000000        mov qword [r15+0x10], 0xc                              
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee3a    498b4708                mov rax, [r15+0x8]                                     
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee3e    498b4f10                mov rcx, [r15+0x10]                                    
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee42    4803c1                  add rax, rcx                                           
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee45    b902000000              mov ecx, 0x2                                           
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee4a    48c7c200000000          mov rdx, 0x0                                           
0x78722b84ee51    48f7f9                  idiv rcx                                               
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x78722b84ee54    49894718                mov [r15+0x18], rax                                    
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee58    498b4718                mov rax, [r15+0x18]                                    
0x78722b84ee5c    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84ee60    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84ee64    4983c608                add r14, 0x8                                           
 .. 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee68    498906                  mov [r14], rax                                         
 .. x ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee6b    c3                      ret                                                    
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x00007872297b0048 :: Compiled at : 0x000078722b84ee1b
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 7.83 <::

DataStack at : namespaces/compiler/syntax.csl : 7.97 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/syntax.csl : 7.107 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :> 
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
Source code file location of yadaYada : "namespaces/compiler/syntax.csl" : 8.14 :: we are now at : namespaces/compiler/syntax.csl : 8.98
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ee71 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x000078722b84ee71 : disassembly at namespaces/compiler/syntax.csl : 8.98 :
0x78722b84ee71    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ee75    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ee79    4981c620000000          add r14, 0x20                                          
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x78722b84ee80    49c7470802000000        mov qword [r15+0x8], 0x2                               
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x78722b84ee88    49c747100c000000        mov qword [r15+0x10], 0xc                              
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee90    498b4708                mov rax, [r15+0x8]                                     
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee94    498b4f10                mov rcx, [r15+0x10]                                    
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee98    4803c1                  add rax, rcx                                           
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84ee9b    b902000000              mov ecx, 0x2                                           
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84eea0    48c7c200000000          mov rdx, 0x0                                           
0x78722b84eea7    48f7f9                  idiv rcx                                               
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84eeaa    49894718                mov [r15+0x18], rax                                    
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84eeae    498b4718                mov rax, [r15+0x18]                                    
0x78722b84eeb2    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84eeb6    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84eeba    4983c608                add r14, 0x8                                           
 ..  = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84eebe    498906                  mov [r14], rax                                         
 .. 2 ; x = (( a + b ) / 2 ) ; return x ; } 
0x78722b84eec1    c3                      ret                                                    
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x00007872297b2ae8 :: Compiled at : 0x000078722b84ee71
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 8.98 <::

DataStack at : namespaces/compiler/syntax.csl : 8.124 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Root.hi <:> csl compiled word
SourceCode for Root.hi :> 
: hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x 
Source code file location of hi : "namespaces/compiler/syntax.csl" : 14.2 :: we are now at : namespaces/compiler/syntax.csl : 15.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ef00 -- code size = 101 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi : definition = 0x000078722b84ef00 : disassembly at namespaces/compiler/syntax.csl : 15.16 :
0x78722b84ef00    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ef04    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ef08    4981c610000000          add r14, 0x10                                          
 ..                    : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef0f    b802000000              mov eax, 0x2                                           
0x78722b84ef14    4983c608                add r14, 0x8                                           
0x78722b84ef18    498906                  mov [r14], rax                                         
 ..              : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef1b    b80c000000              mov eax, 0xc                                           
0x78722b84ef20    4983c608                add r14, 0x8                                           
0x78722b84ef24    498906                  mov [r14], rax                                         
 ..          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef27    498b0e                  mov rcx, [r14]                                         
0x78722b84ef2a    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84ef2e    4983ee10                sub r14, 0x10                                          
 ..                  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef32    4803c1                  add rax, rcx                                           
 ..                          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef35    49894708                mov [r15+0x8], rax                                     
 ..   : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef39    498b4708                mov rax, [r15+0x8]                                     
0x78722b84ef3d    4983c608                add r14, 0x8                                           
0x78722b84ef41    498906                  mov [r14], rax                                         
 .. : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef44    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b84ef4e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x78722b84ef51    498b4708                mov rax, [r15+0x8]                                     
0x78722b84ef55    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84ef59    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84ef5d    4983c608                add r14, 0x8                                           
 .. x ) x = ( 2 + ( 3 * 4 ) ), x p return x 
0x78722b84ef61    498906                  mov [r14], rax                                         
0x78722b84ef64    c3                      ret                                                    
Word_Disassemble : word - 'hi' :: codeSize = 101
Word : 0x00007872297b6158 :: Compiled at : 0x000078722b84ef00
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 15.16 <::
 14
DataStack at : namespaces/compiler/syntax.csl : 16.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :> 
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 19.2 :: we are now at : namespaces/compiler/syntax.csl : 20.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84ef6a -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi1 : definition = 0x000078722b84ef6a : disassembly at namespaces/compiler/syntax.csl : 20.17 :
0x78722b84ef6a    4d897e08                mov [r14+0x8], r15                                     
0x78722b84ef6e    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84ef72    4981c610000000          add r14, 0x10                                          
 ..                 : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84ef79    b802000000              mov eax, 0x2                                           
0x78722b84ef7e    4983c608                add r14, 0x8                                           
0x78722b84ef82    498906                  mov [r14], rax                                         
 ..         : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84ef85    498b47f0                mov rax, [r15-0x10]                                    
 .. : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84ef89    498b4ff8                mov rcx, [r15-0x8]                                     
 ..     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84ef8d    48c7c200000000          mov rdx, 0x0                                           
0x78722b84ef94    48f7f9                  idiv rcx                                               
0x78722b84ef97    4983c608                add r14, 0x8                                           
  : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84ef9b    498906                  mov [r14], rax                                         
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84ef9e    498b0e                  mov rcx, [r14]                                         
0x78722b84efa1    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84efa5    4983ee10                sub r14, 0x10                                          
 ..               : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84efa9    4803c1                  add rax, rcx                                           
0x78722b84efac    4983c608                add r14, 0x8                                           
0x78722b84efb0    498906                  mov [r14], rax                                         
 .. b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x78722b84efb3    b80c000000              mov eax, 0xc                                           
0x78722b84efb8    4983c608                add r14, 0x8                                           
0x78722b84efbc    498906                  mov [r14], rax                                         
 .. x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x78722b84efbf    498b0e                  mov rcx, [r14]                                         
0x78722b84efc2    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84efc6    4983ee10                sub r14, 0x10                                          
 .. | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x78722b84efca    480fafc1                imul rax, rcx                                          
 ..                     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x78722b84efce    49894708                mov [r15+0x8], rax                                     
 ..  = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x78722b84efd2    498b4708                mov rax, [r15+0x8]                                     
0x78722b84efd6    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84efda    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84efde    4983ee08                sub r14, 0x8                                           
 .. ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x78722b84efe2    498906                  mov [r14], rax                                         
 .. ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x78722b84efe5    c3                      ret                                                    
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x00007872297b8538 :: Compiled at : 0x000078722b84ef6a
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 20.17 <::
 48
 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :> 
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 22.2 :: we are now at : namespaces/compiler/syntax.csl : 23.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84efeb -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi1 : definition = 0x000078722b84efeb : disassembly at namespaces/compiler/syntax.csl : 23.17 :
0x78722b84efeb    4d897e08                mov [r14+0x8], r15                                     
0x78722b84efef    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84eff3    4981c610000000          add r14, 0x10                                          
 ..               : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84effa    b802000000              mov eax, 0x2                                           
0x78722b84efff    4983c608                add r14, 0x8                                           
0x78722b84f003    498906                  mov [r14], rax                                         
 ..         : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f006    498b47f0                mov rax, [r15-0x10]                                    
 ..     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f00a    498b4ff8                mov rcx, [r15-0x8]                                     
 ..       : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f00e    48c7c200000000          mov rdx, 0x0                                           
0x78722b84f015    48f7f9                  idiv rcx                                               
0x78722b84f018    4983c608                add r14, 0x8                                           
0x78722b84f01c    498906                  mov [r14], rax                                         
 ..   : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f01f    498b0e                  mov rcx, [r14]                                         
0x78722b84f022    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f026    4983ee10                sub r14, 0x10                                          
 ..             : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f02a    4803c1                  add rax, rcx                                           
0x78722b84f02d    4983c608                add r14, 0x8                                           
0x78722b84f031    498906                  mov [r14], rax                                         
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f034    b80c000000              mov eax, 0xc                                           
0x78722b84f039    4983c608                add r14, 0x8                                           
0x78722b84f03d    498906                  mov [r14], rax                                         
 .. a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x78722b84f040    498b0e                  mov rcx, [r14]                                         
0x78722b84f043    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f047    4983ee10                sub r14, 0x10                                          
 .. ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x78722b84f04b    480fafc1                imul rax, rcx                                          
 ..                     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x78722b84f04f    49894708                mov [r15+0x8], rax                                     
 ..  ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x78722b84f053    498b4708                mov rax, [r15+0x8]                                     
0x78722b84f057    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f05b    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f05f    4983ee08                sub r14, 0x8                                           
 .. ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x78722b84f063    498906                  mov [r14], rax                                         
 .. 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x78722b84f066    c3                      ret                                                    
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x00007872297bb338 :: Compiled at : 0x000078722b84efeb
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 23.17 <::
 48 48
DataStack at : namespaces/compiler/syntax.csl : 26.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Root.hi2 <:> csl compiled word
SourceCode for Root.hi2 :> 
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
Source code file location of hi2 : "namespaces/compiler/syntax.csl" : 27.2 :: we are now at : namespaces/compiler/syntax.csl : 28.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f06c -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi2 : definition = 0x000078722b84f06c : disassembly at namespaces/compiler/syntax.csl : 28.17 :
0x78722b84f06c    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f070    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f074    4981c610000000          add r14, 0x10                                          
 ..       : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x78722b84f07b    b802000000              mov eax, 0x2                                           
0x78722b84f080    4983c608                add r14, 0x8                                           
0x78722b84f084    498906                  mov [r14], rax                                         
 .. : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x78722b84f087    498b47f0                mov rax, [r15-0x10]                                    
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x78722b84f08b    498b4ff8                mov rcx, [r15-0x8]                                     
  : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x78722b84f08f    48c7c200000000          mov rdx, 0x0                                           
0x78722b84f096    48f7f9                  idiv rcx                                               
0x78722b84f099    4983c608                add r14, 0x8                                           
0x78722b84f09d    498906                  mov [r14], rax                                         
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0a0    498b0e                  mov rcx, [r14]                                         
0x78722b84f0a3    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f0a7    4983ee10                sub r14, 0x10                                          
 ..     : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x78722b84f0ab    4803c1                  add rax, rcx                                           
0x78722b84f0ae    4983c608                add r14, 0x8                                           
0x78722b84f0b2    498906                  mov [r14], rax                                         
 .. ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0b5    b80c000000              mov eax, 0xc                                           
0x78722b84f0ba    4983c608                add r14, 0x8                                           
0x78722b84f0be    498906                  mov [r14], rax                                         
 .. x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0c1    498b0e                  mov rcx, [r14]                                         
0x78722b84f0c4    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f0c8    4983ee10                sub r14, 0x10                                          
 .. ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0cc    480fafc1                imul rax, rcx                                          
 ..                   : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x78722b84f0d0    49894708                mov [r15+0x8], rax                                     
 ..  ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0d4    498b4708                mov rax, [r15+0x8]                                     
0x78722b84f0d8    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f0dc    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f0e0    4983ee08                sub r14, 0x8                                           
 .. b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0e4    498906                  mov [r14], rax                                         
 .. ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x78722b84f0e7    c3                      ret                                                    
Word_Disassemble : word - 'hi2' :: codeSize = 124
Word : 0x00007872297bddd8 :: Compiled at : 0x000078722b84f06c
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 28.17 <::
 48
DataStack at : namespaces/compiler/syntax.csl : 29.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 48
DataStack at : namespaces/compiler/syntax.csl : 31.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Root.h3 <:> csl compiled word
SourceCode for Root.h3 :> 
: h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
Source code file location of h3 : "namespaces/compiler/syntax.csl" : 32.2 :: we are now at : namespaces/compiler/syntax.csl : 33.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f0ed -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Root.h3 : definition = 0x000078722b84f0ed : disassembly at namespaces/compiler/syntax.csl : 33.16 :
0x78722b84f0ed    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f0f1    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f0f5    4981c610000000          add r14, 0x10                                          
 ..        : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x78722b84f0fc    b802000000              mov eax, 0x2                                           
0x78722b84f101    4983c608                add r14, 0x8                                           
0x78722b84f105    498906                  mov [r14], rax                                         
   : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x78722b84f108    b80c000000              mov eax, 0xc                                           
0x78722b84f10d    4983c608                add r14, 0x8                                           
0x78722b84f111    498906                  mov [r14], rax                                         
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f114    498b0e                  mov rcx, [r14]                                         
0x78722b84f117    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f11b    4983ee10                sub r14, 0x10                                          
 ..      : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x78722b84f11f    4803c1                  add rax, rcx                                           
0x78722b84f122    4983c608                add r14, 0x8                                           
0x78722b84f126    498906                  mov [r14], rax                                         
 ..  ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f129    498b47f0                mov rax, [r15-0x10]                                    
 ..  ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f12d    498b4ff8                mov rcx, [r15-0x8]                                     
 .. x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f131    48c7c200000000          mov rdx, 0x0                                           
0x78722b84f138    48f7f9                  idiv rcx                                               
0x78722b84f13b    4983c608                add r14, 0x8                                           
 .. ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f13f    498906                  mov [r14], rax                                         
 .. ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f142    498b0e                  mov rcx, [r14]                                         
0x78722b84f145    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f149    4983ee10                sub r14, 0x10                                          
 .. | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f14d    482bc1                  sub rax, rcx                                           
 ..                    : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x78722b84f150    49894708                mov [r15+0x8], rax                                     
 ..  3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f154    498b4708                mov rax, [r15+0x8]                                     
0x78722b84f158    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f15c    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f160    4983ee08                sub r14, 0x8                                           
 .. ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f164    498906                  mov [r14], rax                                         
 .. ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x78722b84f167    c3                      ret                                                    
Word_Disassemble : word - 'h3' :: codeSize = 123
Word : 0x00007872297c1958 :: Compiled at : 0x000078722b84f0ed
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 33.16 <::
 12 6 3 h3_assert1  : ok

 12
DataStack at : namespaces/compiler/syntax.csl : 35.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Root.h4 <:> csl compiled word
SourceCode for Root.h4 :> 
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
Source code file location of h4 : "namespaces/compiler/syntax.csl" : 36.2 :: we are now at : namespaces/compiler/syntax.csl : 37.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f16d -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Root.h4 : definition = 0x000078722b84f16d : disassembly at namespaces/compiler/syntax.csl : 37.16 :
0x78722b84f16d    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f171    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f175    4981c610000000          add r14, 0x10                                          
 ..                : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f17c    b814000000              mov eax, 0x14                                          
0x78722b84f181    4983c608                add r14, 0x8                                           
0x78722b84f185    498906                  mov [r14], rax                                         
 ..         : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f188    b80c000000              mov eax, 0xc                                           
0x78722b84f18d    4983c608                add r14, 0x8                                           
0x78722b84f191    498906                  mov [r14], rax                                         
 ..     : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f194    498b0e                  mov rcx, [r14]                                         
0x78722b84f197    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f19b    4983ee10                sub r14, 0x10                                          
 ..             : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f19f    482bc1                  sub rax, rcx                                           
0x78722b84f1a2    4983c608                add r14, 0x8                                           
0x78722b84f1a6    498906                  mov [r14], rax                                         
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f1a9    498b47f0                mov rax, [r15-0x10]                                    
 ..  b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x78722b84f1ad    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x78722b84f1b1    48c7c200000000          mov rdx, 0x0                                           
0x78722b84f1b8    48f7f9                  idiv rcx                                               
0x78722b84f1bb    4983c608                add r14, 0x8                                           
0x78722b84f1bf    498906                  mov [r14], rax                                         
 ..  | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x78722b84f1c2    498b0e                  mov rcx, [r14]                                         
0x78722b84f1c5    498b46f8                mov rax, [r14-0x8]                                     
0x78722b84f1c9    4983ee10                sub r14, 0x10                                          
 .. : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f1cd    482bc1                  sub rax, rcx                                           
 ..                      : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x78722b84f1d0    49894708                mov [r15+0x8], rax                                     
 .. ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x78722b84f1d4    498b4708                mov rax, [r15+0x8]                                     
0x78722b84f1d8    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f1dc    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f1e0    4983ee08                sub r14, 0x8                                           
 ..  20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x78722b84f1e4    498906                  mov [r14], rax                                         
 .. 0 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x78722b84f1e7    c3                      ret                                                    
Word_Disassemble : word - 'h4' :: codeSize = 123
Word : 0x00007872297c5b98 :: Compiled at : 0x000078722b84f16d
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 37.16 <::
 6
DataStack at : namespaces/compiler/syntax.csl : 38.24 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 6
DataStack at : namespaces/compiler/syntax.csl : 39.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 
above lines should read 6
DataStack at : namespaces/compiler/syntax.csl : 42.40 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005
 3 
above line should read 3

  52.53799999999999670308170607313514
  52.53799999999999670308170607313514
  52.53799999999999670308170607313514 
above lines should show : 52.53799999999999670308170607313514
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :> 
void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 59.11 :: we are now at : namespaces/compiler/syntax.csl : 62.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f4df -- code size = 255 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x000078722b84f4df : disassembly at namespaces/compiler/syntax.csl : 62.18 :
0x78722b84f4df    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f4e3    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f4e7    4981c608000000          add r14, 0x8                                           
 ..                    void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } .. 
0x78722b84f4ee    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b84f4f3    0f8523000000            jnz 0x78722b84f51c            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x78722b84f4f9    48b8f5d55e2b72780000    mov rax, 0x78722b5ed5f5       < string : 'hi1' >
0x78722b84f503    4983c608                add r14, 0x8                                           
0x78722b84f507    498906                  mov [r14], rax                                         
 ..     void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x78722b84f50a    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f514    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f517    e929000000              jmp 0x78722b84f545            < C_Syntax.thi42+102 >
   void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x78722b84f51c    49837ff802              cmp qword [r15-0x8], 0x2                               
0x78722b84f521    0f8523000000            jnz 0x78722b84f54a            < C_Syntax.thi42+107 >
 ..  ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f527    48b807d65e2b72780000    mov rax, 0x78722b5ed607       < string : 'hi2' >
0x78722b84f531    4983c608                add r14, 0x8                                           
0x78722b84f535    498906                  mov [r14], rax                                         
 ..  { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f538    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f542    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f545    e929000000              jmp 0x78722b84f573            < C_Syntax.thi42+148 >
 .. == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f54a    49837ff803              cmp qword [r15-0x8], 0x3                               
0x78722b84f54f    0f8523000000            jnz 0x78722b84f578            < C_Syntax.thi42+153 >
 .. i1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f555    48b819d65e2b72780000    mov rax, 0x78722b5ed619       < string : 'hi3' >
0x78722b84f55f    4983c608                add r14, 0x8                                           
0x78722b84f563    498906                  mov [r14], rax                                         
 ..  : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f566    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f570    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f573    e929000000              jmp 0x78722b84f5a1            < C_Syntax.thi42+194 >
 .. == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f578    49837ff804              cmp qword [r15-0x8], 0x4                               
0x78722b84f57d    0f8523000000            jnz 0x78722b84f5a6            < C_Syntax.thi42+199 >
 .. i2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f583    48b82cd65e2b72780000    mov rax, 0x78722b5ed62c       < string : 'hi42' >
0x78722b84f58d    4983c608                add r14, 0x8                                           
0x78722b84f591    498906                  mov [r14], rax                                         
 .. : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f594    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f59e    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f5a1    e92b000000              jmp 0x78722b84f5d1            < C_Syntax.thi42+242 >
 .. = 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f5a6    48b83ed65e2b72780000    mov rax, 0x78722b5ed63e       < string : 'err' >
0x78722b84f5b0    4983c608                add r14, 0x8                                           
0x78722b84f5b4    498906                  mov [r14], rax                                         
 .. "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f5b7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f5c1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. 3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f5c4    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f5ce    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84f5d1    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f5d5    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f5d9    4983ee08                sub r14, 0x8                                           
 .. n == 4 ? "hi42" ps : "err" ps Error ; } 
0x78722b84f5dd    c3                      ret                                                    
Word_Disassemble : word - 'thi42' :: codeSize = 255
Word : 0x00007872297ced38 :: Compiled at : 0x000078722b84f4df
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 62.18 <::

 hi1 hi2 hi3 hi42 
should show : hi1 hi2 hi3 hi42  hi42

 =============================
Interpreter.thi2 <:> csl compiled word
SourceCode for Interpreter.thi2 :> 
: thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
Source code file location of thi2 : "namespaces/compiler/syntax.csl" : 72.2 :: we are now at : namespaces/compiler/syntax.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f5e3 -- code size = 150 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi2 : definition = 0x000078722b84f5e3 : disassembly at namespaces/compiler/syntax.csl : 73.17 :
0x78722b84f5e3    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f5e7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f5eb    4981c608000000          add r14, 0x8                                           
 ..                          : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x78722b84f5f2    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b84f5f7    0f8523000000            jnz 0x78722b84f620            < Interpreter.thi2+61 >
 ..               : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x78722b84f5fd    48b865d75e2b72780000    mov rax, 0x78722b5ed765       < string : 'hi1' >
0x78722b84f607    4983c608                add r14, 0x8                                           
0x78722b84f60b    498906                  mov [r14], rax                                         
 ..         : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x78722b84f60e    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f618    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f61b    e929000000              jmp 0x78722b84f649            < Interpreter.thi2+102 >
 ..    : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x78722b84f620    49837ff802              cmp qword [r15-0x8], 0x2                               
0x78722b84f625    0f8523000000            jnz 0x78722b84f64e            < Interpreter.thi2+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x78722b84f62b    48b877d75e2b72780000    mov rax, 0x78722b5ed777       < string : 'hi2' >
0x78722b84f635    4983c608                add r14, 0x8                                           
0x78722b84f639    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x78722b84f63c    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f646    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f649    e91e000000              jmp 0x78722b84f66c            < Interpreter.thi2+137 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x78722b84f64e    48b887d75e2b72780000    mov rax, 0x78722b5ed787       < string : 'err' >
0x78722b84f658    4983c608                add r14, 0x8                                           
0x78722b84f65c    498906                  mov [r14], rax                                         
 .. hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x78722b84f65f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f669    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f66c    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f670    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f674    4983ee08                sub r14, 0x8                                           
 .. " ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x78722b84f678    c3                      ret                                                    
Word_Disassemble : word - 'thi2' :: codeSize = 150
Word : 0x00007872297d2048 :: Compiled at : 0x000078722b84f5e3
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 73.17 <::
 hi2
 =============================
Interpreter.thi3 <:> csl compiled word
SourceCode for Interpreter.thi3 :> 
: thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
Source code file location of thi3 : "namespaces/compiler/syntax.csl" : 75.2 :: we are now at : namespaces/compiler/syntax.csl : 76.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f67e -- code size = 179 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi3 : definition = 0x000078722b84f67e : disassembly at namespaces/compiler/syntax.csl : 76.17 :
0x78722b84f67e    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f682    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f686    4981c608000000          add r14, 0x8                                           
 ..                          : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x78722b84f68d    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b84f692    0f8523000000            jnz 0x78722b84f6bb            < Interpreter.thi3+61 >
 ..               : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x78722b84f698    48b8f0d75e2b72780000    mov rax, 0x78722b5ed7f0       < string : 'hi1' >
0x78722b84f6a2    4983c608                add r14, 0x8                                           
0x78722b84f6a6    498906                  mov [r14], rax                                         
 ..         : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x78722b84f6a9    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f6b3    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f6b6    e929000000              jmp 0x78722b84f6e4            < Interpreter.thi3+102 >
 ..    : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x78722b84f6bb    49837ff802              cmp qword [r15-0x8], 0x2                               
0x78722b84f6c0    0f8523000000            jnz 0x78722b84f6e9            < Interpreter.thi3+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f6c6    48b802d85e2b72780000    mov rax, 0x78722b5ed802       < string : 'hi2' >
0x78722b84f6d0    4983c608                add r14, 0x8                                           
0x78722b84f6d4    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f6d7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f6e1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f6e4    e929000000              jmp 0x78722b84f712            < Interpreter.thi3+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f6e9    49837ff803              cmp qword [r15-0x8], 0x3                               
0x78722b84f6ee    0f8523000000            jnz 0x78722b84f717            < Interpreter.thi3+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f6f4    48b814d85e2b72780000    mov rax, 0x78722b5ed814       < string : 'hi3' >
0x78722b84f6fe    4983c608                add r14, 0x8                                           
0x78722b84f702    498906                  mov [r14], rax                                         
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f705    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f70f    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f712    e90d000000              jmp 0x78722b84f724            < Interpreter.thi3+166 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f717    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f721    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84f724    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f728    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f72c    4983ee08                sub r14, 0x8                                           
 .. hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x78722b84f730    c3                      ret                                                    
Word_Disassemble : word - 'thi3' :: codeSize = 179
Word : 0x00007872297d3f18 :: Compiled at : 0x000078722b84f67e
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 76.17 <::
 hi3
 =============================
Interpreter.thi43 <:> csl compiled word
SourceCode for Interpreter.thi43 :> 
: thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
Source code file location of thi43 : "namespaces/compiler/syntax.csl" : 79.2 :: we are now at : namespaces/compiler/syntax.csl : 80.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f736 -- code size = 225 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi43 : definition = 0x000078722b84f736 : disassembly at namespaces/compiler/syntax.csl : 80.18 :
0x78722b84f736    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f73a    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f73e    4981c608000000          add r14, 0x8                                           
 ..                         : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x78722b84f745    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b84f74a    0f8523000000            jnz 0x78722b84f773            < Interpreter.thi43+61 >
 ..              : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x78722b84f750    48b891d85e2b72780000    mov rax, 0x78722b5ed891       < string : 'hi1' >
0x78722b84f75a    4983c608                add r14, 0x8                                           
0x78722b84f75e    498906                  mov [r14], rax                                         
 ..        : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x78722b84f761    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f76b    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f76e    e929000000              jmp 0x78722b84f79c            < Interpreter.thi43+102 >
 ..   : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x78722b84f773    49837ff802              cmp qword [r15-0x8], 0x2                               
0x78722b84f778    0f8523000000            jnz 0x78722b84f7a1            < Interpreter.thi43+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f77e    48b8a3d85e2b72780000    mov rax, 0x78722b5ed8a3       < string : 'hi2' >
0x78722b84f788    4983c608                add r14, 0x8                                           
0x78722b84f78c    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f78f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f799    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f79c    e929000000              jmp 0x78722b84f7ca            < Interpreter.thi43+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7a1    49837ff803              cmp qword [r15-0x8], 0x3                               
0x78722b84f7a6    0f8523000000            jnz 0x78722b84f7cf            < Interpreter.thi43+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7ac    48b8b5d85e2b72780000    mov rax, 0x78722b5ed8b5       < string : 'hi3' >
0x78722b84f7b6    4983c608                add r14, 0x8                                           
0x78722b84f7ba    498906                  mov [r14], rax                                         
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7bd    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f7c7    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f7ca    e929000000              jmp 0x78722b84f7f8            < Interpreter.thi43+194 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7cf    49837ff804              cmp qword [r15-0x8], 0x4                               
0x78722b84f7d4    0f8523000000            jnz 0x78722b84f7fd            < Interpreter.thi43+199 >
 .. ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7da    48b8c8d85e2b72780000    mov rax, 0x78722b5ed8c8       < string : 'hi42' >
0x78722b84f7e4    4983c608                add r14, 0x8                                           
0x78722b84f7e8    498906                  mov [r14], rax                                         
 .. @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7eb    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f7f5    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f7f8    e90d000000              jmp 0x78722b84f80a            < Interpreter.thi43+212 >
 .. = ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f7fd    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f807    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84f80a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84f80e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84f812    4983ee08                sub r14, 0x8                                           
 .. i3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x78722b84f816    c3                      ret                                                    
Word_Disassemble : word - 'thi43' :: codeSize = 225
Word : 0x00007872297d6808 :: Compiled at : 0x000078722b84f736
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 80.18 <::
 hi42
 hi1 hi2 hi3 hi42
n = 3 : m = 4 7 hi42

 =============================
C_Syntax.thi41 <:> csl compiled word
SourceCode for C_Syntax.thi41 :> 
void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
Source code file location of thi41 : "namespaces/compiler/syntax.csl" : 97.11 :: we are now at : namespaces/compiler/syntax.csl : 101.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f8e2 -- code size = 220 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi41 : definition = 0x000078722b84f8e2 : disassembly at namespaces/compiler/syntax.csl : 101.18 :
 ..                       void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x78722b84f8e2    48c7c000000000          mov rax, 0x0                                           
0x78722b84f8e9    4883f800                cmp rax, 0x0                                           
0x78722b84f8ed    0f8423000000            jz 0x78722b84f916             < C_Syntax.thi41+52 >
 ..                   void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x78722b84f8f3    48b839da5e2b72780000    mov rax, 0x78722b5eda39       < string : 'hi1' >
0x78722b84f8fd    4983c608                add r14, 0x8                                           
0x78722b84f901    498906                  mov [r14], rax                                         
 ..             void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x78722b84f904    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f90e    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84f911    e92f000000              jmp 0x78722b84f945            < C_Syntax.thi41+99 >
 ..     void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x78722b84f916    48c7c000000000          mov rax, 0x0                                           
0x78722b84f91d    4883f800                cmp rax, 0x0                                           
0x78722b84f921    0f8423000000            jz 0x78722b84f94a             < C_Syntax.thi41+104 >
 .. void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x78722b84f927    48b84bda5e2b72780000    mov rax, 0x78722b5eda4b       < string : 'hi2' >
0x78722b84f931    4983c608                add r14, 0x8                                           
0x78722b84f935    498906                  mov [r14], rax                                         
 .. hi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f938    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f942    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84f945    e92f000000              jmp 0x78722b84f979            < C_Syntax.thi41+151 >
 .. { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f94a    48c7c000000000          mov rax, 0x0                                           
0x78722b84f951    4883f800                cmp rax, 0x0                                           
0x78722b84f955    0f8423000000            jz 0x78722b84f97e             < C_Syntax.thi41+156 >
 .. ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f95b    48b85dda5e2b72780000    mov rax, 0x78722b5eda5d       < string : 'hi3' >
0x78722b84f965    4983c608                add r14, 0x8                                           
0x78722b84f969    498906                  mov [r14], rax                                         
 .. " Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f96c    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f976    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84f979    e92d000000              jmp 0x78722b84f9ab            < C_Syntax.thi41+201 >
 .. : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f97e    b801000000              mov eax, 0x1                                           
0x78722b84f983    4883f800                cmp rax, 0x0                                           
0x78722b84f987    0f8423000000            jz 0x78722b84f9b0             < C_Syntax.thi41+206 >
 .. ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f98d    48b871da5e2b72780000    mov rax, 0x78722b5eda71                                
0x78722b84f997    4983c608                add r14, 0x8                                           
0x78722b84f99b    498906                  mov [r14], rax                                         
 .. rror : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f99e    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f9a8    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f9ab    e90d000000              jmp 0x78722b84f9bd            < C_Syntax.thi41+219 >
 .. : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f9b0    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84f9ba    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
 .. i3" Error : 1 ? "hi42\n" ps : Error ; } 
0x78722b84f9bd    c3                      ret                                                    
Word_Disassemble : word - 'thi41' :: codeSize = 220
Word : 0x00007872297db9e8 :: Compiled at : 0x000078722b84f8e2
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 101.18 <::
 hi42
 
should show : 'hi42' 
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :> 
void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 107.11 :: we are now at : namespaces/compiler/syntax.csl : 109.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b84f9c3 -- code size = 225 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x000078722b84f9c3 : disassembly at namespaces/compiler/syntax.csl : 109.18 :
0x78722b84f9c3    4d897e08                mov [r14+0x8], r15                                     
0x78722b84f9c7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b84f9cb    4981c608000000          add r14, 0x8                                           
 ..                    void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x78722b84f9d2    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b84f9d7    0f8523000000            jnz 0x78722b84fa00            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x78722b84f9dd    48b846db5e2b72780000    mov rax, 0x78722b5edb46       < string : '1:hi1' >
0x78722b84f9e7    4983c608                add r14, 0x8                                           
0x78722b84f9eb    498906                  mov [r14], rax                                         
 ..   void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x78722b84f9ee    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84f9f8    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84f9fb    e929000000              jmp 0x78722b84fa29            < C_Syntax.thi42+102 >
 void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x78722b84fa00    49837ff802              cmp qword [r15-0x8], 0x2                               
0x78722b84fa05    0f8523000000            jnz 0x78722b84fa2e            < C_Syntax.thi42+107 >
 ..  n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa0b    48b85edb5e2b72780000    mov rax, 0x78722b5edb5e       < string : '2:hi2' >
0x78722b84fa15    4983c608                add r14, 0x8                                           
0x78722b84fa19    498906                  mov [r14], rax                                         
 ..  == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa1c    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84fa26    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84fa29    e929000000              jmp 0x78722b84fa57            < C_Syntax.thi42+148 >
 ..  ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa2e    49837ff803              cmp qword [r15-0x8], 0x3                               
0x78722b84fa33    0f8523000000            jnz 0x78722b84fa5c            < C_Syntax.thi42+153 >
 .. " ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa39    48b876db5e2b72780000    mov rax, 0x78722b5edb76       < string : '3:hi3' >
0x78722b84fa43    4983c608                add r14, 0x8                                           
0x78722b84fa47    498906                  mov [r14], rax                                         
 ..  == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa4a    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84fa54    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84fa57    e929000000              jmp 0x78722b84fa85            < C_Syntax.thi42+194 >
 ..  ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa5c    49837ff804              cmp qword [r15-0x8], 0x4                               
0x78722b84fa61    0f8523000000            jnz 0x78722b84fa8a            < C_Syntax.thi42+199 >
 .. " ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa67    48b88fdb5e2b72780000    mov rax, 0x78722b5edb8f       < string : '4:hi42' >
0x78722b84fa71    4983c608                add r14, 0x8                                           
0x78722b84fa75    498906                  mov [r14], rax                                         
 .. == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa78    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b84fa82    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b84fa85    e90d000000              jmp 0x78722b84fa97            < C_Syntax.thi42+212 >
 .. ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84fa8a    49baa1f4842b72780000    mov r10, 0x78722b84f4a1                                
0x78722b84fa94    49ffd2                  call r10                      < void.Error : 0x000078722b84f4a1 >
0x78722b84fa97    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b84fa9b    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b84fa9f    4983ee08                sub r14, 0x8                                           
 .. " ps : n == 4 ? "4:hi42" ps : Error ; } 
0x78722b84faa3    c3                      ret                                                    
Word_Disassemble : word - 'thi42' :: codeSize = 225
Word : 0x00007872297ddc18 :: Compiled at : 0x000078722b84f9c3
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 109.18 <::
 4:hi42 
should show : '4:hi42'  ok ok
n = 3 : m = 4 7 
ok 
including namespaces/test/system.csl at namespaces/test/initTest.csl : 86.41 ...

hello world! - parse this!?
1234            and this! 
        also this!
Hello world! = 0x000004d2


Hello world! = 42


hello world! - parse this!?
         
        also this!
 7 7 7 7
DataStack at : namespaces/test/system.csl : 21.18 :
DataStack depth =   8 : Dsp (R14) = Top = 0x000078722c065af0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065af0 > = 0x000078722c065ad8
  DataStack   [  -1 ] < 0x000078722c065ae8 > = 0x000078722b951057       < word : User.s : value = 0x000060c889ef1c30 >
  DataStack   [  -2 ] < 0x000078722c065ae0 > = 0x0000000000000000
  DataStack   [  -3 ] < 0x000078722c065ad8 > = 0x000060c889f6dbf0
  DataStack   [  -4 ] < 0x000078722c065ad0 > = 0x000078722b951057       < word : User.s : value = 0x000060c889ef1c30 >
  DataStack   [  -5 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x000078722c065ab8 > = 0x0000000000000005

Hello world! = 0x000004d2


hello world!
parse this!


 
 and this!

hello world! - parse this!?
                 and this!
Hello world! = 0x000004d2


Hello world! = 0x000004d2


yes, Hello world! = 0x000004d2
yes, Hello world! = 0x000004d2 : and more yet
e
i       e
line above should read... 
i       e
 =============================
Shell.hio <:> csl compiled word
SourceCode for Shell.hio :> 
: hio if 1 p else 0 p endif ; 
Source code file location of hio : "namespaces/test/system.csl" : 52.2 :: we are now at : namespaces/test/system.csl : 53.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8501c7 -- code size = 75 bytes
 -----------------------------
Word :: Shell.hio : definition = 0x000078722b8501c7 : disassembly at namespaces/test/system.csl : 53.17 :
 ..                                : hio  if 1 p else 0 p endif ;  .. 
0x78722b8501c7    498b06                  mov rax, [r14]                                         
0x78722b8501ca    4983ee08                sub r14, 0x8                                           
0x78722b8501ce    4883f800                cmp rax, 0x0                                           
0x78722b8501d2    0f841e000000            jz 0x78722b8501f6             < Shell.hio+47 >
 ..                             : hio  if 1 p else 0 p endif ;  .. 
0x78722b8501d8    b801000000              mov eax, 0x1                                           
0x78722b8501dd    4983c608                add r14, 0x8                                           
0x78722b8501e1    498906                  mov [r14], rax                                         
 ..                           : hio  if 1 p else 0 p endif ;  .. 
0x78722b8501e4    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b8501ee    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..                         : hio  if 1 p else 0 p endif ;  .. 
0x78722b8501f1    e91b000000              jmp 0x78722b850211            < Shell.hio+74 >
 ..                    : hio  if 1 p else 0 p endif ;  .. 
0x78722b8501f6    48c7c000000000          mov rax, 0x0                                           
0x78722b8501fd    4983c608                add r14, 0x8                                           
0x78722b850201    498906                  mov [r14], rax                                         
 ..                  : hio  if 1 p else 0 p endif ;  .. 
0x78722b850204    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85020e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..          : hio  if 1 p else 0 p endif ;  .. 
0x78722b850211    c3                      ret                                                    
Word_Disassemble : word - 'hio' :: codeSize = 75
Word : 0x00007872297f0108 :: Compiled at : 0x000078722b8501c7
 =============================
::> 'wdiss' was called at namespaces/test/system.csl 53.17 <::
 1 0
 876543

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.135
 7 7 7
version 0.940.135
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x145c400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000076580145c400 : disassembly at etc/script : 35.8 :
0x76580145c400    4d897e08                mov [r14+0x8], r15                                     
0x76580145c404    4d8d7e08                lea r15, [r14+0x8]                                     
0x76580145c408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x76580145c40f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x76580145c417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c41c    7e1f                    jle 0x145c43d                 < Int.fac+61 >
0x76580145c41e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c42a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c42e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x76580145c43b    7fe5                    jg 0x145c422                  < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x76580145c43d    498b4708                mov rax, [r15+0x8]                                     
0x76580145c441    e900000000              jmp 0x76580145c446            < Int.fac+70 >
0x76580145c446    4d8d77f8                lea r14, [r15-0x8]                                     
0x76580145c44a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x76580145c44e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x76580145c451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x00007658010bd437 :: Compiled at : 0x000076580145c400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.140
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21166 : Unused =   1027410 : Allocations =    1 : Largest =  1027410 : Smallest =  1027410 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    753727 : Unused =   3440577 : Allocations =    1 : Largest =  3440577 : Smallest =  3440577 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1895753 : Unused =  23289671
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    848016 : 1963  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x91e4437f -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x0000714d91e4437f : disassembly at etc/lispScript : 28.17 :
0x714d91e4437f    4d897e08                mov [r14+0x8], r15                                     
0x714d91e44383    4d8d7e08                lea r15, [r14+0x8]                                     
0x714d91e44387    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x714d91e4438e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x714d91e44396    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e4439b    7e1f                    jle 0x91e443bc                < Int.fac+61 >
0x714d91e4439d    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443a1    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443a5    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443a9    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443ad    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443b1    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443b5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x714d91e443ba    7fe5                    jg 0x91e443a1                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443bc    498b4708                mov rax, [r15+0x8]                                     
0x714d91e443c0    e900000000              jmp 0x714d91e443c5            < Int.fac+70 >
0x714d91e443c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x714d91e443c9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x714d91e443cd    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x714d91e443d0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x0000714d91abc1a7 :: Compiled at : 0x0000714d91e4437f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye

including namespaces/compiler/interpreter.csl at namespaces/test/initTest.csl : 86.41 ...
 
xxhi :  
xhi =  7 7 
yhi :  7 
xxhi :  
xhi =  7 7 
zhi :  
yhi :  7 
xxhi :  
xhi =  7 7 7 
xxhi :  
xhi =  7 7
 =============================
C_Syntax.testc1 <:> csl compiled word, prefix
SourceCode for C_Syntax.testc1 :> 
void testc1 () { int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ; int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ; ps ( "\ntdbg =" ) ; p ( tdbg ) ; ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ; ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ; ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ; ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ; ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ; ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4) ; xhi1 p (1 + 2 + 4) ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1 p (1 + 2 + 4) ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ; } 
Source code file location of testc1 : "namespaces/compiler/interpreter.csl" : 37.7 :: we are now at : namespaces/compiler/interpreter.csl : 49.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b850aba -- code size = 1219 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.testc1 : definition = 0x000078722b850aba : disassembly at namespaces/compiler/interpreter.csl : 49.19 :
0x78722b850aba    4d897e08                mov [r14+0x8], r15                                     
0x78722b850abe    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850ac2    4981c638000000          add r14, 0x38                                          
 ..        void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( .. 
0x78722b850ac9    49c7470801000000        mov qword [r15+0x8], 0x1                               
void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;   .. 
0x78722b850ad1    49c7471002000000        mov qword [r15+0x10], 0x2                              
 ..  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ .. 
0x78722b850ad9    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdb .. 
0x78722b850ae1    49c7472004000000        mov qword [r15+0x20], 0x4                              
 .. tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      .. 
0x78722b850ae9    49c7472805000000        mov qword [r15+0x28], 0x5                              
 ..       int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntd .. 
0x78722b850af1    49c7473006000000        mov qword [r15+0x30], 0x6                              
 .. = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( t .. 
0x78722b850af9    48b8a9ed5e2b72780000    mov rax, 0x78722b5eeda9                                
0x78722b850b03    4983c608                add r14, 0x8                                           
0x78722b850b07    498906                  mov [r14], rax                                         
0x78722b850b0a    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850b14    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. g6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ .. 
0x78722b850b17    498b4708                mov rax, [r15+0x8]                                     
0x78722b850b1b    4983c608                add r14, 0x8                                           
0x78722b850b1f    498906                  mov [r14], rax                                         
 ..  tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps  .. 
0x78722b850b22    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850b2c    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( t .. 
0x78722b850b2f    48b8c6ed5e2b72780000    mov rax, 0x78722b5eedc6                                
0x78722b850b39    4983c608                add r14, 0x8                                           
0x78722b850b3d    498906                  mov [r14], rax                                         
0x78722b850b40    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850b4a    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. dbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( " .. 
0x78722b850b4d    498b4710                mov rax, [r15+0x10]                                    
0x78722b850b51    4983c608                add r14, 0x8                                           
0x78722b850b55    498906                  mov [r14], rax                                         
 ..  ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps .. 
0x78722b850b58    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850b62    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( t .. 
0x78722b850b65    48b8e5ed5e2b72780000    mov rax, 0x78722b5eede5                                
0x78722b850b6f    4983c608                add r14, 0x8                                           
0x78722b850b73    498906                  mov [r14], rax                                         
0x78722b850b76    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850b80    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. bg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( " .. 
0x78722b850b83    498b4718                mov rax, [r15+0x18]                                    
0x78722b850b87    4983c608                add r14, 0x8                                           
0x78722b850b8b    498906                  mov [r14], rax                                         
 .. ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps .. 
0x78722b850b8e    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850b98    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( .. 
0x78722b850b9b    48b804ee5e2b72780000    mov rax, 0x78722b5eee04                                
0x78722b850ba5    4983c608                add r14, 0x8                                           
0x78722b850ba9    498906                  mov [r14], rax                                         
0x78722b850bac    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850bb6    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\ .. 
0x78722b850bb9    498b4720                mov rax, [r15+0x20]                                    
0x78722b850bbd    4983c608                add r14, 0x8                                           
0x78722b850bc1    498906                  mov [r14], rax                                         
 .. p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps .. 
0x78722b850bc4    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850bce    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( " .. 
0x78722b850bd1    48b823ee5e2b72780000    mov rax, 0x78722b5eee23                                
0x78722b850bdb    4983c608                add r14, 0x8                                           
0x78722b850bdf    498906                  mov [r14], rax                                         
0x78722b850be2    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850bec    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. bg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii ( .. 
0x78722b850bef    498b4728                mov rax, [r15+0x28]                                    
0x78722b850bf3    4983c608                add r14, 0x8                                           
0x78722b850bf7    498906                  mov [r14], rax                                         
 .. ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xh .. 
0x78722b850bfa    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850c04    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi .. 
0x78722b850c07    48b842ee5e2b72780000    mov rax, 0x78722b5eee42                                
0x78722b850c11    4983c608                add r14, 0x8                                           
0x78722b850c15    498906                  mov [r14], rax                                         
0x78722b850c18    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850c22    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. bg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; x .. 
0x78722b850c25    498b4730                mov rax, [r15+0x30]                                    
0x78722b850c29    4983c608                add r14, 0x8                                           
0x78722b850c2d    498906                  mov [r14], rax                                         
 .. ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   .. 
0x78722b850c30    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850c3a    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..  "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4) .. 
0x78722b850c3d    48b863ee5e2b72780000    mov rax, 0x78722b5eee63                                
0x78722b850c47    4983c608                add r14, 0x8                                           
0x78722b850c4b    498906                  mov [r14], rax                                         
0x78722b850c4e    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850c58    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi0 .. 
0x78722b850c5b    48b885ee5e2b72780000    mov rax, 0x78722b5eee85                                
0x78722b850c65    4983c608                add r14, 0x8                                           
0x78722b850c69    498906                  mov [r14], rax                                         
 ..  p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); .. 
0x78722b850c6c    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850c76    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2  .. 
0x78722b850c79    b804000000              mov eax, 0x4                                           
0x78722b850c7e    4983c608                add r14, 0x8                                           
0x78722b850c82    498906                  mov [r14], rax                                         
0x78722b850c85    4d897e08                mov [r14+0x8], r15                                     
0x78722b850c89    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850c8d    4981c608000000          add r14, 0x8                                           
0x78722b850c94    b803000000              mov eax, 0x3                                           
0x78722b850c99    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b850c9d    4803c1                  add rax, rcx                                           
0x78722b850ca0    4983c608                add r14, 0x8                                           
0x78722b850ca4    498906                  mov [r14], rax                                         
0x78722b850ca7    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850cb1    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b850cb4    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850cb8    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850cbc    4983ee08                sub r14, 0x8                                           
 ..  ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      x .. 
0x78722b850cc0    b804000000              mov eax, 0x4                                           
0x78722b850cc5    4983c608                add r14, 0x8                                           
0x78722b850cc9    498906                  mov [r14], rax                                         
0x78722b850ccc    4d897e08                mov [r14+0x8], r15                                     
0x78722b850cd0    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850cd4    4981c608000000          add r14, 0x8                                           
0x78722b850cdb    48b878eb5e2b72780000    mov rax, 0x78722b5eeb78                                
0x78722b850ce5    4983c608                add r14, 0x8                                           
0x78722b850ce9    498906                  mov [r14], rax                                         
0x78722b850cec    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850cf6    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b850cf9    b803000000              mov eax, 0x3                                           
0x78722b850cfe    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b850d02    4803c1                  add rax, rcx                                           
0x78722b850d05    4983c608                add r14, 0x8                                           
0x78722b850d09    498906                  mov [r14], rax                                         
0x78722b850d0c    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850d16    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b850d19    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850d1d    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850d21    4983ee08                sub r14, 0x8                                           
 ..  =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; x .. 
0x78722b850d25    b803000000              mov eax, 0x3                                           
 .. xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 .. 
0x78722b850d2a    b904000000              mov ecx, 0x4                                           
 .. ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p  .. 
0x78722b850d2f    4803c1                  add rax, rcx                                           
0x78722b850d32    4983c608                add r14, 0x8                                           
0x78722b850d36    498906                  mov [r14], rax                                         
 .. hii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl     .. 
0x78722b850d39    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850d43    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..  (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; x .. 
0x78722b850d46    b803000000              mov eax, 0x3                                           
 .. xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8))  .. 
0x78722b850d4b    b904000000              mov ecx, 0x4                                           
 .. ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8) .. 
0x78722b850d50    4803c1                  add rax, rcx                                           
0x78722b850d53    4983c608                add r14, 0x8                                           
0x78722b850d57    498906                  mov [r14], rax                                         
 .. xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)    .. 
0x78722b850d5a    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850d64    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xh .. 
0x78722b850d67    b804000000              mov eax, 0x4                                           
0x78722b850d6c    4983c608                add r14, 0x8                                           
0x78722b850d70    498906                  mov [r14], rax                                         
0x78722b850d73    4d897e08                mov [r14+0x8], r15                                     
0x78722b850d77    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850d7b    4981c608000000          add r14, 0x8                                           
0x78722b850d82    48b878eb5e2b72780000    mov rax, 0x78722b5eeb78                                
0x78722b850d8c    4983c608                add r14, 0x8                                           
0x78722b850d90    498906                  mov [r14], rax                                         
0x78722b850d93    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850d9d    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b850da0    b803000000              mov eax, 0x3                                           
0x78722b850da5    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b850da9    4803c1                  add rax, rcx                                           
0x78722b850dac    4983c608                add r14, 0x8                                           
0x78722b850db0    498906                  mov [r14], rax                                         
0x78722b850db3    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850dbd    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b850dc0    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850dc4    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850dc8    4983ee08                sub r14, 0x8                                           
 .. 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850dcc    b803000000              mov eax, 0x3                                           
 .. xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850dd1    b904000000              mov ecx, 0x4                                           
 .. ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850dd6    4803c1                  add rax, rcx                                           
0x78722b850dd9    4983c608                add r14, 0x8                                           
0x78722b850ddd    498906                  mov [r14], rax                                         
 ..  + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850de0    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850dea    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850ded    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b850df7    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b850e01    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850e04    b803000000              mov eax, 0x3                                           
 ..  4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850e09    b904000000              mov ecx, 0x4                                           
 ..  + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850e0e    4803c1                  add rax, rcx                                           
0x78722b850e11    4983c608                add r14, 0x8                                           
0x78722b850e15    498906                  mov [r14], rax                                         
 ..  p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850e18    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850e22    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850e25    b808000000              mov eax, 0x8                                           
0x78722b850e2a    4983c608                add r14, 0x8                                           
0x78722b850e2e    498906                  mov [r14], rax                                         
0x78722b850e31    4d897e08                mov [r14+0x8], r15                                     
0x78722b850e35    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850e39    4981c608000000          add r14, 0x8                                           
0x78722b850e40    48b885e95e2b72780000    mov rax, 0x78722b5ee985       < string : 'xhi1' >
0x78722b850e4a    4983c608                add r14, 0x8                                           
0x78722b850e4e    498906                  mov [r14], rax                                         
0x78722b850e51    4d897e08                mov [r14+0x8], r15                                     
0x78722b850e55    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850e59    4981c608000000          add r14, 0x8                                           
0x78722b850e60    498b47f8                mov rax, [r15-0x8]                                     
0x78722b850e64    4983c608                add r14, 0x8                                           
0x78722b850e68    498906                  mov [r14], rax                                         
0x78722b850e6b    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b850e75    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b850e7f    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b850e82    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850e8c    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b850e8f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850e93    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850e97    4983ee08                sub r14, 0x8                                           
0x78722b850e9b    b803000000              mov eax, 0x3                                           
0x78722b850ea0    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b850ea4    4803c1                  add rax, rcx                                           
0x78722b850ea7    4983c608                add r14, 0x8                                           
0x78722b850eab    498906                  mov [r14], rax                                         
0x78722b850eae    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850eb8    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b850ebb    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850ebf    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850ec3    4983ee08                sub r14, 0x8                                           
 ..  p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850ec7    48b8c1ee5e2b72780000    mov rax, 0x78722b5eeec1       < string : 'xhi2a =' >
0x78722b850ed1    4983c608                add r14, 0x8                                           
0x78722b850ed5    498906                  mov [r14], rax                                         
 ..  4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850ed8    b808000000              mov eax, 0x8                                           
0x78722b850edd    4983c608                add r14, 0x8                                           
0x78722b850ee1    498906                  mov [r14], rax                                         
0x78722b850ee4    4d897e08                mov [r14+0x8], r15                                     
0x78722b850ee8    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850eec    4981c608000000          add r14, 0x8                                           
0x78722b850ef3    498b47f0                mov rax, [r15-0x10]                                    
0x78722b850ef7    4983c608                add r14, 0x8                                           
0x78722b850efb    498906                  mov [r14], rax                                         
0x78722b850efe    4d897e08                mov [r14+0x8], r15                                     
0x78722b850f02    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850f06    4981c608000000          add r14, 0x8                                           
0x78722b850f0d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b850f11    4983c608                add r14, 0x8                                           
0x78722b850f15    498906                  mov [r14], rax                                         
0x78722b850f18    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b850f22    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b850f2c    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b850f2f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b850f39    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b850f3c    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850f40    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850f44    4983ee08                sub r14, 0x8                                           
0x78722b850f48    b803000000              mov eax, 0x3                                           
0x78722b850f4d    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b850f51    4803c1                  add rax, rcx                                           
0x78722b850f54    4983c608                add r14, 0x8                                           
0x78722b850f58    498906                  mov [r14], rax                                         
0x78722b850f5b    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850f65    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b850f68    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850f6c    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b850f70    4983ee10                sub r14, 0x10                                          
0x78722b850f74    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b850f78    4d8b7e08                mov r15, [r14+0x8]                                     
 .. xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x78722b850f7c    c3                      ret                                                    
Word_Disassemble : word - 'testc1' :: codeSize = 1219
Word : 0x00007872260ff358 :: Compiled at : 0x000078722b850aba
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 49.19 <::
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
 =============================
C_Syntax.interpret <:> csl compiled word
SourceCode for C_Syntax.interpret :> 
void interpret ( | atoken aword ) { testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1p (1 + 2 + 4) ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ; nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ; while ( 1 ) { atoken = token () ; if ( ! atoken ) break ; oPrintf ( "\n\tinterpret : token = %s", atoken ) ; if ( StringEqual ( atoken, "ihalt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ; break ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } label: done ; } 
Source code file location of interpret : "namespaces/compiler/interpreter.csl" : 55.10 :: we are now at : namespaces/compiler/interpreter.csl : 90.14
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b850f82 -- code size = 878 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret : definition = 0x000078722b850f82 : disassembly at namespaces/compiler/interpreter.csl : 90.14 :
0x78722b850f82    4d897e08                mov [r14+0x8], r15                                     
0x78722b850f86    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b850f8a    4981c618000000          add r14, 0x18                                          
 void interpret ( | atoken aword )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; .. 
0x78722b850f91    49baba0a852b72780000    mov r10, 0x78722b850aba                                
0x78722b850f9b    49ffd2                  call r10                      < C_Syntax.testc1 : 0x000078722b850aba >
 ..  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      .. 
0x78722b850f9e    b803000000              mov eax, 0x3                                           
 .. estc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; .. 
0x78722b850fa3    b904000000              mov ecx, 0x4                                           
 ..  testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) .. 
0x78722b850fa8    4803c1                  add rax, rcx                                           
0x78722b850fab    4983c608                add r14, 0x8                                           
0x78722b850faf    498906                  mov [r14], rax                                         
 ..  )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;   .. 
0x78722b850fb2    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850fbc    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps .. 
0x78722b850fbf    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b850fc9    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b850fd3    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret : .. 
0x78722b850fd6    b803000000              mov eax, 0x3                                           
 .. + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ;  .. 
0x78722b850fdb    b904000000              mov ecx, 0x4                                           
 .. 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " )  .. 
0x78722b850fe0    4803c1                  add rax, rcx                                           
0x78722b850fe3    4983c608                add r14, 0x8                                           
0x78722b850fe7    498906                  mov [r14], rax                                         
 .. 1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpre .. 
0x78722b850fea    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b850ff4    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while .. 
0x78722b850ff7    b808000000              mov eax, 0x8                                           
0x78722b850ffc    4983c608                add r14, 0x8                                           
0x78722b851000    498906                  mov [r14], rax                                         
0x78722b851003    4d897e08                mov [r14+0x8], r15                                     
0x78722b851007    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85100b    4981c608000000          add r14, 0x8                                           
0x78722b851012    48b885e95e2b72780000    mov rax, 0x78722b5ee985       < string : 'xhi1' >
0x78722b85101c    4983c608                add r14, 0x8                                           
0x78722b851020    498906                  mov [r14], rax                                         
0x78722b851023    4d897e08                mov [r14+0x8], r15                                     
0x78722b851027    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85102b    4981c608000000          add r14, 0x8                                           
0x78722b851032    498b47f8                mov rax, [r15-0x8]                                     
0x78722b851036    4983c608                add r14, 0x8                                           
0x78722b85103a    498906                  mov [r14], rax                                         
0x78722b85103d    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b851047    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851051    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b851054    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85105e    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b851061    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b851065    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b851069    4983ee08                sub r14, 0x8                                           
0x78722b85106d    b803000000              mov eax, 0x3                                           
0x78722b851072    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b851076    4803c1                  add rax, rcx                                           
0x78722b851079    4983c608                add r14, 0x8                                           
0x78722b85107d    498906                  mov [r14], rax                                         
0x78722b851080    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85108a    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b85108d    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b851091    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b851095    4983ee08                sub r14, 0x8                                           
 ..  2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {    .. 
0x78722b851099    48b862f15e2b72780000    mov rax, 0x78722b5ef162       < string : 'xhi2a =' >
0x78722b8510a3    4983c608                add r14, 0x8                                           
0x78722b8510a7    498906                  mov [r14], rax                                         
 ..  ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            at .. 
0x78722b8510aa    b808000000              mov eax, 0x8                                           
0x78722b8510af    4983c608                add r14, 0x8                                           
0x78722b8510b3    498906                  mov [r14], rax                                         
0x78722b8510b6    4d897e08                mov [r14+0x8], r15                                     
0x78722b8510ba    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8510be    4981c608000000          add r14, 0x8                                           
0x78722b8510c5    498b47f0                mov rax, [r15-0x10]                                    
0x78722b8510c9    4983c608                add r14, 0x8                                           
0x78722b8510cd    498906                  mov [r14], rax                                         
0x78722b8510d0    4d897e08                mov [r14+0x8], r15                                     
0x78722b8510d4    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8510d8    4981c608000000          add r14, 0x8                                           
0x78722b8510df    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8510e3    4983c608                add r14, 0x8                                           
0x78722b8510e7    498906                  mov [r14], rax                                         
0x78722b8510ea    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b8510f4    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8510fe    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b851101    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85110b    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b85110e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b851112    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b851116    4983ee08                sub r14, 0x8                                           
0x78722b85111a    b803000000              mov eax, 0x3                                           
0x78722b85111f    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b851123    4803c1                  add rax, rcx                                           
0x78722b851126    4983c608                add r14, 0x8                                           
0x78722b85112a    498906                  mov [r14], rax                                         
0x78722b85112d    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b851137    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
0x78722b85113a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85113e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b851142    4983ee10                sub r14, 0x10                                          
0x78722b851146    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b851150    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85115a    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. hi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;    .. 
0x78722b85115d    49bb6004f289c8600000    mov r11, 0x60c889f20460                                
0x78722b851167    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851171    49ffd2                  call r10                      < Io.tab : 0x000060c889f20460 >
 .. ", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! a .. 
0x78722b851174    48b886f15e2b72780000    mov rax, 0x78722b5ef186       < string : 'interpret :> ' >
0x78722b85117e    4983c608                add r14, 0x8                                           
0x78722b851182    498906                  mov [r14], rax                                         
 .. i2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if  .. 
0x78722b851185    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85118f    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;      .. 
0x78722b851192    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85119c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8511a6    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. terpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\ti .. 
0x78722b8511a9    b801000000              mov eax, 0x1                                           
0x78722b8511ae    4883f800                cmp rax, 0x0                                           
0x78722b8511b2    0f842f010000            jz 0x78722b8512e7             < C_Syntax.interpret+869 >
 .. while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken .. 
0x78722b8511b8    49bbb00af289c8600000    mov r11, 0x60c889f20ab0                                
0x78722b8511c2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8511cc    49ffd2                  call r10                      < Compiler.token : 0x000060c889f20ab0 >
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atok .. 
0x78722b8511cf    498d4708                lea rax, [r15+0x8]                                     
0x78722b8511d3    488bc8                  mov rcx, rax                                           
0x78722b8511d6    498b06                  mov rax, [r14]                                         
0x78722b8511d9    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atok .. 
0x78722b8511dd    488901                  mov [rcx], rax                                         
 ..   atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( S .. 
0x78722b8511e0    498b4708                mov rax, [r15+0x8]                                     
 ..     atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( .. 
0x78722b8511e4    4883f800                cmp rax, 0x0                                           
0x78722b8511e8    7509                    jnz 0x2b8511f3                < C_Syntax.interpret+625 >
0x78722b8511ea    0f1f4000                nop [rax]                                              
 .. = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqua .. 
0x78722b8511ee    e9f4000000              jmp 0x78722b8512e7            < C_Syntax.interpret+869 >
 .. ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )     .. 
0x78722b8511f3    48b8d9919e2a72780000    mov rax, 0x78722a9e91d9                                
0x78722b8511fd    488bf8                  mov rdi, rax                                           
 .. rintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oP .. 
0x78722b851200    498b4708                mov rax, [r15+0x8]                                     
0x78722b851204    488bf0                  mov rsi, rax                                           
0x78722b851207    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851211    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85121b    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 ..  ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting .. 
0x78722b85121e    498b4708                mov rax, [r15+0x8]                                     
 .. n () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( at .. 
0x78722b851222    4983c608                add r14, 0x8                                           
0x78722b851226    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", a .. 
0x78722b851229    48b82bf25e2b72780000    mov rax, 0x78722b5ef22b       < string : 'ihalt' >
0x78722b851233    4983c608                add r14, 0x8                                           
0x78722b851237    498906                  mov [r14], rax                                         
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: int .. 
0x78722b85123a    49ba7a24842b72780000    mov r10, 0x78722b84247a                                
0x78722b851244    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x000078722b84247a >
 ..  if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;  .. 
0x78722b851247    498b06                  mov rax, [r14]                                         
0x78722b85124a    4983ee08                sub r14, 0x8                                           
0x78722b85124e    4883f800                cmp rax, 0x0                                           
0x78722b851252    7439                    jz 0x2b85128d                 < C_Syntax.interpret+779 >
0x78722b851254    0f1f4000                nop [rax]                                              
 ..              {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;              break ;                        .. 
0x78722b851258    48b8e0929e2a72780000    mov rax, 0x78722a9e92e0                                
0x78722b851262    488bf8                  mov rdi, rax                                           
 .. token = %s :: interpret exiting ...", atoken ) ;              break ;                              }                 else         {       .. 
0x78722b851265    498b4708                mov rax, [r15+0x8]                                     
0x78722b851269    488bf0                  mov rsi, rax                                           
0x78722b85126c    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851276    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851280    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
0x78722b851283    e95f000000              jmp 0x78722b8512e7            < C_Syntax.interpret+869 >
0x78722b851288    e955000000              jmp 0x78722b8512e2            < C_Syntax.interpret+864 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x78722b85128d    498b4708                mov rax, [r15+0x8]                                     
0x78722b851291    4983c608                add r14, 0x8                                           
0x78722b851295    498906                  mov [r14], rax                                         
 ..    else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x78722b851298    49bb5013f289c8600000    mov r11, 0x60c889f21350                                
0x78722b8512a2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8512ac    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x000060c889f21350 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x78722b8512af    498d4710                lea rax, [r15+0x10]                                    
0x78722b8512b3    488bc8                  mov rcx, rax                                           
0x78722b8512b6    498b06                  mov rax, [r14]                                         
0x78722b8512b9    4983ee08                sub r14, 0x8                                           
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x78722b8512bd    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x78722b8512c0    498b4710                mov rax, [r15+0x10]                                    
0x78722b8512c4    4983c608                add r14, 0x8                                           
0x78722b8512c8    498906                  mov [r14], rax                                         
0x78722b8512cb    49bb4010f289c8600000    mov r11, 0x60c889f21040                                
0x78722b8512d5    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8512df    49ffd2                  call r10                      < Interpreter.doWord : 0x000060c889f21040 >
 ..            doWord ( aword ) ;         }     }     label: done ; }  .. 
0x78722b8512e2    e9c2feffff              jmp 0x78722b8511a9            < C_Syntax.interpret+551 >
0x78722b8512e7    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8512eb    4d8b7e08                mov r15, [r14+0x8]                                     
 .. ) ;         }     }     label: done ; }  .. 
0x78722b8512ef    c3                      ret                                                    
Word_Disassemble : word - 'interpret' :: codeSize = 878
Word : 0x000078722610c358 :: Compiled at : 0x000078722b850f82
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 90.14 <::
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :> 

        interpret : token = c_syntaxOff
        interpret : token = using
Using Namespaces :> libc void C Root Dlsym int Defines Interpreter System Shell String Compiler User Combinators Class Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

        interpret : token = //
        interpret : token = User
        interpret : token = :
        interpret : token = 1
        interpret : token = 2
        interpret : token = +
        interpret : token = p
        interpret : token = ;
        interpret : token = hi1 3
        interpret : token = :
        interpret : token = hi1
        interpret : token = hi1
        interpret : token = ;
        interpret : token = :
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = ;
        interpret : token = nl

        interpret : token = heey1 3 3 3 3 3 3
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... hi
including namespaces/test/stack.csl at namespaces/test/initTest.csl : 86.41 ...

DataStack at : namespaces/test/stack.csl : 2.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.45 :
DataStack depth =   9 : Dsp (R14) = Top = 0x000078722c065af8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065af8 > = 0x0000000000000000
  DataStack   [  -1 ] < 0x000078722c065af0 > = 0x0000000000000001
  DataStack   [  -2 ] < 0x000078722c065ae8 > = 0x0000000000000002
  DataStack   [  -3 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -4 ] < 0x000078722c065ad8 > = 0x0000000000000004
  DataStack   [  -5 ] < 0x000078722c065ad0 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.53 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000078722c065b00, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b00 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000078722c065af8 > = 0x0000000000000000
  DataStack   [  -2 ] < 0x000078722c065af0 > = 0x0000000000000001
  DataStack   [  -3 ] < 0x000078722c065ae8 > = 0x0000000000000002
  DataStack   [  -4 ] < 0x000078722c065ae0 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x000078722c065ad8 > = 0x0000000000000004
  DataStack   [  -6 ] < 0x000078722c065ad0 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000078722c065ab8 > = 0x0000000000000005
3
DataStack at : namespaces/test/stack.csl : 2.81 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 1
DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   4 : Dsp (R14) = Top = 0x000078722c065ad0, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad0 > = 0x0000000000000001
  DataStack   [  -1 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ab8 > = 0x0000000000000005
 
testpick : above line should read 1

including namespaces/compiler/c_syntax.csl at namespaces/test/initTest.csl : 86.41 ...
 namespaces/compiler/c_syntax.csl 7.9
hello 7

 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :> 
define xtc( a ) a @ ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 25.8 :: we are now at : namespaces/compiler/c_syntax.csl : 26.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8514c3 -- code size = 52 bytes
TypeSignature : 
 -----------------------------
Word :: Defines.xtc : definition = 0x000078722b8514c3 : disassembly at namespaces/compiler/c_syntax.csl : 26.8 :
0x78722b8514c3    4d897e08                mov [r14+0x8], r15                                     
0x78722b8514c7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8514cb    4981c608000000          add r14, 0x8                                           
 ..                       define xtc( a ) a @ ps .. 
0x78722b8514d2    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8514d6    4983c608                add r14, 0x8                                           
0x78722b8514da    498906                  mov [r14], rax                                         
0x78722b8514dd    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8514e7    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b8514ea    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8514ee    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8514f2    4983ee08                sub r14, 0x8                                           
 ..                   define xtc( a ) a @ ps .. 
0x78722b8514f6    c3                      ret                                                    
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x00007872261193c8 :: Compiled at : 0x000078722b8514c3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 26.8 <::
 
 xtc : hi
 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :> 
define xtc( a ) a ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 31.8 :: we are now at : namespaces/compiler/c_syntax.csl : 32.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8514fc -- code size = 52 bytes
TypeSignature : 
 -----------------------------
Word :: Defines.xtc : definition = 0x000078722b8514fc : disassembly at namespaces/compiler/c_syntax.csl : 32.8 :
0x78722b8514fc    4d897e08                mov [r14+0x8], r15                                     
0x78722b851500    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b851504    4981c608000000          add r14, 0x8                                           
 ..                       define xtc( a ) a ps .. 
0x78722b85150b    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85150f    4983c608                add r14, 0x8                                           
0x78722b851513    498906                  mov [r14], rax                                         
0x78722b851516    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b851520    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b851523    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b851527    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85152b    4983ee08                sub r14, 0x8                                           
 ..                     define xtc( a ) a ps .. 
0x78722b85152f    c3                      ret                                                    
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x00007872261193c8 :: Compiled at : 0x000078722b8514fc
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 32.8 <::
 
 xtc : hi CObj size = 104
DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

Dump at : namespaces/compiler/c_syntax.csl : 52.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c88 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c98 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cc8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

        chey.hi = 1234 255
Dump at : namespaces/compiler/c_syntax.csl : 58.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c88 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c98 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

        chey.heey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 61.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c88 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c98 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/compiler/c_syntax.csl : 69.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200c88 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

        chey.hey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 76.25 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 16 00 00 00 00 00  ........ ........ 
0x0000787226200c88 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

CObj.size = 104

chey = 787226200c68

chey.hey = 123456789abcdef

&chey.hey = 787226200c90 0x0123456789abcdef 0x0000787226200c90
        hoot
Dump at : namespaces/compiler/c_syntax.csl : 93.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well.... 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x0000787226200c88 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 96.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well.... 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x0000787226200c88 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 98.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  68 6f 6f 74 00 00 00 00  ........ hoot.... 
0x0000787226200c78 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x0000787226200c88 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 100.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  6f 6b 21 20 64 6f 6e 27  ........ ok! don' 
0x0000787226200c78 :  74 20 68 6f 6f 74 00 00  00 00 0a 09 68 6f 6f 74  t hoot.. ....hoot 
0x0000787226200c88 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 102.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x0000787226200c78 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x0000787226200c88 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

        don't

        hoot

Dump at : namespaces/compiler/c_syntax.csl : 106.24 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x0000787226200c78 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x0000787226200c88 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

 =============================
C_Syntax.chi <:> csl compiled word, prefix
SourceCode for C_Syntax.chi :> 
void chi ( CObj * chey0 | a b c d ) { c = 1 + 2 ; b = c + 2 ; a = b + c ; nl p ( c ) ; c 3 "c should be 3" assert p ( b ) ; b 5 "b should be 5" assert p ( a ) ; a 8 "a should be 8" assert dump ( chey0, CObj.size ) ; d = chey0->hey ; hex p ( d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ; oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; d = chey0.hey ; oPrintf ( "\n%lx\n", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; _assert ( d #x0123456789abcdef ) ; oPrintf ( "\n%x\n", CObj.chey0.hey ) ; sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ; dump ( chey0, CObj.size ) ; } 
Source code file location of chi : "namespaces/compiler/c_syntax.csl" : 114.4 :: we are now at : namespaces/compiler/c_syntax.csl : 141.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b851a91 -- code size = 1163 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.chi : definition = 0x000078722b851a91 : disassembly at namespaces/compiler/c_syntax.csl : 141.8 :
0x78722b851a91    4d897e08                mov [r14+0x8], r15                                     
0x78722b851a95    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b851a99    4981c628000000          add r14, 0x28                                          
 ..  ( CObj * chey0 | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b )  .. 
0x78722b851aa0    b803000000              mov eax, 0x3                                           
0x78722b851aa5    49894718                mov [r15+0x18], rax                                    
 .. | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should  .. 
0x78722b851aa9    498b4718                mov rax, [r15+0x18]                                    
 .. b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5 .. 
0x78722b851aad    b902000000              mov ecx, 0x2                                           
 .. a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be .. 
0x78722b851ab2    4803c1                  add rax, rcx                                           
0x78722b851ab5    49894710                mov [r15+0x10], rax                                    
 ..   c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert     .. 
0x78722b851ab9    498b4710                mov rax, [r15+0x10]                                    
 .. = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p (  .. 
0x78722b851abd    498b4f18                mov rcx, [r15+0x18]                                    
 .. c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p  .. 
0x78722b851ac1    4803c1                  add rax, rcx                                           
0x78722b851ac4    49894708                mov [r15+0x8], rax                                     
0x78722b851ac8    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b851ad2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851adc    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should .. 
0x78722b851adf    498b4718                mov rax, [r15+0x18]                                    
0x78722b851ae3    4983c608                add r14, 0x8                                           
0x78722b851ae7    498906                  mov [r14], rax                                         
0x78722b851aea    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b851af4    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..      a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" .. 
0x78722b851af7    498b4718                mov rax, [r15+0x18]                                    
0x78722b851afb    4983c608                add r14, 0x8                                           
0x78722b851aff    498906                  mov [r14], rax                                         
 ..    a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" a .. 
0x78722b851b02    b803000000              mov eax, 0x3                                           
0x78722b851b07    4983c608                add r14, 0x8                                           
0x78722b851b0b    498906                  mov [r14], rax                                         
 ..  a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" ass .. 
0x78722b851b0e    48b8b9ff5e2b72780000    mov rax, 0x78722b5effb9       < string : 'c should be 3' >
0x78722b851b18    4983c608                add r14, 0x8                                           
0x78722b851b1c    498906                  mov [r14], rax                                         
0x78722b851b1f    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b851b29    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size .. 
0x78722b851b2c    498b4710                mov rax, [r15+0x10]                                    
0x78722b851b30    4983c608                add r14, 0x8                                           
0x78722b851b34    498906                  mov [r14], rax                                         
0x78722b851b37    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b851b41    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;   .. 
0x78722b851b44    498b4710                mov rax, [r15+0x10]                                    
0x78722b851b48    4983c608                add r14, 0x8                                           
0x78722b851b4c    498906                  mov [r14], rax                                         
 .. "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;     .. 
0x78722b851b4f    b805000000              mov eax, 0x5                                           
0x78722b851b54    4983c608                add r14, 0x8                                           
0x78722b851b58    498906                  mov [r14], rax                                         
 ..  should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;       .. 
0x78722b851b5b    48b8e9ff5e2b72780000    mov rax, 0x78722b5effe9       < string : 'b should be 5' >
0x78722b851b65    4983c608                add r14, 0x8                                           
0x78722b851b69    498906                  mov [r14], rax                                         
0x78722b851b6c    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b851b76    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 .. ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d .. 
0x78722b851b79    498b4708                mov rax, [r15+0x8]                                     
0x78722b851b7d    4983c608                add r14, 0x8                                           
0x78722b851b81    498906                  mov [r14], rax                                         
0x78722b851b84    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b851b8e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;   .. 
0x78722b851b91    498b4708                mov rax, [r15+0x8]                                     
0x78722b851b95    4983c608                add r14, 0x8                                           
0x78722b851b99    498906                  mov [r14], rax                                         
 .. "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;     .. 
0x78722b851b9c    b808000000              mov eax, 0x8                                           
0x78722b851ba1    4983c608                add r14, 0x8                                           
0x78722b851ba5    498906                  mov [r14], rax                                         
 ..  should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oP .. 
0x78722b851ba8    48b819005f2b72780000    mov rax, 0x78722b5f0019       < string : 'a should be 8' >
0x78722b851bb2    4983c608                add r14, 0x8                                           
0x78722b851bb6    498906                  mov [r14], rax                                         
0x78722b851bb9    49baf21a842b72780000    mov r10, 0x78722b841af2                                
0x78722b851bc3    49ffd2                  call r10                      < C._assert1 : 0x000078722b841af2 >
 ..  a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) .. 
0x78722b851bc6    498b47f8                mov rax, [r15-0x8]                                     
0x78722b851bca    4881c000000000          add rax, 0x0                                           
0x78722b851bd1    4983c608                add r14, 0x8                                           
0x78722b851bd5    498906                  mov [r14], rax                                         
 .. ld be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprin .. 
0x78722b851bd8    48b830b2112672780000    mov rax, 0x78722611b230       < string : 'h' >
0x78722b851be2    488b00                  mov rax, [rax]                                         
0x78722b851be5    4983c608                add r14, 0x8                                           
0x78722b851be9    498906                  mov [r14], rax                                         
 .. ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\ .. 
0x78722b851bec    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b851bf6    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851c00    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..  dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, .. 
0x78722b851c03    498b47f8                mov rax, [r15-0x8]                                     
 ..  chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\ .. 
0x78722b851c07    4881c028000000          add rax, 0x28                                          
0x78722b851c0e    488b00                  mov rax, [rax]                                         
0x78722b851c11    49894720                mov [r15+0x20], rax                                    
 .. bj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx .. 
0x78722b851c15    49bbc027f289c8600000    mov r11, 0x60c889f227c0                                
0x78722b851c1f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851c29    49ffd2                  call r10                      < System.hex : 0x000060c889f227c0 >
 .. ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; .. 
0x78722b851c2c    498b4720                mov rax, [r15+0x20]                                    
0x78722b851c30    4983c608                add r14, 0x8                                           
0x78722b851c34    498906                  mov [r14], rax                                         
 .. ize ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d .. 
0x78722b851c37    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b851c41    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. >hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n c .. 
0x78722b851c44    48b84b469f2a72780000    mov rax, 0x78722a9f464b                                
0x78722b851c4e    488bf8                  mov rdi, rax                                           
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ; .. 
0x78722b851c51    498b4720                mov rax, [r15+0x20]                                    
0x78722b851c55    488bf0                  mov rsi, rax                                           
 .. d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrin .. 
0x78722b851c58    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851c62    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851c6c    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0 .. 
0x78722b851c6f    498b47f8                mov rax, [r15-0x8]                                     
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars .. 
0x78722b851c73    4881c008000000          add rax, 0x8                                           
0x78722b851c7a    488bf8                  mov rdi, rax                                           
 .. n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\ .. 
0x78722b851c7d    48b85c469f2a72780000    mov rax, 0x78722a9f465c                                
0x78722b851c87    488bf0                  mov rsi, rax                                           
 .. tf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx",  .. 
0x78722b851c8a    498b4720                mov rax, [r15+0x20]                                    
0x78722b851c8e    488bd0                  mov rdx, rax                                           
0x78722b851c91    b803000000              mov eax, 0x3                                           
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprin .. 
0x78722b851c96    49bb403eeb2b72780000    mov r11, 0x78722beb3e40                                
0x78722b851ca0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851caa    49ffd2                  call r10                      < libc.sprintf : 0x000078722beb3e40 >
 .. "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; .. 
0x78722b851cad    48b869469f2a72780000    mov rax, 0x78722a9f4669                                
0x78722b851cb7    488bf8                  mov rdi, rax                                           
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n che .. 
0x78722b851cba    498b4720                mov rax, [r15+0x20]                                    
0x78722b851cbe    488bf0                  mov rsi, rax                                           
 .. y0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.che .. 
0x78722b851cc1    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851ccb    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851cd5    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CO .. 
0x78722b851cd8    498b47f8                mov rax, [r15-0x8]                                     
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.che .. 
0x78722b851cdc    4881c038000000          add rax, 0x38                                          
0x78722b851ce3    488bf8                  mov rdi, rax                                           
 .. ", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars .. 
0x78722b851ce6    48b87a469f2a72780000    mov rax, 0x78722a9f467a                                
0x78722b851cf0    488bf0                  mov rsi, rax                                           
 .. .chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0. .. 
0x78722b851cf3    498b47f8                mov rax, [r15-0x8]                                     
 .. 2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 .. 
0x78722b851cf7    4881c028000000          add rax, 0x28                                          
0x78722b851cfe    4983c608                add r14, 0x8                                           
0x78722b851d02    498906                  mov [r14], rax                                         
0x78722b851d05    488bd0                  mov rdx, rax                                           
0x78722b851d08    b803000000              mov eax, 0x3                                           
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = .. 
0x78722b851d0d    49bb403eeb2b72780000    mov r11, 0x78722beb3e40                                
0x78722b851d17    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851d21    49ffd2                  call r10                      < libc.sprintf : 0x000078722beb3e40 >
 .. x", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0. .. 
0x78722b851d24    48b88b469f2a72780000    mov rax, 0x78722a9f468b                                
0x78722b851d2e    488bf8                  mov rdi, rax                                           
 .. intf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n ch .. 
0x78722b851d31    498b47f8                mov rax, [r15-0x8]                                     
 ..  "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d  .. 
0x78722b851d35    4881c008000000          add rax, 0x8                                           
0x78722b851d3c    4983c608                add r14, 0x8                                           
0x78722b851d40    498906                  mov [r14], rax                                         
0x78722b851d43    488bf0                  mov rsi, rax                                           
 .. y hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &C .. 
0x78722b851d46    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851d50    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851d5a    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. , &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d =  .. 
0x78722b851d5d    48b89f469f2a72780000    mov rax, 0x78722a9f469f                                
0x78722b851d67    488bf8                  mov rdi, rax                                           
 .. ntf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx .. 
0x78722b851d6a    498b47f8                mov rax, [r15-0x8]                                     
 .. "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d .. 
0x78722b851d6e    4881c038000000          add rax, 0x38                                          
0x78722b851d75    4983c608                add r14, 0x8                                           
0x78722b851d79    498906                  mov [r14], rax                                         
0x78722b851d7c    488bf0                  mov rsi, rax                                           
 .. rs = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d )  .. 
0x78722b851d7f    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851d89    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851d93    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 ..  &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n ch .. 
0x78722b851d96    48b8b4469f2a72780000    mov rax, 0x78722a9f46b4                                
0x78722b851da0    488bf8                  mov rdi, rax                                           
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;  .. 
0x78722b851da3    498b4720                mov rax, [r15+0x20]                                    
0x78722b851da7    488bf0                  mov rsi, rax                                           
 .. 2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrint .. 
0x78722b851daa    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851db4    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851dbe    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert (  .. 
0x78722b851dc1    498b47f8                mov rax, [r15-0x8]                                     
 .. chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x01 .. 
0x78722b851dc5    4881c028000000          add rax, 0x28                                          
0x78722b851dcc    488b00                  mov rax, [rax]                                         
0x78722b851dcf    49894720                mov [r15+0x20], rax                                    
 .. ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;   .. 
0x78722b851dd3    48b895489f2a72780000    mov rax, 0x78722a9f4895                                
0x78722b851ddd    488bf8                  mov rdi, rax                                           
 ..  chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf .. 
0x78722b851de0    498b4720                mov rax, [r15+0x20]                                    
0x78722b851de4    488bf0                  mov rsi, rax                                           
 .. %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789ab .. 
0x78722b851de7    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851df1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851dfb    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. intf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.ch .. 
0x78722b851dfe    48b89b489f2a72780000    mov rax, 0x78722a9f489b                                
0x78722b851e08    488bf8                  mov rdi, rax                                           
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprint .. 
0x78722b851e0b    498b4720                mov rax, [r15+0x20]                                    
0x78722b851e0f    488bf0                  mov rsi, rax                                           
 ..  ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n .. 
0x78722b851e12    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851e1c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851e26    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 2 .. 
0x78722b851e29    498b4720                mov rax, [r15+0x20]                                    
0x78722b851e2d    4983c608                add r14, 0x8                                           
0x78722b851e31    498906                  mov [r14], rax                                         
 .. i : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24  .. 
0x78722b851e34    48b8efcdab8967452301    mov rax, 0x123456789abcdef                              
0x78722b851e3e    4983c608                add r14, 0x8                                           
0x78722b851e42    498906                  mov [r14], rax                                         
0x78722b851e45    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b851e4f    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
 .. #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0,  .. 
0x78722b851e52    48b8ac489f2a72780000    mov rax, 0x78722a9f48ac                                
0x78722b851e5c    488bf8                  mov rdi, rax                                           
 .. def ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;   .. 
0x78722b851e5f    498b47f8                mov rax, [r15-0x8]                                     
 .. ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851e63    4881c028000000          add rax, 0x28                                          
0x78722b851e6a    4983c608                add r14, 0x8                                           
0x78722b851e6e    498906                  mov [r14], rax                                         
0x78722b851e71    488b00                  mov rax, [rax]                                         
0x78722b851e74    488bf0                  mov rsi, rax                                           
 .. ssert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump .. 
0x78722b851e77    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851e81    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851e8b    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851e8e    498b47f8                mov rax, [r15-0x8]                                     
 .. bj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851e92    4881c020000000          add rax, 0x20                                          
0x78722b851e99    488bf8                  mov rdi, rax                                           
 ..  ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851e9c    48b8b1489f2a72780000    mov rax, 0x78722a9f48b1       < string : '%s' >
0x78722b851ea6    488bf0                  mov rsi, rax                                           
 ..  sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851ea9    48b8b4489f2a72780000    mov rax, 0x78722a9f48b4       < string : 'hoot' >
0x78722b851eb3    488bd0                  mov rdx, rax                                           
0x78722b851eb6    b803000000              mov eax, 0x3                                           
 .. tf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851ebb    49bb403eeb2b72780000    mov r11, 0x78722beb3e40                                
0x78722b851ec5    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851ecf    49ffd2                  call r10                      < libc.sprintf : 0x000078722beb3e40 >
 .. s [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851ed2    498b47f8                mov rax, [r15-0x8]                                     
0x78722b851ed6    4881c000000000          add rax, 0x0                                           
0x78722b851edd    4983c608                add r14, 0x8                                           
0x78722b851ee1    498906                  mov [r14], rax                                         
 .. s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851ee4    48b830b2112672780000    mov rax, 0x78722611b230       < string : 'h' >
0x78722b851eee    488b00                  mov rax, [rax]                                         
0x78722b851ef1    4983c608                add r14, 0x8                                           
0x78722b851ef5    498906                  mov [r14], rax                                         
 .. y0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851ef8    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b851f02    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851f0c    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
0x78722b851f0f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b851f13    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b851f17    4983ee08                sub r14, 0x8                                           
 ..  ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x78722b851f1b    c3                      ret                                                    
Word_Disassemble : word - 'chi' :: codeSize = 1163
Word : 0x000078722611f048 :: Compiled at : 0x000078722b851a91
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 141.8 <::

 3 c should be 3  : ok

 5 b should be 5  : ok

 8 a should be 8  : ok


Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x0000787226200c78 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x0000787226200c88 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x0000787226200ca8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cb8 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
 0x0123456789abcdef
 chi : d = 123456789abcdef

 chi : d = 123456789abcdef

 chey0.chars = 
                hey = 123456789abcdef

 chey0.chars2 = 
                hey hey = 787226200c90

 chi : d = 123456789abcdef

123456789abcdef

 chi : d = 123456789abcdef

89abcdef

Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x0000787226200c68 : Number = 104 :: (little endian dump)
0x0000787226200c68 :  d2 04 00 00 00 00 00 00  0a 09 09 68 65 79 20 3d  ........ ...hey = 
0x0000787226200c78 :  20 31 32 33 34 35 36 37  38 39 61 62 63 64 65 66   1234567 89abcdef 
0x0000787226200c88 :  68 6f 6f 74 00 00 00 00  ef cd ab 89 67 45 23 01  hoot.... ....gE#. 
0x0000787226200c98 :  ef cd ab 89 67 45 23 01  0a 09 09 68 65 79 20 68  ....gE#. ...hey h 
0x0000787226200ca8 :  65 79 20 3d 20 37 38 37  32 32 36 32 30 30 63 39  ey = 787 226200c9 
0x0000787226200cb8 :  30 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  0....... ....gE#. 
0x0000787226200cc8 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :> 

        interpret : token = ;
        interpret : token = //
        interpret : token = sp0
        interpret : token = #
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = while
        interpret : token = //
        interpret : token = //
        interpret : token = }
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = while
        interpret : token = //
        interpret : token = }
        interpret : token = #
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret2 <:> csl compiled word
SourceCode for C_Syntax.interpret2 :> 
void interpret2 ( | atoken aword ) { testc1 () ; nl tab () ; ps ( "interpret2 :> " ) ; nl while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i2halt" ) ) { oPrintf ( "\n\tinterpret2 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } } 
Source code file location of interpret2 : "namespaces/compiler/c_syntax.csl" : 149.11 :: we are now at : namespaces/compiler/c_syntax.csl : 205.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b851f21 -- code size = 428 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret2 : definition = 0x000078722b851f21 : disassembly at namespaces/compiler/c_syntax.csl : 205.15 :
0x78722b851f21    4d897e08                mov [r14+0x8], r15                                     
0x78722b851f25    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b851f29    4981c618000000          add r14, 0x18                                          
void interpret2 ( | atoken aword )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = t .. 
0x78722b851f30    49baba0a852b72780000    mov r10, 0x78722b850aba                                
0x78722b851f3a    49ffd2                  call r10                      < C_Syntax.testc1 : 0x000078722b850aba >
0x78722b851f3d    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b851f47    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851f51    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b851f54    49bb6004f289c8600000    mov r11, 0x60c889f20460                                
0x78722b851f5e    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851f68    49ffd2                  call r10                      < Io.tab : 0x000060c889f20460 >
 .. {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n .. 
0x78722b851f6b    48b89d075f2b72780000    mov rax, 0x78722b5f079d       < string : 'interpret2 :> ' >
0x78722b851f75    4983c608                add r14, 0x8                                           
0x78722b851f79    498906                  mov [r14], rax                                         
 .. d )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf  .. 
0x78722b851f7c    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b851f86    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token  .. 
0x78722b851f89    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b851f93    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851f9d    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) .. 
0x78722b851fa0    b801000000              mov eax, 0x1                                           
0x78722b851fa5    4883f800                cmp rax, 0x0                                           
0x78722b851fa9    0f8415010000            jz 0x78722b8520c4             < C_Syntax.interpret2+419 >
0x78722b851faf    49bbb00af289c8600000    mov r11, 0x60c889f20ab0                                
0x78722b851fb9    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851fc3    49ffd2                  call r10                      < Compiler.token : 0x000060c889f20ab0 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( Stri .. 
0x78722b851fc6    498d4708                lea rax, [r15+0x8]                                     
0x78722b851fca    488bc8                  mov rcx, rax                                           
0x78722b851fcd    498b06                  mov rax, [r14]                                         
0x78722b851fd0    4983ee08                sub r14, 0x8                                           
0x78722b851fd4    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )   .. 
0x78722b851fd7    48b8c3e59f2a72780000    mov rax, 0x78722a9fe5c3                                
0x78722b851fe1    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( .. 
0x78722b851fe4    498b4708                mov rax, [r15+0x8]                                     
0x78722b851fe8    488bf0                  mov rsi, rax                                           
0x78722b851feb    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b851ff5    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b851fff    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 ..  ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;               .. 
0x78722b852002    498b4708                mov rax, [r15+0x8]                                     
0x78722b852006    4983c608                add r14, 0x8                                           
0x78722b85200a    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                       .. 
0x78722b85200d    48b847085f2b72780000    mov rax, 0x78722b5f0847       < string : 'i2halt' >
0x78722b852017    4983c608                add r14, 0x8                                           
0x78722b85201b    498906                  mov [r14], rax                                         
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ; .. 
0x78722b85201e    49ba7a24842b72780000    mov r10, 0x78722b84247a                                
0x78722b852028    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x000078722b84247a >
 .. if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                  .. 
0x78722b85202b    498b06                  mov rax, [r14]                                         
0x78722b85202e    4983ee08                sub r14, 0x8                                           
0x78722b852032    4883f800                cmp rax, 0x0                                           
0x78722b852036    7432                    jz 0x2b85206a                 < C_Syntax.interpret2+329 >
0x78722b852038    0f1f4000                nop [rax]                                              
 ..  ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                    return ;         }         else  .. 
0x78722b85203c    48b8cce69f2a72780000    mov rax, 0x78722a9fe6cc                                
0x78722b852046    488bf8                  mov rdi, rax                                           
0x78722b852049    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b852053    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85205d    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
0x78722b852060    e95f000000              jmp 0x78722b8520c4            < C_Syntax.interpret2+419 >
0x78722b852065    e955000000              jmp 0x78722b8520bf            < C_Syntax.interpret2+414 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x78722b85206a    498b4708                mov rax, [r15+0x8]                                     
0x78722b85206e    4983c608                add r14, 0x8                                           
0x78722b852072    498906                  mov [r14], rax                                         
0x78722b852075    49bb5013f289c8600000    mov r11, 0x60c889f21350                                
0x78722b85207f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852089    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x000060c889f21350 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x78722b85208c    498d4710                lea rax, [r15+0x10]                                    
0x78722b852090    488bc8                  mov rcx, rax                                           
0x78722b852093    498b06                  mov rax, [r14]                                         
0x78722b852096    4983ee08                sub r14, 0x8                                           
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x78722b85209a    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x78722b85209d    498b4710                mov rax, [r15+0x10]                                    
0x78722b8520a1    4983c608                add r14, 0x8                                           
0x78722b8520a5    498906                  mov [r14], rax                                         
0x78722b8520a8    49bb4010f289c8600000    mov r11, 0x60c889f21040                                
0x78722b8520b2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8520bc    49ffd2                  call r10                      < Interpreter.doWord : 0x000060c889f21040 >
 ..            doWord ( aword ) ;         }     }   }  .. 
0x78722b8520bf    e9dcfeffff              jmp 0x78722b851fa0            < C_Syntax.interpret2+127 >
0x78722b8520c4    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8520c8    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  doWord ( aword ) ;         }     }   }  .. 
0x78722b8520cc    c3                      ret                                                    
Word_Disassemble : word - 'interpret2' :: codeSize = 428
Word : 0x000078722612dcf8 :: Compiled at : 0x000078722b851f21
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 205.15 <::

        interpret : token = pwi
 =============================
C_Syntax.interpret3 <:> csl compiled word
SourceCode for C_Syntax.interpret3 :> 
void interpret3 ( | atoken aword ) { testc1 () ; nl () ; tab () ; ps ( "interpret3 :> " ) ; nl () ; while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i3halt" ) ) { oPrintf ( "\n\tinterpret3 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } } 
Source code file location of interpret3 : "namespaces/compiler/c_syntax.csl" : 176.11 :: we are now at : namespaces/compiler/c_syntax.csl : 206.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8520d2 -- code size = 428 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret3 : definition = 0x000078722b8520d2 : disassembly at namespaces/compiler/c_syntax.csl : 206.15 :
0x78722b8520d2    4d897e08                mov [r14+0x8], r15                                     
0x78722b8520d6    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8520da    4981c618000000          add r14, 0x18                                          
void interpret3 ( | atoken aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {        .. 
0x78722b8520e1    49baba0a852b72780000    mov r10, 0x78722b850aba                                
0x78722b8520eb    49ffd2                  call r10                      < C_Syntax.testc1 : 0x000078722b850aba >
0x78722b8520ee    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b8520f8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852102    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token ()  .. 
0x78722b852105    49bb6004f289c8600000    mov r11, 0x60c889f20460                                
0x78722b85210f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852119    49ffd2                  call r10                      < Io.tab : 0x000060c889f20460 >
 .. c1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf  .. 
0x78722b85211c    48b8010b5f2b72780000    mov rax, 0x78722b5f0b01       < string : 'interpret3 :> ' >
0x78722b852126    4983c608                add r14, 0x8                                           
0x78722b85212a    498906                  mov [r14], rax                                         
0x78722b85212d    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b852137    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. b () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : t .. 
0x78722b85213a    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b852144    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85214e    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. terpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) .. 
0x78722b852151    b801000000              mov eax, 0x1                                           
0x78722b852156    4883f800                cmp rax, 0x0                                           
0x78722b85215a    0f8415010000            jz 0x78722b852275             < C_Syntax.interpret3+419 >
 .. while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                             .. 
0x78722b852160    49bbb00af289c8600000    mov r11, 0x60c889f20ab0                                
0x78722b85216a    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852174    49ffd2                  call r10                      < Compiler.token : 0x000060c889f20ab0 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                           .. 
0x78722b852177    498d4708                lea rax, [r15+0x8]                                     
0x78722b85217b    488bc8                  mov rcx, rax                                           
0x78722b85217e    498b06                  mov rax, [r14]                                         
0x78722b852181    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                           .. 
0x78722b852185    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken,  .. 
0x78722b852188    48b8a3fa9f2a72780000    mov rax, 0x78722a9ffaa3                                
0x78722b852192    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken, "i3halt" ) )         {          .. 
0x78722b852195    498b4708                mov rax, [r15+0x8]                                     
0x78722b852199    488bf0                  mov rsi, rax                                           
0x78722b85219c    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b8521a6    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8521b0    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 ..                    if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;               .. 
0x78722b8521b3    498b4708                mov rax, [r15+0x8]                                     
0x78722b8521b7    4983c608                add r14, 0x8                                           
0x78722b8521bb    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                       .. 
0x78722b8521be    48b8ab0b5f2b72780000    mov rax, 0x78722b5f0bab       < string : 'i3halt' >
0x78722b8521c8    4983c608                add r14, 0x8                                           
0x78722b8521cc    498906                  mov [r14], rax                                         
 ..  ;                               if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ; .. 
0x78722b8521cf    49ba7a24842b72780000    mov r10, 0x78722b84247a                                
0x78722b8521d9    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x000078722b84247a >
 .. if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                  .. 
0x78722b8521dc    498b06                  mov rax, [r14]                                         
0x78722b8521df    4983ee08                sub r14, 0x8                                           
0x78722b8521e3    4883f800                cmp rax, 0x0                                           
0x78722b8521e7    7432                    jz 0x2b85221b                 < C_Syntax.interpret3+329 >
0x78722b8521e9    0f1f4000                nop [rax]                                              
 ..  ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                    return ;         }         else  .. 
0x78722b8521ed    48b8acfb9f2a72780000    mov rax, 0x78722a9ffbac                                
0x78722b8521f7    488bf8                  mov rdi, rax                                           
0x78722b8521fa    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b852204    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85220e    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
0x78722b852211    e95f000000              jmp 0x78722b852275            < C_Syntax.interpret3+419 >
0x78722b852216    e955000000              jmp 0x78722b852270            < C_Syntax.interpret3+414 >
 ..                 aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x78722b85221b    498b4708                mov rax, [r15+0x8]                                     
0x78722b85221f    4983c608                add r14, 0x8                                           
0x78722b852223    498906                  mov [r14], rax                                         
 ..          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x78722b852226    49bb5013f289c8600000    mov r11, 0x60c889f21350                                
0x78722b852230    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85223a    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x000060c889f21350 >
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x78722b85223d    498d4710                lea rax, [r15+0x10]                                    
0x78722b852241    488bc8                  mov rcx, rax                                           
0x78722b852244    498b06                  mov rax, [r14]                                         
0x78722b852247    4983ee08                sub r14, 0x8                                           
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x78722b85224b    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x78722b85224e    498b4710                mov rax, [r15+0x10]                                    
0x78722b852252    4983c608                add r14, 0x8                                           
0x78722b852256    498906                  mov [r14], rax                                         
0x78722b852259    49bb4010f289c8600000    mov r11, 0x60c889f21040                                
0x78722b852263    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85226d    49ffd2                  call r10                      < Interpreter.doWord : 0x000060c889f21040 >
 ..            doWord ( aword ) ;         }            }    }  .. 
0x78722b852270    e9dcfeffff              jmp 0x78722b852151            < C_Syntax.interpret3+127 >
0x78722b852275    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b852279    4d8b7e08                mov r15, [r14+0x8]                                     
 .. ( aword ) ;         }            }    }  .. 
0x78722b85227d    c3                      ret                                                    
Word_Disassemble : word - 'interpret3' :: codeSize = 428
Word : 0x0000787226133528 :: Compiled at : 0x000078722b8520d2
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 206.15 <::

        interpret : token = C
        interpret : token = sp0
        interpret : token = #
        interpret : token = //
        interpret : token = interpret2 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret2 :> 

        interpret2 : token = using
Using Namespaces :> C Root libc void C_Syntax Infix PrefixCombinators chey0 CObj Dlsym chey Class Defines User String Combinators Interpreter System int Shell Compiler Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

        interpret2 : token = sp0
        interpret2 : token = #
        interpret2 : token = int
        interpret2 : token = int
        interpret2 : token = ;
        interpret2 : token = #
        interpret2 : token = while
        interpret2 : token = #
        interpret2 : token = return
        interpret2 : token = ;
        interpret2 : token = }
        interpret2 : token = pwi
 =============================
C_Syntax.fac40 <:> csl compiled word
SourceCode for C_Syntax.fac40 :> 
int fac40 ( n | facc ) { int facc = 1 ; while ( n > 1 ) facc = n -- * facc ; return facc ; } 
Source code file location of fac40 : "namespaces/compiler/c_syntax.csl" : 216.6 :: we are now at : namespaces/compiler/c_syntax.csl : 226.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b852283 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac40 : definition = 0x000078722b852283 : disassembly at namespaces/compiler/c_syntax.csl : 226.10 :
0x78722b852283    4d897e08                mov [r14+0x8], r15                                     
0x78722b852287    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85228b    4981c618000000          add r14, 0x18                                          
 int fac40 ( n  | facc )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }  .. 
0x78722b852292    49c7471001000000        mov qword [r15+0x10], 0x1                              
 ..  )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b85229a    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b85229f    7e1f                    jle 0x2b8522c0                < C_Syntax.fac40+61 >
0x78722b8522a1    0f1f4000                nop [rax]                                              
 .. facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522a5    498b47f8                mov rax, [r15-0x8]                                     
 .. 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522a9    498b4f10                mov rcx, [r15+0x10]                                    
 .. = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522ad    480fafc1                imul rax, rcx                                          
 ..    int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522b1    49894710                mov [r15+0x10], rax                                    
 .. cc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522b5    49ff4ff8                dec qword [r15-0x8]                                    
 ..    while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522b9    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b8522be    7fe5                    jg 0x2b8522a5                 < C_Syntax.fac40+34 >
 .. le ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522c0    498b4710                mov rax, [r15+0x10]                                    
0x78722b8522c4    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8522c8    4d8b7e08                mov r15, [r14+0x8]                                     
 .. > 1 ) facc = n -- * facc ;     return facc ; } 
0x78722b8522cc    498906                  mov [r14], rax                                         
 .. acc = n -- * facc ;     return facc ; } 
0x78722b8522cf    c3                      ret                                                    
Word_Disassemble : word - 'fac40' :: codeSize = 77
Word : 0x0000787226139928 :: Compiled at : 0x000078722b852283
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 226.10 <::

        interpret2 : token = //
        interpret2 : token = fac40
        interpret2 : token = dup
        interpret2 : token = p 5040
        interpret2 : token = 5040
        interpret2 : token = _assert
        interpret2 : token = i2halt
        interpret2 exiting...
        interpret : token = sp0
        interpret : token = //
        interpret : token = #
        interpret : token = interpret3 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret3 :> 

        interpret3 : token = sp0
        interpret3 : token = c_syntaxOff
        interpret3 : token = User
        interpret3 : token = words
Words :
 - <namespace> ':>' <word list>
 - User :>  heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
 - Root :>  sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
 - C :>  x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test1 test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf oPrintf
 - int :>  this size
 - libc :>  x xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
 - void :>  Error ftoc ctof this size
 - CObj :>  this size
 - Dlsym :> 
 - chey :> 
 - Class :>  . clone new struct class :{ +:{ };
 - Defines :>  xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
 - String :>  hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
 - Combinators :>  ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
 - Interpreter :>  sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
 - System :>  ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwi pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackDepth stackInit warmInit init reset _include
 - Shell :>  hio ppxe ppx epause apause test sh $ _sh endif else if
 - Compiler :>  vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
 - Int :>  mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / ^^ pow_03 pow ** * -= += - +
 - Debug :>  dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState udis1x udis1 dsn dsf stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
 - Ar9 :>  arr9 a9 a9dump _adump ar dimSize this size
 - Ar3 :>  a7 a a8 a6x a6 ar this size
 - Ar2 :>  a a5 a4 ar this size
 - Ar1 :>  a a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
 - DLLNodeAlloc :>  testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
 - DLLNode :>  sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
 - Buffer :>  buf this size
 - Logic :>  l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
 - Control :>  maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
 - Bits :>  tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
 - DObject :>  new clone dobject
 - Lexer :>  sp heey hey hi ofile orpfile % "
 - testD :>  testC
 - a112 :>  c1138
 - int64 :>  this size
 - arr10 :> 
 - Ar10 :>  a10dump ar dimSize this size
 - cta :>  a caba cadump a tcta aba ar this size
 - ct0 :>  ac a tct ab ar this size
 - ar9 :> 
 - DLLNodeAlloc4 :>  testna5 dlna4o testna5 testna4 nodes this size
 - DLListClone :>  testClone init Accum Four Three Twelve Sum Prototype Category this size
 - DLList :>  hey hi hey hi testList init TailNode HeadNode this size
 - Integer :> 
 - Pointer :>  this size
 - List :>  bexp3 lcRestoreStack dupList printList eval _( _lisp
 - OpenVmTil :>  ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
 - byte :>  this size
 - Io :>  Error logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc logWrite logAppend space tab cr newline kbhit key emit printString
 - Word :>  code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
 - Macro :>  rdim rdi s _s tm: findAlias alias sm:
 - Namespace :>  usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
 - StartupMacros :>  namespaces Delimiters
 - Compiling :>  pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
 - Reserved :>  {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
 - PreProcessor :>  ifndef ifdef undef defined include define elif if else endif !
 - Stack :>  stackCheck setDsp dsp _swap pick _ndrop dropN drop ndup tos dup _dup
 - Memory :>  recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
 - Colors :>  alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
 - File :>  freadToString fexists fsize ftell fseek fread fwrite fclose fopen
 - Asm :>  jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
 - Array :>  [ ]
 - MemorySpace :>  msDelete memspace
 - Locals :>  (| (
 - Forth :>  rpn n, 8, 4, , 2, 1, '
 - Experimental :>  <does <do does> do> locationPrint locationPush
 - L9 :>  l9
1218 words on the 'using' Namespaces List ::
        interpret3 : token = sp0
        interpret3 : token = :
        interpret3 : token = 1
        interpret3 : token = 2
        interpret3 : token = +
        interpret3 : token = p
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hi1
        interpret3 : token = hi1
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = ;
        interpret3 : token = nl

        interpret3 : token = heey1 3 3 3 3 3 3
        interpret3 : token = #
        interpret3 : token = c_syntaxOn
        interpret3 : token = int
        interpret3 : token = for
        interpret3 : token = return
        interpret3 : token = ;
        interpret3 : token = }
        interpret3 : token = pwi
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :> 
int faccs2 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs2 : "namespaces/compiler/c_syntax.csl" : 247.7 :: we are now at : namespaces/compiler/c_syntax.csl : 255.11
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85236e -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x000078722b85236e : disassembly at namespaces/compiler/c_syntax.csl : 255.11 :
0x78722b85236e    4d897e08                mov [r14+0x8], r15                                     
0x78722b852372    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b852376    4981c610000000          add r14, 0x10                                          
  int faccs2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x78722b85237d    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852385    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b85238a    7e1f                    jle 0x2b8523ab                < C_Syntax.faccs2+61 >
0x78722b85238c    0f1f4000                nop [rax]                                              
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852390    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852394    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852398    480fafc1                imul rax, rcx                                          
0x78722b85239c    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8523a0    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8523a4    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b8523a9    7fe5                    jg 0x2b852390                 < C_Syntax.faccs2+34 >
 ..           rec = rec * n ;      }      return rec ; } 
0x78722b8523ab    498b4708                mov rax, [r15+0x8]                                     
0x78722b8523af    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8523b3    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x78722b8523b7    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x78722b8523ba    c3                      ret                                                    
Word_Disassemble : word - 'faccs2' :: codeSize = 77
Word : 0x000078722613e228 :: Compiled at : 0x000078722b85236e
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 255.11 <::

        interpret3 : token = //
        interpret3 : token = faccs2
        interpret3 : token = dup
        interpret3 : token = p 5040
        interpret3 : token = 5040
        interpret3 : token = _assert0
        interpret3 : token = sp0
        interpret3 : token = libc
        interpret3 : token = void
        interpret3 : token = //
        interpret3 : token = //
        interpret3 : token = while
        interpret3 : token = }
        interpret3 : token = //
        interpret3 : token = i3halt
        interpret3 exiting...
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret4 <:> csl compiled word
SourceCode for C_Syntax.interpret4 :> 
void interpret4 ( | atoken aword ) { while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ; if ( atoken ) { if ( StringEqual ( atoken, "i4halt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ; return ; } aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } else break ; } } 
Source code file location of interpret4 : "namespaces/compiler/c_syntax.csl" : 260.11 :: we are now at : namespaces/compiler/c_syntax.csl : 284.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8523c0 -- code size = 342 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret4 : definition = 0x000078722b8523c0 : disassembly at namespaces/compiler/c_syntax.csl : 284.15 :
0x78722b8523c0    4d897e08                mov [r14+0x8], r15                                     
0x78722b8523c4    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8523c8    4981c618000000          add r14, 0x18                                          
 .. | atoken aword )  {           while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) .. 
0x78722b8523cf    b801000000              mov eax, 0x1                                           
0x78722b8523d4    4883f800                cmp rax, 0x0                                           
0x78722b8523d8    0f842f010000            jz 0x78722b85250d             < C_Syntax.interpret4+333 >
 .. while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )      .. 
0x78722b8523de    49bbb00af289c8600000    mov r11, 0x60c889f20ab0                                
0x78722b8523e8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8523f2    49ffd2                  call r10                      < Compiler.token : 0x000060c889f20ab0 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )    .. 
0x78722b8523f5    498d4708                lea rax, [r15+0x8]                                     
0x78722b8523f9    488bc8                  mov rcx, rax                                           
0x78722b8523fc    498b06                  mov rax, [r14]                                         
0x78722b8523ff    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )    .. 
0x78722b852403    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringE .. 
0x78722b852406    48b8d528a12a72780000    mov rax, 0x78722aa128d5                                
0x78722b852410    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )     .. 
0x78722b852413    498b4708                mov rax, [r15+0x8]                                     
0x78722b852417    488bf0                  mov rsi, rax                                           
0x78722b85241a    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b852424    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85242e    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                 .. 
0x78722b852431    498b4708                mov rax, [r15+0x8]                                     
0x78722b852435    4883f800                cmp rax, 0x0                                           
0x78722b852439    0f84c4000000            jz 0x78722b852503             < C_Syntax.interpret4+323 >
 ..      {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exitin .. 
0x78722b85243f    498b4708                mov rax, [r15+0x8]                                     
0x78722b852443    4983c608                add r14, 0x8                                           
0x78722b852447    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...",  .. 
0x78722b85244a    48b8a3105f2b72780000    mov rax, 0x78722b5f10a3       < string : 'i4halt' >
0x78722b852454    4983c608                add r14, 0x8                                           
0x78722b852458    498906                  mov [r14], rax                                         
 .. ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: int .. 
0x78722b85245b    49ba7a24842b72780000    mov r10, 0x78722b84247a                                
0x78722b852465    49ffd2                  call r10                      < C_Syntax.StringEqual : 0x000078722b84247a >
 .. if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;  .. 
0x78722b852468    498b06                  mov rax, [r14]                                         
0x78722b85246b    4983ee08                sub r14, 0x8                                           
0x78722b85246f    4883f800                cmp rax, 0x0                                           
0x78722b852473    7434                    jz 0x2b8524a9                 < C_Syntax.interpret4+233 >
0x78722b852475    0f1f4000                nop [rax]                                              
 ..          {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;   .. 
0x78722b852479    48b8662ba12a72780000    mov rax, 0x78722aa12b66                                
0x78722b852483    488bf8                  mov rdi, rax                                           
 .. oken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord  .. 
0x78722b852486    498b4708                mov rax, [r15+0x8]                                     
0x78722b85248a    488bf0                  mov rsi, rax                                           
0x78722b85248d    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b852497    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8524a1    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 ..  :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord ( atoken  .. 
0x78722b8524a4    e964000000              jmp 0x78722b85250d            < C_Syntax.interpret4+333 >
 ..   }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x78722b8524a9    498b4708                mov rax, [r15+0x8]                                     
0x78722b8524ad    4983c608                add r14, 0x8                                           
0x78722b8524b1    498906                  mov [r14], rax                                         
 ..  ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x78722b8524b4    49bb5013f289c8600000    mov r11, 0x60c889f21350                                
0x78722b8524be    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8524c8    49ffd2                  call r10                      < Interpreter.tokenToWord : 0x000060c889f21350 >
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x78722b8524cb    498d4710                lea rax, [r15+0x10]                                    
0x78722b8524cf    488bc8                  mov rcx, rax                                           
0x78722b8524d2    498b06                  mov rax, [r14]                                         
0x78722b8524d5    4983ee08                sub r14, 0x8                                           
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x78722b8524d9    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x78722b8524dc    498b4710                mov rax, [r15+0x10]                                    
0x78722b8524e0    4983c608                add r14, 0x8                                           
0x78722b8524e4    498906                  mov [r14], rax                                         
0x78722b8524e7    49bb4010f289c8600000    mov r11, 0x60c889f21040                                
0x78722b8524f1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8524fb    49ffd2                  call r10                      < Interpreter.doWord : 0x000060c889f21040 >
0x78722b8524fe    e905000000              jmp 0x78722b852508            < C_Syntax.interpret4+328 >
 .. rd ( aword ) ;         }         else break ;     } }  .. 
0x78722b852503    e905000000              jmp 0x78722b85250d            < C_Syntax.interpret4+333 >
0x78722b852508    e9c2feffff              jmp 0x78722b8523cf            < C_Syntax.interpret4+15 >
0x78722b85250d    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b852511    4d8b7e08                mov r15, [r14+0x8]                                     
 ..          }         else break ;     } }  .. 
0x78722b852515    c3                      ret                                                    
Word_Disassemble : word - 'interpret4' :: codeSize = 342
Word : 0x0000787226141bf8 :: Compiled at : 0x000078722b8523c0
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 284.15 <::

        interpret : token = sp0
        interpret : token = interpret4
        interpret4 : token = C
        interpret4 : token = int
        interpret4 : token = for
        interpret4 : token = return
        interpret4 : token = ;
        interpret4 : token = }
        interpret4 : token = '
        interpret4 : token = find
        interpret4 : token = wdiss
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :> 
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs3 : "namespaces/compiler/c_syntax.csl" : 288.7 :: we are now at : namespaces/compiler/c_syntax.csl : 296.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85251b -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x000078722b85251b : disassembly at namespaces/compiler/c_syntax.csl : 296.20 :
0x78722b85251b    4d897e08                mov [r14+0x8], r15                                     
0x78722b85251f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b852523    4981c610000000          add r14, 0x10                                          
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x78722b85252a    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852532    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852537    7e1f                    jle 0x2b852558                < C_Syntax.faccs3+61 >
0x78722b852539    0f1f4000                nop [rax]                                              
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b85253d    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852541    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852545    480fafc1                imul rax, rcx                                          
0x78722b852549    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b85254d    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b852551    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b852556    7fe5                    jg 0x2b85253d                 < C_Syntax.faccs3+34 >
 ..           rec = rec * n ;      }      return rec ; } 
0x78722b852558    498b4708                mov rax, [r15+0x8]                                     
0x78722b85255c    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b852560    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x78722b852564    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x78722b852567    c3                      ret                                                    
Word_Disassemble : word - 'faccs3' :: codeSize = 77
Word : 0x0000787226146d68 :: Compiled at : 0x000078722b85251b
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 296.20 <::

        interpret4 : token = faccs3
        interpret4 : token = dup
        interpret4 : token = p 5040
        interpret4 : token = 5040
        interpret4 : token = _assert0
        interpret4 : token = sp0
        interpret4 : token = i4halt

        token = i4halt :: interpret4 exiting ...
        interpret : token = sp0
        interpret : token = //
        interpret : token = c_syntaxOff
        interpret : token = //
        interpret : token = #
        interpret : token = //
        interpret : token = C
        interpret : token = sp0
        interpret : token = c_syntaxOn
        interpret : token = C
        interpret : token = String
        interpret : token = libc
        interpret : token = typedef
        interpret : token = void
        interpret : token = buffer
        interpret : token = =
        interpret : token = ;
        interpret : token = memset
        interpret : token = ;
        interpret : token = while
        interpret : token = }
        interpret : token = pwi
 =============================
C_Syntax.$ <:> csl compiled word
SourceCode for C_Syntax.$ :> 
void $ ( | atoken, buffer, CBuffer buffer0 ) { buffer = &buffer0.buf ; memset ( buffer, 0, CBuffer.size ) ; while ( atoken = token () ) { oPrintf ( "\n\ttoken = %s\n", atoken ) ; if ( ! strcmp ( atoken, ";" ) ) { oPrintf ( "\n\tbuffer = %s\n", buffer ) ; sh ( buffer ) ; break ; } else { if ( strcmp ( atoken, "." ) ) { strcat ( buffer, " " ) ; } strcat ( buffer, atoken ) ; } } } 
Source code file location of $ : "namespaces/compiler/c_syntax.csl" : 309.2 :: we are now at : namespaces/compiler/c_syntax.csl : 333.5
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85256d -- code size = 515 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.$ : definition = 0x000078722b85256d : disassembly at namespaces/compiler/c_syntax.csl : 333.5 :
0x78722b85256d    4d897e08                mov [r14+0x8], r15                                     
0x78722b852571    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b852575    4981c620000000          add r14, 0x20                                          
 .. er, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {     .. 
0x78722b85257c    48bff0a8142672780000    mov rdi, 0x78722614a8f0                                
0x78722b852586    498d7718                lea rsi, [r15+0x18]                                    
0x78722b85258a    ba00010000              mov edx, 0x100                                         
0x78722b85258f    49bb10e9ec89c8600000    mov r11, 0x60c889ece910                                
0x78722b852599    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8525a3    49ffd2                  call r10                      < C compiler code >        
 .. r, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {      .. 
0x78722b8525a6    498b4718                mov rax, [r15+0x18]                                    
0x78722b8525aa    4881c000000000          add rax, 0x0                                           
 .. ken, buffer, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )   .. 
0x78722b8525b1    49894710                mov [r15+0x10], rax                                    
 ..  buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken .. 
0x78722b8525b5    498b4710                mov rax, [r15+0x10]                                    
0x78722b8525b9    488bf8                  mov rdi, rax                                           
 .. = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n" .. 
0x78722b8525bc    48c7c000000000          mov rax, 0x0                                           
0x78722b8525c3    488bf0                  mov rsi, rax                                           
 .. buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken )  .. 
0x78722b8525c6    48b868ab142672780000    mov rax, 0x78722614ab68                                
0x78722b8525d0    488b00                  mov rax, [rax]                                         
0x78722b8525d3    488bd0                  mov rdx, rax                                           
 ..  )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( " .. 
0x78722b8525d6    49bbd01efc2b72780000    mov r11, 0x78722bfc1ed0                                
0x78722b8525e0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8525ea    49ffd2                  call r10                      < libc.memset : 0x000078722bfc1ed0 >
 .. Buffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( .. 
0x78722b8525ed    49bbb00af289c8600000    mov r11, 0x60c889f20ab0                                
0x78722b8525f7    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852601    49ffd2                  call r10                      < Compiler.token : 0x000060c889f20ab0 >
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp .. 
0x78722b852604    498d4708                lea rax, [r15+0x8]                                     
 .. fer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! .. 
0x78722b852608    488bc8                  mov rcx, rax                                           
0x78722b85260b    498b06                  mov rax, [r14]                                         
0x78722b85260e    4983ee08                sub r14, 0x8                                           
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp .. 
0x78722b852612    488901                  mov [rcx], rax                                         
 .. ze ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken,  .. 
0x78722b852615    498b06                  mov rax, [r14]                                         
0x78722b852618    4983ee08                sub r14, 0x8                                           
0x78722b85261c    4883f800                cmp rax, 0x0                                           
0x78722b852620    0f8441010000            jz 0x78722b852767             < C_Syntax.$+506 >
 .. oken () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {             .. 
0x78722b852626    48b8c29ca12a72780000    mov rax, 0x78722aa19cc2                                
0x78722b852630    488bf8                  mov rdi, rax                                           
 ..         oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuf .. 
0x78722b852633    498b4708                mov rax, [r15+0x8]                                     
0x78722b852637    488bf0                  mov rsi, rax                                           
0x78722b85263a    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b852644    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85264e    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. ken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( b .. 
0x78722b852651    498b4708                mov rax, [r15+0x8]                                     
0x78722b852655    488bf8                  mov rdi, rax                                           
 ..               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer )  .. 
0x78722b852658    48b8d09ca12a72780000    mov rax, 0x78722aa19cd0       < string : ';' >
0x78722b852662    488bf0                  mov rsi, rax                                           
 .. s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;          .. 
0x78722b852665    49bb103bfc2b72780000    mov r11, 0x78722bfc3b10                                
0x78722b85266f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852679    49ffd2                  call r10                      < libc.strcmp : 0x000078722bfc3b10 >
 ..  %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;        .. 
0x78722b85267c    4883f800                cmp rax, 0x0                                           
0x78722b852680    755b                    jnz 0x2b8526dd                < C_Syntax.$+368 >
0x78722b852682    0f1f4000                nop [rax]                                              
 .. ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         e .. 
0x78722b852686    48b8d29ca12a72780000    mov rax, 0x78722aa19cd2                                
0x78722b852690    488bf8                  mov rdi, rax                                           
 ..        oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {        .. 
0x78722b852693    498b4710                mov rax, [r15+0x10]                                    
0x78722b852697    488bf0                  mov rsi, rax                                           
0x78722b85269a    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b8526a4    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8526ae    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. r = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {              if ( strcmp ( atoken .. 
0x78722b8526b1    498b4710                mov rax, [r15+0x10]                                    
0x78722b8526b5    4983c608                add r14, 0x8                                           
0x78722b8526b9    498906                  mov [r14], rax                                         
0x78722b8526bc    49bbf023f289c8600000    mov r11, 0x60c889f223f0                                
0x78722b8526c6    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8526d0    49ffd2                  call r10                      < Shell.sh : 0x000060c889f223f0 >
0x78722b8526d3    e98f000000              jmp 0x78722b852767            < C_Syntax.$+506 >
0x78722b8526d8    e985000000              jmp 0x78722b852762            < C_Syntax.$+501 >
 ..          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             str .. 
0x78722b8526dd    498b4708                mov rax, [r15+0x8]                                     
0x78722b8526e1    488bf8                  mov rdi, rax                                           
 ..  {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             strcat ( bu .. 
0x78722b8526e4    48b8f99da12a72780000    mov rax, 0x78722aa19df9       < string : '.' >
0x78722b8526ee    488bf0                  mov rsi, rax                                           
 ..     else          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }        .. 
0x78722b8526f1    49bb103bfc2b72780000    mov r11, 0x78722bfc3b10                                
0x78722b8526fb    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b852705    49ffd2                  call r10                      < libc.strcmp : 0x000078722bfc3b10 >
0x78722b852708    4883f800                cmp rax, 0x0                                           
0x78722b85270c    742f                    jz 0x2b85273d                 < C_Syntax.$+464 >
0x78722b85270e    0f1f4000                nop [rax]                                              
 ..            {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x78722b852712    498b4710                mov rax, [r15+0x10]                                    
0x78722b852716    488bf8                  mov rdi, rax                                           
 ..    {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x78722b852719    48b8fb9da12a72780000    mov rax, 0x78722aa19dfb       < string : ' ' >
0x78722b852723    488bf0                  mov rsi, rax                                           
0x78722b852726    49bbd033fc2b72780000    mov r11, 0x78722bfc33d0                                
0x78722b852730    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85273a    49ffd2                  call r10                      < libc.strcat : 0x000078722bfc33d0 >
 .. ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x78722b85273d    498b4710                mov rax, [r15+0x10]                                    
0x78722b852741    488bf8                  mov rdi, rax                                           
 ..        }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x78722b852744    498b4708                mov rax, [r15+0x8]                                     
0x78722b852748    488bf0                  mov rsi, rax                                           
0x78722b85274b    49bbd033fc2b72780000    mov r11, 0x78722bfc33d0                                
0x78722b852755    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85275f    49ffd2                  call r10                      < libc.strcat : 0x000078722bfc33d0 >
 ..   strcat ( buffer, atoken ) ;         }     } }  .. 
0x78722b852762    e986feffff              jmp 0x78722b8525ed            < C_Syntax.$+128 >
0x78722b852767    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85276b    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  ( buffer, atoken ) ;         }     } }  .. 
0x78722b85276f    c3                      ret                                                    
Word_Disassemble : word - '$' :: codeSize = 515
Word : 0x000078722614ae38 :: Compiled at : 0x000078722b85256d
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 333.5 <::

        interpret : token = //
        interpret : token = sp0
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... 

new $ test
total 3964
drwxr-xr-x  8 dennisj dennisj    4096 Jul 28 16:02 .
drwx------ 46 dennisj dennisj   12288 Jul 28 15:59 ..
drwxr-xr-x  2 dennisj dennisj    4096 Jul 28 16:07 bin
-rw-r--r--  1 dennisj dennisj       8 Jul 19 07:47 csl.cflags
-rw-r--r--  1 dennisj dennisj      86 Jul 19 07:47 csl.config
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.creator
-rw-r--r--  1 dennisj dennisj   18232 Jul 27 08:57 csl.creator.user
-rw-r--r--  1 dennisj dennisj      10 Jul 19 07:47 csl.cxxflags
-rw-r--r--  1 dennisj dennisj    4889 Jul 20 10:07 csl.files
-rw-r--r--  1 dennisj dennisj      12 Jul 20 10:07 csl.includes
-rw-r--r--  1 dennisj dennisj 1953687 Jul 28 15:58 csl.out.939.483.txt
-rw-r--r--  1 dennisj dennisj 1857679 Jul 28 16:02 csl.out.txt
drwxr-xr-x  2 dennisj dennisj    4096 Jul 25 22:24 etc
drwxr-xr-x  8 dennisj dennisj    4096 Jul 27 00:06 .git
-rw-r--r--  1 dennisj dennisj   18845 Jul 27 09:43 init.csl
-rw-r--r--  1 dennisj dennisj     163 Apr  2  2022 itestf
-rw-r--r--  1 dennisj dennisj    1067 Aug  4  2023 LICENSE
-rw-r--r--  1 dennisj dennisj   20368 Apr  2  2022 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj     220 Apr  2  2022 m
-rwxr-xr-x  1 dennisj dennisj     664 Apr  2  2022 m0
-rwxr-xr-x  1 dennisj dennisj     224 Apr  2  2022 ma
-rw-r--r--  1 dennisj dennisj    8884 Jul 26 03:03 Makefile
-rwxr-xr-x  1 dennisj dennisj     613 Jul 23 13:35 mir
-rwxr-xr-x  1 dennisj dennisj     504 Apr  2  2022 mira
-rwxr-xr-x  1 dennisj dennisj     549 Apr  2  2022 mirAll
-rwxr-xr-x  1 dennisj dennisj     518 Apr  2  2022 mirs
drwxr-xr-x  4 dennisj dennisj    4096 Jul 25 23:15 namespaces
drwxr-xr-x  3 dennisj dennisj    4096 Jul 25 22:25 nbproject
-rwxr-xr-x  1 dennisj dennisj      52 Sep 29  2022 netbeans
-rw-r--r--  1 dennisj dennisj       5 Jul 28 16:02 node.txt
-rw-r--r--  1 dennisj dennisj      40 Apr  2  2022 nt.csl
-rwxr-xr-x  1 dennisj dennisj     124 Apr  2  2022 r
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.md
-rw-r--r--  1 dennisj dennisj   14382 Oct 31  2023 README.txt
drwxr-xr-x  5 dennisj dennisj    4096 Jul 25 22:24 src
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test
-rw-r--r--  1 dennisj dennisj      90 Apr  2  2022 test.txt

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.135
 7 7 7
version 0.940.135
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xf102400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000078ab0f102400 : disassembly at etc/script : 35.8 :
0x78ab0f102400    4d897e08                mov [r14+0x8], r15                                     
0x78ab0f102404    4d8d7e08                lea r15, [r14+0x8]                                     
0x78ab0f102408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x78ab0f10240f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x78ab0f102417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f10241c    7e1f                    jle 0xf10243d                 < Int.fac+61 >
0x78ab0f10241e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f102422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f102426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f10242a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f10242e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f102432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f102436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78ab0f10243b    7fe5                    jg 0xf102422                  < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f10243d    498b4708                mov rax, [r15+0x8]                                     
0x78ab0f102441    e900000000              jmp 0x78ab0f102446            < Int.fac+70 >
0x78ab0f102446    4d8d77f8                lea r14, [r15-0x8]                                     
0x78ab0f10244a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x78ab0f10244e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x78ab0f102451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x000078ab0f2bd437 :: Compiled at : 0x000078ab0f102400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 349.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.C
should read 3 : 3
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; } 
Source code file location of fac5 : "namespaces/compiler/c_syntax.csl" : 355.5 :: we are now at : namespaces/compiler/c_syntax.csl : 365.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8527f3 -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x000078722b8527f3 : disassembly at namespaces/compiler/c_syntax.csl : 365.9 :
0x78722b8527f3    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x78722b8527f6    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x78722b8527fb    4883ff01                cmp rdi, 0x1                                           
0x78722b8527ff    7e11                    jle 0x2b852812                < C_Syntax.fac5+31 >
0x78722b852801    0f1f4000                nop [rax]                                              
 ..  ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x78722b852805    480faff7                imul rsi, rdi                                          
 .. > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x78722b852809    48ffcf                  dec rdi                                                
0x78722b85280c    4883ff01                cmp rdi, 0x1                                           
0x78722b852810    7ff3                    jg 0x2b852805                 < C_Syntax.fac5+18 >
 ..       facc *= n -- ;     }     return facc ; } 
0x78722b852812    498936                  mov [r14], rsi                                         
 .. acc *= n -- ;     }     return facc ; } 
0x78722b852815    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 35
Word : 0x000078722614ffa8 :: Compiled at : 0x000078722b8527f3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 365.9 <::
 5040
0x78722b85281b    4d897e08                mov [r14+0x8], r15                                     
0x78722b85281f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b852823    4981c618000000          add r14, 0x18                                          
0x78722b85282a    48b8f8b5142672780000    mov rax, 0x78722614b5f8                                
0x78722b852834    b902000000              mov ecx, 0x2                                           
0x78722b852839    488908                  mov [rax], rcx                                         
0x78722b85283c    48b8f824152672780000    mov rax, 0x7872261524f8                                
0x78722b852846    b904000000              mov ecx, 0x4                                           
0x78722b85284b    488908                  mov [rax], rcx                                         
0x78722b85284e    48b8f8b5142672780000    mov rax, 0x78722614b5f8                                
0x78722b852858    488b00                  mov rax, [rax]                                         
0x78722b85285b    48b9f824152672780000    mov rcx, 0x7872261524f8                                
0x78722b852865    488b09                  mov rcx, [rcx]                                         
0x78722b852868    4803c1                  add rax, rcx                                           
0x78722b85286b    b902000000              mov ecx, 0x2                                           
0x78722b852870    48c7c200000000          mov rdx, 0x0                                           
0x78722b852877    48f7f9                  idiv rcx                                               
0x78722b85287a    4983c610                add r14, 0x10                                          
0x78722b85287e    498906                  mov [r14], rax                                         
0x78722b852881    498946f8                mov [r14-0x8], rax                                     
0x78722b852885    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b85288f    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b852892    b803000000              mov eax, 0x3                                           
0x78722b852897    4983c608                add r14, 0x8                                           
0x78722b85289b    498906                  mov [r14], rax                                         
0x78722b85289e    49baa61c842b72780000    mov r10, 0x78722b841ca6                                
0x78722b8528a8    49ffd2                  call r10                      < C._assert0 : 0x000078722b841ca6 >
0x78722b8528ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8528af    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8528b3    c3                      ret                                                    
 3 3 
above line should show 3 3
 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :> 
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
Source code file location of yada : "namespaces/compiler/c_syntax.csl" : 385.10 :: we are now at : namespaces/compiler/c_syntax.csl : 385.85
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8528b9 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yada : definition = 0x000078722b8528b9 : disassembly at namespaces/compiler/c_syntax.csl : 385.85 :
0x78722b8528b9    4d897e08                mov [r14+0x8], r15                                     
0x78722b8528bd    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8528c1    4981c620000000          add r14, 0x20                                          
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x78722b8528c8    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x78722b8528d0    49c747100c000000        mov qword [r15+0x10], 0xc                              
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b8528d8    498b4708                mov rax, [r15+0x8]                                     
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b8528dc    498b4f10                mov rcx, [r15+0x10]                                    
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b8528e0    4803c1                  add rax, rcx                                           
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b8528e3    b902000000              mov ecx, 0x2                                           
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b8528e8    48c7c200000000          mov rdx, 0x0                                           
0x78722b8528ef    48f7f9                  idiv rcx                                               
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x78722b8528f2    49894718                mov [r15+0x18], rax                                    
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b8528f6    498b4718                mov rax, [r15+0x18]                                    
0x78722b8528fa    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8528fe    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b852902    4983c608                add r14, 0x8                                           
 .. 2, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b852906    498906                  mov [r14], rax                                         
 .. ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x78722b852909    c3                      ret                                                    
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x0000787226153f68 :: Compiled at : 0x000078722b8528b9
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 385.85 <::

DataStack at : namespaces/compiler/c_syntax.csl : 385.99 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000078722c065ad8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ad8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 385.109 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :> 
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return ( x ) ; } 
Source code file location of yadaYada : "namespaces/compiler/c_syntax.csl" : 386.14 :: we are now at : namespaces/compiler/c_syntax.csl : 386.103
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85290f -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x000078722b85290f : disassembly at namespaces/compiler/c_syntax.csl : 386.103 :
0x78722b85290f    4d897e08                mov [r14+0x8], r15                                     
0x78722b852913    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b852917    4981c620000000          add r14, 0x20                                          
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  .. 
0x78722b85291e    49c7470802000000        mov qword [r15+0x8], 0x2                               
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  .. 
0x78722b852926    49c747100c000000        mov qword [r15+0x10], 0xc                              
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b85292e    498b4708                mov rax, [r15+0x8]                                     
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b852932    498b4f10                mov rcx, [r15+0x10]                                    
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b852936    4803c1                  add rax, rcx                                           
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b852939    b902000000              mov ecx, 0x2                                           
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b85293e    48c7c200000000          mov rdx, 0x0                                           
0x78722b852945    48f7f9                  idiv rcx                                               
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b852948    49894718                mov [r15+0x18], rax                                    
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b85294c    498b4718                mov rax, [r15+0x18]                                    
0x78722b852950    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b852954    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b852958    4983c608                add r14, 0x8                                           
 .. 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b85295c    498906                  mov [r14], rax                                         
 ..  = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x78722b85295f    c3                      ret                                                    
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x0000787226156bb8 :: Compiled at : 0x000078722b85290f
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 386.103 <::

DataStack at : namespaces/compiler/c_syntax.csl : 386.129 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

including namespaces/types.csl at namespaces/compiler/c_syntax.csl : 400.11 ...

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 401.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 984 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3744 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 232 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12264 : WordCreateCount = 13690 : WordsAdded = 5102 : FindWordCount = 147 : FindWordMaxCount = 150
RecycledWordCount : 502
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 2 : Precision = 16
 78024 653
 =============================
int.wtdInclude <:> csl compiled word
SourceCode for int.wtdInclude :> 
: wtdInclude "namespaces/types.csl" include ; 
Source code file location of wtdInclude : "namespaces/compiler/c_syntax.csl" : 399.2 :: we are now at : namespaces/compiler/c_syntax.csl : 403.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b852974 -- code size = 31 bytes
 -----------------------------
Word :: int.wtdInclude : definition = 0x000078722b852974 : disassembly at namespaces/compiler/c_syntax.csl : 403.15 :
 ..                          : wtdInclude "namespaces/types.csl" include ;  .. 
0x78722b852974    48b8101b5f2b72780000    mov rax, 0x78722b5f1b10       < string : 'namespaces/types.csl' >
0x78722b85297e    4983c608                add r14, 0x8                                           
0x78722b852982    498906                  mov [r14], rax                                         
 ..   : wtdInclude "namespaces/types.csl" include ;  .. 
0x78722b852985    49ba6e03842b72780000    mov r10, 0x78722b84036e                                
0x78722b85298f    49ffd2                  call r10                      < Root.include : 0x000078722b84036e >
 .. nclude "namespaces/types.csl" include ; 
0x78722b852992    c3                      ret                                                    
Word_Disassemble : word - 'wtdInclude' :: codeSize = 31
Word : 0x000078722615a228 :: Compiled at : 0x000078722b852974
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 403.15 <::
 0x000078722615a228
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 404.69 : data = '78722615a228' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x000078722615a228
_Identifier

                  DLNode : S_Node : size = 88 : at 000078722615a228
union

                 _DLNode : n_DLNode : size = 24 : at 000078722615a228
union
0x000078722615a228  dlnode           *   n_After                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a230  dlnode           *   n_Before                 = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230

                  dlnode : n_Node : size = 16 : at 000078722615a228
_node
union
0x000078722615a228  _node            *   n_After                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  _node            *   n_Head                   = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228

union
0x000078722615a230  _node            *   n_Before                 = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230
0x000078722615a230  _node            *   n_Tail                   = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230


union
0x000078722615a238  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x78722615a238
0x000078722615a23c  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x78722615a23c
0x000078722615a23e  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x78722615a23e
0x000078722615a23f  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x78722615a23f
0x000078722615a228  byte             *   n_unmap                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  byte             *   n_bData                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  int64            *   n_iData                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  int64                node                     = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  int64            *   n_CurrentNode            = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228


                 dobject : n_dobject : size = 32 : at 000078722615a228
union
0x000078722615a228  dlnode           *   do_After                 = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a230  dlnode           *   do_Before                = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230

                  dlnode : do_Node : size = 16 : at 000078722615a228
_node
union
0x000078722615a228  _node            *   n_After                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  _node            *   n_Head                   = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228

union
0x000078722615a230  _node            *   n_Before                 = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230
0x000078722615a230  _node            *   n_Tail                   = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230


0x000078722615a238  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x78722615a238
0x000078722615a23c  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x78722615a23c
0x000078722615a23e  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x78722615a23e
0x000078722615a23f  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x78722615a23f
union
0x000078722615a240  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x78722615a240
0x000078722615a240  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x78722615a240
0x000078722615a240  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x78722615a240



           AttributeInfo : n_Attributes : size = 56 : at 000078722615a248
union
union
0x000078722615a248  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x78722615a248
0x000078722615a250  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x78722615a250
0x000078722615a258  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x78722615a258
0x000078722615a260  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x78722615a260
0x000078722615a268  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x78722615a268
0x000078722615a26c  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x78722615a26c
0x000078722615a26e  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x78722615a26e

union
0x000078722615a270  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x78722615a270
0x000078722615a270  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x78722615a270

union
0x000078722615a278  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x78722615a278
0x000078722615a278  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x78722615a278

0x000078722615a248  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x78722615a248

0x000078722615a280  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x78722615a280
0x000078722615a288  byte             *   S_Name                   = 0x000078722b5f1aee          offset = 0x60 : dataPtr = 0x78722615a288
        S_Name = 'wtdInclude'
0x000078722615a290  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x78722615a290
0x000078722615a298  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x78722615a298
0x000078722615a2a0  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x78722615a2a0
0x000078722615a2a8  uint64           *   S_PtrToValue             = 0x000078722615a2b8          offset = 0x80 : dataPtr = 0x78722615a2a8
0x000078722615a2b0  block                Definition               = 0x000078722b852974          offset = 0x88 : dataPtr = 0x78722615a2b0
union
0x000078722615a2b8  uint64               S_Value                  = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8
0x000078722615a2b8  byte             *   S_BytePtr                = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8
0x000078722615a2b8  byte             *   S_Object                 = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8
0x000078722615a2b8  _Identifier      *   S_ValueWord              = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8

union
0x000078722615a2c0  _Identifier      *   S_ContainingNamespace    = 0x000078722b909454          offset = 0x98 : dataPtr = 0x78722615a2c0
0x000078722615a2c0  _Identifier      *   S_ContainingList         = 0x000078722b909454          offset = 0x98 : dataPtr = 0x78722615a2c0
0x000078722615a2c0  _Identifier      *   S_Prototype              = 0x000078722b909454          offset = 0x98 : dataPtr = 0x78722615a2c0
 0x000078722615a228
Dump at : namespaces/compiler/c_syntax.csl : 405.54 :
Dump : Address = 0x000078722615a228 : Number = 184 :: (little endian dump)
0x000078722615a228 :  78 a0 15 26 72 78 00 00  1c 96 90 2b 72 78 00 00  x..&rx.. ...+rx.. 
0x000078722615a238 :  00 00 00 00 b0 01 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722615a248 :  02 00 00 00 00 00 04 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722615a258 :  00 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  ........ @....... 
0x000078722615a268 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722615a278 :  00 00 00 00 00 00 00 00  1f 00 00 00 00 00 00 00  ........ ........ 
0x000078722615a288 :  ee 1a 5f 2b 72 78 00 00  30 00 04 04 00 00 00 00  .._+rx.. 0....... 
0x000078722615a298 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722615a2a8 :  b8 a2 15 26 72 78 00 00  74 29 85 2b 72 78 00 00  ...&rx.. t).+rx.. 
0x000078722615a2b8 :  74 29 85 2b 72 78 00 00  54 94 90 2b 72 78 00 00  t).+rx.. T..+rx.. 
0x000078722615a2c8 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x000078722615a2d8 :  e0 a2 15 26 72 78 00 00  00 00 00 00 00 00 00 00  ...&rx.. ........ 
 0x000078722615a108 0x000078722615a228 0x000078722615a228 0x000078722615a2b0 wtdInclude
Identifier = 787226011c85, Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


 =============================
C_Syntax.tfw1 <:> csl compiled word
SourceCode for C_Syntax.tfw1 :> 
void tfw1 ( Word * w ) { hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name ) ; hp ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_WordData->Filename ) ; } 
Source code file location of tfw1 : "namespaces/compiler/c_syntax.csl" : 414.10 :: we are now at : namespaces/compiler/c_syntax.csl : 419.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b853c48 -- code size = 262 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.tfw1 : definition = 0x000078722b853c48 : disassembly at namespaces/compiler/c_syntax.csl : 419.9 :
0x78722b853c48    4d897e08                mov [r14+0x8], r15                                     
0x78722b853c4c    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b853c50    4981c608000000          add r14, 0x8                                           
 ..   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filena .. 
0x78722b853c57    498b47f8                mov rax, [r15-0x8]                                     
   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  .. 
0x78722b853c5b    4881c088000000          add rax, 0x88                                          
0x78722b853c62    488b00                  mov rax, [rax]                                         
0x78722b853c65    4983c608                add r14, 0x8                                           
 ..  void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filenam .. 
0x78722b853c69    498906                  mov [r14], rax                                         
0x78722b853c6c    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b853c76    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_ .. 
0x78722b853c79    498b47f8                mov rax, [r15-0x8]                                     
 .. {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Fil .. 
0x78722b853c7d    4881c060000000          add rax, 0x60                                          
0x78722b853c84    488b00                  mov rax, [rax]                                         
0x78722b853c87    4983c608                add r14, 0x8                                           
 ..   {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_F .. 
0x78722b853c8b    498906                  mov [r14], rax                                         
 ..  * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps (  .. 
0x78722b853c8e    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b853c98    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. efinition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData .. 
0x78722b853c9b    498b47f8                mov rax, [r15-0x8]                                     
 .. n ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filena .. 
0x78722b853c9f    4881c060000000          add rax, 0x60                                          
0x78722b853ca6    488b00                  mov rax, [rax]                                         
0x78722b853ca9    4983c608                add r14, 0x8                                           
 .. finition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData- .. 
0x78722b853cad    498906                  mov [r14], rax                                         
 ..  w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_Wor .. 
0x78722b853cb0    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b853cba    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ame ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W .. 
0x78722b853cbd    498b47f8                mov rax, [r15-0x8]                                     
 .. ->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Fil .. 
0x78722b853cc1    4881c0b0000000          add rax, 0xb0                                          
0x78722b853cc8    488b00                  mov rax, [rax]                                         
 .. e  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;   .. 
0x78722b853ccb    4881c028000000          add rax, 0x28                                          
0x78722b853cd2    488b00                  mov rax, [rax]                                         
0x78722b853cd5    4983c608                add r14, 0x8                                           
 .. ame  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ; .. 
0x78722b853cd9    498906                  mov [r14], rax                                         
 .. ->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( .. 
0x78722b853cdc    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b853ce6    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. e W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853ce9    498b47f8                mov rax, [r15-0x8]                                     
 .. Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853ced    4881c0b0000000          add rax, 0xb0                                          
0x78722b853cf4    488b00                  mov rax, [rax]                                         
 .. ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853cf7    4881c028000000          add rax, 0x28                                          
0x78722b853cfe    488b00                  mov rax, [rax]                                         
0x78722b853d01    4983c608                add r14, 0x8                                           
 .. ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d05    498906                  mov [r14], rax                                         
0x78722b853d08    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b853d12    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. lename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d15    498b47f8                mov rax, [r15-0x8]                                     
 .. ame W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d19    4881c0b0000000          add rax, 0xb0                                          
0x78722b853d20    488b00                  mov rax, [rax]                                         
 .. ta->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d23    4881c028000000          add rax, 0x28                                          
0x78722b853d2a    488b00                  mov rax, [rax]                                         
0x78722b853d2d    4983c608                add r14, 0x8                                           
 .. Data->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d31    498906                  mov [r14], rax                                         
 .. >W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d34    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b853d3e    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b853d41    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b853d45    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b853d49    4983ee08                sub r14, 0x8                                           
 ..  ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x78722b853d4d    c3                      ret                                                    
Word_Disassemble : word - 'tfw1' :: codeSize = 262
Word : 0x0000787225f18276 :: Compiled at : 0x000078722b853c48
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 419.9 <::
 0x000078722b853c48 tfw1 0x000078722b853c48 tfw1 tfw1 0x000078722b5ef778 namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
 -----------------------------
WordDisassemble : word = 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 423.25 <::
 0x000078722b852974 wtdInclude
 0x000078722b04eb24 fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x000078722b04eb24 fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x000078722615a228
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 434.69 : data = '78722615a228' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x000078722615a228
_Identifier

                  DLNode : S_Node : size = 88 : at 000078722615a228
union

                 _DLNode : n_DLNode : size = 24 : at 000078722615a228
union
0x000078722615a228  dlnode           *   n_After                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a230  dlnode           *   n_Before                 = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230

                  dlnode : n_Node : size = 16 : at 000078722615a228
_node
union
0x000078722615a228  _node            *   n_After                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  _node            *   n_Head                   = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228

union
0x000078722615a230  _node            *   n_Before                 = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230
0x000078722615a230  _node            *   n_Tail                   = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230


union
0x000078722615a238  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x78722615a238
0x000078722615a23c  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x78722615a23c
0x000078722615a23e  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x78722615a23e
0x000078722615a23f  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x78722615a23f
0x000078722615a228  byte             *   n_unmap                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  byte             *   n_bData                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  int64            *   n_iData                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  int64                node                     = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  int64            *   n_CurrentNode            = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228


                 dobject : n_dobject : size = 32 : at 000078722615a228
union
0x000078722615a228  dlnode           *   do_After                 = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a230  dlnode           *   do_Before                = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230

                  dlnode : do_Node : size = 16 : at 000078722615a228
_node
union
0x000078722615a228  _node            *   n_After                  = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228
0x000078722615a228  _node            *   n_Head                   = 0x000078722615a078          offset = 0x0 : dataPtr = 0x78722615a228

union
0x000078722615a230  _node            *   n_Before                 = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230
0x000078722615a230  _node            *   n_Tail                   = 0x000078722b90961c          offset = 0x8 : dataPtr = 0x78722615a230


0x000078722615a238  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x78722615a238
0x000078722615a23c  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x78722615a23c
0x000078722615a23e  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x78722615a23e
0x000078722615a23f  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x78722615a23f
union
0x000078722615a240  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x78722615a240
0x000078722615a240  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x78722615a240
0x000078722615a240  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x78722615a240



           AttributeInfo : n_Attributes : size = 56 : at 000078722615a248
union
union
0x000078722615a248  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x78722615a248
0x000078722615a250  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x78722615a250
0x000078722615a258  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x78722615a258
0x000078722615a260  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x78722615a260
0x000078722615a268  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x78722615a268
0x000078722615a26c  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x78722615a26c
0x000078722615a26e  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x78722615a26e

union
0x000078722615a270  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x78722615a270
0x000078722615a270  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x78722615a270

union
0x000078722615a278  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x78722615a278
0x000078722615a278  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x78722615a278

0x000078722615a248  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x78722615a248

0x000078722615a280  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x78722615a280
0x000078722615a288  byte             *   S_Name                   = 0x000078722b5f1aee          offset = 0x60 : dataPtr = 0x78722615a288
        S_Name = 'wtdInclude'
0x000078722615a290  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x78722615a290
0x000078722615a298  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x78722615a298
0x000078722615a2a0  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x78722615a2a0
0x000078722615a2a8  uint64           *   S_PtrToValue             = 0x000078722615a2b8          offset = 0x80 : dataPtr = 0x78722615a2a8
0x000078722615a2b0  block                Definition               = 0x000078722b852974          offset = 0x88 : dataPtr = 0x78722615a2b0
union
0x000078722615a2b8  uint64               S_Value                  = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8
0x000078722615a2b8  byte             *   S_BytePtr                = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8
0x000078722615a2b8  byte             *   S_Object                 = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8
0x000078722615a2b8  _Identifier      *   S_ValueWord              = 0x000078722b852974          offset = 0x90 : dataPtr = 0x78722615a2b8

union
0x000078722615a2c0  _Identifier      *   S_ContainingNamespace    = 0x000078722b909454          offset = 0x98 : dataPtr = 0x78722615a2c0
0x000078722615a2c0  _Identifier      *   S_ContainingList         = 0x000078722b909454          offset = 0x98 : dataPtr = 0x78722615a2c0
0x000078722615a2c0  _Identifier      *   S_Prototype              = 0x000078722b909454          offset = 0x98 : dataPtr = 0x78722615a2c0

Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 16.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 441.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 984 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3744 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 232 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12337 : WordCreateCount = 13767 : WordsAdded = 5122 : FindWordCount = 152 : FindWordMaxCount = 156
RecycledWordCount : 503
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 2 : Precision = 16
 =============================
Infix.tt <:> csl compiled word
SourceCode for Infix.tt :> 
: tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name ps w->W_Filename W_WordData->Filename ps w->W_Filename W_WordData->Filename ps w->W_WordData->Filename ps ; 
Source code file location of tt : "namespaces/compiler/c_syntax.csl" : 443.2 :: we are now at : namespaces/compiler/c_syntax.csl : 444.7
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854079 -- code size = 319 bytes
TypeSignature : Object 
 -----------------------------
Word :: Infix.tt : definition = 0x000078722b854079 : disassembly at namespaces/compiler/c_syntax.csl : 444.7 :
0x78722b854079    4d897e08                mov [r14+0x8], r15                                     
0x78722b85407d    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854081    4981c608000000          add r14, 0x8                                           
 ..                     : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->File .. 
0x78722b854088    48b80b6a602b72780000    mov rax, 0x78722b606a0b                                
0x78722b854092    4983c608                add r14, 0x8                                           
0x78722b854096    498906                  mov [r14], rax                                         
 ..           : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w .. 
0x78722b854099    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8540a3    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..        : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W .. 
0x78722b8540a6    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8540aa    488b00                  mov rax, [rax]                                         
0x78722b8540ad    4983c608                add r14, 0x8                                           
0x78722b8540b1    498906                  mov [r14], rax                                         
 ..    : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Fil .. 
0x78722b8540b4    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b8540be    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 .. : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filena .. 
0x78722b8540c1    498b47f8                mov rax, [r15-0x8]                                     
 : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename  .. 
0x78722b8540c5    4881c088000000          add rax, 0x88                                          
0x78722b8540cc    488b00                  mov rax, [rax]                                         
0x78722b8540cf    4983c608                add r14, 0x8                                           
   : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filenam .. 
0x78722b8540d3    498906                  mov [r14], rax                                         
 .. w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData- .. 
0x78722b8540d6    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b8540e0    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
 ..  "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fi .. 
0x78722b8540e3    498b47f8                mov rax, [r15-0x8]                                     
 .. ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filen .. 
0x78722b8540e7    4881c060000000          add rax, 0x60                                          
0x78722b8540ee    488b00                  mov rax, [rax]                                         
0x78722b8540f1    4983c608                add r14, 0x8                                           
 .. "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fil .. 
0x78722b8540f5    498906                  mov [r14], rax                                         
 ..  ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps .. 
0x78722b8540f8    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854102    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w- .. 
0x78722b854105    498b47f8                mov rax, [r15-0x8]                                     
 .. w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordD .. 
0x78722b854109    4881c060000000          add rax, 0x60                                          
0x78722b854110    488b00                  mov rax, [rax]                                         
0x78722b854113    4983c608                add r14, 0x8                                           
 .. w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w-> .. 
0x78722b854117    498906                  mov [r14], rax                                         
 .. ition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Fil .. 
0x78722b85411a    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854124    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. on hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filena .. 
0x78722b854127    498b47f8                mov rax, [r15-0x8]                                     
 .. e ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b85412b    4881c0b0000000          add rax, 0xb0                                          
0x78722b854132    488b00                  mov rax, [rax]                                         
 ..  S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854135    4881c028000000          add rax, 0x28                                          
0x78722b85413c    488b00                  mov rax, [rax]                                         
0x78722b85413f    4983c608                add r14, 0x8                                           
 .. me S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854143    498906                  mov [r14], rax                                         
 .. s w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854146    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854150    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854153    498b47f8                mov rax, [r15-0x8]                                     
 .. _WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854157    4881c0b0000000          add rax, 0xb0                                          
0x78722b85415e    488b00                  mov rax, [rax]                                         
 .. ilename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854161    4881c028000000          add rax, 0x28                                          
0x78722b854168    488b00                  mov rax, [rax]                                         
0x78722b85416b    4983c608                add r14, 0x8                                           
 .. >Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b85416f    498906                  mov [r14], rax                                         
 .. s w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854172    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85417c    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b85417f    498b47f8                mov rax, [r15-0x8]                                     
 .. _Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b854183    4881c0b0000000          add rax, 0xb0                                          
0x78722b85418a    488b00                  mov rax, [rax]                                         
 .. WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b85418d    4881c028000000          add rax, 0x28                                          
0x78722b854194    488b00                  mov rax, [rax]                                         
0x78722b854197    4983c608                add r14, 0x8                                           
 .. W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b85419b    498906                  mov [r14], rax                                         
 .. >Filename  ps w->W_WordData->Filename ps ;  .. 
0x78722b85419e    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8541a8    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b8541ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8541af    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8541b3    4983ee08                sub r14, 0x8                                           
 .. lename  ps w->W_WordData->Filename ps ;  .. 
0x78722b8541b7    c3                      ret                                                    
Word_Disassemble : word - 'tt' :: codeSize = 319
Word : 0x0000787225f219fe :: Compiled at : 0x000078722b854079
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 444.7 <::

 0x000078722615a228 
tt :  0x000078722615a078 0x000078722b852974 wtdInclude wtdInclude namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x0000787225f2521e 
tti 0x000078722b8541bd tti tti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 
ctti
ctti : word = 787225f286de : Definition = 78722b8542e6 ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
C_Syntax.ctti <:> csl compiled word
SourceCode for C_Syntax.ctti :> 
void ctti ( Word * w | ptr l ) { ps ( "\nctti" ) ; l = w->Definition ; oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name ; ps(w->S_Name) ; ps ( ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps(ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps (ptr) ; ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ; ptr = w->W_WordData ; } 
Source code file location of ctti : "namespaces/compiler/c_syntax.csl" : 451.10 :: we are now at : namespaces/compiler/c_syntax.csl : 463.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8542e6 -- code size = 469 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.ctti : definition = 0x000078722b8542e6 : disassembly at namespaces/compiler/c_syntax.csl : 463.9 :
0x78722b8542e6    4d897e08                mov [r14+0x8], r15                                     
0x78722b8542ea    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8542ee    4981c618000000          add r14, 0x18                                          
 .. tti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ;  .. 
0x78722b8542f5    48b8f46b602b72780000    mov rax, 0x78722b606bf4                                
0x78722b8542ff    4983c608                add r14, 0x8                                           
0x78722b854303    498906                  mov [r14], rax                                         
0x78722b854306    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854310    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; .. 
0x78722b854313    498b47f8                mov rax, [r15-0x8]                                     
 ..  l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps .. 
0x78722b854317    4881c088000000          add rax, 0x88                                          
0x78722b85431e    488b00                  mov rax, [rax]                                         
 .. w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Na .. 
0x78722b854321    49894710                mov [r15+0x10], rax                                    
 ..  ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name .. 
0x78722b854325    48b824c3012672780000    mov rax, 0x78722601c324                                
0x78722b85432f    488bf8                  mov rdi, rax                                           
 .. tti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = .. 
0x78722b854332    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854336    4881c000000000          add rax, 0x0                                           
0x78722b85433d    488bf0                  mov rsi, rax                                           
 ..  : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w. .. 
0x78722b854340    498b4710                mov rax, [r15+0x10]                                    
0x78722b854344    488bd0                  mov rdx, rax                                           
 .. "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->N .. 
0x78722b854347    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b854351    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85435b    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. x : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W .. 
0x78722b85435e    498b47f8                mov rax, [r15-0x8]                                     
 ..  Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_Wo .. 
0x78722b854362    4881c060000000          add rax, 0x60                                          
0x78722b854369    488b00                  mov rax, [rax]                                         
 .. d = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_File .. 
0x78722b85436c    49894708                mov [r15+0x8], rax                                     
 .. = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->File .. 
0x78722b854370    498b4708                mov rax, [r15+0x8]                                     
0x78722b854374    4983c608                add r14, 0x8                                           
0x78722b854378    498906                  mov [r14], rax                                         
 .. on = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->F .. 
0x78722b85437b    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854385    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(p .. 
0x78722b854388    498b47f8                mov rax, [r15-0x8]                                     
 .. = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; pt .. 
0x78722b85438c    4881c060000000          add rax, 0x60                                          
0x78722b854393    488b00                  mov rax, [rax]                                         
 ..  w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ; .. 
0x78722b854396    49894708                mov [r15+0x8], rax                                     
 ..  ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filen .. 
0x78722b85439a    498b47f8                mov rax, [r15-0x8]                                     
 .. (ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename .. 
0x78722b85439e    4881c060000000          add rax, 0x60                                          
0x78722b8543a5    488b00                  mov rax, [rax]                                         
0x78722b8543a8    4983c608                add r14, 0x8                                           
 .. ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filena .. 
0x78722b8543ac    498906                  mov [r14], rax                                         
 .. e ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Fi .. 
0x78722b8543af    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8543b9    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Fi .. 
0x78722b8543bc    498b4708                mov rax, [r15+0x8]                                     
0x78722b8543c0    4983c608                add r14, 0x8                                           
0x78722b8543c4    498906                  mov [r14], rax                                         
 .. r = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordDat .. 
0x78722b8543c7    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8543d1    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. s(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) .. 
0x78722b8543d4    498b47f8                mov rax, [r15-0x8]                                     
 .. ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = .. 
0x78722b8543d8    4881c0b0000000          add rax, 0xb0                                          
0x78722b8543df    488b00                  mov rax, [rax]                                         
 .. ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordDa .. 
0x78722b8543e2    4881c028000000          add rax, 0x28                                          
0x78722b8543e9    488b00                  mov rax, [rax]                                         
0x78722b8543ec    49894708                mov [r15+0x8], rax                                     
 .. _Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; p .. 
0x78722b8543f0    498b4708                mov rax, [r15+0x8]                                     
0x78722b8543f4    4983c608                add r14, 0x8                                           
0x78722b8543f8    498906                  mov [r14], rax                                         
 .. w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename  .. 
0x78722b8543fb    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854405    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps  .. 
0x78722b854408    498b47f8                mov rax, [r15-0x8]                                     
 .. name  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordDat .. 
0x78722b85440c    4881c0b0000000          add rax, 0xb0                                          
0x78722b854413    488b00                  mov rax, [rax]                                         
 .. ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) .. 
0x78722b854416    4881c028000000          add rax, 0x28                                          
0x78722b85441d    488b00                  mov rax, [rax]                                         
 .. me W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) .. 
0x78722b854420    49894708                mov [r15+0x8], rax                                     
 .. _Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w-> .. 
0x78722b854424    498b4708                mov rax, [r15+0x8]                                     
0x78722b854428    4983c608                add r14, 0x8                                           
0x78722b85442c    498906                  mov [r14], rax                                         
 ..  w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = .. 
0x78722b85442f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854439    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ta->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b85443c    498b47f8                mov rax, [r15-0x8]                                     
 .. >Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b854440    4881c0b0000000          add rax, 0xb0                                          
0x78722b854447    488b00                  mov rax, [rax]                                         
 ..  ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b85444a    4881c028000000          add rax, 0x28                                          
0x78722b854451    488b00                  mov rax, [rax]                                         
0x78722b854454    49894708                mov [r15+0x8], rax                                     
 ..   ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b854458    498b4708                mov rax, [r15+0x8]                                     
0x78722b85445c    4983c608                add r14, 0x8                                           
0x78722b854460    498906                  mov [r14], rax                                         
 ..       ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b854463    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85446d    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b854470    498b47f8                mov rax, [r15-0x8]                                     
 .. ordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b854474    4881c0b0000000          add rax, 0xb0                                          
0x78722b85447b    488b00                  mov rax, [rax]                                         
 .. ename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b85447e    4881c028000000          add rax, 0x28                                          
0x78722b854485    488b00                  mov rax, [rax]                                         
0x78722b854488    4983c608                add r14, 0x8                                           
 .. ilename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b85448c    498906                  mov [r14], rax                                         
 ..  w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b85448f    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b854499    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b85449c    498b47f8                mov rax, [r15-0x8]                                     
 .. >W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b8544a0    4881c0b0000000          add rax, 0xb0                                          
0x78722b8544a7    488b00                  mov rax, [rax]                                         
 ..  ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b8544aa    49894708                mov [r15+0x8], rax                                     
0x78722b8544ae    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8544b2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8544b6    4983ee08                sub r14, 0x8                                           
 .. ename) ;     ptr = w->W_WordData ;    }  .. 
0x78722b8544ba    c3                      ret                                                    
Word_Disassemble : word - 'ctti' :: codeSize = 469
Word : 0x0000787225f286de :: Compiled at : 0x000078722b8542e6
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 463.9 <::
 
ctti
ctti : word = 787225f286de : Definition = 78722b8542e6 ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x0000787225f286de 0x0000787225f28796
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 465.89 : data = '787225f28796' : typedef = 'WordData'
               _WordData :: size = 248 :: at : 0x0000787225f28796
_WordData
0x0000787225f28796  uint64               WD_RunType               = 0x0000000000000000          offset = 0x0 : dataPtr = 0x787225f28796
0x0000787225f2879e  Namespace        *   TypeNamespace            = 0x0000000000000000          offset = 0x8 : dataPtr = 0x787225f2879e
0x0000787225f287a6  byte             *   TypeNamespaceName        = 0x000060c889f4b7b3          offset = 0x10 : dataPtr = 0x787225f287a6
        TypeNamespaceName = 'Word'
0x0000787225f287ae  byte             *   CodeStart                = 0x000078722b8542e6          offset = 0x18 : dataPtr = 0x787225f287ae
union
0x0000787225f287b6  byte             *   WD_Coding                = 0x000078722b8542e1          offset = 0x20 : dataPtr = 0x787225f287b6
0x0000787225f287b6  byte             *   WD_LogicCodingAfter      = 0x000078722b8542e1          offset = 0x20 : dataPtr = 0x787225f287b6

0x0000787225f287be  byte             *   Filename                 = 0x000078722b5ef778          offset = 0x28 : dataPtr = 0x787225f287be
        Filename = 'namespaces/compiler/c_syntax.csl'
0x0000787225f287c6  int64                LineNumber               = 0x00000000000001c3          offset = 0x30 : dataPtr = 0x787225f287c6
0x0000787225f287ce  int64                TokenStart_LineIndex     = 0x000000000000000a          offset = 0x38 : dataPtr = 0x787225f287ce
0x0000787225f287d6  int64                NumberOfNonRegisterArgs  = 0x0000000000000001          offset = 0x40 : dataPtr = 0x787225f287d6
0x0000787225f287de  int64                NumberOfNonRegisterLocals = 0x0000000000000002         offset = 0x48 : dataPtr = 0x787225f287de
0x0000787225f287e6  int64                NumberOfVariables        = 0x0000000000000003          offset = 0x50 : dataPtr = 0x787225f287e6
0x0000787225f287ee  byte             *   ObjectCode               = 0x0000000000000000          offset = 0x58 : dataPtr = 0x787225f287ee
0x0000787225f287f6  byte             *   StackPushRegisterCode    = 0x0000000000000000          offset = 0x60 : dataPtr = 0x787225f287f6
0x0000787225f287fe  Word             *   AliasOf                  = 0x0000000000000000          offset = 0x68 : dataPtr = 0x787225f287fe
0x0000787225f28806  Word             *   OriginalWord             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x787225f28806
0x0000787225f2880e  int64                Offset                   = 0x0000000000000000          offset = 0x78 : dataPtr = 0x787225f2880e
0x0000787225f28816  uint8                RegToUse                 = '' : 0x00           offset = 0x80 : dataPtr = 0x787225f28816
0x0000787225f28817  uint8                Opt_Rm                   = '' : 0x00           offset = 0x81 : dataPtr = 0x787225f28817
0x0000787225f28818  uint8                Opt_Reg                  = '' : 0x00           offset = 0x82 : dataPtr = 0x787225f28818
0x0000787225f28819  uint8                SrcReg                   = '' : 0x00           offset = 0x83 : dataPtr = 0x787225f28819
0x0000787225f2881a  uint8                DstReg                   = '' : 0x00           offset = 0x84 : dataPtr = 0x787225f2881a
0x0000787225f2881b  uint8                RegFlags                 = '' : 0x00           offset = 0x85 : dataPtr = 0x787225f2881b
0x0000787225f2881c  uint8                OpInsnGroup              = '' : 0x00           offset = 0x86 : dataPtr = 0x787225f2881c
0x0000787225f2881d  uint8                OpInsnCode               = '' : 0x00           offset = 0x87 : dataPtr = 0x787225f2881d
0x0000787225f2881e  byte                 TypeSignature            = 'O' : 0x4f          offset = 0x88 : dataPtr = 0x787225f2881e
union
0x0000787225f2882e  dllist           *   LocalNamespaces          = 0x0000000000000000          offset = 0x98 : dataPtr = 0x787225f2882e

                  dllist : Location : size = 24 : at 0000787225f2882e

                 _dllist : l_List : size = 16 : at 0000787225f2882e
_node
union
0x0000787225f2882e  _node            *   n_After                  = 0x0000000000000000          offset = 0x0 : dataPtr = 0x787225f2882e
0x0000787225f2882e  _node            *   n_Head                   = 0x0000000000000000          offset = 0x0 : dataPtr = 0x787225f2882e

union
0x0000787225f28836  _node            *   n_Before                 = 0x000078722b606cae          offset = 0x8 : dataPtr = 0x787225f28836
0x0000787225f28836  _node            *   n_Tail                   = 0x000078722b606cae          offset = 0x8 : dataPtr = 0x787225f28836


                 _dllist : node : size = 16 : at 0000787225f2883e
_node
union
0x0000787225f2883e  _node            *   n_After                  = 0x00007872296a9de0          offset = 0x0 : dataPtr = 0x787225f2883e
0x0000787225f2883e  _node            *   n_Head                   = 0x00007872296a9de0          offset = 0x0 : dataPtr = 0x787225f2883e

union
0x0000787225f28846  _node            *   n_Before                 = 0x0000000000000000          offset = 0x8 : dataPtr = 0x787225f28846
0x0000787225f28846  _node            *   n_Tail                   = 0x0000000000000000          offset = 0x8 : dataPtr = 0x787225f28846

0x0000787225f2883e  _dllist          *   l_CurrentNode            = 0x00007872296a9de0          offset = 0x10 : dataPtr = 0x787225f2883e
0x0000787225f2882e  dllist           *   OurLocation              = 0x0000000000000000          offset = 0x98 : dataPtr = 0x787225f2882e
0x0000787225f2882e  Word             *   CompiledAsPartOf         = 0x0000000000000000          offset = 0x98 : dataPtr = 0x787225f2882e

union
0x0000787225f28836  int64            *   WD_ArrayDimensions       = 0x000078722b606cae          offset = 0xa0 : dataPtr = 0x787225f28836
0x0000787225f28836  byte             *   WD_OriginalCodeText      = 0x000078722b606cae          offset = 0xa0 : dataPtr = 0x787225f28836
        WD_OriginalCodeText = 'void ctti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    } '

0x0000787225f2883e  Stack            *   WD_NamespaceStack        = 0x00007872296a9de0          offset = 0xa8 : dataPtr = 0x787225f2883e
union
0x0000787225f28846  ListObject       *   LambdaBody               = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x787225f28846
0x0000787225f28846  int64                AccumulatedOffset        = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x787225f28846

union
0x0000787225f2884e  ListObject       *   LambdaArgs               = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x787225f2884e
0x0000787225f2884e  int64                Index                    = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x787225f2884e
0x0000787225f2884e  int64                WD_ArrayNumberOfDimensions = 0x0000000000000000                offset = 0xb8 : dataPtr = 0x787225f2884e

0x0000787225f28856  dllist           *   SourceCodeWordList       = 0x00007872296a82c0          offset = 0xc0 : dataPtr = 0x787225f28856
0x0000787225f2885e  int64                SourceCodeMemSpaceRandMarker = 0x0000000000000000              offset = 0xc8 : dataPtr = 0x787225f2885e
0x0000787225f28866  dllist           *   DebugWordList            = 0x0000000000000000          offset = 0xd0 : dataPtr = 0x787225f28866
0x0000787225f2886e  int64                StartCharRlIndex         = 0x0000000000000014          offset = 0xd8 : dataPtr = 0x787225f2886e
0x0000787225f28876  int64                SC_WordIndex             = 0x0000000000000015          offset = 0xe0 : dataPtr = 0x787225f28876
0x0000787225f2887e  Identifier       *   CSLWord                  = 0x0000000000000000          offset = 0xe8 : dataPtr = 0x787225f2887e
0x0000787225f28886  Identifier       *   BaseObject               = 0x0000000000000000          offset = 0xf0 : dataPtr = 0x787225f28886
DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Experimental3.byteTest <:> structure : size = 0byteTest alias for _byteTest, immediate
SourceCode for Experimental3._byteTest :> 
typedef struct _byteTest { byte a8_123 ; int64 a64_123 ; byte b8_123 ; byte c8_123 ; union { int64 u64_123 ; int32 u32_123 ; int8 u8_123 ; } ; int32 a32_123 ; byte d8_123 ; int16 a16_123 ; } byteTest, abyteTest ; 
Source code file location of byteTest : "namespaces/compiler/c_syntax.csl" : 493.2 :: we are now at : namespaces/compiler/c_syntax.csl : 495.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b05b2e4 -- code size = 34 bytes
 -----------------------------
Word :: Experimental3.byteTest : definition = 0x000078722b05b2e4 : disassembly at namespaces/compiler/c_syntax.csl : 495.13 :
0x78722b05b2e4    48bfb624f32572780000    mov rdi, 0x787225f324b6                                
0x78722b05b2ee    49bbd008ed89c8600000    mov r11, 0x60c889ed08d0                                
0x78722b05b2f8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b05b302    49ffd2                  call r10                      < C compiler code >        
0x78722b05b305    c3                      ret                                                    
Word_Disassemble : word - 'byteTest' :: codeSize = 34
Word : 0x0000787225f33ade :: Compiled at : 0x000078722b05b2e4
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 495.13 <::
 
bt.size = 26
DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
C_Syntax.bttt <:> csl compiled word
SourceCode for C_Syntax.bttt :> 
void bttt ( byteTest * xbt | btt byte bbtt) { oPrintf ( "\nbtt" ) ; dump ( &xbt, xbt.size ) ; xbt.a8_123 = 'a' ; bbtt = xbt.a8_123 ; oPrintf ( "\nbtt = %c", bbtt ) ; xbt.a64_123 = 0x123456789abcdef ; xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ; xbt.a32_123 = 0x12345678 ; xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ; xbt.d8_123 = 'd' ; oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ; oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ; oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ; oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ; oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ; oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ; oPrintf ( "\nbtt = %lx", btt ) ; dump ( &xbt, xbt.size ) ; hp ( &xbt.a8_123 ) ; } 
Source code file location of bttt : "namespaces/compiler/c_syntax.csl" : 499.5 :: we are now at : namespaces/compiler/c_syntax.csl : 525.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8544c0 -- code size = 903 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.bttt : definition = 0x000078722b8544c0 : disassembly at namespaces/compiler/c_syntax.csl : 525.9 :
0x78722b8544c0    4d897e08                mov [r14+0x8], r15                                     
0x78722b8544c4    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8544c8    4981c618000000          add r14, 0x18                                          
 .. bt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;       .. 
0x78722b8544cf    48b81c43022672780000    mov rax, 0x78722602431c                                
0x78722b8544d9    488bf8                  mov rdi, rax                                           
 .. teTest * xbt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_1 .. 
0x78722b8544dc    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b8544e6    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8544f0    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 ..     oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c",  .. 
0x78722b8544f3    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8544f7    4881c000000000          add rax, 0x0                                           
0x78722b8544fe    4983c608                add r14, 0x8                                           
0x78722b854502    498906                  mov [r14], rax                                         
 .. Printf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt  .. 
0x78722b854505    48b82e27f32572780000    mov rax, 0x787225f3272e                                
0x78722b85450f    488b00                  mov rax, [rax]                                         
0x78722b854512    4983c608                add r14, 0x8                                           
0x78722b854516    498906                  mov [r14], rax                                         
 .. tt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt .. 
0x78722b854519    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b854523    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85452d    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123  .. 
0x78722b854530    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854534    4881c000000000          add rax, 0x0                                           
0x78722b85453b    b161                    mov cl, 0x61                                           
 .. &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x1234567 .. 
0x78722b85453d    488908                  mov [rax], rcx                                         
 ..        xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt. .. 
0x78722b854540    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854544    4881c000000000          add rax, 0x0                                           
0x78722b85454b    488b00                  mov rax, [rax]                                         
 .. e ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;    .. 
0x78722b85454e    49894710                mov [r15+0x10], rax                                    
 ..    bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 =  .. 
0x78722b854552    48b8c146022672780000    mov rax, 0x7872260246c1                                
0x78722b85455c    488bf8                  mov rdi, rax                                           
 .. a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_ .. 
0x78722b85455f    498b4710                mov rax, [r15+0x10]                                    
0x78722b854563    488bf0                  mov rsi, rax                                           
 .. = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt .. 
0x78722b854566    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b854570    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85457a    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
0x78722b85457d    498b47f8                mov rax, [r15-0x8]                                     
 .. ntf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;     .. 
0x78722b854581    4881c001000000          add rax, 0x1                                           
0x78722b854588    48b9efcdab8967452301    mov rcx, 0x123456789abcdef                              
 .. nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a3 .. 
0x78722b854592    488908                  mov [rax], rcx                                         
0x78722b854595    498b47f8                mov rax, [r15-0x8]                                     
 .. 64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32 .. 
0x78722b854599    4881c009000000          add rax, 0x9                                           
0x78722b8545a0    b162                    mov cl, 0x62                                           
 .. = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 =  .. 
0x78722b8545a2    488908                  mov [rax], rcx                                         
 .. 56789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x123456 .. 
0x78722b8545a5    498b47f8                mov rax, [r15-0x8]                                     
 .. 9abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, b .. 
0x78722b8545a9    4881c00a000000          add rax, 0xa                                           
0x78722b8545b0    b163                    mov cl, 0x63                                           
 ..  ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0x .. 
0x78722b8545b2    488908                  mov [rax], rcx                                         
 .. xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba098 .. 
0x78722b8545b5    498b47f8                mov rax, [r15-0x8]                                     
 .. b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654 .. 
0x78722b8545b9    4881c018000000          add rax, 0x18                                          
0x78722b8545c0    66b93412                mov cx, 0x1234                                         
 ..  'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;    .. 
0x78722b8545c4    488908                  mov [rax], rcx                                         
0x78722b8545c7    498b47f8                mov rax, [r15-0x8]                                     
 .. 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ; .. 
0x78722b8545cb    4881c013000000          add rax, 0x13                                          
0x78722b8545d2    b978563412              mov ecx, 0x12345678                                    
 .. t.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPr .. 
0x78722b8545d7    488908                  mov [rax], rcx                                         
 ..  ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_1 .. 
0x78722b8545da    498b47f8                mov rax, [r15-0x8]                                     
 ..     xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = .. 
0x78722b8545de    4881c00b000000          add rax, 0xb                                           
0x78722b8545e5    b967452301              mov ecx, 0x1234567                                     
 .. a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", .. 
0x78722b8545ea    488908                  mov [rax], rcx                                         
 .. 678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;  .. 
0x78722b8545ed    49ba2143658709badc0e    mov r10, 0xedcba0987654321                              
 .. 2345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123  .. 
0x78722b8545f7    4d895708                mov [r15+0x8], r10                                     
 .. 234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_1 .. 
0x78722b8545fb    498b47f8                mov rax, [r15-0x8]                                     
 .. 67, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = .. 
0x78722b8545ff    4881c017000000          add rax, 0x17                                          
0x78722b854606    b164                    mov cl, 0x64                                           
 ..  = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx  .. 
0x78722b854608    488908                  mov [rax], rcx                                         
 ..      xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;     .. 
0x78722b85460b    48b84b55022672780000    mov rax, 0x78722602554b                                
0x78722b854615    488bf8                  mov rdi, rax                                           
 ..     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_12 .. 
0x78722b854618    498b47f8                mov rax, [r15-0x8]                                     
 .. oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 =  .. 
0x78722b85461c    4881c018000000          add rax, 0x18                                          
0x78722b854623    488b00                  mov rax, [rax]                                         
0x78722b854626    488bf0                  mov rsi, rax                                           
 .. 87654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_1 .. 
0x78722b854629    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b854633    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85463d    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;    .. 
0x78722b854640    48b85f55022672780000    mov rax, 0x78722602555f                                
0x78722b85464a    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_12 .. 
0x78722b85464d    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 =  .. 
0x78722b854651    4881c013000000          add rax, 0x13                                          
0x78722b854658    488b00                  mov rax, [rax]                                         
0x78722b85465b    488bf0                  mov rsi, rax                                           
 .. 16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_ .. 
0x78722b85465e    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b854668    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b854672    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. %lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;    .. 
0x78722b854675    48b87455022672780000    mov rax, 0x787226025574                                
0x78722b85467f    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 .. 
0x78722b854682    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = % .. 
0x78722b854686    4881c001000000          add rax, 0x1                                           
0x78722b85468d    488b00                  mov rax, [rax]                                         
0x78722b854690    488bf0                  mov rsi, rax                                           
 .. 2_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_ .. 
0x78722b854693    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b85469d    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8546a7    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. %lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oP .. 
0x78722b8546aa    48b88955022672780000    mov rax, 0x787226025589                                
0x78722b8546b4    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c .. 
0x78722b8546b7    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ",  .. 
0x78722b8546bb    4881c00b000000          add rax, 0xb                                           
0x78722b8546c2    488b00                  mov rax, [rax]                                         
0x78722b8546c5    488bf0                  mov rsi, rax                                           
 .. 4_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) .. 
0x78722b8546c8    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b8546d2    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8546dc    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. %lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf .. 
0x78722b8546df    48b89e55022672780000    mov rax, 0x78722602559e                                
0x78722b8546e9    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c  .. 
0x78722b8546ec    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8546f0    4881c000000000          add rax, 0x0                                           
0x78722b8546f7    488b00                  mov rax, [rax]                                         
0x78722b8546fa    488bf0                  mov rsi, rax                                           
 .. 2_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;    .. 
0x78722b8546fd    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b854707    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b854711    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf .. 
0x78722b854714    48b8af55022672780000    mov rax, 0x7872260255af                                
0x78722b85471e    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c  .. 
0x78722b854721    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", x .. 
0x78722b854725    4881c009000000          add rax, 0x9                                           
0x78722b85472c    488b00                  mov rax, [rax]                                         
0x78722b85472f    488bf0                  mov rsi, rax                                           
 .. bt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;    .. 
0x78722b854732    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b85473c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b854746    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf .. 
0x78722b854749    48b8c055022672780000    mov rax, 0x7872260255c0                                
0x78722b854753    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt .. 
0x78722b854756    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ; .. 
0x78722b85475a    4881c00a000000          add rax, 0xa                                           
0x78722b854761    488b00                  mov rax, [rax]                                         
0x78722b854764    488bf0                  mov rsi, rax                                           
 .. bt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;    .. 
0x78722b854767    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b854771    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85477b    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.siz .. 
0x78722b85477e    48b8d155022672780000    mov rax, 0x7872260255d1                                
0x78722b854788    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt. .. 
0x78722b85478b    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_1 .. 
0x78722b85478f    4881c017000000          add rax, 0x17                                          
0x78722b854796    488b00                  mov rax, [rax]                                         
0x78722b854799    488bf0                  mov rsi, rax                                           
 .. bt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xb .. 
0x78722b85479c    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b8547a6    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8547b0    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b8547b3    48b8e255022672780000    mov rax, 0x7872260255e2                                
0x78722b8547bd    488bf8                  mov rdi, rax                                           
 .. 123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b8547c0    498b4708                mov rax, [r15+0x8]                                     
0x78722b8547c4    488bf0                  mov rsi, rax                                           
 .. bt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b8547c7    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b8547d1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8547db    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b8547de    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8547e2    4881c000000000          add rax, 0x0                                           
0x78722b8547e9    4983c608                add r14, 0x8                                           
0x78722b8547ed    498906                  mov [r14], rax                                         
 .. btt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b8547f0    48b82e27f32572780000    mov rax, 0x787225f3272e                                
0x78722b8547fa    488b00                  mov rax, [rax]                                         
0x78722b8547fd    4983c608                add r14, 0x8                                           
0x78722b854801    498906                  mov [r14], rax                                         
 .. oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b854804    49bb2028f289c8600000    mov r11, 0x60c889f22820                                
0x78722b85480e    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b854818    49ffd2                  call r10                      < Debug.dump : 0x000060c889f22820 >
 ..  dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b85481b    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85481f    4881c000000000          add rax, 0x0                                           
0x78722b854826    4983c608                add r14, 0x8                                           
0x78722b85482a    498906                  mov [r14], rax                                         
0x78722b85482d    49ba2805842b72780000    mov r10, 0x78722b840528                                
0x78722b854837    49ffd2                  call r10                      < Int.hp : 0x000078722b840528 >
0x78722b85483a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85483e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b854842    4983ee08                sub r14, 0x8                                           
 .. bt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x78722b854846    c3                      ret                                                    
Word_Disassemble : word - 'bttt' :: codeSize = 903
Word : 0x0000787225f34096 :: Compiled at : 0x000078722b8544c0
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 525.9 <::

btt
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x0000787226200cea : Number = 26 :: (little endian dump)
0x0000787226200cea :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x0000787226200cfa :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

btt = a
bt.a16_123 = 0x12345 
bt.a32_123 = 0x123456412345678 
bt.a64_123 = 0x123456789abcdef 
bt.u32_123 = 0x1234567 
bt.a8_123 = a 
bt.b8_123 = b 
bt.c8_123 = c 
bt.c8_123 = d 
btt = edcba0987654321
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x0000787226200cea : Number = 26 :: (little endian dump)
0x0000787226200cea :  61 ef cd ab 89 67 45 23  01 62 63 67 45 23 01 00  a....gE# .bcgE#.. 
0x0000787226200cfa :  00 00 00 78 56 34 12 64  45 23 01 00 00 00 00 01  ...xV4.d E#...... 
 0x0000787226200cea
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 527.40 : data = '787225f413f6' : typedef = 'byteTest'
               _byteTest :: size = 26 :: at : 0x0000787225f413f6
_byteTest
0x0000787225f413f6  byte                 a8_123                   = '�' : 0xffffffae            offset = 0x0 : dataPtr = 0x787225f413f6
0x0000787225f413f7  int64                a64_123                  = 0x7e0000787225f33e          offset = 0x1 : dataPtr = 0x787225f413f7
0x0000787225f413ff  byte                 b8_123                   = '&' : 0x26          offset = 0x9 : dataPtr = 0x787225f413ff
0x0000787225f41400  byte                 c8_123                   = '�' : 0xfffffff3            offset = 0xa : dataPtr = 0x787225f41400
union
0x0000787225f41401  int64                u64_123                  = 0x0000000000787225          offset = 0xb : dataPtr = 0x787225f41401
0x0000787225f41401  int32                u32_123                  = 0x00787225          offset = 0xb : dataPtr = 0x787225f41401
0x0000787225f41401  int8                 u8_123                   = '%' : 0x25          offset = 0xb : dataPtr = 0x787225f41401

0x0000787225f41409  int32                a32_123                  = 0x0001b000          offset = 0x13 : dataPtr = 0x787225f41409
0x0000787225f4140d  byte                 d8_123                   = '' : 0x00           offset = 0x17 : dataPtr = 0x787225f4140d
0x0000787225f4140e  int16                a16_123                  = 0x0000              offset = 0x18 : dataPtr = 0x787225f4140e
 0x0000000012345678
 0x0000000001234567
System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 536.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 984 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3744 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 232 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12450 : WordCreateCount = 13886 : WordsAdded = 5164 : FindWordCount = 100 : FindWordMaxCount = 161
RecycledWordCount : 503
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 2 : Precision = 16 
Word size =  184 
WordData size =  248 
DLNode size =  88 
dobject size =  32 
AttributeInfo size =  56
 =============================
Experimental.Word <:> structure : size = 0Word alias for _Identifier, immediate
SourceCode for Experimental._Identifier :> 
typedef struct _Identifier { DLNode S_Node ; int64 CodeSize ; byte * S_Name ; uint64 State ; dllist * S_SymbolList ; uint64 S_DObjectValue ; uint64 * S_PtrToValue ; block Definition ; union { uint64 S_Value ; byte * S_BytePtr ; byte * S_Object ; struct _Identifier * S_ValueWord ; } ; union { struct _Identifier * S_ContainingNamespace ; struct _Identifier * S_ContainingList ; struct _Identifier * S_Prototype ; } ;
Source code file location of Word : "namespaces/types.csl" : 304.18 :: we are now at : namespaces/compiler/c_syntax.csl : 542.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b04fa8c -- code size = 34 bytes
 -----------------------------
Word :: Experimental.Word : definition = 0x000078722b04fa8c : disassembly at namespaces/compiler/c_syntax.csl : 542.9 :
0x78722b04fa8c    48bf2680162672780000    mov rdi, 0x787226168026                                
0x78722b04fa96    49bbd008ed89c8600000    mov r11, 0x60c889ed08d0                                
0x78722b04faa0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b04faaa    49ffd2                  call r10                      < C compiler code >        
0x78722b04faad    c3                      ret                                                    
Word_Disassemble : word - 'Word' :: codeSize = 34
Word : 0x000078722616bd8e :: Compiled at : 0x000078722b04fa8c
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 542.9 <::

_ClassTypedef : at namespaces/compiler/c_syntax.csl : 555.17 : token = struct : cloneFlag = 0
DataStack at : namespaces/compiler/c_syntax.csl : 608.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 608.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 node -p " 1+1007 " > ./node.txt

 =============================
Buffer2048.node-p <:> csl compiled word
SourceCode for Buffer2048.node-p :> 
: node-p ( txt, poftxt, buffer ) sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt ) buffer @ ash ; 
Source code file location of node-p : "namespaces/compiler/c_syntax.csl" : 610.2 :: we are now at : namespaces/compiler/c_syntax.csl : 616.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854930 -- code size = 114 bytes
TypeSignature : 
 -----------------------------
Word :: Buffer2048.node-p : definition = 0x000078722b854930 : disassembly at namespaces/compiler/c_syntax.csl : 616.11 :
0x78722b854930    4d897e08                mov [r14+0x8], r15                                     
0x78722b854934    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854938    4981c608000000          add r14, 0x8                                           
 ..  txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x78722b85493f    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854943    488bf8                  mov rdi, rax                                           
0x78722b854946    48b8fdef022672780000    mov rax, 0x78722602effd       < string : 'node -p " %s " > %s' >
0x78722b854950    488bf0                  mov rsi, rax                                           
 .. tf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x78722b854953    498b47e8                mov rax, [r15-0x18]                                    
0x78722b854957    488bd0                  mov rdx, rax                                           
 .. buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x78722b85495a    498b47f0                mov rax, [r15-0x10]                                    
0x78722b85495e    488bc8                  mov rcx, rax                                           
0x78722b854961    b804000000              mov eax, 0x4                                           
 .. : node-p ( txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;  .. 
0x78722b854966    49bb403eeb2b72780000    mov r11, 0x78722beb3e40                                
0x78722b854970    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85497a    49ffd2                  call r10                      < C.sprintf : 0x000078722beb3e40 >
 .. -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x78722b85497d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854981    4983c608                add r14, 0x8                                           
0x78722b854985    498906                  mov [r14], rax                                         
 .. \" > %s", txt, poftxt )      buffer @ ash    ; 
0x78722b854988    49babe48852b72780000    mov r10, 0x78722b8548be                                
0x78722b854992    49ffd2                  call r10                      < Buffer2048.ash : 0x000078722b8548be >
0x78722b854995    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854999    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85499d    4983ee18                sub r14, 0x18                                          
 .. ", txt, poftxt )      buffer @ ash    ; 
0x78722b8549a1    c3                      ret                                                    
Word_Disassemble : word - 'node-p' :: codeSize = 114
Word : 0x0000787225f4485e :: Compiled at : 0x000078722b854930
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 616.11 <::
1008

including namespaces/test/dev0.csl at namespaces/test/initTest.csl : 86.41 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 17.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
 =============================
Experimental.tx <:> csl compiled word
SourceCode for Experimental.tx :> 
: tx 4 2 / 5 + ; 
Source code file location of tx : "namespaces/test/dev0.csl" : 24.2 :: we are now at : namespaces/test/dev0.csl : 25.7
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8549e0 -- code size = 21 bytes
TypeSignature : 
 -----------------------------
Word :: Experimental.tx : definition = 0x000078722b8549e0 : disassembly at namespaces/test/dev0.csl : 25.7 :
 ..                                  : tx 4 2 / 5 + ;  .. 
0x78722b8549e0    b802000000              mov eax, 0x2                                           
 ..                            : tx 4 2 / 5 + ;  .. 
0x78722b8549e5    b905000000              mov ecx, 0x5                                           
 ..                          : tx 4 2 / 5 + ;  .. 
0x78722b8549ea    4803c1                  add rax, rcx                                           
0x78722b8549ed    4983c608                add r14, 0x8                                           
0x78722b8549f1    498906                  mov [r14], rax                                         
 ..                        : tx 4 2 / 5 + ;  .. 
0x78722b8549f4    c3                      ret                                                    
Word_Disassemble : word - 'tx' :: codeSize = 21
Word : 0x0000787225f4643e :: Compiled at : 0x000078722b8549e0
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 25.7 <::

 =============================
Logic.tx1 <:> csl compiled word
SourceCode for Logic.tx1 :> 
: tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ; 
Source code file location of tx1 : "namespaces/test/dev0.csl" : 28.2 :: we are now at : namespaces/test/dev0.csl : 29.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854a09 -- code size = 90 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.tx1 : definition = 0x000078722b854a09 : disassembly at namespaces/test/dev0.csl : 29.8 :
 ..                                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a09    48c7c000000000          mov rax, 0x0                                           
 ..                               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a10    4883f800                cmp rax, 0x0                                           
0x78722b854a14    0f95c0                  setnz al                                               
0x78722b854a17    480fb6c0                movzx rax, al                                          
 ..                             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a1b    4983c608                add r14, 0x8                                           
0x78722b854a1f    498906                  mov [r14], rax                                         
 ..                           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a22    b804000000              mov eax, 0x4                                           
 ..                     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a27    b902000000              mov ecx, 0x2                                           
 ..                   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a2c    48c7c200000000          mov rdx, 0x0                                           
0x78722b854a33    48f7f9                  idiv rcx                                               
 ..                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a36    b903000000              mov ecx, 0x3                                           
 ..               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a3b    4823c1                  and rax, rcx                                           
 ..             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a3e    b904000000              mov ecx, 0x4                                           
 ..           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a43    480bc1                  or rax, rcx                                            
 ..         : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a46    b901000000              mov ecx, 0x1                                           
0x78722b854a4b    4803c1                  add rax, rcx                                           
 ..       : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a4e    488bc8                  mov rcx, rax                                           
0x78722b854a51    498b06                  mov rax, [r14]                                         
0x78722b854a54    4983ee08                sub r14, 0x8                                           
 ..     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a58    4803c1                  add rax, rcx                                           
0x78722b854a5b    4983c608                add r14, 0x8                                           
0x78722b854a5f    498906                  mov [r14], rax                                         
 ..   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x78722b854a62    c3                      ret                                                    
Word_Disassemble : word - 'tx1' :: codeSize = 90
Word : 0x0000787225f4700e :: Compiled at : 0x000078722b854a09
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 29.8 <::

 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :> 
int factoriali ( REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n-- ; res = res * (n--) ; } return res; } 
Source code file location of factoriali : "namespaces/test/dev0.csl" : 37.15 :: we are now at : namespaces/test/dev0.csl : 54.27
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854a77 -- code size = 42 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x000078722b854a77 : disassembly at namespaces/test/dev0.csl : 54.27 :
0x78722b854a77    498b3e                  mov rdi, [r14]                                         
 .. toriali ( REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     re .. 
0x78722b854a7a    be01000000              mov esi, 0x1                                           
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x78722b854a7f    4883ff02                cmp rdi, 0x2                                           
0x78722b854a83    7c18                    jl 0x2b854a9d                 < C_Syntax.factoriali+38 >
0x78722b854a85    0f1f4000                nop [rax]                                              
 .. le ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x78722b854a89    480faff7                imul rsi, rdi                                          
 .. ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x78722b854a8d    48ffcf                  dec rdi                                                
 ..  res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x78722b854a90    480faff7                imul rsi, rdi                                          
 ..  = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x78722b854a94    48ffcf                  dec rdi                                                
0x78722b854a97    4883ff02                cmp rdi, 0x2                                           
0x78722b854a9b    7dec                    jge 0x2b854a89                < C_Syntax.factoriali+18 >
 ..  res = res * (n--) ;     }     return res; }  .. 
0x78722b854a9d    498936                  mov [r14], rsi                                         
 .. = res * (n--) ;     }     return res; }  .. 
0x78722b854aa0    c3                      ret                                                    
Word_Disassemble : word - 'factoriali' :: codeSize = 42
Word : 0x0000787225f48cbe :: Compiled at : 0x000078722b854a77
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 54.27 <::
 5040 5040
 =============================
C.fac <:> csl compiled word
SourceCode for C.fac :> 
: fac ( n | rec ) rec 1 = { n @ 1 > } { n @ rec @ * rec store n -- } while return rec @ ; 
Source code file location of fac : "namespaces/test/dev0.csl" : 68.2 :: we are now at : namespaces/test/dev0.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854add -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.fac : definition = 0x000078722b854add : disassembly at namespaces/test/dev0.csl : 73.17 :
0x78722b854add    4d897e08                mov [r14+0x8], r15                                     
0x78722b854ae1    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854ae5    4981c610000000          add r14, 0x10                                          
 ..         : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  .. 
0x78722b854aec    49c7470801000000        mov qword [r15+0x8], 0x1                               
   : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  .. 
0x78722b854af4    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854af9    7e1f                    jle 0x2b854b1a                < C.fac+61 >
0x78722b854afb    0f1f4000                nop [rax]                                              
 .. rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854aff    498b47f8                mov rax, [r15-0x8]                                     
 .. )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854b03    498b4f08                mov rcx, [r15+0x8]                                     
 ..  rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854b07    480fafc1                imul rax, rcx                                          
 .. ec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854b0b    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854b0f    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854b13    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b854b18    7fe5                    jg 0x2b854aff                 < C.fac+34 >
 .. @ rec @ * rec store n -- } while      return rec @ ; 
0x78722b854b1a    498b4708                mov rax, [r15+0x8]                                     
0x78722b854b1e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854b22    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * rec store n -- } while      return rec @ ; 
0x78722b854b26    498906                  mov [r14], rax                                         
 ..  store n -- } while      return rec @ ; 
0x78722b854b29    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x0000787225f503be :: Compiled at : 0x000078722b854add
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 73.17 <::
 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
Source code file location of factorial : "namespaces/test/dev0.csl" : 76.2 :: we are now at : namespaces/test/dev0.csl : 77.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854b3e -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x000078722b854b3e : disassembly at namespaces/test/dev0.csl : 77.14 :
 ..                           : factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;  .. 
0x78722b854b3e    498b3e                  mov rdi, [r14]                                         
 .. torial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x78722b854b41    be01000000              mov esi, 0x1                                           
 .. nt8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x78722b854b46    4883ff01                cmp rdi, 0x1                                           
 .. 8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x78722b854b4a    7e11                    jle 0x2b854b5d                < C.factorial+31 >
0x78722b854b4c    0f1f4000                nop [rax]                                              
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x78722b854b50    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x78722b854b54    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x78722b854b57    4883ff01                cmp rdi, 0x1                                           
0x78722b854b5b    7ff3                    jg 0x2b854b50                 < C.factorial+18 >
 .. @ n @ * rec store n -- } while return rec ; 
0x78722b854b5d    498936                  mov [r14], rsi                                         
 .. @ * rec store n -- } while return rec ; 
0x78722b854b60    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 35
Word : 0x0000787225f52e5e :: Compiled at : 0x000078722b854b3e
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 77.14 <::
 5040 factorial  : ok


 namespaces/test/dev0.csl 79.12 
starting Lisp
 stack is ...
DataStack at : namespaces/test/dev0.csl : 79.52 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005
 g23
 7
 7
 q1x0
 7
 h01
 7
 7
 average

 =============================
LispDefines.average <:> variableaverage <:> lambdaCalculus compiled word
SourceCode for LispDefines.average :> 
(define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
Source code file location of average : "namespaces/test/dev0.csl" : 92.48 :: we are now at : namespaces/test/dev0.csl : 93.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b854b66 -- code size = 57 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.average : definition = 0x000078722b854b66 : disassembly at namespaces/test/dev0.csl : 93.24 :
0x78722b854b66    4d897e08                mov [r14+0x8], r15                                     
0x78722b854b6a    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854b6e    4981c608000000          add r14, 0x8                                           
 ..   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x78722b854b75    498b47f0                mov rax, [r15-0x10]                                    
   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x78722b854b79    498b4ff8                mov rcx, [r15-0x8]                                     
 ..     (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x78722b854b7d    4803c1                  add rax, rcx                                           
 .. e average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
0x78722b854b80    b902000000              mov ecx, 0x2                                           
0x78722b854b85    48c7c200000000          mov rdx, 0x0                                           
0x78722b854b8c    48f7f9                  idiv rcx                                               
0x78722b854b8f    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854b93    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b854b97    4983ee08                sub r14, 0x8                                           
0x78722b854b9b    498906                  mov [r14], rax                                         
 ..         (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x78722b854b9e    c3                      ret                                                    
Word_Disassemble : word - 'average' :: codeSize = 57
Word : 0x000078722b74f638 :: Compiled at : 0x000078722b854b66
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 93.24 <::
 77
  : should show 77 7
 fib

 =============================
LispDefines.fib <:> variablefib <:> lambdaCalculus compiled word
SourceCode for LispDefines.fib :> 
(define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
Source code file location of fib : "namespaces/test/dev0.csl" : 97.76 :: we are now at : namespaces/test/dev0.csl : 98.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b854ba4 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fib : definition = 0x000078722b854ba4 : disassembly at namespaces/test/dev0.csl : 98.20 :
0x78722b854ba4    4d897e08                mov [r14+0x8], r15                                     
0x78722b854ba8    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854bac    4981c608000000          add r14, 0x8                                           
 ..   (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x78722b854bb3    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..     (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x78722b854bb8    7d14                    jge 0x2b854bce                < LispDefines.fib+42 >
0x78722b854bba    0f1f4000                nop [rax]                                              
 .. (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x78722b854bbe    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854bc2    4983c608                add r14, 0x8                                           
0x78722b854bc6    498906                  mov [r14], rax                                         
 (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x78722b854bc9    e945000000              jmp 0x78722b854c13            < LispDefines.fib+111 >
 .. bda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854bce    498b47f8                mov rax, [r15-0x8]                                     
 .. a (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854bd2    b901000000              mov ecx, 0x1                                           
 .. ambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854bd7    482bc1                  sub rax, rcx                                           
0x78722b854bda    4983c608                add r14, 0x8                                           
0x78722b854bde    498906                  mov [r14], rax                                         
 .. ib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854be1    e8beffffff              call 0x78722b854ba4           < LispDefines.fib : 0x000078722b854ba4 >
 .. se (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854be6    498b47f8                mov rax, [r15-0x8]                                     
 ..  (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854bea    b902000000              mov ecx, 0x2                                           
 .. Else (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854bef    482bc1                  sub rax, rcx                                           
0x78722b854bf2    4983c608                add r14, 0x8                                           
0x78722b854bf6    498906                  mov [r14], rax                                         
 ..  ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x78722b854bf9    e8a6ffffff              call 0x78722b854ba4           < LispDefines.fib : 0x000078722b854ba4 >
0x78722b854bfe    498b0e                  mov rcx, [r14]                                         
0x78722b854c01    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854c05    4983ee10                sub r14, 0x10                                          
0x78722b854c09    4803c1                  add rax, rcx                                           
0x78722b854c0c    4983c608                add r14, 0x8                                           
0x78722b854c10    498906                  mov [r14], rax                                         
0x78722b854c13    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854c17    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b854c1b    498906                  mov [r14], rax                                         
 ..             (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x78722b854c1e    c3                      ret                                                    
Word_Disassemble : word - 'fib' :: codeSize = 123
Word : 0x000078722b756a68 :: Compiled at : 0x000078722b854ba4
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 98.20 <::
 6765
 fib2
 6765
 7
 7
 7
 g
 h
 g1
 g2
 7
 7
 j
 h
 k

 77
 777
 77
 77
 777
 
before fib
 =============================
Compiler._fib1 <:> csl compiled word
SourceCode for Compiler._fib1 :> 
: _fib1 ( n ) { n @ 2 < } { n @ } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
Source code file location of _fib1 : "namespaces/test/dev0.csl" : 128.2 :: we are now at : namespaces/test/dev0.csl : 129.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854d3f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Compiler._fib1 : definition = 0x000078722b854d3f : disassembly at namespaces/test/dev0.csl : 129.19 :
0x78722b854d3f    4d897e08                mov [r14+0x8], r15                                     
0x78722b854d43    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854d47    4981c608000000          add r14, 0x8                                           
 ..                       : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x78722b854d4e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..               : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x78722b854d53    7d14                    jge 0x2b854d69                < Compiler._fib1+42 >
0x78722b854d55    0f1f4000                nop [rax]                                              
 ..           : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x78722b854d59    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854d5d    4983c608                add r14, 0x8                                           
0x78722b854d61    498906                  mov [r14], rax                                         
 ..      : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x78722b854d64    e945000000              jmp 0x78722b854dae            < Compiler._fib1+111 >
 ..  : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x78722b854d69    498b47f8                mov rax, [r15-0x8]                                     
 : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x78722b854d6d    b901000000              mov ecx, 0x1                                           
 .. b1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854d72    482bc1                  sub rax, rcx                                           
0x78722b854d75    4983c608                add r14, 0x8                                           
0x78722b854d79    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854d7c    e8beffffff              call 0x78722b854d3f           < Compiler._fib1 : 0x000078722b854d3f >
 ..  { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854d81    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854d85    b902000000              mov ecx, 0x2                                           
 ..  2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854d8a    482bc1                  sub rax, rcx                                           
0x78722b854d8d    4983c608                add r14, 0x8                                           
0x78722b854d91    498906                  mov [r14], rax                                         
 ..  < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854d94    e8a6ffffff              call 0x78722b854d3f           < Compiler._fib1 : 0x000078722b854d3f >
0x78722b854d99    498b0e                  mov rcx, [r14]                                         
0x78722b854d9c    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854da0    4983ee10                sub r14, 0x10                                          
 ..  n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854da4    4803c1                  add rax, rcx                                           
0x78722b854da7    4983c608                add r14, 0x8                                           
0x78722b854dab    498906                  mov [r14], rax                                         
0x78722b854dae    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854db2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b854db6    498906                  mov [r14], rax                                         
 ..  @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x78722b854db9    c3                      ret                                                    
Word_Disassemble : word - '_fib1' :: codeSize = 123
Word : 0x0000787225f5caae :: Compiled at : 0x000078722b854d3f
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 129.19 <::
 6765
System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 132.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.Compiler fibbc

 =============================
LispDefines.fibbc <:> variablefibbc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibbc :> 
(define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
Source code file location of fibbc : "namespaces/test/dev0.csl" : 134.83 :: we are now at : namespaces/test/dev0.csl : 135.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b854dbf -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibbc : definition = 0x000078722b854dbf : disassembly at namespaces/test/dev0.csl : 135.22 :
0x78722b854dbf    4d897e08                mov [r14+0x8], r15                                     
0x78722b854dc3    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854dc7    4981c608000000          add r14, 0x8                                           
   (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x78722b854dce    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x78722b854dd3    7d14                    jge 0x2b854de9                < LispDefines.fibbc+42 >
0x78722b854dd5    0f1f4000                nop [rax]                                              
 (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x78722b854dd9    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854ddd    4983c608                add r14, 0x8                                           
0x78722b854de1    498906                  mov [r14], rax                                         
 .. e fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854de4    e945000000              jmp 0x78722b854e2e            < LispDefines.fibbc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854de9    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854ded    b901000000              mov ecx, 0x1                                           
 .. da ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854df2    482bc1                  sub rax, rcx                                           
0x78722b854df5    4983c608                add r14, 0x8                                           
0x78722b854df9    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854dfc    e8beffffff              call 0x78722b854dbf           < LispDefines.fibbc : 0x000078722b854dbf >
 .. < n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854e01    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854e05    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854e0a    482bc1                  sub rax, rcx                                           
0x78722b854e0d    4983c608                add r14, 0x8                                           
0x78722b854e11    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x78722b854e14    e8a6ffffff              call 0x78722b854dbf           < LispDefines.fibbc : 0x000078722b854dbf >
0x78722b854e19    498b0e                  mov rcx, [r14]                                         
0x78722b854e1c    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854e20    4983ee10                sub r14, 0x10                                          
0x78722b854e24    4803c1                  add rax, rcx                                           
0x78722b854e27    4983c608                add r14, 0x8                                           
0x78722b854e2b    498906                  mov [r14], rax                                         
0x78722b854e2e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854e32    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b854e36    498906                  mov [r14], rax                                         
 ..          (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x78722b854e39    c3                      ret                                                    
Word_Disassemble : word - 'fibbc' :: codeSize = 123
Word : 0x000078722b743330 :: Compiled at : 0x000078722b854dbf
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 135.22 <::
 6765
 fibcc

 =============================
LispDefines.fibcc <:> variablefibcc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibcc :> 
(define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
Source code file location of fibcc : "namespaces/test/dev0.csl" : 138.83 :: we are now at : namespaces/test/dev0.csl : 139.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x2b854e3f -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibcc : definition = 0x000078722b854e3f : disassembly at namespaces/test/dev0.csl : 139.22 :
0x78722b854e3f    4d897e08                mov [r14+0x8], r15                                     
0x78722b854e43    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b854e47    4981c608000000          add r14, 0x8                                           
   (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x78722b854e4e    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x78722b854e53    7d14                    jge 0x2b854e69                < LispDefines.fibcc+42 >
0x78722b854e55    0f1f4000                nop [rax]                                              
 (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x78722b854e59    498b47f8                mov rax, [r15-0x8]                                     
0x78722b854e5d    4983c608                add r14, 0x8                                           
0x78722b854e61    498906                  mov [r14], rax                                         
 .. e fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e64    e945000000              jmp 0x78722b854eae            < LispDefines.fibcc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e69    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e6d    b901000000              mov ecx, 0x1                                           
 .. da ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e72    482bc1                  sub rax, rcx                                           
0x78722b854e75    4983c608                add r14, 0x8                                           
0x78722b854e79    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e7c    e8beffffff              call 0x78722b854e3f           < LispDefines.fibcc : 0x000078722b854e3f >
 .. < n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e81    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e85    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e8a    482bc1                  sub rax, rcx                                           
0x78722b854e8d    4983c608                add r14, 0x8                                           
0x78722b854e91    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x78722b854e94    e8a6ffffff              call 0x78722b854e3f           < LispDefines.fibcc : 0x000078722b854e3f >
0x78722b854e99    498b0e                  mov rcx, [r14]                                         
0x78722b854e9c    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854ea0    4983ee10                sub r14, 0x10                                          
0x78722b854ea4    4803c1                  add rax, rcx                                           
0x78722b854ea7    4983c608                add r14, 0x8                                           
0x78722b854eab    498906                  mov [r14], rax                                         
0x78722b854eae    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b854eb2    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b854eb6    498906                  mov [r14], rax                                         
 ..          (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x78722b854eb9    c3                      ret                                                    
Word_Disassemble : word - 'fibcc' :: codeSize = 123
Word : 0x000078722b74bc80 :: Compiled at : 0x000078722b854e3f
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 139.22 <::
 6765
 
after fib

 namespaces/test/dev0.csl 142.12 
ending Lisp

DataStack at : namespaces/test/dev0.csl : 142.35 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev0.csl : 148.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854ece -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x000078722b854ece : disassembly at namespaces/test/dev0.csl : 148.19 :
 ..                               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ece    498b06                  mov rax, [r14]                                         
0x78722b854ed1    4983c608                add r14, 0x8                                           
0x78722b854ed5    498906                  mov [r14], rax                                         
0x78722b854ed8    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854edd    488bc8                  mov rcx, rax                                           
0x78722b854ee0    498b06                  mov rax, [r14]                                         
0x78722b854ee3    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ee7    483bc1                  cmp rax, rcx                                           
0x78722b854eea    0f8d05000000            jge 0x78722b854ef5            < C._fib2+39 >
0x78722b854ef0    e94c000000              jmp 0x78722b854f41            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ef5    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ef8    4983c608                add r14, 0x8                                           
0x78722b854efc    498906                  mov [r14], rax                                         
0x78722b854eff    498b06                  mov rax, [r14]                                         
0x78722b854f02    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f06    48ffc8                  dec rax                                                
0x78722b854f09    4983c608                add r14, 0x8                                           
0x78722b854f0d    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f10    e8b9ffffff              call 0x78722b854ece           < C._fib2 : 0x000078722b854ece >
 ..      : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f15    498b0e                  mov rcx, [r14]                                         
0x78722b854f18    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854f1c    49894ef8                mov [r14-0x8], rcx                                     
0x78722b854f20    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f23    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f27    e8a2ffffff              call 0x78722b854ece           < C._fib2 : 0x000078722b854ece >
0x78722b854f2c    498b0e                  mov rcx, [r14]                                         
0x78722b854f2f    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854f33    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x78722b854f37    4803c1                  add rax, rcx                                           
0x78722b854f3a    4983c608                add r14, 0x8                                           
0x78722b854f3e    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x78722b854f41    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x0000787225f6199e :: Compiled at : 0x000078722b854ece
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 148.19 <::

 6765 6765 6765
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :> 
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev0.csl : 168.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855042 -- code size = 172 bytes
TypeSignature : 
 -----------------------------
Word :: C.fibPTC? : definition = 0x000078722b855042 : disassembly at namespaces/test/dev0.csl : 168.12 :
0x78722b855042    4d897e08                mov [r14+0x8], r15                                     
0x78722b855046    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85504a    4981c620000000          add r14, 0x20                                          
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =       .. 
0x78722b855051    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn f .. 
0x78722b855059    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 .. 
0x78722b855061    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = .. 
0x78722b855069    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85506d    4883f800                cmp rax, 0x0                                           
0x78722b855071    746b                    jz 0x2b8550de                 < C.fibPTC?+156 >
0x78722b855073    0f1f4000                nop [rax]                                              
0x78722b855077    498d4710                lea rax, [r15+0x10]                                    
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85507b    498b4f18                mov rcx, [r15+0x18]                                    
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85507f    488908                  mov [rax], rcx                                         
0x78722b855082    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b855086    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85508a    488908                  mov [rax], rcx                                         
0x78722b85508d    498d4708                lea rax, [r15+0x8]                                     
0x78722b855091    4983c608                add r14, 0x8                                           
0x78722b855095    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b855098    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85509c    498b4f18                mov rcx, [r15+0x18]                                    
0x78722b8550a0    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550a3    488bc8                  mov rcx, rax                                           
0x78722b8550a6    498b06                  mov rax, [r14]                                         
0x78722b8550a9    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550ad    488908                  mov [rax], rcx                                         
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  .. 
0x78722b8550b0    498d47f8                lea rax, [r15-0x8]                                     
0x78722b8550b4    4983c608                add r14, 0x8                                           
0x78722b8550b8    498906                  mov [r14], rax                                         
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    .. 
0x78722b8550bb    498b47f8                mov rax, [r15-0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo .. 
0x78722b8550bf    b901000000              mov ecx, 0x1                                           
0x78722b8550c4    482bc1                  sub rax, rcx                                           
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  .. 
0x78722b8550c7    488bc8                  mov rcx, rax                                           
0x78722b8550ca    498b06                  mov rax, [r14]                                         
0x78722b8550cd    4983ee08                sub r14, 0x8                                           
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    .. 
0x78722b8550d1    488908                  mov [rax], rcx                                         
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b8550d4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8550d8    4883f800                cmp rax, 0x0                                           
0x78722b8550dc    7599                    jnz 0x2b855077                < C.fibPTC?+53 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550de    498b4708                mov rax, [r15+0x8]                                     
0x78722b8550e2    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8550e6    4d8b7e08                mov r15, [r14+0x8]                                     
 .. @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550ea    498906                  mov [r14], rax                                         
 ..  @ + =      }     for     return fn @ ;  .. 
0x78722b8550ed    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC?' :: codeSize = 172
Word : 0x0000787225f6867e :: Compiled at : 0x000078722b855042
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 168.12 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
infibPTC2? ( n ){ int fn, fn1, fn2 ; for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev0.csl" : 187.9 :: we are now at : namespaces/test/dev0.csl : 198.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855218 -- code size = 114 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b855218 : disassembly at namespaces/test/dev0.csl : 198.13 :
0x78722b855218    4d897e08                mov [r14+0x8], r15                                     
0x78722b85521c    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b855220    4981c620000000          add r14, 0x20                                          
 .. {     int fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x78722b855227    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b85522f    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..  fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b855237    49c7471801000000        mov qword [r15+0x18], 0x1                              
 ..      for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     ret .. 
0x78722b85523f    498b47f8                mov rax, [r15-0x8]                                     
0x78722b855243    4883f800                cmp rax, 0x0                                           
0x78722b855247    7431                    jz 0x2b85527a                 < C_Syntax.fibPTC2?+98 >
0x78722b855249    0f1f4000                nop [rax]                                              
 ..  ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b85524d    498b4718                mov rax, [r15+0x18]                                    
0x78722b855251    49894710                mov [r15+0x10], rax                                    
 ..             fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855255    498b4708                mov rax, [r15+0x8]                                     
0x78722b855259    49894718                mov [r15+0x18], rax                                    
 .. fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b85525d    498b4710                mov rax, [r15+0x10]                                    
 ..         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855261    498b4f18                mov rcx, [r15+0x18]                                    
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855265    4803c1                  add rax, rcx                                           
0x78722b855268    49894708                mov [r15+0x8], rax                                     
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b85526c    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855270    498b47f8                mov rax, [r15-0x8]                                     
0x78722b855274    4883f800                cmp rax, 0x0                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855278    75d3                    jnz 0x2b85524d                < C_Syntax.fibPTC2?+53 >
 .. ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b85527a    498b4708                mov rax, [r15+0x8]                                     
0x78722b85527e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b855282    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855286    498906                  mov [r14], rax                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b855289    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 114
Word : 0x0000787225f7352e :: Compiled at : 0x000078722b855218
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 198.13 <::
 6765
including namespaces/compiler/x64.csl at namespaces/test/initTest.csl : 86.41 ...

including namespaces/compiler/asmConstants.csl at namespaces/compiler/x64.csl : 92.47 ...

 =============================
Root.;; <:> csl compiled word, immediate
SourceCode for Root.;; :> 
: ;; '; find compileWord prefixable ; 
Source code file location of ;; : "namespaces/compiler/x64.csl" : 114.2 :: we are now at : namespaces/compiler/x64.csl : 114.55
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855496 -- code size = 37 bytes
 -----------------------------
Word :: Root.;; : definition = 0x000078722b855496 : disassembly at namespaces/compiler/x64.csl : 114.55 :
 ..                          : ;; '; find compileWord prefixable ;  .. 
0x78722b855496    49baf008842b72780000    mov r10, 0x78722b8408f0                                
0x78722b8554a0    49ffd2                  call r10                      < Interpreter.semi : 0x000078722b8408f0 >
 ..              : ;; '; find compileWord prefixable ;  .. 
0x78722b8554a3    49bb4038f289c8600000    mov r11, 0x60c889f23840                                
0x78722b8554ad    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8554b7    49ffd2                  call r10                      < Compiler.prefixable : 0x000060c889f23840 >
 ..   : ;; '; find compileWord prefixable ;  .. 
0x78722b8554ba    c3                      ret                                                    
Word_Disassemble : word - ';;' :: codeSize = 37
Word : 0x0000787225f7f672 :: Compiled at : 0x000078722b855496
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 114.55 <::

 =============================
C_Syntax.Calculate_Rex <:> csl compiled word
SourceCode for C_Syntax.Calculate_Rex :> 
uint8 Calculate_Rex ( uint8 reg, uint8 rm, uint8 rex_w_flag, uint8 rex_b_flag ) { uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ; if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ; return rex ; } 
Source code file location of Calculate_Rex : "namespaces/compiler/x64.csl" : 143.14 :: we are now at : namespaces/compiler/x64.csl : 150.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85557d -- code size = 250 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Calculate_Rex : definition = 0x000078722b85557d : disassembly at namespaces/compiler/x64.csl : 150.18 :
0x78722b85557d    4d897e08                mov [r14+0x8], r15                                     
0x78722b855581    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b855585    4981c610000000          add r14, 0x10                                          
 .. t8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_f .. 
0x78722b85558c    498b47f0                mov rax, [r15-0x10]                                    
0x78722b855590    4883f800                cmp rax, 0x0                                           
0x78722b855594    0f8411000000            jz 0x78722b8555ab             < C_Syntax.Calculate_Rex+46 >
 ..  ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_ .. 
0x78722b85559a    b808000000              mov eax, 0x8                                           
0x78722b85559f    4983c608                add r14, 0x8                                           
0x78722b8555a3    498906                  mov [r14], rax                                         
0x78722b8555a6    e90e000000              jmp 0x78722b8555b9            < C_Syntax.Calculate_Rex+60 >
 ..      uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag .. 
0x78722b8555ab    48c7c000000000          mov rax, 0x0                                           
0x78722b8555b2    4983c608                add r14, 0x8                                           
0x78722b8555b6    498906                  mov [r14], rax                                         
 ..  rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |=  .. 
0x78722b8555b9    49837fe007              cmp qword [r15-0x20], 0x7                              
0x78722b8555be    0f8e11000000            jle 0x78722b8555d5            < C_Syntax.Calculate_Rex+88 >
 .. ex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     r .. 
0x78722b8555c4    b804000000              mov eax, 0x4                                           
0x78722b8555c9    4983c608                add r14, 0x8                                           
0x78722b8555cd    498906                  mov [r14], rax                                         
0x78722b8555d0    e90e000000              jmp 0x78722b8555e3            < C_Syntax.Calculate_Rex+102 >
 .. _flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     retur .. 
0x78722b8555d5    48c7c000000000          mov rax, 0x0                                           
0x78722b8555dc    4983c608                add r14, 0x8                                           
0x78722b8555e0    498906                  mov [r14], rax                                         
 .. lag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return  .. 
0x78722b8555e3    498b0e                  mov rcx, [r14]                                         
0x78722b8555e6    498b46f8                mov rax, [r14-0x8]                                     
0x78722b8555ea    4983ee10                sub r14, 0x10                                          
 ..  uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) r .. 
0x78722b8555ee    480bc1                  or rax, rcx                                            
0x78722b8555f1    4983c608                add r14, 0x8                                           
0x78722b8555f5    498906                  mov [r14], rax                                         
 .. : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b8555f8    49837fe807              cmp qword [r15-0x18], 0x7                              
0x78722b8555fd    0f8e11000000            jle 0x78722b855614            < C_Syntax.Calculate_Rex+151 >
 ..  reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855603    b801000000              mov eax, 0x1                                           
0x78722b855608    4983c608                add r14, 0x8                                           
0x78722b85560c    498906                  mov [r14], rax                                         
0x78722b85560f    e90e000000              jmp 0x78722b855622            < C_Syntax.Calculate_Rex+165 >
 ..  > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855614    48c7c000000000          mov rax, 0x0                                           
0x78722b85561b    4983c608                add r14, 0x8                                           
0x78722b85561f    498906                  mov [r14], rax                                         
 ..  7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855622    498b0e                  mov rcx, [r14]                                         
0x78722b855625    498b46f8                mov rax, [r14-0x8]                                     
0x78722b855629    4983ee10                sub r14, 0x10                                          
 .. g ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return re .. 
0x78722b85562d    480bc1                  or rax, rcx                                            
 .. _flag, uint8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex  .. 
0x78722b855630    49894708                mov [r15+0x8], rax                                     
 .. | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855634    498b4708                mov rax, [r15+0x8]                                     
0x78722b855638    4883f800                cmp rax, 0x0                                           
0x78722b85563c    0f851c000000            jnz 0x78722b85565e            < C_Syntax.Calculate_Rex+225 >
 .. m > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855642    498b47f8                mov rax, [r15-0x8]                                     
0x78722b855646    4883f800                cmp rax, 0x0                                           
0x78722b85564a    0f850e000000            jnz 0x78722b85565e            < C_Syntax.Calculate_Rex+225 >
 .. 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855650    498b47f0                mov rax, [r15-0x10]                                    
0x78722b855654    4883f800                cmp rax, 0x0                                           
0x78722b855658    0f8405000000            jz 0x78722b855663             < C_Syntax.Calculate_Rex+230 >
 ..  || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b85565e    49834f0840              or qword [r15+0x8], 0x40                               
 .. lag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855663    498b4708                mov rax, [r15+0x8]                                     
0x78722b855667    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85566b    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85566f    4983ee18                sub r14, 0x18                                          
 .. rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855673    498906                  mov [r14], rax                                         
 .. flag ) rex |= 0x40 ;     return rex ; }  .. 
0x78722b855676    c3                      ret                                                    
Word_Disassemble : word - 'Calculate_Rex' :: codeSize = 250
Word : 0x0000787225f87ec2 :: Compiled at : 0x000078722b85557d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 150.18 <::

 =============================
C_Syntax.CalculateModRegardingDisplacement <:> csl compiled word
SourceCode for C_Syntax.CalculateModRegardingDisplacement :> 
uint8 CalculateModRegardingDisplacement ( uint8 mod, int64 disp ) { if ( mod != REG ) { if ( disp == 0 ) mod = 0 ; else if ( disp <= 0x7f ) mod = 1 ; else mod = 2 ; } return mod ; } 
Source code file location of CalculateModRegardingDisplacement : "namespaces/compiler/x64.csl" : 163.34 :: we are now at : namespaces/compiler/x64.csl : 177.38
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85572d -- code size = 102 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CalculateModRegardingDisplacement : definition = 0x000078722b85572d : disassembly at namespaces/compiler/x64.csl : 177.38 :
0x78722b85572d    4d897e08                mov [r14+0x8], r15                                     
0x78722b855731    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b855735    4981c608000000          add r14, 0x8                                           
 .. mod, int64 disp ) {              if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f )  .. 
0x78722b85573c    49837ff003              cmp qword [r15-0x10], 0x3                              
0x78722b855741    743c                    jz 0x2b85577f                 < C_Syntax.CalculateModRegardingDisplacement+82 >
0x78722b855743    0f1f4000                nop [rax]                                              
 ..  if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;  .. 
0x78722b855747    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b85574c    7511                    jnz 0x2b85575f                < C_Syntax.CalculateModRegardingDisplacement+50 >
0x78722b85574e    0f1f4000                nop [rax]                                              
 ..      if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b855752    49c747f000000000        mov qword [r15-0x10], 0x0                              
 ..  if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b85575a    e920000000              jmp 0x78722b85577f            < C_Syntax.CalculateModRegardingDisplacement+82 >
 ..           mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b85575f    49837ff87f              cmp qword [r15-0x8], 0x7f                              
0x78722b855764    7f11                    jg 0x2b855777                 < C_Syntax.CalculateModRegardingDisplacement+74 >
0x78722b855766    0f1f4000                nop [rax]                                              
 ..          else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b85576a    49c747f001000000        mov qword [r15-0x10], 0x1                              
 ..      else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b855772    e908000000              jmp 0x78722b85577f            < C_Syntax.CalculateModRegardingDisplacement+82 >
 .. p <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b855777    49c747f002000000        mov qword [r15-0x10], 0x2                              
 .. = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x78722b85577f    498b47f0                mov rax, [r15-0x10]                                    
0x78722b855783    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b855787    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85578b    4983ee08                sub r14, 0x8                                           
 ..       else mod = 2 ;     }     return mod ; }  .. 
0x78722b85578f    498906                  mov [r14], rax                                         
 .. else mod = 2 ;     }     return mod ; }  .. 
0x78722b855792    c3                      ret                                                    
Word_Disassemble : word - 'CalculateModRegardingDisplacement' :: codeSize = 102
Word : 0x0000787225f92bc2 :: Compiled at : 0x000078722b85572d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 177.38 <::

 =============================
C_Syntax.CalculateModRmByte <:> csl compiled word
SourceCode for C_Syntax.CalculateModRmByte :> 
uint8 CalculateModRmByte ( uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp ) { uint8 modRm ; mod = CalculateModRegardingDisplacement ( mod, disp ) ; if ( ( mod < 3 ) && ( rm == 4 ) ) { alertColors ; ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ; ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ; defaultColors ; pause ; quit ; } if ( sib ) { rm = 4 ; reg = 0 ; } modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ; return modRm ; } 
Source code file location of CalculateModRmByte : "namespaces/compiler/x64.csl" : 222.19 :: we are now at : namespaces/compiler/x64.csl : 246.23
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855a08 -- code size = 427 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CalculateModRmByte : definition = 0x000078722b855a08 : disassembly at namespaces/compiler/x64.csl : 246.23 :
0x78722b855a08    4d897e08                mov [r14+0x8], r15                                     
0x78722b855a0c    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b855a10    4981c610000000          add r14, 0x10                                          
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps  .. 
0x78722b855a17    498b47d8                mov rax, [r15-0x28]                                    
0x78722b855a1b    4983c608                add r14, 0x8                                           
0x78722b855a1f    498906                  mov [r14], rax                                         
 .. culateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n .. 
0x78722b855a22    498b47f8                mov rax, [r15-0x8]                                     
0x78722b855a26    4983c608                add r14, 0x8                                           
0x78722b855a2a    498906                  mov [r14], rax                                         
 ..  disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {      .. 
0x78722b855a2d    49ba2d57852b72780000    mov r10, 0x78722b85572d                                
0x78722b855a37    49ffd2                  call r10                      < C_Syntax.CalculateModRegardingDisplacement : 0x000078722b85572d >
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {    .. 
0x78722b855a3a    498d47d8                lea rax, [r15-0x28]                                    
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps  .. 
0x78722b855a3e    488bc8                  mov rcx, rax                                           
0x78722b855a41    498b06                  mov rax, [r14]                                         
0x78722b855a44    4983ee08                sub r14, 0x8                                           
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {    .. 
0x78722b855a48    488901                  mov [rcx], rax                                         
 .. splacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte .. 
0x78722b855a4b    49837fd803              cmp qword [r15-0x28], 0x3                              
0x78722b855a50    0f8dc3000000            jge 0x78722b855b19            < C_Syntax.CalculateModRmByte+273 >
 .. d, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE .. 
0x78722b855a56    49837fe804              cmp qword [r15-0x18], 0x4                              
0x78722b855a5b    0f85b8000000            jnz 0x78722b855b19            < C_Syntax.CalculateModRmByte+273 >
 ..  ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE .. 
0x78722b855a61    498bc6                  mov rax, r14                                           
0x78722b855a64    4983ee08                sub r14, 0x8                                           
0x78722b855a68    48833800                cmp qword [rax], 0x0                                   
0x78722b855a6c    7410                    jz 0x2b855a7e                 < C_Syntax.CalculateModRmByte+118 >
0x78722b855a6e    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b855a73    7409                    jz 0x2b855a7e                 < C_Syntax.CalculateModRmByte+118 >
0x78722b855a75    49c70601000000          mov qword [r14], 0x1                                   
0x78722b855a7c    eb07                    jmp 0x78722b855a85            < C_Syntax.CalculateModRmByte+125 >
0x78722b855a7e    49c70600000000          mov qword [r14], 0x0                                   
0x78722b855a85    0f848e000000            jz 0x78722b855b19             < C_Syntax.CalculateModRmByte+273 >
 .. < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps (  .. 
0x78722b855a8b    49bb7006f089c8600000    mov r11, 0x60c889f00670                                
0x78722b855a95    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855a9f    49ffd2                  call r10                      < Colors.alertColors : 0x000060c889f00670 >
 ..     alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666. .. 
0x78722b855aa2    48b845a8602b72780000    mov rax, 0x78722b60a845                                
0x78722b855aac    4983c608                add r14, 0x8                                           
0x78722b855ab0    498906                  mov [r14], rax                                         
0x78722b855ab3    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b855abd    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;    .. 
0x78722b855ac0    48b8cfa8602b72780000    mov rax, 0x78722b60a8cf                                
0x78722b855aca    4983c608                add r14, 0x8                                           
0x78722b855ace    498906                  mov [r14], rax                                         
0x78722b855ad1    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b855adb    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. 253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;                quit ;     }     if ( sib )     {         rm = 4 ;   .. 
0x78722b855ade    49bb6007f089c8600000    mov r11, 0x60c889f00760                                
0x78722b855ae8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855af2    49ffd2                  call r10                      < Colors.defaultColors : 0x000060c889f00760 >
0x78722b855af5    49ba4327842b72780000    mov r10, 0x78722b842743                                
0x78722b855aff    49ffd2                  call r10                      < User.pause : 0x000078722b842743 >
0x78722b855b02    49bb6016f189c8600000    mov r11, 0x60c889f11660                                
0x78722b855b0c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855b16    49ffd2                  call r10                      < System.quit : 0x000060c889f11660 >
 ..                 quit ;     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) .. 
0x78722b855b19    498b47f0                mov rax, [r15-0x10]                                    
0x78722b855b1d    4883f800                cmp rax, 0x0                                           
0x78722b855b21    7414                    jz 0x2b855b37                 < C_Syntax.CalculateModRmByte+303 >
0x78722b855b23    0f1f4000                nop [rax]                                              
 ..     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0 .. 
0x78722b855b27    49c747e804000000        mov qword [r15-0x18], 0x4                              
 .. b )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return  .. 
0x78722b855b2f    49c747e000000000        mov qword [r15-0x20], 0x0                              
 ..         reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b37    498b47d8                mov rax, [r15-0x28]                                    
 ..  reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b3b    b906000000              mov ecx, 0x6                                           
 ..     reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b40    48d3e0                  shl rax, cl                                            
0x78722b855b43    4983c608                add r14, 0x8                                           
0x78722b855b47    498906                  mov [r14], rax                                         
 ..      }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b4a    498b47e0                mov rax, [r15-0x20]                                    
 .. modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b4e    b907000000              mov ecx, 0x7                                           
 ..   modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b53    4823c1                  and rax, rcx                                           
 ..  mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b56    b903000000              mov ecx, 0x3                                           
 .. = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b5b    48d3e0                  shl rax, cl                                            
0x78722b855b5e    4983c608                add r14, 0x8                                           
0x78722b855b62    498906                  mov [r14], rax                                         
 .. od << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b65    498b0e                  mov rcx, [r14]                                         
0x78722b855b68    498b46f8                mov rax, [r14-0x8]                                     
0x78722b855b6c    4983ee10                sub r14, 0x10                                          
 ..  = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b70    4803c1                  add rax, rcx                                           
0x78722b855b73    4983c608                add r14, 0x8                                           
0x78722b855b77    498906                  mov [r14], rax                                         
 .. 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b7a    498b47e8                mov rax, [r15-0x18]                                    
 .. reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b7e    b907000000              mov ecx, 0x7                                           
 .. ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b83    4823c1                  and rax, rcx                                           
0x78722b855b86    4983c608                add r14, 0x8                                           
0x78722b855b8a    498906                  mov [r14], rax                                         
 .. Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b8d    498b0e                  mov rcx, [r14]                                         
0x78722b855b90    498b46f8                mov rax, [r14-0x8]                                     
0x78722b855b94    4983ee10                sub r14, 0x10                                          
 ..  << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b98    4803c1                  add rax, rcx                                           
 ..   rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b9b    49894708                mov [r15+0x8], rax                                     
 .. 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855b9f    498b4708                mov rax, [r15+0x8]                                     
0x78722b855ba3    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b855ba7    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b855bab    4983ee20                sub r14, 0x20                                          
 .. < 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855baf    498906                  mov [r14], rax                                         
 .. ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x78722b855bb2    c3                      ret                                                    
Word_Disassemble : word - 'CalculateModRmByte' :: codeSize = 427
Word : 0x0000787225fa6032 :: Compiled at : 0x000078722b855a08
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 246.23 <::

 =============================
C_Syntax._Compile_Write_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax._Compile_Write_Instruction_X64 :> 
void _Compile_Write_Instruction_X64 ( uint8 rex, uint8 opCode0, uint8 opCode1, uint8 modRm, int16 controlFlags, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { int64 nbytes, _here ; if ( DBI ) { _here = Here ; } if ( rex ) _Compile_Int8 ( rex ) ; if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ; if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ; if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ; if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ; if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ; if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ; if ( DBI ) { nbytes = Here - _here ; if ( nbytes ) { location ( ) ; alertColors ; oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; udis1x ( _here ) ; defaultColors ; } else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; } } 
Source code file location of _Compile_Write_Instruction_X64 : "namespaces/compiler/x64.csl" : 249.31 :: we are now at : namespaces/compiler/x64.csl : 280.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855bb8 -- code size = 848 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_Write_Instruction_X64 : definition = 0x000078722b855bb8 : disassembly at namespaces/compiler/x64.csl : 280.35 :
0x78722b855bb8    4d897e08                mov [r14+0x8], r15                                     
0x78722b855bbc    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b855bc0    4981c618000000          add r14, 0x18                                          
 .. ) {    int64 nbytes, _here ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 )  .. 
0x78722b855bc7    48b862dff72572780000    mov rax, 0x787225f7df62                                
0x78722b855bd1    488b00                  mov rax, [rax]                                         
0x78722b855bd4    4883f800                cmp rax, 0x0                                           
0x78722b855bd8    742c                    jz 0x2b855c06                 < C_Syntax._Compile_Write_Instruction_X64+78 >
0x78722b855bda    0f1f4000                nop [rax]                                              
 ..      if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opC .. 
0x78722b855bde    49bbc029f289c8600000    mov r11, 0x60c889f229c0                                
0x78722b855be8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855bf2    49ffd2                  call r10                      < Compiler.Here : 0x000060c889f229c0 >
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) o .. 
0x78722b855bf5    498d4710                lea rax, [r15+0x10]                                    
0x78722b855bf9    488bc8                  mov rcx, rax                                           
0x78722b855bfc    498b06                  mov rax, [r14]                                         
0x78722b855bff    4983ee08                sub r14, 0x8                                           
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) o .. 
0x78722b855c03    488901                  mov [rcx], rax                                         
 ..         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCo .. 
0x78722b855c06    498b47b0                mov rax, [r15-0x50]                                    
0x78722b855c0a    4883f800                cmp rax, 0x0                                           
0x78722b855c0e    7426                    jz 0x2b855c36                 < C_Syntax._Compile_Write_Instruction_X64+126 >
0x78722b855c10    0f1f4000                nop [rax]                                              
 ..      }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 (  .. 
0x78722b855c14    498b47b0                mov rax, [r15-0x50]                                    
0x78722b855c18    4983c608                add r14, 0x8                                           
0x78722b855c1c    498906                  mov [r14], rax                                         
 ..   _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 )  .. 
0x78722b855c1f    49bbe02af289c8600000    mov r11, 0x60c889f22ae0                                
0x78722b855c29    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855c33    49ffd2                  call r10                      < Compiling.compileByte : 0x000060c889f22ae0 >
 .. ex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1  .. 
0x78722b855c36    498b47b8                mov rax, [r15-0x48]                                    
0x78722b855c3a    4883f800                cmp rax, 0x0                                           
0x78722b855c3e    7426                    jz 0x2b855c66                 < C_Syntax._Compile_Write_Instruction_X64+174 >
0x78722b855c40    0f1f4000                nop [rax]                                              
 ..  ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.&  .. 
0x78722b855c44    498b47b8                mov rax, [r15-0x48]                                    
0x78722b855c48    4983c608                add r14, 0x8                                           
0x78722b855c4c    498906                  mov [r14], rax                                         
 .. ile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if .. 
0x78722b855c4f    49bbe02af289c8600000    mov r11, 0x60c889f22ae0                                
0x78722b855c59    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855c63    49ffd2                  call r10                      < Compiling.compileByte : 0x000060c889f22ae0 >
 .. _Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_ .. 
0x78722b855c66    498b47c0                mov rax, [r15-0x40]                                    
0x78722b855c6a    4883f800                cmp rax, 0x0                                           
0x78722b855c6e    7426                    jz 0x2b855c96                 < C_Syntax._Compile_Write_Instruction_X64+222 >
0x78722b855c70    0f1f4000                nop [rax]                                              
 ..  ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && (  .. 
0x78722b855c74    498b47c0                mov rax, [r15-0x40]                                    
0x78722b855c78    4983c608                add r14, 0x8                                           
0x78722b855c7c    498906                  mov [r14], rax                                         
 .. byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( mod .. 
0x78722b855c7f    49bbe02af289c8600000    mov r11, 0x60c889f22ae0                                
0x78722b855c89    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855c93    49ffd2                  call r10                      < Compiling.compileByte : 0x000060c889f22ae0 >
 .. nt8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB .. 
0x78722b855c96    498b47d0                mov rax, [r15-0x30]                                    
 .. e1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 .. 
0x78722b855c9a    b902000000              mov ecx, 0x2                                           
 .. ode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_In .. 
0x78722b855c9f    4823c1                  and rax, rcx                                           
0x78722b855ca2    4883f800                cmp rax, 0x0                                           
 .. ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compi .. 
0x78722b855ca6    7426                    jz 0x2b855cce                 < C_Syntax._Compile_Write_Instruction_X64+278 >
0x78722b855ca8    0f1f4000                nop [rax]                                              
 .. gs Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp ||  .. 
0x78722b855cac    498b47c8                mov rax, [r15-0x38]                                    
0x78722b855cb0    4983c608                add r14, 0x8                                           
0x78722b855cb4    498906                  mov [r14], rax                                         
 .. f ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;   .. 
0x78722b855cb7    49bbe02af289c8600000    mov r11, 0x60c889f22ae0                                
0x78722b855cc1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855ccb    49ffd2                  call r10                      < Compiling.compileByte : 0x000060c889f22ae0 >
 ..  ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits .. 
0x78722b855cce    498b47d8                mov rax, [r15-0x28]                                    
 ..  ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFla .. 
0x78722b855cd2    4883f800                cmp rax, 0x0                                           
0x78722b855cd6    7463                    jz 0x2b855d3b                 < C_Syntax._Compile_Write_Instruction_X64+387 >
0x78722b855cd8    0f1f4000                nop [rax]                                              
 .. le_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B .. 
0x78722b855cdc    498b47d0                mov rax, [r15-0x30]                                    
 ..     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDis .. 
0x78722b855ce0    b904000000              mov ecx, 0x4                                           
 .. ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmD .. 
0x78722b855ce5    4823c1                  and rax, rcx                                           
0x78722b855ce8    4983c608                add r14, 0x8                                           
 .. Rm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile .. 
0x78722b855cec    498906                  mov [r14], rax                                         
 .. Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& D .. 
0x78722b855cef    498bc6                  mov rax, r14                                           
0x78722b855cf2    4983ee08                sub r14, 0x8                                           
0x78722b855cf6    48833800                cmp qword [rax], 0x0                                   
0x78722b855cfa    7410                    jz 0x2b855d0c                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x78722b855cfc    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b855d01    7409                    jz 0x2b855d0c                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x78722b855d03    49c70601000000          mov qword [r14], 0x1                                   
 .. & MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( contro .. 
0x78722b855d0a    eb07                    jmp 0x78722b855d13            < C_Syntax._Compile_Write_Instruction_X64+347 >
0x78722b855d0c    49c70600000000          mov qword [r14], 0x0                                   
0x78722b855d13    7426                    jz 0x2b855d3b                 < C_Syntax._Compile_Write_Instruction_X64+387 >
0x78722b855d15    0f1f4000                nop [rax]                                              
 .. lags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0  .. 
0x78722b855d19    498b47d8                mov rax, [r15-0x28]                                    
0x78722b855d1d    4983c608                add r14, 0x8                                           
0x78722b855d21    498906                  mov [r14], rax                                         
 .. ib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( di .. 
0x78722b855d24    49bbe02af289c8600000    mov r11, 0x60c889f22ae0                                
0x78722b855d2e    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855d38    49ffd2                  call r10                      < Compiling.compileByte : 0x000060c889f22ae0 >
 ..  ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm  .. 
0x78722b855d3b    498b47e0                mov rax, [r15-0x20]                                    
0x78722b855d3f    4883f800                cmp rax, 0x0                                           
0x78722b855d43    0f8513000000            jnz 0x78722b855d5c            < C_Syntax._Compile_Write_Instruction_X64+420 >
 .. ile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( contr .. 
0x78722b855d49    498b47d0                mov rax, [r15-0x30]                                    
 ..    if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B .. 
0x78722b855d4d    b908000000              mov ecx, 0x8                                           
 ..      if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM .. 
0x78722b855d52    4823c1                  and rax, rcx                                           
0x78722b855d55    4983c608                add r14, 0x8                                           
 .. b ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits. .. 
0x78722b855d59    498906                  mov [r14], rax                                         
 .. s.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, i .. 
0x78722b855d5c    498b47e0                mov rax, [r15-0x20]                                    
0x78722b855d60    4983c608                add r14, 0x8                                           
0x78722b855d64    498906                  mov [r14], rax                                         
 .. SP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize .. 
0x78722b855d67    498b47e8                mov rax, [r15-0x18]                                    
0x78722b855d6b    4983c608                add r14, 0x8                                           
0x78722b855d6f    498906                  mov [r14], rax                                         
 .. Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( contro .. 
0x78722b855d72    48c7c000000000          mov rax, 0x0                                           
0x78722b855d79    4983c608                add r14, 0x8                                           
0x78722b855d7d    498906                  mov [r14], rax                                         
 .. p || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compi .. 
0x78722b855d80    49ba2858852b72780000    mov r10, 0x78722b855828                                
0x78722b855d8a    49ffd2                  call r10                      < C_Syntax._Compile_ImmDispData : 0x000078722b855828 >
 .. Data ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& I .. 
0x78722b855d8d    498b47f0                mov rax, [r15-0x10]                                    
0x78722b855d91    4883f800                cmp rax, 0x0                                           
0x78722b855d95    0f8513000000            jnz 0x78722b855dae            < C_Syntax._Compile_Write_Instruction_X64+502 >
 .. sp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) )  .. 
0x78722b855d9b    498b47d0                mov rax, [r15-0x30]                                    
 ..     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     .. 
0x78722b855d9f    b910000000              mov ecx, 0x10                                          
 .. ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )   .. 
0x78722b855da4    4823c1                  and rax, rcx                                           
0x78722b855da7    4983c608                add r14, 0x8                                           
 ..  0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DB .. 
0x78722b855dab    498906                  mov [r14], rax                                         
 .. ts.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here  .. 
0x78722b855dae    498b47f0                mov rax, [r15-0x10]                                    
0x78722b855db2    4983c608                add r14, 0x8                                           
0x78722b855db6    498906                  mov [r14], rax                                         
 .. IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;     .. 
0x78722b855db9    498b47f8                mov rax, [r15-0x8]                                     
0x78722b855dbd    4983c608                add r14, 0x8                                           
0x78722b855dc1    498906                  mov [r14], rax                                         
 .. Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( n .. 
0x78722b855dc4    498b47d0                mov rax, [r15-0x30]                                    
 .. ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {    .. 
0x78722b855dc8    b910000000              mov ecx, 0x10                                          
 .. a ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {  .. 
0x78722b855dcd    4823c1                  and rax, rcx                                           
0x78722b855dd0    4983c608                add r14, 0x8                                           
0x78722b855dd4    498906                  mov [r14], rax                                         
 .. mm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         .. 
0x78722b855dd7    49ba2858852b72780000    mov r10, 0x78722b855828                                
0x78722b855de1    49ffd2                  call r10                      < C_Syntax._Compile_ImmDispData : 0x000078722b855828 >
 .. trolFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location (  .. 
0x78722b855de4    48b862dff72572780000    mov rax, 0x787225f7df62                                
0x78722b855dee    488b00                  mov rax, [rax]                                         
0x78722b855df1    4883f800                cmp rax, 0x0                                           
0x78722b855df5    0f8400010000            jz 0x78722b855efb             < C_Syntax._Compile_Write_Instruction_X64+835 >
 ..     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ; .. 
0x78722b855dfb    49bbc029f289c8600000    mov r11, 0x60c889f229c0                                
0x78722b855e05    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855e0f    49ffd2                  call r10                      < Compiler.Here : 0x000060c889f229c0 >
0x78722b855e12    498b4710                mov rax, [r15+0x10]                                    
 .. ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;        .. 
0x78722b855e16    488bc8                  mov rcx, rax                                           
0x78722b855e19    498b06                  mov rax, [r14]                                         
0x78722b855e1c    4983ee08                sub r14, 0x8                                           
 .. f ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;      .. 
0x78722b855e20    482bc1                  sub rax, rcx                                           
0x78722b855e23    49894708                mov [r15+0x8], rax                                     
 ..  nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;             oPrintf ( "\n_C .. 
0x78722b855e27    498b4708                mov rax, [r15+0x8]                                     
0x78722b855e2b    4883f800                cmp rax, 0x0                                           
0x78722b855e2f    0f8494000000            jz 0x78722b855ec9             < C_Syntax._Compile_Write_Instruction_X64+785 >
0x78722b855e35    49badd0e842b72780000    mov r10, 0x78722b840edd                                
0x78722b855e3f    49ffd2                  call r10                      < System.location : 0x000078722b840edd >
 ..            location ( ) ;             alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _her .. 
0x78722b855e42    49bb7006f089c8600000    mov r11, 0x60c889f00670                                
0x78722b855e4c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855e56    49ffd2                  call r10                      < Colors.alertColors : 0x000060c889f00670 >
 ..   alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _ .. 
0x78722b855e59    48b8f861062672780000    mov rax, 0x7872260661f8                                
0x78722b855e63    488bf8                  mov rdi, rax                                           
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else .. 
0x78722b855e66    498b4710                mov rax, [r15+0x10]                                    
0x78722b855e6a    488bf0                  mov rsi, rax                                           
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrint .. 
0x78722b855e6d    498b4708                mov rax, [r15+0x8]                                     
0x78722b855e71    488bd0                  mov rdx, rax                                           
0x78722b855e74    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b855e7e    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855e88    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
 .. here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_In .. 
0x78722b855e8b    498b4710                mov rax, [r15+0x10]                                    
0x78722b855e8f    4983c608                add r14, 0x8                                           
0x78722b855e93    498906                  mov [r14], rax                                         
0x78722b855e96    49bbd0bff089c8600000    mov r11, 0x60c889f0bfd0                                
0x78722b855ea0    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855eaa    49ffd2                  call r10                      < Debug.udis1x : 0x000060c889f0bfd0 >
 ..        udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx :  .. 
0x78722b855ead    49bb6007f089c8600000    mov r11, 0x60c889f00760                                
0x78722b855eb7    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855ec1    49ffd2                  call r10                      < Colors.defaultColors : 0x000060c889f00760 >
 .. lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x78722b855ec4    e932000000              jmp 0x78722b855efb            < C_Syntax._Compile_Write_Instruction_X64+835 >
 .. rs ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x78722b855ec9    48b82f62062672780000    mov rax, 0x78722606622f                                
0x78722b855ed3    488bf8                  mov rdi, rax                                           
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x78722b855ed6    498b4710                mov rax, [r15+0x10]                                    
0x78722b855eda    488bf0                  mov rsi, rax                                           
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x78722b855edd    498b4708                mov rax, [r15+0x8]                                     
0x78722b855ee1    488bd0                  mov rdx, rax                                           
 .. efaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;      .. 
0x78722b855ee4    49bb8082ed89c8600000    mov r11, 0x60c889ed8280                                
0x78722b855eee    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b855ef8    49ffd2                  call r10                      < C.oPrintf : 0x000060c889ed8280 >
0x78722b855efb    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b855eff    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b855f03    4983ee50                sub r14, 0x50                                          
 .. bytes : ...", _here, nbytes ) ;     } }  .. 
0x78722b855f07    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Write_Instruction_X64' :: codeSize = 848
Word : 0x0000787225faf6d2 :: Compiled at : 0x000078722b855bb8
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 280.35 <::

 =============================
C_Syntax.Compile_CalculateWrite_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax.Compile_CalculateWrite_Instruction_X64 :> 
void Compile_CalculateWrite_Instruction_X64 ( uint8 opCode0, uint8 opCode1, uint8 mod, uint8 reg, uint8 rm, uint16 controlFlags, uint8 sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize ) { uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ; uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ; _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; } 
Source code file location of Compile_CalculateWrite_Instruction_X64 : "namespaces/compiler/x64.csl" : 319.39 :: we are now at : namespaces/compiler/x64.csl : 327.43
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855f0d -- code size = 373 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_CalculateWrite_Instruction_X64 : definition = 0x000078722b855f0d : disassembly at namespaces/compiler/x64.csl : 327.43 :
0x78722b855f0d    4d897e08                mov [r14+0x8], r15                                     
0x78722b855f11    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b855f15    4981c618000000          add r14, 0x18                                          
 .. e ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     u .. 
0x78722b855f1c    498b47c0                mov rax, [r15-0x40]                                    
0x78722b855f20    4983c608                add r14, 0x8                                           
0x78722b855f24    498906                  mov [r14], rax                                         
 ..      uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8  .. 
0x78722b855f27    498b47c8                mov rax, [r15-0x38]                                    
0x78722b855f2b    4983c608                add r14, 0x8                                           
0x78722b855f2f    498906                  mov [r14], rax                                         
 .. int8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm  .. 
0x78722b855f32    49837ff808              cmp qword [r15-0x8], 0x8                               
0x78722b855f37    0f94c0                  setz al                                                
0x78722b855f3a    480fb6c0                movzx rax, al                                          
0x78722b855f3e    4983c608                add r14, 0x8                                           
0x78722b855f42    498906                  mov [r14], rax                                         
 .. _Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte .. 
0x78722b855f45    498b47d0                mov rax, [r15-0x30]                                    
 .. mSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib .. 
0x78722b855f49    b920000000              mov ecx, 0x20                                          
 .. immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, s .. 
0x78722b855f4e    4823c1                  and rax, rcx                                           
0x78722b855f51    4983c608                add r14, 0x8                                           
0x78722b855f55    498906                  mov [r14], rax                                         
 .. == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp .. 
0x78722b855f58    498b0e                  mov rcx, [r14]                                         
0x78722b855f5b    498b46f8                mov rax, [r14-0x8]                                     
0x78722b855f5f    4983ee10                sub r14, 0x10                                          
 .. ulate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModR .. 
0x78722b855f63    480bc1                  or rax, rcx                                            
0x78722b855f66    0f95c0                  setnz al                                               
0x78722b855f69    480fb6c0                movzx rax, al                                          
0x78722b855f6d    4983c608                add r14, 0x8                                           
0x78722b855f71    498906                  mov [r14], rax                                         
 .. ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;  .. 
0x78722b855f74    498b47d0                mov rax, [r15-0x30]                                    
 .. Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_I .. 
0x78722b855f78    b901000000              mov ecx, 0x1                                           
 .. s Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write .. 
0x78722b855f7d    4823c1                  and rax, rcx                                           
0x78722b855f80    4983c608                add r14, 0x8                                           
0x78722b855f84    498906                  mov [r14], rax                                         
 .. mm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& R .. 
0x78722b855f87    49ba7d55852b72780000    mov r10, 0x78722b85557d                                
0x78722b855f91    49ffd2                  call r10                      < C_Syntax.Calculate_Rex : 0x000078722b85557d >
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& .. 
0x78722b855f94    498d4708                lea rax, [r15+0x8]                                     
 .. nt64 imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bi .. 
0x78722b855f98    488bc8                  mov rcx, rax                                           
0x78722b855f9b    498b06                  mov rax, [r14]                                         
0x78722b855f9e    4983ee08                sub r14, 0x8                                           
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& .. 
0x78722b855fa2    488901                  mov [rcx], rax                                         
 ..    uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, cont .. 
0x78722b855fa5    498b47b8                mov rax, [r15-0x48]                                    
0x78722b855fa9    4983c608                add r14, 0x8                                           
0x78722b855fad    498906                  mov [r14], rax                                         
 .. nt8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFl .. 
0x78722b855fb0    498b47c0                mov rax, [r15-0x40]                                    
0x78722b855fb4    4983c608                add r14, 0x8                                           
0x78722b855fb8    498906                  mov [r14], rax                                         
 .. odRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags,  .. 
0x78722b855fbb    498b47c8                mov rax, [r15-0x38]                                    
0x78722b855fbf    4983c608                add r14, 0x8                                           
0x78722b855fc3    498906                  mov [r14], rax                                         
 ..  = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, .. 
0x78722b855fc6    498b47d8                mov rax, [r15-0x28]                                    
0x78722b855fca    4983c608                add r14, 0x8                                           
0x78722b855fce    498906                  mov [r14], rax                                         
 .. lculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp .. 
0x78722b855fd1    498b47e0                mov rax, [r15-0x20]                                    
0x78722b855fd5    4983c608                add r14, 0x8                                           
0x78722b855fd9    498906                  mov [r14], rax                                         
 ..  Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, .. 
0x78722b855fdc    49ba085a852b72780000    mov r10, 0x78722b855a08                                
0x78722b855fe6    49ffd2                  call r10                      < C_Syntax.CalculateModRmByte : 0x000078722b855a08 >
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode .. 
0x78722b855fe9    498d4710                lea rax, [r15+0x10]                                    
 .. rolFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex,  .. 
0x78722b855fed    488bc8                  mov rcx, rax                                           
0x78722b855ff0    498b06                  mov rax, [r14]                                         
0x78722b855ff3    4983ee08                sub r14, 0x8                                           
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode .. 
0x78722b855ff7    488901                  mov [rcx], rax                                         
 ..      _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b855ffa    498b4708                mov rax, [r15+0x8]                                     
0x78722b855ffe    4983c608                add r14, 0x8                                           
0x78722b856002    498906                  mov [r14], rax                                         
 .. _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856005    498b47a8                mov rax, [r15-0x58]                                    
0x78722b856009    4983c608                add r14, 0x8                                           
0x78722b85600d    498906                  mov [r14], rax                                         
 .. Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856010    498b47b0                mov rax, [r15-0x50]                                    
0x78722b856014    4983c608                add r14, 0x8                                           
0x78722b856018    498906                  mov [r14], rax                                         
 .. truction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b85601b    498b4710                mov rax, [r15+0x10]                                    
0x78722b85601f    4983c608                add r14, 0x8                                           
0x78722b856023    498906                  mov [r14], rax                                         
 .. n_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856026    498b47d0                mov rax, [r15-0x30]                                    
0x78722b85602a    4983c608                add r14, 0x8                                           
0x78722b85602e    498906                  mov [r14], rax                                         
 .. pCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856031    498b47d8                mov rax, [r15-0x28]                                    
0x78722b856035    4983c608                add r14, 0x8                                           
0x78722b856039    498906                  mov [r14], rax                                         
 .. 0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b85603c    498b47e0                mov rax, [r15-0x20]                                    
0x78722b856040    4983c608                add r14, 0x8                                           
0x78722b856044    498906                  mov [r14], rax                                         
 .. ode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856047    498b47e8                mov rax, [r15-0x18]                                    
0x78722b85604b    4983c608                add r14, 0x8                                           
0x78722b85604f    498906                  mov [r14], rax                                         
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856052    498b47f0                mov rax, [r15-0x10]                                    
0x78722b856056    4983c608                add r14, 0x8                                           
0x78722b85605a    498906                  mov [r14], rax                                         
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b85605d    498b47f8                mov rax, [r15-0x8]                                     
0x78722b856061    4983c608                add r14, 0x8                                           
0x78722b856065    498906                  mov [r14], rax                                         
 .. yte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, i .. 
0x78722b856068    49bab85b852b72780000    mov r10, 0x78722b855bb8                                
0x78722b856072    49ffd2                  call r10                      < C_Syntax._Compile_Write_Instruction_X64 : 0x000078722b855bb8 >
0x78722b856075    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b856079    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85607d    4983ee58                sub r14, 0x58                                          
 .. sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856081    c3                      ret                                                    
Word_Disassemble : word - 'Compile_CalculateWrite_Instruction_X64' :: codeSize = 373
Word : 0x0000787225fbe532 :: Compiled at : 0x000078722b855f0d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 327.43 <::

 =============================
C_Syntax.Compile_Move <:> csl compiled word
SourceCode for C_Syntax.Compile_Move :> 
void Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { uint8 opCode0 = 0, opCode ; uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ; if ( ! operandSize ) operandSize = 8 ; if ( imm || immSize ) { reg = 0 ; controlFlags |= IMM_B ; if ( immSize >= 8 ) { controlFlags |= ( REX_W ) ; if ( imm <= 0xffffffff ) { opCode = 0xc7 ; immSize = 4 ; controlFlags |= ( MODRM_B ) ; } else { if ( direction == TO_MEM ) { alertColors ; ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ; pause ( ) ; quit ( ) ; } opCode = 0xb8 + ( rm Bits.& 7 ) ; } } else { if ( immSize == 1 ) opCode = 0xb0 + rm ; else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ; else if ( immSize == 4 ) opCode = 0xb8 | rm ; } } else { controlFlags |= ( MODRM_B ) ; opCode = 0x88 ; if ( operandSize > 1 ) opCode |= 1 ; if ( direction == TO_REG ) opCode |= 2 ; if ( operandSize == 2 ) opCode0 = 0x66 ; if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ; } Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; } 
Source code file location of Compile_Move : "namespaces/compiler/x64.csl" : 346.13 :: we are now at : namespaces/compiler/x64.csl : 396.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b856087 -- code size = 743 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_Move : definition = 0x000078722b856087 : disassembly at namespaces/compiler/x64.csl : 396.17 :
0x78722b856087    4d897e08                mov [r14+0x8], r15                                     
0x78722b85608b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85608f    4981c620000000          add r14, 0x20                                          
 .. , uint8 immSize ) {     uint8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! op .. 
0x78722b856096    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm .. 
0x78722b85609e    498b47e0                mov rax, [r15-0x20]                                    
0x78722b8560a2    4883f800                cmp rax, 0x0                                           
0x78722b8560a6    0f8411000000            jz 0x78722b8560bd             < C_Syntax.Compile_Move+54 >
 ..  ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || imm .. 
0x78722b8560ac    b808000000              mov eax, 0x8                                           
0x78722b8560b1    4983c608                add r14, 0x8                                           
0x78722b8560b5    498906                  mov [r14], rax                                         
0x78722b8560b8    e90e000000              jmp 0x78722b8560cb            < C_Syntax.Compile_Move+68 >
 .. nt64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )    .. 
0x78722b8560bd    48c7c000000000          mov rax, 0x0                                           
0x78722b8560c4    4983c608                add r14, 0x8                                           
0x78722b8560c8    498906                  mov [r14], rax                                         
 .. trolFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {      .. 
0x78722b8560cb    498b47d8                mov rax, [r15-0x28]                                    
0x78722b8560cf    4883f800                cmp rax, 0x0                                           
0x78722b8560d3    0f8411000000            jz 0x78722b8560ea             < C_Syntax.Compile_Move+99 >
 .. ags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         re .. 
0x78722b8560d9    b804000000              mov eax, 0x4                                           
0x78722b8560de    4983c608                add r14, 0x8                                           
0x78722b8560e2    498906                  mov [r14], rax                                         
0x78722b8560e5    e90e000000              jmp 0x78722b8560f8            < C_Syntax.Compile_Move+113 >
 .. disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;  .. 
0x78722b8560ea    48c7c000000000          mov rax, 0x0                                           
0x78722b8560f1    4983c608                add r14, 0x8                                           
0x78722b8560f5    498906                  mov [r14], rax                                         
 .. sp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;    .. 
0x78722b8560f8    498b0e                  mov rcx, [r14]                                         
0x78722b8560fb    498b46f8                mov rax, [r14-0x8]                                     
0x78722b8560ff    4983ee10                sub r14, 0x10                                          
 ..  controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {  .. 
0x78722b856103    480bc1                  or rax, rcx                                            
 .. int8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = .. 
0x78722b856106    49894718                mov [r15+0x18], rax                                    
 ..  ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFla .. 
0x78722b85610a    498b47d0                mov rax, [r15-0x30]                                    
 ..  0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlF .. 
0x78722b85610e    4883f800                cmp rax, 0x0                                           
0x78722b856112    750c                    jnz 0x2b856120                < C_Syntax.Compile_Move+153 >
0x78722b856114    0f1f4000                nop [rax]                                              
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( .. 
0x78722b856118    49c747d008000000        mov qword [r15-0x30], 0x8                              
 .. randSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 ) .. 
0x78722b856120    498b47f0                mov rax, [r15-0x10]                                    
0x78722b856124    4883f800                cmp rax, 0x0                                           
0x78722b856128    0f850e000000            jnz 0x78722b85613c            < C_Syntax.Compile_Move+181 >
 .. f ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, o .. 
0x78722b85612e    498b47f8                mov rax, [r15-0x8]                                     
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( .. 
0x78722b856132    4883f800                cmp rax, 0x0                                           
0x78722b856136    0f8444010000            jz 0x78722b856280             < C_Syntax.Compile_Move+505 >
 ..  ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags .. 
0x78722b85613c    49c747c000000000        mov qword [r15-0x40], 0x0                              
 ..      reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             i .. 
0x78722b856144    49834f1810              or qword [r15+0x18], 0x10                              
 ..  controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff .. 
0x78722b856149    49837ff808              cmp qword [r15-0x8], 0x8                               
 ..  | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;     .. 
0x78722b85614e    0f8cc4000000            jl 0x78722b856218             < C_Syntax.Compile_Move+401 >
 ..       {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;         .. 
0x78722b856154    49834f1820              or qword [r15+0x18], 0x20                              
 .. Flags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;                 immSize = 4 ;      .. 
0x78722b856159    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x78722b85615e    7f1e                    jg 0x2b85617e                 < C_Syntax.Compile_Move+247 >
 ..  )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;    .. 
0x78722b856160    0f1f4000                nop [rax]                                              
 .. )            {                 opCode = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }  .. 
0x78722b856164    49c74710c7000000        mov qword [r15+0x10], 0xc7                              
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {    .. 
0x78722b85616c    49c747f804000000        mov qword [r15-0x8], 0x4                               
 .. 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {                 if ( direction == TO_MEM ) .. 
0x78722b856174    49834f1802              or qword [r15+0x18], 0x2                               
0x78722b856179    e995000000              jmp 0x78722b856213            < C_Syntax.Compile_Move+396 >
 .. se             {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( .. 
0x78722b85617e    49837fb002              cmp qword [r15-0x50], 0x2                              
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {    .. 
0x78722b856183    755d                    jnz 0x2b8561e2                < C_Syntax.Compile_Move+347 >
0x78722b856185    0f1f4000                nop [rax]                                              
0x78722b856189    49bb7006f089c8600000    mov r11, 0x60c889f00670                                
 ..      {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( "\n Compi .. 
0x78722b856193    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85619d    49ffd2                  call r10                      < Colors.alertColors : 0x000060c889f00670 >
 .. lertColors ;                     ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ;                     pause ( ) ;                     qu .. 
0x78722b8561a0    48b826b7602b72780000    mov rax, 0x78722b60b726                                
0x78722b8561aa    4983c608                add r14, 0x8                                           
0x78722b8561ae    498906                  mov [r14], rax                                         
0x78722b8561b1    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b8561bb    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
0x78722b8561be    49ba4327842b72780000    mov r10, 0x78722b842743                                
0x78722b8561c8    49ffd2                  call r10                      < User.pause : 0x000078722b842743 >
0x78722b8561cb    49bb6016f189c8600000    mov r11, 0x60c889f11660                                
0x78722b8561d5    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b8561df    49ffd2                  call r10                      < System.quit : 0x000060c889f11660 >
 ..            }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == .. 
0x78722b8561e2    b8b8000000              mov eax, 0xb8                                          
0x78722b8561e7    4983c608                add r14, 0x8                                           
0x78722b8561eb    498906                  mov [r14], rax                                         
 ..   }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCo .. 
0x78722b8561ee    498b47c8                mov rax, [r15-0x38]                                    
 ..           opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0  .. 
0x78722b8561f2    b907000000              mov ecx, 0x7                                           
 ..             opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb .. 
0x78722b8561f7    4823c1                  and rax, rcx                                           
0x78722b8561fa    4983c608                add r14, 0x8                                           
0x78722b8561fe    498906                  mov [r14], rax                                         
 ..         opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 +  .. 
0x78722b856201    498b0e                  mov rcx, [r14]                                         
0x78722b856204    498b46f8                mov rax, [r14-0x8]                                     
0x78722b856208    4983ee10                sub r14, 0x10                                          
 ..       }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 )  .. 
0x78722b85620c    4803c1                  add rax, rcx                                           
0x78722b85620f    49894710                mov [r15+0x10], rax                                    
 ..  0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             .. 
0x78722b856213    e963000000              jmp 0x78722b85627b            < C_Syntax.Compile_Move+500 >
 ..       else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0 .. 
0x78722b856218    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b85621d    7519                    jnz 0x2b856238                < C_Syntax.Compile_Move+433 >
0x78722b85621f    0f1f4000                nop [rax]                                              
 ..          if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             e .. 
0x78722b856223    b8b0000000              mov eax, 0xb0                                          
 ..   if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if  .. 
0x78722b856228    498b4fc8                mov rcx, [r15-0x38]                                    
 ..     if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else i .. 
0x78722b85622c    4803c1                  add rax, rcx                                           
 ..     {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;      .. 
0x78722b85622f    49894710                mov [r15+0x10], rax                                    
 .. f ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( i .. 
0x78722b856233    e943000000              jmp 0x78722b85627b            < C_Syntax.Compile_Move+500 >
 .. e = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0 .. 
0x78722b856238    49837ff802              cmp qword [r15-0x8], 0x2                               
0x78722b85623d    7521                    jnz 0x2b856260                < C_Syntax.Compile_Move+473 >
0x78722b85623f    0f1f4000                nop [rax]                                              
 ..      else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }    .. 
0x78722b856243    49c7470866000000        mov qword [r15+0x8], 0x66                              
 .. mSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    { .. 
0x78722b85624b    b8b8000000              mov eax, 0xb8                                          
 .. = 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {        .. 
0x78722b856250    498b4fc8                mov rcx, [r15-0x38]                                    
 ..  == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {      .. 
0x78722b856254    480bc1                  or rax, rcx                                            
 .. e if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }      .. 
0x78722b856257    49894710                mov [r15+0x10], rax                                    
 ..  ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         c .. 
0x78722b85625b    e91b000000              jmp 0x78722b85627b            < C_Syntax.Compile_Move+500 >
 .. e = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B .. 
0x78722b856260    49837ff804              cmp qword [r15-0x8], 0x4                               
0x78722b856265    7514                    jnz 0x2b85627b                < C_Syntax.Compile_Move+500 >
0x78722b856267    0f1f4000                nop [rax]                                              
 ..     else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x .. 
0x78722b85626b    b8b8000000              mov eax, 0xb8                                          
 .. e if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;    .. 
0x78722b856270    498b4fc8                mov rcx, [r15-0x38]                                    
 .. lse if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;  .. 
0x78722b856274    480bc1                  or rax, rcx                                            
 ..              else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         op .. 
0x78722b856277    49894710                mov [r15+0x10], rax                                    
 .. e == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( op .. 
0x78722b85627b    e95b000000              jmp 0x78722b8562db            < C_Syntax.Compile_Move+596 >
 ..   else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direct .. 
0x78722b856280    49834f1802              or qword [r15+0x18], 0x2                               
 .. Flags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 .. 
0x78722b856285    49c7471088000000        mov qword [r15+0x10], 0x88                              
 ..          opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operand .. 
0x78722b85628d    49837fd001              cmp qword [r15-0x30], 0x1                              
0x78722b856292    7e09                    jle 0x2b85629d                < C_Syntax.Compile_Move+534 >
0x78722b856294    0f1f4000                nop [rax]                                              
 ..      if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ; .. 
0x78722b856298    49834f1001              or qword [r15+0x10], 0x1                               
 .. dSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( o .. 
0x78722b85629d    49837fb003              cmp qword [r15-0x50], 0x3                              
 .. ode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 )  .. 
0x78722b8562a2    7509                    jnz 0x2b8562ad                < C_Syntax.Compile_Move+550 >
0x78722b8562a4    0f1f4000                nop [rax]                                              
 ..  if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize > .. 
0x78722b8562a8    49834f1002              or qword [r15+0x10], 0x2                               
 .. == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlF .. 
0x78722b8562ad    49837fd002              cmp qword [r15-0x30], 0x2                              
 .. ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize .. 
0x78722b8562b2    750c                    jnz 0x2b8562c0                < C_Syntax.Compile_Move+569 >
0x78722b8562b4    0f1f4000                nop [rax]                                              
 ..       if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }  .. 
0x78722b8562b8    49c7470866000000        mov qword [r15+0x8], 0x66                              
 .. == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWr .. 
0x78722b8562c0    49837fd008              cmp qword [r15-0x30], 0x8                              
0x78722b8562c5    7d0f                    jge 0x2b8562d6                < C_Syntax.Compile_Move+591 >
0x78722b8562c7    0f1f4000                nop [rax]                                              
 ..        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( op .. 
0x78722b8562cb    49837ff808              cmp qword [r15-0x8], 0x8                               
0x78722b8562d0    7c09                    jl 0x2b8562db                 < C_Syntax.Compile_Move+596 >
0x78722b8562d2    0f1f4000                nop [rax]                                              
 ..  ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, contro .. 
0x78722b8562d6    49834f1820              or qword [r15+0x18], 0x20                              
 .. pile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b8562db    498b4708                mov rax, [r15+0x8]                                     
0x78722b8562df    4983c608                add r14, 0x8                                           
0x78722b8562e3    498906                  mov [r14], rax                                         
 .. ulateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b8562e6    498b4710                mov rax, [r15+0x10]                                    
 ..  ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCo .. 
0x78722b8562ea    4983c608                add r14, 0x8                                           
0x78722b8562ee    498906                  mov [r14], rax                                         
 .. te_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b8562f1    498b47b8                mov rax, [r15-0x48]                                    
0x78722b8562f5    4983c608                add r14, 0x8                                           
 ..  ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, c .. 
0x78722b8562f9    498906                  mov [r14], rax                                         
 .. struction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b8562fc    498b47c0                mov rax, [r15-0x40]                                    
0x78722b856300    4983c608                add r14, 0x8                                           
0x78722b856304    498906                  mov [r14], rax                                         
 .. tion_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856307    498b47c8                mov rax, [r15-0x38]                                    
0x78722b85630b    4983c608                add r14, 0x8                                           
0x78722b85630f    498906                  mov [r14], rax                                         
 .. _X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856312    498b4718                mov rax, [r15+0x18]                                    
0x78722b856316    4983c608                add r14, 0x8                                           
0x78722b85631a    498906                  mov [r14], rax                                         
 .. , opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b85631d    498b47d8                mov rax, [r15-0x28]                                    
0x78722b856321    4983c608                add r14, 0x8                                           
0x78722b856325    498906                  mov [r14], rax                                         
 .. ode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856328    498b47e0                mov rax, [r15-0x20]                                    
0x78722b85632c    4983c608                add r14, 0x8                                           
0x78722b856330    498906                  mov [r14], rax                                         
 .. od, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856333    498b47e8                mov rax, [r15-0x18]                                    
0x78722b856337    4983c608                add r14, 0x8                                           
0x78722b85633b    498906                  mov [r14], rax                                         
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b85633e    498b47f0                mov rax, [r15-0x10]                                    
0x78722b856342    4983c608                add r14, 0x8                                           
0x78722b856346    498906                  mov [r14], rax                                         
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b856349    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85634d    4983c608                add r14, 0x8                                           
0x78722b856351    498906                  mov [r14], rax                                         
 .. ontrolFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, di .. 
0x78722b856354    49ba0d5f852b72780000    mov r10, 0x78722b855f0d                                
0x78722b85635e    49ffd2                  call r10                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x000078722b855f0d >
0x78722b856361    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b856365    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b856369    4983ee50                sub r14, 0x50                                          
 .. sib, disp, dispSize, imm, immSize ) ; }  .. 
0x78722b85636d    c3                      ret                                                    
Word_Disassemble : word - 'Compile_Move' :: codeSize = 743
Word : 0x0000787225fc34f2 :: Compiled at : 0x000078722b856087
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 396.17 <::

 =============================
C_Syntax.Compile_MoveImm <:> csl compiled word
SourceCode for C_Syntax.Compile_MoveImm :> 
void Compile_MoveImm ( Boolean mod, Boolean rm, int64 disp, int64 imm, byte immSize ) { if ( ! immSize ) immSize = 8 ; if ( mod == MEM ) { if ( disp && ( imm <= 0xffffffff ) ) { Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ; } else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) { Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ; Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ; } } else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;} 
Source code file location of Compile_MoveImm : "namespaces/compiler/x64.csl" : 430.16 :: we are now at : namespaces/compiler/x64.csl : 450.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b856657 -- code size = 631 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_MoveImm : definition = 0x000078722b856657 : disassembly at namespaces/compiler/x64.csl : 450.20 :
0x78722b856657    4d897e08                mov [r14+0x8], r15                                     
0x78722b85665b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85665f    4981c608000000          add r14, 0x8                                           
 .. nt64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff .. 
0x78722b856666    498b47f8                mov rax, [r15-0x8]                                     
 ..  int64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffff .. 
0x78722b85666a    4883f800                cmp rax, 0x0                                           
0x78722b85666e    750c                    jnz 0x2b85667c                < C_Syntax.Compile_MoveImm+37 >
0x78722b856670    0f1f4000                nop [rax]                                              
 .. Size ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {     .. 
0x78722b856674    49c747f808000000        mov qword [r15-0x8], 0x8                               
 ..  ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compil .. 
0x78722b85667c    49837fd800              cmp qword [r15-0x28], 0x0                              
0x78722b856681    0f85b2010000            jnz 0x78722b856839            < C_Syntax.Compile_MoveImm+482 >
 .. od == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp .. 
0x78722b856687    498b47e8                mov rax, [r15-0x18]                                    
0x78722b85668b    4883f800                cmp rax, 0x0                                           
0x78722b85668f    0f84c2000000            jz 0x78722b856757             < C_Syntax.Compile_MoveImm+256 >
 .. )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm,  .. 
0x78722b856695    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x78722b85669a    0f8fb7000000            jg 0x78722b856757             < C_Syntax.Compile_MoveImm+256 >
 ..  MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0,  .. 
0x78722b8566a0    498bc6                  mov rax, r14                                           
 ..                 if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize .. 
0x78722b8566a3    4983ee08                sub r14, 0x8                                           
0x78722b8566a7    48833800                cmp qword [rax], 0x0                                   
0x78722b8566ab    7410                    jz 0x2b8566bd                 < C_Syntax.Compile_MoveImm+102 >
0x78722b8566ad    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b8566b2    7409                    jz 0x2b8566bd                 < C_Syntax.Compile_MoveImm+102 >
 ..   {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immS .. 
0x78722b8566b4    49c70601000000          mov qword [r14], 0x1                                   
0x78722b8566bb    eb07                    jmp 0x78722b8566c4            < C_Syntax.Compile_MoveImm+109 >
0x78722b8566bd    49c70600000000          mov qword [r14], 0x0                                   
0x78722b8566c4    0f8e8d000000            jle 0x78722b856757            < C_Syntax.Compile_MoveImm+256 >
 ..          {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || .. 
0x78722b8566ca    b802000000              mov eax, 0x2                                           
0x78722b8566cf    4983c608                add r14, 0x8                                           
0x78722b8566d3    498906                  mov [r14], rax                                         
 ..  {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > .. 
0x78722b8566d6    498b47d8                mov rax, [r15-0x28]                                    
0x78722b8566da    4983c608                add r14, 0x8                                           
0x78722b8566de    498906                  mov [r14], rax                                         
 ..           Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xff .. 
0x78722b8566e1    48c7c000000000          mov rax, 0x0                                           
0x78722b8566e8    4983c608                add r14, 0x8                                           
0x78722b8566ec    498906                  mov [r14], rax                                         
 ..        Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xfffff .. 
0x78722b8566ef    498b47e0                mov rax, [r15-0x20]                                    
0x78722b8566f3    4983c608                add r14, 0x8                                           
0x78722b8566f7    498906                  mov [r14], rax                                         
 ..    Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff  .. 
0x78722b8566fa    48c7c000000000          mov rax, 0x0                                           
0x78722b856701    4983c608                add r14, 0x8                                           
0x78722b856705    498906                  mov [r14], rax                                         
 .. Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) .. 
0x78722b856708    48c7c000000000          mov rax, 0x0                                           
0x78722b85670f    4983c608                add r14, 0x8                                           
0x78722b856713    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )    .. 
0x78722b856716    498b47e8                mov rax, [r15-0x18]                                    
0x78722b85671a    4983c608                add r14, 0x8                                           
0x78722b85671e    498906                  mov [r14], rax                                         
 .. ove ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )          .. 
0x78722b856721    48c7c000000000          mov rax, 0x0                                           
0x78722b856728    4983c608                add r14, 0x8                                           
0x78722b85672c    498906                  mov [r14], rax                                         
 ..  ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {   .. 
0x78722b85672f    498b47f0                mov rax, [r15-0x10]                                    
0x78722b856733    4983c608                add r14, 0x8                                           
0x78722b856737    498906                  mov [r14], rax                                         
 .. _MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {        .. 
0x78722b85673a    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85673e    4983c608                add r14, 0x8                                           
0x78722b856742    498906                  mov [r14], rax                                         
 ..  0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( im .. 
0x78722b856745    49ba8760852b72780000    mov r10, 0x78722b856087                                
0x78722b85674f    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x000078722b856087 >
0x78722b856752    e9dd000000              jmp 0x78722b856834            < C_Syntax.Compile_MoveImm+477 >
 .. ize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, RE .. 
0x78722b856757    49837ff808              cmp qword [r15-0x8], 0x8                               
0x78722b85675c    7d0f                    jge 0x2b85676d                < C_Syntax.Compile_MoveImm+278 >
0x78722b85675e    0f1f4000                nop [rax]                                              
 ..       else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0 .. 
0x78722b856762    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x78722b856767    0f8ec7000000            jle 0x78722b856834            < C_Syntax.Compile_MoveImm+477 >
 ..                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THR .. 
0x78722b85676d    b803000000              mov eax, 0x3                                           
0x78722b856772    4983c608                add r14, 0x8                                           
0x78722b856776    498906                  mov [r14], rax                                         
 ..                Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, d .. 
0x78722b856779    b803000000              mov eax, 0x3                                           
0x78722b85677e    4983c608                add r14, 0x8                                           
 ..   else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, .. 
0x78722b856782    498906                  mov [r14], rax                                         
 ..           Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp,  .. 
0x78722b856785    48c7c000000000          mov rax, 0x0                                           
0x78722b85678c    4983c608                add r14, 0x8                                           
0x78722b856790    498906                  mov [r14], rax                                         
 ..        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, imm .. 
0x78722b856793    b809000000              mov eax, 0x9                                           
0x78722b856798    4983c608                add r14, 0x8                                           
0x78722b85679c    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;   .. 
0x78722b85679f    48c7c000000000          mov rax, 0x0                                           
0x78722b8567a6    4983c608                add r14, 0x8                                           
0x78722b8567aa    498906                  mov [r14], rax                                         
 .. e_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;      .. 
0x78722b8567ad    48c7c000000000          mov rax, 0x0                                           
0x78722b8567b4    4983c608                add r14, 0x8                                           
0x78722b8567b8    498906                  mov [r14], rax                                         
 .. ove ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         .. 
0x78722b8567bb    48c7c000000000          mov rax, 0x0                                           
0x78722b8567c2    4983c608                add r14, 0x8                                           
0x78722b8567c6    498906                  mov [r14], rax                                         
 ..  ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }  .. 
0x78722b8567c9    48c7c000000000          mov rax, 0x0                                           
0x78722b8567d0    4983c608                add r14, 0x8                                           
0x78722b8567d4    498906                  mov [r14], rax                                         
 .. TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     .. 
0x78722b8567d7    498b47f0                mov rax, [r15-0x10]                                    
0x78722b8567db    4983c608                add r14, 0x8                                           
0x78722b8567df    498906                  mov [r14], rax                                         
 .. G, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }    .. 
0x78722b8567e2    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8567e6    4983c608                add r14, 0x8                                           
0x78722b8567ea    498906                  mov [r14], rax                                         
 ..  ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_ .. 
0x78722b8567ed    49ba8760852b72780000    mov r10, 0x78722b856087                                
0x78722b8567f7    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x000078722b856087 >
 ..              Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, d .. 
0x78722b8567fa    498b47e0                mov rax, [r15-0x20]                                    
0x78722b8567fe    4983c608                add r14, 0x8                                           
0x78722b856802    498906                  mov [r14], rax                                         
 ..          Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, .. 
0x78722b856805    b809000000              mov eax, 0x9                                           
0x78722b85680a    4983c608                add r14, 0x8                                           
0x78722b85680e    498906                  mov [r14], rax                                         
 .. ompile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, i .. 
0x78722b856811    498b47e8                mov rax, [r15-0x18]                                    
0x78722b856815    4983c608                add r14, 0x8                                           
0x78722b856819    498906                  mov [r14], rax                                         
 .. _Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize .. 
0x78722b85681c    498b47f8                mov rax, [r15-0x8]                                     
0x78722b856820    4983c608                add r14, 0x8                                           
0x78722b856824    498906                  mov [r14], rax                                         
 .. 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO .. 
0x78722b856827    49ba3f64852b72780000    mov r10, 0x78722b85643f                                
0x78722b856831    49ffd2                  call r10                      < C_Syntax.Compile_Move_Reg_To_Rm : 0x000078722b85643f >
 .. , THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856834    e988000000              jmp 0x78722b8568c1            < C_Syntax.Compile_MoveImm+618 >
 ..       }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856839    b803000000              mov eax, 0x3                                           
0x78722b85683e    4983c608                add r14, 0x8                                           
0x78722b856842    498906                  mov [r14], rax                                         
 ..     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856845    498b47d8                mov rax, [r15-0x28]                                    
0x78722b856849    4983c608                add r14, 0x8                                           
0x78722b85684d    498906                  mov [r14], rax                                         
 ..      else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856850    48c7c000000000          mov rax, 0x0                                           
0x78722b856857    4983c608                add r14, 0x8                                           
0x78722b85685b    498906                  mov [r14], rax                                         
 ..   else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b85685e    498b47e0                mov rax, [r15-0x20]                                    
0x78722b856862    4983c608                add r14, 0x8                                           
0x78722b856866    498906                  mov [r14], rax                                         
 .. se Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856869    48c7c000000000          mov rax, 0x0                                           
0x78722b856870    4983c608                add r14, 0x8                                           
0x78722b856874    498906                  mov [r14], rax                                         
 .. Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856877    48c7c000000000          mov rax, 0x0                                           
0x78722b85687e    4983c608                add r14, 0x8                                           
0x78722b856882    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856885    498b47e8                mov rax, [r15-0x18]                                    
0x78722b856889    4983c608                add r14, 0x8                                           
0x78722b85688d    498906                  mov [r14], rax                                         
 .. ove ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b856890    48c7c000000000          mov rax, 0x0                                           
0x78722b856897    4983c608                add r14, 0x8                                           
0x78722b85689b    498906                  mov [r14], rax                                         
 ..  ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b85689e    498b47f0                mov rax, [r15-0x10]                                    
0x78722b8568a2    4983c608                add r14, 0x8                                           
0x78722b8568a6    498906                  mov [r14], rax                                         
 .. _REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b8568a9    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8568ad    4983c608                add r14, 0x8                                           
0x78722b8568b1    498906                  mov [r14], rax                                         
 ..  immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b8568b4    49ba8760852b72780000    mov r10, 0x78722b856087                                
0x78722b8568be    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x000078722b856087 >
0x78722b8568c1    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8568c5    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8568c9    4983ee28                sub r14, 0x28                                          
 .. 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x78722b8568cd    c3                      ret                                                    
Word_Disassemble : word - 'Compile_MoveImm' :: codeSize = 631
Word : 0x0000787225fe5322 :: Compiled at : 0x000078722b856657
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 450.20 <::

 =============================
C_Syntax._Compile_X_Group1_Immediate <:> csl compiled word
SourceCode for C_Syntax._Compile_X_Group1_Immediate :> 
void _Compile_X_Group1_Immediate ( Boolean code, Boolean mod, Boolean rm, int64 disp, uint64 imm, Boolean iSize ) { byte opCode = 0x80 ; int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ; if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) ) { Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ; _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ; } else { rm &= 0xff, controlFlags |= REX_W ; if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ; else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ; Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ; } } 
Source code file location of _Compile_X_Group1_Immediate : "namespaces/compiler/x64.csl" : 562.28 :: we are now at : namespaces/compiler/x64.csl : 587.32
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b856e8b -- code size = 642 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_X_Group1_Immediate : definition = 0x000078722b856e8b : disassembly at namespaces/compiler/x64.csl : 587.32 :
0x78722b856e8b    4d897e08                mov [r14+0x8], r15                                     
0x78722b856e8f    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b856e93    4981c618000000          add r14, 0x18                                          
 .. an iSize ) {              byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == M .. 
0x78722b856e9a    49c7470880000000        mov qword [r15+0x8], 0x80                              
 .. e = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0 .. 
0x78722b856ea2    b812000000              mov eax, 0x12                                          
0x78722b856ea7    4983c608                add r14, 0x8                                           
0x78722b856eab    498906                  mov [r14], rax                                         
 ..  controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )      .. 
0x78722b856eae    498b47e8                mov rax, [r15-0x18]                                    
0x78722b856eb2    4883f800                cmp rax, 0x0                                           
0x78722b856eb6    0f8411000000            jz 0x78722b856ecd             < C_Syntax._Compile_X_Group1_Immediate+66 >
 .. lFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {       .. 
0x78722b856ebc    b808000000              mov eax, 0x8                                           
0x78722b856ec1    4983c608                add r14, 0x8                                           
0x78722b856ec5    498906                  mov [r14], rax                                         
0x78722b856ec8    e90e000000              jmp 0x78722b856edb            < C_Syntax._Compile_X_Group1_Immediate+80 >
 .. ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                .. 
0x78722b856ecd    48c7c000000000          mov rax, 0x0                                           
0x78722b856ed4    4983c608                add r14, 0x8                                           
0x78722b856ed8    498906                  mov [r14], rax                                         
 .. IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                  .. 
0x78722b856edb    498b0e                  mov rcx, [r14]                                         
0x78722b856ede    498b46f8                mov rax, [r14-0x8]                                     
0x78722b856ee2    4983ee10                sub r14, 0x10                                          
 .. nt64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )  .. 
0x78722b856ee6    480bc1                  or rax, rcx                                            
 ..        byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > .. 
0x78722b856ee9    49894710                mov [r15+0x10], rax                                    
 ..  ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_Mov .. 
0x78722b856eed    49837fd800              cmp qword [r15-0x28], 0x0                              
0x78722b856ef2    0f85e2000000            jnz 0x78722b856fda            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..  ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_R .. 
0x78722b856ef8    49837ff804              cmp qword [r15-0x8], 0x4                               
0x78722b856efd    0f8f35000000            jg 0x78722b856f38             < C_Syntax._Compile_X_Group1_Immediate+173 >
 ..  mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize )  .. 
0x78722b856f03    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x78722b856f08    0f8ecc000000            jle 0x78722b856fda            < C_Syntax._Compile_X_Group1_Immediate+335 >
 .. P_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( .. 
0x78722b856f0e    498bc6                  mov rax, r14                                           
0x78722b856f11    4983ee08                sub r14, 0x8                                           
0x78722b856f15    48833800                cmp qword [rax], 0x0                                   
0x78722b856f19    7410                    jz 0x2b856f2b                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x78722b856f1b    488378f800              cmp qword [rax-0x8], 0x0                               
0x78722b856f20    7409                    jz 0x2b856f2b                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x78722b856f22    49c70601000000          mov qword [r14], 0x1                                   
0x78722b856f29    eb07                    jmp 0x78722b856f32            < C_Syntax._Compile_X_Group1_Immediate+167 >
0x78722b856f2b    49c70600000000          mov qword [r14], 0x0                                   
0x78722b856f32    0f8ea2000000            jle 0x78722b856fda            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..              Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL )  .. 
0x78722b856f38    b809000000              mov eax, 0x9                                           
0x78722b856f3d    4983c608                add r14, 0x8                                           
0x78722b856f41    498906                  mov [r14], rax                                         
 ..    Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }    .. 
0x78722b856f44    498b47f0                mov rax, [r15-0x10]                                    
0x78722b856f48    4983c608                add r14, 0x8                                           
0x78722b856f4c    498906                  mov [r14], rax                                         
 .. mpile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     els .. 
0x78722b856f4f    498b47f8                mov rax, [r15-0x8]                                     
0x78722b856f53    4983c608                add r14, 0x8                                           
0x78722b856f57    498906                  mov [r14], rax                                         
 .. fff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_ .. 
0x78722b856f5a    49bad368852b72780000    mov r10, 0x78722b8568d3                                
0x78722b856f64    49ffd2                  call r10                      < C_Syntax.Compile_MoveImm_To_Reg : 0x000078722b8568d3 >
 .. iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFla .. 
0x78722b856f67    498b47d0                mov rax, [r15-0x30]                                    
0x78722b856f6b    4983c608                add r14, 0x8                                           
0x78722b856f6f    498906                  mov [r14], rax                                         
 .. ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |=  .. 
0x78722b856f72    b803000000              mov eax, 0x3                                           
0x78722b856f77    4983c608                add r14, 0x8                                           
0x78722b856f7b    498906                  mov [r14], rax                                         
 ..        _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W .. 
0x78722b856f7e    48c7c000000000          mov rax, 0x0                                           
0x78722b856f85    4983c608                add r14, 0x8                                           
0x78722b856f89    498906                  mov [r14], rax                                         
 ..   _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;    .. 
0x78722b856f8c    b809000000              mov eax, 0x9                                           
0x78722b856f91    4983c608                add r14, 0x8                                           
0x78722b856f95    498906                  mov [r14], rax                                         
 .. _X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if (  .. 
0x78722b856f98    498b47e0                mov rax, [r15-0x20]                                    
0x78722b856f9c    4983c608                add r14, 0x8                                           
0x78722b856fa0    498906                  mov [r14], rax                                         
 .. roup1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iS .. 
0x78722b856fa3    48c7c000000000          mov rax, 0x0                                           
0x78722b856faa    4983c608                add r14, 0x8                                           
0x78722b856fae    498906                  mov [r14], rax                                         
 .. p1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize .. 
0x78722b856fb1    498b47e8                mov rax, [r15-0x18]                                    
0x78722b856fb5    4983c608                add r14, 0x8                                           
0x78722b856fb9    498906                  mov [r14], rax                                         
 .. ode, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYT .. 
0x78722b856fbc    b808000000              mov eax, 0x8                                           
0x78722b856fc1    4983c608                add r14, 0x8                                           
0x78722b856fc5    498906                  mov [r14], rax                                         
 .. eg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm .. 
0x78722b856fc8    49ba2c6c852b72780000    mov r10, 0x78722b856c2c                                
0x78722b856fd2    49ffd2                  call r10                      < C_Syntax._Compile_X_Group1 : 0x000078722b856c2c >
0x78722b856fd5    e926010000              jmp 0x78722b857100            < C_Syntax._Compile_X_Group1_Immediate+629 >
 ..  ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |=  .. 
0x78722b856fda    498367e0ff              and qword [r15-0x20], 0xffffffffffffffff                              
 .. {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if (  .. 
0x78722b856fdf    49834f1020              or qword [r15+0x10], 0x20                              
 .. controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( .. 
0x78722b856fe4    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b856fe9    7f34                    jg 0x2b85701f                 < C_Syntax._Compile_X_Group1_Immediate+404 >
0x78722b856feb    0f1f4000                nop [rax]                                              
 ..      if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) o .. 
0x78722b856fef    498b47f0                mov rax, [r15-0x10]                                    
0x78722b856ff3    4983c608                add r14, 0x8                                           
 ..    {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if .. 
0x78722b856ff7    498906                  mov [r14], rax                                         
 .. W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 .. 
0x78722b856ffa    49bac054852b72780000    mov r10, 0x78722b8554c0                                
0x78722b857004    49ffd2                  call r10                      < C_Syntax.Abs : 0x000078722b8554c0 >
0x78722b857007    b800010000              mov eax, 0x100                                         
 ..  ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |=  .. 
0x78722b85700c    488bc8                  mov rcx, rax                                           
0x78722b85700f    498b06                  mov rax, [r14]                                         
0x78722b857012    4983ee08                sub r14, 0x8                                           
 .. f ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode  .. 
0x78722b857016    483bc1                  cmp rax, rcx                                           
0x78722b857019    7c0e                    jl 0x2b857029                 < C_Syntax._Compile_X_Group1_Immediate+414 >
0x78722b85701b    0f1f4000                nop [rax]                                              
 ..  ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;       .. 
0x78722b85701f    49834f0801              or qword [r15+0x8], 0x1                                
 ..  Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;         .. 
0x78722b857024    e948000000              jmp 0x78722b857071            < C_Syntax._Compile_X_Group1_Immediate+486 >
 .. ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               .. 
0x78722b857029    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b85702e    7e34                    jle 0x2b857064                < C_Syntax._Compile_X_Group1_Immediate+473 >
0x78722b857030    0f1f4000                nop [rax]                                              
 .. lse if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Ins .. 
0x78722b857034    498b47f0                mov rax, [r15-0x10]                                    
0x78722b857038    4983c608                add r14, 0x8                                           
0x78722b85703c    498906                  mov [r14], rax                                         
 ..      else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWri .. 
0x78722b85703f    49bac054852b72780000    mov r10, 0x78722b8554c0                                
0x78722b857049    49ffd2                  call r10                      < C_Syntax.Abs : 0x000078722b8554c0 >
0x78722b85704c    b800010000              mov eax, 0x100                                         
 ..  ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction .. 
0x78722b857051    488bc8                  mov rcx, rax                                           
0x78722b857054    498b06                  mov rax, [r14]                                         
0x78722b857057    4983ee08                sub r14, 0x8                                           
 ..  ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instructi .. 
0x78722b85705b    483bc1                  cmp rax, rcx                                           
0x78722b85705e    7d11                    jge 0x2b857071                < C_Syntax._Compile_X_Group1_Immediate+486 >
0x78722b857060    0f1f4000                nop [rax]                                              
 .. | ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mo .. 
0x78722b857064    49834f0803              or qword [r15+0x8], 0x3                                
 ..  imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code,  .. 
0x78722b857069    49c747f801000000        mov qword [r15-0x8], 0x1                               
 .. pile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b857071    48c7c000000000          mov rax, 0x0                                           
0x78722b857078    4983c608                add r14, 0x8                                           
0x78722b85707c    498906                  mov [r14], rax                                         
 .. e_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b85707f    498b4708                mov rax, [r15+0x8]                                     
0x78722b857083    4983c608                add r14, 0x8                                           
 .. ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, .. 
0x78722b857087    498906                  mov [r14], rax                                         
 .. ateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b85708a    498b47d8                mov rax, [r15-0x28]                                    
0x78722b85708e    4983c608                add r14, 0x8                                           
0x78722b857092    498906                  mov [r14], rax                                         
 .. ite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b857095    498b47d0                mov rax, [r15-0x30]                                    
0x78722b857099    4983c608                add r14, 0x8                                           
0x78722b85709d    498906                  mov [r14], rax                                         
 .. struction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570a0    498b47e0                mov rax, [r15-0x20]                                    
0x78722b8570a4    4983c608                add r14, 0x8                                           
0x78722b8570a8    498906                  mov [r14], rax                                         
 .. ction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570ab    498b4710                mov rax, [r15+0x10]                                    
0x78722b8570af    4983c608                add r14, 0x8                                           
0x78722b8570b3    498906                  mov [r14], rax                                         
 ..  opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570b6    48c7c000000000          mov rax, 0x0                                           
0x78722b8570bd    4983c608                add r14, 0x8                                           
0x78722b8570c1    498906                  mov [r14], rax                                         
 .. Code, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570c4    498b47e8                mov rax, [r15-0x18]                                    
0x78722b8570c8    4983c608                add r14, 0x8                                           
0x78722b8570cc    498906                  mov [r14], rax                                         
 .. mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570cf    48c7c000000000          mov rax, 0x0                                           
0x78722b8570d6    4983c608                add r14, 0x8                                           
0x78722b8570da    498906                  mov [r14], rax                                         
 .. , code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570dd    498b47f0                mov rax, [r15-0x10]                                    
0x78722b8570e1    4983c608                add r14, 0x8                                           
0x78722b8570e5    498906                  mov [r14], rax                                         
 .. e, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b8570e8    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8570ec    4983c608                add r14, 0x8                                           
0x78722b8570f0    498906                  mov [r14], rax                                         
 .. e = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, i .. 
0x78722b8570f3    49ba0d5f852b72780000    mov r10, 0x78722b855f0d                                
0x78722b8570fd    49ffd2                  call r10                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x000078722b855f0d >
0x78722b857100    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b857104    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b857108    4983ee30                sub r14, 0x30                                          
 .. ags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x78722b85710c    c3                      ret                                                    
Word_Disassemble : word - '_Compile_X_Group1_Immediate' :: codeSize = 642
Word : 0x0000787225c03708 :: Compiled at : 0x000078722b856e8b
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 587.32 <::

 =============================
C_Syntax._Compile_Move_DataStackN_ToReg <:> csl compiled word
SourceCode for C_Syntax._Compile_Move_DataStackN_ToReg :> 
void _Compile_Move_DataStackN_ToReg ( reg, n ) { Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
Source code file location of _Compile_Move_DataStackN_ToReg : "namespaces/compiler/x64.csl" : 640.31 :: we are now at : namespaces/compiler/x64.csl : 645.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857695 -- code size = 178 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_Move_DataStackN_ToReg : definition = 0x000078722b857695 : disassembly at namespaces/compiler/x64.csl : 645.35 :
0x78722b857695    4d897e08                mov [r14+0x8], r15                                     
0x78722b857699    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85769d    4981c608000000          add r14, 0x8                                           
 .. eg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576a4    b803000000              mov eax, 0x3                                           
0x78722b8576a9    4983c608                add r14, 0x8                                           
0x78722b8576ad    498906                  mov [r14], rax                                         
 .. reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576b0    48c7c000000000          mov rax, 0x0                                           
0x78722b8576b7    4983c608                add r14, 0x8                                           
0x78722b8576bb    498906                  mov [r14], rax                                         
 .. n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576be    498b47f0                mov rax, [r15-0x10]                                    
0x78722b8576c2    4983c608                add r14, 0x8                                           
0x78722b8576c6    498906                  mov [r14], rax                                         
 ..         Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576c9    b80e000000              mov eax, 0xe                                           
0x78722b8576ce    4983c608                add r14, 0x8                                           
0x78722b8576d2    498906                  mov [r14], rax                                         
 ..    Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576d5    b808000000              mov eax, 0x8                                           
0x78722b8576da    4983c608                add r14, 0x8                                           
0x78722b8576de    498906                  mov [r14], rax                                         
 .. Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576e1    48c7c000000000          mov rax, 0x0                                           
0x78722b8576e8    4983c608                add r14, 0x8                                           
0x78722b8576ec    498906                  mov [r14], rax                                         
 .. pile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576ef    498b47f8                mov rax, [r15-0x8]                                     
 .. _Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576f3    b908000000              mov ecx, 0x8                                           
 .. le_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b8576f8    480fafc1                imul rax, rcx                                          
0x78722b8576fc    4983c608                add r14, 0x8                                           
0x78722b857700    498906                  mov [r14], rax                                         
 .. ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b857703    48c7c000000000          mov rax, 0x0                                           
0x78722b85770a    4983c608                add r14, 0x8                                           
0x78722b85770e    498906                  mov [r14], rax                                         
 .. EG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b857711    48c7c000000000          mov rax, 0x0                                           
0x78722b857718    4983c608                add r14, 0x8                                           
0x78722b85771c    498906                  mov [r14], rax                                         
 ..  MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b85771f    48c7c000000000          mov rax, 0x0                                           
0x78722b857726    4983c608                add r14, 0x8                                           
0x78722b85772a    498906                  mov [r14], rax                                         
 .. _DataStackN_ToReg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b85772d    49ba8760852b72780000    mov r10, 0x78722b856087                                
0x78722b857737    49ffd2                  call r10                      < C_Syntax.Compile_Move : 0x000078722b856087 >
0x78722b85773a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85773e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b857742    4983ee10                sub r14, 0x10                                          
 .. reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x78722b857746    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Move_DataStackN_ToReg' :: codeSize = 178
Word : 0x0000787225c1e9b8 :: Compiled at : 0x000078722b857695
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 645.35 <::

 =============================
Interpreter._Compile_Stack_PopToReg <:> csl compiled word
SourceCode for Interpreter._Compile_Stack_PopToReg :> 
: _Compile_Stack_PopToReg ( reg ) _Compile_Move_DataStackN_ToReg ( reg, 0 ) _Compile_SUBI_DSP ( CELL ) ; 
Source code file location of _Compile_Stack_PopToReg : "namespaces/compiler/x64.csl" : 655.2 :: we are now at : namespaces/compiler/x64.csl : 660.28
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85774c -- code size = 91 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._Compile_Stack_PopToReg : definition = 0x000078722b85774c : disassembly at namespaces/compiler/x64.csl : 660.28 :
0x78722b85774c    4d897e08                mov [r14+0x8], r15                                     
0x78722b857750    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b857754    4981c608000000          add r14, 0x8                                           
 ..      _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x78722b85775b    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85775f    4983c608                add r14, 0x8                                           
0x78722b857763    498906                  mov [r14], rax                                         
 .. _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x78722b857766    48c7c000000000          mov rax, 0x0                                           
0x78722b85776d    4983c608                add r14, 0x8                                           
0x78722b857771    498906                  mov [r14], rax                                         
 .. : _Compile_Stack_PopToReg ( reg )     _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; .. 
0x78722b857774    49ba9576852b72780000    mov r10, 0x78722b857695                                
0x78722b85777e    49ffd2                  call r10                      < C_Syntax._Compile_Move_DataStackN_ToReg : 0x000078722b857695 >
 .. reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x78722b857781    b808000000              mov eax, 0x8                                           
0x78722b857786    4983c608                add r14, 0x8                                           
0x78722b85778a    498906                  mov [r14], rax                                         
 .. _DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x78722b85778d    49ba9f73852b72780000    mov r10, 0x78722b85739f                                
0x78722b857797    49ffd2                  call r10                      < C_Syntax._Compile_SUBI_DSP : 0x000078722b85739f >
0x78722b85779a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85779e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8577a2    4983ee08                sub r14, 0x8                                           
 .. SUBI_DSP ( CELL )                     ; 
0x78722b8577a6    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Stack_PopToReg' :: codeSize = 91
Word : 0x0000787225c201c8 :: Compiled at : 0x000078722b85774c
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 660.28 <::

 =============================
Combinators.iax <:> csl compiled word
SourceCode for Combinators.iax :> 
asm: iax _Compile_Stack_PopToReg ( R8D ) _Compile_CallThruReg ( R8D ) ;asm 
Source code file location of iax : "namespaces/compiler/x64.csl" : 665.5 :: we are now at : namespaces/compiler/x64.csl : 673.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8577bb -- code size = 11 bytes
 -----------------------------
Word :: Combinators.iax : definition = 0x000078722b8577bb : disassembly at namespaces/compiler/x64.csl : 673.17 :
 ..                         asm: iax      _Compile_Stack_PopToReg ( R8D )                                       _Compile_CallThruReg ( R8D )  .. 
0x78722b8577bb    4d8b06                  mov r8, [r14]                                          
0x78722b8577be    4983ee08                sub r14, 0x8                                           
 ..                                       _Compile_CallThruReg ( R8D )                                       ;asm  .. 
0x78722b8577c2    49ffd0                  call r8                                                
 ..                                       ;asm  .. 
0x78722b8577c5    c3                      ret                                                    
Word_Disassemble : word - 'iax' :: codeSize = 11
Word : 0x0000787225c21318 :: Compiled at : 0x000078722b8577bb
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 673.17 <::

 =============================
Combinators.Compile_Stack_Push_R8D <:> csl compiled word
SourceCode for Combinators.Compile_Stack_Push_R8D :> 
: Compile_Stack_Push_R8D ( ) _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
Source code file location of Compile_Stack_Push_R8D : "namespaces/compiler/x64.csl" : 696.2 :: we are now at : namespaces/compiler/x64.csl : 701.27
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857a26 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: Combinators.Compile_Stack_Push_R8D : definition = 0x000078722b857a26 : disassembly at namespaces/compiler/x64.csl : 701.27 :
 .. _Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x78722b857a26    b808000000              mov eax, 0x8                                           
0x78722b857a2b    4983c608                add r14, 0x8                                           
0x78722b857a2f    498906                  mov [r14], rax                                         
 ..      : Compile_Stack_Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;  .. 
0x78722b857a32    49ba2979852b72780000    mov r10, 0x78722b857929                                
0x78722b857a3c    49ffd2                  call r10                      < Combinators._Compile_ADDI_DSP : 0x000078722b857929 >
 .. LL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x78722b857a3f    b80e000000              mov eax, 0xe                                           
0x78722b857a44    4983c608                add r14, 0x8                                           
0x78722b857a48    498906                  mov [r14], rax                                         
 ..     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x78722b857a4b    48c7c000000000          mov rax, 0x0                                           
0x78722b857a52    4983c608                add r14, 0x8                                           
0x78722b857a56    498906                  mov [r14], rax                                         
 ..  _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x78722b857a59    b808000000              mov eax, 0x8                                           
0x78722b857a5e    4983c608                add r14, 0x8                                           
0x78722b857a62    498906                  mov [r14], rax                                         
 ..  )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x78722b857a65    49ba8175852b72780000    mov r10, 0x78722b857581                                
0x78722b857a6f    49ffd2                  call r10                      < C_Syntax._Compile_MoveReg_To_StackN : 0x000078722b857581 >
 .. ile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x78722b857a72    c3                      ret                                                    
Word_Disassemble : word - 'Compile_Stack_Push_R8D' :: codeSize = 77
Word : 0x0000787225c28148 :: Compiled at : 0x000078722b857a26
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 701.27 <::

 =============================
User.qeval <:> csl compiled word
SourceCode for User.qeval :> 
: qeval s iax ; 
Source code file location of qeval : "namespaces/compiler/x64.csl" : 704.2 :: we are now at : namespaces/compiler/x64.csl : 705.19
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857a87 -- code size = 37 bytes
 -----------------------------
Word :: User.qeval : definition = 0x000078722b857a87 : disassembly at namespaces/compiler/x64.csl : 705.19 :
 ..                               : qeval s iax ;  .. 
0x78722b857a87    49bb301cef89c8600000    mov r11, 0x60c889ef1c30                                
0x78722b857a91    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b857a9b    49ffd2                  call r10                      < Debug.stack : 0x000060c889ef1c30 >
 ..                             : qeval s iax ;  .. 
0x78722b857a9e    49babb77852b72780000    mov r10, 0x78722b8577bb                                
0x78722b857aa8    49ffd2                  call r10                      < Combinators.iax : 0x000078722b8577bb >
 ..                         : qeval s iax ;  .. 
0x78722b857aab    c3                      ret                                                    
Word_Disassemble : word - 'qeval' :: codeSize = 37
Word : 0x0000787225c28d88 :: Compiled at : 0x000078722b857a87
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 705.19 <::

 =============================
User.stest <:> csl compiled word
SourceCode for User.stest :> 
asm: stest _Compile_MoveTOS_To_R8D ( ) _Compile_Move_DataStackN_ToReg ( R8D, 0 ) Compile_Stack_Push_R8D ( ) _Compile_SUBI_DSP ( CELL ) ;asm 
Source code file location of stest : "namespaces/compiler/x64.csl" : 708.5 :: we are now at : namespaces/compiler/x64.csl : 714.10
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857ac0 -- code size = 18 bytes
 -----------------------------
Word :: User.stest : definition = 0x000078722b857ac0 : disassembly at namespaces/compiler/x64.csl : 714.10 :
 ..                        asm: stest     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8 .. 
0x78722b857ac0    4d8b06                  mov r8, [r14]                                          
 .. t     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CE .. 
0x78722b857ac3    4d8b06                  mov r8, [r14]                                          
 .. _Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x78722b857ac6    4983c608                add r14, 0x8                                           
0x78722b857aca    4d8906                  mov [r14], r8                                          
 ..  )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x78722b857acd    4983ee08                sub r14, 0x8                                           
 .. 8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x78722b857ad1    c3                      ret                                                    
Word_Disassemble : word - 'stest' :: codeSize = 18
Word : 0x0000787225c29298 :: Compiled at : 0x000078722b857ac0
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 714.10 <::
 
this is some purposefully funky code for testing

DataStack at : namespaces/compiler/x64.csl : 718.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 718.10 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 x64 test ok
 =============================
Stack.ndup <:> csl compiled word
SourceCode for Stack.ndup :> 
asm: ndup _Compile_MoveTOS_To_R8D ( ) _Compile_SUBI_DSP ( CELL ) _Compile_Move_DataStackN_ToReg ( R9D, 0 ) "start" label _Compile_TESTreg_Toreg ( R8D, R8D ) "end" 0 EQ jcc _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R9D ) _Compile_IncDecreg ( DEC, R8D ) "start" goto "end" label;asm 
Source code file location of ndup : "namespaces/compiler/x64.csl" : 722.5 :: we are now at : namespaces/compiler/x64.csl : 736.22
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857ae6 -- code size = 35 bytes
 -----------------------------
Word :: Stack.ndup : definition = 0x000078722b857ae6 : disassembly at namespaces/compiler/x64.csl : 736.22 :
 ..                         asm: ndup     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D .. 
0x78722b857ae6    4d8b06                  mov r8, [r14]                                          
 .. p     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Com .. 
0x78722b857ae9    4983ee08                sub r14, 0x8                                           
 ..  )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D ) .. 
0x78722b857aed    4d8b0e                  mov r9, [r14]                                          
 .. oReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_ .. 
0x78722b857af0    4585c0                  test r8d, r8d                                          
 .. reg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncD .. 
0x78722b857af3    0f840f000000            jz 0x78722b857b08             < Stack.ndup+34 >
 .. g ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg (  .. 
0x78722b857af9    4983c608                add r14, 0x8                                           
 .. cc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     .. 
0x78722b857afd    4d890e                  mov [r14], r9                                          
 .. MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  .. 
0x78722b857b00    41ffc8                  dec r8d                                                
 .. le_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  .. 
0x78722b857b03    e9e8ffffff              jmp 0x78722b857af0            < Stack.ndup+10 >
 .. R8D )     "start" goto     "end" label;asm  .. 
0x78722b857b08    c3                      ret                                                    
Word_Disassemble : word - 'ndup' :: codeSize = 35
Word : 0x0000787225c29e68 :: Compiled at : 0x000078722b857ae6
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 736.22 <::

DataStack at : namespaces/compiler/x64.csl : 737.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 737.27 :
DataStack depth =  11 : Dsp (R14) = Top = 0x000078722c065b08, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065b08 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000078722c065b00 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000078722c065af8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000078722c065af0 > = 0x0000000000000007
  DataStack   [  -4 ] < 0x000078722c065ae8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x000078722c065ae0 > = 0x0000000000000007
  DataStack   [  -6 ] < 0x000078722c065ad8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x000078722c065ad0 > = 0x0000000000000007
  DataStack   [  -8 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000078722c065ab8 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 737.37 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Asm.testAsm <:> csl compiled word
SourceCode for Asm.testAsm :> 
asm: testAsm MOVrr RDX, RAX MOVrr RAX, RBX MOVrr RBX, RAX MOVrr RAX, RDX ;asm 
Source code file location of testAsm : "namespaces/compiler/x64.csl" : 786.5 :: we are now at : namespaces/compiler/x64.csl : 792.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857d6b -- code size = 13 bytes
 -----------------------------
Word :: Asm.testAsm : definition = 0x000078722b857d6b : disassembly at namespaces/compiler/x64.csl : 792.12 :
 ..                      asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  .. 
0x78722b857d6b    488bd0                  mov rdx, rax                                           
 ..   asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  .. 
0x78722b857d6e    488bc3                  mov rax, rbx                                           
 .. MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x78722b857d71    488bd8                  mov rbx, rax                                           
 .. MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x78722b857d74    488bc2                  mov rax, rdx                                           
 ..     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x78722b857d77    c3                      ret                                                    
Word_Disassemble : word - 'testAsm' :: codeSize = 13
Word : 0x0000787225c32148 :: Compiled at : 0x000078722b857d6b
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 792.12 <::

 _TestDone_ = 1

including namespaces/test/dev.csl at namespaces/ninit.csl : 13.22 ...
 5040 5040
 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :> 
int factoriali ( int8 REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n ; n = n - 1 ; res = res * (n--) ; } return res; } 
Source code file location of factoriali : "namespaces/test/dev.csl" : 22.15 :: we are now at : namespaces/test/dev.csl : 45.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857e0c -- code size = 39 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x000078722b857e0c : disassembly at namespaces/test/dev.csl : 45.15 :
0x78722b857e0c    498b3e                  mov rdi, [r14]                                         
 .. li ( int8 REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;    .. 
0x78722b857e0f    be01000000              mov esi, 0x1                                           
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return r .. 
0x78722b857e14    4883ff02                cmp rdi, 0x2                                           
0x78722b857e18    7c15                    jl 0x2b857e2f                 < C_Syntax.factoriali+35 >
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x78722b857e1a    480faff7                imul rsi, rdi                                          
 .. )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x78722b857e1e    4883ef01                sub rdi, 0x1                                           
 ..  * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x78722b857e22    480faff7                imul rsi, rdi                                          
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x78722b857e26    48ffcf                  dec rdi                                                
0x78722b857e29    4883ff02                cmp rdi, 0x2                                           
0x78722b857e2d    7deb                    jge 0x2b857e1a                < C_Syntax.factoriali+14 >
 .. s = res * (n--) ;     }        return res; }  .. 
0x78722b857e2f    498936                  mov [r14], rsi                                         
 .. es * (n--) ;     }        return res; }  .. 
0x78722b857e32    c3                      ret                                                    
Word_Disassemble : word - 'factoriali' :: codeSize = 39
Word : 0x0000787225c3466c :: Compiled at : 0x000078722b857e0c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 45.15 <::

 =============================
C_Syntax.factoriali2 <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali2 :> 
int factoriali2 ( int8 REG n | REG res ) { res = 1; do { res = res * n ; n = n - 1 ; } while ( n >= 2 ) ; return res; } 
Source code file location of factoriali2 : "namespaces/test/dev.csl" : 49.16 :: we are now at : namespaces/test/dev.csl : 59.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857e47 -- code size = 26 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali2 : definition = 0x000078722b857e47 : disassembly at namespaces/test/dev.csl : 59.16 :
0x78722b857e47    498b3e                  mov rdi, [r14]                                         
 .. i2 ( int8 REG n | REG res ) {     res = 1;     do      {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x78722b857e4a    be01000000              mov esi, 0x1                                           
 ..  ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x78722b857e4f    480faff7                imul rsi, rdi                                          
 ..       {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x78722b857e53    4883ef01                sub rdi, 0x1                                           
 .. * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x78722b857e57    4883ff02                cmp rdi, 0x2                                           
0x78722b857e5b    7df2                    jge 0x2b857e4f                < C_Syntax.factoriali2+8 >
 ..   }     while ( n >= 2 ) ;     return res; } 
0x78722b857e5d    498936                  mov [r14], rsi                                         
 ..    while ( n >= 2 ) ;     return res; } 
0x78722b857e60    c3                      ret                                                    
Word_Disassemble : word - 'factoriali2' :: codeSize = 26
Word : 0x0000787225c3998c :: Compiled at : 0x000078722b857e47
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 59.16 <::
 5040 5040 5040
 =============================
User.factorial006 <:> csl compiled word
SourceCode for User.factorial006 :> 
: factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
Source code file location of factorial006 : "namespaces/test/dev.csl" : 70.2 :: we are now at : namespaces/test/dev.csl : 72.25
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857ec3 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial006 : definition = 0x000078722b857ec3 : disassembly at namespaces/test/dev.csl : 72.25 :
 ..                        : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x78722b857ec3    498b3e                  mov rdi, [r14]                                         
 : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x78722b857ec6    be01000000              mov esi, 0x1                                           
 .. 6 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b857ecb    4883ff01                cmp rdi, 0x1                                           
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b857ecf    7e0d                    jle 0x2b857ede                < User.factorial006+27 >
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b857ed1    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b857ed5    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b857ed8    4883ff01                cmp rdi, 0x1                                           
0x78722b857edc    7ff3                    jg 0x2b857ed1                 < User.factorial006+14 >
 .. n @ * rec store n -- } while return ( rec @ ) ; 
0x78722b857ede    498936                  mov [r14], rsi                                         
 .. c store n -- } while return ( rec @ ) ; 
0x78722b857ee1    c3                      ret                                                    
Word_Disassemble : word - 'factorial006' :: codeSize = 31
Word : 0x0000787225c4015c :: Compiled at : 0x000078722b857ec3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 72.25 <::
 5040 factorial006  : ok


 =============================
User.qexp <:> csl compiled word
SourceCode for User.qexp :> 
: qexp dup 1 <= if{ }else{ dup -- qexp * }fi ; 
Source code file location of qexp : "namespaces/test/dev.csl" : 74.2 :: we are now at : namespaces/test/dev.csl : 74.64
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b857ef6 -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: User.qexp : definition = 0x000078722b857ef6 : disassembly at namespaces/test/dev.csl : 74.64 :
 ..                                : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857ef6    498b06                  mov rax, [r14]                                         
0x78722b857ef9    4983c608                add r14, 0x8                                           
0x78722b857efd    498906                  mov [r14], rax                                         
0x78722b857f00    b801000000              mov eax, 0x1                                           
 ..                            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f05    488bc8                  mov rcx, rax                                           
0x78722b857f08    498b06                  mov rax, [r14]                                         
0x78722b857f0b    4983ee08                sub r14, 0x8                                           
 ..                          : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f0f    483bc1                  cmp rax, rcx                                           
0x78722b857f12    0f8f05000000            jg 0x78722b857f1d             < User.qexp+39 >
 ..                   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f18    e936000000              jmp 0x78722b857f53            < User.qexp+93 >
 ..            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f1d    498b06                  mov rax, [r14]                                         
 ..                       : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f20    4983c608                add r14, 0x8                                           
0x78722b857f24    498906                  mov [r14], rax                                         
0x78722b857f27    498b06                  mov rax, [r14]                                         
0x78722b857f2a    4983ee08                sub r14, 0x8                                           
 ..        : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f2e    48ffc8                  dec rax                                                
0x78722b857f31    4983c608                add r14, 0x8                                           
0x78722b857f35    498906                  mov [r14], rax                                         
 ..     : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f38    e8b9ffffff              call 0x78722b857ef6           < User.qexp : 0x000078722b857ef6 >
0x78722b857f3d    498b0e                  mov rcx, [r14]                                         
0x78722b857f40    498b46f8                mov rax, [r14-0x8]                                     
0x78722b857f44    4983ee10                sub r14, 0x10                                          
   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x78722b857f48    480fafc1                imul rax, rcx                                          
0x78722b857f4c    4983c608                add r14, 0x8                                           
0x78722b857f50    498906                  mov [r14], rax                                         
 .. dup 1 <= if{ }else{ dup -- qexp * }fi ; 
0x78722b857f53    c3                      ret                                                    
Word_Disassemble : word - 'qexp' :: codeSize = 94
Word : 0x0000787225c42dac :: Compiled at : 0x000078722b857ef6
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 74.64 <::
 5040 5040 5040 5040
 5040
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :> 
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs3 : "namespaces/test/dev.csl" : 84.7 :: we are now at : namespaces/test/dev.csl : 92.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858129 -- code size = 73 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x000078722b858129 : disassembly at namespaces/test/dev.csl : 92.20 :
0x78722b858129    4d897e08                mov [r14+0x8], r15                                     
0x78722b85812d    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858131    4981c610000000          add r14, 0x10                                          
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x78722b858138    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b858140    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b858145    7e1b                    jle 0x2b858162                < C_Syntax.faccs3+57 >
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b858147    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b85814b    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b85814f    480fafc1                imul rax, rcx                                          
0x78722b858153    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b858157    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b85815b    49837ff801              cmp qword [r15-0x8], 0x1                               
0x78722b858160    7fe5                    jg 0x2b858147                 < C_Syntax.faccs3+30 >
 ..           rec = rec * n ;      }      return rec ; } 
0x78722b858162    498b4708                mov rax, [r15+0x8]                                     
0x78722b858166    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85816a    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x78722b85816e    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x78722b858171    c3                      ret                                                    
Word_Disassemble : word - 'faccs3' :: codeSize = 73
Word : 0x0000787225c4aa2c :: Compiled at : 0x000078722b858129
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 92.20 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc = facc * ( n -- ) ; } return facc ; } 
Source code file location of fac5 : "namespaces/test/dev.csl" : 98.5 :: we are now at : namespaces/test/dev.csl : 108.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858186 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x000078722b858186 : disassembly at namespaces/test/dev.csl : 108.21 :
0x78722b858186    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x78722b858189    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x78722b85818e    4883ff01                cmp rdi, 0x1                                           
0x78722b858192    7e0d                    jle 0x2b8581a1                < C_Syntax.fac5+27 >
 .. 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x78722b858194    480faff7                imul rsi, rdi                                          
 ..    {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x78722b858198    48ffcf                  dec rdi                                                
0x78722b85819b    4883ff01                cmp rdi, 0x1                                           
0x78722b85819f    7ff3                    jg 0x2b858194                 < C_Syntax.fac5+14 >
 .. c = facc * ( n -- ) ;    }     return facc ; } 
0x78722b8581a1    498936                  mov [r14], rsi                                         
 .. c * ( n -- ) ;    }     return facc ; } 
0x78722b8581a4    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 31
Word : 0x0000787225c4e3fc :: Compiled at : 0x000078722b858186
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 108.21 <::
 5040
 =============================
C_Syntax.faccs <:> csl compiled word
SourceCode for C_Syntax.faccs :> 
int faccs ( REG n | REG rec ) { rec = 1 ; while ( n > 1 ) { rec = rec * n ; n-- ; } return rec ; } 
Source code file location of faccs : "namespaces/test/dev.csl" : 112.6 :: we are now at : namespaces/test/dev.csl : 121.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8581b9 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs : definition = 0x000078722b8581b9 : disassembly at namespaces/test/dev.csl : 121.19 :
0x78722b8581b9    498b3e                  mov rdi, [r14]                                         
 int faccs ( REG n | REG rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }  .. 
0x78722b8581bc    be01000000              mov esi, 0x1                                           
 .. rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x78722b8581c1    4883ff01                cmp rdi, 0x1                                           
0x78722b8581c5    7e0d                    jle 0x2b8581d4                < C_Syntax.faccs+27 >
 .. le ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x78722b8581c7    480faff7                imul rsi, rdi                                          
 ..  1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x78722b8581cb    48ffcf                  dec rdi                                                
0x78722b8581ce    4883ff01                cmp rdi, 0x1                                           
0x78722b8581d2    7ff3                    jg 0x2b8581c7                 < C_Syntax.faccs+14 >
 .. = rec * n ;  n-- ;      }      return rec ; } 
0x78722b8581d4    498936                  mov [r14], rsi                                         
 .. * n ;  n-- ;      }      return rec ; } 
0x78722b8581d7    c3                      ret                                                    
Word_Disassemble : word - 'faccs' :: codeSize = 31
Word : 0x0000787225c51dcc :: Compiled at : 0x000078722b8581b9
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 121.19 <::
 5040
 =============================
C_Syntax.faccs1 <:> csl compiled word
SourceCode for C_Syntax.faccs1 :> 
int faccs1 ( REG n | REG rec ) { rec = 1 ; if ( n > 1 ) { do { rec = rec * n ; n-- ; } while ( n > 1 ) ; } return rec ; } 
Source code file location of faccs1 : "namespaces/test/dev.csl" : 125.7 :: we are now at : namespaces/test/dev.csl : 138.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8581ec -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs1 : definition = 0x000078722b8581ec : disassembly at namespaces/test/dev.csl : 138.20 :
0x78722b8581ec    498b3e                  mov rdi, [r14]                                         
int faccs1 ( REG n | REG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }    .. 
0x78722b8581ef    be01000000              mov esi, 0x1                                           
 .. EG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }          while ( n > .. 
0x78722b8581f4    4883ff01                cmp rdi, 0x1                                           
0x78722b8581f8    7f00                    jg 0x2b8581fa                 < C_Syntax.faccs1+14 >
 .. n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x78722b8581fa    480faff7                imul rsi, rdi                                          
 ..      {              rec = rec * n ;  n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x78722b8581fe    48ffcf                  dec rdi                                                
 ..   n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x78722b858201    4883ff01                cmp rdi, 0x1                                           
0x78722b858205    7ff3                    jg 0x2b8581fa                 < C_Syntax.faccs1+14 >
 ..    while ( n > 1 ) ;     }     return rec ; }  .. 
0x78722b858207    498936                  mov [r14], rsi                                         
 .. le ( n > 1 ) ;     }     return rec ; }  .. 
0x78722b85820a    c3                      ret                                                    
Word_Disassemble : word - 'faccs1' :: codeSize = 31
Word : 0x0000787225c5543c :: Compiled at : 0x000078722b8581ec
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 138.20 <::
 5040 5040
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :> 
int faccs2 ( REG n | REG rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs2 : "namespaces/test/dev.csl" : 167.7 :: we are now at : namespaces/test/dev.csl : 175.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8582a0 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x000078722b8582a0 : disassembly at namespaces/test/dev.csl : 175.20 :
0x78722b8582a0    498b3e                  mov rdi, [r14]                                         
 ..  ( REG n | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8582a3    be01000000              mov esi, 0x1                                           
 ..  | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8582a8    4883ff01                cmp rdi, 0x1                                           
 .. EG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8582ac    7e0d                    jle 0x2b8582bb                < C_Syntax.faccs2+27 >
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8582ae    480faff7                imul rsi, rdi                                          
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8582b2    48ffcf                  dec rdi                                                
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x78722b8582b5    4883ff01                cmp rdi, 0x1                                           
0x78722b8582b9    7ff3                    jg 0x2b8582ae                 < C_Syntax.faccs2+14 >
 ..    rec = rec * n ;      }      return rec ; } 
0x78722b8582bb    498936                  mov [r14], rsi                                         
 ..  = rec * n ;      }      return rec ; } 
0x78722b8582be    c3                      ret                                                    
Word_Disassemble : word - 'faccs2' :: codeSize = 31
Word : 0x0000787225c5f78c :: Compiled at : 0x000078722b8582a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 175.20 <::
 5040 5040
 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 196.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 196.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 196.15 <::

 =============================
User.ifx <:> csl compiled word
SourceCode for User.ifx :> 
: ifx ( n w | k ) { k 1 = } { k @ n @ <= } { k ++ } { w @ _ifx } for ; 
Source code file location of ifx : "namespaces/test/dev.csl" : 220.2 :: we are now at : namespaces/test/dev.csl : 224.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85862f -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: User.ifx : definition = 0x000078722b85862f : disassembly at namespaces/test/dev.csl : 224.16 :
0x78722b85862f    4d897e08                mov [r14+0x8], r15                                     
0x78722b858633    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858637    4981c610000000          add r14, 0x10                                          
 ..          : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x78722b85863e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..    : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x78722b858646    498b4708                mov rax, [r15+0x8]                                     
   : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x78722b85864a    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b85864e    483bc1                  cmp rax, rcx                                           
 .. n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b858651    7f2d                    jg 0x2b858680                 < User.ifx+81 >
0x78722b858653    0f1f4000                nop [rax]                                              
 ..  1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b858657    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85865b    4983c608                add r14, 0x8                                           
0x78722b85865f    498906                  mov [r14], rax                                         
 ..  } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b858662    49ba0c85852b72780000    mov r10, 0x78722b85850c                                
0x78722b85866c    49ffd2                  call r10                      < User._ifx : 0x000078722b85850c >
 .. k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b85866f    49ff4708                inc qword [r15+0x8]                                    
 ..       { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b858673    498b4708                mov rax, [r15+0x8]                                     
0x78722b858677    498b4ff0                mov rcx, [r15-0x10]                                    
0x78722b85867b    483bc1                  cmp rax, rcx                                           
0x78722b85867e    7ed7                    jle 0x2b858657                < User.ifx+40 >
0x78722b858680    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858684    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858688    4983ee10                sub r14, 0x10                                          
 .. @ <= } { k ++ }      { w @ _ifx } for ; 
0x78722b85868c    c3                      ret                                                    
Word_Disassemble : word - 'ifx' :: codeSize = 94
Word : 0x0000787225c752dc :: Compiled at : 0x000078722b85862f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 224.16 <::

 =============================
User._ffx <:> csl compiled word
SourceCode for User._ffx :> 
: _ffx ( n w | t ) nl 7 w @ wordRun decimal p nl { t 0 = } { t @ n @ < } { t ++ } { reps @ w @ ifx } for ; 
Source code file location of _ffx : "namespaces/test/dev.csl" : 227.2 :: we are now at : namespaces/test/dev.csl : 232.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8586f5 -- code size = 242 bytes
TypeSignature : 
 -----------------------------
Word :: User._ffx : definition = 0x000078722b8586f5 : disassembly at namespaces/test/dev.csl : 232.17 :
0x78722b8586f5    4d897e08                mov [r14+0x8], r15                                     
0x78722b8586f9    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b8586fd    4981c610000000          add r14, 0x10                                          
0x78722b858704    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85870e    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b858718    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..            : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x78722b85871b    b807000000              mov eax, 0x7                                           
0x78722b858720    4983c608                add r14, 0x8                                           
0x78722b858724    498906                  mov [r14], rax                                         
 ..          : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x78722b858727    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85872b    4983c608                add r14, 0x8                                           
0x78722b85872f    498906                  mov [r14], rax                                         
 ..      : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x78722b858732    49bb5032f289c8600000    mov r11, 0x60c889f23250                                
0x78722b85873c    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b858746    49ffd2                  call r10                      < Word.wordRun : 0x000060c889f23250 >
 : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x78722b858749    49bb0028f289c8600000    mov r11, 0x60c889f22800                                
0x78722b858753    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85875d    49ffd2                  call r10                      < System.decimal : 0x000060c889f22800 >
 .. w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b858760    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85876a    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b85876d    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b858777    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b858781    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. l 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b858784    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b85878c    498b4708                mov rax, [r15+0x8]                                     
 .. rdRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b858790    498b4ff0                mov rcx, [r15-0x10]                                    
 .. n decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b858794    483bc1                  cmp rax, rcx                                           
 .. decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b858797    7d41                    jge 0x2b8587da                < User._ffx+229 >
0x78722b858799    0f1f4000                nop [rax]                                              
 .. t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b85879d    48b84ca5c72572780000    mov rax, 0x787225c7a54c                                
0x78722b8587a7    488b00                  mov rax, [rax]                                         
0x78722b8587aa    4983c608                add r14, 0x8                                           
0x78722b8587ae    498906                  mov [r14], rax                                         
 ..  { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b8587b1    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8587b5    4983c608                add r14, 0x8                                           
0x78722b8587b9    498906                  mov [r14], rax                                         
 ..  @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b8587bc    49ba2f86852b72780000    mov r10, 0x78722b85862f                                
0x78722b8587c6    49ffd2                  call r10                      < User.ifx : 0x000078722b85862f >
 .. l p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b8587c9    49ff4708                inc qword [r15+0x8]                                    
 ..  nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b8587cd    498b4708                mov rax, [r15+0x8]                                     
0x78722b8587d1    498b4ff0                mov rcx, [r15-0x10]                                    
0x78722b8587d5    483bc1                  cmp rax, rcx                                           
0x78722b8587d8    7cc3                    jl 0x2b85879d                 < User._ffx+168 >
0x78722b8587da    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8587de    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8587e2    4983ee10                sub r14, 0x10                                          
 .. { t ++ }      { reps @ w @ ifx } for  ; 
0x78722b8587e6    c3                      ret                                                    
Word_Disassemble : word - '_ffx' :: codeSize = 242
Word : 0x0000787225c7a66c :: Compiled at : 0x000078722b8586f5
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 232.17 <::

 ffx ... 

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 246.9 :: we are now at : namespaces/test/dev.csl : 259.22
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858c14 -- code size = 49 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b858c14 : disassembly at namespaces/test/dev.csl : 259.22 :
0x78722b858c14    498b0e                  mov rcx, [r14]                                         
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x78722b858c17    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b858c1e    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b858c25    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b858c2a    4883f900                cmp rcx, 0x0                                           
0x78722b858c2e    7411                    jz 0x2b858c41                 < C_Syntax.fibPTC2?+45 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b858c30    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b858c33    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b858c36    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b858c39    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b858c3c    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b858c3f    75ef                    jnz 0x2b858c30                < C_Syntax.fibPTC2?+28 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b858c41    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b858c44    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 49
Word : 0x0000787225c879dc :: Compiled at : 0x000078722b858c14
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 259.22 <::
 6765
 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000399471 seconds
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000788283 seconds
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000541375 seconds
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000383962 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000402407 seconds
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002854217 seconds
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003336051 seconds
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003204056 seconds
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002859317 seconds
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 qexp2 :
Timer [ 1 ] : elapsed time = 0.002846332 seconds
 :: function : qexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003307368 seconds
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003185612 seconds
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp3 :
Timer [ 1 ] : elapsed time = 0.002663984 seconds
 :: function : bexp3 : called on args : 1 - 23 : 1000 reps

 5040

 fac :
Timer [ 1 ] : elapsed time = 0.000735395 seconds
 :: function : fac : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000553207 seconds
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000402998 seconds
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 factorial2 :
Timer [ 1 ] : elapsed time = 0.000522439 seconds
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 5040

 factorial006 :
Timer [ 1 ] : elapsed time = 0.000411654 seconds
 :: function : factorial006 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000394593 seconds
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000424679 seconds
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000412275 seconds
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000397437 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000787642 seconds
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000542998 seconds
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000391656 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial_O3 :
Timer [ 1 ] : elapsed time = 0.000913986 seconds
 :: function : cfactorial_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2_O3 :
Timer [ 1 ] : elapsed time = 0.000396055 seconds
 :: function : cfactorial2_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3_O3 :
Timer [ 1 ] : elapsed time = 0.000387098 seconds
 :: function : cfactorial3_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial4_O3 :
Timer [ 1 ] : elapsed time = 0.000370267 seconds
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

Using Namespaces :> User Root C int Locals Int Logic Compiler Interpreter Shell Defines Stack Asm void Combinators X64 int64 byte uint64 uint8 Bits Compiling a Ar1 DLLNodeAlloc DLLNode Buffer Class Experimental Buffer2048 typedef byteTest Experimental3 xbt _byteTest w Experimental libc CBuffer Dlsym String chey0 CObj chey System Debug Ar9 Ar3 Ar2 Control DObject Lexer testD a112 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil Io Word Macro Namespace StartupMacros Reserved PreProcessor Memory Colors File Array MemorySpace Forth L9 

 5040

 faccs :
Timer [ 1 ] : elapsed time = 0.000432833 seconds
 :: function : faccs : called on args : 1 - 23 : 1000 reps

 5040

 faccs1 :
Timer [ 1 ] : elapsed time = 0.000568716 seconds
 :: function : faccs1 : called on args : 1 - 23 : 1000 reps

 5040

 faccs2 :
Timer [ 1 ] : elapsed time = 0.000420780 seconds
 :: function : faccs2 : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000549981 seconds
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 fac40 :
Timer [ 1 ] : elapsed time = 0.000761533 seconds
 :: function : fac40 : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.cpow <:> csl compiled word
SourceCode for C_Syntax.cpow :> 
int cpow ( base power | out ) { for ( out = 1 ; power ; power -- ) { out = out * base ; } return out ; } 
Source code file location of cpow : "namespaces/test/dev.csl" : 315.9 :: we are now at : namespaces/test/dev.csl : 317.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858c4a -- code size = 87 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x000078722b858c4a : disassembly at namespaces/test/dev.csl : 317.17 :
0x78722b858c4a    4d897e08                mov [r14+0x8], r15                                     
0x78722b858c4e    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858c52    4981c610000000          add r14, 0x10                                          
int cpow ( base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }  .. 
0x78722b858c59    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c61    498b47f8                mov rax, [r15-0x8]                                     
0x78722b858c65    4883f800                cmp rax, 0x0                                           
0x78722b858c69    7422                    jz 0x2b858c8d                 < C_Syntax.cpow+67 >
0x78722b858c6b    0f1f4000                nop [rax]                                              
 .. out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c6f    498b4708                mov rax, [r15+0x8]                                     
 .. 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c73    498b4ff0                mov rcx, [r15-0x10]                                    
 .. = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c77    480fafc1                imul rax, rcx                                          
 .. for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c7b    49894708                mov [r15+0x8], rax                                     
 .. out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c7f    49ff4ff8                dec qword [r15-0x8]                                    
 .. ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c83    498b47f8                mov rax, [r15-0x8]                                     
0x78722b858c87    4883f800                cmp rax, 0x0                                           
0x78722b858c8b    75e2                    jnz 0x2b858c6f                < C_Syntax.cpow+37 >
 ..  ; power --  ) { out = out * base ; } return out ; } 
0x78722b858c8d    498b4708                mov rax, [r15+0x8]                                     
0x78722b858c91    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858c95    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858c99    4983ee08                sub r14, 0x8                                           
 .. r --  ) { out = out * base ; } return out ; } 
0x78722b858c9d    498906                  mov [r14], rax                                         
 .. ) { out = out * base ; } return out ; } 
0x78722b858ca0    c3                      ret                                                    
Word_Disassemble : word - 'cpow' :: codeSize = 87
Word : 0x0000787225c8d56c :: Compiled at : 0x000078722b858c4a
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 317.17 <::
 1073741824 1073741824
 =============================
Root.pow <:> csl compiled word
SourceCode for Root.pow :> 
: pow ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of pow : "namespaces/test/dev.csl" : 322.2 :: we are now at : namespaces/test/dev.csl : 325.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858ca6 -- code size = 101 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.pow : definition = 0x000078722b858ca6 : disassembly at namespaces/test/dev.csl : 325.11 :
0x78722b858ca6    4d897e08                mov [r14+0x8], r15                                     
0x78722b858caa    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858cae    4981c610000000          add r14, 0x10                                          
 ..  ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cb5    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cbd    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cc2    7e33                    jle 0x2b858cf7                < Root.pow+81 >
0x78722b858cc4    0f1f4000                nop [rax]                                              
 .. 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cc8    498d4708                lea rax, [r15+0x8]                                     
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858ccc    4983c608                add r14, 0x8                                           
0x78722b858cd0    498906                  mov [r14], rax                                         
 .. } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cd3    498b4708                mov rax, [r15+0x8]                                     
 .. wer @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cd7    498b4ff0                mov rcx, [r15-0x10]                                    
0x78722b858cdb    480fafc1                imul rax, rcx                                          
 ..  > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cdf    488bc8                  mov rcx, rax                                           
0x78722b858ce2    498b06                  mov rax, [r14]                                         
0x78722b858ce5    4983ee08                sub r14, 0x8                                           
 ..  } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858ce9    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cec    49ff4ff8                dec qword [r15-0x8]                                    
 .. out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cf0    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b858cf5    7fd1                    jg 0x2b858cc8                 < Root.pow+34 >
 .. er --  } { out out @ base @ * = } for return out @ ; 
0x78722b858cf7    498b4708                mov rax, [r15+0x8]                                     
0x78722b858cfb    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858cff    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858d03    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858d07    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858d0a    c3                      ret                                                    
Word_Disassemble : word - 'pow' :: codeSize = 101
Word : 0x0000787225c90bdc :: Compiled at : 0x000078722b858ca6
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 325.11 <::

 65536

Timer [ 1 ] : elapsed time = 0.002819222 seconds

 1073741824
 =============================
Root.powReg <:> csl compiled word
SourceCode for Root.powReg :> 
: powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg : "namespaces/test/dev.csl" : 326.2 :: we are now at : namespaces/test/dev.csl : 328.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858d1f -- code size = 46 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg : definition = 0x000078722b858d1f : disassembly at namespaces/test/dev.csl : 328.14 :
 ..                              : powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base  .. 
0x78722b858d1f    498b36                  mov rsi, [r14]                                         
0x78722b858d22    498b7ef8                mov rdi, [r14-0x8]                                     
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d26    ba01000000              mov edx, 0x1                                           
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d2b    4883fe00                cmp rsi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d2f    7e14                    jle 0x2b858d45                < Root.powReg+38 >
 .. power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d31    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d35    488bc2                  mov rax, rdx                                           
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d38    480fafd7                imul rdx, rdi                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d3c    48ffce                  dec rsi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d3f    4883fe00                cmp rsi, 0x0                                           
0x78722b858d43    7ff0                    jg 0x2b858d35                 < Root.powReg+22 >
0x78722b858d45    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858d49    498916                  mov [r14], rdx                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858d4c    c3                      ret                                                    
Word_Disassemble : word - 'powReg' :: codeSize = 46
Word : 0x0000787225c93eec :: Compiled at : 0x000078722b858d1f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 328.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.002001134 seconds

 1073741824
 =============================
Root.powReg2 <:> csl compiled word
SourceCode for Root.powReg2 :> 
: powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg2 : "namespaces/test/dev.csl" : 329.2 :: we are now at : namespaces/test/dev.csl : 331.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858d52 -- code size = 70 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg2 : definition = 0x000078722b858d52 : disassembly at namespaces/test/dev.csl : 331.15 :
0x78722b858d52    4d897e08                mov [r14+0x8], r15                                     
0x78722b858d56    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858d5a    4981c608000000          add r14, 0x8                                           
 ..                             : powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x78722b858d61    498b7ff8                mov rdi, [r15-0x8]                                     
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d65    be01000000              mov esi, 0x1                                           
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d6a    4883ff00                cmp rdi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d6e    7e18                    jle 0x2b858d88                < Root.powReg2+54 >
 .. power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d70    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d74    488bc6                  mov rax, rsi                                           
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d77    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d7b    480faff1                imul rsi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d7f    48ffcf                  dec rdi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858d82    4883ff00                cmp rdi, 0x0                                           
0x78722b858d86    7fec                    jg 0x2b858d74                 < Root.powReg2+34 >
0x78722b858d88    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858d8c    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858d90    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858d94    498936                  mov [r14], rsi                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858d97    c3                      ret                                                    
Word_Disassemble : word - 'powReg2' :: codeSize = 70
Word : 0x0000787225c971fc :: Compiled at : 0x000078722b858d52
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 331.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.002026291 seconds

 1073741824
 =============================
Root.powReg3 <:> csl compiled word
SourceCode for Root.powReg3 :> 
: powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg3 : "namespaces/test/dev.csl" : 332.2 :: we are now at : namespaces/test/dev.csl : 335.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858d9d -- code size = 69 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg3 : definition = 0x000078722b858d9d : disassembly at namespaces/test/dev.csl : 335.15 :
0x78722b858d9d    4d897e08                mov [r14+0x8], r15                                     
0x78722b858da1    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858da5    4981c608000000          add r14, 0x8                                           
 ..                             : powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x78722b858dac    498b7ff0                mov rdi, [r15-0x10]                                    
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858db0    be0100000049837ff8      mov rsi, 0xf87f834900000001                              
0x78722b858db9    007e16                  add [rsi+0x16], dil                                    
0x78722b858dbc    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858dc0    488bc6                  mov rax, rsi                                           
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858dc3    480faff7                imul rsi, rdi                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858dc7    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858dcb    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858dd0    7fee                    jg 0x2b858dc0                 < Root.powReg3+35 >
0x78722b858dd2    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858dd6    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858dda    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858dde    498936                  mov [r14], rsi                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858de1    c3                      ret                                                    
Word_Disassemble : word - 'powReg3' :: codeSize = 69
Word : 0x0000787225c9a50c :: Compiled at : 0x000078722b858d9d
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 335.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.001947916 seconds

 1073741824
 =============================
Root.powReg4 <:> csl compiled word
SourceCode for Root.powReg4 :> 
: powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg4 : "namespaces/test/dev.csl" : 336.2 :: we are now at : namespaces/test/dev.csl : 339.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858de7 -- code size = 102 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg4 : definition = 0x000078722b858de7 : disassembly at namespaces/test/dev.csl : 339.15 :
0x78722b858de7    4d897e08                mov [r14+0x8], r15                                     
0x78722b858deb    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858def    4981c610000000          add r14, 0x10                                          
 ..                             : powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x78722b858df6    498b77f8                mov rsi, [r15-0x8]                                     
0x78722b858dfa    498b7ff0                mov rdi, [r15-0x10]                                    
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858dfe    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e06    4883fe00                cmp rsi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e0a    7e2d                    jle 0x2b858e39                < Root.powReg4+82 >
 .. REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e0c    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e10    498d4708                lea rax, [r15+0x8]                                     
0x78722b858e14    4983c608                add r14, 0x8                                           
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e18    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e1b    498b4708                mov rax, [r15+0x8]                                     
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e1f    480fafc7                imul rax, rdi                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e23    488bc8                  mov rcx, rax                                           
0x78722b858e26    498b06                  mov rax, [r14]                                         
0x78722b858e29    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e2d    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e30    48ffce                  dec rsi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e33    4883fe00                cmp rsi, 0x0                                           
0x78722b858e37    7fd7                    jg 0x2b858e10                 < Root.powReg4+41 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e39    498b4708                mov rax, [r15+0x8]                                     
0x78722b858e3d    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858e41    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858e45    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858e49    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858e4c    c3                      ret                                                    
Word_Disassemble : word - 'powReg4' :: codeSize = 102
Word : 0x0000787225c9d81c :: Compiled at : 0x000078722b858de7
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 339.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.002153848 seconds

 1073741824
 =============================
Root.powReg5 <:> csl compiled word
SourceCode for Root.powReg5 :> 
: powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg5 : "namespaces/test/dev.csl" : 340.2 :: we are now at : namespaces/test/dev.csl : 343.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858e52 -- code size = 102 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg5 : definition = 0x000078722b858e52 : disassembly at namespaces/test/dev.csl : 343.15 :
0x78722b858e52    4d897e08                mov [r14+0x8], r15                                     
0x78722b858e56    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858e5a    4981c610000000          add r14, 0x10                                          
 ..                             : powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = }  .. 
0x78722b858e61    498b7ff8                mov rdi, [r15-0x8]                                     
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e65    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e6d    4883ff00                cmp rdi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e71    7e31                    jle 0x2b858ea4                < Root.powReg5+82 >
 .. REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e73    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e77    498d4708                lea rax, [r15+0x8]                                     
0x78722b858e7b    4983c608                add r14, 0x8                                           
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e7f    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e82    498b4708                mov rax, [r15+0x8]                                     
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e86    498b4ff0                mov rcx, [r15-0x10]                                    
0x78722b858e8a    480fafc1                imul rax, rcx                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e8e    488bc8                  mov rcx, rax                                           
0x78722b858e91    498b06                  mov rax, [r14]                                         
0x78722b858e94    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e98    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e9b    48ffcf                  dec rdi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858e9e    4883ff00                cmp rdi, 0x0                                           
0x78722b858ea2    7fd3                    jg 0x2b858e77                 < Root.powReg5+37 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x78722b858ea4    498b4708                mov rax, [r15+0x8]                                     
0x78722b858ea8    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858eac    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858eb0    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858eb4    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858eb7    c3                      ret                                                    
Word_Disassemble : word - 'powReg5' :: codeSize = 102
Word : 0x0000787225ca0b2c :: Compiled at : 0x000078722b858e52
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 343.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.003138916 seconds

 1073741824
 =============================
Root.powReg6 <:> csl compiled word
SourceCode for Root.powReg6 :> 
: powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg6 : "namespaces/test/dev.csl" : 344.2 :: we are now at : namespaces/test/dev.csl : 346.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858ebd -- code size = 101 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg6 : definition = 0x000078722b858ebd : disassembly at namespaces/test/dev.csl : 346.15 :
0x78722b858ebd    4d897e08                mov [r14+0x8], r15                                     
0x78722b858ec1    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858ec5    4981c610000000          add r14, 0x10                                          
 ..                             : powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = }  .. 
0x78722b858ecc    498b7ff0                mov rdi, [r15-0x10]                                    
 .. EG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858ed0    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858ed8    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858edd    7e2f                    jle 0x2b858f0e                < Root.powReg6+81 >
0x78722b858edf    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858ee3    498d4708                lea rax, [r15+0x8]                                     
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858ee7    4983c608                add r14, 0x8                                           
0x78722b858eeb    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858eee    498b4708                mov rax, [r15+0x8]                                     
0x78722b858ef2    480fafc7                imul rax, rdi                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858ef6    488bc8                  mov rcx, rax                                           
0x78722b858ef9    498b06                  mov rax, [r14]                                         
0x78722b858efc    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f00    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f03    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f07    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b858f0c    7fd5                    jg 0x2b858ee3                 < Root.powReg6+38 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f0e    498b4708                mov rax, [r15+0x8]                                     
0x78722b858f12    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858f16    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858f1a    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858f1e    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858f21    c3                      ret                                                    
Word_Disassemble : word - 'powReg6' :: codeSize = 101
Word : 0x0000787225ca3e3c :: Compiled at : 0x000078722b858ebd
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 346.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.002996151 seconds

 1073741824
 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :> 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg7 : "namespaces/test/dev.csl" : 347.2 :: we are now at : namespaces/test/dev.csl : 349.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858f27 -- code size = 69 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg7 : definition = 0x000078722b858f27 : disassembly at namespaces/test/dev.csl : 349.20 :
0x78722b858f27    4d897e08                mov [r14+0x8], r15                                     
0x78722b858f2b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858f2f    4981c608000000          add r14, 0x8                                           
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f36    bf01000000              mov edi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f3b    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f40    7e1a                    jle 0x2b858f5c                < Root.powReg7+53 >
0x78722b858f42    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f46    488bc7                  mov rax, rdi                                           
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f49    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f4d    480faff9                imul rdi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f51    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f55    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b858f5a    7fea                    jg 0x2b858f46                 < Root.powReg7+31 >
0x78722b858f5c    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858f60    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858f64    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858f68    49893e                  mov [r14], rdi                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858f6b    c3                      ret                                                    
Word_Disassemble : word - 'powReg7' :: codeSize = 69
Word : 0x0000787225ca714c :: Compiled at : 0x000078722b858f27
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 349.20 <::

 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :> 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg7 : "namespaces/test/dev.csl" : 347.2 :: we are now at : namespaces/test/dev.csl : 350.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b858f27 -- code size = 69 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg7 : definition = 0x000078722b858f27 : disassembly at namespaces/test/dev.csl : 350.15 :
0x78722b858f27    4d897e08                mov [r14+0x8], r15                                     
0x78722b858f2b    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858f2f    4981c608000000          add r14, 0x8                                           
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f36    bf01000000              mov edi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f3b    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f40    7e1a                    jle 0x2b858f5c                < Root.powReg7+53 >
0x78722b858f42    0f1f4000                nop [rax]                                              
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f46    488bc7                  mov rax, rdi                                           
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f49    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f4d    480faff9                imul rdi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f51    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x78722b858f55    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b858f5a    7fea                    jg 0x2b858f46                 < Root.powReg7+31 >
0x78722b858f5c    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858f60    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b858f64    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x78722b858f68    49893e                  mov [r14], rdi                                         
 .. t out @ base @ * = } for return out @ ; 
0x78722b858f6b    c3                      ret                                                    
Word_Disassemble : word - 'powReg7' :: codeSize = 69
Word : 0x0000787225ca714c :: Compiled at : 0x000078722b858f27
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 350.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.002085410 seconds


 =============================
Int.** <:> C compiled primitive, infixable
SourceCode for Int.** :> 
C Primitive
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Int.** : definition = 0x000060c889f269d0 : disassembly at namespaces/test/dev.csl : 352.10 :
0x60c889f269d0    498b3e                  mov rdi, [r14]                                         
0x60c889f269d3    498b4ef8                mov rcx, [r14-0x8]                                     
0x60c889f269d7    4c89f6                  mov rsi, r14                                           
0x60c889f269da    4889fa                  mov rdx, rdi                                           
0x60c889f269dd    4889c8                  mov rax, rcx                                           
0x60c889f269e0    4883ea01                sub rdx, 0x1                                           
0x60c889f269e4    7428                    jz 0x89f26a0e                 < C compiler code >        
0x60c889f269e6    f6c201                  test dl, 0x1                                           
0x60c889f269e9    7415                    jz 0x89f26a00                 < C compiler code >        
0x60c889f269eb    480fafc1                imul rax, rcx                                          
0x60c889f269ef    4883ef02                sub rdi, 0x2                                           
0x60c889f269f3    4889fa                  mov rdx, rdi                                           
0x60c889f269f6    7416                    jz 0x89f26a0e                 < C compiler code >        
0x60c889f269f8    0f1f840000000000        nop [rax+rax]                                          
0x60c889f26a00    480fafc1                imul rax, rcx                                          
0x60c889f26a04    480fafc1                imul rax, rcx                                          
0x60c889f26a08    4883ea02                sub rdx, 0x2                                           
0x60c889f26a0c    75f2                    jnz 0x89f26a00                < C compiler code >        
0x60c889f26a0e    488946f8                mov [rsi-0x8], rax                                     
0x60c889f26a12    e929b1fcff              jmp 0x60c889ef1b40            < C compiler code >        
0x60c889f26a17    660f1f840000000000      o16 nop [rax+rax]                                      
0x60c889f26a20    498b16                  mov rdx, [r14]                                         
0x60c889f26a23    4c89f1                  mov rcx, r14                                           
0x60c889f26a26    b801000000              mov eax, 0x1                                           
0x60c889f26a2b    4883fa01                cmp rdx, 0x1                                           
0x60c889f26a2f    7f07                    jg 0x89f26a38                 < C compiler code >        
0x60c889f26a31    488901                  mov [rcx], rax                                         
0x60c889f26a34    c3                      ret                                                    
Word_Disassemble : word - '**' :: codeSize = 102
Word : 0x000078722b8c4468 :: Compiled at : 0x000060c889f269d0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 352.10 <::

 65536

Timer [ 1 ] : elapsed time = 0.002197098 seconds


 =============================
Int.pow_03 <:> C compiled primitive, infixable
SourceCode for Int.pow_03 :> 
C Primitive
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Int.pow_03 : definition = 0x000060c889f26230 : disassembly at namespaces/test/dev.csl : 353.14 :
0x60c889f26230    498b3e                  mov rdi, [r14]                                         
0x60c889f26233    498b4ef8                mov rcx, [r14-0x8]                                     
0x60c889f26237    4c89f6                  mov rsi, r14                                           
0x60c889f2623a    4889fa                  mov rdx, rdi                                           
0x60c889f2623d    4889c8                  mov rax, rcx                                           
0x60c889f26240    4883ea01                sub rdx, 0x1                                           
0x60c889f26244    7428                    jz 0x89f2626e                 < C compiler code >        
0x60c889f26246    f6c201                  test dl, 0x1                                           
0x60c889f26249    7415                    jz 0x89f26260                 < C compiler code >        
0x60c889f2624b    480fafc1                imul rax, rcx                                          
0x60c889f2624f    4883ef02                sub rdi, 0x2                                           
0x60c889f26253    4889fa                  mov rdx, rdi                                           
0x60c889f26256    7416                    jz 0x89f2626e                 < C compiler code >        
0x60c889f26258    0f1f840000000000        nop [rax+rax]                                          
0x60c889f26260    480fafc1                imul rax, rcx                                          
0x60c889f26264    480fafc1                imul rax, rcx                                          
0x60c889f26268    4883ea02                sub rdx, 0x2                                           
0x60c889f2626c    75f2                    jnz 0x89f26260                < C compiler code >        
0x60c889f2626e    488946f8                mov [rsi-0x8], rax                                     
0x60c889f26272    e9c9b8fcff              jmp 0x60c889ef1b40            < C compiler code >        
0x60c889f26277    660f1f840000000000      o16 nop [rax+rax]                                      
0x60c889f26280    4155                    push r13                                               
0x60c889f26282    4989fd                  mov r13, rdi                                           
0x60c889f26285    4154                    push r12                                               
0x60c889f26287    55                      push rbp                                               
0x60c889f26288    53                      push rbx                                               
0x60c889f26289    4881ecc8000000          sub rsp, 0xc8                                          
0x60c889f26290    4883ff01                cmp rdi, 0x1                                           
0x60c889f26294    0f8ed6030000            jle 0x60c889f26670            < C compiler code >        
0x60c889f2629a    488d57ff                lea rdx, [rdi-0x1]                                     
0x60c889f2629e    4889fd                  mov rbp, rdi                                           
0x60c889f262a1    4531e4                  xor r12d, r12d                                         
0x60c889f262a4    4889d0                  mov rax, rdx                                           
0x60c889f262a7    4889d1                  mov rcx, rdx                                           
0x60c889f262aa    4883e0fe                and rax, 0xfffffffffffffffe                              
0x60c889f262ae    4829                    invalid                                                
Word_Disassemble : word - 'pow_03' :: codeSize = 127
Word : 0x000078722b8c47c8 :: Compiled at : 0x000060c889f26230
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 353.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.002256949 seconds



Word :: C.tt : definition = 0x000078722b858f71 : disassembly at namespaces/test/dev.csl : 359.22 :
0x78722b858f71    4d897e08                mov [r14+0x8], r15                                     
0x78722b858f75    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b858f79    4981c610000000          add r14, 0x10                                          
 ..                      : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x78722b858f80    49c7470806000000        mov qword [r15+0x8], 0x6                               
 ..                  : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x78722b858f88    49ff4708                inc qword [r15+0x8]                                    
 ..               : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x78722b858f8c    498b4708                mov rax, [r15+0x8]                                     
0x78722b858f90    4983c608                add r14, 0x8                                           
0x78722b858f94    498906                  mov [r14], rax                                         
 ..           : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x78722b858f97    49bae504842b72780000    mov r10, 0x78722b8404e5                                
0x78722b858fa1    49ffd2                  call r10                      < Int.p : 0x000078722b8404e5 >
0x78722b858fa4    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b858fa8    4d8b7e08                mov r15, [r14+0x8]                                     
 ..         : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x78722b858fac    c3                      ret                                                    
Word_Disassemble : word - 'tt' :: codeSize = 60 7 
should show 7
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :> 
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev.csl : 386.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b855042 -- code size = 172 bytes
TypeSignature : 
 -----------------------------
Word :: C.fibPTC? : definition = 0x000078722b855042 : disassembly at namespaces/test/dev.csl : 386.21 :
0x78722b855042    4d897e08                mov [r14+0x8], r15                                     
0x78722b855046    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85504a    4981c620000000          add r14, 0x20                                          
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =       .. 
0x78722b855051    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn f .. 
0x78722b855059    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 .. 
0x78722b855061    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = .. 
0x78722b855069    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85506d    4883f800                cmp rax, 0x0                                           
0x78722b855071    746b                    jz 0x2b8550de                 < C.fibPTC?+156 >
0x78722b855073    0f1f4000                nop [rax]                                              
0x78722b855077    498d4710                lea rax, [r15+0x10]                                    
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85507b    498b4f18                mov rcx, [r15+0x18]                                    
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85507f    488908                  mov [rax], rcx                                         
0x78722b855082    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b855086    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85508a    488908                  mov [rax], rcx                                         
0x78722b85508d    498d4708                lea rax, [r15+0x8]                                     
0x78722b855091    4983c608                add r14, 0x8                                           
0x78722b855095    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b855098    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b85509c    498b4f18                mov rcx, [r15+0x18]                                    
0x78722b8550a0    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550a3    488bc8                  mov rcx, rax                                           
0x78722b8550a6    498b06                  mov rax, [r14]                                         
0x78722b8550a9    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550ad    488908                  mov [rax], rcx                                         
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  .. 
0x78722b8550b0    498d47f8                lea rax, [r15-0x8]                                     
0x78722b8550b4    4983c608                add r14, 0x8                                           
0x78722b8550b8    498906                  mov [r14], rax                                         
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    .. 
0x78722b8550bb    498b47f8                mov rax, [r15-0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo .. 
0x78722b8550bf    b901000000              mov ecx, 0x1                                           
0x78722b8550c4    482bc1                  sub rax, rcx                                           
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  .. 
0x78722b8550c7    488bc8                  mov rcx, rax                                           
0x78722b8550ca    498b06                  mov rax, [r14]                                         
0x78722b8550cd    4983ee08                sub r14, 0x8                                           
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    .. 
0x78722b8550d1    488908                  mov [rax], rcx                                         
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b8550d4    498b47f8                mov rax, [r15-0x8]                                     
0x78722b8550d8    4883f800                cmp rax, 0x0                                           
0x78722b8550dc    7599                    jnz 0x2b855077                < C.fibPTC?+53 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550de    498b4708                mov rax, [r15+0x8]                                     
0x78722b8550e2    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b8550e6    4d8b7e08                mov r15, [r14+0x8]                                     
 .. @ fn2 @ + =      }     for     return fn @ ;  .. 
0x78722b8550ea    498906                  mov [r14], rax                                         
 ..  @ + =      }     for     return fn @ ;  .. 
0x78722b8550ed    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC?' :: codeSize = 172
Word : 0x0000787225f6867e :: Compiled at : 0x000078722b855042
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 386.21 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 400.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 400.13 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 400.13 <::
 6765
 13

 fibPTC? :
Timer [ 1 ] : elapsed time = 0.002469944 seconds
 :: function : fibPTC? : called on args : 1 - 23 : 1000 reps

 13

 fibPTC2? :
Timer [ 1 ] : elapsed time = 0.000437492 seconds
 :: function : fibPTC2? : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.fibPTC4? <:> csl compiled word
SourceCode for C_Syntax.fibPTC4? :> 
int fibPTC4? ( REG n | REG fn, REG fn1, REG fn2 ) { fn = 0, fn1 = 0, fn2 = 1 ; do { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; n -- ; } while ( n > 0 ) ; return fn ; } 
Source code file location of fibPTC4? : "namespaces/test/dev.csl" : 405.9 :: we are now at : namespaces/test/dev.csl : 418.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590fa -- code size = 51 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC4? : definition = 0x000078722b8590fa : disassembly at namespaces/test/dev.csl : 418.13 :
0x78722b8590fa    498b0e                  mov rcx, [r14]                                         
 .. | REG fn, REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + .. 
0x78722b8590fd    48c7c200000000          mov rdx, 0x0                                           
 ..  REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;    .. 
0x78722b859104    48c7c700000000          mov rdi, 0x0                                           
 ..  REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n  .. 
0x78722b85910b    be01000000              mov esi, 0x1                                           
 .. 2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     .. 
0x78722b859110    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b859113    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b859116    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b859119    488bd7                  mov rdx, rdi                                           
 .. ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b85911c    48ffc9                  dec rcx                                                
 .. ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b85911f    4883f900                cmp rcx, 0x0                                           
0x78722b859123    7feb                    jg 0x2b859110                 < C_Syntax.fibPTC4?+22 >
 .. fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b859125    0f1f4000                nop [rax]                                              
 ..    }     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b859129    498916                  mov [r14], rdx                                         
 ..     while ( n > 0 ) ;     return fn ; }  .. 
0x78722b85912c    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC4?' :: codeSize = 51
Word : 0x0000787225cba69c :: Compiled at : 0x000078722b8590fa
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 418.13 <::

 13

 fibPTC4? :
Timer [ 1 ] : elapsed time = 0.000399942 seconds
 :: function : fibPTC4? : called on args : 1 - 23 : 1000 reps
 6765
 13

 cfib2_O3 :
Timer [ 1 ] : elapsed time = 0.000576489 seconds
 :: function : cfib2_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User._fibn1 <:> csl compiled word
SourceCode for User._fibn1 :> 
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @ _fibn1 + } ifElse return tos ; 
Source code file location of _fibn1 : "namespaces/test/dev.csl" : 427.2 :: we are now at : namespaces/test/dev.csl : 428.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b859132 -- code size = 115 bytes
TypeSignature : 
 -----------------------------
Word :: User._fibn1 : definition = 0x000078722b859132 : disassembly at namespaces/test/dev.csl : 428.20 :
0x78722b859132    4d897e08                mov [r14+0x8], r15                                     
0x78722b859136    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85913a    4981c608000000          add r14, 0x8                                           
 ..                      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x78722b859141    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..              : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x78722b859146    7d14                    jge 0x2b85915c                < User._fibn1+42 >
0x78722b859148    0f1f4000                nop [rax]                                              
 ..          : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x78722b85914c    498b47f8                mov rax, [r15-0x8]                                     
0x78722b859150    4983c608                add r14, 0x8                                           
0x78722b859154    498906                  mov [r14], rax                                         
 ..      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x78722b859157    e93d000000              jmp 0x78722b859199            < User._fibn1+103 >
   : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x78722b85915c    49ff4ff8                dec qword [r15-0x8]                                    
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x78722b859160    498b47f8                mov rax, [r15-0x8]                                     
0x78722b859164    4983c608                add r14, 0x8                                           
0x78722b859168    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x78722b85916b    e8c2ffffff              call 0x78722b859132           < User._fibn1 : 0x000078722b859132 >
 .. n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x78722b859170    49ff4ff8                dec qword [r15-0x8]                                    
 ..  2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x78722b859174    498b47f8                mov rax, [r15-0x8]                                     
0x78722b859178    4983c608                add r14, 0x8                                           
0x78722b85917c    498906                  mov [r14], rax                                         
 .. } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x78722b85917f    e8aeffffff              call 0x78722b859132           < User._fibn1 : 0x000078722b859132 >
0x78722b859184    498b0e                  mov rcx, [r14]                                         
0x78722b859187    498b46f8                mov rax, [r14-0x8]                                     
0x78722b85918b    4983ee10                sub r14, 0x10                                          
 ..  } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x78722b85918f    4803c1                  add rax, rcx                                           
0x78722b859192    4983c608                add r14, 0x8                                           
0x78722b859196    498906                  mov [r14], rax                                         
0x78722b859199    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85919d    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b8591a1    498906                  mov [r14], rax                                         
 ..  -- n @  _fibn1 + } ifElse return tos ; 
0x78722b8591a4    c3                      ret                                                    
Word_Disassemble : word - '_fibn1' :: codeSize = 115
Word : 0x0000787225cc073c :: Compiled at : 0x000078722b859132
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 428.20 <::
 6765
 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 439.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854ece -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x000078722b854ece : disassembly at namespaces/test/dev.csl : 439.19 :
 ..                               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ece    498b06                  mov rax, [r14]                                         
0x78722b854ed1    4983c608                add r14, 0x8                                           
0x78722b854ed5    498906                  mov [r14], rax                                         
0x78722b854ed8    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854edd    488bc8                  mov rcx, rax                                           
0x78722b854ee0    498b06                  mov rax, [r14]                                         
0x78722b854ee3    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ee7    483bc1                  cmp rax, rcx                                           
0x78722b854eea    0f8d05000000            jge 0x78722b854ef5            < C._fib2+39 >
0x78722b854ef0    e94c000000              jmp 0x78722b854f41            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ef5    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ef8    4983c608                add r14, 0x8                                           
0x78722b854efc    498906                  mov [r14], rax                                         
0x78722b854eff    498b06                  mov rax, [r14]                                         
0x78722b854f02    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f06    48ffc8                  dec rax                                                
0x78722b854f09    4983c608                add r14, 0x8                                           
0x78722b854f0d    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f10    e8b9ffffff              call 0x78722b854ece           < C._fib2 : 0x000078722b854ece >
0x78722b854f15    498b0e                  mov rcx, [r14]                                         
0x78722b854f18    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854f1c    49894ef8                mov [r14-0x8], rcx                                     
0x78722b854f20    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f23    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f27    e8a2ffffff              call 0x78722b854ece           < C._fib2 : 0x000078722b854ece >
0x78722b854f2c    498b0e                  mov rcx, [r14]                                         
0x78722b854f2f    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854f33    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x78722b854f37    4803c1                  add rax, rcx                                           
0x78722b854f3a    4983c608                add r14, 0x8                                           
0x78722b854f3e    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x78722b854f41    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x0000787225f6199e :: Compiled at : 0x000078722b854ece
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 439.19 <::
 6765
 6765
 =============================
User._fib3 <:> csl compiled word
SourceCode for User._fib3 :> 
: _fib3 dup 2 < ?< >:< dup -- _fib3 swap 2 - _fib3 + >; ; 
Source code file location of _fib3 : "namespaces/test/dev.csl" : 443.2 :: we are now at : namespaces/test/dev.csl : 449.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b859344 -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: User._fib3 : definition = 0x000078722b859344 : disassembly at namespaces/test/dev.csl : 449.19 :
0x78722b859344    498b06                  mov rax, [r14]                                         
0x78722b859347    4983c608                add r14, 0x8                                           
0x78722b85934b    498906                  mov [r14], rax                                         
0x78722b85934e    b802000000              mov eax, 0x2                                           
 ..                      : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x78722b859353    488bc8                  mov rcx, rax                                           
0x78722b859356    498b06                  mov rax, [r14]                                         
0x78722b859359    4983ee08                sub r14, 0x8                                           
 ..                    : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x78722b85935d    483bc1                  cmp rax, rcx                                           
0x78722b859360    0f8d05000000            jge 0x78722b85936b            < User._fib3+39 >
 ..          : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x78722b859366    e94c000000              jmp 0x78722b8593b7            < User._fib3+115 >
0x78722b85936b    498b06                  mov rax, [r14]                                         
0x78722b85936e    4983c608                add r14, 0x8                                           
0x78722b859372    498906                  mov [r14], rax                                         
0x78722b859375    498b06                  mov rax, [r14]                                         
0x78722b859378    4983ee08                sub r14, 0x8                                           
 ..      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b85937c    48ffc8                  dec rax                                                
0x78722b85937f    4983c608                add r14, 0x8                                           
0x78722b859383    498906                  mov [r14], rax                                         
 ..   dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b859386    e8b9ffffff              call 0x78722b859344           < User._fib3 : 0x000078722b859344 >
 .. 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b85938b    498b0e                  mov rcx, [r14]                                         
0x78722b85938e    498b46f8                mov rax, [r14-0x8]                                     
0x78722b859392    49894ef8                mov [r14-0x8], rcx                                     
0x78722b859396    498906                  mov [r14], rax                                         
 ..   ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b859399    49832e02                sub qword [r14], 0x2                                   
 .. ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b85939d    e8a2ffffff              call 0x78722b859344           < User._fib3 : 0x000078722b859344 >
0x78722b8593a2    498b0e                  mov rcx, [r14]                                         
0x78722b8593a5    498b46f8                mov rax, [r14-0x8]                                     
0x78722b8593a9    4983ee10                sub r14, 0x10                                          
 ..           dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b8593ad    4803c1                  add rax, rcx                                           
0x78722b8593b0    4983c608                add r14, 0x8                                           
0x78722b8593b4    498906                  mov [r14], rax                                         
 .. up -- _fib3 swap 2 - _fib3 +      >;  ; 
0x78722b8593b7    c3                      ret                                                    
Word_Disassemble : word - '_fib3' :: codeSize = 116
Word : 0x0000787225cc8a0c :: Compiled at : 0x000078722b859344
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 449.19 <::
 6765
 =============================
User._fib4 <:> csl compiled word
SourceCode for User._fib4 :> 
: _fib4 { dup 2 >= } { dup -- _fib4 swap 2 - _fib4 + } if2 ; 
Source code file location of _fib4 : "namespaces/test/dev.csl" : 451.2 :: we are now at : namespaces/test/dev.csl : 457.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8593cc -- code size = 105 bytes
TypeSignature : 
 -----------------------------
Word :: User._fib4 : definition = 0x000078722b8593cc : disassembly at namespaces/test/dev.csl : 457.19 :
 ..                        : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x78722b8593cc    498b06                  mov rax, [r14]                                         
0x78722b8593cf    4983c608                add r14, 0x8                                           
0x78722b8593d3    498906                  mov [r14], rax                                         
0x78722b8593d6    b802000000              mov eax, 0x2                                           
 ..                    : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x78722b8593db    488bc8                  mov rcx, rax                                           
0x78722b8593de    498b06                  mov rax, [r14]                                         
0x78722b8593e1    4983ee08                sub r14, 0x8                                           
 ..                  : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x78722b8593e5    483bc1                  cmp rax, rcx                                           
 ..               : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x78722b8593e8    7c4a                    jl 0x2b859434                 < User._fib4+104 >
0x78722b8593ea    0f1f4000                nop [rax]                                              
0x78722b8593ee    498b06                  mov rax, [r14]                                         
0x78722b8593f1    4983c608                add r14, 0x8                                           
0x78722b8593f5    4983ee08                sub r14, 0x8                                           
 ..       { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b8593f9    48ffc8                  dec rax                                                
0x78722b8593fc    4983c608                add r14, 0x8                                           
0x78722b859400    498906                  mov [r14], rax                                         
 ..    { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b859403    e8c4ffffff              call 0x78722b8593cc           < User._fib4 : 0x000078722b8593cc >
 .. up 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b859408    498b0e                  mov rcx, [r14]                                         
0x78722b85940b    498b46f8                mov rax, [r14-0x8]                                     
0x78722b85940f    49894ef8                mov [r14-0x8], rcx                                     
0x78722b859413    498906                  mov [r14], rax                                         
 ..  }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b859416    49832e02                sub qword [r14], 0x2                                   
 ..      {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b85941a    e8adffffff              call 0x78722b8593cc           < User._fib4 : 0x000078722b8593cc >
0x78722b85941f    498b0e                  mov rcx, [r14]                                         
0x78722b859422    498b46f8                mov rax, [r14-0x8]                                     
0x78722b859426    4983ee10                sub r14, 0x10                                          
 ..           dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b85942a    4803c1                  add rax, rcx                                           
0x78722b85942d    4983c608                add r14, 0x8                                           
0x78722b859431    498906                  mov [r14], rax                                         
 .. -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x78722b859434    c3                      ret                                                    
Word_Disassemble : word - '_fib4' :: codeSize = 105
Word : 0x0000787225cc9e4c :: Compiled at : 0x000078722b8593cc
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 457.19 <::
 6765
 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 467.21 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C compiler code >        
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C compiler code >        
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 467.21 <::

 0x000078722c065ad8
 The fibonacci sequence 15 :
 C -O3 :  610
Timer [ 1 ] : elapsed time = 0.000006472 seconds

 no locals fib  :  610
Timer [ 1 ] : elapsed time = 0.000009227 seconds

 locals fib1    :  610
Timer [ 1 ] : elapsed time = 0.000009888 seconds

 no locals fib2 :  610
Timer [ 1 ] : elapsed time = 0.000009258 seconds

 no locals fib3 :  610
Timer [ 1 ] : elapsed time = 0.000009287 seconds

 fibPTC?        :  610
Timer [ 1 ] : elapsed time = 0.000006472 seconds

 fibPTC2?       :  610
Timer [ 1 ] : elapsed time = 0.000005229 seconds


 0x000078722c065ad8
 The fibonacci sequence 30 :
 C -O3 :  832040
Timer [ 1 ] : elapsed time = 0.001355385 seconds

 no locals fib  :  832040
Timer [ 1 ] : elapsed time = 0.005526767 seconds

 locals fib1    :  832040
Timer [ 1 ] : elapsed time = 0.006194076 seconds

 no locals fib2 :  832040
Timer [ 1 ] : elapsed time = 0.005532467 seconds

 no locals fib3 :  832040
Timer [ 1 ] : elapsed time = 0.005535593 seconds

 fibPTC?        :  832040
Timer [ 1 ] : elapsed time = 0.000005831 seconds

 fibPTC2?       :  832040
Timer [ 1 ] : elapsed time = 0.000005019 seconds


DataStack at : namespaces/test/dev.csl : 492.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000078722c065ac8, InitialTos = 0x000078722c065ab0, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000078722c065ac8 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000078722c065ac0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000078722c065ab8 > = 0x0000000000000005

 =============================
Interpreter.tfib3 <:> csl compiled word
SourceCode for Interpreter.tfib3 :> 
: tfib3 ( n | m ) "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ; 
Source code file location of tfib3 : "namespaces/test/dev.csl" : 515.2 :: we are now at : namespaces/test/dev.csl : 521.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85aae5 -- code size = 908 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.tfib3 : definition = 0x000078722b85aae5 : disassembly at namespaces/test/dev.csl : 521.19 :
0x78722b85aae5    4d897e08                mov [r14+0x8], r15                                     
0x78722b85aae9    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85aaed    4981c610000000          add r14, 0x10                                          
0x78722b85aaf4    48b80622612b72780000    mov rax, 0x78722b612206       < string : 'Cfib2_O3       : ' >
0x78722b85aafe    4983c608                add r14, 0x8                                           
0x78722b85ab02    498906                  mov [r14], rax                                         
 .. 3 ( n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps  .. 
0x78722b85ab05    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85ab0f    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 ..  n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 t .. 
0x78722b85ab12    b801000000              mov eax, 0x1                                           
0x78722b85ab17    4983c608                add r14, 0x8                                           
0x78722b85ab1b    498906                  mov [r14], rax                                         
 ..  | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti  .. 
0x78722b85ab1e    49ba0e15842b72780000    mov r10, 0x78722b84150e                                
0x78722b85ab28    49ffd2                  call r10                      < System.ti : 0x000078722b84150e >
 ..       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { .. 
0x78722b85ab2b    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ .. 
0x78722b85ab33    498b4708                mov rax, [r15+0x8]                                     
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ .. 
0x78722b85ab37    498b4ff8                mov rcx, [r15-0x8]                                     
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x78722b85ab3b    483bc1                  cmp rax, rcx                                           
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x78722b85ab3e    7f44                    jg 0x2b85ab84                 < Interpreter.tfib3+159 >
0x78722b85ab40    0f1f4000                nop [rax]                                              
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x78722b85ab44    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ab48    4983c608                add r14, 0x8                                           
0x78722b85ab4c    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fib .. 
0x78722b85ab4f    49bb6067f289c8600000    mov r11, 0x60c889f26760                                
0x78722b85ab59    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ab63    49ffd2                  call r10                      < C.cfib2_O3 : 0x000060c889f26760 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m  .. 
0x78722b85ab66    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85ab70    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } .. 
0x78722b85ab73    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } wh .. 
0x78722b85ab77    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ab7b    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b85ab7f    483bc1                  cmp rax, rcx                                           
0x78722b85ab82    7ec0                    jle 0x2b85ab44                < Interpreter.tfib3+95 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 ti .. 
0x78722b85ab84    b801000000              mov eax, 0x1                                           
0x78722b85ab89    4983c608                add r14, 0x8                                           
0x78722b85ab8d    498906                  mov [r14], rax                                         
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time .. 
0x78722b85ab90    49bb3021f289c8600000    mov r11, 0x60c889f22130                                
0x78722b85ab9a    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85aba4    49ffd2                  call r10                      < System.time : 0x000060c889f22130 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl n .. 
0x78722b85aba7    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85abb1    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85abbb    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl   .. 
0x78722b85abbe    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85abc8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85abd2    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b85abd5    48b84622612b72780000    mov rax, 0x78722b612246       < string : 'locals fibPTC? : ' >
0x78722b85abdf    4983c608                add r14, 0x8                                           
0x78722b85abe3    498906                  mov [r14], rax                                         
 ..  1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps  .. 
0x78722b85abe6    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85abf0    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 t .. 
0x78722b85abf3    b801000000              mov eax, 0x1                                           
0x78722b85abf8    4983c608                add r14, 0x8                                           
0x78722b85abfc    498906                  mov [r14], rax                                         
 .. me nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti  .. 
0x78722b85abff    49ba0e15842b72780000    mov r10, 0x78722b84150e                                
0x78722b85ac09    49ffd2                  call r10                      < System.ti : 0x000078722b84150e >
 .. l     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { .. 
0x78722b85ac0c    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ .. 
0x78722b85ac14    498b4708                mov rax, [r15+0x8]                                     
 .. ocals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ .. 
0x78722b85ac18    498b4ff8                mov rcx, [r15-0x8]                                     
 .. s fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x78722b85ac1c    483bc1                  cmp rax, rcx                                           
 .. ibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x78722b85ac1f    7f3a                    jg 0x2b85ac5b                 < Interpreter.tfib3+374 >
0x78722b85ac21    0f1f4000                nop [rax]                                              
 .. C? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x78722b85ac25    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ac29    4983c608                add r14, 0x8                                           
0x78722b85ac2d    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fib .. 
0x78722b85ac30    49ba4250852b72780000    mov r10, 0x78722b855042                                
0x78722b85ac3a    49ffd2                  call r10                      < C.fibPTC? : 0x000078722b855042 >
 .. ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p  .. 
0x78722b85ac3d    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85ac47    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 ..  1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ .. 
0x78722b85ac4a    49ff4708                inc qword [r15+0x8]                                    
 .. = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ }  .. 
0x78722b85ac4e    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ac52    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b85ac56    483bc1                  cmp rax, rcx                                           
0x78722b85ac59    7eca                    jle 0x2b85ac25                < Interpreter.tfib3+320 >
 .. n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1  .. 
0x78722b85ac5b    b801000000              mov eax, 0x1                                           
0x78722b85ac60    4983c608                add r14, 0x8                                           
0x78722b85ac64    498906                  mov [r14], rax                                         
 .. @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 ti .. 
0x78722b85ac67    49bb3021f289c8600000    mov r11, 0x60c889f22130                                
0x78722b85ac71    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ac7b    49ffd2                  call r10                      < System.time : 0x000060c889f22130 >
 .. } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl .. 
0x78722b85ac7e    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85ac88    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ac92    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 ..  m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl .. 
0x78722b85ac95    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85ac9f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85aca9    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b85acac    48b88722612b72780000    mov rax, 0x78722b612287       < string : 'locals fibPTC2? : ' >
0x78722b85acb6    4983c608                add r14, 0x8                                           
0x78722b85acba    498906                  mov [r14], rax                                         
 .. 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps  .. 
0x78722b85acbd    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85acc7    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. ime nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 t .. 
0x78722b85acca    b801000000              mov eax, 0x1                                           
0x78722b85accf    4983c608                add r14, 0x8                                           
0x78722b85acd3    498906                  mov [r14], rax                                         
 .. e nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti  .. 
0x78722b85acd6    49ba0e15842b72780000    mov r10, 0x78722b84150e                                
0x78722b85ace0    49ffd2                  call r10                      < System.ti : 0x000078722b84150e >
 ..      "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { .. 
0x78722b85ace3    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ .. 
0x78722b85aceb    498b4708                mov rax, [r15+0x8]                                     
 .. cals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ .. 
0x78722b85acef    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x78722b85acf3    483bc1                  cmp rax, rcx                                           
 .. bPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x78722b85acf6    7f3a                    jg 0x2b85ad32                 < Interpreter.tfib3+589 >
0x78722b85acf8    0f1f4000                nop [rax]                                              
 .. 2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x78722b85acfc    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ad00    4983c608                add r14, 0x8                                           
0x78722b85ad04    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfi .. 
0x78722b85ad07    49bab190852b72780000    mov r10, 0x78722b8590b1                                
0x78722b85ad11    49ffd2                  call r10                      < C_Syntax.fibPTC2? : 0x000078722b8590b1 >
 .. i m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m .. 
0x78722b85ad14    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85ad1e    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++  .. 
0x78722b85ad21    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } w .. 
0x78722b85ad25    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ad29    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b85ad2d    483bc1                  cmp rax, rcx                                           
0x78722b85ad30    7eca                    jle 0x2b85acfc                < Interpreter.tfib3+535 >
 ..  @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 t .. 
0x78722b85ad32    b801000000              mov eax, 0x1                                           
0x78722b85ad37    4983c608                add r14, 0x8                                           
0x78722b85ad3b    498906                  mov [r14], rax                                         
 ..  <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 tim .. 
0x78722b85ad3e    49bb3021f289c8600000    mov r11, 0x60c889f22130                                
0x78722b85ad48    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ad52    49ffd2                  call r10                      < System.time : 0x000060c889f22130 >
 ..  { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl  .. 
0x78722b85ad55    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85ad5f    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ad69    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl  .. 
0x78722b85ad6c    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85ad76    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ad80    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b85ad83    48b8c922612b72780000    mov rax, 0x78722b6122c9       < string : 'Cfib2_O3       : ' >
0x78722b85ad8d    4983c608                add r14, 0x8                                           
0x78722b85ad91    498906                  mov [r14], rax                                         
 ..  1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ad94    49ba1e04842b72780000    mov r10, 0x78722b84041e                                
0x78722b85ad9e    49ffd2                  call r10                      < Int.ps : 0x000078722b84041e >
 .. time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ada1    b801000000              mov eax, 0x1                                           
0x78722b85ada6    4983c608                add r14, 0x8                                           
0x78722b85adaa    498906                  mov [r14], rax                                         
 .. me nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adad    49ba0e15842b72780000    mov r10, 0x78722b84150e                                
0x78722b85adb7    49ffd2                  call r10                      < System.ti : 0x000078722b84150e >
 .. l     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adba    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adc2    498b4708                mov rax, [r15+0x8]                                     
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adc6    498b4ff8                mov rcx, [r15-0x8]                                     
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adca    483bc1                  cmp rax, rcx                                           
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adcd    7f44                    jg 0x2b85ae13                 < Interpreter.tfib3+814 >
0x78722b85adcf    0f1f4000                nop [rax]                                              
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85add3    498b4708                mov rax, [r15+0x8]                                     
0x78722b85add7    4983c608                add r14, 0x8                                           
0x78722b85addb    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adde    49bb6067f289c8600000    mov r11, 0x60c889f26760                                
0x78722b85ade8    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85adf2    49ffd2                  call r10                      < C.cfib2_O3 : 0x000060c889f26760 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85adf5    49bad006842b72780000    mov r10, 0x78722b8406d0                                
0x78722b85adff    49ffd2                  call r10                      < User.p : 0x000078722b8406d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae02    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae06    498b4708                mov rax, [r15+0x8]                                     
0x78722b85ae0a    498b4ff8                mov rcx, [r15-0x8]                                     
0x78722b85ae0e    483bc1                  cmp rax, rcx                                           
0x78722b85ae11    7ec0                    jle 0x2b85add3                < Interpreter.tfib3+750 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae13    b801000000              mov eax, 0x1                                           
0x78722b85ae18    4983c608                add r14, 0x8                                           
0x78722b85ae1c    498906                  mov [r14], rax                                         
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae1f    49bb3021f289c8600000    mov r11, 0x60c889f22130                                
0x78722b85ae29    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ae33    49ffd2                  call r10                      < System.time : 0x000060c889f22130 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae36    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85ae40    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ae4a    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae4d    49bb3004f289c8600000    mov r11, 0x60c889f20430                                
0x78722b85ae57    49ba3247ff2a72780000    mov r10, 0x78722aff4732                                
0x78722b85ae61    49ffd2                  call r10                      < Io.newline : 0x000060c889f20430 >
0x78722b85ae64    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85ae68    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85ae6c    4983ee08                sub r14, 0x8                                           
 ..  cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x78722b85ae70    c3                      ret                                                    
Word_Disassemble : word - 'tfib3' :: codeSize = 908
Word : 0x0000787225a08cb8 :: Compiled at : 0x000078722b85aae5
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 521.19 <::

 The fibonacci sequence:: first : 30 ...
 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002271797 seconds


 Cfib            :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002264934 seconds


 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002263091 seconds


 no locals _fib  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009100741 seconds


 locals   _fibn0 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010634457 seconds


 locals   _fibn1 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010296349 seconds


 locals   _fib1  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010169204 seconds


 no locals _fib2 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009102553 seconds


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009105349 seconds


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.007944695 seconds


 fibPTC?         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000152052 seconds


 fibPTC2?        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000160928 seconds


 Cfib_O3        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002269662 seconds


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.007962229 seconds


 locals _fibn1   :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010218785 seconds


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009091052 seconds


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000494367 seconds


 locals fibPTC? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000537768 seconds


 locals fibPTC2? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000498094 seconds


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000503384 seconds



 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 531.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b854ece -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x000078722b854ece : disassembly at namespaces/test/dev.csl : 531.19 :
 ..                               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ece    498b06                  mov rax, [r14]                                         
0x78722b854ed1    4983c608                add r14, 0x8                                           
0x78722b854ed5    498906                  mov [r14], rax                                         
0x78722b854ed8    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854edd    488bc8                  mov rcx, rax                                           
0x78722b854ee0    498b06                  mov rax, [r14]                                         
0x78722b854ee3    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ee7    483bc1                  cmp rax, rcx                                           
0x78722b854eea    0f8d05000000            jge 0x78722b854ef5            < C._fib2+39 >
0x78722b854ef0    e94c000000              jmp 0x78722b854f41            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ef5    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854ef8    4983c608                add r14, 0x8                                           
0x78722b854efc    498906                  mov [r14], rax                                         
0x78722b854eff    498b06                  mov rax, [r14]                                         
0x78722b854f02    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f06    48ffc8                  dec rax                                                
0x78722b854f09    4983c608                add r14, 0x8                                           
0x78722b854f0d    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f10    e8b9ffffff              call 0x78722b854ece           < C._fib2 : 0x000078722b854ece >
0x78722b854f15    498b0e                  mov rcx, [r14]                                         
0x78722b854f18    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854f1c    49894ef8                mov [r14-0x8], rcx                                     
0x78722b854f20    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f23    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x78722b854f27    e8a2ffffff              call 0x78722b854ece           < C._fib2 : 0x000078722b854ece >
0x78722b854f2c    498b0e                  mov rcx, [r14]                                         
0x78722b854f2f    498b46f8                mov rax, [r14-0x8]                                     
0x78722b854f33    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x78722b854f37    4803c1                  add rax, rcx                                           
0x78722b854f3a    4983c608                add r14, 0x8                                           
0x78722b854f3e    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x78722b854f41    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x0000787225f6199e :: Compiled at : 0x000078722b854ece
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 531.19 <::
 9
 should be 9
 =============================
Interpreter.fibBN <:> csl compiled word
SourceCode for Interpreter.fibBN :> 
: fibBN ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibBN : "namespaces/test/dev.csl" : 538.2 :: we are now at : namespaces/test/dev.csl : 549.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85aed3 -- code size = 135 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.fibBN : definition = 0x000078722b85aed3 : disassembly at namespaces/test/dev.csl : 549.19 :
0x78722b85aed3    4d897e08                mov [r14+0x8], r15                                     
0x78722b85aed7    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85aedb    4981c620000000          add r14, 0x20                                          
   : fibBN ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x78722b85aee2    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x78722b85aeea    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x78722b85aef2    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x78722b85aefa    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x78722b85aeff    7e49                    jle 0x2b85af4a                < Interpreter.fibBN+119 >
0x78722b85af01    0f1f4000                nop [rax]                                              
0x78722b85af05    498d4710                lea rax, [r15+0x10]                                    
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af09    498b4f18                mov rcx, [r15+0x18]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af0d    488908                  mov [rax], rcx                                         
0x78722b85af10    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af14    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af18    488908                  mov [rax], rcx                                         
0x78722b85af1b    498d4708                lea rax, [r15+0x8]                                     
0x78722b85af1f    4983c608                add r14, 0x8                                           
0x78722b85af23    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af26    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af2a    498b4f18                mov rcx, [r15+0x18]                                    
0x78722b85af2e    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af31    488bc8                  mov rcx, rax                                           
0x78722b85af34    498b06                  mov rax, [r14]                                         
0x78722b85af37    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af3b    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x78722b85af3e    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x78722b85af43    49837ff800              cmp qword [r15-0x8], 0x0                               
0x78722b85af48    7fbb                    jg 0x2b85af05                 < Interpreter.fibBN+50 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af4a    498b4708                mov rax, [r15+0x8]                                     
0x78722b85af4e    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85af52    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x78722b85af56    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x78722b85af59    c3                      ret                                                    
Word_Disassemble : word - 'fibBN' :: codeSize = 135
Word : 0x0000787225a16c58 :: Compiled at : 0x000078722b85aed3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 549.19 <::
 6765

 locals fibBN :  1 :  1, 2 :  1, 3 :  2, 4 :  3, 5 :  5, 6 :  8, 7 :  13, 8 :  21, 9 :  34, 10 :  55, 11 :  89, 12 :  144, 13 :  233, 14 :  377, 15 :  610, 16 :  987, 17 :  1597, 18 :  2584, 19 :  4181, 20 :  6765, 21 :  10946, 22 :  17711, 23 :  28657, 24 :  46368, 25 :  75025, 26 :  121393, 27 :  196418, 28 :  317811, 29 :  514229, 30 :  832040, 31 :  1346269, 32 :  2178309, 33 :  3524578, 34 :  5702887, 35 :  9227465, 36 :  14930352, 37 :  24157817, 38 :  39088169, 39 :  63245986, 40 :  102334155, 41 :  165580141, 42 :  267914296, 43 :  433494437, 44 :  701408733, 45 :  1134903170, 46 :  1836311903, 47 :  2971215073, 48 :  4807526976, 49 :  7778742049, 50 :  12586269025, 51 :  20365011074, 52 :  32951280099, 53 :  53316291173, 54 :  86267571272, 55 :  139583862445, 56 :  225851433717, 57 :  365435296162, 58 :  591286729879, 59 :  956722026041, 60 :  1548008755920, 61 :  2504730781961, 62 :  4052739537881, 63 :  6557470319842, 64 :  10610209857723, 65 :  17167680177565, 66 :  27777890035288, 67 :  44945570212853, 68 :  72723460248141, 69 :  117669030460994, 70 :  190392490709135, 71 :  308061521170129, 72 :  498454011879264, 73 :  806515533049393, 74 :  1304969544928657, 75 :  2111485077978050, 76 :  3416454622906707, 77 :  5527939700884757, 78 :  8944394323791464, 79 :  14472334024676221, 80 :  23416728348467685, 81 :  37889062373143906, 82 :  61305790721611591, 83 :  99194853094755497, 84 :  160500643816367088, 85 :  259695496911122585, 86 :  420196140727489673, 87 :  679891637638612258, 88 :  1100087778366101931, 89 :  1779979416004714189, 90 :  2880067194370816120, 91 :  4660046610375530309, 92 :  7540113804746346429
 92 7540113804746346429 6765 ok
 =============================
Interpreter._ifx <:> csl compiled word
SourceCode for Interpreter._ifx :> 
: _ifx ( w | j ) { j 1 = } { j @ reps0 @ <= } { j ++ } { j @ w @ wrun drop } for ; 
Source code file location of _ifx : "namespaces/test/dev.csl" : 564.2 :: we are now at : namespaces/test/dev.csl : 575.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85b0e4 -- code size = 125 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._ifx : definition = 0x000078722b85b0e4 : disassembly at namespaces/test/dev.csl : 575.9 :
0x78722b85b0e4    4d897e08                mov [r14+0x8], r15                                     
0x78722b85b0e8    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85b0ec    4981c610000000          add r14, 0x10                                          
 ..            : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     fo .. 
0x78722b85b0f3    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..      : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  .. 
0x78722b85b0fb    498b4708                mov rax, [r15+0x8]                                     
 ..  : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  .. 
0x78722b85b0ff    48b93ce8c62572780000    mov rcx, 0x787225c6e83c                                
0x78722b85b109    488b09                  mov rcx, [rcx]                                         
 .. ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x78722b85b10c    483bc1                  cmp rax, rcx                                           
 ..  | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x78722b85b10f    7f43                    jg 0x2b85b154                 < Interpreter._ifx+112 >
0x78722b85b111    0f1f4000                nop [rax]                                              
0x78722b85b115    498b4708                mov rax, [r15+0x8]                                     
0x78722b85b119    4983c608                add r14, 0x8                                           
0x78722b85b11d    498906                  mov [r14], rax                                         
 .. }      {                          j @ w @ wrun drop          }     for ; 
0x78722b85b120    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85b124    4983c608                add r14, 0x8                                           
0x78722b85b128    4983ee08                sub r14, 0x8                                           
0x78722b85b12c    488b8088000000          mov rax, [rax+0x88]                                    
0x78722b85b133    48ffd0                  call rax                                               
 ..                          j @ w @ wrun drop          }     for ; 
0x78722b85b136    4983ee08                sub r14, 0x8                                           
 ..      { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x78722b85b13a    49ff4708                inc qword [r15+0x8]                                    
 ..   { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x78722b85b13e    498b4708                mov rax, [r15+0x8]                                     
0x78722b85b142    48b93ce8c62572780000    mov rcx, 0x787225c6e83c                                
0x78722b85b14c    488b09                  mov rcx, [rcx]                                         
0x78722b85b14f    483bc1                  cmp rax, rcx                                           
0x78722b85b152    7ec1                    jle 0x2b85b115                < Interpreter._ifx+49 >
0x78722b85b154    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85b158    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85b15c    4983ee08                sub r14, 0x8                                           
 ..  j @ w @ wrun drop          }     for ; 
0x78722b85b160    c3                      ret                                                    
Word_Disassemble : word - '_ifx' :: codeSize = 125
Word : 0x0000787225a21298 :: Compiled at : 0x000078722b85b0e4
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 575.9 <::

 =============================
Interpreter._ffx <:> csl compiled word
SourceCode for Interpreter._ffx :> 
: _ffx ( n w ) { n @ 0 > } { reps @ w @ ifx n -- } while ; 
Source code file location of _ffx : "namespaces/test/dev.csl" : 580.2 :: we are now at : namespaces/test/dev.csl : 585.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b85b1c9 -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._ffx : definition = 0x000078722b85b1c9 : disassembly at namespaces/test/dev.csl : 585.9 :
0x78722b85b1c9    4d897e08                mov [r14+0x8], r15                                     
0x78722b85b1cd    4d8d7e08                lea r15, [r14+0x8]                                     
0x78722b85b1d1    4981c608000000          add r14, 0x8                                           
 ..                 : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x78722b85b1d8    49837ff000              cmp qword [r15-0x10], 0x0                              
 ..         : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x78722b85b1dd    7e3b                    jle 0x2b85b21a                < Interpreter._ffx+81 >
0x78722b85b1df    0f1f4000                nop [rax]                                              
   : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x78722b85b1e3    48b84ca5c72572780000    mov rax, 0x787225c7a54c                                
0x78722b85b1ed    488b00                  mov rax, [rax]                                         
0x78722b85b1f0    4983c608                add r14, 0x8                                           
0x78722b85b1f4    498906                  mov [r14], rax                                         
 ..  n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x78722b85b1f7    498b47f8                mov rax, [r15-0x8]                                     
0x78722b85b1fb    4983c608                add r14, 0x8                                           
0x78722b85b1ff    498906                  mov [r14], rax                                         
 ..  )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x78722b85b202    49ba66b1852b72780000    mov r10, 0x78722b85b166                                
0x78722b85b20c    49ffd2                  call r10                      < Interpreter.ifx : 0x000078722b85b166 >
 ..   { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x78722b85b20f    49ff4ff0                dec qword [r15-0x10]                                   
 ..  n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x78722b85b213    49837ff000              cmp qword [r15-0x10], 0x0                              
0x78722b85b218    7fc9                    jg 0x2b85b1e3                 < Interpreter._ffx+26 >
0x78722b85b21a    4d8d77f8                lea r14, [r15-0x8]                                     
0x78722b85b21e    4d8b7e08                mov r15, [r14+0x8]                                     
0x78722b85b222    4983ee10                sub r14, 0x10                                          
 ..   { reps @ w @ ifx n -- }       while ; 
0x78722b85b226    c3                      ret                                                    
Word_Disassemble : word - '_ffx' :: codeSize = 94
Word : 0x0000787225a27048 :: Compiled at : 0x000078722b85b1c9
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 585.9 <::
 

fib_shootout begin ...

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.033661724 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.047038161 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.033428070 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.046822580 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.033621320 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.046346266 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.034987796 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.048147178 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036357978 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.047127287 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036268983 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.046203110 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036038916 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.046817540 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.036580471 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.046176281 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 638.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8590b1 -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x000078722b8590b1 : disassembly at namespaces/test/dev.csl : 638.15 :
0x78722b8590b1    498b0e                  mov rcx, [r14]                                         
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn .. 
0x78722b8590b4    48c7c200000000          mov rdx, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x78722b8590bb    48c7c700000000          mov rdi, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x78722b8590c2    be01000000              mov esi, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x78722b8590c7    4883f900                cmp rcx, 0x0                                           
0x78722b8590cb    7415                    jz 0x2b8590e2                 < C_Syntax.fibPTC2?+49 >
0x78722b8590cd    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d1    488bfe                  mov rdi, rsi                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d4    488bf2                  mov rsi, rdx                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590d7    4803fe                  add rdi, rsi                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590da    488bd7                  mov rdx, rdi                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x78722b8590dd    48ffc9                  dec rcx                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x78722b8590e0    75ef                    jnz 0x2b8590d1                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e2    498916                  mov [r14], rdx                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x78722b8590e5    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x0000787225cb4b0c :: Compiled at : 0x000078722b8590b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.035531645 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
starting at address : 0x89f26760 -- code size = 45 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x000060c889f26760 : disassembly at namespaces/test/dev.csl : 638.15 :
0x60c889f26760    498b06                  mov rax, [r14]                                         
0x60c889f26763    4c89f7                  mov rdi, r14                                           
0x60c889f26766    4885c0                  test rax, rax                                          
0x60c889f26769    7425                    jz 0x89f26790                 < C compiler code >        
0x60c889f2676b    b901000000              mov ecx, 0x1                                           
0x60c889f26770    31d2                    xor edx, edx                                           
0x60c889f26772    eb07                    jmp 0x60c889f2677b            < C.cfib2_O3+27 >
0x60c889f26774    0f1f4000                nop [rax]                                              
0x60c889f26778    4889f2                  mov rdx, rsi                                           
0x60c889f2677b    488d340a                lea rsi, [rdx+rcx]                                     
0x60c889f2677f    4889d1                  mov rcx, rdx                                           
0x60c889f26782    4883e801                sub rax, 0x1                                           
0x60c889f26786    75f0                    jnz 0x89f26778                < C.cfib2_O3+24 >
0x60c889f26788    488937                  mov [rdi], rsi                                         
0x60c889f2678b    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 45
Word : 0x000078722b8b5788 :: Compiled at : 0x000060c889f26760
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.15 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.046174197 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps
 
fib_shootout end ...
 

fac_shootout begin ...

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003277482 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x000060c889f268b0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f268b0    498b06                  mov rax, [r14]                                         
0x60c889f268b3    4c89f6                  mov rsi, r14                                           
0x60c889f268b6    ba01000000              mov edx, 0x1                                           
0x60c889f268bb    4883f801                cmp rax, 0x1                                           
0x60c889f268bf    7e2d                    jle 0x89f268ee                < C compiler code >        
0x60c889f268c1    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268c5    a801                    test al, 0x1                                           
0x60c889f268c7    750f                    jnz 0x89f268d8                < C compiler code >        
0x60c889f268c9    4889c2                  mov rdx, rax                                           
0x60c889f268cc    4889c8                  mov rax, rcx                                           
0x60c889f268cf    4883f901                cmp rcx, 0x1                                           
0x60c889f268d3    7419                    jz 0x89f268ee                 < C compiler code >        
0x60c889f268d5    0f1f00                  nop [rax]                                              
0x60c889f268d8    480fafd0                imul rdx, rax                                          
0x60c889f268dc    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268e0    4883e802                sub rax, 0x2                                           
0x60c889f268e4    480fafd1                imul rdx, rcx                                          
0x60c889f268e8    4883f801                cmp rax, 0x1                                           
0x60c889f268ec    75ea                    jnz 0x89f268d8                < C compiler code >        
0x60c889f268ee    488916                  mov [rsi], rdx                                         
0x60c889f268f1    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 67
Word : 0x000078722b8b5e48 :: Compiled at : 0x000060c889f268b0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002105838 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003094283 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0x89f268b0 -- code size = 67 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x000060c889f268b0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f268b0    498b06                  mov rax, [r14]                                         
0x60c889f268b3    4c89f6                  mov rsi, r14                                           
0x60c889f268b6    ba01000000              mov edx, 0x1                                           
0x60c889f268bb    4883f801                cmp rax, 0x1                                           
0x60c889f268bf    7e2d                    jle 0x89f268ee                < C.cfactorial4_O3+62 >
0x60c889f268c1    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268c5    a801                    test al, 0x1                                           
0x60c889f268c7    750f                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268c9    4889c2                  mov rdx, rax                                           
0x60c889f268cc    4889c8                  mov rax, rcx                                           
0x60c889f268cf    4883f901                cmp rcx, 0x1                                           
0x60c889f268d3    7419                    jz 0x89f268ee                 < C.cfactorial4_O3+62 >
0x60c889f268d5    0f1f00                  nop [rax]                                              
0x60c889f268d8    480fafd0                imul rdx, rax                                          
0x60c889f268dc    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268e0    4883e802                sub rax, 0x2                                           
0x60c889f268e4    480fafd1                imul rdx, rcx                                          
0x60c889f268e8    4883f801                cmp rax, 0x1                                           
0x60c889f268ec    75ea                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268ee    488916                  mov [rsi], rdx                                         
0x60c889f268f1    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 67
Word : 0x000078722b8b5e48 :: Compiled at : 0x000060c889f268b0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002142877 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003114891 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :> 
C Primitive
 -----------------------------
Word :: C.cfactorial3 : definition = 0x000060c889f26b10 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f26b10    498b06                  mov rax, [r14]                                         
0x60c889f26b13    4c89f6                  mov rsi, r14                                           
0x60c889f26b16    ba01000000              mov edx, 0x1                                           
0x60c889f26b1b    4883f801                cmp rax, 0x1                                           
0x60c889f26b1f    7e18                    jle 0x89f26b39                < C compiler code >        
0x60c889f26b21    0f1f8000000000          nop [rax]                                              
0x60c889f26b28    4889c1                  mov rcx, rax                                           
0x60c889f26b2b    4883e801                sub rax, 0x1                                           
0x60c889f26b2f    480fafd1                imul rdx, rcx                                          
0x60c889f26b33    4883f801                cmp rax, 0x1                                           
0x60c889f26b37    75ef                    jnz 0x89f26b28                < C compiler code >        
0x60c889f26b39    488916                  mov [rsi], rdx                                         
0x60c889f26b3c    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial3' :: codeSize = 46
Word : 0x000078722b8b5428 :: Compiled at : 0x000060c889f26b10
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002255806 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003101777 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0x89f268b0 -- code size = 67 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x000060c889f268b0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f268b0    498b06                  mov rax, [r14]                                         
0x60c889f268b3    4c89f6                  mov rsi, r14                                           
0x60c889f268b6    ba01000000              mov edx, 0x1                                           
0x60c889f268bb    4883f801                cmp rax, 0x1                                           
0x60c889f268bf    7e2d                    jle 0x89f268ee                < C.cfactorial4_O3+62 >
0x60c889f268c1    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268c5    a801                    test al, 0x1                                           
0x60c889f268c7    750f                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268c9    4889c2                  mov rdx, rax                                           
0x60c889f268cc    4889c8                  mov rax, rcx                                           
0x60c889f268cf    4883f901                cmp rcx, 0x1                                           
0x60c889f268d3    7419                    jz 0x89f268ee                 < C.cfactorial4_O3+62 >
0x60c889f268d5    0f1f00                  nop [rax]                                              
0x60c889f268d8    480fafd0                imul rdx, rax                                          
0x60c889f268dc    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268e0    4883e802                sub rax, 0x2                                           
0x60c889f268e4    480fafd1                imul rdx, rcx                                          
0x60c889f268e8    4883f801                cmp rax, 0x1                                           
0x60c889f268ec    75ea                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268ee    488916                  mov [rsi], rdx                                         
0x60c889f268f1    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 67
Word : 0x000078722b8b5e48 :: Compiled at : 0x000060c889f268b0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002092304 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003112567 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0x89f268b0 -- code size = 67 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x000060c889f268b0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f268b0    498b06                  mov rax, [r14]                                         
0x60c889f268b3    4c89f6                  mov rsi, r14                                           
0x60c889f268b6    ba01000000              mov edx, 0x1                                           
0x60c889f268bb    4883f801                cmp rax, 0x1                                           
0x60c889f268bf    7e2d                    jle 0x89f268ee                < C.cfactorial4_O3+62 >
0x60c889f268c1    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268c5    a801                    test al, 0x1                                           
0x60c889f268c7    750f                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268c9    4889c2                  mov rdx, rax                                           
0x60c889f268cc    4889c8                  mov rax, rcx                                           
0x60c889f268cf    4883f901                cmp rcx, 0x1                                           
0x60c889f268d3    7419                    jz 0x89f268ee                 < C.cfactorial4_O3+62 >
0x60c889f268d5    0f1f00                  nop [rax]                                              
0x60c889f268d8    480fafd0                imul rdx, rax                                          
0x60c889f268dc    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268e0    4883e802                sub rax, 0x2                                           
0x60c889f268e4    480fafd1                imul rdx, rcx                                          
0x60c889f268e8    4883f801                cmp rax, 0x1                                           
0x60c889f268ec    75ea                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268ee    488916                  mov [rsi], rdx                                         
0x60c889f268f1    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 67
Word : 0x000078722b8b5e48 :: Compiled at : 0x000060c889f268b0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002108163 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003132024 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :> 
C Primitive
starting at address : 0x89f26b10 -- code size = 46 bytes
 -----------------------------
Word :: C.cfactorial3 : definition = 0x000060c889f26b10 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f26b10    498b06                  mov rax, [r14]                                         
0x60c889f26b13    4c89f6                  mov rsi, r14                                           
0x60c889f26b16    ba01000000              mov edx, 0x1                                           
0x60c889f26b1b    4883f801                cmp rax, 0x1                                           
0x60c889f26b1f    7e18                    jle 0x89f26b39                < C.cfactorial3+41 >
0x60c889f26b21    0f1f8000000000          nop [rax]                                              
0x60c889f26b28    4889c1                  mov rcx, rax                                           
0x60c889f26b2b    4883e801                sub rax, 0x1                                           
0x60c889f26b2f    480fafd1                imul rdx, rcx                                          
0x60c889f26b33    4883f801                cmp rax, 0x1                                           
0x60c889f26b37    75ef                    jnz 0x89f26b28                < C.cfactorial3+24 >
0x60c889f26b39    488916                  mov [rsi], rdx                                         
0x60c889f26b3c    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial3' :: codeSize = 46
Word : 0x000078722b8b5428 :: Compiled at : 0x000060c889f26b10
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002573387 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003107578 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0x89f268b0 -- code size = 67 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x000060c889f268b0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f268b0    498b06                  mov rax, [r14]                                         
0x60c889f268b3    4c89f6                  mov rsi, r14                                           
0x60c889f268b6    ba01000000              mov edx, 0x1                                           
0x60c889f268bb    4883f801                cmp rax, 0x1                                           
0x60c889f268bf    7e2d                    jle 0x89f268ee                < C.cfactorial4_O3+62 >
0x60c889f268c1    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268c5    a801                    test al, 0x1                                           
0x60c889f268c7    750f                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268c9    4889c2                  mov rdx, rax                                           
0x60c889f268cc    4889c8                  mov rax, rcx                                           
0x60c889f268cf    4883f901                cmp rcx, 0x1                                           
0x60c889f268d3    7419                    jz 0x89f268ee                 < C.cfactorial4_O3+62 >
0x60c889f268d5    0f1f00                  nop [rax]                                              
0x60c889f268d8    480fafd0                imul rdx, rax                                          
0x60c889f268dc    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268e0    4883e802                sub rax, 0x2                                           
0x60c889f268e4    480fafd1                imul rdx, rcx                                          
0x60c889f268e8    4883f801                cmp rax, 0x1                                           
0x60c889f268ec    75ea                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268ee    488916                  mov [rsi], rdx                                         
0x60c889f268f1    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 67
Word : 0x000078722b8b5e48 :: Compiled at : 0x000060c889f268b0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002071685 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003109221 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :> 
C Primitive
starting at address : 0x89f268b0 -- code size = 67 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x000060c889f268b0 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f268b0    498b06                  mov rax, [r14]                                         
0x60c889f268b3    4c89f6                  mov rsi, r14                                           
0x60c889f268b6    ba01000000              mov edx, 0x1                                           
0x60c889f268bb    4883f801                cmp rax, 0x1                                           
0x60c889f268bf    7e2d                    jle 0x89f268ee                < C.cfactorial4_O3+62 >
0x60c889f268c1    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268c5    a801                    test al, 0x1                                           
0x60c889f268c7    750f                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268c9    4889c2                  mov rdx, rax                                           
0x60c889f268cc    4889c8                  mov rax, rcx                                           
0x60c889f268cf    4883f901                cmp rcx, 0x1                                           
0x60c889f268d3    7419                    jz 0x89f268ee                 < C.cfactorial4_O3+62 >
0x60c889f268d5    0f1f00                  nop [rax]                                              
0x60c889f268d8    480fafd0                imul rdx, rax                                          
0x60c889f268dc    488d48ff                lea rcx, [rax-0x1]                                     
0x60c889f268e0    4883e802                sub rax, 0x2                                           
0x60c889f268e4    480fafd1                imul rdx, rcx                                          
0x60c889f268e8    4883f801                cmp rax, 0x1                                           
0x60c889f268ec    75ea                    jnz 0x89f268d8                < C.cfactorial4_O3+40 >
0x60c889f268ee    488916                  mov [rsi], rdx                                         
0x60c889f268f1    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 67
Word : 0x000078722b8b5e48 :: Compiled at : 0x000060c889f268b0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002058831 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x2b8584ee -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x000078722b8584ee : disassembly at namespaces/test/dev.csl : 668.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584ee    498b0e                  mov rcx, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x78722b8584f1    ba01000000              mov edx, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584f6    480fafd1                imul rdx, rcx                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fa    48ffc9                  dec rcx                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b8584fd    4883f901                cmp rcx, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858501    7ff3                    jg 0x2b8584f6                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858503    498916                  mov [r14], rdx                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x78722b858506    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x0000787225c6bebc :: Compiled at : 0x000078722b8584ee
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.003106015 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :> 
C Primitive
starting at address : 0x89f26b10 -- code size = 46 bytes
 -----------------------------
Word :: C.cfactorial3 : definition = 0x000060c889f26b10 : disassembly at namespaces/test/dev.csl : 668.15 :
0x60c889f26b10    498b06                  mov rax, [r14]                                         
0x60c889f26b13    4c89f6                  mov rsi, r14                                           
0x60c889f26b16    ba01000000              mov edx, 0x1                                           
0x60c889f26b1b    4883f801                cmp rax, 0x1                                           
0x60c889f26b1f    7e18                    jle 0x89f26b39                < C.cfactorial3+41 >
0x60c889f26b21    0f1f8000000000          nop [rax]                                              
0x60c889f26b28    4889c1                  mov rcx, rax                                           
0x60c889f26b2b    4883e801                sub rax, 0x1                                           
0x60c889f26b2f    480fafd1                imul rdx, rcx                                          
0x60c889f26b33    4883f801                cmp rax, 0x1                                           
0x60c889f26b37    75ef                    jnz 0x89f26b28                < C.cfactorial3+24 >
0x60c889f26b39    488916                  mov [rsi], rdx                                         
0x60c889f26b3c    c3                      ret                                                    
Word_Disassemble : word - 'cfactorial3' :: codeSize = 46
Word : 0x000078722b8b5428 :: Compiled at : 0x000060c889f26b10
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.15 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002270805 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps
 

fac_shootout end ...


NamespaceTree - All Namespaces : using : not using :: with : words
         - Root powReg7 powReg6 powReg5 powReg4 powReg3 powReg2 powReg pow ;; sp sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
                 - Interpreter fac_shootout fib_shootout _shootout SHOOTOUT comment _ffx ifx _ifx dbg tfib3 fibBN tbn tfib3 tfib2 tfib1 tfib fibPTC2 fibPTC Cfib_O3 Cfib fibn0 sp _Compile_Stack_PopToReg sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
                 - C fib4 fib3 fib2 fib tt fibPTC3? fibPTC? _fib1 _fib2 factorial fac hi x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf oPrintf
                         - C_Syntax fibPTC4? fibPTC2? fibPTC? _fibn0 cpow fibPTC2? faccs2 fac5 fac40 faccs1 faccs fac5 faccs3 factoriali2 factoriali MOVrr MOVmr MOV32rm MOV8rm _Compile_Move _Compile_Move_DataStackN_ToReg _Compile_TESTreg_Toreg _Compile_MoveReg_To_StackN _Compile_MoveReg_To_Rm _Compile_Test _Compile_SUBI_DSP _Compile_CallThruReg _Compile_Group5 _Compile_X_Group1_Immediate _Compile_X_Group1_Reg_To_Reg _Compile_X_Group1 _Compile_SetAtAddress_WithReg _Compile_Move_Literal_Immediate_To_Reg Compile_MoveReg_ToAddress_ThruReg Compile_MoveMemValue_ToReg_ThruReg Compile_MoveMemValue_To_Reg Compile_MoveImm_To_Mem Compile_MoveImm_To_Reg Compile_MoveImm Compile_Move_Reg_To_Reg Compile_Move_Rm_To_Reg Compile_Move_Reg_To_Rm Compile_Move_WithSib Compile_Move Compile_CalculateWrite_Instruction_X64 _Compile_Write_Instruction_X64 CalculateModRmByte _Compile_ImmDispData CalculateSib CalculateModRegardingDisplacement Calculate_Mod Calculate_Rex _CalculateRex Abs fibPTC2? _fib1c factorial factoriali ash bttt ctti tfw1 tfw yadaYada yada fac5 $ faccs3 interpret4 faccs2 fac40 interpret3 interpret2 chi interpret testc1 thi42 thi41 thi42 ctof1 ctof yadaYada yada csMatchExWithReturn csMatchEx taa CSL_a10 ctcta cmoe cmoe cpow fac5 ctof1 ctof0 factorial tl l0030 l0061 l0052 l0060 l0051 l0050 l0041 l0040 l0020 l002 l0010 l001 pbAssert StringEqual rpn match & typedef type c_class ? ! , ; } {
                         - int wtdInclude fw this size
                         - void Error ftoc ctof this size
                         - int64 this size
                         - byte this size
                         - uint64 this size
                         - uint8 this size
                         - typedef buf this size
                                 - Buffer2048 node-p ash buffer this size
                         - Experimental3 abyteTest
                                 - byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                                 - _byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                         - Dlsym
                                 - libc buf xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
                                         - CBuffer this size
                         - CObj this size
                                 - chey
                         - block this size
                         - Pointer this size
                         - Boolean this size
                         - quad this size
                         - long this size
                         - char this size
                         - uint32 this size
                         - int32 this size
                         - uint16 this size
                         - int16 this size
                         - int8 this size
                         - Experimental OMS RemainingAllocated Freed Allocated OvtMemChunkList OVT_MemChunk OSMS RemainingAllocated Freed Allocated HistorySpace_MemChunkStringList OVT_StaticMemList StaticMemSpace OS_MemChunk TSI TypeStatusInfo Ppibs PreProcessorIfBlockStatus SuperNamespace NameSpace i32_FunctionArg Function blk_CallHook ui64_ObjectAttributes ui64_MorphismAttributes ccp_Name SuperNamespace const NameSpace const ui64_LispAttributes ui64_ObjectAttributes ui64_MorphismAttributes blk_Definition OpInsnCode OpInsnCodeGroup uint64_TypeSignature TypeSignature pb_TypeSignature ccp_Name ] 8 [ Pbf8 Pblc JmpBuf0 sigjmp_buf PrintBufferConcatCopy PrintBufferCopy PrintBuffer Thrown StringSpaceSize BufferSpaceSize CSLSize OpenVmTilSize DataStackSize SessionObjectsSize WordRecylingSize CompilerTempObjectsSize TempObjectsSize ContextSize LispSpaceSize InternalObjectsSize ObjectSpaceSize MachineCodeSize LispTempSize LispCopySize DictionarySize Dbi ReAllocations SigSegvs Restarts StartedTimes StartIncludeTries Verbosity CSL_InternalSpace OpenVmTilSpace InternalObjectSpace HistorySpace RecycledOptInfoList RecycledWordList BufferList NBAs MemorySpaceList MemorySpace0 TotalMemSizeTarget TotalNbaAccountedMemAllocated TotalNbaAccountedMemRemaining TotalRemainingAccounted Notice Alert Default Current SigLocation SigAddress Argv Argc ExceptionWord ExceptionToken ExceptionSpecialMessage ExceptionMessage VersionString ErrorFilename StartupFilename StartupString InitString Console ExceptionCode Signal RestartCondition LastRestartCondition SignalExceptionsHandled DebugOutputFlag LogFlag CodeByteArray OVT_LC OVT_Interpreter OVT_Context OVT_CSL State OVT_MemChunk ics_IntColors rgbcs_RgbColors Bg Fg rgbc_Bg rgbc_Fg Blue Green Red SavedCslNamespaces InNamespace Namespaces WordsAllocated WordsInRecycling RecycledWordCount NBAs StringSpace DictionarySpace LispSpace ObjectSpace CodeSpace BufferSpace LispCopySpace LispTempSpace WordRecylingSpace ContextSpace CompilerTempObjectSpace TempObjectSpace SessionObjectsSpace MS_MemChunk ContextSensitiveLanguage StrTokInfo StringTokenInfo CharInfo 16 CharType CharType 16 CharFunctionTableIndex CharFunctionTableIndex LambdaCalculus CombinatorInfo LexerFunction cntx ContextFunction arg cntx ContextFunction_1 arg2 arg1 cntx ContextFunction_2 arg3 arg2 arg1 cntx ContextFunction_3 JmpBuf0 sigjmp_buf ContextNba PreprocessorStackList CurrentlyRunningWordDefinition TypeCastNamespace QidInNamespace BaseObject SC_CurrentCombinator ArrayBaseFieldObject CurrentWordBeingCompiled LastCompiledWord CurrentDisassemblyWord SourceCodeWord CurrentCombinator NlsWord LastEvalWord CurrentEvalWord TokenDebugSetupWord CurrentTokenWord LastRanWord CurrentlyRunningWord SpecialDelimiterOrDotCharSet SpecialDelimiterCharSet SpecialTokenDelimiters DefaultDelimiterOrDotCharSet DefaultDelimiterCharSet DefaultTokenDelimiters CurrentToken Location ContextDataStack System0 Compiler0 Interpreter0 Finder0 Lexer0 ReadLiner0 WordCount NsCount State C_Node Timers IncludeFileStackNumber ExceptionFlag BigNum_Printf_Width BigNum_Printf_Precision NumberBase State Debugger struct DebuggerFunction Interpreter TDI_StructUnionStack CurrentTopBlockInfo OptimizeInfoList InfixOperatorStack InternalNamespacesStack CombinatorStack BlockStack CombinatorBlockInfoStack LocalsCompilingNamespacesStack PointerToJmpInsnStack PostfixLists OptInfo JccAdressOffsetList RegisterParameterList CurrentMatchList SetccMovedList GotoList NonCompilingNs LocalsNamespace Qid_BackgroundNamespace C_FunctionBackgroundNamespace C_BackgroundNamespace PrefixWord LHS_Word Current_Word_Create Current_Word_New ReturnLParenOperandWord ReturnVariableWord ReturnWord RspRestoreOffset RspSaveOffset BlocksBegun FrameSizeCellOffset AccumulatedOffsetPointer BeginBlockFlag TakesLParenAsBlock SemicolonEndsThisBlock InLParenBlock AccumulatedOptimizeOffsetPointer InitHere ArrayEnds OptimizeForcedReturn CombinatorLevel BlockLevel GlobalParenLevel ParenLevel SaveOptimizeState SaveCompileMode LocalsFrameSize NumberOfArgs NumberOfRegisterArgs NumberOfNonRegisterArgs NumberOfVariables NumberOfRegisterVariables NumberOfNonRegisterVariables NumberOfLocals NumberOfRegisterLocals NumberOfNonRegisterLocals CombinatorEndsAt CombinatorStartsAt StartPoint BreakPoint ContinuePoint IfZElseOffset State JON OffsetPointer JmpToAddress JON_Node TDSCI COI wordArg2_Op wordArg1_Op wordArg2_literal wordArg1_literal wordArg2_rvalue wordArg1_rvalue rvalue wordArg1Node wordArg2Node nextNode wordNode nodem node lparen2 lparen1 wordArg0_ForOpEqual xBetweenArg1AndArg2 wordArg2 wordArg1 wordm wordn opWord rparenPrevOp ControlFlags NumberOfArgs rtrn CPState CpuPipelineState COIW coiw_seven coiw_six coiw_five coiw_four coiw_three coiw_two coiw_one coiw_zero UseReg CO_DstReg CO_SrcReg CO_ImmSize CO_Imm CO_Disp CO_Rm CO_Reg CO_Mod CO_Dest_RegOrMem OptimizeFlag State_OREG2 State_OREG State_ACC State S_Node Lexer QualifyingNamespace FoundWord State ReadLineFunction struct ReadLiner_KeyFunction TabCompletionInfo Registers Rip RFlags R15d R14d R13d R12d R11d R10d R9d R8d Rdi Rsi Rbp Rsp Rbx Rdx Rcx Rax State Disp OffsetSize InsnSize Insn InsnType InsnAddress IiFlags BI_LocalsNamespace BI_Rllafl BI_Gi RegisterVariableControlWord OurCombinator LogicCodeWord ResetFlag N SetccNegFlag Ttt SetccTtt JmpToAddress ActualCopiedToJccCode CopiedToLogicJccCode CopiedToEnd MovzxCode SetccCode BI_StackPushRegisterCode CopiedToStart OriginalActualCodeStart AfterCmpCode CmpCode TestCode JccAddedCode JccCode TttnCode CompiledAtAddress PtrToJmpInsn PtrToJumpOffset bp_Last bp_First AfterLocalFrame LocalFrameStart ParenLevel JccType CopiedSize State BI_Symbol andOrCount la_code pparenlvl mparenlvl oparenlvl rtrn j i orAfterAnd andAfterOr orAfter2rparen andAfter2rparen Ncll Ncul ncp ncm nc PtrToJmpInsn pb_JmpOffsetPointer LabeledAddress OriginalAddress CompiledAtAddress pb_LabelName GI_BlockInfo CombinatorLevel BlockLevel Combinator GI_Word AddressSet GI_Symbol NBA BA_Data bp_Last EndIndex StartIndex MemRemaining BA_DataSize OurNBA NamedByteArray BA_Symbol BA_MemChunk TypeNamespace TypeSignatureCodes StackMapFunction4 StackMapFunction2 StackMapFunction1 StackMapFunction0 symbol VMapSymbol2 MapNodeFunction MapSymbolFunction2 VMapNodeFunction MapSymbolFunction MapFunction_2 MapFunction_Word MapFunction_1 MapFunction MapFunction_Word_PtrInt ListFunction4 ListFunction3 ListFunction2 ListFunction ListFunction0 cMapFunction_1 HistoryStringNode MemChunk CaseNode Buffer Symbol ListObject DObject DynamicObject Class Vocabulary Namespace Combinator ID BoolMapFunction_1 MapFunction5 MapFunction4 MapFunction4wReturn MapFunction3 MapFunction2_64 MapFunction2 MapFunction1 MapFunction0 List DLList ListNode Node n_Attributes n_dobject n_DLNode _DLList _ListNode _Node n_CurrentNode n_iData n_bData n_unmap n_InUseFlag n_Slots n_Size n_Type n_Node n_Before n_After do_iData do_bData do_unmap do_InUseFlag do_Slots do_Size do_Type do_Node do_Before do_After l_CurrentNode l_List _dllist node TI AttributeArray T_ChunkSize T_Size T_NumberOfBytes T_NumberOfSlots T_Unused T_NumberOfPrefixedArgs T_WordAttributes T_WAllocationType T_LispAttributes T_ObjectAttributes T_MorphismAttributes slot object function StackData InitialTosPointer StackMax StackMin StackPointer StackSize cFunction_2_Arg cFunction_1_Arg cFunction_0_Arg vFunction_2_Arg vFunction_1_UArg vFunction_1_Arg VoidFunction
                                 - dlnode n_Tail n_Before n_Head n_After this size
                                 - dllist this size
                                 - TypeInfo this size
                                 - Stack this size
                                 - Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - OpenVmTil this size
                                 - CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - OVT_MemSystem this size
                                 - OVT_StaticMemSystem this size
                                 - typeStatusInfo OpWordReturnSignatureLetterCode OpWord_ReturnsACodedValue_Flag TypeErrorStatus ] 128 [ ActualTypeStackRecordingBuffer ] 32 [ ExpandedTypeCodeBuffer OpWordTypeSignature OpWordFunctionTypeSignatureLength TypeStackDepth StackWord1 StackWord0 WordBeingCompiled OpWord TypeWordStack this size
                                 - ppibs LineNumber Filename 1 SvIfCond SvIfCond 1 ElifCond ElifCond 1 IfCond IfCond 1 Status Status 1 AccumStatus AccumStatus int64_Ppibs this size
                                 - MachineCodePrimitive this size
                                 - CPrimitive this size
                                 - Colors this size
                                 - IntColors this size
                                 - RgbColors this size
                                 - RgbColor this size
                                 - MemorySpace this size
                                 - _CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - _StringTokenInfo CharSet0 CharSet SMNamespace Delimiters Out In EndIndex StartIndex State this size
                                 - CharacterType this size
                                 - _LambdaCalculus LC_JmpBuf sigjmp_buf OurCSL _CSL IndentDbgPrint SavedTypeCheckState LetFlag ApplyFlag Lambda_SC_WordList Code outBuffer buffer PrintBuffer OutBuffer BaseObject ArrayBaseObject Sc_Word LC_Here LC_SourceCode SaveStackPointer CombinatorInfoStack QuoteStateStack QuoteState ItemQuoteState SavedCodeSpace LastInterpretedWord FunctionArgs FunctionParameters True Nil Largs1 Largs Largs0 Locals Lvalue Lfunction Lfunction0 Lfirst L1 L0 Lread BackgroundNamespace LispTempNamespace LispDefinesNamespace LispNamespace ParenLevel Loop DontCopyFlag DebuggerSetupFlag DebuggerState State this size
                                 - _CombinatorInfo 16 ParenLevel ParenLevel 16 BlockLevel BlockLevel CI_i32_Info this size
                                 - Context this size
                                 - System this size
                                 - _Debugger DebugWordList Udis ud_t CharacterFunctionTable DebuggerFunction CharacterTable StepInstructionBA cs_Cpu LocalsCompilingNamespacesStack BreakReturnStack ReturnStack RestoreCpuState SaveCpuState Filename ShowLine LastDisStart StartHere SpecialPreHere PreHere LastSourceCodeAddress CopyRBP CopyRSP ReturnAddress DebugAddress Token Menu SubstitutedWord LastSourceCodeWord CurrentlyRunningWord SteppedWord LastPreSetupWord LocalsNamespace NextEvalWord LastShowEffectsWord LastShowInfoWord EntryWord w_AliasOf w_Alias w_Word InsnSize Edi Esi LastScwi SaveKey Key SaveStackDepth SaveTOS RL_ReadIndex Insn LevelBitNamespaceMap LastRsp DebugRDI DebugRSI DebugRBP DebugRSP WordDsp SaveRsp SaveEdi AddressModeSaveDsp RaDsp InitDsp SaveDsp State this size
                                 - _Interpreter InterpList WordType ThisNamespace CurrentObjectNamespace LastWord w_Word Token Compiler0 Lexer0 Finder0 ReadLiner0 State this size
                                 - Compiler this size
                                 - JccOffsetNode this size
                                 - TypeDefStructCompileInfo StructureUnionName FieldName TdsciToken DataPtr NextChar Tdsci_Field_Object Tdsci_Field_Type_Namespace Tdsci_StructureUnion_Namespace Tdsci_InNamespace Tdsci_ArrayNumberOfDimensions Tdsci_ArrayDimensions Token_StartIndex Token_EndIndex LineNumber Tdsci_Field_Size Tdsci_Union_Size Tdsci_Structure_Size Tdsci_StructureUnion_Size Tdsci_Offset State this size
                                 - CompileOptimizeInfo this size
                                 - _Lexer TokenList SCI ReadLiner0 NextPeekListItem TokenWord LiteralString Literal CurrentChar TokenBuffer lexer struct NextChar LastToken Filename DelimiterOrDotCharSet DelimiterCharSet TokenDelimiters CurrentTokenDelimiter LastLexedChar TokenInputByte ParsedToken OriginalToken LineNumber TokenWriteIndex CurrentReadIndex SC_Index Token_Length TokenEnd_FileIndex TokenStart_FileIndex TokenEnd_ReadLineIndex TokenStart_ReadLineIndex Token_CompiledDataFieldByteSize L_ObjectAttributes L_MorphismAttributes State this size
                                 - SourceCodeInfo SciBuffer SciWord SciFileIndexScEnd SciFileIndexScStart SciQuoteMode SciIndex this size
                                 - Finder this size
                                 - ReadLiner TciNamespaceStack TabCompletionInfo0 HistoryNode OutputFile InputFile FILE Key ReadLiner_KeyFunction svLine InputStringCurrent InputStringOriginal InputLineString InputLine Prompt AltPrompt NormalPrompt DebugAltPrompt DebugPrompt LastCheckedInputKeyedCharacter Filename LineStartFileIndex InputStringLength InputStringIndex EscapeModeFlag CursorPosition MaxEndPosition EndPosition svReadIndex ReadIndex OutputLineCharacterNumber LineNumber FileCharacterNumber InputKeyedCharacter svState State this size
                                 - TCI MarkNamespace OriginalContainingNamespace LastFoundWord ObjectExtWord NextWord OriginalRunWord RunWord OriginalWord TrialWord Identifier PreviousIdentifier SearchToken ShownWrap StartFlag FoundMarker LastWordWrapCount WordWrapCount WordCount FoundWrapCount MaxFoundCount FoundCount TokenLength DotSeparator EndDottedPos TokenLastChar TokenFirstChar State this size
                                 - Cpu this size
                                 - BlockInfo this size
                                 - Rllafl this size
                                 - GotoInfo this size
                                 - NamedByteArray NBA_ML_TailNode NBA_ML_HeadNode NBA_BaList InitFreedRandMarker Allocations NumberOfByteArrays SmallestRemaining LargestRemaining MemRemaining MemAllocated MemInitial TotalAllocSize NBA_DataSize OriginalSize ba_CurrentByteArray NBA_Symbol NBA_MemChunk this size
                                 - ByteArray this size
                                 - _WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - TypeSignatureInfo this size
                                 - location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - _Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - _DLNode this size
                                 - _node n_Tail n_Before n_Head n_After this size
                                 - int64 this size
                                 - Location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - block this size
                                 - Pointer this size
                                 - AttributeInfo this size
                                 - dobject this size
                                 - DLNode this size
                                 - WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - Word wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                         - PrefixCombinators loop for do while if
                         - Infix tti tt ftfw2 ftfw1 moe moe =
                 - User fib1 _fib4 _fib3 _fib2 _fib _fib1 _fibn1 ffx2 ffx comment _ffx2 _ffx reps ifx2 ifx _ifx2 _ifx reps0 factorial2 factorial s fac bexp3 bexp2 bexp qexp2 qexp factorial006 factorial005 stest qeval sp heey1 hey1 hi1 heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
                         - Experimental tx
                         - StartupMacros namespaces Delimiters
                 - Locals (| (
                 - Int mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / ^^ pow_03 pow ** * -= += - +
                 - Logic tx1 l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
                         - Bits tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
                 - Compiler _fib1 vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
                         - Compiling pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
                         - Reserved {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
                 - Shell hio ppxe ppx epause apause test sh $ _sh endif else if
                 - Defines _DEV_H_ Compile_DEC Compile_INC _X64_CSL_ TSE_SIZE_MISMATCH TSE_ERROR SC_Index SC_QuoteMode SC_Buffer SC_Word STI_INITIALIZED TDI_POST_STRUCT TDI_UNION_PRINTED TDI_POINTER TDI_PRINT TDI_UNION TDI_STRUCT TDI_CLONE_FLAG OP_RESULT ARG2_R ARG2_L ARG1_R ARG1_L STACK_ARGS_TO_STANDARD_REGS OP_RESULT_OREG2 OP_RESULT_OREG OP_RESULT_ACC OREG2_2R OREG2_2L OREG2_1R OREG2_1L OREG_2R OREG_2L OREG_1R OREG_1L ACC_2R ACC_2L ACC_1R ACC_1L REG_LOCK_BIT LOC_OREG LOC_ACC LOC_STACK_1 LOC_STACK_0 IDEAL_LOC_OREG2 IDEAL_LOC_OREG IDEAL_LOC_ACC IDEAL_STACK_3 IDEAL_STACK_2 IDEAL_STACK_1 IDEAL_STACK_0 IDEAL_LOC_LITERAL ASSUMED_LOC_OREG2 ASSUMED_LOC_OREG ASSUMED_LOC_ACC ASSUMED_STACK_3 ASSUMED_STACK_2 ASSUMED_STACK_1 ASSUMED_STACK_0 ASSUMED_LOC_LITERAL LOGIC_FLAG SHOULD_BE_32 COULD_BE_16 COULD_BE_8 PRESERVE_INSN_SIZE GI_CAttribute CN_CaseUint64Value CN_CaseBytePtrValue CN_CaseBlock NBA_Name NBA_Chunk_Size NBA_AAttribute BA_AAttribute BA_AllocSize mc_TotalAllocSize mc_Data mc_Name mc_AllocType mc_ChunkSize mc_unmap mc_Type mc_Node B_Data B_Size B_CAttribute W_DObjectValue W_PtrToValue W_BytePtr W_Value3 W_Value2 W_Object W_Value W_List Lo_LambdaBody Lo_LambdaParameters Lo_String Lo_Integer Lo_UInteger Lo_Object Lo_PtrToValue Lo_Value Lo_List Lo_NumberOfSlots Lo_Tail Lo_Head Lo_Size Lo_Name Lo_LProp Lo_CProp Lo_LAttribute Lo_CAttribute InUseFlag Data WProp LProp CProp2 CProp W_LineNumber W_Filename W_AllocType W_NumberOfPrefixedArgs W_TypeAttributes W_LispAttributes W_ObjectAttributes W_MorphismAttributes Name S_MacroLength S_CodeSize S_unmap S_String S_Pointer S_NumberOfSlots S_ChunkSize ObjectByteSize CompiledDataFieldByteSize Size S_Size S_NumberOfPrefixedArgs S_LispAttributes S_WAllocType S_WordAttributes S_ObjectAttributes S_MorphismAttributes S_CurrentNode S_Before S_After S_Cdr S_Car n_Cdr n_Car Tail Head ENUM BITFIELDS xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
                 - Stack ndup stackCheck setDsp dsp _swap pick _ndrop dropN drop ndup tos dup _dup
                 - Asm testAsm ;asm asm: asmEnd asmBegin svDsp jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
                         - X64 _Compile_Int64 _Compile_Int32 _Compile_Int16 _Compile_Int8 fa dbiOff dbiOn DBI x64_dbg REX_W IMM_B DISP_B SIB_B MODRM_B REX_B DEC INC N TO_MEM TO_REG INT32_SIZE CELL_SIZE CELL BYTE CALL CMP SUB ADD NG LE LESS NA BE Z ZERO EQ EQUAL BELOW SREG THRU_REG ACC FP DSP R15D R14D R13D R12D R11D R10D R9D R8D RDI RSI RBP RSP RBX RDX RCX RAX MEM MEM0 MEM32 MEM8 REG off on false true sp
                 - Combinators Compile_Stack_Push_R8D _Compile_CMPreg_IMM _Compile_ADDI_DSP _Compile_MoveTOS_To_R8D _Compile_IncDecreg _Compile_Test_Imm iax ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
                 - Class . clone new struct class :{ +:{ };
                         - Buffer buf this size
                                 - DLLNode sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
                                         - DLLNodeAlloc testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
                                                 - Ar1 a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
                                                         - a
                                                         - Ar2 a5 a4 ar this size
                                                                 - Ar3 a7 a8 a6x a6 ar this size
                                                                         - Ar9 arr9 a9 a9dump _adump ar dimSize this size
                                                                                 - Ar10 a10dump ar dimSize this size
                                                                                         - arr10
                                                                                 - ct0 ac a tct ab ar this size
                                                                                         - cta a caba cadump a tcta aba ar this size
                                                                                 - ar9
                                                 - testD testC
                                                         - a112 c1138
                                                 - DLLNodeAlloc4 testna5 dlna4o testna5 testna4 nodes this size
                                         - DLList hey hi hey hi testList init TailNode HeadNode this size
                                                 - DLListClone testClone init Accum Four Three Twelve Sum Prototype Category this size
                         - Pointer this size
                                 - Integer
                         - BigNum ctof2 ftoc ctof tfib3 fibBN tbn bexpl !! ! bexp0 bexp aexp x ! qexp _bassert eprint p fprint _bfprint _beprint ** ^^ pow sqrt != == > >= < <= / * -- ++ /= -= *= += - +
                 - Experimental xyxz <does <do does> do> locationPrint locationPush
                 - String hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
                 - System ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwi pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackDepth stackInit warmInit init reset _include
                         - Colors alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
                         - File freadToString fexists fsize ftell fseek fread fwrite fclose fopen
                 - Debug dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState udis1x udis1 dsn dsf stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
                 - Control maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
                 - DObject new clone dobject
                         - DO_Experimental o12
                                 - o1
                                         - o2 ay
                                                 - o3 ott o4
                 - Lexer sp heey hey hi ofile orpfile % "
                 - List bexp3 lcRestoreStack dupList printList eval _( _lisp
                 - OpenVmTil ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
                         - Memory recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
                 - Io Error logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc logWrite logAppend space tab cr newline kbhit key emit printString
                 - Word code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
                 - Macro rdim rdi s _s tm: findAlias alias sm:
                 - Namespace usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
                 - PreProcessor ifndef ifdef undef defined include define elif if else endif !
                 - Array [ ]
                 - MemorySpace msDelete memspace
                 - Forth rpn n, 8, 4, , 2, 1, '
                 - L9 l9
                 - Test hey2 hey
                         - test2 hi
                         - test hi
                 - Lisp /| /. /\ lambda sp lcDbOff lcDbOn ;;; lcShowLisp lcShowLispDefines lcClearDefines lcReset = :: ,@ unquoteSplicing , unquote ` quasiquote @ ' load list eval quote cdr car if* cond if condc ifc macro let set begin lambda _lambda definec define _Printf ) print _( (
         - LispTemp
         - LispDefines
Total namespaces = 160 :: Total words = 3199

Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    158154 : Unused =     16326 : Allocations =    9 : Largest =    15146 : Smallest =      952 : AllocSize =    20530
ContextSpace            InUse =     10077 : Unused =       163 : Allocations =    1 : Largest =      163 : Smallest =      163 : AllocSize =    10240
ContextSpace            InUse =      9288 : Unused =       952 : Allocations =    1 : Largest =      952 : Smallest =      952 : AllocSize =    10240
SessionObjectsSpace     InUse =   1253266 : Unused =    843886 : Allocations =    2 : Largest =   843706 : Smallest =      180 : AllocSize =  1048576
WordRecylingSpace       InUse =         0 : Unused =    442368 : Allocations =    5 : Largest =   442368 : Smallest =   442368 : AllocSize =   442368
CompilerTempObjectSpace InUse =   7156712 : Unused =    183320 : Allocations =    7 : Largest =   181512 : Smallest =        8 : AllocSize =  1048576
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =       105 : Unused =   1048471 : Allocations =    5 : Largest =  1048471 : Smallest =  1048471 : AllocSize =  1048576
BufferSpace             InUse =    341962 : Unused =     98358 : Allocations =    1 : Largest =    98358 : Smallest =    98358 : AllocSize =   440320
StringSpace             InUse =    266778 : Unused =    173542 : Allocations =    1 : Largest =   173542 : Smallest =   173542 : AllocSize =   440320
ObjectSpace             InUse =         0 : Unused =   1048576 : Allocations =    5 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
LispSpace               InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CodeSpace               InUse =    240920 : Unused =    199400 : Allocations =    1 : Largest =   199400 : Smallest =   199400 : AllocSize =   440320
DictionarySpace         InUse =   7674083 : Unused =    714525 : Allocations =    8 : Largest =   713056 : Smallest =        1 : AllocSize =  1048576
InternalObjectSpace     InUse =    501288 : Unused =    547288 : Allocations =    1 : Largest =   547288 : Smallest =   547288 : AllocSize =  1048576
CSLInternalSpace        InUse =    829600 : Unused =    143200 : Allocations =    5 : Largest =   142528 : Smallest =       88 : AllocSize =   194560
StaticSpace             InUse =       115 : Unused =      1933 : Allocations =    1 : Largest =     1933 : Smallest =     1933 : AllocSize =     2048
Data Stack              InUse =        24 : Unused =      8168
Total Accounted Mem     InUse =  18697956 : Unused =   7559460
Non-Static Mem Allocated      =  26257416
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =       250
WordsAllocation               =  15272496 : 35353 x 432 bytes
Recycled-Bytes:WordCount      =    241488 : 559   x 432 bytes
InRecycling-Bytes:Words       =   4771872 : 11046 x 432 bytes

Timer [ 1 ] : elapsed time = 1.087520513 seconds

Timer [ 2 ] : elapsed time = 2.401922510 seconds

System Startup [ 0 ] : elapsed time = 4.615150114 seconds
OVT Startup : elapsed time = 4.615147770 seconds
version 0.939.483
<: 
