[dennisj@infinity-a1 csl]$ cx

including ./init.csl at <command line> : 0.21 ...

System Startup [ 0 ] : elapsed time = 0.020006820 seconds at <command line> : 0.0
OVT Startup : elapsed time = 0.028892326 seconds
version 0.940.501
<: tc

including namespaces/ninit.csl at <command line> : 1.3 ...

including namespaces/test/initTest.csl at namespaces/ninit.csl : 10.23 ...

before testAll
test nested elif 1 - correct

including namespaces/compiler/preprocessor.csl at namespaces/test/initTest.csl : 86.41 ...

preprocessor test ok1

preprocessor test ok2

ppx = 2
ppxe = 0
including namespaces/test/logic.csl at namespaces/test/initTest.csl : 86.41 ...
 1 0
 =============================
Bits.lnt <:> csl compiled word
SourceCode for Bits.lnt :>
: lnt ( n ) n @ 7 < dup p return tos ;
Source code file location of lnt : "namespaces/test/logic.csl" : 12.2 :: we are now at : namespaces/test/logic.csl : 13.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bad53f -- code size = 66 bytes
TypeSignature :
 -----------------------------
Word :: Bits.lnt : definition = 0x0000767060bad53f : disassembly at namespaces/test/logic.csl : 13.17 :
0x767060bad53f    4d897e08                mov [r14+0x8], r15
0x767060bad543    4d8d7e08                lea r15, [r14+0x8]
0x767060bad547    4981c608000000          add r14, 0x8
 ..                           : lnt ( n ) n @ 7 < dup p return tos ;  ..
0x767060bad54e    49837ff807              cmp qword [r15-0x8], 0x7
0x767060bad553    0f9cc0                  setl al
0x767060bad556    480fb6c0                movzx rax, al
0x767060bad55a    4983c610                add r14, 0x10
0x767060bad55e    498906                  mov [r14], rax
 ..                   : lnt ( n ) n @ 7 < dup p return tos ;  ..
0x767060bad561    498946f8                mov [r14-0x8], rax
 ..               : lnt ( n ) n @ 7 < dup p return tos ;  ..
0x767060bad565    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bad56f    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..             : lnt ( n ) n @ 7 < dup p return tos ;  ..
0x767060bad572    498b06                  mov rax, [r14]
0x767060bad575    4d8d77f8                lea r14, [r15-0x8]
0x767060bad579    4d8b7e08                mov r15, [r14+0x8]
0x767060bad57d    498906                  mov [r14], rax
 ..  : lnt ( n ) n @ 7 < dup p return tos ;  ..
0x767060bad580    c3                      ret
Word_Disassemble : word - 'lnt' :: codeSize = 66
Word : 0x0000767060d8b567 :: Compiled at : 0x0000767060bad53f
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 13.17 <::
 1 0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 1 0
 =============================
Bits.lnt2 <:> csl compiled word
SourceCode for Bits.lnt2 :>
: lnt2 ( n m ) n @ m @ >= dup p return tos ;
Source code file location of lnt2 : "namespaces/test/logic.csl" : 25.2 :: we are now at : namespaces/test/logic.csl : 26.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bad74e -- code size = 76 bytes
TypeSignature :
 -----------------------------
Word :: Bits.lnt2 : definition = 0x0000767060bad74e : disassembly at namespaces/test/logic.csl : 26.18 :
0x767060bad74e    4d897e08                mov [r14+0x8], r15
0x767060bad752    4d8d7e08                lea r15, [r14+0x8]
0x767060bad756    4981c608000000          add r14, 0x8
 ..                        : lnt2 ( n m ) n @ m @ >= dup p return tos ;  ..
0x767060bad75d    498b47f0                mov rax, [r15-0x10]
 ..                    : lnt2 ( n m ) n @ m @ >= dup p return tos ;  ..
0x767060bad761    498b4ff8                mov rcx, [r15-0x8]
 ..                : lnt2 ( n m ) n @ m @ >= dup p return tos ;  ..
0x767060bad765    483bc1                  cmp rax, rcx
0x767060bad768    0f9dc0                  setge al
0x767060bad76b    480fb6c0                movzx rax, al
0x767060bad76f    4983c610                add r14, 0x10
0x767060bad773    498906                  mov [r14], rax
 ..             : lnt2 ( n m ) n @ m @ >= dup p return tos ;  ..
0x767060bad776    498946f8                mov [r14-0x8], rax
 ..         : lnt2 ( n m ) n @ m @ >= dup p return tos ;  ..
0x767060bad77a    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bad784    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..       : lnt2 ( n m ) n @ m @ >= dup p return tos ;  ..
0x767060bad787    498b06                  mov rax, [r14]
0x767060bad78a    4d8d77f8                lea r14, [r15-0x8]
0x767060bad78e    4d8b7e08                mov r15, [r14+0x8]
0x767060bad792    4983ee08                sub r14, 0x8
0x767060bad796    498906                  mov [r14], rax
 .. 2 ( n m ) n @ m @ >= dup p return tos ;
0x767060bad799    c3                      ret
Word_Disassemble : word - 'lnt2' :: codeSize = 76
Word : 0x0000767060d93f77 :: Compiled at : 0x0000767060bad74e
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 26.18 <::

 0 0 1 1 0 0 0 0 1 1
 1 0 0
 =============================
Bits.tnot <:> csl compiled word
SourceCode for Bits.tnot :>
: tnot ( n ) n @ not dup n store n @ dup p return tos ;
Source code file location of tnot : "namespaces/test/logic.csl" : 46.2 :: we are now at : namespaces/test/logic.csl : 47.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bada8c -- code size = 101 bytes
TypeSignature : Integer -> Integer
 -----------------------------
Word :: Bits.tnot : definition = 0x0000767060bada8c : disassembly at namespaces/test/logic.csl : 47.18 :
0x767060bada8c    4d897e08                mov [r14+0x8], r15
0x767060bada90    4d8d7e08                lea r15, [r14+0x8]
0x767060bada94    4981c608000000          add r14, 0x8
 ..                          : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060bada9b    498b47f8                mov rax, [r15-0x8]
 ..                      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060bada9f    4883f800                cmp rax, 0x0
0x767060badaa3    0f94c0                  setz al
0x767060badaa6    480fb6c0                movzx rax, al
0x767060badaaa    4983c610                add r14, 0x10
0x767060badaae    498906                  mov [r14], rax
0x767060badab1    498946f8                mov [r14-0x8], rax
0x767060badab5    498d47f8                lea rax, [r15-0x8]
 ..              : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060badab9    488bc8                  mov rcx, rax
0x767060badabc    498b06                  mov rax, [r14]
0x767060badabf    4983ee08                sub r14, 0x8
 ..            : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060badac3    488901                  mov [rcx], rax
 ..      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060badac6    498b47f8                mov rax, [r15-0x8]
0x767060badaca    4983c610                add r14, 0x10
0x767060badace    498906                  mov [r14], rax
 ..  : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060badad1    498946f8                mov [r14-0x8], rax
 : tnot ( n ) n @ not dup n store n @ dup p return tos ;  ..
0x767060badad5    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060badadf    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. t ( n ) n @ not dup n store n @ dup p return tos ;
0x767060badae2    498b06                  mov rax, [r14]
0x767060badae5    4d8d77f8                lea r14, [r15-0x8]
0x767060badae9    4d8b7e08                mov r15, [r14+0x8]
0x767060badaed    498906                  mov [r14], rax
 ..  not dup n store n @ dup p return tos ;
0x767060badaf0    c3                      ret
Word_Disassemble : word - 'tnot' :: codeSize = 101
Word : 0x0000767060d9fd77 :: Compiled at : 0x0000767060bada8c
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 47.18 <::
 tnot_1_assert  : ok

 tnot_2_assert  : ok

 1 tnot_3_assert  : ok

 0 tnot_4_assert  : ok


 =============================
Bits.tnot2 <:> csl compiled word
SourceCode for Bits.tnot2 :>
: tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;
Source code file location of tnot2 : "namespaces/test/logic.csl" : 53.2 :: we are now at : namespaces/test/logic.csl : 54.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badaf6 -- code size = 98 bytes
TypeSignature :
 -----------------------------
Word :: Bits.tnot2 : definition = 0x0000767060badaf6 : disassembly at namespaces/test/logic.csl : 54.19 :
0x767060badaf6    4d897e08                mov [r14+0x8], r15
0x767060badafa    4d8d7e08                lea r15, [r14+0x8]
0x767060badafe    4981c610000000          add r14, 0x10
 ..                   : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  ..
0x767060badb05    498b47f0                mov rax, [r15-0x10]
 ..               : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  ..
0x767060badb09    498b4ff8                mov rcx, [r15-0x8]
 ..           : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  ..
0x767060badb0d    480bc1                  or rax, rcx
 ..         : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  ..
0x767060badb10    4883f800                cmp rax, 0x0
0x767060badb14    0f94c0                  setz al
0x767060badb17    480fb6c0                movzx rax, al
0x767060badb1b    4983c610                add r14, 0x10
0x767060badb1f    498906                  mov [r14], rax
0x767060badb22    498946f8                mov [r14-0x8], rax
0x767060badb26    498d4708                lea rax, [r15+0x8]
 .. : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  ..
0x767060badb2a    488bc8                  mov rcx, rax
0x767060badb2d    498b06                  mov rax, [r14]
0x767060badb30    4983ee08                sub r14, 0x8
  : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  ..
0x767060badb34    488901                  mov [rcx], rax
 .. ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;
0x767060badb37    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060badb41    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. n m | v ) n @ m @ | not dup v store p return ( v @ ) ;
0x767060badb44    498b4708                mov rax, [r15+0x8]
0x767060badb48    4d8d77f8                lea r14, [r15-0x8]
0x767060badb4c    4d8b7e08                mov r15, [r14+0x8]
0x767060badb50    4983ee08                sub r14, 0x8
 ..  n @ m @ | not dup v store p return ( v @ ) ;
0x767060badb54    498906                  mov [r14], rax
 ..  @ | not dup v store p return ( v @ ) ;
0x767060badb57    c3                      ret
Word_Disassemble : word - 'tnot2' :: codeSize = 98
Word : 0x0000767060da1587 :: Compiled at : 0x0000767060badaf6
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 54.19 <::
 1 0
 =============================
Bits.tnot3 <:> csl compiled word
SourceCode for Bits.tnot3 :>
: tnot3 ( n ) n @ not dup p return tos ;
Source code file location of tnot3 : "namespaces/test/logic.csl" : 57.2 :: we are now at : namespaces/test/logic.csl : 58.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badb5d -- code size = 69 bytes
TypeSignature :
 -----------------------------
Word :: Bits.tnot3 : definition = 0x0000767060badb5d : disassembly at namespaces/test/logic.csl : 58.19 :
0x767060badb5d    4d897e08                mov [r14+0x8], r15
0x767060badb61    4d8d7e08                lea r15, [r14+0x8]
0x767060badb65    4981c608000000          add r14, 0x8
 ..                         : tnot3 ( n ) n @ not dup p return tos ;  ..
0x767060badb6c    498b47f8                mov rax, [r15-0x8]
 ..                     : tnot3 ( n ) n @ not dup p return tos ;  ..
0x767060badb70    4883f800                cmp rax, 0x0
0x767060badb74    0f94c0                  setz al
0x767060badb77    480fb6c0                movzx rax, al
0x767060badb7b    4983c610                add r14, 0x10
0x767060badb7f    498906                  mov [r14], rax
 ..                 : tnot3 ( n ) n @ not dup p return tos ;  ..
0x767060badb82    498946f8                mov [r14-0x8], rax
 ..             : tnot3 ( n ) n @ not dup p return tos ;  ..
0x767060badb86    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060badb90    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..           : tnot3 ( n ) n @ not dup p return tos ;  ..
0x767060badb93    498b06                  mov rax, [r14]
0x767060badb96    4d8d77f8                lea r14, [r15-0x8]
0x767060badb9a    4d8b7e08                mov r15, [r14+0x8]
0x767060badb9e    498906                  mov [r14], rax
   : tnot3 ( n ) n @ not dup p return tos ;  ..
0x767060badba1    c3                      ret
Word_Disassemble : word - 'tnot3' :: codeSize = 69
Word : 0x0000767060da30f7 :: Compiled at : 0x0000767060badb5d
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 58.19 <::
 0
 =============================
Bits.tAnd <:> csl compiled word
SourceCode for Bits.tAnd :>
: tAnd ( n m ) n @ m @ && dup p return tos ;
Source code file location of tAnd : "namespaces/test/logic.csl" : 61.2 :: we are now at : namespaces/test/logic.csl : 62.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badba7 -- code size = 121 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Bits.tAnd : definition = 0x0000767060badba7 : disassembly at namespaces/test/logic.csl : 62.18 :
0x767060badba7    4d897e08                mov [r14+0x8], r15
0x767060badbab    4d8d7e08                lea r15, [r14+0x8]
0x767060badbaf    4981c608000000          add r14, 0x8
 ..                        : tAnd ( n m ) n @ m @ && dup p return tos ;  ..
0x767060badbb6    498b47f0                mov rax, [r15-0x10]
0x767060badbba    4983c608                add r14, 0x8
0x767060badbbe    498906                  mov [r14], rax
 ..                    : tAnd ( n m ) n @ m @ && dup p return tos ;  ..
0x767060badbc1    498b47f8                mov rax, [r15-0x8]
0x767060badbc5    4983c608                add r14, 0x8
0x767060badbc9    498906                  mov [r14], rax
 ..                : tAnd ( n m ) n @ m @ && dup p return tos ;  ..
0x767060badbcc    498bc6                  mov rax, r14
0x767060badbcf    4983ee08                sub r14, 0x8
0x767060badbd3    48833800                cmp qword [rax], 0x0
0x767060badbd7    7410                    jz 0x60badbe9                 < Bits.tAnd+66 >
0x767060badbd9    488378f800              cmp qword [rax-0x8], 0x0
0x767060badbde    7409                    jz 0x60badbe9                 < Bits.tAnd+66 >
0x767060badbe0    49c70601000000          mov qword [r14], 0x1
0x767060badbe7    eb07                    jmp 0x767060badbf0            < Bits.tAnd+73 >
0x767060badbe9    49c70600000000          mov qword [r14], 0x0
0x767060badbf0    0f8400000000            jz 0x767060badbf6             < Bits.tAnd+79 >
 ..             : tAnd ( n m ) n @ m @ && dup p return tos ;  ..
0x767060badbf6    498b06                  mov rax, [r14]
0x767060badbf9    4983c608                add r14, 0x8
0x767060badbfd    498906                  mov [r14], rax
 ..         : tAnd ( n m ) n @ m @ && dup p return tos ;  ..
0x767060badc00    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060badc0a    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..       : tAnd ( n m ) n @ m @ && dup p return tos ;  ..
0x767060badc0d    498b06                  mov rax, [r14]
0x767060badc10    4d8d77f8                lea r14, [r15-0x8]
0x767060badc14    4d8b7e08                mov r15, [r14+0x8]
0x767060badc18    4983ee08                sub r14, 0x8
0x767060badc1c    498906                  mov [r14], rax
 .. d ( n m ) n @ m @ && dup p return tos ;
0x767060badc1f    c3                      ret
Word_Disassemble : word - 'tAnd' :: codeSize = 121
Word : 0x0000767060da4247 :: Compiled at : 0x0000767060badba7
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 62.18 <::
 0 1 0  : ok

 1 1 1  : ok

 0 0 0  : ok

 0 0 1  : ok


 =============================
Bits.tNotAnd <:> csl compiled word
SourceCode for Bits.tNotAnd :>
: tNotAnd ( n m ) n @ m @ not && dup p return tos ;
Source code file location of tNotAnd : "namespaces/test/logic.csl" : 68.2 :: we are now at : namespaces/test/logic.csl : 69.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badc25 -- code size = 132 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Bits.tNotAnd : definition = 0x0000767060badc25 : disassembly at namespaces/test/logic.csl : 69.21 :
0x767060badc25    4d897e08                mov [r14+0x8], r15
0x767060badc29    4d8d7e08                lea r15, [r14+0x8]
0x767060badc2d    4981c608000000          add r14, 0x8
 ..                     : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc34    498b47f0                mov rax, [r15-0x10]
0x767060badc38    4983c608                add r14, 0x8
0x767060badc3c    498906                  mov [r14], rax
 ..                 : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc3f    498b47f8                mov rax, [r15-0x8]
 ..             : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc43    4883f800                cmp rax, 0x0
0x767060badc47    0f94c0                  setz al
0x767060badc4a    480fb6c0                movzx rax, al
0x767060badc4e    4983c608                add r14, 0x8
0x767060badc52    498906                  mov [r14], rax
 ..         : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc55    498bc6                  mov rax, r14
0x767060badc58    4983ee08                sub r14, 0x8
0x767060badc5c    48833800                cmp qword [rax], 0x0
0x767060badc60    7410                    jz 0x60badc72                 < Bits.tNotAnd+77 >
0x767060badc62    488378f800              cmp qword [rax-0x8], 0x0
0x767060badc67    7409                    jz 0x60badc72                 < Bits.tNotAnd+77 >
0x767060badc69    49c70601000000          mov qword [r14], 0x1
0x767060badc70    eb07                    jmp 0x767060badc79            < Bits.tNotAnd+84 >
0x767060badc72    49c70600000000          mov qword [r14], 0x0
0x767060badc79    0f8400000000            jz 0x767060badc7f             < Bits.tNotAnd+90 >
 ..      : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc7f    498b06                  mov rax, [r14]
0x767060badc82    4983c608                add r14, 0x8
0x767060badc86    498906                  mov [r14], rax
 ..  : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc89    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060badc93    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
   : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  ..
0x767060badc96    498b06                  mov rax, [r14]
0x767060badc99    4d8d77f8                lea r14, [r15-0x8]
0x767060badc9d    4d8b7e08                mov r15, [r14+0x8]
0x767060badca1    4983ee08                sub r14, 0x8
0x767060badca5    498906                  mov [r14], rax
 .. n m ) n @ m @ not && dup p return tos ;
0x767060badca8    c3                      ret
Word_Disassemble : word - 'tNotAnd' :: codeSize = 132
Word : 0x0000767060da56f7 :: Compiled at : 0x0000767060badc25
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 69.21 <::
 1 tNotAnd1 1 0  : ok

 0 tNotAnd2 1 1  : ok

 0 tNotAnd3 0 0  : ok

 0 tNotAnd4 0 1  : ok


 0x0000000100000000  >  0x00000000ffffffff 1
DataStack at : namespaces/test/logic.csl : 77.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 0x00000000ffffffff  >  0x0000000100000000 0
 =============================
Logic.nt <:> csl compiled word
SourceCode for Logic.nt :>
: nt ( n ) n @ ! ! ! return tos ;
Source code file location of nt : "namespaces/test/logic.csl" : 80.2 :: we are now at : namespaces/test/logic.csl : 83.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badd64 -- code size = 42 bytes
TypeSignature :
 -----------------------------
Word :: Logic.nt : definition = 0x0000767060badd64 : disassembly at namespaces/test/logic.csl : 83.15 :
0x767060badd64    4d897e08                mov [r14+0x8], r15
0x767060badd68    4d8d7e08                lea r15, [r14+0x8]
0x767060badd6c    4981c608000000          add r14, 0x8
 ..                            : nt ( n ) n @ ! ! ! return tos ;  ..
0x767060badd73    498b47f8                mov rax, [r15-0x8]
 ..                        : nt ( n ) n @ ! ! ! return tos ;  ..
0x767060badd77    4883f800                cmp rax, 0x0
0x767060badd7b    0f94c0                  setz al
0x767060badd7e    480fb6c0                movzx rax, al
 ..                    : nt ( n ) n @ ! ! ! return tos ;  ..
0x767060badd82    4d8d77f8                lea r14, [r15-0x8]
0x767060badd86    4d8b7e08                mov r15, [r14+0x8]
0x767060badd8a    498906                  mov [r14], rax
 ..       : nt ( n ) n @ ! ! ! return tos ;  ..
0x767060badd8d    c3                      ret
Word_Disassemble : word - 'nt' :: codeSize = 42
Word : 0x0000767060da8f87 :: Compiled at : 0x0000767060badd64
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 83.15 <::
 1 0 1 0 0 1 0 1
 1 0 1 0 0 1 0 1 : above line should show
 1 0 1 0 0 1 0 1
 1 0 1 0 0 1 0 1 : above line should show
 =============================
C_Syntax.l001 <:> csl compiled word
SourceCode for C_Syntax.l001 :>
void l001 ( a b c d ) { if ( a || b || c || d ) return 1 ; else return 0 ; }
Source code file location of l001 : "namespaces/test/logic.csl" : 107.10 :: we are now at : namespaces/test/logic.csl : 112.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badf4d -- code size = 104 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l001 : definition = 0x0000767060badf4d : disassembly at namespaces/test/logic.csl : 112.9 :
0x767060badf4d    4d897e08                mov [r14+0x8], r15
0x767060badf51    4d8d7e08                lea r15, [r14+0x8]
0x767060badf55    4981c608000000          add r14, 0x8
 ..     void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  ..
0x767060badf5c    498b47e0                mov rax, [r15-0x20]
0x767060badf60    4883f800                cmp rax, 0x0
0x767060badf64    0f852a000000            jnz 0x767060badf94            < C_Syntax.l001+71 >
   void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  ..
0x767060badf6a    498b47e8                mov rax, [r15-0x18]
0x767060badf6e    4883f800                cmp rax, 0x0
0x767060badf72    0f851c000000            jnz 0x767060badf94            < C_Syntax.l001+71 >
 .. 001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }
0x767060badf78    498b47f0                mov rax, [r15-0x10]
0x767060badf7c    4883f800                cmp rax, 0x0
0x767060badf80    0f850e000000            jnz 0x767060badf94            < C_Syntax.l001+71 >
 ..  a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }
0x767060badf86    498b47f8                mov rax, [r15-0x8]
0x767060badf8a    4883f800                cmp rax, 0x0
0x767060badf8e    0f840a000000            jz 0x767060badf9e             < C_Syntax.l001+81 >
 ..  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }
0x767060badf94    b801000000              mov eax, 0x1
 ..     if ( a || b || c || d ) return 1  ;      else return 0 ;  }
0x767060badf99    e907000000              jmp 0x767060badfa5            < C_Syntax.l001+88 >
0x767060badf9e    48c7c000000000          mov rax, 0x0
0x767060badfa5    4d8d77f8                lea r14, [r15-0x8]
0x767060badfa9    4d8b7e08                mov r15, [r14+0x8]
0x767060badfad    4983ee18                sub r14, 0x18
 .. c || d ) return 1  ;      else return 0 ;  }
0x767060badfb1    498906                  mov [r14], rax
 .. d ) return 1  ;      else return 0 ;  }
0x767060badfb4    c3                      ret
Word_Disassemble : word - 'l001' :: codeSize = 104
Word : 0x0000767060dad017 :: Compiled at : 0x0000767060badf4d
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 112.9 <::

 =============================
C_Syntax.l0010 <:> csl compiled word
SourceCode for C_Syntax.l0010 :>
void l0010 ( a b c d ) { if ( a && b && c && d ) return 1 ; else return 0 ; }
Source code file location of l0010 : "namespaces/test/logic.csl" : 123.11 :: we are now at : namespaces/test/logic.csl : 128.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60badfba -- code size = 230 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0010 : definition = 0x0000767060badfba : disassembly at namespaces/test/logic.csl : 128.10 :
0x767060badfba    4d897e08                mov [r14+0x8], r15
0x767060badfbe    4d8d7e08                lea r15, [r14+0x8]
0x767060badfc2    4981c608000000          add r14, 0x8
 ..    void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  ..
0x767060badfc9    498b47e0                mov rax, [r15-0x20]
0x767060badfcd    4883f800                cmp rax, 0x0
0x767060badfd1    0f84b2000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  ..
0x767060badfd7    498b47e8                mov rax, [r15-0x18]
0x767060badfdb    4883f800                cmp rax, 0x0
0x767060badfdf    0f84a4000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
 ..  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  ..
0x767060badfe5    498bc6                  mov rax, r14
0x767060badfe8    4983ee08                sub r14, 0x8
0x767060badfec    48833800                cmp qword [rax], 0x0
0x767060badff0    7410                    jz 0x60bae002                 < C_Syntax.l0010+72 >
0x767060badff2    488378f800              cmp qword [rax-0x8], 0x0
0x767060badff7    7409                    jz 0x60bae002                 < C_Syntax.l0010+72 >
0x767060badff9    49c70601000000          mov qword [r14], 0x1
0x767060bae000    eb07                    jmp 0x767060bae009            < C_Syntax.l0010+79 >
0x767060bae002    49c70600000000          mov qword [r14], 0x0
0x767060bae009    0f847a000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
 .. 010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }
0x767060bae00f    498b47f0                mov rax, [r15-0x10]
0x767060bae013    4883f800                cmp rax, 0x0
0x767060bae017    0f846c000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  ..
0x767060bae01d    498bc6                  mov rax, r14
0x767060bae020    4983ee08                sub r14, 0x8
0x767060bae024    48833800                cmp qword [rax], 0x0
0x767060bae028    7410                    jz 0x60bae03a                 < C_Syntax.l0010+128 >
0x767060bae02a    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae02f    7409                    jz 0x60bae03a                 < C_Syntax.l0010+128 >
0x767060bae031    49c70601000000          mov qword [r14], 0x1
0x767060bae038    eb07                    jmp 0x767060bae041            < C_Syntax.l0010+135 >
0x767060bae03a    49c70600000000          mov qword [r14], 0x0
0x767060bae041    0f8442000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
 ..  a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }
0x767060bae047    498b47f8                mov rax, [r15-0x8]
0x767060bae04b    4883f800                cmp rax, 0x0
0x767060bae04f    0f8434000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
 .. 0 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }
0x767060bae055    498bc6                  mov rax, r14
0x767060bae058    4983ee08                sub r14, 0x8
0x767060bae05c    48833800                cmp qword [rax], 0x0
0x767060bae060    7410                    jz 0x60bae072                 < C_Syntax.l0010+184 >
0x767060bae062    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae067    7409                    jz 0x60bae072                 < C_Syntax.l0010+184 >
0x767060bae069    49c70601000000          mov qword [r14], 0x1
0x767060bae070    eb07                    jmp 0x767060bae079            < C_Syntax.l0010+191 >
0x767060bae072    49c70600000000          mov qword [r14], 0x0
0x767060bae079    0f840a000000            jz 0x767060bae089             < C_Syntax.l0010+207 >
 ..  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }
0x767060bae07f    b801000000              mov eax, 0x1
 ..     if ( a && b && c && d ) return 1  ;      else return 0 ;  }
0x767060bae084    e907000000              jmp 0x767060bae090            < C_Syntax.l0010+214 >
0x767060bae089    48c7c000000000          mov rax, 0x0
0x767060bae090    4d8d77f8                lea r14, [r15-0x8]
0x767060bae094    4d8b7e08                mov r15, [r14+0x8]
0x767060bae098    4983ee18                sub r14, 0x18
 .. c && d ) return 1  ;      else return 0 ;  }
0x767060bae09c    498906                  mov [r14], rax
 .. d ) return 1  ;      else return 0 ;  }
0x767060bae09f    c3                      ret
Word_Disassemble : word - 'l0010' :: codeSize = 230
Word : 0x0000767060daf097 :: Compiled at : 0x0000767060badfba
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 128.10 <::

 =============================
C_Syntax.l0041 <:> csl compiled word
SourceCode for C_Syntax.l0041 :>
void l0041 ( a b c ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1 ; else return 0 ; }
Source code file location of l0041 : "namespaces/test/logic.csl" : 187.11 :: we are now at : namespaces/test/logic.csl : 192.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae265 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0041 : definition = 0x0000767060bae265 : disassembly at namespaces/test/logic.csl : 192.10 :
0x767060bae265    4d897e08                mov [r14+0x8], r15
0x767060bae269    4d8d7e08                lea r15, [r14+0x8]
0x767060bae26d    4981c608000000          add r14, 0x8
 ..    void l0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }  ..
0x767060bae274    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae279    0f8535000000            jnz 0x767060bae2b4            < C_Syntax.l0041+79 >
 .. ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae27f    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae284    0f8435000000            jz 0x767060bae2bf             < C_Syntax.l0041+90 >
 .. 0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae28a    498bc6                  mov rax, r14
0x767060bae28d    4983ee08                sub r14, 0x8
0x767060bae291    48833800                cmp qword [rax], 0x0
0x767060bae295    7410                    jz 0x60bae2a7                 < C_Syntax.l0041+66 >
0x767060bae297    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae29c    7409                    jz 0x60bae2a7                 < C_Syntax.l0041+66 >
0x767060bae29e    49c70601000000          mov qword [r14], 0x1
0x767060bae2a5    eb07                    jmp 0x767060bae2ae            < C_Syntax.l0041+73 >
0x767060bae2a7    49c70600000000          mov qword [r14], 0x0
0x767060bae2ae    0f8400000000            jz 0x767060bae2b4             < C_Syntax.l0041+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae2b4    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae2b9    0f850a000000            jnz 0x767060bae2c9            < C_Syntax.l0041+100 >
 ..  && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae2bf    b801000000              mov eax, 0x1
 ..  ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae2c4    e907000000              jmp 0x767060bae2d0            < C_Syntax.l0041+107 >
0x767060bae2c9    48c7c000000000          mov rax, 0x0
0x767060bae2d0    4d8d77f8                lea r14, [r15-0x8]
0x767060bae2d4    4d8b7e08                mov r15, [r14+0x8]
0x767060bae2d8    4983ee10                sub r14, 0x10
 .. == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae2dc    498906                  mov [r14], rax
 .. ) ) return 1  ;      else return 0 ;  }
0x767060bae2df    c3                      ret
Word_Disassemble : word - 'l0041' :: codeSize = 123
Word : 0x0000767060dbbcd7 :: Compiled at : 0x0000767060bae265
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 192.10 <::

 =============================
C_Syntax.l0050 <:> csl compiled word
SourceCode for C_Syntax.l0050 :>
void l0050 ( a b c ) { if ( ( a == 1 ) || ( ( b == 1 ) && ( c == 1 ) ) )return 1 ; else return 0 ; }
Source code file location of l0050 : "namespaces/test/logic.csl" : 202.11 :: we are now at : namespaces/test/logic.csl : 207.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae2e5 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0050 : definition = 0x0000767060bae2e5 : disassembly at namespaces/test/logic.csl : 207.10 :
0x767060bae2e5    4d897e08                mov [r14+0x8], r15
0x767060bae2e9    4d8d7e08                lea r15, [r14+0x8]
0x767060bae2ed    4981c608000000          add r14, 0x8
 ..    void l0050 ( a b c )  {     if ( ( a == 1 ) || ( ( b == 1 ) && ( c == 1 ) ) )return 1  ;      else return 0 ;  }  ..
0x767060bae2f4    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae2f9    0f8440000000            jz 0x767060bae33f             < C_Syntax.l0050+90 >
 .. a b c )  {     if ( ( a == 1 ) || ( ( b == 1 ) && ( c == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae2ff    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae304    0f853f000000            jnz 0x767060bae349            < C_Syntax.l0050+100 >
 ..  if ( ( a == 1 ) || ( ( b == 1 ) && ( c == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae30a    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae30f    0f8534000000            jnz 0x767060bae349            < C_Syntax.l0050+100 >
 .. {     if ( ( a == 1 ) || ( ( b == 1 ) && ( c == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae315    498bc6                  mov rax, r14
0x767060bae318    4983ee08                sub r14, 0x8
0x767060bae31c    48833800                cmp qword [rax], 0x0
0x767060bae320    7410                    jz 0x60bae332                 < C_Syntax.l0050+77 >
0x767060bae322    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae327    7409                    jz 0x60bae332                 < C_Syntax.l0050+77 >
0x767060bae329    49c70601000000          mov qword [r14], 0x1
0x767060bae330    eb07                    jmp 0x767060bae339            < C_Syntax.l0050+84 >
0x767060bae332    49c70600000000          mov qword [r14], 0x0
0x767060bae339    0f840a000000            jz 0x767060bae349             < C_Syntax.l0050+100 >
 ..  ( ( b == 1 ) && ( c == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae33f    b801000000              mov eax, 0x1
 .. ( b == 1 ) && ( c == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae344    e907000000              jmp 0x767060bae350            < C_Syntax.l0050+107 >
0x767060bae349    48c7c000000000          mov rax, 0x0
0x767060bae350    4d8d77f8                lea r14, [r15-0x8]
0x767060bae354    4d8b7e08                mov r15, [r14+0x8]
0x767060bae358    4983ee10                sub r14, 0x10
 .. = 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae35c    498906                  mov [r14], rax
 ..  ) )return 1  ;      else return 0 ;  }
0x767060bae35f    c3                      ret
Word_Disassemble : word - 'l0050' :: codeSize = 123
Word : 0x0000767060dbee37 :: Compiled at : 0x0000767060bae2e5
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 207.10 <::

 =============================
C_Syntax.l0051 <:> csl compiled word
SourceCode for C_Syntax.l0051 :>
void l0051 ( a b c ) { if ( ( a == 1 ) || ( b == 1 ) && ( c == 1 ) )return 1 ; else return 0 ; }
Source code file location of l0051 : "namespaces/test/logic.csl" : 217.11 :: we are now at : namespaces/test/logic.csl : 222.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae365 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0051 : definition = 0x0000767060bae365 : disassembly at namespaces/test/logic.csl : 222.10 :
0x767060bae365    4d897e08                mov [r14+0x8], r15
0x767060bae369    4d8d7e08                lea r15, [r14+0x8]
0x767060bae36d    4981c608000000          add r14, 0x8
 ..    void l0051 ( a b c )  {     if ( ( a == 1 ) || ( b == 1 ) && ( c == 1 ) )return 1  ;      else return 0 ;  }  ..
0x767060bae374    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae379    0f840b000000            jz 0x767060bae38a             < C_Syntax.l0051+37 >
 .. ( a b c )  {     if ( ( a == 1 ) || ( b == 1 ) && ( c == 1 ) )return 1  ;      else return 0 ;  }
0x767060bae37f    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae384    0f853f000000            jnz 0x767060bae3c9            < C_Syntax.l0051+100 >
 ..    if ( ( a == 1 ) || ( b == 1 ) && ( c == 1 ) )return 1  ;      else return 0 ;  }
0x767060bae38a    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae38f    0f8534000000            jnz 0x767060bae3c9            < C_Syntax.l0051+100 >
 ..   {     if ( ( a == 1 ) || ( b == 1 ) && ( c == 1 ) )return 1  ;      else return 0 ;  }
0x767060bae395    498bc6                  mov rax, r14
0x767060bae398    4983ee08                sub r14, 0x8
0x767060bae39c    48833800                cmp qword [rax], 0x0
0x767060bae3a0    7410                    jz 0x60bae3b2                 < C_Syntax.l0051+77 >
0x767060bae3a2    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae3a7    7409                    jz 0x60bae3b2                 < C_Syntax.l0051+77 >
0x767060bae3a9    49c70601000000          mov qword [r14], 0x1
0x767060bae3b0    eb07                    jmp 0x767060bae3b9            < C_Syntax.l0051+84 >
0x767060bae3b2    49c70600000000          mov qword [r14], 0x0
0x767060bae3b9    0f840a000000            jz 0x767060bae3c9             < C_Syntax.l0051+100 >
 .. ) || ( b == 1 ) && ( c == 1 ) )return 1  ;      else return 0 ;  }
0x767060bae3bf    b801000000              mov eax, 0x1
 .. | ( b == 1 ) && ( c == 1 ) )return 1  ;      else return 0 ;  }
0x767060bae3c4    e907000000              jmp 0x767060bae3d0            < C_Syntax.l0051+107 >
0x767060bae3c9    48c7c000000000          mov rax, 0x0
0x767060bae3d0    4d8d77f8                lea r14, [r15-0x8]
0x767060bae3d4    4d8b7e08                mov r15, [r14+0x8]
0x767060bae3d8    4983ee10                sub r14, 0x10
 ..  == 1 ) )return 1  ;      else return 0 ;  }
0x767060bae3dc    498906                  mov [r14], rax
 ..  ) )return 1  ;      else return 0 ;  }
0x767060bae3df    c3                      ret
Word_Disassemble : word - 'l0051' :: codeSize = 123
Word : 0x0000767060dc22f7 :: Compiled at : 0x0000767060bae365
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 222.10 <::

 =============================
C_Syntax.l0060 <:> csl compiled word
SourceCode for C_Syntax.l0060 :>
void l0060 ( a b c ) { if ( ( ( a == 1 ) && ( b == 1 ) ) || ( c == 1 ) ) return 1 ; else return 0 ; }
Source code file location of l0060 : "namespaces/test/logic.csl" : 233.11 :: we are now at : namespaces/test/logic.csl : 238.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae3e5 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0060 : definition = 0x0000767060bae3e5 : disassembly at namespaces/test/logic.csl : 238.10 :
0x767060bae3e5    4d897e08                mov [r14+0x8], r15
0x767060bae3e9    4d8d7e08                lea r15, [r14+0x8]
0x767060bae3ed    4981c608000000          add r14, 0x8
 ..  void l0060 ( a b c )  {     if ( ( ( a == 1 ) && ( b == 1 ) ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }  ..
0x767060bae3f4    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae3f9    0f8535000000            jnz 0x767060bae434            < C_Syntax.l0060+79 >
 .. a b c )  {     if ( ( ( a == 1 ) && ( b == 1 ) ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae3ff    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae404    0f8435000000            jz 0x767060bae43f             < C_Syntax.l0060+90 >
 .. 60 ( a b c )  {     if ( ( ( a == 1 ) && ( b == 1 ) ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae40a    498bc6                  mov rax, r14
0x767060bae40d    4983ee08                sub r14, 0x8
0x767060bae411    48833800                cmp qword [rax], 0x0
0x767060bae415    7410                    jz 0x60bae427                 < C_Syntax.l0060+66 >
0x767060bae417    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae41c    7409                    jz 0x60bae427                 < C_Syntax.l0060+66 >
0x767060bae41e    49c70601000000          mov qword [r14], 0x1
0x767060bae425    eb07                    jmp 0x767060bae42e            < C_Syntax.l0060+73 >
0x767060bae427    49c70600000000          mov qword [r14], 0x0
0x767060bae42e    0f8400000000            jz 0x767060bae434             < C_Syntax.l0060+79 >
 .. f ( ( ( a == 1 ) && ( b == 1 ) ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae434    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae439    0f850a000000            jnz 0x767060bae449            < C_Syntax.l0060+100 >
 .. & ( b == 1 ) ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae43f    b801000000              mov eax, 0x1
 ..  b == 1 ) ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae444    e907000000              jmp 0x767060bae450            < C_Syntax.l0060+107 >
0x767060bae449    48c7c000000000          mov rax, 0x0
0x767060bae450    4d8d77f8                lea r14, [r15-0x8]
0x767060bae454    4d8b7e08                mov r15, [r14+0x8]
0x767060bae458    4983ee10                sub r14, 0x10
 .. == 1 ) ) return 1  ;      else return 0 ;  }
0x767060bae45c    498906                  mov [r14], rax
 .. ) ) return 1  ;      else return 0 ;  }
0x767060bae45f    c3                      ret
Word_Disassemble : word - 'l0060' :: codeSize = 123
Word : 0x0000767060dc5457 :: Compiled at : 0x0000767060bae3e5
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 238.10 <::

 =============================
C_Syntax.l0052 <:> csl compiled word
SourceCode for C_Syntax.l0052 :>
void l0052 ( a b c d ) { if ( ( ( a == 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1 ; else return 0 ; }
Source code file location of l0052 : "namespaces/test/logic.csl" : 248.11 :: we are now at : namespaces/test/logic.csl : 254.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae465 -- code size = 176 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0052 : definition = 0x0000767060bae465 : disassembly at namespaces/test/logic.csl : 254.10 :
0x767060bae465    4d897e08                mov [r14+0x8], r15
0x767060bae469    4d8d7e08                lea r15, [r14+0x8]
0x767060bae46d    4981c608000000          add r14, 0x8
   void l0052 ( a b c d )  {     if ( ( ( a == 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }  ..
0x767060bae474    49837fe001              cmp qword [r15-0x20], 0x1
0x767060bae479    0f8535000000            jnz 0x767060bae4b4            < C_Syntax.l0052+79 >
 .. b c d )  {     if ( ( ( a == 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae47f    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae484    0f846a000000            jz 0x767060bae4f4             < C_Syntax.l0052+143 >
 ..  ( a b c d )  {     if ( ( ( a == 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae48a    498bc6                  mov rax, r14
0x767060bae48d    4983ee08                sub r14, 0x8
0x767060bae491    48833800                cmp qword [rax], 0x0
0x767060bae495    7410                    jz 0x60bae4a7                 < C_Syntax.l0052+66 >
0x767060bae497    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae49c    7409                    jz 0x60bae4a7                 < C_Syntax.l0052+66 >
0x767060bae49e    49c70601000000          mov qword [r14], 0x1
0x767060bae4a5    eb07                    jmp 0x767060bae4ae            < C_Syntax.l0052+73 >
0x767060bae4a7    49c70600000000          mov qword [r14], 0x0
0x767060bae4ae    0f8400000000            jz 0x767060bae4b4             < C_Syntax.l0052+79 >
 .. ( ( ( a == 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae4b4    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae4b9    0f853f000000            jnz 0x767060bae4fe            < C_Syntax.l0052+153 >
 ..  && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae4bf    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae4c4    0f8534000000            jnz 0x767060bae4fe            < C_Syntax.l0052+153 >
 .. = 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae4ca    498bc6                  mov rax, r14
0x767060bae4cd    4983ee08                sub r14, 0x8
0x767060bae4d1    48833800                cmp qword [rax], 0x0
0x767060bae4d5    7410                    jz 0x60bae4e7                 < C_Syntax.l0052+130 >
0x767060bae4d7    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae4dc    7409                    jz 0x60bae4e7                 < C_Syntax.l0052+130 >
0x767060bae4de    49c70601000000          mov qword [r14], 0x1
0x767060bae4e5    eb07                    jmp 0x767060bae4ee            < C_Syntax.l0052+137 >
0x767060bae4e7    49c70600000000          mov qword [r14], 0x0
0x767060bae4ee    0f840a000000            jz 0x767060bae4fe             < C_Syntax.l0052+153 >
 ..  ( ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae4f4    b801000000              mov eax, 0x1
 .. ( c == 1 ) && ( d == 1 ) ) )return 1  ;         else return 0 ;  }
0x767060bae4f9    e907000000              jmp 0x767060bae505            < C_Syntax.l0052+160 >
0x767060bae4fe    48c7c000000000          mov rax, 0x0
0x767060bae505    4d8d77f8                lea r14, [r15-0x8]
0x767060bae509    4d8b7e08                mov r15, [r14+0x8]
0x767060bae50d    4983ee18                sub r14, 0x18
 ..  ) ) )return 1  ;         else return 0 ;  }
0x767060bae511    498906                  mov [r14], rax
 .. )return 1  ;         else return 0 ;  }
0x767060bae514    c3                      ret
Word_Disassemble : word - 'l0052' :: codeSize = 176
Word : 0x0000767060dc8917 :: Compiled at : 0x0000767060bae465
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 254.10 <::

 =============================
C_Syntax.l0061 <:> csl compiled word
SourceCode for C_Syntax.l0061 :>
void l0061 ( a b c d ) { if ( ( ( a == 1 ) || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1 ; else return 0 ; }
Source code file location of l0061 : "namespaces/test/logic.csl" : 268.11 :: we are now at : namespaces/test/logic.csl : 273.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae51a -- code size = 134 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0061 : definition = 0x0000767060bae51a : disassembly at namespaces/test/logic.csl : 273.10 :
0x767060bae51a    4d897e08                mov [r14+0x8], r15
0x767060bae51e    4d8d7e08                lea r15, [r14+0x8]
0x767060bae522    4981c608000000          add r14, 0x8
   void l0061 ( a b c d )  {     if ( ( ( a == 1 ) || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }  ..
0x767060bae529    49837fe001              cmp qword [r15-0x20], 0x1
0x767060bae52e    0f840b000000            jz 0x767060bae53f             < C_Syntax.l0061+37 >
 .. b c d )  {     if ( ( ( a == 1 ) || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae534    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae539    0f854a000000            jnz 0x767060bae589            < C_Syntax.l0061+111 >
 .. ( ( ( a == 1 ) || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae53f    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae544    0f8435000000            jz 0x767060bae57f             < C_Syntax.l0061+101 >
 ..  || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae54a    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae54f    0f8534000000            jnz 0x767060bae589            < C_Syntax.l0061+111 >
 ..     if ( ( ( a == 1 ) || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae555    498bc6                  mov rax, r14
0x767060bae558    4983ee08                sub r14, 0x8
0x767060bae55c    48833800                cmp qword [rax], 0x0
0x767060bae560    7410                    jz 0x60bae572                 < C_Syntax.l0061+88 >
0x767060bae562    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae567    7409                    jz 0x60bae572                 < C_Syntax.l0061+88 >
0x767060bae569    49c70601000000          mov qword [r14], 0x1
0x767060bae570    eb07                    jmp 0x767060bae579            < C_Syntax.l0061+95 >
0x767060bae572    49c70600000000          mov qword [r14], 0x0
0x767060bae579    0f840a000000            jz 0x767060bae589             < C_Syntax.l0061+111 >
 ..  ( ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae57f    b801000000              mov eax, 0x1
 .. ( c == 1 ) || ( d == 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae584    e907000000              jmp 0x767060bae590            < C_Syntax.l0061+118 >
0x767060bae589    48c7c000000000          mov rax, 0x0
0x767060bae590    4d8d77f8                lea r14, [r15-0x8]
0x767060bae594    4d8b7e08                mov r15, [r14+0x8]
0x767060bae598    4983ee18                sub r14, 0x18
 .. = 1 ) ) )return 1  ;      else return 0 ;  }
0x767060bae59c    498906                  mov [r14], rax
 ..  ) )return 1  ;      else return 0 ;  }
0x767060bae59f    c3                      ret
Word_Disassemble : word - 'l0061' :: codeSize = 134
Word : 0x0000767060dccb57 :: Compiled at : 0x0000767060bae51a
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 273.10 <::

 =============================
C_Syntax.l0030 <:> csl compiled word
SourceCode for C_Syntax.l0030 :>
void l0030 ( a b c d ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ; else return 0 ; }
Source code file location of l0030 : "namespaces/test/logic.csl" : 287.11 :: we are now at : namespaces/test/logic.csl : 292.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae5a5 -- code size = 176 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.l0030 : definition = 0x0000767060bae5a5 : disassembly at namespaces/test/logic.csl : 292.10 :
0x767060bae5a5    4d897e08                mov [r14+0x8], r15
0x767060bae5a9    4d8d7e08                lea r15, [r14+0x8]
0x767060bae5ad    4981c608000000          add r14, 0x8
 ..  void l0030 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }  ..
0x767060bae5b4    49837fe001              cmp qword [r15-0x20], 0x1
0x767060bae5b9    0f8535000000            jnz 0x767060bae5f4            < C_Syntax.l0030+79 >
 .. a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae5bf    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae5c4    0f8435000000            jz 0x767060bae5ff             < C_Syntax.l0030+90 >
 .. 30 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae5ca    498bc6                  mov rax, r14
0x767060bae5cd    4983ee08                sub r14, 0x8
0x767060bae5d1    48833800                cmp qword [rax], 0x0
0x767060bae5d5    7410                    jz 0x60bae5e7                 < C_Syntax.l0030+66 >
0x767060bae5d7    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae5dc    7409                    jz 0x60bae5e7                 < C_Syntax.l0030+66 >
0x767060bae5de    49c70601000000          mov qword [r14], 0x1
0x767060bae5e5    eb07                    jmp 0x767060bae5ee            < C_Syntax.l0030+73 >
0x767060bae5e7    49c70600000000          mov qword [r14], 0x0
0x767060bae5ee    0f8400000000            jz 0x767060bae5f4             < C_Syntax.l0030+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae5f4    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae5f9    0f853f000000            jnz 0x767060bae63e            < C_Syntax.l0030+153 >
 ..  1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae5ff    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae604    0f8534000000            jnz 0x767060bae63e            < C_Syntax.l0030+153 >
 ..  a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae60a    498bc6                  mov rax, r14
0x767060bae60d    4983ee08                sub r14, 0x8
0x767060bae611    48833800                cmp qword [rax], 0x0
0x767060bae615    7410                    jz 0x60bae627                 < C_Syntax.l0030+130 >
0x767060bae617    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae61c    7409                    jz 0x60bae627                 < C_Syntax.l0030+130 >
0x767060bae61e    49c70601000000          mov qword [r14], 0x1
0x767060bae625    eb07                    jmp 0x767060bae62e            < C_Syntax.l0030+137 >
0x767060bae627    49c70600000000          mov qword [r14], 0x0
0x767060bae62e    0f840a000000            jz 0x767060bae63e             < C_Syntax.l0030+153 >
 ..  || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae634    b801000000              mov eax, 0x1
 .. | ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae639    e907000000              jmp 0x767060bae645            < C_Syntax.l0030+160 >
0x767060bae63e    48c7c000000000          mov rax, 0x0
0x767060bae645    4d8d77f8                lea r14, [r15-0x8]
0x767060bae649    4d8b7e08                mov r15, [r14+0x8]
0x767060bae64d    4983ee18                sub r14, 0x18
 ..  == 1 ) ) return 1 ;      else return 0 ;  }
0x767060bae651    498906                  mov [r14], rax
 ..  ) ) return 1 ;      else return 0 ;  }
0x767060bae654    c3                      ret
Word_Disassemble : word - 'l0030' :: codeSize = 176
Word : 0x0000767060dd0d97 :: Compiled at : 0x0000767060bae5a5
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 292.10 <::
 0 0 0 0 0 0 0 0 1 0 1 1 0 1
pbAssert : ok

 =============================
Logic.l0031 <:> csl compiled word
SourceCode for Logic.l0031 :>
: l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps } { "0" ps } ifElse ;
Source code file location of l0031 : "namespaces/test/logic.csl" : 330.2 :: we are now at : namespaces/test/logic.csl : 349.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae65a -- code size = 267 bytes
TypeSignature :
 -----------------------------
Word :: Logic.l0031 : definition = 0x0000767060bae65a : disassembly at namespaces/test/logic.csl : 349.10 :
0x767060bae65a    4d897e08                mov [r14+0x8], r15
0x767060bae65e    4d8d7e08                lea r15, [r14+0x8]
0x767060bae662    4981c608000000          add r14, 0x8
 ..                 : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;  ..
0x767060bae669    49837fe001              cmp qword [r15-0x20], 0x1
0x767060bae66e    0f94c0                  setz al
0x767060bae671    480fb6c0                movzx rax, al
0x767060bae675    4983c608                add r14, 0x8
 ..             : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;  ..
0x767060bae679    498906                  mov [r14], rax
 ..        : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;  ..
0x767060bae67c    49837fe801              cmp qword [r15-0x18], 0x1
0x767060bae681    0f94c0                  setz al
0x767060bae684    480fb6c0                movzx rax, al
0x767060bae688    4983c608                add r14, 0x8
 ..    : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;  ..
0x767060bae68c    498906                  mov [r14], rax
  : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;  ..
0x767060bae68f    498bc6                  mov rax, r14
0x767060bae692    4983ee08                sub r14, 0x8
0x767060bae696    48833800                cmp qword [rax], 0x0
0x767060bae69a    7410                    jz 0x60bae6ac                 < Logic.l0031+82 >
0x767060bae69c    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae6a1    7409                    jz 0x60bae6ac                 < Logic.l0031+82 >
0x767060bae6a3    49c70601000000          mov qword [r14], 0x1
0x767060bae6aa    eb07                    jmp 0x767060bae6b3            < Logic.l0031+89 >
0x767060bae6ac    49c70600000000          mov qword [r14], 0x0
 .. 31 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae6b3    49837ff001              cmp qword [r15-0x10], 0x1
0x767060bae6b8    0f94c0                  setz al
0x767060bae6bb    480fb6c0                movzx rax, al
 ..  b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae6bf    488bc8                  mov rcx, rax
0x767060bae6c2    498b06                  mov rax, [r14]
0x767060bae6c5    4983ee08                sub r14, 0x8
 .. c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae6c9    480bc1                  or rax, rcx
0x767060bae6cc    0f95c0                  setnz al
0x767060bae6cf    480fb6c0                movzx rax, al
0x767060bae6d3    4983c608                add r14, 0x8
0x767060bae6d7    498906                  mov [r14], rax
 ..  ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae6da    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bae6df    0f94c0                  setz al
0x767060bae6e2    480fb6c0                movzx rax, al
0x767060bae6e6    4983c608                add r14, 0x8
 ..  a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae6ea    498906                  mov [r14], rax
 .. 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae6ed    498bc6                  mov rax, r14
0x767060bae6f0    4983ee08                sub r14, 0x8
0x767060bae6f4    48833800                cmp qword [rax], 0x0
0x767060bae6f8    7410                    jz 0x60bae70a                 < Logic.l0031+176 >
0x767060bae6fa    488378f800              cmp qword [rax-0x8], 0x0
0x767060bae6ff    7409                    jz 0x60bae70a                 < Logic.l0031+176 >
0x767060bae701    49c70601000000          mov qword [r14], 0x1
0x767060bae708    eb07                    jmp 0x767060bae711            < Logic.l0031+183 >
0x767060bae70a    49c70600000000          mov qword [r14], 0x0
0x767060bae711    0f8423000000            jz 0x767060bae73a             < Logic.l0031+224 >
 .. @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae717    48b8c4e18a6070760000    mov rax, 0x7670608ae1c4       < string : '1' >
0x767060bae721    4983c608                add r14, 0x8
0x767060bae725    498906                  mov [r14], rax
 .. == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae728    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bae732    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. & c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae735    e91e000000              jmp 0x767060bae758            < Logic.l0031+254 >
 .. @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae73a    48b8cee18a6070760000    mov rax, 0x7670608ae1ce       < string : '0' >
0x767060bae744    4983c608                add r14, 0x8
0x767060bae748    498906                  mov [r14], rax
 .. == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae74b    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bae755    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bae758    4d8d77f8                lea r14, [r15-0x8]
0x767060bae75c    4d8b7e08                mov r15, [r14+0x8]
0x767060bae760    4983ee20                sub r14, 0x20
 .. = && } { "1" ps  } { "0" ps  } ifElse ;
0x767060bae764    c3                      ret
Word_Disassemble : word - 'l0031' :: codeSize = 267
Word : 0x0000767060dd4917 :: Compiled at : 0x0000767060bae65a
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 349.10 <::

n = 1
n = 2
n = 3
n = 4
n = 5
n = 6
pbAssert : ok

including namespaces/test/namespace.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Test.hey <:> csl compiled word
SourceCode for Test.hey :>
: hey test hi test2.hi hi ;
Source code file location of hey : "namespaces/test/namespace.csl" : 20.2 :: we are now at : namespaces/test/namespace.csl : 22.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bae981 -- code size = 40 bytes
TypeSignature :
 -----------------------------
Word :: Test.hey : definition = 0x0000767060bae981 : disassembly at namespaces/test/namespace.csl : 22.8 :
 ..                            : hey test hi test2.hi hi ;  ..
0x767060bae981    49bb25e9ba6070760000    mov r11, 0x767060bae925
0x767060bae98b    49ffd3                  call r11                      < test.hi : 0x0000767060bae925 >
 ..                   : hey test hi test2.hi hi ;  ..
0x767060bae98e    49bb53e9ba6070760000    mov r11, 0x767060bae953
0x767060bae998    49ffd3                  call r11                      < test2.hi : 0x0000767060bae953 >
 ..                : hey test hi test2.hi hi ;  ..
0x767060bae99b    49bb25e9ba6070760000    mov r11, 0x767060bae925
0x767060bae9a5    49ffd3                  call r11                      < test.hi : 0x0000767060bae925 >
 ..             : hey test hi test2.hi hi ;  ..
0x767060bae9a8    c3                      ret
Word_Disassemble : word - 'hey' :: codeSize = 40
Word : 0x0000767060de2857 :: Compiled at : 0x0000767060bae981
 =============================
::> 'wdiss' was called at namespaces/test/namespace.csl 22.8 <::
 3 4 3 3 7 7
pbAssert : ok

above line should show : 3 4 3 3 7 7
 3 4 3 3 7 7
pbAssert : ok

above line should show : 3 4 3 3 7 7
including namespaces/test/bigNum.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :>
: factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
Source code file location of factorial : "namespaces/test/bigNum.csl" : 16.2 :: we are now at : namespaces/test/bigNum.csl : 17.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baea0e -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C.factorial : definition = 0x0000767060baea0e : disassembly at namespaces/test/bigNum.csl : 17.22 :
 ..                           : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  ..
0x767060baea0e    498b3e                  mov rdi, [r14]
 .. : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  ..
0x767060baea11    be01000000              mov esi, 0x1
 .. l ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060baea16    4883ff01                cmp rdi, 0x1
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060baea1a    0f8e09000000            jle 0x767060baea29            < C.factorial+27 >
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060baea20    480faff7                imul rsi, rdi
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060baea24    48ffcf                  dec rdi
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060baea27    ebed                    jmp 0x767060baea16            < C.factorial+8 >
 .. n @ * rec store n -- } while return ( rec @ ) ;
0x767060baea29    498936                  mov [r14], rsi
 .. c store n -- } while return ( rec @ ) ;
0x767060baea2c    c3                      ret
Word_Disassemble : word - 'factorial' :: codeSize = 31
Word : 0x0000767060de3c97 :: Compiled at : 0x0000767060baea0e
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 17.22 <::
 5040 factorial  : ok

 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :>
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ;
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 25.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baea32 -- code size = 72 bytes
TypeSignature :
 -----------------------------
Word :: C.factorial : definition = 0x0000767060baea32 : disassembly at namespaces/test/bigNum.csl : 25.14 :
0x767060baea32    4d897e08                mov [r14+0x8], r15
0x767060baea36    4d8d7e08                lea r15, [r14+0x8]
0x767060baea3a    4981c610000000          add r14, 0x10
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  ..
0x767060baea41    49c7470801000000        mov qword [r15+0x8], 0x1
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea49    49837ff801              cmp qword [r15-0x8], 0x1
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea4e    0f8e16000000            jle 0x767060baea6a            < C.factorial+56 >
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea54    498b47f8                mov rax, [r15-0x8]
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea58    498b4f08                mov rcx, [r15+0x8]
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea5c    480fafc1                imul rax, rcx
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea60    49894708                mov [r15+0x8], rax
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea64    49ff4ff8                dec qword [r15-0x8]
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea68    ebdf                    jmp 0x767060baea49            < C.factorial+23 >
 .. @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea6a    498b4708                mov rax, [r15+0x8]
0x767060baea6e    4d8d77f8                lea r14, [r15-0x8]
0x767060baea72    4d8b7e08                mov r15, [r14+0x8]
 ..  * fac store n -- } while      return fac @ ;
0x767060baea76    498906                  mov [r14], rax
 ..  store n -- } while      return fac @ ;
0x767060baea79    c3                      ret
Word_Disassemble : word - 'factorial' :: codeSize = 72
Word : 0x0000767060de68e7 :: Compiled at : 0x0000767060baea32
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 25.14 <::
 5040 factorial  : ok


 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :>
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ;
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 40.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baea32 -- code size = 72 bytes
TypeSignature :
 -----------------------------
Word :: C.factorial : definition = 0x0000767060baea32 : disassembly at namespaces/test/bigNum.csl : 40.14 :
0x767060baea32    4d897e08                mov [r14+0x8], r15
0x767060baea36    4d8d7e08                lea r15, [r14+0x8]
0x767060baea3a    4981c610000000          add r14, 0x10
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  ..
0x767060baea41    49c7470801000000        mov qword [r15+0x8], 0x1
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea49    49837ff801              cmp qword [r15-0x8], 0x1
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea4e    0f8e16000000            jle 0x767060baea6a            < C.factorial+56 >
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea54    498b47f8                mov rax, [r15-0x8]
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea58    498b4f08                mov rcx, [r15+0x8]
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea5c    480fafc1                imul rax, rcx
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea60    49894708                mov [r15+0x8], rax
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea64    49ff4ff8                dec qword [r15-0x8]
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea68    ebdf                    jmp 0x767060baea49            < C.factorial+23 >
 .. @ fac @ * fac store n -- } while      return fac @ ;
0x767060baea6a    498b4708                mov rax, [r15+0x8]
0x767060baea6e    4d8d77f8                lea r14, [r15-0x8]
0x767060baea72    4d8b7e08                mov r15, [r14+0x8]
 ..  * fac store n -- } while      return fac @ ;
0x767060baea76    498906                  mov [r14], rax
 ..  store n -- } while      return fac @ ;
0x767060baea79    c3                      ret
Word_Disassemble : word - 'factorial' :: codeSize = 72
Word : 0x0000767060de68e7 :: Compiled at : 0x0000767060baea32
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 40.14 <::
 5040 5040 5040
 =============================
BigNum.qexp <:> csl compiled word
SourceCode for BigNum.qexp :>
: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;
Source code file location of qexp : "namespaces/test/bigNum.csl" : 67.2 :: we are now at : namespaces/test/bigNum.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baeb28 -- code size = 155 bytes
TypeSignature :
 -----------------------------
Word :: BigNum.qexp : definition = 0x0000767060baeb28 : disassembly at namespaces/test/bigNum.csl : 68.17 :
 ..                              : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb28    498b06                  mov rax, [r14]
0x767060baeb2b    4983c608                add r14, 0x8
0x767060baeb2f    498906                  mov [r14], rax
 ..                          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb32    48b8c8729a6070760000    mov rax, 0x7670609a72c8
0x767060baeb3c    4983c608                add r14, 0x8
0x767060baeb40    498906                  mov [r14], rax
 ..                        : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb43    49ba103310ca1c640000    mov r10, 0x641cca103310
0x767060baeb4d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baeb57    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..                     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb5a    498b06                  mov rax, [r14]
0x767060baeb5d    4983ee08                sub r14, 0x8
0x767060baeb61    4883f800                cmp rax, 0x0
0x767060baeb65    0f8442000000            jz 0x767060baebad             < BigNum.qexp+133 >
 ..                 : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb6b    498b06                  mov rax, [r14]
0x767060baeb6e    4983c608                add r14, 0x8
0x767060baeb72    498906                  mov [r14], rax
 ..             : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb75    49ba903010ca1c640000    mov r10, 0x641cca103090
0x767060baeb7f    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baeb89    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb8c    e897ffffff              call 0x767060baeb28           < BigNum.qexp : 0x0000767060baeb28 >
 ..     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeb91    49baf02a10ca1c640000    mov r10, 0x641cca102af0
0x767060baeb9b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baeba5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baeba8    e915000000              jmp 0x767060baebc2            < BigNum.qexp+154 >
  : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  ..
0x767060baebad    4983ee08                sub r14, 0x8
 .. { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;
0x767060baebb1    48b8e8729a6070760000    mov rax, 0x7670609a72e8
0x767060baebbb    4983c608                add r14, 0x8
0x767060baebbf    498906                  mov [r14], rax
 .. } { dup -- qexp * } { drop 1 } ifElse ;
0x767060baebc2    c3                      ret
Word_Disassemble : word - 'qexp' :: codeSize = 155
Word : 0x0000767060deedd7 :: Compiled at : 0x0000767060baeb28
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 68.17 <::
  5040.00000000000000000000000000000000
 3 ! =   6.00000000000000000000000000000000

 64 ! =   126886932185884165437806897585122925290119029064705209778508545103477590511637067401789440.00000000000000000000000000000000

 1000 ! =   402387260077093317429838470612651212102966544163507701660266720704119769806989908398209100071577186893068783090923128165735185588027950353406889129247368414891358045299136715953285063420682021387062794693734409198431464246127206235813045990002520274575909913104326478290225140523401539128692178502019758932379457660249046286531112392122380536653533830469747019332630736468271962539511539517441084091548395205048568212151444266888000138311891331566327132041056785317671646218089496261058757458787888541256427910203949128089206098055125528721518540745206161392721407919025351918548714416743327782559176825452026920939896650865615375932384088669573776686670230120401967406703221961478508625793738568876894309533382821706462209404383271115048542505623589393244859172067791463260443310322632277086216651948161974359681932191356240096436367728220552696578891140360197109166205168814488843752507533608852420430013930971847404190565644080893716664167484606779509284725356307607453587140866090513556602389786314751645178165892536096487015707711106075548237758750720237969870741884999152710615300248006635156934216386533604180800310044427576766526698205875054102420138835953783455601875460666959726091571753923250888678519341775500944897553109652505576219868712943936816004071499019660567823510797715276436660145634137500784272753784426136757887964608313021469311145437608977653284416534488769657576551428116889055034143916030868893389979589311091787747753219895109769658109225123470666446036735269784453370721503321062189796734101265733985144495303980387714235857934638061903831020065022291748914637789230739688113987278630835326137898889409963697611934221880018811713177314813564661145933534317386414684061553856935609663369047123517526541585122825292881833314108423140887719392737182402316020908137071516792711706047934013431336843979924451761308238654898682984005419308645871979362328241353332225797576735874429116813731278034586920918899118608957379765314107649804799427092368500214215026155655045463410885162072371026890934825997956670061525624894885363999426927042531844766438019218864096423481135872477323129779559975108350645074636085739110547195349803925936614194372873277654120733612780634323002524104511888215344901671044835044792618211134128152728410000993830277064175810066870964517723058282768208805399871089529259410156036114796318882403031559180723928162345304700421054310769024829129647665165341148171035020178261641554401108640147151436811311148320263879332249366165087443125790648495729573323524293680134965188784846657625841212990509177684364910061642842112.00000000000000000000000000000000

 =============================
BigNum.aexp <:> csl compiled word
SourceCode for BigNum.aexp :>
: aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
Source code file location of aexp : "namespaces/test/bigNum.csl" : 77.2 :: we are now at : namespaces/test/bigNum.csl : 78.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baebd7 -- code size = 155 bytes
TypeSignature : BigNum -> BigNum
 -----------------------------
Word :: BigNum.aexp : definition = 0x0000767060baebd7 : disassembly at namespaces/test/bigNum.csl : 78.17 :
 ..                   : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baebd7    498b06                  mov rax, [r14]
0x767060baebda    4983c608                add r14, 0x8
0x767060baebde    498906                  mov [r14], rax
 ..               : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baebe1    48b808739a6070760000    mov rax, 0x7670609a7308
0x767060baebeb    4983c608                add r14, 0x8
0x767060baebef    498906                  mov [r14], rax
 ..             : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baebf2    49bab03210ca1c640000    mov r10, 0x641cca1032b0
0x767060baebfc    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baec06    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..          : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baec09    498b06                  mov rax, [r14]
0x767060baec0c    4983ee08                sub r14, 0x8
0x767060baec10    4883f800                cmp rax, 0x0
0x767060baec14    0f841a000000            jz 0x767060baec34             < BigNum.aexp+93 >
 ..      : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baec1a    4983ee08                sub r14, 0x8
 .. : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baec1e    48b828739a6070760000    mov rax, 0x7670609a7328
0x767060baec28    4983c608                add r14, 0x8
0x767060baec2c    498906                  mov [r14], rax
  : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  ..
0x767060baec2f    e93d000000              jmp 0x767060baec71            < BigNum.aexp+154 >
 ..  ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
0x767060baec34    498b06                  mov rax, [r14]
0x767060baec37    4983c608                add r14, 0x8
0x767060baec3b    498906                  mov [r14], rax
 .. t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
0x767060baec3e    49ba903010ca1c640000    mov r10, 0x641cca103090
0x767060baec48    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baec52    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. .N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
0x767060baec55    e87dffffff              call 0x767060baebd7           < BigNum.aexp : 0x0000767060baebd7 >
 .. { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
0x767060baec5a    49baf02a10ca1c640000    mov r10, 0x641cca102af0
0x767060baec64    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baec6e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. } { drop 1 } { dup -- aexp * } ifElse ;
0x767060baec71    c3                      ret
Word_Disassemble : word - 'aexp' :: codeSize = 155
Word : 0x0000767060df08d7 :: Compiled at : 0x0000767060baebd7
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 78.17 <::

 =============================
BigNum.bexp <:> csl compiled word
SourceCode for BigNum.bexp :>
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;
Source code file location of bexp : "namespaces/test/bigNum.csl" : 79.2 :: we are now at : namespaces/test/bigNum.csl : 81.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baec77 -- code size = 203 bytes
TypeSignature :
 -----------------------------
Word :: BigNum.bexp : definition = 0x0000767060baec77 : disassembly at namespaces/test/bigNum.csl : 81.9 :
0x767060baec77    4d897e08                mov [r14+0x8], r15
0x767060baec7b    4d8d7e08                lea r15, [r14+0x8]
0x767060baec7f    4981c608000000          add r14, 0x8
 ..                        : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baec86    498b47f8                mov rax, [r15-0x8]
0x767060baec8a    4983c608                add r14, 0x8
0x767060baec8e    498906                  mov [r14], rax
 ..                    : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baec91    48b848739a6070760000    mov rax, 0x7670609a7348
0x767060baec9b    4983c608                add r14, 0x8
0x767060baec9f    498906                  mov [r14], rax
0x767060baeca2    49bab03210ca1c640000    mov r10, 0x641cca1032b0
0x767060baecac    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baecb6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..               : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baecb9    498b06                  mov rax, [r14]
0x767060baecbc    4983ee08                sub r14, 0x8
0x767060baecc0    4883f800                cmp rax, 0x0
0x767060baecc4    0f8416000000            jz 0x767060baece0             < BigNum.bexp+105 >
 ..           : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baecca    48b868739a6070760000    mov rax, 0x7670609a7368
0x767060baecd4    4983c608                add r14, 0x8
0x767060baecd8    498906                  mov [r14], rax
 ..         : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baecdb    e953000000              jmp 0x767060baed33            < BigNum.bexp+188 >
 ..     : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baece0    498b47f8                mov rax, [r15-0x8]
0x767060baece4    4983c610                add r14, 0x10
0x767060baece8    498906                  mov [r14], rax
 .. : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baeceb    498946f8                mov [r14-0x8], rax
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  ..
0x767060baecef    48b888739a6070760000    mov rax, 0x7670609a7388
0x767060baecf9    4983c608                add r14, 0x8
0x767060baecfd    498906                  mov [r14], rax
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;
0x767060baed00    49ba302c10ca1c640000    mov r10, 0x641cca102c30
0x767060baed0a    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baed14    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;
0x767060baed17    e85bffffff              call 0x767060baec77           < BigNum.bexp : 0x0000767060baec77 >
0x767060baed1c    49baf02a10ca1c640000    mov r10, 0x641cca102af0
0x767060baed26    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baed30    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;
0x767060baed33    498b06                  mov rax, [r14]
0x767060baed36    4d8d77f8                lea r14, [r15-0x8]
0x767060baed3a    4d8b7e08                mov r15, [r14+0x8]
0x767060baed3e    498906                  mov [r14], rax
 ..  @ dup 1 - bexp * } ifElse return tos ;
0x767060baed41    c3                      ret
Word_Disassemble : word - 'bexp' :: codeSize = 203
Word : 0x0000767060df2447 :: Compiled at : 0x0000767060baec77
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.9 <::

 =============================
BigNum.bexp0 <:> csl compiled word
SourceCode for BigNum.bexp0 :>
: bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;
Source code file location of bexp0 : "namespaces/test/bigNum.csl" : 80.2 :: we are now at : namespaces/test/bigNum.csl : 81.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baed47 -- code size = 186 bytes
TypeSignature :
 -----------------------------
Word :: BigNum.bexp0 : definition = 0x0000767060baed47 : disassembly at namespaces/test/bigNum.csl : 81.19 :
0x767060baed47    4d897e08                mov [r14+0x8], r15
0x767060baed4b    4d8d7e08                lea r15, [r14+0x8]
0x767060baed4f    4981c608000000          add r14, 0x8
 ..                       : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baed56    498b47f8                mov rax, [r15-0x8]
0x767060baed5a    4983c608                add r14, 0x8
0x767060baed5e    498906                  mov [r14], rax
 ..                   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baed61    48b8a8739a6070760000    mov rax, 0x7670609a73a8
0x767060baed6b    4983c608                add r14, 0x8
0x767060baed6f    498906                  mov [r14], rax
 ..                 : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baed72    49bab03210ca1c640000    mov r10, 0x641cca1032b0
0x767060baed7c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baed86    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..              : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baed89    498b06                  mov rax, [r14]
0x767060baed8c    4983ee08                sub r14, 0x8
0x767060baed90    4883f800                cmp rax, 0x0
0x767060baed94    0f8416000000            jz 0x767060baedb0             < BigNum.bexp0+105 >
 ..          : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baed9a    48b8c8739a6070760000    mov rax, 0x7670609a73c8
0x767060baeda4    4983c608                add r14, 0x8
0x767060baeda8    498906                  mov [r14], rax
 ..        : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baedab    e942000000              jmp 0x767060baedf2            < BigNum.bexp0+171 >
 ..    : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baedb0    498b47f8                mov rax, [r15-0x8]
0x767060baedb4    4983c610                add r14, 0x10
0x767060baedb8    498906                  mov [r14], rax
   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  ..
0x767060baedbb    498946f8                mov [r14-0x8], rax
 .. p0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;
0x767060baedbf    49ba903010ca1c640000    mov r10, 0x641cca103090
0x767060baedc9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baedd3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;
0x767060baedd6    e86cffffff              call 0x767060baed47           < BigNum.bexp0 : 0x0000767060baed47 >
 .. { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;
0x767060baeddb    49baf02a10ca1c640000    mov r10, 0x641cca102af0
0x767060baede5    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baedef    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;
0x767060baedf2    498b06                  mov rax, [r14]
0x767060baedf5    4d8d77f8                lea r14, [r15-0x8]
0x767060baedf9    4d8b7e08                mov r15, [r14+0x8]
0x767060baedfd    498906                  mov [r14], rax
 ..  @ dup -- bexp0 * } ifElse return tos ;
0x767060baee00    c3                      ret
Word_Disassemble : word - 'bexp0' :: codeSize = 186
Word : 0x0000767060df4677 :: Compiled at : 0x0000767060baed47
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.19 <::
  5040.00000000000000000000000000000000  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000  40320.00000000000000000000000000000000
  5040.00000000000000000000000000000000
 50 ! =   30414093201713375576366966406747986832057064836514787179557289984.00000000000000000000000000000000
  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000
 =============================
BigNum.!! <:> csl compiled word
SourceCode for BigNum.!! :>
: !! ! p nl ;
Source code file location of !! : "namespaces/test/bigNum.csl" : 92.2 :: we are now at : namespaces/test/bigNum.csl : 93.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baee15 -- code size = 50 bytes
TypeSignature :
 -----------------------------
Word :: BigNum.!! : definition = 0x0000767060baee15 : disassembly at namespaces/test/bigNum.csl : 93.15 :
 ..                                  : !! ! p nl ;  ..
0x767060baee15    49bb47edba6070760000    mov r11, 0x767060baed47
0x767060baee1f    49ffd3                  call r11                      < BigNum.bexp0 : 0x0000767060baed47 >
 ..                                : !! ! p nl ;  ..
0x767060baee22    49bb9e9aba6070760000    mov r11, 0x767060ba9a9e
0x767060baee2c    49ffd3                  call r11                      < BigNum.fprint : 0x0000767060ba9a9e >
 ..                              : !! ! p nl ;  ..
0x767060baee2f    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060baee39    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baee43    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..                           : !! ! p nl ;  ..
0x767060baee46    c3                      ret
Word_Disassemble : word - '!!' :: codeSize = 50
Word : 0x0000767060df68a7 :: Compiled at : 0x0000767060baee15
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 93.15 <::
  5040.00000000000000000000000000000000
  40320.00000000000000000000000000000000
  40320.00000000000000000000000000000000

 =============================
BigNum.bexpl <:> csl compiled word
SourceCode for BigNum.bexpl :>
: bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
Source code file location of bexpl : "namespaces/test/bigNum.csl" : 102.2 :: we are now at : namespaces/test/bigNum.csl : 103.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baee4c -- code size = 203 bytes
TypeSignature :
 -----------------------------
Word :: BigNum.bexpl : definition = 0x0000767060baee4c : disassembly at namespaces/test/bigNum.csl : 103.10 :
0x767060baee4c    4d897e08                mov [r14+0x8], r15
0x767060baee50    4d8d7e08                lea r15, [r14+0x8]
0x767060baee54    4981c608000000          add r14, 0x8
 ..                       : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baee5b    498b47f8                mov rax, [r15-0x8]
0x767060baee5f    4983c608                add r14, 0x8
0x767060baee63    498906                  mov [r14], rax
 ..                   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baee66    48b8e8739a6070760000    mov rax, 0x7670609a73e8
0x767060baee70    4983c608                add r14, 0x8
0x767060baee74    498906                  mov [r14], rax
 ..                 : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baee77    49bab03210ca1c640000    mov r10, 0x641cca1032b0
0x767060baee81    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baee8b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..              : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baee8e    498b06                  mov rax, [r14]
0x767060baee91    4983ee08                sub r14, 0x8
0x767060baee95    4883f800                cmp rax, 0x0
0x767060baee99    0f8416000000            jz 0x767060baeeb5             < BigNum.bexpl+105 >
 ..          : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baee9f    48b808749a6070760000    mov rax, 0x7670609a7408
0x767060baeea9    4983c608                add r14, 0x8
0x767060baeead    498906                  mov [r14], rax
 ..        : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baeeb0    e953000000              jmp 0x767060baef08            < BigNum.bexpl+188 >
 ..    : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baeeb5    498b47f8                mov rax, [r15-0x8]
0x767060baeeb9    4983c610                add r14, 0x10
0x767060baeebd    498906                  mov [r14], rax
   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  ..
0x767060baeec0    498946f8                mov [r14-0x8], rax
 .. pl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
0x767060baeec4    48b828749a6070760000    mov rax, 0x7670609a7428
0x767060baeece    4983c608                add r14, 0x8
0x767060baeed2    498906                  mov [r14], rax
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
0x767060baeed5    49ba302c10ca1c640000    mov r10, 0x641cca102c30
0x767060baeedf    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baeee9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
0x767060baeeec    e85bffffff              call 0x767060baee4c           < BigNum.bexpl : 0x0000767060baee4c >
 ..  n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
0x767060baeef1    49baf02a10ca1c640000    mov r10, 0x641cca102af0
0x767060baeefb    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baef05    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
0x767060baef08    498b06                  mov rax, [r14]
0x767060baef0b    4d8d77f8                lea r14, [r15-0x8]
0x767060baef0f    4d8b7e08                mov r15, [r14+0x8]
0x767060baef13    498906                  mov [r14], rax
 .. @ dup 1 - bexpl * } ifElse return tos ;
0x767060baef16    c3                      ret
Word_Disassemble : word - 'bexpl' :: codeSize = 203
Word : 0x0000767060df7117 :: Compiled at : 0x0000767060baee4c
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 103.10 <::
  5040.00000000000000000000000000000000
 starting BigNum
  0.33333333333333331482961625624739  1.73205080756887719317660412343685  2.99999999999999955591079014993738  9.00000000000000000000000000000000  : should be 9

fib  200.00000000000000000000000000000000 =  280571172992510158789853658433108939112448.00000000000000000000000000000000
 =============================
BigNum.tfib3 <:> csl compiled word
SourceCode for BigNum.tfib3 :>
: tfib3 ( n | m ) "locals fibBN : " ps { m 1 = } { m @ n @ <= } { m 1 += } { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } for ;
Source code file location of tfib3 : "namespaces/test/bigNum.csl" : 130.2 :: we are now at : namespaces/test/bigNum.csl : 136.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0x60baf125 -- code size = 386 bytes
TypeSignature :
 -----------------------------
Word :: BigNum.tfib3 : definition = 0x0000767060baf125 : disassembly at namespaces/test/bigNum.csl : 136.10 :
0x767060baf125    4d897e08                mov [r14+0x8], r15
0x767060baf129    4d8d7e08                lea r15, [r14+0x8]
0x767060baf12d    4981c610000000          add r14, 0x10
0x767060baf134    48b87df08a6070760000    mov rax, 0x7670608af07d       < string : 'locals fibBN : ' >
0x767060baf13e    4983c608                add r14, 0x8
0x767060baf142    498906                  mov [r14], rax
: tfib3 ( n | m )       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { ","  ..
0x767060baf145    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060baf14f    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }    ..
0x767060baf152    49bb28759a6070760000    mov r11, 0x7670609a7528
0x767060baf15c    4d895f08                mov [r15+0x8], r11
 .. "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ..
0x767060baf160    498b4708                mov rax, [r15+0x8]
0x767060baf164    4983c608                add r14, 0x8
0x767060baf168    498906                  mov [r14], rax
 .. als fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf16b    498b47f8                mov rax, [r15-0x8]
0x767060baf16f    4983c608                add r14, 0x8
0x767060baf173    498906                  mov [r14], rax
 .. fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf176    49bab03210ca1c640000    mov r10, 0x641cca1032b0
0x767060baf180    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baf18a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. BN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf18d    498b06                  mov rax, [r14]
0x767060baf190    4983ee08                sub r14, 0x8
0x767060baf194    4883f800                cmp rax, 0x0
0x767060baf198    0f84fc000000            jz 0x767060baf29a             < BigNum.tfib3+373 >
 .. = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf19e    498b4708                mov rax, [r15+0x8]
0x767060baf1a2    4983c610                add r14, 0x10
0x767060baf1a6    498906                  mov [r14], rax
 .. { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1a9    498946f8                mov [r14-0x8], rax
 .. @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1ad    49bb9e9aba6070760000    mov r11, 0x767060ba9a9e
0x767060baf1b7    49ffd3                  call r11                      < BigNum.fprint : 0x0000767060ba9a9e >
 .. n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1ba    48b8a9f08a6070760000    mov rax, 0x7670608af0a9       < string : ' : ' >
0x767060baf1c4    4983c608                add r14, 0x8
0x767060baf1c8    498906                  mov [r14], rax
 ..  } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1cb    49bac0de12ca1c640000    mov r10, 0x641cca12dec0
0x767060baf1d5    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baf1df    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1e2    49bbf4efba6070760000    mov r11, 0x767060baeff4
0x767060baf1ec    49ffd3                  call r11                      < BigNum.fibBN : 0x0000767060baeff4 >
 .. =  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1ef    49bb9e9aba6070760000    mov r11, 0x767060ba9a9e
0x767060baf1f9    49ffd3                  call r11                      < BigNum.fprint : 0x0000767060ba9a9e >
 ..       { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf1fc    498b47f8                mov rax, [r15-0x8]
0x767060baf200    4983c608                add r14, 0x8
0x767060baf204    498906                  mov [r14], rax
 ..   { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf207    498b4708                mov rax, [r15+0x8]
0x767060baf20b    4983c608                add r14, 0x8
0x767060baf20f    498906                  mov [r14], rax
 .. m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf212    49bae03210ca1c640000    mov r10, 0x641cca1032e0
0x767060baf21c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baf226    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf229    498b06                  mov rax, [r14]
0x767060baf22c    4983ee08                sub r14, 0x8
0x767060baf230    4883f800                cmp rax, 0x0
0x767060baf234    0f8428000000            jz 0x767060baf262             < BigNum.tfib3+317 >
 .. p p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf23a    48b8b7f08a6070760000    mov rax, 0x7670608af0b7       < string : ',' >
0x767060baf244    4983c608                add r14, 0x8
0x767060baf248    498906                  mov [r14], rax
 .. " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf24b    49bac0de12ca1c640000    mov r10, 0x641cca12dec0
0x767060baf255    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baf25f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf262    498d4708                lea rax, [r15+0x8]
0x767060baf266    4983c608                add r14, 0x8
0x767060baf26a    498906                  mov [r14], rax
 ..  ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf26d    48b848759a6070760000    mov rax, 0x7670609a7548
0x767060baf277    4983c608                add r14, 0x8
0x767060baf27b    498906                  mov [r14], rax
 .. s      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf27e    49ba702d10ca1c640000    mov r10, 0x641cca102d70
0x767060baf288    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baf292    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..    { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf295    e9c6feffff              jmp 0x767060baf160            < BigNum.tfib3+59 >
0x767060baf29a    4d8d77f8                lea r14, [r15-0x8]
0x767060baf29e    4d8b7e08                mov r15, [r14+0x8]
0x767060baf2a2    4983ee08                sub r14, 0x8
 ..  @ m @ > } { "," _ps } if2 }      for ;  ..
0x767060baf2a6    c3                      ret
Word_Disassemble : word - 'tfib3' :: codeSize = 386
Word : 0x0000767060e00a47 :: Compiled at : 0x0000767060baf125
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 136.10 <::


 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000

 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000
  52.53799999999999670308170607313514  11.40999999999999836575170775176957
 51
 =============================
void.ctof <:> csl compiled word
SourceCode for void.ctof :>
: ctof ( c ) c 18 *= c 10 /= c 32 += nl return ( c @ ) ;
Source code file location of ctof : "namespaces/test/bigNum.csl" : 146.2 :: we are now at : namespaces/test/bigNum.csl : 147.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baf583 -- code size = 99 bytes
TypeSignature :
 -----------------------------
Word :: void.ctof : definition = 0x0000767060baf583 : disassembly at namespaces/test/bigNum.csl : 147.9 :
0x767060baf583    4d897e08                mov [r14+0x8], r15
0x767060baf587    4d8d7e08                lea r15, [r14+0x8]
0x767060baf58b    4981c608000000          add r14, 0x8
 ..                        : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf592    b912000000              mov ecx, 0x12
 ..                          : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf597    498b47f8                mov rax, [r15-0x8]
 ..                     : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf59b    480fafc1                imul rax, rcx
0x767060baf59f    498947f8                mov [r15-0x8], rax
 ..               : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf5a3    b90a000000              mov r9d, 0xa
 ..                 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf5a8    498b47f8                mov rax, [r15-0x8]
 ..            : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf5ac    48c7c200000000          mov rdx, 0x0
0x767060baf5b3    48f7f9                  idiv rcx
0x767060baf5b6    498947f8                mov [r15-0x8], rax
 ..         : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf5ba    498347f820              add qword [r15-0x8], 0x20
 .. : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf5bf    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060baf5c9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060baf5d3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  ..
0x767060baf5d6    498b47f8                mov rax, [r15-0x8]
0x767060baf5da    4d8d77f8                lea r14, [r15-0x8]
0x767060baf5de    4d8b7e08                mov r15, [r14+0x8]
 ..  c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;
0x767060baf5e2    498906                  mov [r14], rax
 .. *=  c 10 /= c 32 += nl return ( c @ ) ;
0x767060baf5e5    c3                      ret
Word_Disassemble : word - 'ctof' :: codeSize = 99
Word : 0x0000767060e0ae77 :: Compiled at : 0x0000767060baf583
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 147.9 <::
 11
 =============================
void.ftoc <:> csl compiled word
SourceCode for void.ftoc :>
: ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;
Source code file location of ftoc : "namespaces/test/bigNum.csl" : 148.2 :: we are now at : namespaces/test/bigNum.csl : 149.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baf5eb -- code size = 76 bytes
TypeSignature :
 -----------------------------
Word :: void.ftoc : definition = 0x0000767060baf5eb : disassembly at namespaces/test/bigNum.csl : 149.9 :
0x767060baf5eb    4d897e08                mov [r14+0x8], r15
0x767060baf5ef    4d8d7e08                lea r15, [r14+0x8]
0x767060baf5f3    4981c608000000          add r14, 0x8
 ..                          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf5fa    49836ff820              sub qword [r15-0x8], 0x20
 ..                : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf5ff    b90a000000              mov ecx, 0xa
 ..                  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf604    498b47f8                mov rax, [r15-0x8]
 ..             : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf608    480fafc1                imul rax, rcx
0x767060baf60c    498947f8                mov [r15-0x8], rax
 ..        : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf610    b912000000              mov ecx, 0x12
 ..          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf615    498b47f8                mov rax, [r15-0x8]
 ..     : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf619    48c7c200000000          mov rdx, 0x0
0x767060baf620    48f7f9                  idiv rcx
0x767060baf623    498947f8                mov [r15-0x8], rax
 ..  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  ..
0x767060baf627    498b47f8                mov rax, [r15-0x8]
0x767060baf62b    4d8d77f8                lea r14, [r15-0x8]
0x767060baf62f    4d8b7e08                mov r15, [r14+0x8]
 ..  f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;
0x767060baf633    498906                  mov [r14], rax
 ..  32 -= f 10 *= f 18 /= return ( f @ ) ;
0x767060baf636    c3                      ret
Word_Disassemble : word - 'ftoc' :: codeSize = 76
Word : 0x0000767060e0cb97 :: Compiled at : 0x0000767060baf5eb
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 149.9 <::
 fibc2

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :>
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
Source code file location of fibc2 : "namespaces/test/bigNum.csl" : 156.100 :: we are now at : namespaces/test/bigNum.csl : 157.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60baf63c -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x0000767060baf63c : disassembly at namespaces/test/bigNum.csl : 157.10 :
0x767060baf63c    4d897e08                mov [r14+0x8], r15
0x767060baf640    4d8d7e08                lea r15, [r14+0x8]
0x767060baf644    4981c608000000          add r14, 0x8
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) ..
0x767060baf64b    49837ff802              cmp qword [r15-0x8], 0x2
  (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) ..
0x767060baf650    0f8d10000000            jge 0x767060baf666            < LispDefines.fibc2+42 >
 .. e fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf656    498b47f8                mov rax, [r15-0x8]
0x767060baf65a    4983c608                add r14, 0x8
0x767060baf65e    498906                  mov [r14], rax
 .. bc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf661    e945000000              jmp 0x767060baf6ab            < LispDefines.fibc2+111 >
 ..  ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf666    498b47f8                mov rax, [r15-0x8]
 ..  ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf66a    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060baf673    83c608                  add esi, 0x8
0x767060baf676    498906                  mov [r14], rax
 .. mbda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf679    e8beffffff              call 0x767060baf63c           < LispDefines.fibc2 : 0x0000767060baf63c >
 .. n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf67e    498b47f8                mov rax, [r15-0x8]
 .. ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf682    b902000000              mov ecx, 0x2
 .. ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf687    482bc1                  sub rax, rcx
0x767060baf68a    4983c608                add r14, 0x8
0x767060baf68e    498906                  mov [r14], rax
 .. ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x767060baf691    e8a6ffffff              call 0x767060baf63c           < LispDefines.fibc2 : 0x0000767060baf63c >
0x767060baf696    498b0e                  mov rcx, [r14]
0x767060baf699    498b46f8                mov rax, [r14-0x8]
0x767060baf69d    4983ee10                sub r14, 0x10
0x767060baf6a1    4803c1                  add rax, rcx
0x767060baf6a4    4983c608                add r14, 0x8
0x767060baf6a8    498906                  mov [r14], rax
0x767060baf6ab    4d8d77f8                lea r14, [r15-0x8]
0x767060baf6af    4d8b7e08                mov r15, [r14+0x8]
0x767060baf6b3    498906                  mov [r14], rax
 ..        (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) ..
0x767060baf6b6    c3                      ret
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x0000767060aac330 :: Compiled at : 0x0000767060baf63c
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 157.10 <::
 6765
 fibbc
 6765
 x7

 ( 1 2 3 x7 )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 7 8 9 45 )

 ( 1 2 3 7 8 9 45 )

 77
 77
 77
 alist
 ( 1 2 3 7 8 9 45 )
 yfac45
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac

 =============================
LispDefines.yfac <:> variableyfac <:> lambdaCalculus defined word
SourceCode for LispDefines.yfac :>
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1))))))
Source code file location of yfac : "namespaces/test/bigNum.csl" : 219.65 :: we are now at : namespaces/test/bigNum.csl : 220.21
Lambda Calculus word : interpreted not compiled
TypeSignature :
 -----------------------------
Word :: LispDefines.yfac : definition = 0x0000000000000000 : disassembly at namespaces/test/bigNum.csl : 220.21 :
Word : 0x0000767060b657e8 :: Compiled at : 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 220.21 <::
 3628800

 yfacc
 3628800

 5040

 yfac
 3628800

 yfacc
 3628800

 5040

 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ff
 ( ( /\ "let" 130225024230996 ) 6 )
 ( ( /\ "let" 130225024230996 ) ( ( /\ y 130225028139797 ) 4 ) )
 7

 h36
 ( n09 my6 n09 my6 n09 n09 my6 my6 )

 should show : ( n09 my6 n09 my6 n09 n09 my6 my6 )
 n09
 my6
 ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )

 should show : ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 id
 ( "the" "the" b b )
 id1
 ( 7 7 11 11 7 7 )
 swch
 ( 11 7 )
 swch2
 ( ( 7 11 ) ( 11 7 ) )
 id2
 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) )
 id3
 ( 7 7 11 7 11 11 7 7 )
 swch3
 id4
 ( 7 7 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) ) 11 11 7 7 )
 x
 ( ( 3 4 ) ( 4 3 ) )
 x
 7
 x
 11
 7
 7
 7
 7

 namespaces/test/bigNum.csl 286.9
'7'
'( ( lambda ( a b ) ( + a b ) ) 3 4 )'

'( ( lambda ( a b ) ( + a b ) ) 3 4 )'
'7'

'7'

 =============================
List.bexp3 <:> csl compiled word
SourceCode for List.bexp3 :>
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 * } { 1 } ifElse ;
Source code file location of bexp3 : "namespaces/test/bigNum.csl" : 290.2 :: we are now at : namespaces/test/bigNum.csl : 291.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baf768 -- code size = 107 bytes
 -----------------------------
Word :: List.bexp3 : definition = 0x0000767060baf768 : disassembly at namespaces/test/bigNum.csl : 291.18 :
0x767060baf768    4d897e08                mov [r14+0x8], r15
0x767060baf76c    4d8d7e08                lea r15, [r14+0x8]
0x767060baf770    4981c608000000          add r14, 0x8
0x767060baf777    49837ff801              cmp qword [r15-0x8], 0x1
0x767060baf77c    0f8e39000000            jle 0x767060baf7bb            < List.bexp3+83 >
0x767060baf782    498b47f8                mov rax, [r15-0x8]
0x767060baf786    4983c608                add r14, 0x8
0x767060baf78a    498906                  mov [r14], rax
0x767060baf78d    498b47f8                mov rax, [r15-0x8]
0x767060baf791    48ffc8                  dec rax
0x767060baf794    4983c608                add r14, 0x8
0x767060baf798    498906                  mov [r14], rax
0x767060baf79b    e8c8ffffff              call 0x767060baf768           < List.bexp3 : 0x0000767060baf768 >
0x767060baf7a0    498b0e                  mov rcx, [r14]
0x767060baf7a3    498b46f8                mov rax, [r14-0x8]
0x767060baf7a7    4983ee10                sub r14, 0x10
0x767060baf7ab    480fafc1                imul rax, rcx
0x767060baf7af    4983c608                add r14, 0x8
0x767060baf7b3    498906                  mov [r14], rax
0x767060baf7b6    e90c000000              jmp 0x767060baf7c7            < List.bexp3+95 >
0x767060baf7bb    b801000000              mov eax, 0x1
0x767060baf7c0    4983c608                add r14, 0x8
0x767060baf7c4    498906                  mov [r14], rax
0x767060baf7c7    4d8d77f8                lea r14, [r15-0x8]
0x767060baf7cb    4d8b7e08                mov r15, [r14+0x8]
0x767060baf7cf    498906                  mov [r14], rax
0x767060baf7d2    c3                      ret
Word_Disassemble : word - 'bexp3' :: codeSize = 107
Word : 0x0000767060e208b7 :: Compiled at : 0x0000767060baf768
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 291.18 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word, prefix
SourceCode for C_Syntax.fac5 :>
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; }
Source code file location of fac5 : "namespaces/test/bigNum.csl" : 294.5 :: we are now at : namespaces/test/bigNum.csl : 307.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baf7e7 -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x0000767060baf7e7 : disassembly at namespaces/test/bigNum.csl : 307.21 :
0x767060baf7e7    498b3e                  mov rdi, [r14]
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; }
0x767060baf7ea    be01000000              mov esi, 0x1
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; }
0x767060baf7ef    4883ff01                cmp rdi, 0x1
0x767060baf7f3    0f8e09000000            jle 0x767060baf802            < C_Syntax.fac5+27 >
 ..   while ( n > 1 )      {         facc *= n -- ;     }     return facc ; }
0x767060baf7f9    480faff7                imul rsi, rdi
 .. le ( n > 1 )      {         facc *= n -- ;     }     return facc ; }
0x767060baf7fd    48ffcf                  dec rdi
0x767060baf800    ebed                    jmp 0x767060baf7ef            < C_Syntax.fac5+8 >
 ..       facc *= n -- ;     }     return facc ; }
0x767060baf802    498936                  mov [r14], rsi
 .. acc *= n -- ;     }     return facc ; }
0x767060baf805    c3                      ret
Word_Disassemble : word - 'fac5' :: codeSize = 31
Word : 0x0000767060e22c97 :: Compiled at : 0x0000767060baf7e7
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 307.21 <::
 5040
 =============================
C_Syntax.cpow <:> csl compiled word, prefix
SourceCode for C_Syntax.cpow :>
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }
Source code file location of cpow : "namespaces/test/bigNum.csl" : 313.9 :: we are now at : namespaces/test/bigNum.csl : 315.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baf80b -- code size = 80 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x0000767060baf80b : disassembly at namespaces/test/bigNum.csl : 315.9 :
0x767060baf80b    4d897e08                mov [r14+0x8], r15
0x767060baf80f    4d8d7e08                lea r15, [r14+0x8]
0x767060baf813    4981c610000000          add r14, 0x10
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }  ..
0x767060baf81a    49c7470801000000        mov qword [r15+0x8], 0x1
 ..  base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf822    498b47f8                mov rax, [r15-0x8]
0x767060baf826    4883f800                cmp rax, 0x0
0x767060baf82a    0f8417000000            jz 0x767060baf847             < C_Syntax.cpow+60 >
 .. ut = 1 ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf830    498b4708                mov rax, [r15+0x8]
 ..  ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf834    498b4ff0                mov rcx, [r15-0x10]
 ..  1 ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf838    480fafc1                imul rax, rcx
 .. or ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf83c    49894708                mov [r15+0x8], rax
 ..  ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf840    49836ff801              sub qword [r15-0x8], 0x1
 ..  { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }
0x767060baf845    ebdb                    jmp 0x767060baf822            < C_Syntax.cpow+23 >
 .. ; power -= 1 ) { out = out * base ; } return out }
0x767060baf847    498b4708                mov rax, [r15+0x8]
0x767060baf84b    4d8d77f8                lea r14, [r15-0x8]
0x767060baf84f    4d8b7e08                mov r15, [r14+0x8]
0x767060baf853    4983ee08                sub r14, 0x8
 ..  -= 1 ) { out = out * base ; } return out }
0x767060baf857    498906                  mov [r14], rax
 .. 1 ) { out = out * base ; } return out }
0x767060baf85a    c3                      ret
Word_Disassemble : word - 'cpow' :: codeSize = 80
Word : 0x0000767060e258e7 :: Compiled at : 0x0000767060baf80b
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 315.9 <::
 2 ^ 30 :  1073741824
 =============================
Root.pow0 <:> csl compiled word
SourceCode for Root.pow0 :>
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
Source code file location of pow0 : "namespaces/test/bigNum.csl" : 319.2 :: we are now at : namespaces/test/bigNum.csl : 322.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baf860 -- code size = 128 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.pow0 : definition = 0x0000767060baf860 : disassembly at namespaces/test/bigNum.csl : 322.9 :
0x767060baf860    4d897e08                mov [r14+0x8], r15
0x767060baf864    4d8d7e08                lea r15, [r14+0x8]
0x767060baf868    4981c610000000          add r14, 0x10
 ..   : pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  ..
0x767060baf86f    49c7470801000000        mov qword [r15+0x8], 0x1
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  ..
0x767060baf877    49837ff800              cmp qword [r15-0x8], 0x0
 .. wer | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf87c    0f8e4a000000            jle 0x767060baf8cc            < Root.pow0+108 >
 .. wer @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf882    498d4708                lea rax, [r15+0x8]
 .. power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf886    4983c608                add r14, 0x8
0x767060baf88a    498906                  mov [r14], rax
 .. @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf88d    498b4708                mov rax, [r15+0x8]
 .. } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf891    498b4ff0                mov rcx, [r15-0x10]
0x767060baf895    480fafc1                imul rax, rcx
 .. er power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf899    488bc8                  mov rcx, rax
0x767060baf89c    498b06                  mov rax, [r14]
0x767060baf89f    4983ee08                sub r14, 0x8
 ..  power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8a3    488908                  mov [rax], rcx
 .. | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8a6    498d47f8                lea rax, [r15-0x8]
0x767060baf8aa    4983c608                add r14, 0x8
0x767060baf8ae    498906                  mov [r14], rax
 .. ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8b1    498b47f8                mov rax, [r15-0x8]
 .. 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8b5    b901000000              mov ecx, 0x1
0x767060baf8ba    482bc1                  sub rax, rcx
 .. = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8bd    488bc8                  mov rcx, rax
0x767060baf8c0    498b06                  mov rax, [r14]
0x767060baf8c3    4983ee08                sub r14, 0x8
 .. } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8c7    488908                  mov [rax], rcx
 .. { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8ca    ebab                    jmp 0x767060baf877            < Root.pow0+23 >
 ..  1 - = } { out out @ base @ * = } for return out @ ;
0x767060baf8cc    498b4708                mov rax, [r15+0x8]
0x767060baf8d0    4d8d77f8                lea r14, [r15-0x8]
0x767060baf8d4    4d8b7e08                mov r15, [r14+0x8]
0x767060baf8d8    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060baf8dc    498906                  mov [r14], rax
 .. t out @ base @ * = } for return out @ ;
0x767060baf8df    c3                      ret
Word_Disassemble : word - 'pow0' :: codeSize = 128
Word : 0x0000767060e28bf7 :: Compiled at : 0x0000767060baf860
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 322.9 <::
 1073741824 1073741824 xyfac
 yfac

yfac : 10 factorial =  3628800.00000000000000000000000000000000
 yfacc
 3628800

 5040

 yfac
 3628800
 yfacc
 3628800

 5040

 fib
 fib2
 55
 55
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )

 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 380.2 :: we are now at : namespaces/test/bigNum.csl : 391.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafa6a -- code size = 130 bytes
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafa6a : disassembly at namespaces/test/bigNum.csl : 391.10 :
0x767060bafa6a    4d897e08                mov [r14+0x8], r15
0x767060bafa6e    4d8d7e08                lea r15, [r14+0x8]
0x767060bafa72    4981c620000000          add r14, 0x20
0x767060bafa79    49c7470800000000        mov qword [r15+0x8], 0x0
0x767060bafa81    49c7471000000000        mov qword [r15+0x10], 0x0
0x767060bafa89    49c7471801000000        mov qword [r15+0x18], 0x1
0x767060bafa91    49837ff800              cmp qword [r15-0x8], 0x0
0x767060bafa96    0f8e40000000            jle 0x767060bafadc            < Root.fib01+114 >
0x767060bafa9c    498d4710                lea rax, [r15+0x10]
0x767060bafaa0    498b4f18                mov rcx, [r15+0x18]
0x767060bafaa4    488908                  mov [rax], rcx
0x767060bafaa7    498d4718                lea rax, [r15+0x18]
0x767060bafaab    498b4f08                mov rcx, [r15+0x8]
0x767060bafaaf    488908                  mov [rax], rcx
0x767060bafab2    498d4708                lea rax, [r15+0x8]
0x767060bafab6    4983c608                add r14, 0x8
0x767060bafaba    498906                  mov [r14], rax
0x767060bafabd    498b4710                mov rax, [r15+0x10]
0x767060bafac1    498b4f18                mov rcx, [r15+0x18]
0x767060bafac5    4803c1                  add rax, rcx
0x767060bafac8    488bc8                  mov rcx, rax
0x767060bafacb    498b06                  mov rax, [r14]
0x767060baface    4983ee08                sub r14, 0x8
0x767060bafad2    488908                  mov [rax], rcx
0x767060bafad5    49836ff801              sub qword [r15-0x8], 0x1
0x767060bafada    ebb5                    jmp 0x767060bafa91            < Root.fib01+39 >
0x767060bafadc    498b4708                mov rax, [r15+0x8]
0x767060bafae0    4d8d77f8                lea r14, [r15-0x8]
0x767060bafae4    4d8b7e08                mov r15, [r14+0x8]
0x767060bafae8    498906                  mov [r14], rax
0x767060bafaeb    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 130
Word : 0x0000767060e376a7 :: Compiled at : 0x0000767060bafa6a
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 391.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( n | fn REG fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 393.2 :: we are now at : namespaces/test/bigNum.csl : 404.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafaf1 -- code size = 121 bytes
TypeSignature :
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafaf1 : disassembly at namespaces/test/bigNum.csl : 404.10 :
0x767060bafaf1    4d897e08                mov [r14+0x8], r15
0x767060bafaf5    4d8d7e08                lea r15, [r14+0x8]
0x767060bafaf9    4981c618000000          add r14, 0x18
 .. 01 ( n | fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bafb00    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bafb08    48c7c700000000          mov rdi, 0x0
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bafb0f    49c7471001000000        mov qword [r15+0x10], 0x1
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =   ..
0x767060bafb17    49837ff800              cmp qword [r15-0x8], 0x0
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    ..
0x767060bafb1c    0f8e38000000            jle 0x767060bafb5a            < Root.fib01+105 >
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb22    498b4f10                mov rcx, [r15+0x10]
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb26    488bf9                  mov rdi, rcx
0x767060bafb29    498d4710                lea rax, [r15+0x10]
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb2d    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb31    488908                  mov [rax], rcx
0x767060bafb34    498d4708                lea rax, [r15+0x8]
0x767060bafb38    4983c608                add r14, 0x8
0x767060bafb3c    498906                  mov [r14], rax
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb3f    498b4f10                mov rcx, [r15+0x10]
0x767060bafb43    4803f9                  add rdi, rcx
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb46    488bc8                  mov rcx, rax
0x767060bafb49    498b06                  mov rax, [r14]
0x767060bafb4c    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb50    488938                  mov [rax], rdi
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bafb53    49836ff801              sub qword [r15-0x8], 0x1
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for       ..
0x767060bafb58    ebbd                    jmp 0x767060bafb17            < Root.fib01+38 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb5a    498b4708                mov rax, [r15+0x8]
0x767060bafb5e    4d8d77f8                lea r14, [r15-0x8]
0x767060bafb62    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bafb66    498906                  mov [r14], rax
 .. + =      }     for        return fn @ ;  ..
0x767060bafb69    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 121
Word : 0x0000767060e3c4b7 :: Compiled at : 0x0000767060bafaf1
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 404.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( n | fn, REG fn1, REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 406.2 :: we are now at : namespaces/test/bigNum.csl : 417.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafb6f -- code size = 106 bytes
TypeSignature :
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafb6f : disassembly at namespaces/test/bigNum.csl : 417.10 :
0x767060bafb6f    4d897e08                mov [r14+0x8], r15
0x767060bafb73    4d8d7e08                lea r15, [r14+0x8]
0x767060bafb77    4981c610000000          add r14, 0x10
 ..  | fn, REG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bafb7e    49c7470800000000        mov qword [r15+0x8], 0x0
 .. EG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bafb86    48c7c700000000          mov rdi, 0x0
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bafb8d    be0100000049837ff8      mov rsi, 0xf87f834900000001
0x767060bafb96    000f                    add [r15], cl
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = ..
0x767060bafb98    8e2c00                  mov gs, [r8+rax]
0x767060bafb9b    0000                    add [rax], al
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafb9d    488bfe                  mov rdi, rsi
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafba0    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafba4    488bf1                  mov rsi, rcx
0x767060bafba7    498d4708                lea rax, [r15+0x8]
0x767060bafbab    4983c608                add r14, 0x8
0x767060bafbaf    498906                  mov [r14], rax
0x767060bafbb2    4803fe                  add rdi, rsi
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafbb5    488bc8                  mov rcx, rax
0x767060bafbb8    498b06                  mov rax, [r14]
0x767060bafbbb    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafbbf    488938                  mov [rax], rdi
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bafbc2    49836ff801              sub qword [r15-0x8], 0x1
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for       ..
0x767060bafbc7    ebc9                    jmp 0x767060bafb92            < Root.fib01+35 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafbc9    498b4708                mov rax, [r15+0x8]
0x767060bafbcd    4d8d77f8                lea r14, [r15-0x8]
0x767060bafbd1    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bafbd5    498906                  mov [r14], rax
 .. + =      }     for        return fn @ ;  ..
0x767060bafbd8    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 106
Word : 0x0000767060e412c7 :: Compiled at : 0x0000767060bafb6f
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 417.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( n | REG fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 420.2 :: we are now at : namespaces/test/bigNum.csl : 431.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafbde -- code size = 76 bytes
TypeSignature :
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafbde : disassembly at namespaces/test/bigNum.csl : 431.10 :
0x767060bafbde    4d897e08                mov [r14+0x8], r15
0x767060bafbe2    4d8d7e08                lea r15, [r14+0x8]
0x767060bafbe6    4981c608000000          add r14, 0x8
 ..  REG fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bafbed    48c7c700000000          mov rdi, 0x0
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bafbf4    48c7c600000000          mov rsi, 0x0
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bafbfb    ba01000000              mov edx, 0x1
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =   ..
0x767060bafc00    49837ff800              cmp qword [r15-0x8], 0x0
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    ..
0x767060bafc05    0f8e13000000            jle 0x767060bafc1e            < Root.fib01+64 >
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc0b    488bf2                  mov rsi, rdx
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc0e    488bd7                  mov rdx, rdi
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc11    4803f2                  add rsi, rdx
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc14    488bfe                  mov rdi, rsi
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bafc17    49836ff801              sub qword [r15-0x8], 0x1
0x767060bafc1c    ebe2                    jmp 0x767060bafc00            < Root.fib01+34 >
0x767060bafc1e    4d8d77f8                lea r14, [r15-0x8]
0x767060bafc22    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bafc26    49893e                  mov [r14], rdi
 .. + =      }     for        return fn @ ;  ..
0x767060bafc29    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 76
Word : 0x0000767060e460d7 :: Compiled at : 0x0000767060bafbde
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 431.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 434.2 :: we are now at : namespaces/test/bigNum.csl : 445.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafc2f -- code size = 117 bytes
TypeSignature :
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafc2f : disassembly at namespaces/test/bigNum.csl : 445.10 :
0x767060bafc2f    4d897e08                mov [r14+0x8], r15
0x767060bafc33    4d8d7e08                lea r15, [r14+0x8]
0x767060bafc37    4981c618000000          add r14, 0x18
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {             ..
0x767060bafc3e    498b7ff8                mov rdi, [r15-0x8]
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bafc42    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bafc4a    49c7471000000000        mov qword [r15+0x10], 0x0
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bafc52    be01000000              mov esi, 0x1
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  ..
0x767060bafc57    4883ff00                cmp rdi, 0x0
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    ..
0x767060bafc5b    0f8e33000000            jle 0x767060bafc94            < Root.fib01+101 >
0x767060bafc61    498d4710                lea rax, [r15+0x10]
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc65    488930                  mov [rax], rsi
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc68    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc6c    488bf1                  mov rsi, rcx
0x767060bafc6f    498d4708                lea rax, [r15+0x8]
 .. 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  ..
0x767060bafc73    4983c608                add r14, 0x8
0x767060bafc77    498906                  mov [r14], rax
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc7a    498b4710                mov rax, [r15+0x10]
0x767060bafc7e    4803c6                  add rax, rsi
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc81    488bc8                  mov rcx, rax
0x767060bafc84    498b06                  mov rax, [r14]
0x767060bafc87    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc8b    488908                  mov [rax], rcx
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bafc8e    4883ef01                sub rdi, 0x1
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for       ..
0x767060bafc92    ebc3                    jmp 0x767060bafc57            < Root.fib01+40 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafc94    498b4708                mov rax, [r15+0x8]
0x767060bafc98    4d8d77f8                lea r14, [r15-0x8]
0x767060bafc9c    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bafca0    498906                  mov [r14], rax
 .. + =      }     for        return fn @ ;  ..
0x767060bafca3    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 117
Word : 0x0000767060e4aee7 :: Compiled at : 0x0000767060bafc2f
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 445.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( REG n | fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 447.2 :: we are now at : namespaces/test/bigNum.csl : 458.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafca9 -- code size = 108 bytes
TypeSignature :
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafca9 : disassembly at namespaces/test/bigNum.csl : 458.10 :
0x767060bafca9    4d897e08                mov [r14+0x8], r15
0x767060bafcad    4d8d7e08                lea r15, [r14+0x8]
0x767060bafcb1    4981c610000000          add r14, 0x10
 ..                               : fib01 ( REG n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {         ..
0x767060bafcb8    498b7ff8                mov rdi, [r15-0x8]
 ..  n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bafcbc    49c7470800000000        mov qword [r15+0x8], 0x0
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bafcc4    48c7c600000000          mov rsi, 0x0
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bafccb    ba010000004883ff00      mov rdx, 0xff834800000001
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    ..
0x767060bafcd4    0f8e2b000000            jle 0x767060bafd05            < Root.fib01+92 >
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafcda    488bf2                  mov rsi, rdx
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafcdd    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafce1    488bd1                  mov rdx, rcx
0x767060bafce4    498d4708                lea rax, [r15+0x8]
0x767060bafce8    4983c608                add r14, 0x8
 .. 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  ..
0x767060bafcec    498906                  mov [r14], rax
0x767060bafcef    4803f2                  add rsi, rdx
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafcf2    488bc8                  mov rcx, rax
0x767060bafcf5    498b06                  mov rax, [r14]
 .. = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    ..
0x767060bafcf8    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafcfc    488930                  mov [rax], rsi
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bafcff    4883ef01                sub rdi, 0x1
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for       ..
0x767060bafd03    ebcb                    jmp 0x767060bafcd0            < Root.fib01+39 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd05    498b4708                mov rax, [r15+0x8]
0x767060bafd09    4d8d77f8                lea r14, [r15-0x8]
0x767060bafd0d    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bafd11    498906                  mov [r14], rax
 .. + =      }     for        return fn @ ;  ..
0x767060bafd14    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 108
Word : 0x0000767060e4fcf7 :: Compiled at : 0x0000767060bafca9
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 458.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :>
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 460.2 :: we are now at : namespaces/test/bigNum.csl : 471.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafd1a -- code size = 122 bytes
TypeSignature :
 -----------------------------
Word :: Root.fib01 : definition = 0x0000767060bafd1a : disassembly at namespaces/test/bigNum.csl : 471.10 :
0x767060bafd1a    4d897e08                mov [r14+0x8], r15
0x767060bafd1e    4d8d7e08                lea r15, [r14+0x8]
0x767060bafd22    4981c618000000          add r14, 0x18
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {             ..
0x767060bafd29    498b7ff8                mov rdi, [r15-0x8]
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bafd2d    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bafd35    49c7471000000000        mov qword [r15+0x10], 0x0
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bafd3d    be01000000              mov esi, 0x1
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  ..
0x767060bafd42    4883ff00                cmp rdi, 0x0
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    ..
0x767060bafd46    0f8e33000000            jle 0x767060bafd7f            < Root.fib01+101 >
0x767060bafd4c    498d4710                lea rax, [r15+0x10]
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd50    488930                  mov [rax], rsi
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd53    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd57    488bf1                  mov rsi, rcx
0x767060bafd5a    498d4708                lea rax, [r15+0x8]
 .. 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  ..
0x767060bafd5e    4983c608                add r14, 0x8
0x767060bafd62    498906                  mov [r14], rax
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd65    498b4710                mov rax, [r15+0x10]
0x767060bafd69    4803c6                  add rax, rsi
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd6c    488bc8                  mov rcx, rax
0x767060bafd6f    498b06                  mov rax, [r14]
0x767060bafd72    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd76    488908                  mov [rax], rcx
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bafd79    4883ef01                sub rdi, 0x1
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for       ..
0x767060bafd7d    ebc3                    jmp 0x767060bafd42            < Root.fib01+40 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bafd7f    498b4708                mov rax, [r15+0x8]
0x767060bafd83    e900000000              jmp 0x767060bafd88            < Root.fib01+110 >
0x767060bafd88    4d8d77f8                lea r14, [r15-0x8]
0x767060bafd8c    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bafd90    498906                  mov [r14], rax
 .. + =      }     for        return fn @ ;  ..
0x767060bafd93    c3                      ret
Word_Disassemble : word - 'fib01' :: codeSize = 122
Word : 0x0000767060e54b07 :: Compiled at : 0x0000767060bafd1a
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 471.10 <::
 6765
including namespaces/test/classTest.csl at namespaces/test/initTest.csl : 86.41 ...

classTest.csl
Using Namespaces :> C Root Class Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

Pointer.size =  8

Integer size =  8

Using Namespaces :> Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

_ClassTypedef : at namespaces/test/classTest.csl : 34.18 : token = class : cloneFlag = 0
Using Namespaces :> Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

Buffer size =  256

_ClassTypedef : at namespaces/test/classTest.csl : 40.3 : token = class : cloneFlag = 0
Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

DLLNode size =  16

_ClassTypedef : at namespaces/test/classTest.csl : 47.3 : token = :{ : cloneFlag = 0
DLLNode size =  18

Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

_ClassTypedef : at namespaces/test/classTest.csl : 55.3 : token = :{ : cloneFlag = 0
DLLNode size =  16

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 65.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 16
Dump at : namespaces/test/classTest.csl : 66.51 :
Dump : Address = 0x00007670609a7668 : Number = 16 :: (little endian dump)
0x00007670609a7668 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........

DataStack at : namespaces/test/classTest.csl : 67.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

_ClassTypedef : at namespaces/test/classTest.csl : 71.3 : token = class : cloneFlag = 0
 =============================
DLList.init <:> csl compiled word
SourceCode for DLList.init :>
: init ( this ) this.HeadNode.AfterReference this.TailNode.BeforeReference = this.TailNode.BeforeReference this.HeadNode.AfterReference = this.HeadNode.BeforeReference 1 = this.TailNode.AfterReference 2 = ;
Source code file location of init : "namespaces/test/classTest.csl" : 77.2 :: we are now at : namespaces/test/classTest.csl : 83.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bafdae -- code size = 109 bytes
TypeSignature :
 -----------------------------
Word :: DLList.init : definition = 0x0000767060bafdae : disassembly at namespaces/test/classTest.csl : 83.18 :
0x767060bafdae    4d897e08                mov [r14+0x8], r15
0x767060bafdb2    4d8d7e08                lea r15, [r14+0x8]
0x767060bafdb6    4981c608000000          add r14, 0x8
 ..                   : init ( this )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this. ..
0x767060bafdbd    498b47f8                mov rax, [r15-0x8]
0x767060bafdc1    4881c000000000          add rax, 0x0
 .. is )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     ..
0x767060bafdc8    498b4ff8                mov rcx, [r15-0x8]
0x767060bafdcc    4881c118000000          add rcx, 0x18
 .. ference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference ..
0x767060bafdd3    488908                  mov [rax], rcx
 .. e this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =   ..
0x767060bafdd6    498b47f8                mov rax, [r15-0x8]
 .. e.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNo ..
0x767060bafdda    4881c018000000          add rax, 0x18
 .. e =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReferenc ..
0x767060bafde1    498b4ff8                mov rcx, [r15-0x8]
 .. eference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafde5    488908                  mov [rax], rcx
 .. ce this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafde8    498b47f8                mov rax, [r15-0x8]
 .. de.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafdec    4881c008000000          add rax, 0x8
0x767060bafdf3    b901000000              mov ecx, 0x1
 .. =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafdf8    488908                  mov [rax], rcx
 .. this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafdfb    498b47f8                mov rax, [r15-0x8]
 .. HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafdff    4881c010000000          add rax, 0x10
0x767060bafe06    b902000000              mov ecx, 0x2
 .. =     this.TailNode.AfterReference  2 = ;  ..
0x767060bafe0b    488908                  mov [rax], rcx
0x767060bafe0e    4d8d77f8                lea r14, [r15-0x8]
0x767060bafe12    4d8b7e08                mov r15, [r14+0x8]
0x767060bafe16    4983ee08                sub r14, 0x8
 ..     this.TailNode.AfterReference  2 = ;  ..
0x767060bafe1a    c3                      ret
Word_Disassemble : word - 'init' :: codeSize = 109
Word : 0x0000767060e5c837 :: Compiled at : 0x0000767060bafdae
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 83.18 <::

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 32
Dump at : namespaces/test/classTest.csl : 86.36 :
Dump : Address = 0x00007670609a7678 : Number = 32 :: (little endian dump)
0x00007670609a7678 :  90 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a7688 :  02 00 00 00 00 00 00 00  78 76 9a 60 70 76 00 00  ........ xv.`pv..
 class init test :   : ok

 15 15 15 15 15
yada yada yada yada neti
 below line should show several 15's
 15 15 15 15 15

 above line should show several 15's
Using Namespaces :> DLList DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

_ClassTypedef : at namespaces/test/classTest.csl : 97.4 : token =  : cloneFlag = 1
 =============================
DLListClone.init <:> csl compiled word
SourceCode for DLListClone.init :>
: init ( this ) this.Category 12 = this.Three 3 = this.Prototype this.Three @ = this.Prototype @ dup p 3 "init_assert1" assert this.Prototype @ p this.Sum 0 = this.Four 4 = this.Twelve 12 = this.Accum this.Sum @ = this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert this.Accum this.Three @ this.Four @ * this.Three @ / = this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * this.Category @ - = this.Sum @ dup hex p 24 "init_assert5" assert decimal nl this.Category @ dup p 12 "init_assert7" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert this.Sum this.Category @ this.Prototype @ - dup p = this.Sum this.Category @ this.Prototype @ && dup p = this.Sum this.Category @ this.Prototype @ & dup p = this.Accum this.Prototype @ = this.Sum this.Category @ this.Prototype @ | dup p = this.Sum this.Category @ this.Prototype @ || dup p = this.Sum this.Category @ this.Prototype @ / dup p = this.Category @ dup p 12 _assert this.Sum @ p this.Prototype @ p "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps hex "\nthis = " ps this p "\nthis @ = " ps this @ p "\nthis.size = " ps this.size @ p nl this dup p this.size @ dump this.Accum this.Prototype @ dup p = this this.size @ dump decimal this.Accum @ dup 3 "\nAccum should be 3 : assert9 =" assert p this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;
Source code file location of init : "namespaces/test/classTest.csl" : 107.2 :: we are now at : namespaces/test/classTest.csl : 162.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60baffbe -- code size = 2648 bytes
TypeSignature :
 -----------------------------
Word :: DLListClone.init : definition = 0x0000767060baffbe : disassembly at namespaces/test/classTest.csl : 162.18 :
0x767060baffbe    4d897e08                mov [r14+0x8], r15
0x767060baffc2    4d8d7e08                lea r15, [r14+0x8]
0x767060baffc6    4981c608000000          add r14, 0x8
 ..                   : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 ..
0x767060baffcd    498b47f8                mov rax, [r15-0x8]
 ..              : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "ini ..
0x767060baffd1    4881c020000000          add rax, 0x20
0x767060baffd8    b90c000000              mov ecx, 0xc
 ..  : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" a ..
0x767060baffdd    488908                  mov [rax], rcx
 .. t ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert  ..
0x767060baffe0    498b47f8                mov rax, [r15-0x8]
 .. his )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert       ..
0x767060baffe4    4881c040000000          add rax, 0x40
0x767060baffeb    b903000000              mov ecx, 0x3
 ..   this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Pro ..
0x767060bafff0    488908                  mov [rax], rcx
 .. Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype  ..
0x767060bafff3    498b47f8                mov rax, [r15-0x8]
 .. ory 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p   ..
0x767060bafff7    4881c028000000          add rax, 0x28
 ..    this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.S ..
0x767060bafffe    498b4ff8                mov rcx, [r15-0x8]
0x767060bb0002    4881c140000000          add rcx, 0x40
 .. is.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0  ..
0x767060bb0009    488b09                  mov rcx, [rcx]
 ..  3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     th ..
0x767060bb000c    488908                  mov [rax], rcx
 ..      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Fo ..
0x767060bb000f    498b47f8                mov rax, [r15-0x8]
 .. this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4  ..
0x767060bb0013    4881c028000000          add rax, 0x28
0x767060bb001a    488b00                  mov rax, [rax]
0x767060bb001d    4983c610                add r14, 0x10
0x767060bb0021    498906                  mov [r14], rax
 .. pe this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this. ..
0x767060bb0024    498946f8                mov [r14-0x8], rax
 .. his.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twel ..
0x767060bb0028    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0032    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. s.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve ..
0x767060bb0035    b803000000              mov eax, 0x3
0x767060bb003a    4983c608                add r14, 0x8
0x767060bb003e    498906                  mov [r14], rax
 .. Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 1 ..
0x767060bb0041    48b874358b6070760000    mov rax, 0x7670608b3574       < string : 'init_assert1' >
0x767060bb004b    4983c608                add r14, 0x8
0x767060bb004f    498906                  mov [r14], rax
0x767060bb0052    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb005c    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..  @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum ..
0x767060bb005f    498b47f8                mov rax, [r15-0x8]
 .. p p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =  ..
0x767060bb0063    4881c028000000          add rax, 0x28
0x767060bb006a    488b00                  mov rax, [rax]
0x767060bb006d    4983c608                add r14, 0x8
0x767060bb0071    498906                  mov [r14], rax
 .. assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.S ..
0x767060bb0074    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb007e    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. " assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this ..
0x767060bb0081    498b47f8                mov rax, [r15-0x8]
 .. ert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Cate ..
0x767060bb0085    4881c030000000          add rax, 0x30
0x767060bb008c    48c7c100000000          mov rcx, 0x0
 ..    this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ ..
0x767060bb0093    488908                  mov [rax], rcx
 .. s.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + t ..
0x767060bb0096    498b47f8                mov rax, [r15-0x8]
 .. totype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.P ..
0x767060bb009a    4881c048000000          add rax, 0x48
0x767060bb00a1    b904000000              mov ecx, 0x4
 .. @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototyp ..
0x767060bb00a6    488908                  mov [rax], rcx
 ..   this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = ..
0x767060bb00a9    498b47f8                mov rax, [r15-0x8]
 .. s.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this ..
0x767060bb00ad    4881c038000000          add rax, 0x38
0x767060bb00b4    b90c000000              mov ecx, 0xc
 ..     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 " ..
0x767060bb00b9    488908                  mov [rax], rcx
 .. is.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_a ..
0x767060bb00bc    498b47f8                mov rax, [r15-0x8]
 .. ur 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert ..
0x767060bb00c0    4881c050000000          add rax, 0x50
 ..       this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {|  ..
0x767060bb00c7    498b4ff8                mov rcx, [r15-0x8]
0x767060bb00cb    4881c130000000          add rcx, 0x30
 ..  this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locat ..
0x767060bb00d2    488b09                  mov rcx, [rcx]
 .. Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPus ..
0x767060bb00d5    488908                  mov [rax], rcx
 .. 2 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} loc ..
0x767060bb00d8    498b47f8                mov rax, [r15-0x8]
 ..    this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} location ..
0x767060bb00dc    4881c030000000          add rax, 0x30
0x767060bb00e3    4983c608                add r14, 0x8
0x767060bb00e7    498906                  mov [r14], rax
 .. his.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrin ..
0x767060bb00ea    498b47f8                mov rax, [r15-0x8]
 .. ccum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint ass ..
0x767060bb00ee    4881c020000000          add rax, 0x20
0x767060bb00f5    488b00                  mov rax, [rax]
 .. um @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     thi ..
0x767060bb00f8    b903000000              mov ecx, 0x3
 ..  @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this. ..
0x767060bb00fd    4803c1                  add rax, rcx
 ..  =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Ac ..
0x767060bb0100    498b4ff8                mov rcx, [r15-0x8]
0x767060bb0104    4881c128000000          add rcx, 0x28
 ..     this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum t ..
0x767060bb010b    488b09                  mov rcx, [rcx]
0x767060bb010e    4823c1                  and rax, rcx
 ..  this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @  ..
0x767060bb0111    488bc8                  mov rcx, rax
0x767060bb0114    498b06                  mov rax, [r14]
0x767060bb0117    4983ee08                sub r14, 0x8
 .. his.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ th ..
0x767060bb011b    488908                  mov [rax], rcx
 .. s.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this ..
0x767060bb011e    498b47f8                mov rax, [r15-0x8]
 .. egory @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four ..
0x767060bb0122    4881c030000000          add rax, 0x30
0x767060bb0129    488b00                  mov rax, [rax]
0x767060bb012c    4983c608                add r14, 0x8
0x767060bb0130    498906                  mov [r14], rax
 .. @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * t ..
0x767060bb0133    b803000000              mov eax, 0x3
0x767060bb0138    4983c608                add r14, 0x8
0x767060bb013c    498906                  mov [r14], rax
 .. 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * thi ..
0x767060bb013f    48b8ac358b6070760000    mov rax, 0x7670608b35ac       < string : 'init_assert2' >
0x767060bb0149    4983c608                add r14, 0x8
0x767060bb014d    498906                  mov [r14], rax
 .. ype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =   ..
0x767060bb0150    48b898769a6070760000    mov rax, 0x7670609a7698
0x767060bb015a    4983c608                add r14, 0x8
0x767060bb015e    498906                  mov [r14], rax
 .. @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4  ..
0x767060bb0161    49ba700f13ca1c640000    mov r10, 0x641cca130f70
0x767060bb016b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb0175    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb0178    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb0182    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. ationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : th ..
0x767060bb0185    498b47f8                mov rax, [r15-0x8]
 .. Push |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Ac ..
0x767060bb0189    4881c050000000          add rax, 0x50
0x767060bb0190    4983c608                add r14, 0x8
0x767060bb0194    498906                  mov [r14], rax
 .. } locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum =  ..
0x767060bb0197    498b47f8                mov rax, [r15-0x8]
 .. ationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps ..
0x767060bb019b    4881c040000000          add rax, 0x40
0x767060bb01a2    488b00                  mov rax, [rax]
 .. nt assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_a ..
0x767060bb01a5    498b4ff8                mov rcx, [r15-0x8]
0x767060bb01a9    4881c148000000          add rcx, 0x48
 .. sert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert ..
0x767060bb01b0    488b09                  mov rcx, [rcx]
 ..   this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" asse ..
0x767060bb01b3    480fafc1                imul rax, rcx
 .. this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert ..
0x767060bb01b7    498b4ff8                mov rcx, [r15-0x8]
0x767060bb01bb    4881c140000000          add rcx, 0x40
 .. Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      ..
0x767060bb01c2    488b09                  mov rcx, [rcx]
0x767060bb01c5    48c7c200000000          mov rdx, 0x0
0x767060bb01cc    48f7f9                  idiv rcx
 .. is.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Pr ..
0x767060bb01cf    488bc8                  mov rcx, rax
0x767060bb01d2    498b06                  mov rax, [r14]
0x767060bb01d5    4983ee08                sub r14, 0x8
 .. .Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prot ..
0x767060bb01d9    488908                  mov [rax], rcx
 .. @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ ..
0x767060bb01dc    498b47f8                mov rax, [r15-0x8]
 .. s.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    ..
0x767060bb01e0    4881c050000000          add rax, 0x50
0x767060bb01e7    488b00                  mov rax, [rax]
0x767060bb01ea    4983c608                add r14, 0x8
0x767060bb01ee    498906                  mov [r14], rax
 ..  * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Su ..
0x767060bb01f1    b804000000              mov eax, 0x4
0x767060bb01f6    4983c608                add r14, 0x8
0x767060bb01fa    498906                  mov [r14], rax
 ..  this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum  ..
0x767060bb01fd    48b8f2358b6070760000    mov rax, 0x7670608b35f2
0x767060bb0207    4983c608                add r14, 0x8
0x767060bb020b    498906                  mov [r14], rax
 .. \n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this ..
0x767060bb020e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb0218    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Ca ..
0x767060bb021b    48b84b368b6070760000    mov rax, 0x7670608b364b       < string : 'init_assert3' >
0x767060bb0225    4983c608                add r14, 0x8
0x767060bb0229    498906                  mov [r14], rax
0x767060bb022c    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb0236    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. um = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @  ..
0x767060bb0239    498b47f8                mov rax, [r15-0x8]
 .. :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup h ..
0x767060bb023d    4881c028000000          add rax, 0x28
0x767060bb0244    488b00                  mov rax, [rax]
0x767060bb0247    4983c608                add r14, 0x8
0x767060bb024b    498906                  mov [r14], rax
 .. assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "in ..
0x767060bb024e    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0258    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. t3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_as ..
0x767060bb025b    498b47f8                mov rax, [r15-0x8]
 .. ssert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5 ..
0x767060bb025f    4881c030000000          add rax, 0x30
0x767060bb0266    4983c608                add r14, 0x8
0x767060bb026a    498906                  mov [r14], rax
 .. t      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" as ..
0x767060bb026d    498b47f8                mov rax, [r15-0x8]
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert  ..
0x767060bb0271    4881c020000000          add rax, 0x20
0x767060bb0278    488b00                  mov rax, [rax]
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl  ..
0x767060bb027b    498b4ff8                mov rcx, [r15-0x8]
0x767060bb027f    4881c128000000          add rcx, 0x28
 ..  @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     t ..
0x767060bb0286    488b09                  mov rcx, [rcx]
 .. .Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category ..
0x767060bb0289    480fafc1                imul rax, rcx
 .. um this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ ..
0x767060bb028d    498b4ff8                mov rcx, [r15-0x8]
0x767060bb0291    4881c120000000          add rcx, 0x20
 .. is.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup  ..
0x767060bb0298    488b09                  mov rcx, [rcx]
0x767060bb029b    482bc1                  sub rax, rcx
 ..  @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init ..
0x767060bb029e    488bc8                  mov rcx, rax
0x767060bb02a1    498b06                  mov rax, [r14]
0x767060bb02a4    4983ee08                sub r14, 0x8
 ..  this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_a ..
0x767060bb02a8    488908                  mov [rax], rcx
 .. .Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert ..
0x767060bb02ab    498b47f8                mov rax, [r15-0x8]
 .. otype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" as ..
0x767060bb02af    4881c030000000          add rax, 0x30
0x767060bb02b6    488b00                  mov rax, [rax]
0x767060bb02b9    4983c610                add r14, 0x10
0x767060bb02bd    498906                  mov [r14], rax
 .. @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert   ..
0x767060bb02c0    498946f8                mov [r14-0x8], rax
 .. this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    th ..
0x767060bb02c4    49ba600213ca1c640000    mov r10, 0x641cca130260
0x767060bb02ce    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb02d8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. .Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.P ..
0x767060bb02db    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb02e5    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. ategory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Pro ..
0x767060bb02e8    b818000000              mov eax, 0x18
0x767060bb02ed    4983c608                add r14, 0x8
0x767060bb02f1    498906                  mov [r14], rax
 .. ory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototy ..
0x767060bb02f4    48b879368b6070760000    mov rax, 0x7670608b3679       < string : 'init_assert5' >
0x767060bb02fe    4983c608                add r14, 0x8
0x767060bb0302    498906                  mov [r14], rax
0x767060bb0305    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb030f    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum thi ..
0x767060bb0312    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bb031c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb0326    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. x p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Catego ..
0x767060bb0329    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb0333    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb033d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ th ..
0x767060bb0340    498b47f8                mov rax, [r15-0x8]
 .. t_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Pr ..
0x767060bb0344    4881c020000000          add rax, 0x20
0x767060bb034b    488b00                  mov rax, [rax]
0x767060bb034e    4983c610                add r14, 0x10
0x767060bb0352    498906                  mov [r14], rax
 .. assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * ..
0x767060bb0355    498946f8                mov [r14-0x8], rax
 .. rt decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = t ..
0x767060bb0359    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0363    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = thi ..
0x767060bb0366    b80c000000              mov eax, 0xc
0x767060bb036b    4983c608                add r14, 0x8
0x767060bb036f    498906                  mov [r14], rax
 .. imal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Su ..
0x767060bb0372    48b8a7368b6070760000    mov rax, 0x7670608b36a7       < string : 'init_assert7' >
0x767060bb037c    4983c608                add r14, 0x8
0x767060bb0380    498906                  mov [r14], rax
0x767060bb0383    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb038d    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..  @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada"  ..
0x767060bb0390    498b47f8                mov rax, [r15-0x8]
 .. p p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 ..
0x767060bb0394    4881c028000000          add rax, 0x28
0x767060bb039b    488b00                  mov rax, [rax]
0x767060bb039e    4983c608                add r14, 0x8
0x767060bb03a2    498906                  mov [r14], rax
 .. t_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_asser ..
0x767060bb03a5    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb03af    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. ert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" a ..
0x767060bb03b2    498b47f8                mov rax, [r15-0x8]
 ..  assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert ..
0x767060bb03b6    4881c030000000          add rax, 0x30
0x767060bb03bd    4983c608                add r14, 0x8
0x767060bb03c1    498906                  mov [r14], rax
 .. ert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert     ..
0x767060bb03c4    498b47f8                mov rax, [r15-0x8]
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this. ..
0x767060bb03c8    4881c020000000          add rax, 0x20
0x767060bb03cf    488b00                  mov rax, [rax]
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Ca ..
0x767060bb03d2    498b4ff8                mov rcx, [r15-0x8]
0x767060bb03d6    4881c128000000          add rcx, 0x28
 ..  @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Categor ..
0x767060bb03dd    488b09                  mov rcx, [rcx]
0x767060bb03e0    480fafc1                imul rax, rcx
 .. .Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Pro ..
0x767060bb03e4    488bc8                  mov rcx, rax
0x767060bb03e7    498b06                  mov rax, [r14]
0x767060bb03ea    4983ee08                sub r14, 0x8
 .. um this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Proto ..
0x767060bb03ee    488908                  mov [rax], rcx
 ..  this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototy ..
0x767060bb03f1    498b47f8                mov rax, [r15-0x8]
 .. .Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @  ..
0x767060bb03f5    4881c030000000          add rax, 0x30
0x767060bb03fc    488b00                  mov rax, [rax]
0x767060bb03ff    4983c610                add r14, 0x10
0x767060bb0403    498906                  mov [r14], rax
 .. ory @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup  ..
0x767060bb0406    498946f8                mov [r14-0x8], rax
 .. @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =  ..
0x767060bb040a    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0414    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    ..
0x767060bb0417    48b8d2368b6070760000    mov rax, 0x7670608b36d2       < string : 'testing yada' >
0x767060bb0421    4983c608                add r14, 0x8
0x767060bb0425    498906                  mov [r14], rax
 .. @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this. ..
0x767060bb0428    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb0432    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Cat ..
0x767060bb0435    b824000000              mov eax, 0x24
0x767060bb043a    4983c608                add r14, 0x8
0x767060bb043e    498906                  mov [r14], rax
 .. this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Catego ..
0x767060bb0441    48b800378b6070760000    mov rax, 0x7670608b3700       < string : 'init_assert8' >
0x767060bb044b    4983c608                add r14, 0x8
0x767060bb044f    498906                  mov [r14], rax
0x767060bb0452    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb045c    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..  yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ &&  ..
0x767060bb045f    498b47f8                mov rax, [r15-0x8]
 .. " ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p ..
0x767060bb0463    4881c030000000          add rax, 0x30
0x767060bb046a    4983c608                add r14, 0x8
0x767060bb046e    498906                  mov [r14], rax
 ..  36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =   ..
0x767060bb0471    498b47f8                mov rax, [r15-0x8]
 .. init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    thi ..
0x767060bb0475    4881c020000000          add rax, 0x20
0x767060bb047c    488b00                  mov rax, [rax]
 .. 8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this. ..
0x767060bb047f    498b4ff8                mov rcx, [r15-0x8]
0x767060bb0483    4881c128000000          add rcx, 0x28
 .. sert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Categ ..
0x767060bb048a    488b09                  mov rcx, [rcx]
 .. .Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.P ..
0x767060bb048d    482bc1                  sub rax, rcx
0x767060bb0490    4983c610                add r14, 0x10
0x767060bb0494    498906                  mov [r14], rax
 .. um this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Pro ..
0x767060bb0497    498946f8                mov [r14-0x8], rax
 .. his.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototy ..
0x767060bb049b    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb04a5    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb04a8    498b0e                  mov rcx, [r14]
0x767060bb04ab    498b46f8                mov rax, [r14-0x8]
0x767060bb04af    4983ee10                sub r14, 0x10
 .. s.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype ..
0x767060bb04b3    488908                  mov [rax], rcx
 .. egory @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ &  ..
0x767060bb04b6    498b47f8                mov rax, [r15-0x8]
 ..  @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p ..
0x767060bb04ba    4881c030000000          add rax, 0x30
0x767060bb04c1    4983c608                add r14, 0x8
0x767060bb04c5    498906                  mov [r14], rax
 .. his.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =   ..
0x767060bb04c8    498b47f8                mov rax, [r15-0x8]
 .. rototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    thi ..
0x767060bb04cc    4881c020000000          add rax, 0x20
0x767060bb04d3    488b00                  mov rax, [rax]
0x767060bb04d6    4983c608                add r14, 0x8
0x767060bb04da    498906                  mov [r14], rax
 .. - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum thi ..
0x767060bb04dd    498b47f8                mov rax, [r15-0x8]
 ..  p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Pro ..
0x767060bb04e1    4881c028000000          add rax, 0x28
0x767060bb04e8    488b00                  mov rax, [rax]
0x767060bb04eb    4983c608                add r14, 0x8
0x767060bb04ef    498906                  mov [r14], rax
 .. .Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =   ..
0x767060bb04f2    498bc6                  mov rax, r14
0x767060bb04f5    4983ee08                sub r14, 0x8
0x767060bb04f9    48833800                cmp qword [rax], 0x0
0x767060bb04fd    7410                    jz 0x60bb050f                 < DLListClone.init+1361 >
0x767060bb04ff    488378f800              cmp qword [rax-0x8], 0x0
0x767060bb0504    7409                    jz 0x60bb050f                 < DLListClone.init+1361 >
0x767060bb0506    49c70601000000          mov qword [r14], 0x1
0x767060bb050d    eb07                    jmp 0x767060bb0516            < DLListClone.init+1368 >
0x767060bb050f    49c70600000000          mov qword [r14], 0x0
0x767060bb0516    0f8400000000            jz 0x767060bb051c             < DLListClone.init+1374 >
 .. m this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =      ..
0x767060bb051c    498b06                  mov rax, [r14]
0x767060bb051f    4983c608                add r14, 0x8
0x767060bb0523    498906                  mov [r14], rax
 .. is.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this ..
0x767060bb0526    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0530    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb0533    498b0e                  mov rcx, [r14]
0x767060bb0536    498b46f8                mov rax, [r14-0x8]
0x767060bb053a    4983ee10                sub r14, 0x10
 .. .Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.S ..
0x767060bb053e    488908                  mov [rax], rcx
 .. gory @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum th ..
0x767060bb0541    498b47f8                mov rax, [r15-0x8]
 .. @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Ca ..
0x767060bb0545    4881c030000000          add rax, 0x30
0x767060bb054c    4983c608                add r14, 0x8
0x767060bb0550    498906                  mov [r14], rax
 .. is.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Catego ..
0x767060bb0553    498b47f8                mov rax, [r15-0x8]
 .. ototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @  ..
0x767060bb0557    4881c020000000          add rax, 0x20
0x767060bb055e    488b00                  mov rax, [rax]
 .. & dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Protot ..
0x767060bb0561    498b4ff8                mov rcx, [r15-0x8]
0x767060bb0565    4881c128000000          add rcx, 0x28
 ..  p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ ..
0x767060bb056c    488b09                  mov rcx, [rcx]
 .. .Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =   ..
0x767060bb056f    4823c1                  and rax, rcx
0x767060bb0572    4983c610                add r14, 0x10
0x767060bb0576    498906                  mov [r14], rax
 .. um this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     ..
0x767060bb0579    498946f8                mov [r14-0x8], rax
 .. his.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     thi ..
0x767060bb057d    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0587    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb058a    498b0e                  mov rcx, [r14]
0x767060bb058d    498b46f8                mov rax, [r14-0x8]
0x767060bb0591    4983ee10                sub r14, 0x10
 .. s.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this. ..
0x767060bb0595    488908                  mov [rax], rcx
 .. egory @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum t ..
0x767060bb0598    498b47f8                mov rax, [r15-0x8]
 ..  @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.C ..
0x767060bb059c    4881c050000000          add rax, 0x50
 .. s.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Categor ..
0x767060bb05a3    498b4ff8                mov rcx, [r15-0x8]
0x767060bb05a7    4881c128000000          add rcx, 0x28
 .. totype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ t ..
0x767060bb05ae    488b09                  mov rcx, [rcx]
 .. up p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototyp ..
0x767060bb05b1    488908                  mov [rax], rcx
 ..     this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || ..
0x767060bb05b4    498b47f8                mov rax, [r15-0x8]
 .. his.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup  ..
0x767060bb05b8    4881c030000000          add rax, 0x30
0x767060bb05bf    4983c608                add r14, 0x8
0x767060bb05c3    498906                  mov [r14], rax
 .. Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =  ..
0x767060bb05c6    498b47f8                mov rax, [r15-0x8]
 ..  this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     t ..
0x767060bb05ca    4881c020000000          add rax, 0x20
0x767060bb05d1    488b00                  mov rax, [rax]
 .. type @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum thi ..
0x767060bb05d4    498b4ff8                mov rcx, [r15-0x8]
0x767060bb05d8    4881c128000000          add rcx, 0x28
 .. @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Cat ..
0x767060bb05df    488b09                  mov rcx, [rcx]
 .. .Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this ..
0x767060bb05e2    480bc1                  or rax, rcx
0x767060bb05e5    4983c610                add r14, 0x10
0x767060bb05e9    498906                  mov [r14], rax
 .. um this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.P ..
0x767060bb05ec    498946f8                mov [r14-0x8], rax
 .. his.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Proto ..
0x767060bb05f0    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb05fa    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb05fd    498b0e                  mov rcx, [r14]
0x767060bb0600    498b46f8                mov rax, [r14-0x8]
0x767060bb0604    4983ee10                sub r14, 0x10
 .. s.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototy ..
0x767060bb0608    488908                  mov [rax], rcx
 .. gory @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / ..
0x767060bb060b    498b47f8                mov rax, [r15-0x8]
 .. @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup  ..
0x767060bb060f    4881c030000000          add rax, 0x30
0x767060bb0616    4983c608                add r14, 0x8
0x767060bb061a    498906                  mov [r14], rax
 .. is.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =  ..
0x767060bb061d    498b47f8                mov rax, [r15-0x8]
 .. ototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     t ..
0x767060bb0621    4881c020000000          add rax, 0x20
0x767060bb0628    488b00                  mov rax, [rax]
 ..  dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Categor ..
0x767060bb062b    498b4ff8                mov rcx, [r15-0x8]
0x767060bb062f    4881c128000000          add rcx, 0x28
 .. p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ d ..
0x767060bb0636    488b09                  mov rcx, [rcx]
 .. .Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _ass ..
0x767060bb0639    480bc1                  or rax, rcx
0x767060bb063c    0f95c0                  setnz al
0x767060bb063f    480fb6c0                movzx rax, al
0x767060bb0643    4983c610                add r14, 0x10
0x767060bb0647    498906                  mov [r14], rax
 .. m this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert ..
0x767060bb064a    498946f8                mov [r14-0x8], rax
 .. is.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert     ..
0x767060bb064e    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0658    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb065b    498b0e                  mov rcx, [r14]
0x767060bb065e    498b46f8                mov rax, [r14-0x8]
0x767060bb0662    4983ee10                sub r14, 0x10
 .. .Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    th ..
0x767060bb0666    488908                  mov [rax], rcx
 .. ory @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum ..
0x767060bb0669    498b47f8                mov rax, [r15-0x8]
 ..  this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p  ..
0x767060bb066d    4881c030000000          add rax, 0x30
0x767060bb0674    4983c608                add r14, 0x8
0x767060bb0678    498906                  mov [r14], rax
 .. s.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    t ..
0x767060bb067b    498b47f8                mov rax, [r15-0x8]
 .. totype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.P ..
0x767060bb067f    4881c020000000          add rax, 0x20
0x767060bb0686    488b00                  mov rax, [rax]
 ..  dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @  ..
0x767060bb0689    498b4ff8                mov rcx, [r15-0x8]
0x767060bb068d    4881c128000000          add rcx, 0x28
 .. p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p     ..
0x767060bb0694    488b09                  mov rcx, [rcx]
 .. .Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36  ..
0x767060bb0697    48c7c200000000          mov rdx, 0x0
0x767060bb069e    48f7f9                  idiv rcx
0x767060bb06a1    4983c610                add r14, 0x10
0x767060bb06a5    498906                  mov [r14], rax
 .. um this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 te ..
0x767060bb06a8    498946f8                mov [r14-0x8], rax
 .. his.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testin ..
0x767060bb06ac    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb06b6    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb06b9    498b0e                  mov rcx, [r14]
0x767060bb06bc    498b46f8                mov rax, [r14-0x8]
0x767060bb06c0    4983ee10                sub r14, 0x10
 .. s.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing  ..
0x767060bb06c4    488908                  mov [rax], rcx
 .. gory @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 ..
0x767060bb06c7    498b47f8                mov rax, [r15-0x8]
 .. @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0  ..
0x767060bb06cb    4881c020000000          add rax, 0x20
0x767060bb06d2    488b00                  mov rax, [rax]
0x767060bb06d5    4983c610                add r14, 0x10
0x767060bb06d9    498906                  mov [r14], rax
 .. otype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 ..
0x767060bb06dc    498946f8                mov [r14-0x8], rax
 .. e @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : ..
0x767060bb06e0    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb06ea    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : o ..
0x767060bb06ed    b80c000000              mov eax, 0xc
0x767060bb06f2    4983c608                add r14, 0x8
0x767060bb06f6    498906                  mov [r14], rax
0x767060bb06f9    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb0703    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 ..   this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above sh ..
0x767060bb0706    498b47f8                mov rax, [r15-0x8]
 .. s.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should  ..
0x767060bb070a    4881c030000000          add rax, 0x30
0x767060bb0711    488b00                  mov rax, [rax]
0x767060bb0714    4983c608                add r14, 0x8
0x767060bb0718    498906                  mov [r14], rax
 .. gory @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (appro ..
0x767060bb071b    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0725    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximat ..
0x767060bb0728    498b47f8                mov rax, [r15-0x8]
 ..  p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately)  ..
0x767060bb072c    4881c028000000          add rax, 0x28
0x767060bb0733    488b00                  mov rax, [rax]
0x767060bb0736    4983c608                add r14, 0x8
0x767060bb073a    498906                  mov [r14], rax
 .. t    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps   ..
0x767060bb073d    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0747    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb074a    48b877378b6070760000    mov rax, 0x7670608b3777
0x767060bb0754    4983c608                add r14, 0x8
0x767060bb0758    498906                  mov [r14], rax
 .. ut above should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.siz ..
0x767060bb075b    49bbf6a7ba6070760000    mov r11, 0x767060baa7f6
0x767060bb0765    49ffd3                  call r11                      < System.ddps : 0x0000767060baa7f6 >
 ..  should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl ..
0x767060bb0768    49ba600213ca1c640000    mov r10, 0x641cca130260
0x767060bb0772    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb077c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb077f    48b830388b6070760000    mov rax, 0x7670608b3830
0x767060bb0789    4983c608                add r14, 0x8
0x767060bb078d    498906                  mov [r14], rax
 .. ly) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this ..
0x767060bb0790    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb079a    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.si ..
0x767060bb079d    498b47f8                mov rax, [r15-0x8]
0x767060bb07a1    4881c000000000          add rax, 0x0
0x767060bb07a8    4983c608                add r14, 0x8
0x767060bb07ac    498906                  mov [r14], rax
 .. " ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @  ..
0x767060bb07af    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb07b9    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb07bc    48b851388b6070760000    mov rax, 0x7670608b3851
0x767060bb07c6    4983c608                add r14, 0x8
0x767060bb07ca    498906                  mov [r14], rax
 .. nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum  ..
0x767060bb07cd    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb07d7    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. is = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum thi ..
0x767060bb07da    498b47f8                mov rax, [r15-0x8]
0x767060bb07de    488b00                  mov rax, [rax]
0x767060bb07e1    4983c608                add r14, 0x8
0x767060bb07e5    498906                  mov [r14], rax
 .. ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Proto ..
0x767060bb07e8    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb07f2    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb07f5    48b879388b6070760000    mov rax, 0x7670608b3879
0x767060bb07ff    4983c608                add r14, 0x8
0x767060bb0803    498906                  mov [r14], rax
 ..  = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this ..
0x767060bb0806    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb0810    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this th ..
0x767060bb0813    498b47f8                mov rax, [r15-0x8]
0x767060bb0817    4881c000000000          add rax, 0x0
0x767060bb081e    4983c608                add r14, 0x8
0x767060bb0822    498906                  mov [r14], rax
 .. this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.si ..
0x767060bb0825    48b8a735e66070760000    mov rax, 0x767060e635a7       < string : 'X' >
0x767060bb082f    488b00                  mov rax, [rax]
0x767060bb0832    4983c608                add r14, 0x8
0x767060bb0836    498906                  mov [r14], rax
 .. p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ du ..
0x767060bb0839    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0843    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump ..
0x767060bb0846    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb0850    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb085a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. this.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     de ..
0x767060bb085d    498b47f8                mov rax, [r15-0x8]
0x767060bb0861    4881c000000000          add rax, 0x0
0x767060bb0868    4983c610                add r14, 0x10
0x767060bb086c    498906                  mov [r14], rax
 .. size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal ..
0x767060bb086f    498946f8                mov [r14-0x8], rax
 ..  = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     ..
0x767060bb0873    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb087d    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     t ..
0x767060bb0880    498b47f8                mov rax, [r15-0x8]
0x767060bb0884    4881c000000000          add rax, 0x0
0x767060bb088b    4983c608                add r14, 0x8
0x767060bb088f    498906                  mov [r14], rax
 ..  this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.A ..
0x767060bb0892    48b8a735e66070760000    mov rax, 0x767060e635a7       < string : 'X' >
0x767060bb089c    488b00                  mov rax, [rax]
0x767060bb089f    4983c608                add r14, 0x8
0x767060bb08a3    498906                  mov [r14], rax
 .. ize @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @  ..
0x767060bb08a6    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb08b0    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb08ba    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. l     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\n ..
0x767060bb08bd    498b47f8                mov rax, [r15-0x8]
 ..  this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum ..
0x767060bb08c1    4881c050000000          add rax, 0x50
0x767060bb08c8    4983c608                add r14, 0x8
0x767060bb08cc    498906                  mov [r14], rax
 .. dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum shoul ..
0x767060bb08cf    498b47f8                mov rax, [r15-0x8]
 ..  this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be  ..
0x767060bb08d3    4881c028000000          add rax, 0x28
0x767060bb08da    488b00                  mov rax, [rax]
0x767060bb08dd    4983c610                add r14, 0x10
0x767060bb08e1    498906                  mov [r14], rax
 ..  dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9  ..
0x767060bb08e4    498946f8                mov [r14-0x8], rax
 .. p     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="   ..
0x767060bb08e8    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb08f2    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb08f5    498b0e                  mov rcx, [r14]
0x767060bb08f8    498b46f8                mov rax, [r14-0x8]
0x767060bb08fc    4983ee10                sub r14, 0x10
 ..     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  as ..
0x767060bb0900    488908                  mov [rax], rcx
 .. is.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p ..
0x767060bb0903    498b47f8                mov rax, [r15-0x8]
0x767060bb0907    4881c000000000          add rax, 0x0
0x767060bb090e    4983c608                add r14, 0x8
0x767060bb0912    498906                  mov [r14], rax
 .. cum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    t ..
0x767060bb0915    498b47f8                mov rax, [r15-0x8]
0x767060bb0919    4881c000000000          add rax, 0x0
0x767060bb0920    4983c608                add r14, 0x8
0x767060bb0924    498906                  mov [r14], rax
 .. his.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.C ..
0x767060bb0927    48b8a735e66070760000    mov rax, 0x767060e635a7       < string : 'X' >
0x767060bb0931    488b00                  mov rax, [rax]
0x767060bb0934    4983c608                add r14, 0x8
0x767060bb0938    498906                  mov [r14], rax
 .. totype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category ..
0x767060bb093b    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb0945    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb094f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 ..
0x767060bb0952    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bb095c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb0966    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory ..
0x767060bb0969    498b47f8                mov rax, [r15-0x8]
 .. this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory shou ..
0x767060bb096d    4881c050000000          add rax, 0x50
0x767060bb0974    488b00                  mov rax, [rax]
0x767060bb0977    4983c610                add r14, 0x10
0x767060bb097b    498906                  mov [r14], rax
 .. e @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 ..
0x767060bb097e    498946f8                mov [r14-0x8], rax
 .. dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : a ..
0x767060bb0982    b803000000              mov eax, 0x3
0x767060bb0987    4983c608                add r14, 0x8
0x767060bb098b    498906                  mov [r14], rax
 .. mp     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : ass ..
0x767060bb098e    48b8ba388b6070760000    mov rax, 0x7670608b38ba
0x767060bb0998    4983c608                add r14, 0x8
0x767060bb099c    498906                  mov [r14], rax
0x767060bb099f    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb09a9    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. ccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  ..
0x767060bb09ac    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb09b6    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  ..
0x767060bb09b9    498b47f8                mov rax, [r15-0x8]
 .. d be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  ..
0x767060bb09bd    4881c020000000          add rax, 0x20
0x767060bb09c4    488b00                  mov rax, [rax]
0x767060bb09c7    4983c610                add r14, 0x10
0x767060bb09cb    498906                  mov [r14], rax
 .. sert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  ..
0x767060bb09ce    498946f8                mov [r14-0x8], rax
 .. 9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  ..
0x767060bb09d2    b80c000000              mov eax, 0xc
0x767060bb09d7    4983c608                add r14, 0x8
0x767060bb09db    498906                  mov [r14], rax
 .. "  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  ..
0x767060bb09de    48b823398b6070760000    mov rax, 0x7670608b3923
0x767060bb09e8    4983c608                add r14, 0x8
0x767060bb09ec    498906                  mov [r14], rax
0x767060bb09ef    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb09f9    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. ory should be 12 : assert10 =" assert p;  ..
0x767060bb09fc    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb0a06    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb0a09    4d8d77f8                lea r14, [r15-0x8]
0x767060bb0a0d    4d8b7e08                mov r15, [r14+0x8]
0x767060bb0a11    4983ee08                sub r14, 0x8
 .. ry should be 12 : assert10 =" assert p;  ..
0x767060bb0a15    c3                      ret
Word_Disassemble : word - 'init' :: codeSize = 2648
Word : 0x0000767060e64447 :: Compiled at : 0x0000767060baffbe
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 162.18 <::

DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 3 init_assert1  : ok

 3
Run Time Location : namespaces/test/classTest.csl 125.98 init_assert2  : ok


 DLListClone init : this.Accum = : init_assert3  : ok

 3 0x0000000000000018 init_assert5  : ok


 12 init_assert7  : ok

 3 36 testing yada init_assert8  : ok

 9 1 0 15 1 4 12 4 3
 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read
this =  0x00007670609a76b8
this @ =  0x00007670609a76d0
this.size =  0x0000000000000058
 0x00007670609a76b8
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x00007670609a76b8 : Number = 88 :: (little endian dump)
0x00007670609a76b8 :  d0 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a76c8 :  02 00 00 00 00 00 00 00  b8 76 9a 60 70 76 00 00  ........ .v.`pv..
0x00007670609a76d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a76e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........
0x00007670609a76f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a7708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x0000000000000003
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x00007670609a76b8 : Number = 88 :: (little endian dump)
0x00007670609a76b8 :  d0 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a76c8 :  02 00 00 00 00 00 00 00  b8 76 9a 60 70 76 00 00  ........ .v.`pv..
0x00007670609a76d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a76e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........
0x00007670609a76f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a7708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

Accum should be 3 : assert9 =  : ok

 3
Category should be 12 : assert10 =  : ok

 12
DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

this =  0x0000767060e63757
Dump at : namespaces/test/classTest.csl : 169.27 :
Dump : Address = 0x00007670609a76b8 : Number = 88 :: (little endian dump)
0x00007670609a76b8 :  d0 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a76c8 :  02 00 00 00 00 00 00 00  b8 76 9a 60 70 76 00 00  ........ .v.`pv..
0x00007670609a76d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a76e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........
0x00007670609a76f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a7708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

Dump at : namespaces/test/classTest.csl : 170.32 :
Dump : Address = 0x00007670609a76b8 : Number = 88 :: (little endian dump)
0x00007670609a76b8 :  d0 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a76c8 :  02 00 00 00 00 00 00 00  b8 76 9a 60 70 76 00 00  ........ .v.`pv..
0x00007670609a76d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a76e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........
0x00007670609a76f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a7708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........


DataStack at : namespaces/test/classTest.csl : 171.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 DLListClone size = 88
 Clone size  : ok

 DLListClone init test :   : ok


this @ size @ p  88
this.size =  88
Using Namespaces :> C Root DLListClone DLList DLLNode Buffer Class Integer Pointer Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

printf output = this.size = 88
 0x00007670609a76b8 88
Dump at : namespaces/test/classTest.csl : 183.48 :
Dump : Address = 0x00007670609a76b8 : Number = 88 :: (little endian dump)
0x00007670609a76b8 :  d0 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a76c8 :  02 00 00 00 00 00 00 00  b8 76 9a 60 70 76 00 00  ........ .v.`pv..
0x00007670609a76d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a76e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........
0x00007670609a76f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a7708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........


 -----------------------------
 'this' semantics have yet to be solidified namespaces/test/classTest.csl 185.53
 -----------------------------


Dump at : namespaces/test/classTest.csl : 186.32 :
Dump : Address = 0x00007670609a76b8 : Number = 88 :: (little endian dump)
0x00007670609a76b8 :  d0 76 9a 60 70 76 00 00  01 00 00 00 00 00 00 00  .v.`pv.. ........
0x00007670609a76c8 :  02 00 00 00 00 00 00 00  b8 76 9a 60 70 76 00 00  ........ .v.`pv..
0x00007670609a76d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a76e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........
0x00007670609a76f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a7708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 DLListClone init test4 :   : ok


including namespaces/test/math.csl at namespaces/test/initTest.csl : 86.41 ...

math test

 =============================
C.t* <:> csl compiled word
SourceCode for C.t* :>
: t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;
Source code file location of t* : "namespaces/test/math.csl" : 25.2 :: we are now at : namespaces/test/math.csl : 26.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb0cea -- code size = 93 bytes
TypeSignature :
 -----------------------------
Word :: C.t* : definition = 0x0000767060bb0cea : disassembly at namespaces/test/math.csl : 26.16 :
0x767060bb0cea    4d897e08                mov [r14+0x8], r15
0x767060bb0cee    4d8d7e08                lea r15, [r14+0x8]
0x767060bb0cf2    4981c608000000          add r14, 0x8
 ..                      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0cf9    498b47e0                mov rax, [r15-0x20]
0x767060bb0cfd    4983c608                add r14, 0x8
0x767060bb0d01    498906                  mov [r14], rax
 ..                  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0d04    498b47e8                mov rax, [r15-0x18]
0x767060bb0d08    4983c608                add r14, 0x8
0x767060bb0d0c    498906                  mov [r14], rax
 ..              : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0d0f    498b47f0                mov rax, [r15-0x10]
 ..          : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0d13    498b4ff8                mov rcx, [r15-0x8]
0x767060bb0d17    480fafc1                imul rax, rcx
 ..      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0d1b    488bc8                  mov rcx, rax
0x767060bb0d1e    498b06                  mov rax, [r14]
0x767060bb0d21    4983ee08                sub r14, 0x8
0x767060bb0d25    480fafc1                imul rax, rcx
 ..    : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0d29    488bc8                  mov rcx, rax
0x767060bb0d2c    498b06                  mov rax, [r14]
0x767060bb0d2f    4983ee08                sub r14, 0x8
 ..  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  ..
0x767060bb0d33    480fafc1                imul rax, rcx
0x767060bb0d37    4d8d77f8                lea r14, [r15-0x8]
0x767060bb0d3b    4d8b7e08                mov r15, [r14+0x8]
0x767060bb0d3f    4983ee18                sub r14, 0x18
0x767060bb0d43    498906                  mov [r14], rax
 ..  d ) a @ b @ c @ d @ * * * return tos ;
0x767060bb0d46    c3                      ret
Word_Disassemble : word - 't*' :: codeSize = 93
Word : 0x0000767060e76a57 :: Compiled at : 0x0000767060bb0cea
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 26.16 <::

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :>
: moe ( n m ) n m @ <<= n @ return tos ;
Source code file location of moe : "namespaces/test/math.csl" : 44.2 :: we are now at : namespaces/test/math.csl : 45.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb0ef5 -- code size = 43 bytes
TypeSignature :
 -----------------------------
Word :: C.moe : definition = 0x0000767060bb0ef5 : disassembly at namespaces/test/math.csl : 45.17 :
0x767060bb0ef5    4d897e08                mov [r14+0x8], r15
0x767060bb0ef9    4d8d7e08                lea r15, [r14+0x8]
0x767060bb0efd    4981c608000000          add r14, 0x8
 ..                       : moe ( n m ) n m @ <<= n @ return tos ;  ..
0x767060bb0f04    498b4ff8                mov rcx, [r15-0x8]
 ..                   : moe ( n m ) n m @ <<= n @ return tos ;  ..
0x767060bb0f08    49d367f0                shl qword [r15-0x10], cl
 ..               : moe ( n m ) n m @ <<= n @ return tos ;  ..
0x767060bb0f0c    498b47f0                mov rax, [r15-0x10]
0x767060bb0f10    4d8d77f8                lea r14, [r15-0x8]
0x767060bb0f14    4d8b7e08                mov r15, [r14+0x8]
0x767060bb0f18    4983ee08                sub r14, 0x8
0x767060bb0f1c    498906                  mov [r14], rax
   : moe ( n m ) n m @ <<= n @ return tos ;  ..
0x767060bb0f1f    c3                      ret
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x0000767060e67fc7 :: Compiled at : 0x0000767060bb0ef5
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 45.17 <::
 moe_assert1  : ok

 moe_assert2  : ok

 moe_assert3  : ok

 moe_assert3  : ok



 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :>
: moe ( n m ) n <<= m n return tos ;
Source code file location of moe : "namespaces/test/math.csl" : 53.2 :: we are now at : namespaces/test/math.csl : 54.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb0f55 -- code size = 43 bytes
TypeSignature :
 -----------------------------
Word :: Infix.moe : definition = 0x0000767060bb0f55 : disassembly at namespaces/test/math.csl : 54.17 :
0x767060bb0f55    4d897e08                mov [r14+0x8], r15
0x767060bb0f59    4d8d7e08                lea r15, [r14+0x8]
0x767060bb0f5d    4981c608000000          add r14, 0x8
 ..                   : moe ( n m ) n <<= m n return tos ;  ..
0x767060bb0f64    498b4ff8                mov rcx, [r15-0x8]
 ..                       : moe ( n m ) n <<= m n return tos ;  ..
0x767060bb0f68    49d367f0                shl qword [r15-0x10], cl
 ..                 : moe ( n m ) n <<= m n return tos ;  ..
0x767060bb0f6c    498b47f0                mov rax, [r15-0x10]
0x767060bb0f70    4d8d77f8                lea r14, [r15-0x8]
0x767060bb0f74    4d8b7e08                mov r15, [r14+0x8]
0x767060bb0f78    4983ee08                sub r14, 0x8
0x767060bb0f7c    498906                  mov [r14], rax
 ..    : moe ( n m ) n <<= m n return tos ;  ..
0x767060bb0f7f    c3                      ret
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x0000767060e84b9f :: Compiled at : 0x0000767060bb0f55
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 54.17 <::

 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :>
: moe ( n m ) n >>= m n return tos ;
Source code file location of moe : "namespaces/test/math.csl" : 56.2 :: we are now at : namespaces/test/math.csl : 57.20
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb0f85 -- code size = 43 bytes
TypeSignature :
 -----------------------------
Word :: Infix.moe : definition = 0x0000767060bb0f85 : disassembly at namespaces/test/math.csl : 57.20 :
0x767060bb0f85    4d897e08                mov [r14+0x8], r15
0x767060bb0f89    4d8d7e08                lea r15, [r14+0x8]
0x767060bb0f8d    4981c608000000          add r14, 0x8
 ..                   : moe ( n m ) n >>= m n return tos ;  ..
0x767060bb0f94    498b4ff8                mov rcx, [r15-0x8]
 ..                       : moe ( n m ) n >>= m n return tos ;  ..
0x767060bb0f98    49d36ff0                shr qword [r15-0x10], cl
 ..                 : moe ( n m ) n >>= m n return tos ;  ..
0x767060bb0f9c    498b47f0                mov rax, [r15-0x10]
0x767060bb0fa0    4d8d77f8                lea r14, [r15-0x8]
0x767060bb0fa4    4d8b7e08                mov r15, [r14+0x8]
0x767060bb0fa8    4983ee08                sub r14, 0x8
0x767060bb0fac    498906                  mov [r14], rax
 ..    : moe ( n m ) n >>= m n return tos ;  ..
0x767060bb0faf    c3                      ret
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x0000767060e85cef :: Compiled at : 0x0000767060bb0f85
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 57.20 <::
 128 65536
should show 128 65536
 2 1
should show 2 1

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :>
: moe ( n m ) n m @ *= n @ return tos ;
Source code file location of moe : "namespaces/test/math.csl" : 67.2 :: we are now at : namespaces/test/math.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb1045 -- code size = 51 bytes
TypeSignature :
 -----------------------------
Word :: C.moe : definition = 0x0000767060bb1045 : disassembly at namespaces/test/math.csl : 68.17 :
0x767060bb1045    4d897e08                mov [r14+0x8], r15
0x767060bb1049    4d8d7e08                lea r15, [r14+0x8]
0x767060bb104d    4981c608000000          add r14, 0x8
 ..                       : moe ( n m ) n m @ *= n @ return tos ;  ..
0x767060bb1054    498b4ff8                mov rcx, [r15-0x8]
 ..                         : moe ( n m ) n m @ *= n @ return tos ;  ..
0x767060bb1058    498b47f0                mov rax, [r15-0x10]
 ..                   : moe ( n m ) n m @ *= n @ return tos ;  ..
0x767060bb105c    480fafc1                imul rax, rcx
0x767060bb1060    498947f0                mov [r15-0x10], rax
 ..                : moe ( n m ) n m @ *= n @ return tos ;  ..
0x767060bb1064    498b47f0                mov rax, [r15-0x10]
0x767060bb1068    4d8d77f8                lea r14, [r15-0x8]
0x767060bb106c    4d8b7e08                mov r15, [r14+0x8]
0x767060bb1070    4983ee08                sub r14, 0x8
0x767060bb1074    498906                  mov [r14], rax
 .. : moe ( n m ) n m @ *= n @ return tos ;  ..
0x767060bb1077    c3                      ret
Word_Disassemble : word - 'moe' :: codeSize = 51
Word : 0x0000767060e89aff :: Compiled at : 0x0000767060bb1045
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 68.17 <::


 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :>
: moe ( n m ) n m @ /= n @ return tos ;
Source code file location of moe : "namespaces/test/math.csl" : 71.2 :: we are now at : namespaces/test/math.csl : 72.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb107d -- code size = 57 bytes
TypeSignature :
 -----------------------------
Word :: C.moe : definition = 0x0000767060bb107d : disassembly at namespaces/test/math.csl : 72.17 :
0x767060bb107d    4d897e08                mov [r14+0x8], r15
0x767060bb1081    4d8d7e08                lea r15, [r14+0x8]
0x767060bb1085    4981c608000000          add r14, 0x8
 ..                       : moe ( n m ) n m @ /= n @ return tos ;  ..
0x767060bb108c    498b4ff8                mov rcx, [r15-0x8]
 ..                         : moe ( n m ) n m @ /= n @ return tos ;  ..
0x767060bb1090    498b47f0                mov rax, [r15-0x10]
 ..                   : moe ( n m ) n m @ /= n @ return tos ;  ..
0x767060bb1094    48c7c200000000          mov rdx, 0x0
0x767060bb109b    48f7f9                  idiv rcx
0x767060bb109e    498947f0                mov [r15-0x10], rax
 ..                : moe ( n m ) n m @ /= n @ return tos ;  ..
0x767060bb10a2    498b47f0                mov rax, [r15-0x10]
0x767060bb10a6    4d8d77f8                lea r14, [r15-0x8]
0x767060bb10aa    4d8b7e08                mov r15, [r14+0x8]
0x767060bb10ae    4983ee08                sub r14, 0x8
0x767060bb10b2    498906                  mov [r14], rax
 .. : moe ( n m ) n m @ /= n @ return tos ;  ..
0x767060bb10b5    c3                      ret
Word_Disassemble : word - 'moe' :: codeSize = 57
Word : 0x0000767060e8adff :: Compiled at : 0x0000767060bb107d
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 72.17 <::


 =============================
C.moe2 <:> csl compiled word
SourceCode for C.moe2 :>
: moe2 ( n ) n 2 /= n @ return tos ;
Source code file location of moe2 : "namespaces/test/math.csl" : 75.2 :: we are now at : namespaces/test/math.csl : 76.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb10bb -- code size = 54 bytes
TypeSignature :
 -----------------------------
Word :: C.moe2 : definition = 0x0000767060bb10bb : disassembly at namespaces/test/math.csl : 76.18 :
0x767060bb10bb    4d897e08                mov [r14+0x8], r15
0x767060bb10bf    4d8d7e08                lea r15, [r14+0x8]
0x767060bb10c3    4981c608000000          add r14, 0x8
 ..                        : moe2 ( n ) n 2 /= n @ return tos ;  ..
0x767060bb10ca    b902000000              mov ecx, 0x2
 ..                          : moe2 ( n ) n 2 /= n @ return tos ;  ..
0x767060bb10cf    498b47f8                mov rax, [r15-0x8]
 ..                      : moe2 ( n ) n 2 /= n @ return tos ;  ..
0x767060bb10d3    48c7c200000000          mov rdx, 0x0
0x767060bb10da    48f7f9                  idiv rcx
0x767060bb10dd    498947f8                mov [r15-0x8], rax
 ..                   : moe2 ( n ) n 2 /= n @ return tos ;  ..
0x767060bb10e1    498b47f8                mov rax, [r15-0x8]
0x767060bb10e5    4d8d77f8                lea r14, [r15-0x8]
0x767060bb10e9    4d8b7e08                mov r15, [r14+0x8]
0x767060bb10ed    498906                  mov [r14], rax
 ..    : moe2 ( n ) n 2 /= n @ return tos ;  ..
0x767060bb10f0    c3                      ret
Word_Disassemble : word - 'moe2' :: codeSize = 54
Word : 0x0000767060e8c0ff :: Compiled at : 0x0000767060bb10bb
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 76.18 <::


 moe3_assert1  : ok


 moe3_assert2  : ok



 =============================
C.t64bitAdd2 <:> csl compiled word
SourceCode for C.t64bitAdd2 :>
: t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;
Source code file location of t64bitAdd2 : "namespaces/test/math.csl" : 83.2 :: we are now at : namespaces/test/math.csl : 84.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb1155 -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: C.t64bitAdd2 : definition = 0x0000767060bb1155 : disassembly at namespaces/test/math.csl : 84.23 :
0x767060bb1155    4d897e08                mov [r14+0x8], r15
0x767060bb1159    4d8d7e08                lea r15, [r14+0x8]
0x767060bb115d    4981c608000000          add r14, 0x8
 ..                  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  ..
0x767060bb1164    48b80000000001000000    mov rax, 0x100000000
 ..      : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  ..
0x767060bb116e    498b4ff0                mov rcx, [r15-0x10]
 ..  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  ..
0x767060bb1172    4803c1                  add rax, rcx
   : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  ..
0x767060bb1175    498b4ff8                mov rcx, [r15-0x8]
 .. bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;
0x767060bb1179    4803c1                  add rax, rcx
0x767060bb117c    4d8d77f8                lea r14, [r15-0x8]
0x767060bb1180    4d8b7e08                mov r15, [r14+0x8]
0x767060bb1184    4983ee08                sub r14, 0x8
0x767060bb1188    498906                  mov [r14], rax
 ..  ) 0x100000000 n @ + m @ + return tos ;
0x767060bb118b    c3                      ret
Word_Disassemble : word - 't64bitAdd2' :: codeSize = 55
Word : 0x0000767060e8f69f :: Compiled at : 0x0000767060bb1155
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 84.23 <::
 t64bitAdd2_assert  : ok


 0x0000000000000002
 =============================
C.t64bitSub2 <:> csl compiled word
SourceCode for C.t64bitSub2 :>
: t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;
Source code file location of t64bitSub2 : "namespaces/test/math.csl" : 87.2 :: we are now at : namespaces/test/math.csl : 88.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb11db -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: C.t64bitSub2 : definition = 0x0000767060bb11db : disassembly at namespaces/test/math.csl : 88.23 :
0x767060bb11db    4d897e08                mov [r14+0x8], r15
0x767060bb11df    4d8d7e08                lea r15, [r14+0x8]
0x767060bb11e3    4981c608000000          add r14, 0x8
 ..                  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  ..
0x767060bb11ea    48b80300000001000000    mov rax, 0x100000003
 ..      : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  ..
0x767060bb11f4    498b4ff0                mov rcx, [r15-0x10]
 ..  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  ..
0x767060bb11f8    482bc1                  sub rax, rcx
   : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  ..
0x767060bb11fb    498b4ff8                mov rcx, [r15-0x8]
 .. bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;
0x767060bb11ff    482bc1                  sub rax, rcx
0x767060bb1202    4d8d77f8                lea r14, [r15-0x8]
0x767060bb1206    4d8b7e08                mov r15, [r14+0x8]
0x767060bb120a    4983ee08                sub r14, 0x8
0x767060bb120e    498906                  mov [r14], rax
 ..  ) 0x100000003 n @ - m @ - return tos ;
0x767060bb1211    c3                      ret
Word_Disassemble : word - 't64bitSub2' :: codeSize = 55
Word : 0x0000767060e91fff :: Compiled at : 0x0000767060bb11db
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 88.23 <::
 t64bitSub2_assert  : ok


 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :>
: t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 90.2 :: we are now at : namespaces/test/math.csl : 91.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb1217 -- code size = 55 bytes
TypeSignature :
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x0000767060bb1217 : disassembly at namespaces/test/math.csl : 91.23 :
0x767060bb1217    4d897e08                mov [r14+0x8], r15
0x767060bb121b    4d8d7e08                lea r15, [r14+0x8]
0x767060bb121f    4981c608000000          add r14, 0x8
 ..                  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  ..
0x767060bb1226    48b80400000001000000    mov rax, 0x100000004
 ..      : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  ..
0x767060bb1230    498b4ff0                mov rcx, [r15-0x10]
 ..  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  ..
0x767060bb1234    482bc1                  sub rax, rcx
   : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  ..
0x767060bb1237    498b4ff8                mov rcx, [r15-0x8]
 .. bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;
0x767060bb123b    482bc1                  sub rax, rcx
0x767060bb123e    4d8d77f8                lea r14, [r15-0x8]
0x767060bb1242    4d8b7e08                mov r15, [r14+0x8]
0x767060bb1246    4983ee08                sub r14, 0x8
0x767060bb124a    498906                  mov [r14], rax
 ..  ) 0x100000004 n @ - m @ - return tos ;
0x767060bb124d    c3                      ret
Word_Disassemble : word - 't64bitSub3' :: codeSize = 55
Word : 0x0000767060e934af :: Compiled at : 0x0000767060bb1217
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 91.23 <::

 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :>
: t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 93.2 :: we are now at : namespaces/test/math.csl : 94.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb1253 -- code size = 63 bytes
TypeSignature :
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x0000767060bb1253 : disassembly at namespaces/test/math.csl : 94.23 :
0x767060bb1253    4d897e08                mov [r14+0x8], r15
0x767060bb1257    4d8d7e08                lea r15, [r14+0x8]
0x767060bb125b    4981c608000000          add r14, 0x8
 ..                  : t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;  ..
0x767060bb1262    b801000000              mov eax, 0x1
 .. ub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
0x767060bb1267    48b90300000001000000    mov rcx, 0x100000003
 .. 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
0x767060bb1271    4803c1                  add rax, rcx
 .. 100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
0x767060bb1274    498b4ff0                mov rcx, [r15-0x10]
 .. 00003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
0x767060bb1278    482bc1                  sub rax, rcx
 .. 003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
0x767060bb127b    498b4ff8                mov rcx, [r15-0x8]
 .. 0x100000002 - 0x100000003 + n @ - m @ - return tos ;
0x767060bb127f    482bc1                  sub rax, rcx
0x767060bb1282    4d8d77f8                lea r14, [r15-0x8]
0x767060bb1286    4d8b7e08                mov r15, [r14+0x8]
0x767060bb128a    4983ee08                sub r14, 0x8
0x767060bb128e    498906                  mov [r14], rax
 ..  0x100000003 + n @ - m @ - return tos ;
0x767060bb1291    c3                      ret
Word_Disassemble : word - 't64bitSub3' :: codeSize = 63
Word : 0x0000767060e9495f :: Compiled at : 0x0000767060bb1253
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 94.23 <::

 7176105502331971041
 0110 0011  1001 0110   1010 0101  1110 1111    0000 1001  0011 1001   0010 0101  1110 0001
including namespaces/test/arrayTest.csl at namespaces/test/initTest.csl : 86.41 ...

_ClassTypedef : at namespaces/test/arrayTest.csl : 11.23 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
DLLNode size =  16
DLLNodeAlloc size =  512

Dump at : namespaces/test/arrayTest.csl : 24.15 :
Dump : Address = 0x00007670609a7710 : Number = 64 :: (little endian dump)
0x00007670609a7710 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a7720 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a7730 :  00 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7740 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

_ClassTypedef : at namespaces/test/arrayTest.csl : 27.25 : token = class : cloneFlag = 0DLLNodeAlloc4 size =  2048

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

testna4 =  0x00007670609a7910
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :>
: testna5 ( DLLNodeAlloc4 dlna4o ) "\ndlna4o = " ps dlna4o hp dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 = dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = dlna4o.nodes [ 1 ] [ 0 ] 32 dump dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 = dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps dlna4o.nodes [ 2 ] [ 1 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference 1 = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference dlna4o.nodes [ 3 ] [ 2 ].BeforeReference = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference dlna4o.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump "dlna4o = " ps dlna4o hp ;
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 34.2 :: we are now at : namespaces/test/arrayTest.csl : 53.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb206a -- code size = 616 bytes
TypeSignature : Object
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x0000767060bb206a : disassembly at namespaces/test/arrayTest.csl : 53.21 :
0x767060bb206a    4d897e08                mov [r14+0x8], r15
0x767060bb206e    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2072    4981c608000000          add r14, 0x8
0x767060bb2079    48b805608b6070760000    mov rax, 0x7670608b6005
0x767060bb2083    4983c608                add r14, 0x8
0x767060bb2087    498906                  mov [r14], rax
 .. NodeAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRefe ..
0x767060bb208a    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2094    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. eAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReferen ..
0x767060bb2097    498b47f8                mov rax, [r15-0x8]
0x767060bb209b    4881c000000000          add rax, 0x0
0x767060bb20a2    4983c608                add r14, 0x8
0x767060bb20a6    498906                  mov [r14], rax
 ..  dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =  ..
0x767060bb20a9    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb20b3    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..  )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dln ..
0x767060bb20b6    498b47f8                mov rax, [r15-0x8]
0x767060bb20ba    4881c000020000          add rax, 0x200
0x767060bb20c1    b901000000              mov ecx, 0x1
 .. 4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.n ..
0x767060bb20c6    488908                  mov [rax], rcx
 .. es [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ ..
0x767060bb20c9    498b47f8                mov rax, [r15-0x8]
 .. ence 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference ..
0x767060bb20cd    4881c008020000          add rax, 0x208
0x767060bb20d4    b902000000              mov ecx, 0x2
 .. o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.no ..
0x767060bb20d9    488908                  mov [rax], rcx
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [  ..
0x767060bb20dc    498b47f8                mov rax, [r15-0x8]
0x767060bb20e0    4881c000020000          add rax, 0x200
0x767060bb20e7    4983c608                add r14, 0x8
0x767060bb20eb    498906                  mov [r14], rax
 .. ence 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference ..
0x767060bb20ee    b820000000              mov eax, 0x20
0x767060bb20f3    4983c608                add r14, 0x8
0x767060bb20f7    498906                  mov [r14], rax
 .. e 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2  ..
0x767060bb20fa    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2104    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb210e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\n ..
0x767060bb2111    498b47f8                mov rax, [r15-0x8]
0x767060bb2115    4881c010040000          add rax, 0x410
0x767060bb211c    b901000000              mov ecx, 0x1
 .. 4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32  ..
0x767060bb2121    488908                  mov [rax], rcx
 .. es [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump"  ..
0x767060bb2124    498b47f8                mov rax, [r15-0x8]
 .. ence 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2  ..
0x767060bb2128    4881c018040000          add rax, 0x418
0x767060bb212f    b902000000              mov ecx, 0x2
 .. o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump    ..
0x767060bb2134    488908                  mov [rax], rcx
0x767060bb2137    48b86e608b6070760000    mov rax, 0x7670608b606e
0x767060bb2141    4983c608                add r14, 0x8
0x767060bb2145    498906                  mov [r14], rax
 .. e : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o ..
0x767060bb2148    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2152    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. 4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ ..
0x767060bb2155    498b47f8                mov rax, [r15-0x8]
0x767060bb2159    4881c010040000          add rax, 0x410
0x767060bb2160    4983c608                add r14, 0x8
0x767060bb2164    498906                  mov [r14], rax
 .. ump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReferenc ..
0x767060bb2167    b820000000              mov eax, 0x20
0x767060bb216c    4983c608                add r14, 0x8
0x767060bb2170    498906                  mov [r14], rax
 .. " ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference   ..
0x767060bb2173    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb217d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2187    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     " ..
0x767060bb218a    498b47f8                mov rax, [r15-0x8]
0x767060bb218e    4881c020060000          add rax, 0x620
0x767060bb2195    b901000000              mov ecx, 0x1
 .. o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 ..
0x767060bb219a    488908                  mov [rax], rcx
 .. s [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ..
0x767060bb219d    498b47f8                mov rax, [r15-0x8]
 .. nce  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ..
0x767060bb21a1    4881c028060000          add rax, 0x628
0x767060bb21a8    b902000000              mov ecx, 0x2
 .. .nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump    ..
0x767060bb21ad    488908                  mov [rax], rcx
0x767060bb21b0    48b815618b6070760000    mov rax, 0x7670608b6115
0x767060bb21ba    4983c608                add r14, 0x8
0x767060bb21be    498906                  mov [r14], rax
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ ..
0x767060bb21c1    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb21cb    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ..
0x767060bb21ce    498b47f8                mov rax, [r15-0x8]
0x767060bb21d2    4881c020060000          add rax, 0x620
0x767060bb21d9    4983c608                add r14, 0x8
0x767060bb21dd    498906                  mov [r14], rax
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =      ..
0x767060bb21e0    b820000000              mov eax, 0x20
0x767060bb21e5    4983c608                add r14, 0x8
0x767060bb21e9    498906                  mov [r14], rax
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dln ..
0x767060bb21ec    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb21f6    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2200    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes ..
0x767060bb2203    498b47f8                mov rax, [r15-0x8]
0x767060bb2207    4881c020060000          add rax, 0x620
 .. a4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.node ..
0x767060bb220e    498b4ff8                mov rcx, [r15-0x8]
0x767060bb2212    4881c128060000          add rcx, 0x628
 .. a4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njus ..
0x767060bb2219    488908                  mov [rax], rcx
 .. des [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust befo ..
0x767060bb221c    498b47f8                mov rax, [r15-0x8]
 .. erence =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ ..
0x767060bb2220    4881c028060000          add rax, 0x628
 .. 4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps  ..
0x767060bb2227    498b4ff8                mov rcx, [r15-0x8]
0x767060bb222b    4881c120060000          add rcx, 0x620
 .. na4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump    ..
0x767060bb2232    488908                  mov [rax], rcx
0x767060bb2235    48b8c0618b6070760000    mov rax, 0x7670608b61c0
0x767060bb223f    4983c608                add r14, 0x8
0x767060bb2243    498906                  mov [r14], rax
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb2246    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2250    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb2253    498b47f8                mov rax, [r15-0x8]
0x767060bb2257    4881c020060000          add rax, 0x620
0x767060bb225e    4983c608                add r14, 0x8
0x767060bb2262    498906                  mov [r14], rax
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb2265    b820000000              mov eax, 0x20
0x767060bb226a    4983c608                add r14, 0x8
0x767060bb226e    498906                  mov [r14], rax
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb2271    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb227b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2285    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb2288    48b835628b6070760000    mov rax, 0x7670608b6235       < string : 'dlna4o = ' >
0x767060bb2292    4983c608                add r14, 0x8
0x767060bb2296    498906                  mov [r14], rax
 .. s [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb2299    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb22a3    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb22a6    498b47f8                mov rax, [r15-0x8]
0x767060bb22aa    4881c000000000          add rax, 0x0
0x767060bb22b1    4983c608                add r14, 0x8
0x767060bb22b5    498906                  mov [r14], rax
 .. 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb22b8    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb22c2    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
0x767060bb22c5    4d8d77f8                lea r14, [r15-0x8]
0x767060bb22c9    4d8b7e08                mov r15, [r14+0x8]
0x767060bb22cd    4983ee08                sub r14, 0x8
 ..  32 dump     "dlna4o = " ps dlna4o hp ;  ..
0x767060bb22d1    c3                      ret
Word_Disassemble : word - 'testna5' :: codeSize = 616
Word : 0x0000767060ee12ab :: Compiled at : 0x0000767060bb206a
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 53.21 <::

dlna4o =  0x00007670609a7910
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007670609a7b10 : Number = 32 :: (little endian dump)
0x00007670609a7b10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7b20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

just before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007670609a7d20 : Number = 32 :: (little endian dump)
0x00007670609a7d20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7d30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007670609a7f30 : Number = 32 :: (little endian dump)
0x00007670609a7f30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7f40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007670609a7f30 : Number = 32 :: (little endian dump)
0x00007670609a7f30 :  38 7f 9a 60 70 76 00 00  30 7f 9a 60 70 76 00 00  8..`pv.. 0..`pv..
0x00007670609a7f40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 dlna4o =  0x00007670609a7910
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :>
: testna5 "\ntestna4 = " ps testna4 hp testna4.nodes [ 1 ] [ 0 ].AfterReference 1 = testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 = testna4.nodes [ 1 ] [ 0 ] 32 dump testna4.nodes [ 2 ] [ 1 ].AfterReference 1 = testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps testna4.nodes [ 2 ] [ 1 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference 1 = testna4.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference testna4.nodes [ 3 ] [ 2 ].BeforeReference = testna4.nodes [ 3 ] [ 2 ].BeforeReference testna4.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump "testna4 = " ps testna4 hp ;
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 56.2 :: we are now at : namespaces/test/arrayTest.csl : 75.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb22e6 -- code size = 685 bytes
TypeSignature :
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x0000767060bb22e6 : disassembly at namespaces/test/arrayTest.csl : 75.21 :
0x767060bb22e6    48b8dd658b6070760000    mov rax, 0x7670608b65dd
0x767060bb22f0    4983c608                add r14, 0x8
0x767060bb22f4    498906                  mov [r14], rax
 ..         : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeR ..
0x767060bb22f7    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2301    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..      : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeRefe ..
0x767060bb2304    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb230e    4881c000000000          add rax, 0x0
0x767060bb2315    4983c608                add r14, 0x8
0x767060bb2319    498906                  mov [r14], rax
 : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2  ..
0x767060bb231c    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb2326    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     t ..
0x767060bb2329    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb2333    4881c000020000          add rax, 0x200
0x767060bb233a    b901000000              mov ecx, 0x1
 .. a4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna ..
0x767060bb233f    488908                  mov [rax], rcx
 .. es [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.node ..
0x767060bb2342    48b810799a6070760000    mov rax, 0x7670609a7910
 .. nce 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReferen ..
0x767060bb234c    4881c008020000          add rax, 0x208
0x767060bb2353    b902000000              mov ecx, 0x2
 .. 4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4 ..
0x767060bb2358    488908                  mov [rax], rcx
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes ..
0x767060bb235b    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb2365    4881c000020000          add rax, 0x200
0x767060bb236c    4983c608                add r14, 0x8
0x767060bb2370    498906                  mov [r14], rax
 .. nce 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReferen ..
0x767060bb2373    b820000000              mov eax, 0x20
0x767060bb2378    4983c608                add r14, 0x8
0x767060bb237c    498906                  mov [r14], rax
 ..  2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference  ..
0x767060bb237f    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2389    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2393    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     " ..
0x767060bb2396    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb23a0    4881c010040000          add rax, 0x410
0x767060bb23a7    b901000000              mov ecx, 0x1
 .. a4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 3 ..
0x767060bb23ac    488908                  mov [rax], rcx
 .. es [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump ..
0x767060bb23af    48b810799a6070760000    mov rax, 0x7670609a7910
 .. nce 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [  ..
0x767060bb23b9    4881c018040000          add rax, 0x418
0x767060bb23c0    b902000000              mov ecx, 0x2
 .. 4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump  ..
0x767060bb23c5    488908                  mov [rax], rcx
0x767060bb23c8    48b849668b6070760000    mov rax, 0x7670608b6649
0x767060bb23d2    4983c608                add r14, 0x8
0x767060bb23d6    498906                  mov [r14], rax
 ..  : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     test ..
0x767060bb23d9    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb23e3    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. a4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.node ..
0x767060bb23e6    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb23f0    4881c010040000          add rax, 0x410
0x767060bb23f7    4983c608                add r14, 0x8
0x767060bb23fb    498906                  mov [r14], rax
 .. mp" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeRefere ..
0x767060bb23fe    b820000000              mov eax, 0x20
0x767060bb2403    4983c608                add r14, 0x8
0x767060bb2407    498906                  mov [r14], rax
 ..  ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference ..
0x767060bb240a    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2414    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb241e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     ..
0x767060bb2421    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb242b    4881c020060000          add rax, 0x620
0x767060bb2432    b901000000              mov ecx, 0x1
 .. 4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ]  ..
0x767060bb2437    488908                  mov [rax], rcx
 .. s [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dum ..
0x767060bb243a    48b810799a6070760000    mov rax, 0x7670609a7910
 .. ce  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ ..
0x767060bb2444    4881c028060000          add rax, 0x628
0x767060bb244b    b90200000048890848      mov rcx, 0x4808894800000002
0x767060bb2454    b8f3668b60              mov eax, 0x608b66f3
0x767060bb2459    7076                    jo 0x60bb24d1                 < DLLNodeAlloc4.testna5+491 >
0x767060bb245b    0000                    add [rax], al
0x767060bb245d    4983c608                add r14, 0x8
0x767060bb2461    498906                  mov [r14], rax
 ..  : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.node ..
0x767060bb2464    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb246e    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. a4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ]  ..
0x767060bb2471    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb247b    4881c020060000          add rax, 0x620
0x767060bb2482    4983c608                add r14, 0x8
0x767060bb2486    498906                  mov [r14], rax
 .. mp" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =    ..
0x767060bb2489    b820000000              mov eax, 0x20
0x767060bb248e    4983c608                add r14, 0x8
0x767060bb2492    498906                  mov [r14], rax
 ..  ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     t ..
0x767060bb2495    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb249f    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb24a9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. testna4.nodes [ 3 ] [ 2 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.no ..
0x767060bb24ac    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb24b6    4881c020060000          add rax, 0x620
 .. na4.nodes [ 3 ] [ 2 ].AfterReference  testna4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.n ..
0x767060bb24bd    48b910799a6070760000    mov rcx, 0x7670609a7910
0x767060bb24c7    4881c128060000          add rcx, 0x628
 .. na4.nodes [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\nj ..
0x767060bb24ce    488908                  mov [rax], rcx
 .. des [ 3 ] [ 2 ].BeforeReference =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust be ..
0x767060bb24d1    48b810799a6070760000    mov rax, 0x7670609a7910
 .. rence =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] ..
0x767060bb24db    4881c028060000          add rax, 0x628
 .. a4.nodes [ 3 ] [ 2 ].BeforeReference  testna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" p ..
0x767060bb24e2    48b910799a6070760000    mov rcx, 0x7670609a7910
0x767060bb24ec    4881c120060000          add rcx, 0x620
 .. tna4.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump  ..
0x767060bb24f3    488908                  mov [rax], rcx
0x767060bb24f6    48b8a1678b6070760000    mov rax, 0x7670608b67a1
0x767060bb2500    4983c608                add r14, 0x8
0x767060bb2504    498906                  mov [r14], rax
 ..  : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb2507    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2511    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. a4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb2514    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb251e    4881c020060000          add rax, 0x620
0x767060bb2525    4983c608                add r14, 0x8
0x767060bb2529    498906                  mov [r14], rax
 .. mp" ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb252c    b820000000              mov eax, 0x20
0x767060bb2531    4983c608                add r14, 0x8
0x767060bb2535    498906                  mov [r14], rax
 ..  ps      testna4.nodes [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb2538    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2542    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb254c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb254f    48b819688b6070760000    mov rax, 0x7670608b6819       < string : 'testna4 = ' >
0x767060bb2559    4983c608                add r14, 0x8
0x767060bb255d    498906                  mov [r14], rax
 ..  [ 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb2560    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb256a    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. 3 ] [ 2 ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb256d    48b810799a6070760000    mov rax, 0x7670609a7910
0x767060bb2577    4881c000000000          add rax, 0x0
0x767060bb257e    4983c608                add r14, 0x8
0x767060bb2582    498906                  mov [r14], rax
 .. ] 32 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb2585    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb258f    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. 2 dump     "testna4 = " ps testna4 hp ;  ..
0x767060bb2592    c3                      ret
Word_Disassemble : word - 'testna5' :: codeSize = 685
Word : 0x0000767060eefbfb :: Compiled at : 0x0000767060bb22e6
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 75.21 <::

testna4 =  0x00007670609a7910
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007670609a7b10 : Number = 32 :: (little endian dump)
0x00007670609a7b10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7b20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

just before : testna4.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007670609a7d20 : Number = 32 :: (little endian dump)
0x00007670609a7d20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7d30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007670609a7f30 : Number = 32 :: (little endian dump)
0x00007670609a7f30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a7f40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007670609a7f30 : Number = 32 :: (little endian dump)
0x00007670609a7f30 :  38 7f 9a 60 70 76 00 00  30 7f 9a 60 70 76 00 00  8..`pv.. 0..`pv..
0x00007670609a7f40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 testna4 =  0x00007670609a7910
testna4 =  0x00007670609a7910
DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna <:> csl compiled word
SourceCode for DLLNodeAlloc.tna :>
: tna testnarr2.nodes [ 1 ] 32 dump testnarr2.nodes [ 1 ].AfterReference 1 = testnarr2.nodes [ 1 ].BeforeReference 2 = testnarr2.nodes [ 1 ] 32 dump ;
Source code file location of tna : "namespaces/test/arrayTest.csl" : 84.2 :: we are now at : namespaces/test/arrayTest.csl : 90.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb25a7 -- code size = 169 bytes
TypeSignature :
 -----------------------------
Word :: DLLNodeAlloc.tna : definition = 0x0000767060bb25a7 : disassembly at namespaces/test/arrayTest.csl : 90.17 :
 ..                             : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ..
0x767060bb25a7    48b810819a6070760000    mov rax, 0x7670609a8110
0x767060bb25b1    4881c010000000          add rax, 0x10
0x767060bb25b8    4983c608                add r14, 0x8
0x767060bb25bc    498906                  mov [r14], rax
 ..       : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 = ..
0x767060bb25bf    b820000000              mov eax, 0x20
0x767060bb25c4    4983c608                add r14, 0x8
0x767060bb25c8    498906                  mov [r14], rax
 ..    : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =    ..
0x767060bb25cb    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb25d5    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb25df    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..    testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnar ..
0x767060bb25e2    48b810819a6070760000    mov rax, 0x7670609a8110
0x767060bb25ec    4881c010000000          add rax, 0x10
0x767060bb25f3    b901000000              mov ecx, 0x1
 .. estnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb25f8    488908                  mov [rax], rcx
 .. 2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb25fb    48b810819a6070760000    mov rax, 0x7670609a8110
 .. erence 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb2605    4881c018000000          add rax, 0x18
0x767060bb260c    b902000000              mov ecx, 0x2
 .. stnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb2611    488908                  mov [rax], rcx
 .. .nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb2614    48b810819a6070760000    mov rax, 0x7670609a8110
0x767060bb261e    4881c010000000          add rax, 0x10
0x767060bb2625    4983c608                add r14, 0x8
0x767060bb2629    498906                  mov [r14], rax
 .. erence 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb262c    b820000000              mov eax, 0x20
0x767060bb2631    4983c608                add r14, 0x8
0x767060bb2635    498906                  mov [r14], rax
 .. nce 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb2638    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2642    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb264c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. =      testnarr2.nodes [ 1 ] 32 dump  ;  ..
0x767060bb264f    c3                      ret
Word_Disassemble : word - 'tna' :: codeSize = 169
Word : 0x0000767060efe873 :: Compiled at : 0x0000767060bb25a7
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 90.17 <::

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x00007670609a8120 : Number = 32 :: (little endian dump)
0x00007670609a8120 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8130 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x00007670609a8120 : Number = 32 :: (little endian dump)
0x00007670609a8120 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a8130 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 =============================
DLLNodeAlloc.tnarr2a <:> csl compiled word
SourceCode for DLLNodeAlloc.tnarr2a :>
: tnarr2a ( this ) "tnarr2a" ps nl this . nodes [ 2 ].AfterReference 1 = this . nodes [ 2 ].BeforeReference 2 = this this.size @ dump ;
Source code file location of tnarr2a : "namespaces/test/arrayTest.csl" : 106.2 :: we are now at : namespaces/test/arrayTest.csl : 112.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb275b -- code size = 198 bytes
TypeSignature :
 -----------------------------
Word :: DLLNodeAlloc.tnarr2a : definition = 0x0000767060bb275b : disassembly at namespaces/test/arrayTest.csl : 112.21 :
0x767060bb275b    4d897e08                mov [r14+0x8], r15
0x767060bb275f    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2763    4981c608000000          add r14, 0x8
0x767060bb276a    48b8af6d8b6070760000    mov rax, 0x7670608b6daf       < string : 'tnarr2a' >
0x767060bb2774    4983c608                add r14, 0x8
0x767060bb2778    498906                  mov [r14], rax
 .. : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size ..
0x767060bb277b    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2785    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @  ..
0x767060bb2788    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb2792    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb279c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. 2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb279f    498b47f8                mov rax, [r15-0x8]
0x767060bb27a3    4881c020000000          add rax, 0x20
0x767060bb27aa    b901000000              mov ecx, 0x1
 ..   this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27af    488908                  mov [rax], rcx
 .. his . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27b2    498b47f8                mov rax, [r15-0x8]
 .. fterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27b6    4881c028000000          add rax, 0x28
0x767060bb27bd    b902000000              mov ecx, 0x2
 ..  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27c2    488908                  mov [rax], rcx
 .. is . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27c5    498b47f8                mov rax, [r15-0x8]
0x767060bb27c9    4881c000000000          add rax, 0x0
0x767060bb27d0    4983c608                add r14, 0x8
0x767060bb27d4    498906                  mov [r14], rax
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27d7    498b47f8                mov rax, [r15-0x8]
0x767060bb27db    4881c000000000          add rax, 0x0
0x767060bb27e2    4983c608                add r14, 0x8
0x767060bb27e6    498906                  mov [r14], rax
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb27e9    48b87bf7ed6070760000    mov rax, 0x767060edf77b
0x767060bb27f3    488b00                  mov rax, [rax]
0x767060bb27f6    4983c608                add r14, 0x8
0x767060bb27fa    498906                  mov [r14], rax
 .. BeforeReference 2 =  this this.size @ dump ;
0x767060bb27fd    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2807    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2811    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb2814    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2818    4d8b7e08                mov r15, [r14+0x8]
0x767060bb281c    4983ee08                sub r14, 0x8
 .. eReference 2 =  this this.size @ dump ;
0x767060bb2820    c3                      ret
Word_Disassemble : word - 'tnarr2a' :: codeSize = 198
Word : 0x0000767060f045b3 :: Compiled at : 0x0000767060bb275b
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 112.21 <::

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 tnarr2a

Dump at : namespaces/test/arrayTest.csl : 115.15 :
Dump : Address = 0x00007670609a8310 : Number = 512 :: (little endian dump)
0x00007670609a8310 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8320 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8330 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a8340 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8350 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8360 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8370 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8380 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8390 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a83a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a83b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a83c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a83d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a83e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a83f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8400 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8410 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8420 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8430 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8440 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8450 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8460 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8470 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8480 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8490 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a84a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a84b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a84c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a84d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a84e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a84f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8500 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna3 <:> csl compiled word
SourceCode for DLLNodeAlloc.tna3 :>
: tna3 ( this ) "tna3" ps this.nodes [ 2 ].AfterReference 1 = this.nodes [ 2 ].BeforeReference 2 = this this.size @ dump ;
Source code file location of tna3 : "namespaces/test/arrayTest.csl" : 119.2 :: we are now at : namespaces/test/arrayTest.csl : 129.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2826 -- code size = 175 bytes
TypeSignature :
 -----------------------------
Word :: DLLNodeAlloc.tna3 : definition = 0x0000767060bb2826 : disassembly at namespaces/test/arrayTest.csl : 129.9 :
0x767060bb2826    4d897e08                mov [r14+0x8], r15
0x767060bb282a    4d8d7e08                lea r15, [r14+0x8]
0x767060bb282e    4981c608000000          add r14, 0x8
0x767060bb2835    48b8a06e8b6070760000    mov rax, 0x7670608b6ea0       < string : 'tna3' >
0x767060bb283f    4983c608                add r14, 0x8
0x767060bb2843    498906                  mov [r14], rax
 ..        : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ..
0x767060bb2846    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2850    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..    : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;  ..
0x767060bb2853    498b47f8                mov rax, [r15-0x8]
0x767060bb2857    4881c020000000          add rax, 0x20
0x767060bb285e    b901000000              mov ecx, 0x1
 .. ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb2863    488908                  mov [rax], rcx
 ..  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb2866    498b47f8                mov rax, [r15-0x8]
 .. .AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb286a    4881c028000000          add rax, 0x28
0x767060bb2871    b902000000              mov ecx, 0x2
 .. =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb2876    488908                  mov [rax], rcx
 .. this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb2879    498b47f8                mov rax, [r15-0x8]
0x767060bb287d    4881c000000000          add rax, 0x0
0x767060bb2884    4983c608                add r14, 0x8
0x767060bb2888    498906                  mov [r14], rax
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb288b    498b47f8                mov rax, [r15-0x8]
0x767060bb288f    4881c000000000          add rax, 0x0
0x767060bb2896    4983c608                add r14, 0x8
0x767060bb289a    498906                  mov [r14], rax
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ;
0x767060bb289d    48b87bf7ed6070760000    mov rax, 0x767060edf77b
0x767060bb28a7    488b00                  mov rax, [rax]
0x767060bb28aa    4983c608                add r14, 0x8
0x767060bb28ae    498906                  mov [r14], rax
 .. BeforeReference 2 =  this this.size @ dump ;
0x767060bb28b1    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb28bb    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb28c5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb28c8    4d8d77f8                lea r14, [r15-0x8]
0x767060bb28cc    4d8b7e08                mov r15, [r14+0x8]
0x767060bb28d0    4983ee08                sub r14, 0x8
 .. eReference 2 =  this this.size @ dump ;
0x767060bb28d4    c3                      ret
Word_Disassemble : word - 'tna3' :: codeSize = 175
Word : 0x0000767060f0723b :: Compiled at : 0x0000767060bb2826
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 129.9 <::
 tna3
Dump at : namespaces/test/arrayTest.csl : 130.12 :
Dump : Address = 0x00007670609a8510 : Number = 512 :: (little endian dump)
0x00007670609a8510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8530 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a8540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8610 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8620 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8630 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8640 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8650 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8660 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8670 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8680 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8690 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8700 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x00007670609a8510 tnarr2

 0x00007670609a8510

Dump at : namespaces/test/arrayTest.csl : 133.14 :
Dump : Address = 0x00007670609a8510 : Number = 512 :: (little endian dump)
0x00007670609a8510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8530 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........
0x00007670609a8540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a85f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8610 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8620 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8630 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8640 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8650 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8660 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8670 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8680 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8690 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a86f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8700 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 =============================
DLLNodeAlloc.tnax1 <:> csl compiled word
SourceCode for DLLNodeAlloc.tnax1 :>
: tnax1 ( this ) this nl hp nl this.nodes[3].AfterReference 1 = this.nodes[4].BeforeReference 2 = this.nodes[3] hp this.nodes[3].AfterReference dup hp 16 dump this.nodes[4] hp this.nodes[4].BeforeReference dup hp 16 dump ;
Source code file location of tnax1 : "namespaces/test/arrayTest.csl" : 135.2 :: we are now at : namespaces/test/arrayTest.csl : 144.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb28da -- code size = 345 bytes
TypeSignature :
 -----------------------------
Word :: DLLNodeAlloc.tnax1 : definition = 0x0000767060bb28da : disassembly at namespaces/test/arrayTest.csl : 144.19 :
0x767060bb28da    4d897e08                mov [r14+0x8], r15
0x767060bb28de    4d8d7e08                lea r15, [r14+0x8]
0x767060bb28e2    4981c608000000          add r14, 0x8
0x767060bb28e9    498b47f8                mov rax, [r15-0x8]
0x767060bb28ed    4881c000000000          add rax, 0x0
0x767060bb28f4    4983c608                add r14, 0x8
0x767060bb28f8    498906                  mov [r14], rax
 ..         : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   th ..
0x767060bb28fb    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb2905    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb290f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..      : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this. ..
0x767060bb2912    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb291c    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..   : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nod ..
0x767060bb291f    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb2929    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2933    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
  : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3 ..
0x767060bb2936    498b47f8                mov rax, [r15-0x8]
0x767060bb293a    4881c030000000          add rax, 0x30
0x767060bb2941    b901000000              mov ecx, 0x1
 .. hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump ..
0x767060bb2946    488908                  mov [rax], rcx
 .. nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  t ..
0x767060bb2949    498b47f8                mov rax, [r15-0x8]
 .. [3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] h ..
0x767060bb294d    4881c048000000          add rax, 0x48
0x767060bb2954    b902000000              mov ecx, 0x2
 ..  1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4]. ..
0x767060bb2959    488908                  mov [rax], rcx
 .. =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].Bef ..
0x767060bb295c    498b47f8                mov rax, [r15-0x8]
0x767060bb2960    4881c030000000          add rax, 0x30
0x767060bb2967    4983c608                add r14, 0x8
0x767060bb296b    498906                  mov [r14], rax
 .. 4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference d ..
0x767060bb296e    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb2978    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. foreReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp ..
0x767060bb297b    498b47f8                mov rax, [r15-0x8]
0x767060bb297f    4881c030000000          add rax, 0x30
0x767060bb2986    4983c610                add r14, 0x10
0x767060bb298a    498906                  mov [r14], rax
 .. [3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb298d    498946f8                mov [r14-0x8], rax
 .. hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb2991    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb299b    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb299e    b810000000              mov eax, 0x10
0x767060bb29a3    4983c608                add r14, 0x8
0x767060bb29a7    498906                  mov [r14], rax
 .. his.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29aa    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb29b4    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb29be    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. des[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29c1    498b47f8                mov rax, [r15-0x8]
0x767060bb29c5    4881c040000000          add rax, 0x40
0x767060bb29cc    4983c608                add r14, 0x8
0x767060bb29d0    498906                  mov [r14], rax
 .. ference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29d3    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb29dd    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. ce dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29e0    498b47f8                mov rax, [r15-0x8]
 .. ump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29e4    4881c048000000          add rax, 0x48
0x767060bb29eb    4983c610                add r14, 0x10
0x767060bb29ef    498906                  mov [r14], rax
 .. 4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29f2    498946f8                mov [r14-0x8], rax
 .. p   this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb29f6    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb2a00    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..  this.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb2a03    b810000000              mov eax, 0x10
0x767060bb2a08    4983c608                add r14, 0x8
0x767060bb2a0c    498906                  mov [r14], rax
 .. is.nodes[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb2a0f    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2a19    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2a23    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb2a26    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2a2a    4d8b7e08                mov r15, [r14+0x8]
0x767060bb2a2e    4983ee08                sub r14, 0x8
 .. des[4].BeforeReference dup hp 16 dump ;  ..
0x767060bb2a32    c3                      ret
Word_Disassemble : word - 'tnax1' :: codeSize = 345
Word : 0x0000767060f099b3 :: Compiled at : 0x0000767060bb28da
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 144.19 <::

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 0x00007670609a8710
 0x00007670609a8740 0x00007670609a8740
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x00007670609a8740 : Number = 16 :: (little endian dump)
0x00007670609a8740 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x00007670609a8750 0x00007670609a8758
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x00007670609a8758 : Number = 16 :: (little endian dump)
0x00007670609a8758 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

_ClassTypedef : at namespaces/test/arrayTest.csl : 168.15 : token = class : cloneFlag = 0
 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :>
: arr2 ( Ar1 a ) a.b1 0x23 = a.c1 0x4567 = a.d1 0x456789 = a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ;
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 169.2 :: we are now at : namespaces/test/arrayTest.csl : 179.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2a38 -- code size = 227 bytes
TypeSignature : Object
 -----------------------------
Word :: Ar1.arr2 : definition = 0x0000767060bb2a38 : disassembly at namespaces/test/arrayTest.csl : 179.18 :
0x767060bb2a38    4d897e08                mov [r14+0x8], r15
0x767060bb2a3c    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2a40    4981c608000000          add r14, 0x8
0x767060bb2a47    498b47f8                mov rax, [r15-0x8]
0x767060bb2a4b    4881c000000000          add rax, 0x0
0x767060bb2a52    b923000000              mov ecx, 0x23
 ..       : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[ ..
0x767060bb2a57    488908                  mov [rax], rcx
0x767060bb2a5a    498b47f8                mov rax, [r15-0x8]
 : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup  ..
0x767060bb2a5e    4881c001000000          add rax, 0x1
0x767060bb2a65    b967450000              mov ecx, 0x4567
 .. a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p  ..
0x767060bb2a6a    488908                  mov [rax], rcx
0x767060bb2a6d    498b47f8                mov rax, [r15-0x8]
 ..  a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _as ..
0x767060bb2a71    4881c003000000          add rax, 0x3
0x767060bb2a78    b989674500              mov ecx, 0x456789
 ..       a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2a7d    488908                  mov [rax], rcx
0x767060bb2a80    498b47f8                mov rax, [r15-0x8]
 .. c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2a84    4881c00f000000          add rax, 0xf
 .. 567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2a8b    498b4ff8                mov rcx, [r15-0x8]
0x767060bb2a8f    4881c11f000000          add rcx, 0x1f
 .. 7 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2a96    488b09                  mov rcx, [rcx]
 .. a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2a99    488908                  mov [rax], rcx
0x767060bb2a9c    498b47f8                mov rax, [r15-0x8]
 .. 6789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2aa0    4881c017000000          add rax, 0x17
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2aa7    498b4ff8                mov rcx, [r15-0x8]
0x767060bb2aab    4881c11f000000          add rcx, 0x1f
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2ab2    488b09                  mov rcx, [rcx]
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2ab5    488908                  mov [rax], rcx
0x767060bb2ab8    498b47f8                mov rax, [r15-0x8]
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2abc    4881c00f000000          add rax, 0xf
0x767060bb2ac3    488b00                  mov rax, [rax]
0x767060bb2ac6    4983c610                add r14, 0x10
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2aca    498906                  mov [r14], rax
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2acd    498946f8                mov [r14-0x8], rax
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2ad1    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bb2adb    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2ae5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2ae8    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb2af2    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2af5    b889000000              mov eax, 0x89
0x767060bb2afa    4983c608                add r14, 0x8
0x767060bb2afe    498906                  mov [r14], rax
0x767060bb2b01    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2b0b    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb2b0e    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2b12    4d8b7e08                mov r15, [r14+0x8]
0x767060bb2b16    4983ee08                sub r14, 0x8
 .. a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2b1a    c3                      ret
Word_Disassemble : word - 'arr2' :: codeSize = 227
Word : 0x0000767060f104eb :: Compiled at : 0x0000767060bb2a38
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 179.18 <::

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 arr1 :  namespaces/test/arrayTest.csl 181.22
Dump at : namespaces/test/arrayTest.csl : 181.39 :
Dump : Address = 0x00007670609a8910 : Number = 39 :: (little endian dump)
0x00007670609a8910 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8920 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 arr1 :  namespaces/test/arrayTest.csl 186.22
Dump at : namespaces/test/arrayTest.csl : 186.39 :
Dump : Address = 0x00007670609a8910 : Number = 39 :: (little endian dump)
0x00007670609a8910 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8920 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 89  ........ ........
0x00007670609a8930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 137
 =============================
Ar1.arr3 <:> csl compiled word
SourceCode for Ar1.arr3 :>
: arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;
Source code file location of arr3 : "namespaces/test/arrayTest.csl" : 191.2 :: we are now at : namespaces/test/arrayTest.csl : 191.99
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2b20 -- code size = 167 bytes
TypeSignature : Object
 -----------------------------
Word :: Ar1.arr3 : definition = 0x0000767060bb2b20 : disassembly at namespaces/test/arrayTest.csl : 191.99 :
0x767060bb2b20    4d897e08                mov [r14+0x8], r15
0x767060bb2b24    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2b28    4981c608000000          add r14, 0x8
 ..                      : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  ..
0x767060bb2b2f    498b47f8                mov rax, [r15-0x8]
0x767060bb2b33    488b00                  mov rax, [rax]
0x767060bb2b36    4983c608                add r14, 0x8
0x767060bb2b3a    480fb6c0                movzx rax, al
0x767060bb2b3e    498906                  mov [r14], rax
 ..              : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  ..
0x767060bb2b41    b823000000              mov eax, 0x23
0x767060bb2b46    4983c608                add r14, 0x8
0x767060bb2b4a    498906                  mov [r14], rax
0x767060bb2b4d    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2b57    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 .. : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  ..
0x767060bb2b5a    498b47f8                mov rax, [r15-0x8]
  : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  ..
0x767060bb2b5e    4881c001000000          add rax, 0x1
0x767060bb2b65    488b00                  mov rax, [rax]
0x767060bb2b68    4983c608                add r14, 0x8
0x767060bb2b6c    480fb7c0                movzx rax, ax
0x767060bb2b70    498906                  mov [r14], rax
 .. Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;
0x767060bb2b73    b867450000              mov eax, 0x4567
0x767060bb2b78    4983c608                add r14, 0x8
0x767060bb2b7c    498906                  mov [r14], rax
0x767060bb2b7f    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2b89    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 ..  0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;
0x767060bb2b8c    498b47f8                mov rax, [r15-0x8]
 .. x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;
0x767060bb2b90    4881c003000000          add rax, 0x3
0x767060bb2b97    488b00                  mov rax, [rax]
0x767060bb2b9a    4983c608                add r14, 0x8
0x767060bb2b9e    498906                  mov [r14], rax
 .. sert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;
0x767060bb2ba1    b889674500              mov eax, 0x456789
0x767060bb2ba6    4983c608                add r14, 0x8
0x767060bb2baa    498906                  mov [r14], rax
0x767060bb2bad    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2bb7    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb2bba    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2bbe    4d8b7e08                mov r15, [r14+0x8]
0x767060bb2bc2    4983ee08                sub r14, 0x8
 .. 567 _assert a.d1 32@ 0x456789 _assert ;
0x767060bb2bc6    c3                      ret
Word_Disassemble : word - 'arr3' :: codeSize = 167
Word : 0x0000767060f15693 :: Compiled at : 0x0000767060bb2b20
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 191.99 <::

arr1 :  namespaces/test/arrayTest.csl 192.24
Dump at : namespaces/test/arrayTest.csl : 192.41 :
Dump : Address = 0x00007670609a8910 : Number = 39 :: (little endian dump)
0x00007670609a8910 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........
0x00007670609a8920 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........
0x00007670609a8930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :>
: arr2 ( Ar1 a ) a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ;
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 196.2 :: we are now at : namespaces/test/arrayTest.csl : 204.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2bcc -- code size = 170 bytes
TypeSignature : Object
 -----------------------------
Word :: Ar1.arr2 : definition = 0x0000767060bb2bcc : disassembly at namespaces/test/arrayTest.csl : 204.18 :
0x767060bb2bcc    4d897e08                mov [r14+0x8], r15
0x767060bb2bd0    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2bd4    4981c608000000          add r14, 0x8
0x767060bb2bdb    498b47f8                mov rax, [r15-0x8]
 ..         : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2bdf    4881c00f000000          add rax, 0xf
 ..   : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2be6    498b4ff8                mov rcx, [r15-0x8]
0x767060bb2bea    4881c11f000000          add rcx, 0x1f
 .. : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  ..
0x767060bb2bf1    488b09                  mov rcx, [rcx]
 ..  Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2bf4    488908                  mov [rax], rcx
0x767060bb2bf7    498b47f8                mov rax, [r15-0x8]
 ..            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2bfb    4881c017000000          add rax, 0x17
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c02    498b4ff8                mov rcx, [r15-0x8]
0x767060bb2c06    4881c11f000000          add rcx, 0x1f
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c0d    488b09                  mov rcx, [rcx]
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c10    488908                  mov [rax], rcx
0x767060bb2c13    498b47f8                mov rax, [r15-0x8]
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c17    4881c00f000000          add rax, 0xf
0x767060bb2c1e    488b00                  mov rax, [rax]
0x767060bb2c21    4983c610                add r14, 0x10
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c25    498906                  mov [r14], rax
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c28    498946f8                mov [r14-0x8], rax
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c2c    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bb2c36    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2c40    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c43    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb2c4d    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c50    b889000000              mov eax, 0x89
0x767060bb2c55    4983c608                add r14, 0x8
0x767060bb2c59    498906                  mov [r14], rax
0x767060bb2c5c    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2c66    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb2c69    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2c6d    4d8b7e08                mov r15, [r14+0x8]
0x767060bb2c71    4983ee08                sub r14, 0x8
 .. a.ar[1] @ dup decimal p 0x89 _assert  ;
0x767060bb2c75    c3                      ret
Word_Disassemble : word - 'arr2' :: codeSize = 170
Word : 0x0000767060f16cf3 :: Compiled at : 0x0000767060bb2bcc
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 204.18 <::
 137
arr1 :  namespaces/test/arrayTest.csl 206.24
Dump at : namespaces/test/arrayTest.csl : 206.41 :
Dump : Address = 0x00007670609a8910 : Number = 39 :: (little endian dump)
0x00007670609a8910 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........
0x00007670609a8920 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........
0x00007670609a8930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

DataStack at : namespaces/test/arrayTest.csl : 207.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Ar1.a3 <:> csl compiled word
SourceCode for Ar1.a3 :>
: a3 ( n Ar1 a ) a.ar [n @ 1 +] a.ar[n @ 2 +] @ = a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal a.ar[2] @ dup hp 0x89 _assert decimal ;
Source code file location of a3 : "namespaces/test/arrayTest.csl" : 208.2 :: we are now at : namespaces/test/arrayTest.csl : 213.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2c7b -- code size = 340 bytes
TypeSignature :
 -----------------------------
Word :: Ar1.a3 : definition = 0x0000767060bb2c7b : disassembly at namespaces/test/arrayTest.csl : 213.16 :
0x767060bb2c7b    4d897e08                mov [r14+0x8], r15
0x767060bb2c7f    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2c83    4981c608000000          add r14, 0x8
0x767060bb2c8a    498b47f8                mov rax, [r15-0x8]
 ..               : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup h ..
0x767060bb2c8e    4881c007000000          add rax, 0x7
0x767060bb2c95    4983c608                add r14, 0x8
0x767060bb2c99    498906                  mov [r14], rax
 ..           : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x ..
0x767060bb2c9c    498b47f0                mov rax, [r15-0x10]
 ..       : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _ ..
0x767060bb2ca0    b901000000              mov ecx, 0x1
0x767060bb2ca5    4803c1                  add rax, rcx
0x767060bb2ca8    486bc008                imul rax, rax, 0x8
 ..     : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _as ..
0x767060bb2cac    490106                  add [r14], rax
 ..  : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _asser ..
0x767060bb2caf    498b47f8                mov rax, [r15-0x8]
   : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert  ..
0x767060bb2cb3    4881c007000000          add rax, 0x7
0x767060bb2cba    4983c608                add r14, 0x8
0x767060bb2cbe    498906                  mov [r14], rax
: a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert dec ..
0x767060bb2cc1    498b47f0                mov rax, [r15-0x10]
 ..  Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2cc5    b902000000              mov ecx, 0x2
0x767060bb2cca    4803c1                  add rax, rcx
0x767060bb2ccd    486bc008                imul rax, rax, 0x8
 .. r1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2cd1    490106                  add [r14], rax
 .. a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2cd4    498b06                  mov rax, [r14]
0x767060bb2cd7    488b00                  mov rax, [rax]
0x767060bb2cda    498906                  mov [r14], rax
 .. )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2cdd    498b0e                  mov rcx, [r14]
0x767060bb2ce0    498b46f8                mov rax, [r14-0x8]
0x767060bb2ce4    488908                  mov [rax], rcx
0x767060bb2ce7    4983ee10                sub r14, 0x10
0x767060bb2ceb    498b47f8                mov rax, [r15-0x8]
 .. ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2cef    4881c007000000          add rax, 0x7
0x767060bb2cf6    4983c608                add r14, 0x8
0x767060bb2cfa    498906                  mov [r14], rax
 .. n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2cfd    498b47f0                mov rax, [r15-0x10]
 .. 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d01    b901000000              mov ecx, 0x1
0x767060bb2d06    4803c1                  add rax, rcx
0x767060bb2d09    486bc008                imul rax, rax, 0x8
 .. +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d0d    490106                  add [r14], rax
 .. a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d10    498b06                  mov rax, [r14]
0x767060bb2d13    488b00                  mov rax, [rax]
0x767060bb2d16    498906                  mov [r14], rax
 .. ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d19    498b06                  mov rax, [r14]
0x767060bb2d1c    4983c608                add r14, 0x8
0x767060bb2d20    498906                  mov [r14], rax
 ..  @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d23    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb2d2d    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d30    b889000000              mov eax, 0x89
0x767060bb2d35    4983c608                add r14, 0x8
0x767060bb2d39    498906                  mov [r14], rax
0x767060bb2d3c    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2d46    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 ..  a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d49    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bb2d53    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2d5d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb2d60    498b47f8                mov rax, [r15-0x8]
 .. ] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d64    4881c017000000          add rax, 0x17
0x767060bb2d6b    4983c608                add r14, 0x8
0x767060bb2d6f    498906                  mov [r14], rax
 .. p hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d72    498b06                  mov rax, [r14]
0x767060bb2d75    488b00                  mov rax, [rax]
0x767060bb2d78    498906                  mov [r14], rax
 .. hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d7b    498b06                  mov rax, [r14]
0x767060bb2d7e    4983c608                add r14, 0x8
0x767060bb2d82    498906                  mov [r14], rax
 .. x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d85    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb2d8f    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..  _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2d92    b889000000              mov eax, 0x89
0x767060bb2d97    4983c608                add r14, 0x8
0x767060bb2d9b    498906                  mov [r14], rax
0x767060bb2d9e    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2da8    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 .. mal     a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2dab    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bb2db5    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2dbf    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb2dc2    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2dc6    4d8b7e08                mov r15, [r14+0x8]
0x767060bb2dca    4983ee10                sub r14, 0x10
 .. a.ar[2] @ dup hp 0x89 _assert decimal ;
0x767060bb2dce    c3                      ret
Word_Disassemble : word - 'a3' :: codeSize = 340
Word : 0x0000767060f1aa23 :: Compiled at : 0x0000767060bb2c7b
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 213.16 <::
 0x0000000000000089 0x0000000000000089
_ClassTypedef : at namespaces/test/arrayTest.csl : 217.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 219.20
Dump at : namespaces/test/arrayTest.csl : 219.35 :
Dump : Address = 0x00007670609a8937 : Number = 128 :: (little endian dump)
0x00007670609a8937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8987 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89a7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

should show all 0's a4 :  namespaces/test/arrayTest.csl 222.20
Dump at : namespaces/test/arrayTest.csl : 222.35 :
Dump : Address = 0x00007670609a8937 : Number = 128 :: (little endian dump)
0x00007670609a8937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8987 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

should show all 0's with one 0x89 - can you find it?
 =============================
Ar2.a5 <:> csl compiled word
SourceCode for Ar2.a5 :>
: a5 ( n m Ar2 a ) a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ = nl "a4 : " ps location a a.size @ dump a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert ;
Source code file location of a5 : "namespaces/test/arrayTest.csl" : 224.2 :: we are now at : namespaces/test/arrayTest.csl : 229.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2dd4 -- code size = 397 bytes
TypeSignature :
 -----------------------------
Word :: Ar2.a5 : definition = 0x0000767060bb2dd4 : disassembly at namespaces/test/arrayTest.csl : 229.16 :
0x767060bb2dd4    4d897e08                mov [r14+0x8], r15
0x767060bb2dd8    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2ddc    4981c608000000          add r14, 0x8
0x767060bb2de3    498b47f8                mov rax, [r15-0x8]
0x767060bb2de7    4881c000000000          add rax, 0x0
0x767060bb2dee    4983c608                add r14, 0x8
0x767060bb2df2    498906                  mov [r14], rax
 ..          : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m ..
0x767060bb2df5    498b47e8                mov rax, [r15-0x18]
 ..      : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @]  ..
0x767060bb2df9    b901000000              mov ecx, 0x1
0x767060bb2dfe    4803c1                  add rax, rcx
0x767060bb2e01    486bc020                imul rax, rax, 0x20
 ..    : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @  ..
0x767060bb2e05    490106                  add [r14], rax
 .. : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup ..
0x767060bb2e08    498b47f0                mov rax, [r15-0x10]
0x767060bb2e0c    486bc008                imul rax, rax, 0x8
  : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup h ..
0x767060bb2e10    490106                  add [r14], rax
 .. ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0 ..
0x767060bb2e13    498b47f8                mov rax, [r15-0x8]
0x767060bb2e17    4881c000000000          add rax, 0x0
0x767060bb2e1e    4983c608                add r14, 0x8
0x767060bb2e22    498906                  mov [r14], rax
 ..  Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _ ..
0x767060bb2e25    498b47e8                mov rax, [r15-0x18]
 ..  a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _asse ..
0x767060bb2e29    b902000000              mov ecx, 0x2
0x767060bb2e2e    4803c1                  add rax, rcx
0x767060bb2e31    486bc020                imul rax, rax, 0x20
 ..  )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert ..
0x767060bb2e35    490106                  add [r14], rax
 ..      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ; ..
0x767060bb2e38    498b47f0                mov rax, [r15-0x10]
0x767060bb2e3c    486bc008                imul rax, rax, 0x8
 ..    a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e40    490106                  add [r14], rax
 .. a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e43    498b06                  mov rax, [r14]
0x767060bb2e46    488b00                  mov rax, [rax]
0x767060bb2e49    498906                  mov [r14], rax
 .. ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e4c    498b0e                  mov rcx, [r14]
0x767060bb2e4f    498b46f8                mov rax, [r14-0x8]
0x767060bb2e53    488908                  mov [rax], rcx
0x767060bb2e56    4983ee10                sub r14, 0x10
0x767060bb2e5a    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb2e64    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2e6e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e71    48b885758b6070760000    mov rax, 0x7670608b7585       < string : 'a4 : ' >
0x767060bb2e7b    4983c608                add r14, 0x8
0x767060bb2e7f    498906                  mov [r14], rax
 .. .ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e82    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2e8c    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. [n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e8f    49bbdd9eba6070760000    mov r11, 0x767060ba9edd
0x767060bb2e99    49ffd3                  call r11                      < System.location : 0x0000767060ba9edd >
 .. [m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2e9c    498b47f8                mov rax, [r15-0x8]
0x767060bb2ea0    4881c000000000          add rax, 0x0
0x767060bb2ea7    4983c608                add r14, 0x8
0x767060bb2eab    498906                  mov [r14], rax
 ..  @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2eae    498b47f8                mov rax, [r15-0x8]
0x767060bb2eb2    4881c000000000          add rax, 0x0
0x767060bb2eb9    4983c608                add r14, 0x8
0x767060bb2ebd    498906                  mov [r14], rax
 .. ] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2ec0    48b87bebf16070760000    mov rax, 0x767060f1eb7b
0x767060bb2eca    488b00                  mov rax, [rax]
0x767060bb2ecd    4983c608                add r14, 0x8
0x767060bb2ed1    498906                  mov [r14], rax
 ..     nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2ed4    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb2ede    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2ee8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb2eeb    498b47f8                mov rax, [r15-0x8]
0x767060bb2eef    4881c000000000          add rax, 0x0
0x767060bb2ef6    4983c608                add r14, 0x8
0x767060bb2efa    498906                  mov [r14], rax
 ..  ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2efd    498b47e8                mov rax, [r15-0x18]
 .. location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f01    b901000000              mov ecx, 0x1
0x767060bb2f06    4803c1                  add rax, rcx
0x767060bb2f09    486bc020                imul rax, rax, 0x20
 .. cation a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f0d    490106                  add [r14], rax
 .. ion a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f10    498b47f0                mov rax, [r15-0x10]
0x767060bb2f14    486bc008                imul rax, rax, 0x8
 .. n a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f18    490106                  add [r14], rax
 ..  a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f1b    498b06                  mov rax, [r14]
0x767060bb2f1e    488b00                  mov rax, [rax]
0x767060bb2f21    498906                  mov [r14], rax
 .. .size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f24    498b06                  mov rax, [r14]
0x767060bb2f27    4983c608                add r14, 0x8
0x767060bb2f2b    498906                  mov [r14], rax
 .. e @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f2e    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb2f38    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..  dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f3b    b889000000              mov eax, 0x89
0x767060bb2f40    4983c608                add r14, 0x8
0x767060bb2f44    498906                  mov [r14], rax
0x767060bb2f47    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb2f51    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb2f54    4d8d77f8                lea r14, [r15-0x8]
0x767060bb2f58    4d8b7e08                mov r15, [r14+0x8]
0x767060bb2f5c    4983ee18                sub r14, 0x18
 .. [n @ 1 +][m @] @ dup hp 0x89 _assert  ;  ..
0x767060bb2f60    c3                      ret
Word_Disassemble : word - 'a5' :: codeSize = 397
Word : 0x0000767060f1f553 :: Compiled at : 0x0000767060bb2dd4
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 229.16 <::

 a4 :  namespaces/test/arrayTest.csl 231.10
Dump at : namespaces/test/arrayTest.csl : 231.10 :
Dump : Address = 0x00007670609a8937 : Number = 128 :: (little endian dump)
0x00007670609a8937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8987 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 231.12 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 232.20
Dump at : namespaces/test/arrayTest.csl : 232.32 :
Dump : Address = 0x00007670609a8937 : Number = 128 :: (little endian dump)
0x00007670609a8937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8987 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

should show all 0's with one 0x89 - can you find it?
_ClassTypedef : at namespaces/test/arrayTest.csl : 234.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 235.11 :
DataStack depth =   4 : Dsp (R14) = Top = 0x000076705fbb2ad8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad8 > = 0x00007670608b772c       < string : 'a6' >
  DataStack   [  -1 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 0x00007670609a8a7f 0x00007670609a8a7f 0x0000000000000089 0x00007670609a8a7f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 243.20
Dump at : namespaces/test/arrayTest.csl : 243.38 :
Dump : Address = 0x00007670609a89b7 : Number = 144 :: (little endian dump)
0x00007670609a89b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a37 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 0x00007670609a8a7f 0x00007670609a8a7f 0x0000000000000089
 0x00007670609a8a37
DataStack at : namespaces/test/arrayTest.csl : 247.42 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x00007670609a8a7f
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x00007670609a8a37
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 0x00007670609a8a7f 0x00007670609a8a7f 0x0000000000000089
 a6 :  namespaces/test/arrayTest.csl 250.23
Dump at : namespaces/test/arrayTest.csl : 250.38 :
Dump : Address = 0x00007670609a89b7 : Number = 144 :: (little endian dump)
0x00007670609a89b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 137 0x00007670609a8a7f 0x0000000000000089 0x00007670609a8a37 0x0000000000000089 0x00007670609a8a37 0x0000000000000089 0x00007670609a8a37 0x0000000000000000
 a6 :  namespaces/test/arrayTest.csl 258.23
Dump at : namespaces/test/arrayTest.csl : 258.43 :
Dump : Address = 0x00007670609a8a2f : Number = 16 :: (little endian dump)
0x00007670609a8a2f :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 =============================
Ar3.a8 <:> csl compiled word
SourceCode for Ar3.a8 :>
: a8 ( Ar3 a ) a.ar[1][2][1] a.ar[2][2][1] @ = nl "a8.a : " ps location a size @ dump a.ar[1][2][1] dup hp @ dup hp 0x89 _assert a.ar[2][2][1] dup hp @ dup hp 0x89 _assert ;
Source code file location of a8 : "namespaces/test/arrayTest.csl" : 260.2 :: we are now at : namespaces/test/arrayTest.csl : 271.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb2f66 -- code size = 367 bytes
TypeSignature : Object
 -----------------------------
Word :: Ar3.a8 : definition = 0x0000767060bb2f66 : disassembly at namespaces/test/arrayTest.csl : 271.16 :
0x767060bb2f66    4d897e08                mov [r14+0x8], r15
0x767060bb2f6a    4d8d7e08                lea r15, [r14+0x8]
0x767060bb2f6e    4981c608000000          add r14, 0x8
0x767060bb2f75    498b47f8                mov rax, [r15-0x8]
0x767060bb2f79    4881c080000000          add rax, 0x80
 ..     : a8 ( Ar3 a )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 ..
0x767060bb2f80    498b4ff8                mov rcx, [r15-0x8]
0x767060bb2f84    4881c1c8000000          add rcx, 0xc8
0x767060bb2f8b    488b09                  mov rcx, [rcx]
 ..  )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a. ..
0x767060bb2f8e    488908                  mov [rax], rcx
0x767060bb2f91    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb2f9b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb2fa5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1 ..
0x767060bb2fa8    48b827788b6070760000    mov rax, 0x7670608b7827       < string : 'a8.a : ' >
0x767060bb2fb2    4983c608                add r14, 0x8
0x767060bb2fb6    498906                  mov [r14], rax
 .. ] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ ..
0x767060bb2fb9    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb2fc3    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. .ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ du ..
0x767060bb2fc6    49bbdd9eba6070760000    mov r11, 0x767060ba9edd
0x767060bb2fd0    49ffd3                  call r11                      < System.location : 0x0000767060ba9edd >
 .. [1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 ..
0x767060bb2fd3    498b47f8                mov rax, [r15-0x8]
0x767060bb2fd7    4881c000000000          add rax, 0x0
0x767060bb2fde    4983c608                add r14, 0x8
0x767060bb2fe2    498906                  mov [r14], rax
 .. ] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _ ..
0x767060bb2fe5    48b81b3ff26070760000    mov rax, 0x767060f23f1b
0x767060bb2fef    488b00                  mov rax, [rax]
0x767060bb2ff2    4983c608                add r14, 0x8
0x767060bb2ff6    498906                  mov [r14], rax
 ..     nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ..
0x767060bb2ff9    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb3003    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb300d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb3010    498b47f8                mov rax, [r15-0x8]
0x767060bb3014    4881c080000000          add rax, 0x80
0x767060bb301b    4983c610                add r14, 0x10
0x767060bb301f    498906                  mov [r14], rax
 .. ation a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3022    498946f8                mov [r14-0x8], rax
 .. n a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3026    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb3030    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..  size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3033    498b06                  mov rax, [r14]
0x767060bb3036    488b00                  mov rax, [rax]
0x767060bb3039    498906                  mov [r14], rax
 .. ize @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb303c    498b06                  mov rax, [r14]
0x767060bb303f    4983c608                add r14, 0x8
0x767060bb3043    498906                  mov [r14], rax
 .. @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3046    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb3050    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. ump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3053    b889000000              mov eax, 0x89
0x767060bb3058    4983c608                add r14, 0x8
0x767060bb305c    498906                  mov [r14], rax
0x767060bb305f    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb3069    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb306c    498b47f8                mov rax, [r15-0x8]
0x767060bb3070    4881c0c8000000          add rax, 0xc8
0x767060bb3077    4983c610                add r14, 0x10
0x767060bb307b    498906                  mov [r14], rax
 .. up hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb307e    498946f8                mov [r14-0x8], rax
 .. p 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3082    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb308c    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb308f    498b06                  mov rax, [r14]
0x767060bb3092    488b00                  mov rax, [rax]
0x767060bb3095    498906                  mov [r14], rax
 .. 9 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb3098    498b06                  mov rax, [r14]
0x767060bb309b    4983c608                add r14, 0x8
0x767060bb309f    498906                  mov [r14], rax
 .. ssert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb30a2    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb30ac    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. rt      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb30af    b889000000              mov eax, 0x89
0x767060bb30b4    4983c608                add r14, 0x8
0x767060bb30b8    498906                  mov [r14], rax
0x767060bb30bb    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb30c5    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb30c8    4d8d77f8                lea r14, [r15-0x8]
0x767060bb30cc    4d8b7e08                mov r15, [r14+0x8]
0x767060bb30d0    4983ee08                sub r14, 0x8
 .. ][2][1] dup hp @ dup hp 0x89 _assert  ;  ..
0x767060bb30d4    c3                      ret
Word_Disassemble : word - 'a8' :: codeSize = 367
Word : 0x0000767060f2876b :: Compiled at : 0x0000767060bb2f66
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 271.16 <::
 0x00007670609a8a7f 137 a6 :  namespaces/test/arrayTest.csl 274.20
Dump at : namespaces/test/arrayTest.csl : 274.43 :
Dump : Address = 0x00007670609a8a7f : Number = 16 :: (little endian dump)
0x00007670609a8a7f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 a8.a :  namespaces/test/arrayTest.csl 275.6
Dump at : namespaces/test/arrayTest.csl : 275.6 :
Dump : Address = 0x00007670609a89b7 : Number = 144 :: (little endian dump)
0x00007670609a89b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x00007670609a8a37 0x0000000000000089 0x00007670609a8a7f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 276.20
Dump at : namespaces/test/arrayTest.csl : 276.43 :
Dump : Address = 0x00007670609a8a7f : Number = 16 :: (little endian dump)
0x00007670609a8a7f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 =============================
Ar3.a7 <:> csl compiled word, prefix
SourceCode for Ar3.a7 :>
: a7 ( n, m, o, Ar3 a ) a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ = nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;
Source code file location of a7 : "namespaces/test/arrayTest.csl" : 277.2 :: we are now at : namespaces/test/arrayTest.csl : 283.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb30da -- code size = 468 bytes
TypeSignature :
 -----------------------------
Word :: Ar3.a7 : definition = 0x0000767060bb30da : disassembly at namespaces/test/arrayTest.csl : 283.16 :
0x767060bb30da    4d897e08                mov [r14+0x8], r15
0x767060bb30de    4d8d7e08                lea r15, [r14+0x8]
0x767060bb30e2    4981c608000000          add r14, 0x8
0x767060bb30e9    498b47f8                mov rax, [r15-0x8]
0x767060bb30ed    4881c000000000          add rax, 0x0
0x767060bb30f4    4983c608                add r14, 0x8
0x767060bb30f8    498906                  mov [r14], rax
 ..     : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] ..
0x767060bb30fb    498b47e0                mov rax, [r15-0x20]
 .. : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16  ..
0x767060bb30ff    b901000000              mov ecx, 0x1
0x767060bb3104    4803c1                  add rax, rcx
0x767060bb3107    486bc048                imul rax, rax, 0x48
  : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 du ..
0x767060bb310b    490106                  add [r14], rax
 .. ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump  ..
0x767060bb310e    498b47e8                mov rax, [r15-0x18]
0x767060bb3112    486bc018                imul rax, rax, 0x18
 .. n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump    ..
0x767060bb3116    490106                  add [r14], rax
 .. m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump       ..
0x767060bb3119    498b47f0                mov rax, [r15-0x10]
0x767060bb311d    486bc008                imul rax, rax, 0x8
 ..  o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump         ..
0x767060bb3121    490106                  add [r14], rax
 ..  Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.a ..
0x767060bb3124    498b47f8                mov rax, [r15-0x8]
0x767060bb3128    4881c000000000          add rax, 0x0
0x767060bb312f    4983c608                add r14, 0x8
0x767060bb3133    498906                  mov [r14], rax
 .. a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ ..
0x767060bb3136    498b47e0                mov rax, [r15-0x20]
 ..      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 + ..
0x767060bb313a    b902000000              mov ecx, 0x2
0x767060bb313f    4803c1                  add rax, rcx
0x767060bb3142    486bc048                imul rax, rax, 0x48
 ..    a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][ ..
0x767060bb3146    490106                  add [r14], rax
 .. a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @ ..
0x767060bb3149    498b47e8                mov rax, [r15-0x18]
0x767060bb314d    486bc018                imul rax, rax, 0x18
 .. ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][ ..
0x767060bb3151    490106                  add [r14], rax
 .. n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @ ..
0x767060bb3154    498b47f0                mov rax, [r15-0x10]
0x767060bb3158    486bc008                imul rax, rax, 0x8
 .. @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @]  ..
0x767060bb315c    490106                  add [r14], rax
 ..  +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ d ..
0x767060bb315f    498b06                  mov rax, [r14]
0x767060bb3162    488b00                  mov rax, [rax]
0x767060bb3165    498906                  mov [r14], rax
 .. ][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup ..
0x767060bb3168    498b0e                  mov rcx, [r14]
0x767060bb316b    498b46f8                mov rax, [r14-0x8]
0x767060bb316f    488908                  mov [rax], rcx
0x767060bb3172    4983ee10                sub r14, 0x10
0x767060bb3176    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb3180    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb318a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s ..
0x767060bb318d    48b87f798b6070760000    mov rax, 0x7670608b797f       < string : 'a7.a : ' >
0x767060bb3197    4983c608                add r14, 0x8
0x767060bb319b    498906                  mov [r14], rax
 ..  2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;; ..
0x767060bb319e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb31a8    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31ab    49bbdd9eba6070760000    mov r11, 0x767060ba9edd
0x767060bb31b5    49ffd3                  call r11                      < System.location : 0x0000767060ba9edd >
 ..  @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31b8    498b47f8                mov rax, [r15-0x8]
0x767060bb31bc    4881c000000000          add rax, 0x0
0x767060bb31c3    4983c608                add r14, 0x8
0x767060bb31c7    498906                  mov [r14], rax
 ..  =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31ca    498b47e0                mov rax, [r15-0x20]
 ..     nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31ce    b901000000              mov ecx, 0x1
0x767060bb31d3    4803c1                  add rax, rcx
0x767060bb31d6    486bc048                imul rax, rax, 0x48
 ..   nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31da    490106                  add [r14], rax
 .. l "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31dd    498b47e8                mov rax, [r15-0x18]
0x767060bb31e1    486bc018                imul rax, rax, 0x18
 .. "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31e5    490106                  add [r14], rax
 .. .a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31e8    498b47f0                mov rax, [r15-0x10]
0x767060bb31ec    486bc008                imul rax, rax, 0x8
 ..  : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31f0    490106                  add [r14], rax
 .. " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31f3    b810000000              mov eax, 0x10
0x767060bb31f8    4983c608                add r14, 0x8
0x767060bb31fc    498906                  mov [r14], rax
 .. s location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb31ff    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb3209    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb3213    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb3216    498b47f8                mov rax, [r15-0x8]
0x767060bb321a    4881c000000000          add rax, 0x0
0x767060bb3221    4983c608                add r14, 0x8
0x767060bb3225    498906                  mov [r14], rax
 ..  @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3228    498b47e0                mov rax, [r15-0x20]
 ..  +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb322c    b901000000              mov ecx, 0x1
0x767060bb3231    4803c1                  add rax, rcx
0x767060bb3234    486bc048                imul rax, rax, 0x48
 .. ][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3238    490106                  add [r14], rax
 ..  @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb323b    498b47e8                mov rax, [r15-0x18]
0x767060bb323f    486bc018                imul rax, rax, 0x18
 .. ][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3243    490106                  add [r14], rax
 ..  @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3246    498b47f0                mov rax, [r15-0x10]
0x767060bb324a    486bc008                imul rax, rax, 0x8
 .. ] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb324e    490106                  add [r14], rax
 .. 6 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3251    498b06                  mov rax, [r14]
0x767060bb3254    488b00                  mov rax, [rax]
0x767060bb3257    498906                  mov [r14], rax
 .. dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb325a    498b06                  mov rax, [r14]
0x767060bb325d    4983c608                add r14, 0x8
0x767060bb3261    498906                  mov [r14], rax
 ..         a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3264    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb326e    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..      a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb3271    b889000000              mov eax, 0x89
0x767060bb3276    4983c608                add r14, 0x8
0x767060bb327a    498906                  mov [r14], rax
 .. a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb327d    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb3287    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb3291    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb3294    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb329e    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb32a1    4d8d77f8                lea r14, [r15-0x8]
0x767060bb32a5    4d8b7e08                mov r15, [r14+0x8]
0x767060bb32a9    4983ee20                sub r14, 0x20
 .. 1 +][m @][o @] @ dup hp 0x89 s _assert;;  ..
0x767060bb32ad    c3                      ret
Word_Disassemble : word - 'a7' :: codeSize = 468
Word : 0x0000767060f2eb6b :: Compiled at : 0x0000767060bb30da
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 283.16 <::
 a6 :  namespaces/test/arrayTest.csl 285.20
Dump at : namespaces/test/arrayTest.csl : 285.43 :
Dump : Address = 0x00007670609a8a7f : Number = 16 :: (little endian dump)
0x00007670609a8a7f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

 a7.a :  namespaces/test/arrayTest.csl 287.12
Dump at : namespaces/test/arrayTest.csl : 287.12 :
Dump : Address = 0x00007670609a8a37 : Number = 16 :: (little endian dump)
0x00007670609a8a37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 287.12 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000076705fbb2b08, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b08 > = 0x0000000000000089
  DataStack   [  -1 ] < 0x000076705fbb2b00 > = 0x0000000000000089
  DataStack   [  -2 ] < 0x000076705fbb2af8 > = 0x0000641cca180c20
  DataStack   [  -3 ] < 0x000076705fbb2af0 > = 0x00007670609a89b7
  DataStack   [  -4 ] < 0x000076705fbb2ae8 > = 0x0000000000000001
  DataStack   [  -5 ] < 0x000076705fbb2ae0 > = 0x0000000000000002
  DataStack   [  -6 ] < 0x000076705fbb2ad8 > = 0x0000000000000000
  DataStack   [  -7 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 a6 :  namespaces/test/arrayTest.csl 288.20
Dump at : namespaces/test/arrayTest.csl : 288.38 :
Dump : Address = 0x00007670609a89b7 : Number = 144 :: (little endian dump)
0x00007670609a89b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a89f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8a37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

_ClassTypedef : at namespaces/test/arrayTest.csl : 289.15 : token = class : cloneFlag = 0
_ClassTypedef : at namespaces/test/arrayTest.csl : 307.16 : token = class : cloneFlag = 0
 =============================
Ar9.a9 <:> csl compiled word
SourceCode for Ar9.a9 :>
: a9 ( Ar9 ar9 | d x y z ) x 0 = y 0 = z 0 = d ar9.dimSize @ = { z @ d @ < } { { y @ d @ < } { { x @ d @ < } { ar9.ar [z @][y @][x @ ] x @ = x ++ } while x 0 = y ++ } while x 0 = y 0 = z ++ } while oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67]) a9dump ( 0 246 67 ar9 ) ;
Source code file location of a9 : "namespaces/test/arrayTest.csl" : 324.2 :: we are now at : namespaces/test/arrayTest.csl : 355.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb37b5 -- code size = 365 bytes
TypeSignature : Object
 -----------------------------
Word :: Ar9.a9 : definition = 0x0000767060bb37b5 : disassembly at namespaces/test/arrayTest.csl : 355.16 :
0x767060bb37b5    4d897e08                mov [r14+0x8], r15
0x767060bb37b9    4d8d7e08                lea r15, [r14+0x8]
0x767060bb37bd    4981c628000000          add r14, 0x28
 ..   : a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {              ..
0x767060bb37c4    49c7471000000000        mov qword [r15+0x10], 0x0
: a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @  ..
0x767060bb37cc    49c7471800000000        mov qword [r15+0x18], 0x0
 ..  ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ <  ..
0x767060bb37d4    49c7472000000000        mov qword [r15+0x20], 0x0
 .. r9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }  ..
0x767060bb37dc    498d4708                lea rax, [r15+0x8]
 ..  | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }    ..
0x767060bb37e0    498b4ff8                mov rcx, [r15-0x8]
0x767060bb37e4    488b09                  mov rcx, [rcx]
 ..     x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {    ..
0x767060bb37e7    488908                  mov [rax], rcx
 .. = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {            ..
0x767060bb37ea    498b4720                mov rax, [r15+0x20]
 .. 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                ..
0x767060bb37ee    498b4f08                mov rcx, [r15+0x8]
 .. z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar ..
0x767060bb37f2    483bc1                  cmp rax, rcx
 .. 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9. ..
0x767060bb37f5    0f8da3000000            jge 0x767060bb389e            < Ar9.a9+233 >
 .. @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @  ..
0x767060bb37fb    498b4718                mov rax, [r15+0x18]
 ..     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x  ..
0x767060bb37ff    498b4f08                mov rcx, [r15+0x8]
 .. { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =  ..
0x767060bb3803    483bc1                  cmp rax, rcx
 .. z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =    ..
0x767060bb3806    0f8d79000000            jge 0x767060bb3885            < Ar9.a9+208 >
 .. { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++         ..
0x767060bb380c    498b4710                mov rax, [r15+0x10]
 .. @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++             ..
0x767060bb3810    498b4f08                mov rcx, [r15+0x8]
 .. @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               } ..
0x767060bb3814    483bc1                  cmp rax, rcx
 .. < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }   ..
0x767060bb3817    0f8d57000000            jge 0x767060bb3874            < Ar9.a9+191 >
0x767060bb381d    498b47f8                mov rax, [r15-0x8]
 .. < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =  ..
0x767060bb3821    4881c008000000          add rax, 0x8
0x767060bb3828    4983c608                add r14, 0x8
0x767060bb382c    498906                  mov [r14], rax
 ..             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =      ..
0x767060bb382f    498b4720                mov rax, [r15+0x20]
0x767060bb3833    4869c000000100          imul rax, rax, 0x10000
 ..           {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =        ..
0x767060bb383a    490106                  add [r14], rax
 ..        {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =           ..
0x767060bb383d    498b4718                mov rax, [r15+0x18]
0x767060bb3841    4869c000010000          imul rax, rax, 0x100
 ..      {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =             ..
0x767060bb3848    490106                  add [r14], rax
 ..   {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                ..
0x767060bb384b    498b4710                mov rax, [r15+0x10]
 .. {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                  ..
0x767060bb384f    490106                  add [r14], rax
 ..               ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                      ..
0x767060bb3852    498d4710                lea rax, [r15+0x10]
0x767060bb3856    488b00                  mov rax, [rax]
0x767060bb3859    4983c608                add r14, 0x8
 ..             ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                        ..
0x767060bb385d    498906                  mov [r14], rax
 ..           ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                        y ..
0x767060bb3860    498b0e                  mov rcx, [r14]
0x767060bb3863    498b46f8                mov rax, [r14-0x8]
0x767060bb3867    488908                  mov [rax], rcx
0x767060bb386a    4983ee10                sub r14, 0x10
 .. @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                        y ++          }       ..
0x767060bb386e    49ff4710                inc qword [r15+0x10]
0x767060bb3872    eb98                    jmp 0x767060bb380c            < Ar9.a9+87 >
 ..  }             while              x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++      ..
0x767060bb3874    49c7471000000000        mov qword [r15+0x10], 0x0
 ..        x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     }     while     oPrintf ( " ..
0x767060bb387c    49ff4718                inc qword [r15+0x18]
0x767060bb3880    e976ffffff              jmp 0x767060bb37fb            < Ar9.a9+70 >
 ..           }         while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][2 ..
0x767060bb3885    49c7471000000000        mov qword [r15+0x10], 0x0
 ..       while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])       ..
0x767060bb388d    49c7471800000000        mov qword [r15+0x18], 0x0
 ..         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 2 ..
0x767060bb3895    49ff4720                inc qword [r15+0x20]
0x767060bb3899    e94cffffff              jmp 0x767060bb37ea            < Ar9.a9+53 >
 ..    z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb389e    48b80e445b6070760000    mov rax, 0x7670605b440e
0x767060bb38a8    488bf8                  mov rdi, rax
 .. rintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38ab    498b47f8                mov rax, [r15-0x8]
 .. f ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38af    4881c008003901          add rax, 0x1390008
0x767060bb38b6    488bc8                  mov rcx, rax
 ..  0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38b9    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bb38c3    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb38cd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. x", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38d0    48c7c000000000          mov rax, 0x0
0x767060bb38d7    4983c608                add r14, 0x8
0x767060bb38db    498906                  mov [r14], rax
 .. , ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38de    b8f6000000              mov eax, 0xf6
0x767060bb38e3    4983c608                add r14, 0x8
0x767060bb38e7    498906                  mov [r14], rax
 .. 9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38ea    b843000000              mov eax, 0x43
0x767060bb38ef    4983c608                add r14, 0x8
0x767060bb38f3    498906                  mov [r14], rax
 .. r[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb38f6    498b47f8                mov rax, [r15-0x8]
0x767060bb38fa    4881c000000000          add rax, 0x0
0x767060bb3901    4983c608                add r14, 0x8
0x767060bb3905    498906                  mov [r14], rax
 .. [67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb3908    49bb0133bb6070760000    mov r11, 0x767060bb3301
0x767060bb3912    49ffd3                  call r11                      < Ar9.a9dump : 0x0000767060bb3301 >
0x767060bb3915    4d8d77f8                lea r14, [r15-0x8]
0x767060bb3919    4d8b7e08                mov r15, [r14+0x8]
0x767060bb391d    4983ee08                sub r14, 0x8
 .. 46][67])      a9dump ( 0 246 67 ar9 ) ;  ..
0x767060bb3921    c3                      ret
Word_Disassemble : word - 'a9' :: codeSize = 365
Word : 0x0000767060f41bdb :: Compiled at : 0x0000767060bb37b5
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 355.16 <::

DataStack at : namespaces/test/arrayTest.csl : 355.18 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 256
ar9.ar[0][246][67] = 0
 Ar9 :  namespaces/test/arrayTest.csl 360.8 : x = 0 y = 246 z = 67
 dimSize = 256
 a = 0x000076705e89c1a8 : a.ar = 0x000076705e89c1b0

Dump at : namespaces/test/arrayTest.csl : 360.8 :
Dump : Address = 0x000076705ecdb7b0 : Number = 256 :: (little endian dump)
0x000076705ecdb7b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........
0x000076705ecdb7c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........
0x000076705ecdb7d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./
0x000076705ecdb7e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>?
0x000076705ecdb7f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO
0x000076705ecdb800 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_
0x000076705ecdb810 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno
0x000076705ecdb820 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~.
0x000076705ecdb830 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........
0x000076705ecdb840 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........
0x000076705ecdb850 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........
0x000076705ecdb860 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........
0x000076705ecdb870 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........
0x000076705ecdb880 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........
0x000076705ecdb890 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........
0x000076705ecdb8a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........

 Ar9 :  namespaces/test/arrayTest.csl 361.25 : x = 0 y = 123 z = 234
 dimSize = 256
 a = 0x000076705e89c1a8 : a.ar = 0x000076705e89c1b0

Dump at : namespaces/test/arrayTest.csl : 361.25 :
Dump : Address = 0x000076705f743cb0 : Number = 256 :: (little endian dump)
0x000076705f743cb0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........
0x000076705f743cc0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........
0x000076705f743cd0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./
0x000076705f743ce0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>?
0x000076705f743cf0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO
0x000076705f743d00 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_
0x000076705f743d10 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno
0x000076705f743d20 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~.
0x000076705f743d30 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........
0x000076705f743d40 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........
0x000076705f743d50 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........
0x000076705f743d60 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........
0x000076705f743d70 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........
0x000076705f743d80 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........
0x000076705f743d90 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........
0x000076705f743da0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........

_ClassTypedef : at namespaces/test/arrayTest.csl : 364.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 0x00007670609a8a47 0x00007670609a8a48 0x00007670609a8a50 26 254
DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 0x00007670609a8a85
 0x00007670609a8a7d

 -----------------------------
 array out of bounds checking with variables?! namespaces/test/arrayTest.csl 386.9
 -----------------------------


Dump at : namespaces/test/arrayTest.csl : 386.9 :
Dump : Address = 0x00007670609a8a62 : Number = 32 :: (little endian dump)
0x00007670609a8a62 :  77 00 00 00 00 00 77 00  00 00 00 00 00 00 00 00  w.....w. ........
0x00007670609a8a72 :  00 00 00 00 00 00 00 00  77 00 00 77 00 00 00 00  ........ w..w....

 =============================
ct0.tct <:> csl compiled word
SourceCode for ct0.tct :>
: tct ( y ct0 a ) a.ar [0][0][0] 0x77 = a.ar [0][y @][0] a.ar [0][0][0] @ = a.ar [y @][y @][0] a.ar [0][0][0] @ = a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ = a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ = TODO ( "array out of bounds checking with variables?!" ) a.ar 32 dump a.ar [1][2][2] 7 = a.ar [1][2][2] @ 7 _assert ;
Source code file location of tct : "namespaces/test/arrayTest.csl" : 373.2 :: we are now at : namespaces/test/arrayTest.csl : 387.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb3927 -- code size = 630 bytes
TypeSignature :
 -----------------------------
Word :: ct0.tct : definition = 0x0000767060bb3927 : disassembly at namespaces/test/arrayTest.csl : 387.16 :
0x767060bb3927    4d897e08                mov [r14+0x8], r15
0x767060bb392b    4d8d7e08                lea r15, [r14+0x8]
0x767060bb392f    4981c608000000          add r14, 0x8
0x767060bb3936    498b47f8                mov rax, [r15-0x8]
0x767060bb393a    4881c000000000          add rax, 0x0
0x767060bb3941    b977000000              mov ecx, 0x77
: tct ( y ct0 a )     a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 ..
0x767060bb3946    488908                  mov [rax], rcx
0x767060bb3949    498b47f8                mov rax, [r15-0x8]
0x767060bb394d    4881c000000000          add rax, 0x0
0x767060bb3954    4983c608                add r14, 0x8
0x767060bb3958    498906                  mov [r14], rax
 ..   a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] du ..
0x767060bb395b    498b47f0                mov rax, [r15-0x10]
0x767060bb395f    486bc003                imul rax, rax, 0x3
 .. a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup  ..
0x767060bb3963    490106                  add [r14], rax
 .. 0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp  ..
0x767060bb3966    498b47f8                mov rax, [r15-0x8]
0x767060bb396a    4881c000000000          add rax, 0x0
0x767060bb3971    4983c608                add r14, 0x8
0x767060bb3975    498906                  mov [r14], rax
 ..       a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0]  ..
0x767060bb3978    498b06                  mov rax, [r14]
0x767060bb397b    488b00                  mov rax, [rax]
0x767060bb397e    498906                  mov [r14], rax
 ..     a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @  ..
0x767060bb3981    498b0e                  mov rcx, [r14]
0x767060bb3984    498b46f8                mov rax, [r14-0x8]
0x767060bb3988    488908                  mov [rax], rcx
0x767060bb398b    4983ee10                sub r14, 0x10
0x767060bb398f    498b47f8                mov rax, [r15-0x8]
0x767060bb3993    4881c000000000          add rax, 0x0
0x767060bb399a    4983c608                add r14, 0x8
0x767060bb399e    498906                  mov [r14], rax
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y ..
0x767060bb39a1    498b47f0                mov rax, [r15-0x10]
0x767060bb39a5    486bc009                imul rax, rax, 0x9
 ..  @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @ ..
0x767060bb39a9    490106                  add [r14], rax
 .. [0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y ..
0x767060bb39ac    498b47f0                mov rax, [r15-0x10]
0x767060bb39b0    486bc003                imul rax, rax, 0x3
 .. ] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @ ..
0x767060bb39b4    490106                  add [r14], rax
 ..  [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @  ..
0x767060bb39b7    498b47f8                mov rax, [r15-0x8]
0x767060bb39bb    4881c000000000          add rax, 0x0
0x767060bb39c2    4983c608                add r14, 0x8
0x767060bb39c6    498906                  mov [r14], rax
 ..     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp  ..
0x767060bb39c9    498b06                  mov rax, [r14]
0x767060bb39cc    488b00                  mov rax, [rax]
0x767060bb39cf    498906                  mov [r14], rax
 ..   a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a. ..
0x767060bb39d2    498b0e                  mov rcx, [r14]
0x767060bb39d5    498b46f8                mov rax, [r14-0x8]
0x767060bb39d9    488908                  mov [rax], rcx
0x767060bb39dc    4983ee10                sub r14, 0x10
0x767060bb39e0    498b47f8                mov rax, [r15-0x8]
0x767060bb39e4    4881c000000000          add rax, 0x0
0x767060bb39eb    4983c608                add r14, 0x8
0x767060bb39ef    498906                  mov [r14], rax
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] ..
0x767060bb39f2    498b47f0                mov rax, [r15-0x10]
 .. ][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ = ..
0x767060bb39f6    b901000000              mov ecx, 0x1
0x767060bb39fb    4803c1                  add rax, rcx
0x767060bb39fe    486bc009                imul rax, rax, 0x9
 .. 0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =   ..
0x767060bb3a02    490106                  add [r14], rax
 .. a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =      ..
0x767060bb3a05    498b47f0                mov rax, [r15-0x10]
0x767060bb3a09    486bc003                imul rax, rax, 0x3
 .. ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TO ..
0x767060bb3a0d    490106                  add [r14], rax
 .. [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO  ..
0x767060bb3a10    498b47f0                mov rax, [r15-0x10]
 .. ][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO (  ..
0x767060bb3a14    490106                  add [r14], rax
 .. ][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "ar ..
0x767060bb3a17    498b06                  mov rax, [r14]
0x767060bb3a1a    4983c608                add r14, 0x8
0x767060bb3a1e    498906                  mov [r14], rax
 ..  @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array  ..
0x767060bb3a21    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb3a2b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb3a35    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out ..
0x767060bb3a38    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb3a42    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..    a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of ..
0x767060bb3a45    498b47f8                mov rax, [r15-0x8]
0x767060bb3a49    4881c000000000          add rax, 0x0
0x767060bb3a50    4983c608                add r14, 0x8
0x767060bb3a54    498906                  mov [r14], rax
 .. +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checkin ..
0x767060bb3a57    498b06                  mov rax, [r14]
0x767060bb3a5a    488b00                  mov rax, [rax]
0x767060bb3a5d    498906                  mov [r14], rax
 .. [y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking  ..
0x767060bb3a60    498b0e                  mov rcx, [r14]
0x767060bb3a63    498b46f8                mov rax, [r14-0x8]
0x767060bb3a67    488908                  mov [rax], rcx
0x767060bb3a6a    4983ee10                sub r14, 0x10
0x767060bb3a6e    498b47f8                mov rax, [r15-0x8]
0x767060bb3a72    4881c000000000          add rax, 0x0
0x767060bb3a79    4983c608                add r14, 0x8
0x767060bb3a7d    498906                  mov [r14], rax
 .. dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variab ..
0x767060bb3a80    498b47f0                mov rax, [r15-0x10]
0x767060bb3a84    486bc009                imul rax, rax, 0x9
 .. p nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variable ..
0x767060bb3a88    490106                  add [r14], rax
 .. l hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?! ..
0x767060bb3a8b    498b47f0                mov rax, [r15-0x10]
0x767060bb3a8f    486bc003                imul rax, rax, 0x3
 .. hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!"  ..
0x767060bb3a93    490106                  add [r14], rax
 .. a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )   ..
0x767060bb3a96    498b47f0                mov rax, [r15-0x10]
 ..  [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a ..
0x767060bb3a9a    b901000000              mov ecx, 0x1
0x767060bb3a9f    4803c1                  add rax, rcx
 .. 0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.a ..
0x767060bb3aa2    490106                  add [r14], rax
 .. 0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 3 ..
0x767060bb3aa5    498b06                  mov rax, [r14]
0x767060bb3aa8    4983c608                add r14, 0x8
0x767060bb3aac    498906                  mov [r14], rax
 .. ] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 du ..
0x767060bb3aaf    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb3ab9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb3ac3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump  ..
0x767060bb3ac6    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb3ad0    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     ..
0x767060bb3ad3    498b47f8                mov rax, [r15-0x8]
0x767060bb3ad7    4881c000000000          add rax, 0x0
0x767060bb3ade    4983c608                add r14, 0x8
0x767060bb3ae2    498906                  mov [r14], rax
 ..  @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] ..
0x767060bb3ae5    498b06                  mov rax, [r14]
0x767060bb3ae8    488b00                  mov rax, [rax]
0x767060bb3aeb    498906                  mov [r14], rax
 .. ][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 ..
0x767060bb3aee    498b0e                  mov rcx, [r14]
0x767060bb3af1    498b46f8                mov rax, [r14-0x8]
0x767060bb3af5    488908                  mov [rax], rcx
0x767060bb3af8    4983ee10                sub r14, 0x10
 .. p nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [ ..
0x767060bb3afc    48b85f828b6070760000    mov rax, 0x7670608b825f       < string : 'array out of bounds checking with variables?!' >
0x767060bb3b06    4983c608                add r14, 0x8
0x767060bb3b0a    498906                  mov [r14], rax
 .. 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     ..
0x767060bb3b0d    49bbe5c3ba6070760000    mov r11, 0x767060bac3e5
0x767060bb3b17    49ffd3                  call r11                      < Root.TODO : 0x0000767060bac3e5 >
0x767060bb3b1a    498b47f8                mov rax, [r15-0x8]
0x767060bb3b1e    4881c000000000          add rax, 0x0
0x767060bb3b25    4983c608                add r14, 0x8
0x767060bb3b29    498906                  mov [r14], rax
 .. checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  ..
0x767060bb3b2c    b820000000              mov eax, 0x20
0x767060bb3b31    4983c608                add r14, 0x8
0x767060bb3b35    498906                  mov [r14], rax
 .. cking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  ..
0x767060bb3b38    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bb3b42    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb3b4c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb3b4f    498b47f8                mov rax, [r15-0x8]
0x767060bb3b53    4881c011000000          add rax, 0x11
0x767060bb3b5a    b907000000              mov r9d, 0x7
 ..     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  ..
0x767060bb3b5f    488908                  mov [rax], rcx
0x767060bb3b62    498b47f8                mov rax, [r15-0x8]
0x767060bb3b66    4881c011000000          add rax, 0x11
0x767060bb3b6d    488b00                  mov rax, [rax]
0x767060bb3b70    4983c608                add r14, 0x8
 ..  dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  ..
0x767060bb3b74    498906                  mov [r14], rax
 .. ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  ..
0x767060bb3b77    b807000000              mov eax, 0x7
0x767060bb3b7c    4983c608                add r14, 0x8
0x767060bb3b80    498906                  mov [r14], rax
0x767060bb3b83    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb3b8d    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb3b90    4d8d77f8                lea r14, [r15-0x8]
0x767060bb3b94    4d8b7e08                mov r15, [r14+0x8]
0x767060bb3b98    4983ee10                sub r14, 0x10
 .. ] 7 =     a.ar [1][2][2] @ 7 _assert  ;  ..
0x767060bb3b9c    c3                      ret
Word_Disassemble : word - 'tct' :: codeSize = 630
Word : 0x0000767060f4d6ab :: Compiled at : 0x0000767060bb3927
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 387.16 <::

_ClassTypedef : at namespaces/test/arrayTest.csl : 389.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 0x00007670609a8a86
 0x00007670609a8a98
 0x00007670609a8a86
Dump at : namespaces/test/arrayTest.csl : 397.11 :
Dump : Address = 0x00007670609a8a7d : Number = 32 :: (little endian dump)
0x00007670609a8a7d :  77 00 00 00 00 00 77 00  77 4d 00 00 00 00 00 00  w.....w. wM......
0x00007670609a8a8d :  00 00 00 00 00 00 00 00  00 00 00 4d 00 00 00 00  ........ ...M....

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
C_Syntax.ctcta <:> csl compiled word, prefix
SourceCode for C_Syntax.ctcta :>
void ctcta ( y cta a ) { a.ar [0][y + 1][0] = 'M' ; a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ; a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ; a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ; hp ( a.ar [y ][y + 1][1] ) ; a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ; a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ; a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ; hp ( &a.ar ) ; cadump ( &a.ar 27 ) ; }
Source code file location of ctcta : "namespaces/test/arrayTest.csl" : 407.6 :: we are now at : namespaces/test/arrayTest.csl : 421.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb3d81 -- code size = 1000 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.ctcta : definition = 0x0000767060bb3d81 : disassembly at namespaces/test/arrayTest.csl : 421.10 :
0x767060bb3d81    4d897e08                mov [r14+0x8], r15
0x767060bb3d85    4d8d7e08                lea r15, [r14+0x8]
0x767060bb3d89    4981c608000000          add r14, 0x8
0x767060bb3d90    498b47f8                mov rax, [r15-0x8]
0x767060bb3d94    4881c000000000          add rax, 0x0
0x767060bb3d9b    4983c608                add r14, 0x8
0x767060bb3d9f    498906                  mov [r14], rax
 .. void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [ ..
0x767060bb3da2    498b47f0                mov rax, [r15-0x10]
void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][ ..
0x767060bb3da6    b901000000              mov ecx, 0x1
0x767060bb3dab    4803c1                  add rax, rcx
0x767060bb3dae    486bc003                imul rax, rax, 0x3
  void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y  ..
0x767060bb3db2    490106                  add [r14], rax
 ..  y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0 ..
0x767060bb3db5    b84d000000              mov eax, 0x4d
0x767060bb3dba    4983c608                add r14, 0x8
0x767060bb3dbe    498906                  mov [r14], rax
 ..  ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1] ..
0x767060bb3dc1    498b0e                  mov rcx, [r14]
0x767060bb3dc4    498b46f8                mov rax, [r14-0x8]
0x767060bb3dc8    488908                  mov [rax], rcx
0x767060bb3dcb    4983ee10                sub r14, 0x10
0x767060bb3dcf    498b47f8                mov rax, [r15-0x8]
0x767060bb3dd3    4881c000000000          add rax, 0x0
0x767060bb3dda    4983c608                add r14, 0x8
0x767060bb3dde    498906                  mov [r14], rax
0x767060bb3de1    498b47f0                mov rax, [r15-0x10]
0x767060bb3de5    486bc009                imul rax, rax, 0x9
 ..   a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [ ..
0x767060bb3de9    490106                  add [r14], rax
 .. ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y +  ..
0x767060bb3dec    498b47f0                mov rax, [r15-0x10]
 .. 0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y ..
0x767060bb3df0    b901000000              mov ecx, 0x1
0x767060bb3df5    4803c1                  add rax, rcx
0x767060bb3df8    486bc003                imul rax, rax, 0x3
 ..  [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1] ..
0x767060bb3dfc    490106                  add [r14], rax
 .. [0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0  ..
0x767060bb3dff    498b47f8                mov rax, [r15-0x8]
0x767060bb3e03    4881c000000000          add rax, 0x0
0x767060bb3e0a    4983c608                add r14, 0x8
0x767060bb3e0e    498906                  mov [r14], rax
 ..  ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar  ..
0x767060bb3e11    498b47f0                mov rax, [r15-0x10]
 ..   a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ] ..
0x767060bb3e15    b901000000              mov ecx, 0x1
0x767060bb3e1a    4803c1                  add rax, rcx
0x767060bb3e1d    486bc003                imul rax, rax, 0x3
 ..     a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ..
0x767060bb3e21    490106                  add [r14], rax
 .. 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][  ..
0x767060bb3e24    498b0e                  mov rcx, [r14]
0x767060bb3e27    498b46f8                mov rax, [r14-0x8]
0x767060bb3e2b    488908                  mov [rax], rcx
0x767060bb3e2e    4983ee10                sub r14, 0x10
0x767060bb3e32    498b47f8                mov rax, [r15-0x8]
0x767060bb3e36    4881c000000000          add rax, 0x0
0x767060bb3e3d    4983c608                add r14, 0x8
0x767060bb3e41    498906                  mov [r14], rax
0x767060bb3e44    498b47f0                mov rax, [r15-0x10]
0x767060bb3e48    486bc009                imul rax, rax, 0x9
 .. ] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp  ..
0x767060bb3e4c    490106                  add [r14], rax
 .. a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a. ..
0x767060bb3e4f    498b47f0                mov rax, [r15-0x10]
 ..  [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [ ..
0x767060bb3e53    b901000000              mov ecx, 0x1
0x767060bb3e58    4803c1                  add rax, rcx
0x767060bb3e5b    486bc003                imul rax, rax, 0x3
 .. ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar ..
0x767060bb3e5f    490106                  add [r14], rax
0x767060bb3e62    b801000000              mov eax, 0x1
 .. ][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ] ..
0x767060bb3e67    490106                  add [r14], rax
 ..  1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y +  ..
0x767060bb3e6a    498b47f8                mov rax, [r15-0x8]
0x767060bb3e6e    4881c000000000          add rax, 0x0
0x767060bb3e75    4983c608                add r14, 0x8
0x767060bb3e79    498906                  mov [r14], rax
0x767060bb3e7c    498b47f0                mov rax, [r15-0x10]
0x767060bb3e80    486bc009                imul rax, rax, 0x9
 ..  ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1]  ..
0x767060bb3e84    490106                  add [r14], rax
 ..       a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;  ..
0x767060bb3e87    498b47f0                mov rax, [r15-0x10]
 ..   a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a ..
0x767060bb3e8b    b901000000              mov ecx, 0x1
0x767060bb3e90    4803c1                  add rax, rcx
0x767060bb3e93    486bc003                imul rax, rax, 0x3
 ..     a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    ..
0x767060bb3e97    490106                  add [r14], rax
 ..  + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y  ..
0x767060bb3e9a    498b0e                  mov rcx, [r14]
0x767060bb3e9d    498b46f8                mov rax, [r14-0x8]
0x767060bb3ea1    488908                  mov [rax], rcx
0x767060bb3ea4    4983ee10                sub r14, 0x10
0x767060bb3ea8    498b47f8                mov rax, [r15-0x8]
0x767060bb3eac    4881c000000000          add rax, 0x0
0x767060bb3eb3    4983c608                add r14, 0x8
0x767060bb3eb7    498906                  mov [r14], rax
 .. 1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][ ..
0x767060bb3eba    498b47f0                mov rax, [r15-0x10]
 ..  a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = ..
0x767060bb3ebe    b901000000              mov ecx, 0x1
0x767060bb3ec3    4803c1                  add rax, rcx
0x767060bb3ec6    486bc009                imul rax, rax, 0x9
 ..  = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] ..
0x767060bb3eca    490106                  add [r14], rax
 .. ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a. ..
0x767060bb3ecd    498b47f0                mov rax, [r15-0x10]
 .. y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [ ..
0x767060bb3ed1    b901000000              mov ecx, 0x1
0x767060bb3ed6    4803c1                  add rax, rcx
0x767060bb3ed9    486bc003                imul rax, rax, 0x3
 ..  [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar ..
0x767060bb3edd    490106                  add [r14], rax
 .. [0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + ..
0x767060bb3ee0    498b47f8                mov rax, [r15-0x8]
0x767060bb3ee4    4881c000000000          add rax, 0x0
0x767060bb3eeb    4983c608                add r14, 0x8
0x767060bb3eef    498906                  mov [r14], rax
0x767060bb3ef2    498b47f0                mov rax, [r15-0x10]
0x767060bb3ef6    486bc009                imul rax, rax, 0x9
 ..      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ..
0x767060bb3efa    490106                  add [r14], rax
 ..  a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;   ..
0x767060bb3efd    498b47f0                mov rax, [r15-0x10]
 .. r [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;       ..
0x767060bb3f01    b901000000              mov ecx, 0x1
0x767060bb3f06    4803c1                  add rax, rcx
0x767060bb3f09    486bc003                imul rax, rax, 0x3
 .. .ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;     ..
0x767060bb3f0d    490106                  add [r14], rax
0x767060bb3f10    b801000000              mov eax, 0x1
 .. y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.a ..
0x767060bb3f15    490106                  add [r14], rax
 .. 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y ..
0x767060bb3f18    498b0e                  mov rcx, [r14]
0x767060bb3f1b    498b46f8                mov rax, [r14-0x8]
0x767060bb3f1f    488908                  mov [rax], rcx
0x767060bb3f22    4983ee10                sub r14, 0x10
 .. 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1 ..
0x767060bb3f26    498b47f8                mov rax, [r15-0x8]
0x767060bb3f2a    4881c000000000          add rax, 0x0
0x767060bb3f31    4983c608                add r14, 0x8
0x767060bb3f35    498906                  mov [r14], rax
0x767060bb3f38    498b47f0                mov rax, [r15-0x10]
0x767060bb3f3c    486bc009                imul rax, rax, 0x9
 .. a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] ..
0x767060bb3f40    490106                  add [r14], rax
 ..  [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a ..
0x767060bb3f43    498b47f0                mov rax, [r15-0x10]
 .. ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar  ..
0x767060bb3f47    b901000000              mov ecx, 0x1
0x767060bb3f4c    4803c1                  add rax, rcx
0x767060bb3f4f    486bc003                imul rax, rax, 0x3
 .. y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.a ..
0x767060bb3f53    490106                  add [r14], rax
0x767060bb3f56    b801000000              mov eax, 0x1
 ..  + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y  ..
0x767060bb3f5b    490106                  add [r14], rax
0x767060bb3f5e    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb3f68    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
0x767060bb3f6b    498b47f8                mov rax, [r15-0x8]
0x767060bb3f6f    4881c000000000          add rax, 0x0
0x767060bb3f76    4983c608                add r14, 0x8
0x767060bb3f7a    498906                  mov [r14], rax
 .. hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ; ..
0x767060bb3f7d    498b47f0                mov rax, [r15-0x10]
 ..  a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;     ..
0x767060bb3f81    b901000000              mov ecx, 0x1
0x767060bb3f86    4803c1                  add rax, rcx
0x767060bb3f89    486bc009                imul rax, rax, 0x9
 ..  ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;   ..
0x767060bb3f8d    490106                  add [r14], rax
 .. ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a ..
0x767060bb3f90    498b47f0                mov rax, [r15-0x10]
 .. y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar  ..
0x767060bb3f94    b901000000              mov ecx, 0x1
0x767060bb3f99    4803c1                  add rax, rcx
0x767060bb3f9c    486bc003                imul rax, rax, 0x3
 ..  [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.a ..
0x767060bb3fa0    490106                  add [r14], rax
0x767060bb3fa3    b801000000              mov eax, 0x1
 .. [y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y  ..
0x767060bb3fa8    490106                  add [r14], rax
 .. 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][ ..
0x767060bb3fab    498b47f8                mov rax, [r15-0x8]
0x767060bb3faf    4881c000000000          add rax, 0x0
0x767060bb3fb6    4983c608                add r14, 0x8
0x767060bb3fba    498906                  mov [r14], rax
 .. ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1] ..
0x767060bb3fbd    498b47f0                mov rax, [r15-0x10]
 ..    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + ..
0x767060bb3fc1    b901000000              mov ecx, 0x1
0x767060bb3fc6    4803c1                  add rax, rcx
0x767060bb3fc9    486bc009                imul rax, rax, 0x9
 .. ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y ..
0x767060bb3fcd    490106                  add [r14], rax
 .. a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] ..
0x767060bb3fd0    498b47f0                mov rax, [r15-0x10]
 ..  [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a ..
0x767060bb3fd4    b901000000              mov ecx, 0x1
0x767060bb3fd9    4803c1                  add rax, rcx
0x767060bb3fdc    486bc003                imul rax, rax, 0x3
 .. ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = ..
0x767060bb3fe0    490106                  add [r14], rax
 .. + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1 ..
0x767060bb3fe3    498b0e                  mov rcx, [r14]
0x767060bb3fe6    498b46f8                mov rax, [r14-0x8]
0x767060bb3fea    488908                  mov [rax], rcx
0x767060bb3fed    4983ee10                sub r14, 0x10
0x767060bb3ff1    498b47f8                mov rax, [r15-0x8]
0x767060bb3ff5    4881c000000000          add rax, 0x0
0x767060bb3ffc    4983c608                add r14, 0x8
0x767060bb4000    498906                  mov [r14], rax
 .. = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][ ..
0x767060bb4003    498b47f0                mov rax, [r15-0x10]
 .. ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ; ..
0x767060bb4007    b901000000              mov ecx, 0x1
0x767060bb400c    4803c1                  add rax, rcx
0x767060bb400f    486bc009                imul rax, rax, 0x9
 .. a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ..
0x767060bb4013    490106                  add [r14], rax
 .. [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;    ..
0x767060bb4016    498b47f0                mov rax, [r15-0x10]
 ..  1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      h ..
0x767060bb401a    b9010000004803c148      mov r9, 0x48c1034800000001
0x767060bb4023    6bc003                  imul r8d, eax, 0x3
 ..  + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      ..
0x767060bb4026    490106                  add [r14], rax
0x767060bb4029    498b47f0                mov rax, [r15-0x10]
 .. y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp (  ..
0x767060bb402d    490106                  add [r14], rax
 .. [0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar  ..
0x767060bb4030    498b47f8                mov rax, [r15-0x8]
0x767060bb4034    4881c000000000          add rax, 0x0
0x767060bb403b    4983c608                add r14, 0x8
0x767060bb403f    498906                  mov [r14], rax
 ..      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;    ..
0x767060bb4042    498b47f0                mov rax, [r15-0x10]
 ..  a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     ca ..
0x767060bb4046    b901000000              mov ecx, 0x1
0x767060bb404b    4803c1                  add rax, rcx
0x767060bb404e    486bc009                imul rax, rax, 0x9
 ..    a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;      ..
0x767060bb4052    490106                  add [r14], rax
 .. ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadum ..
0x767060bb4055    498b47f0                mov rax, [r15-0x10]
 .. y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump (  ..
0x767060bb4059    b901000000              mov ecx, 0x1
0x767060bb405e    4803c1                  add rax, rcx
0x767060bb4061    486bc003                imul rax, rax, 0x3
 ..  [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump  ..
0x767060bb4065    490106                  add [r14], rax
0x767060bb4068    b801000000              mov eax, 0x1
 ..  1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a. ..
0x767060bb406d    490106                  add [r14], rax
 .. 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.a ..
0x767060bb4070    498b0e                  mov rcx, [r14]
0x767060bb4073    498b46f8                mov rax, [r14-0x8]
0x767060bb4077    488908                  mov [rax], rcx
0x767060bb407a    4983ee10                sub r14, 0x10
0x767060bb407e    498b47f8                mov rax, [r15-0x8]
0x767060bb4082    4881c000000000          add rax, 0x0
0x767060bb4089    4983c608                add r14, 0x8
0x767060bb408d    498906                  mov [r14], rax
 .. = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4090    498b47f0                mov rax, [r15-0x10]
 .. ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4094    b901000000              mov ecx, 0x1
0x767060bb4099    4803c1                  add rax, rcx
0x767060bb409c    486bc009                imul rax, rax, 0x9
 .. a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40a0    490106                  add [r14], rax
 .. [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40a3    498b47f0                mov rax, [r15-0x10]
 ..  1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40a7    b901000000              mov ecx, 0x1
0x767060bb40ac    4803c1                  add rax, rcx
0x767060bb40af    486bc003                imul rax, rax, 0x3
 ..  + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40b3    490106                  add [r14], rax
 .. [y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40b6    498b47f0                mov rax, [r15-0x10]
 ..  1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40ba    b901000000              mov ecx, 0x1
0x767060bb40bf    4803c1                  add rax, rcx
 ..  + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40c2    490106                  add [r14], rax
 .. ] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40c5    498b47f8                mov rax, [r15-0x8]
0x767060bb40c9    4881c000000000          add rax, 0x0
0x767060bb40d0    4983c608                add r14, 0x8
0x767060bb40d4    498906                  mov [r14], rax
 ..    a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40d7    498b47f0                mov rax, [r15-0x10]
 .. .ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40db    b901000000              mov ecx, 0x1
0x767060bb40e0    4803c1                  add rax, rcx
0x767060bb40e3    486bc009                imul rax, rax, 0x9
 ..  a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40e7    490106                  add [r14], rax
 ..  [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40ea    498b47f0                mov rax, [r15-0x10]
 .. + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40ee    b901000000              mov ecx, 0x1
0x767060bb40f3    4803c1                  add rax, rcx
0x767060bb40f6    486bc003                imul rax, rax, 0x3
 .. y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb40fa    490106                  add [r14], rax
0x767060bb40fd    498b47f0                mov rax, [r15-0x10]
 .. ][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4101    490106                  add [r14], rax
 .. [1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4104    498b0e                  mov rcx, [r14]
0x767060bb4107    498b46f8                mov rax, [r14-0x8]
0x767060bb410b    488908                  mov [rax], rcx
0x767060bb410e    4983ee10                sub r14, 0x10
 .. = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4112    498b47f8                mov rax, [r15-0x8]
0x767060bb4116    4881c000000000          add rax, 0x0
0x767060bb411d    4983c608                add r14, 0x8
0x767060bb4121    498906                  mov [r14], rax
0x767060bb4124    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bb412e    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. ] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4131    498b47f8                mov rax, [r15-0x8]
0x767060bb4135    4881c000000000          add rax, 0x0
0x767060bb413c    4983c608                add r14, 0x8
0x767060bb4140    498906                  mov [r14], rax
 ..     hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4143    b81b000000              mov eax, 0x1b
0x767060bb4148    4983c608                add r14, 0x8
0x767060bb414c    498906                  mov [r14], rax
 .. ][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb414f    49bb333dbb6070760000    mov r11, 0x767060bb3d33
0x767060bb4159    49ffd3                  call r11                      < cta.cadump : 0x0000767060bb3d33 >
0x767060bb415c    4d8d77f8                lea r14, [r15-0x8]
0x767060bb4160    4d8b7e08                mov r15, [r14+0x8]
0x767060bb4164    4983ee10                sub r14, 0x10
 ..  &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  ..
0x767060bb4168    c3                      ret
Word_Disassemble : word - 'ctcta' :: codeSize = 1000
Word : 0x0000767060f60043 :: Compiled at : 0x0000767060bb3d81
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 421.10 <::
 0x00007670609a8aa8 0x00007670609a8a98
Dump at : namespaces/test/arrayTest.csl : 422.16 :
Dump : Address = 0x00007670609a8a98 : Number = 27 :: (little endian dump)
0x00007670609a8a98 :  4d 00 00 00 00 00 4d 00  00 00 00 00 00 00 00 9e  M.....M. ........
0x00007670609a8aa8 :  a7 8a 9a 60 70 76 00 00  a8 b1 b1 8a 9a 60 70 76  ...`pv.. .....`pv

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

arr10 = 76705d89b1a8 : arr10->dimSize = 256
Dump at : namespaces/test/arrayTest.csl : 434.17 :
Dump : Address = 0x000076705d89b1a8 : Number = 16 :: (little endian dump)
0x000076705d89b1a8 :  00 01 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
 0x000076705d89b1a8
 =============================
C_Syntax.CSL_a10 <:> csl compiled word
SourceCode for C_Syntax.CSL_a10 :>
void CSL_a10 ( ) { Ar10 * a = arr10 ; int64 x, y, z, dSize = a->dimSize ; x = 0, y = 0, z = 0 ; while ( z < dSize ) { while ( y < dSize ) { while ( x < dSize ) { a->ar [z][y][x] = x ; x ++ ; } x = 0, y ++ ; } x = 0, y = 0, z ++ ; } oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ; a10dump ( 0 0 0 a ) ; a10dump ( 1 4 0 a ) ; oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; a10dump ( 67 246 0 a ) ; a10dump ( 1 34 0 a ) ; }
Source code file location of CSL_a10 : "namespaces/test/arrayTest.csl" : 448.8 :: we are now at : namespaces/test/arrayTest.csl : 488.12
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb4201 -- code size = 644 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.CSL_a10 : definition = 0x0000767060bb4201 : disassembly at namespaces/test/arrayTest.csl : 488.12 :
0x767060bb4201    4d897e08                mov [r14+0x8], r15
0x767060bb4205    4d8d7e08                lea r15, [r14+0x8]
0x767060bb4209    4981c630000000          add r14, 0x30
 ..  void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  ) ..
0x767060bb4210    48b8a8b1895d70760000    mov rax, 0x76705d89b1a8
0x767060bb421a    4881c000000000          add rax, 0x0
 ..      void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSiz ..
0x767060bb4221    49894708                mov [r15+0x8], rax
 ..  = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )  ..
0x767060bb4225    498b4708                mov rax, [r15+0x8]
0x767060bb4229    4881c000000000          add rax, 0x0
0x767060bb4230    488b00                  mov rax, [rax]
 .. Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y <  ..
0x767060bb4233    49894728                mov [r15+0x28], rax
 .. 4 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {           ..
0x767060bb4237    49c7471000000000        mov qword [r15+0x10], 0x0
 ..  z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             whil ..
0x767060bb423f    49c7471800000000        mov qword [r15+0x18], 0x0
 .. ze = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < ..
0x767060bb4247    49c7472000000000        mov qword [r15+0x20], 0x0
 ..   x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             ..
0x767060bb424f    498b4720                mov rax, [r15+0x20]
 .. = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {   ..
0x767060bb4253    498b4f28                mov rcx, [r15+0x28]
 .. x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             { ..
0x767060bb4257    483bc1                  cmp rax, rcx
0x767060bb425a    0f8da0000000            jge 0x767060bb4300            < C_Syntax.CSL_a10+255 >
 ..  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x]  ..
0x767060bb4260    498b4718                mov rax, [r15+0x18]
 ..  < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x  ..
0x767060bb4264    498b4f28                mov rcx, [r15+0x28]
 ..  z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] =  ..
0x767060bb4268    483bc1                  cmp rax, rcx
0x767060bb426b    0f8d76000000            jge 0x767060bb42e7            < C_Syntax.CSL_a10+230 >
 .. dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;              ..
0x767060bb4271    498b4710                mov rax, [r15+0x10]
 .. e )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }    ..
0x767060bb4275    498b4f28                mov rcx, [r15+0x28]
 .. ize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }  ..
0x767060bb4279    483bc1                  cmp rax, rcx
0x767060bb427c    0f8d54000000            jge 0x767060bb42d6            < C_Syntax.CSL_a10+213 >
0x767060bb4282    498b4708                mov rax, [r15+0x8]
 .. ze )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }        ..
0x767060bb4286    4881c008000000          add rax, 0x8
0x767060bb428d    4983c608                add r14, 0x8
0x767060bb4291    498906                  mov [r14], rax
 .. )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x ..
0x767060bb4294    498b4720                mov rax, [r15+0x20]
0x767060bb4298    4869c000000100          imul rax, rax, 0x10000
 ..              {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x  ..
0x767060bb429f    490106                  add [r14], rax
0x767060bb42a2    498b4718                mov rax, [r15+0x18]
0x767060bb42a6    4869c000010000          imul rax, rax, 0x100
 ..           {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0 ..
0x767060bb42ad    490106                  add [r14], rax
0x767060bb42b0    498b4710                mov rax, [r15+0x10]
 ..        {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y ..
0x767060bb42b4    490106                  add [r14], rax
 ..   {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0, ..
0x767060bb42b7    498b4710                mov rax, [r15+0x10]
0x767060bb42bb    4983c608                add r14, 0x8
0x767060bb42bf    498906                  mov [r14], rax
 ..     {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y =  ..
0x767060bb42c2    498b0e                  mov rcx, [r14]
0x767060bb42c5    498b46f8                mov rax, [r14-0x8]
0x767060bb42c9    488908                  mov [rax], rcx
0x767060bb42cc    4983ee10                sub r14, 0x10
 .. >ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }         ..
0x767060bb42d0    49ff4710                inc qword [r15+0x10]
0x767060bb42d4    eb9b                    jmp 0x767060bb4271            < C_Syntax.CSL_a10+112 >
 ..   x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx" ..
0x767060bb42d6    49c7471000000000        mov qword [r15+0x10], 0x0
 .. ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[ ..
0x767060bb42de    49ff4718                inc qword [r15+0x18]
0x767060bb42e2    e979ffffff              jmp 0x767060bb4260            < C_Syntax.CSL_a10+95 >
 ..    x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( ..
0x767060bb42e7    49c7471000000000        mov qword [r15+0x10], 0x0
 .. 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0  ..
0x767060bb42ef    49c7471800000000        mov qword [r15+0x18], 0x0
 ..  ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;    ..
0x767060bb42f7    49ff4720                inc qword [r15+0x20]
0x767060bb42fb    e94fffffff              jmp 0x767060bb424f            < C_Syntax.CSL_a10+78 >
 .. y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;     ..
0x767060bb4300    48b8aff75c6070760000    mov rax, 0x7670605cf7af
0x767060bb430a    488bf8                  mov rdi, rax
 ..   oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][24 ..
0x767060bb430d    498b4708                mov rax, [r15+0x8]
 .. Printf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][ ..
0x767060bb4311    4881c008000d00          add rax, 0xd0008
0x767060bb4318    488bc8                  mov rcx, rax
 ..    x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 ..
0x767060bb431b    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bb4325    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb432f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67] ..
0x767060bb4332    48c7c000000000          mov rax, 0x0
0x767060bb4339    4983c608                add r14, 0x8
0x767060bb433d    498906                  mov [r14], rax
 .. x", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67])  ..
0x767060bb4340    48c7c000000000          mov rax, 0x0
0x767060bb4347    4983c608                add r14, 0x8
0x767060bb434b    498906                  mov [r14], rax
 .. , a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;  ..
0x767060bb434e    48c7c000000000          mov rax, 0x0
0x767060bb4355    4983c608                add r14, 0x8
0x767060bb4359    498906                  mov [r14], rax
 .. a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;    ..
0x767060bb435c    498b4708                mov rax, [r15+0x8]
0x767060bb4360    4881c000000000          add rax, 0x0
0x767060bb4367    4983c608                add r14, 0x8
0x767060bb436b    498906                  mov [r14], rax
 .. ][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0 ..
0x767060bb436e    49bb5b35bb6070760000    mov r11, 0x767060bb355b
0x767060bb4378    49ffd3                  call r11                      < Ar10.a10dump : 0x0000767060bb355b >
 ..  a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0  ..
0x767060bb437b    b801000000              mov eax, 0x1
0x767060bb4380    4983c608                add r14, 0x8
0x767060bb4384    498906                  mov [r14], rax
 .. 10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a  ..
0x767060bb4387    b804000000              mov eax, 0x4
0x767060bb438c    4983c608                add r14, 0x8
0x767060bb4390    498906                  mov [r14], rax
 .. dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a )  ..
0x767060bb4393    48c7c000000000          mov rax, 0x0
0x767060bb439a    4983c608                add r14, 0x8
0x767060bb439e    498906                  mov [r14], rax
 .. mp ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;  ..
0x767060bb43a1    498b4708                mov rax, [r15+0x8]
0x767060bb43a5    4881c000000000          add rax, 0x0
0x767060bb43ac    4983c608                add r14, 0x8
0x767060bb43b0    498906                  mov [r14], rax
 .. [7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( ..
0x767060bb43b3    49bb5b35bb6070760000    mov r11, 0x767060bb355b
0x767060bb43bd    49ffd3                  call r11                      < Ar10.a10dump : 0x0000767060bb355b >
 ..  a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 ..
0x767060bb43c0    48b895f95c6070760000    mov rax, 0x7670605cf995
0x767060bb43ca    488bf8                  mov rdi, rax
 .. Printf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb43cd    498b4708                mov rax, [r15+0x8]
 .. ntf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb43d1    4881c008003901          add rax, 0x1390008
0x767060bb43d8    488bc8                  mov rcx, rax
 .. a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dum ..
0x767060bb43db    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bb43e5    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb43ef    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb43f2    b843000000              mov eax, 0x43
0x767060bb43f7    4983c608                add r14, 0x8
0x767060bb43fb    498906                  mov [r14], rax
 .. a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb43fe    b8f6000000              mov eax, 0xf6
0x767060bb4403    4983c608                add r14, 0x8
0x767060bb4407    498906                  mov [r14], rax
 .. r[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb440a    48c7c000000000          mov rax, 0x0
0x767060bb4411    4983c608                add r14, 0x8
0x767060bb4415    498906                  mov [r14], rax
 .. 0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb4418    498b4708                mov rax, [r15+0x8]
0x767060bb441c    4881c000000000          add rax, 0x0
0x767060bb4423    4983c608                add r14, 0x8
0x767060bb4427    498906                  mov [r14], rax
 .. [67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb442a    49bb5b35bb6070760000    mov r11, 0x767060bb355b
0x767060bb4434    49ffd3                  call r11                      < Ar10.a10dump : 0x0000767060bb355b >
 .. 0dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb4437    b8010000004983c608      mov rax, 0x8c6834900000001
0x767060bb4440    498906                  mov [r14], rax
 .. ump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb4443    b822000000              mov eax, 0x22
0x767060bb4448    4983c608                add r14, 0x8
0x767060bb444c    498906                  mov [r14], rax
 ..  ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb444f    48c7c000000000          mov rax, 0x0
0x767060bb4456    4983c608                add r14, 0x8
0x767060bb445a    498906                  mov [r14], rax
 ..  67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb445d    498b4708                mov rax, [r15+0x8]
0x767060bb4461    4881c000000000          add rax, 0x0
0x767060bb4468    4983c608                add r14, 0x8
0x767060bb446c    498906                  mov [r14], rax
 .. ) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb446f    49bb5b35bb6070760000    mov r11, 0x767060bb355b
0x767060bb4479    49ffd3                  call r11                      < Ar10.a10dump : 0x0000767060bb355b >
0x767060bb447c    4d8d77f8                lea r14, [r15-0x8]
0x767060bb4480    4d8b7e08                mov r15, [r14+0x8]
 ..  0 a ) ;      a10dump ( 1 34 0 a ) ;  }  ..
0x767060bb4484    c3                      ret
Word_Disassemble : word - 'CSL_a10' :: codeSize = 644
Word : 0x0000767060f70d3b :: Compiled at : 0x0000767060bb4201
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 488.12 <::
 0x000076705d89b1a8
arr10->dimSize = 256
a->ar[0][6][7] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 0 y = 0 z = 0
 dimSize = 256
 a = 0x000076705d89b1a8 a.ar = 0x000076705d89b1b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x000076705d89b1b0 : Number = 256 :: (little endian dump)
0x000076705d89b1b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........
0x000076705d89b1c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........
0x000076705d89b1d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./
0x000076705d89b1e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>?
0x000076705d89b1f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO
0x000076705d89b200 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_
0x000076705d89b210 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno
0x000076705d89b220 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~.
0x000076705d89b230 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........
0x000076705d89b240 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........
0x000076705d89b250 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........
0x000076705d89b260 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........
0x000076705d89b270 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........
0x000076705d89b280 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........
0x000076705d89b290 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........
0x000076705d89b2a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 4 z = 0
 dimSize = 256
 a = 0x000076705d89b1a8 a.ar = 0x000076705d89b1b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x000076705d89b5b1 : Number = 256 :: (little endian dump)
0x000076705d89b5b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........
0x000076705d89b5c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......
0x000076705d89b5d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0
0x000076705d89b5e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@
0x000076705d89b5f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP
0x000076705d89b601 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_`
0x000076705d89b611 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop
0x000076705d89b621 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~..
0x000076705d89b631 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........
0x000076705d89b641 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........
0x000076705d89b651 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........
0x000076705d89b661 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........
0x000076705d89b671 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........
0x000076705d89b681 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........
0x000076705d89b691 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........
0x000076705d89b6a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........

a->ar[0][246][67] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 67 y = 246 z = 0
 dimSize = 256
 a = 0x000076705d89b1a8 a.ar = 0x000076705d89b1b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x000076705d8aa7f3 : Number = 256 :: (little endian dump)
0x000076705d8aa7f3 :  43 44 45 46 47 48 49 4a  4b 4c 4d 4e 4f 50 51 52  CDEFGHIJ KLMNOPQR
0x000076705d8aa803 :  53 54 55 56 57 58 59 5a  5b 5c 5d 5e 5f 60 61 62  STUVWXYZ [\]^_`ab
0x000076705d8aa813 :  63 64 65 66 67 68 69 6a  6b 6c 6d 6e 6f 70 71 72  cdefghij klmnopqr
0x000076705d8aa823 :  73 74 75 76 77 78 79 7a  7b 7c 7d 7e 7f 80 81 82  stuvwxyz {|}~....
0x000076705d8aa833 :  83 84 85 86 87 88 89 8a  8b 8c 8d 8e 8f 90 91 92  ........ ........
0x000076705d8aa843 :  93 94 95 96 97 98 99 9a  9b 9c 9d 9e 9f a0 a1 a2  ........ ........
0x000076705d8aa853 :  a3 a4 a5 a6 a7 a8 a9 aa  ab ac ad ae af b0 b1 b2  ........ ........
0x000076705d8aa863 :  b3 b4 b5 b6 b7 b8 b9 ba  bb bc bd be bf c0 c1 c2  ........ ........
0x000076705d8aa873 :  c3 c4 c5 c6 c7 c8 c9 ca  cb cc cd ce cf d0 d1 d2  ........ ........
0x000076705d8aa883 :  d3 d4 d5 d6 d7 d8 d9 da  db dc dd de df e0 e1 e2  ........ ........
0x000076705d8aa893 :  e3 e4 e5 e6 e7 e8 e9 ea  eb ec ed ee ef f0 f1 f2  ........ ........
0x000076705d8aa8a3 :  f3 f4 f5 f6 f7 f8 f9 fa  fb fc fd fe ff 00 01 02  ........ ........
0x000076705d8aa8b3 :  03 04 05 06 07 08 09 0a  0b 0c 0d 0e 0f 10 11 12  ........ ........
0x000076705d8aa8c3 :  13 14 15 16 17 18 19 1a  1b 1c 1d 1e 1f 20 21 22  ........ ..... !"
0x000076705d8aa8d3 :  23 24 25 26 27 28 29 2a  2b 2c 2d 2e 2f 30 31 32  #$%&'()* +,-./012
0x000076705d8aa8e3 :  33 34 35 36 37 38 39 3a  3b 3c 3d 3e 3f 40 41 42  3456789: ;<=>?@AB

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 34 z = 0
 dimSize = 256
 a = 0x000076705d89b1a8 a.ar = 0x000076705d89b1b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x000076705d89d3b1 : Number = 256 :: (little endian dump)
0x000076705d89d3b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........
0x000076705d89d3c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......
0x000076705d89d3d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0
0x000076705d89d3e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@
0x000076705d89d3f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP
0x000076705d89d401 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_`
0x000076705d89d411 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop
0x000076705d89d421 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~..
0x000076705d89d431 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........
0x000076705d89d441 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........
0x000076705d89d451 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........
0x000076705d89d461 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........
0x000076705d89d471 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........
0x000076705d89d481 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........
0x000076705d89d491 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........
0x000076705d89d4a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........

including namespaces/test/localsTest.csl at namespaces/test/initTest.csl : 86.41 ...
 1 2 3 12

 =============================
C_Syntax.taa <:> csl compiled word
SourceCode for C_Syntax.taa :>
int64 taa ( one two three ) { int64 four, five ; four = one + two + three ; five = one + two + three + four ; p ( one ) ; p ( two ) ; p ( three ) ; p ( five ) ; nl () ; }
Source code file location of taa : "namespaces/test/localsTest.csl" : 10.4 :: we are now at : namespaces/test/localsTest.csl : 22.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb4559 -- code size = 198 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.taa : definition = 0x0000767060bb4559 : disassembly at namespaces/test/localsTest.csl : 22.16 :
0x767060bb4559    4d897e08                mov [r14+0x8], r15
0x767060bb455d    4d8d7e08                lea r15, [r14+0x8]
0x767060bb4561    4981c618000000          add r14, 0x18
 .. ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( th ..
0x767060bb4568    498b47e8                mov rax, [r15-0x18]
 ..   int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three )  ..
0x767060bb456c    498b4ff0                mov rcx, [r15-0x10]
 ..     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three  ..
0x767060bb4570    4803c1                  add rax, rcx
 .. 4 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;      ..
0x767060bb4573    498b4ff8                mov rcx, [r15-0x8]
 .. t64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;    ..
0x767060bb4577    4803c1                  add rax, rcx
 ..  three ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     ..
0x767060bb457a    49894708                mov [r15+0x8], rax
 .. four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl ..
0x767060bb457e    498b47e8                mov rax, [r15-0x18]
 ..  one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ;  ..
0x767060bb4582    498b4ff0                mov rcx, [r15-0x10]
 ..  = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl ()  ..
0x767060bb4586    4803c1                  add rax, rcx
 ..  two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb4589    498b4ff8                mov rcx, [r15-0x8]
 ..  + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb458d    4803c1                  add rax, rcx
 .. hree ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb4590    498b4f08                mov rcx, [r15+0x8]
 ..  three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb4594    4803c1                  add rax, rcx
 ..  ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ; ..
0x767060bb4597    49894710                mov [r15+0x10], rax
 ..  = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb459b    498b47e8                mov rax, [r15-0x18]
0x767060bb459f    4983c608                add r14, 0x8
0x767060bb45a3    498906                  mov [r14], rax
0x767060bb45a6    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb45b0    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. hree + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb45b3    498b47f0                mov rax, [r15-0x10]
0x767060bb45b7    4983c608                add r14, 0x8
0x767060bb45bb    498906                  mov [r14], rax
0x767060bb45be    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb45c8    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..   p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb45cb    498b47f8                mov rax, [r15-0x8]
0x767060bb45cf    4983c608                add r14, 0x8
0x767060bb45d3    498906                  mov [r14], rax
0x767060bb45d6    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb45e0    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb45e3    498b4710                mov rax, [r15+0x10]
0x767060bb45e7    4983c608                add r14, 0x8
0x767060bb45eb    498906                  mov [r14], rax
0x767060bb45ee    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb45f8    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bb45fb    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb4605    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb460f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb4612    4d8d77f8                lea r14, [r15-0x8]
0x767060bb4616    4d8b7e08                mov r15, [r14+0x8]
0x767060bb461a    4983ee18                sub r14, 0x18
 .. hree ) ;     p ( five ) ;     nl () ; }  ..
0x767060bb461e    c3                      ret
Word_Disassemble : word - 'taa' :: codeSize = 198
Word : 0x0000767060f7c3eb :: Compiled at : 0x0000767060bb4559
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 22.16 <::
 1 2 3 12
 3 3 3
 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 1 2 3
 1 2 3 4 3 3 3 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 1 2 3
 1 2 3 4
 =============================
C.hey <:> csl compiled word
SourceCode for C.hey :>
: hey ( n m | o q ) o m @ = m @ o @ "hey_1_assert" assert q n @ = n @ q @ "hey_2_assert" assert n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert ;
Source code file location of hey : "namespaces/test/localsTest.csl" : 90.2 :: we are now at : namespaces/test/localsTest.csl : 98.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb4e57 -- code size = 386 bytes
TypeSignature :
 -----------------------------
Word :: C.hey : definition = 0x0000767060bb4e57 : disassembly at namespaces/test/localsTest.csl : 98.17 :
0x767060bb4e57    4d897e08                mov [r14+0x8], r15
0x767060bb4e5b    4d8d7e08                lea r15, [r14+0x8]
0x767060bb4e5f    4981c618000000          add r14, 0x18
 ..                  : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + ..
0x767060bb4e66    498d4708                lea rax, [r15+0x8]
 ..                : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + ..
0x767060bb4e6a    498b4ff8                mov rcx, [r15-0x8]
 ..            : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + ..
0x767060bb4e6e    488908                  mov [rax], rcx
 ..         : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + du ..
0x767060bb4e71    498b47f8                mov rax, [r15-0x8]
0x767060bb4e75    4983c608                add r14, 0x8
0x767060bb4e79    498906                  mov [r14], rax
 ..     : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p  ..
0x767060bb4e7c    498b4708                mov rax, [r15+0x8]
0x767060bb4e80    4983c608                add r14, 0x8
0x767060bb4e84    498906                  mov [r14], rax
 .. : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "h ..
0x767060bb4e87    48b8ad948b6070760000    mov rax, 0x7670608b94ad       < string : 'hey_1_assert' >
0x767060bb4e91    4983c608                add r14, 0x8
0x767060bb4e95    498906                  mov [r14], rax
0x767060bb4e98    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb4ea2    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n  ..
0x767060bb4ea5    498d4710                lea rax, [r15+0x10]
 .. @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @  ..
0x767060bb4ea9    498b4ff0                mov rcx, [r15-0x10]
 ..  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @  ..
0x767060bb4ead    488908                  mov [rax], rcx
 ..  o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o  ..
0x767060bb4eb0    498b47f0                mov rax, [r15-0x10]
0x767060bb4eb4    4983c608                add r14, 0x8
0x767060bb4eb8    498906                  mov [r14], rax
 ..  "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ +  ..
0x767060bb4ebb    498b4710                mov rax, [r15+0x10]
0x767060bb4ebf    4983c608                add r14, 0x8
0x767060bb4ec3    498906                  mov [r14], rax
 .. y_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @  ..
0x767060bb4ec6    48b8d8948b6070760000    mov rax, 0x7670608b94d8       < string : 'hey_2_assert' >
0x767060bb4ed0    4983c608                add r14, 0x8
0x767060bb4ed4    498906                  mov [r14], rax
0x767060bb4ed7    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb4ee1    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..  @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_as ..
0x767060bb4ee4    498b47f0                mov rax, [r15-0x10]
0x767060bb4ee8    4983c608                add r14, 0x8
0x767060bb4eec    498906                  mov [r14], rax
 ..    n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert ..
0x767060bb4eef    498b47f8                mov rax, [r15-0x8]
0x767060bb4ef3    4983c608                add r14, 0x8
0x767060bb4ef7    498906                  mov [r14], rax
 ..  @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" as ..
0x767060bb4efa    498b4708                mov rax, [r15+0x8]
 ..  @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert ..
0x767060bb4efe    498b4f10                mov rcx, [r15+0x10]
0x767060bb4f02    4803c1                  add rax, rcx
 .. hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert     ..
0x767060bb4f05    488bc8                  mov rcx, rax
0x767060bb4f08    498b06                  mov rax, [r14]
0x767060bb4f0b    4983ee08                sub r14, 0x8
0x767060bb4f0f    4803c1                  add rax, rcx
 .. y_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert       ..
0x767060bb4f12    488bc8                  mov rcx, rax
0x767060bb4f15    498b06                  mov rax, [r14]
0x767060bb4f18    4983ee08                sub r14, 0x8
 .. 2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert         ..
0x767060bb4f1c    4803c1                  add rax, rcx
 .. assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f1f    b901000000              mov ecx, 0x1
 .. sert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f24    4803c1                  add rax, rcx
0x767060bb4f27    4983c610                add r14, 0x10
0x767060bb4f2b    498906                  mov [r14], rax
 .. rt" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f2e    498946f8                mov [r14-0x8], rax
 .. assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f32    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb4f3c    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. sert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f3f    b807000000              mov eax, 0x7
0x767060bb4f44    4983c608                add r14, 0x8
0x767060bb4f48    498906                  mov [r14], rax
 .. rt  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f4b    48b807958b6070760000    mov rax, 0x7670608b9507       < string : 'hey_3_assert' >
0x767060bb4f55    4983c608                add r14, 0x8
0x767060bb4f59    498906                  mov [r14], rax
0x767060bb4f5c    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb4f66    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..  + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f69    498b47f0                mov rax, [r15-0x10]
 ..  + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f6d    498b4ff8                mov rcx, [r15-0x8]
 .. up p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f71    4803c1                  add rax, rcx
 ..  p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f74    498b4f08                mov rcx, [r15+0x8]
 ..  "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f78    4803c1                  add rax, rcx
 .. hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f7b    498b4f10                mov rcx, [r15+0x10]
 .. 3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f7f    4803c1                  add rax, rcx
 .. assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f82    b901000000              mov ecx, 0x1
 .. sert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f87    4803c1                  add rax, rcx
0x767060bb4f8a    4983c610                add r14, 0x10
0x767060bb4f8e    498906                  mov [r14], rax
 .. rt" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f91    498946f8                mov [r14-0x8], rax
 .. assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4f95    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb4f9f    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. sert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4fa2    b807000000              mov eax, 0x7
0x767060bb4fa7    4983c608                add r14, 0x8
0x767060bb4fab    498906                  mov [r14], rax
 .. rt  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4fae    48b836958b6070760000    mov rax, 0x7670608b9536       < string : 'hey_4_assert' >
0x767060bb4fb8    4983c608                add r14, 0x8
0x767060bb4fbc    498906                  mov [r14], rax
0x767060bb4fbf    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb4fc9    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb4fcc    4d8d77f8                lea r14, [r15-0x8]
0x767060bb4fd0    4d8b7e08                mov r15, [r14+0x8]
0x767060bb4fd4    4983ee10                sub r14, 0x10
 ..  dup p 7 "hey_4_assert" assert        ;  ..
0x767060bb4fd8    c3                      ret
Word_Disassemble : word - 'hey' :: codeSize = 386
Word : 0x0000767060f975db :: Compiled at : 0x0000767060bb4e57
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 98.17 <::
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
beforeHeey
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
afterHeey
DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

testA1 =  0x00007670609a8ab3
 0x00007670609a8ab3 0x000076705fbb2ae8 0x00007670609a8ab3
 this =  0x00007670609a8ab3

 t1 @ =  0x00007670609a8ab3
 t1 =  0x000076705fbb2ae8
 done showing variables

Dump at : namespaces/test/localsTest.csl : 144.48 :
Dump : Address = 0x00007670609a8ab3 : Number = 128 :: (little endian dump)
0x00007670609a8ab3 :  8a 9a 60 70 76 00 00 00  00 00 00 00 00 00 00 00  ..`pv... ........
0x00007670609a8ac3 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ad3 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ae3 :  00 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........
0x00007670609a8af3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
0x00007670609a8b03 :  00 00 00 00 00 00 00 00  05 00 00 00 00 00 00 00  ........ ........
0x00007670609a8b13 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........
0x00007670609a8b23 :  00 00 00 00 00 00 00 00  07 00 00 00 00 00 00 00  ........ ........

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

Dump at : namespaces/test/localsTest.csl : 153.15 :
Dump : Address = 0x00007670609a8eb3 : Number = 50 :: (little endian dump)
0x00007670609a8eb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ec3 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ed3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ee3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........
 0x0000000000000003 0x0000000000000004
 before test

Using Namespaces :> DLLNodeAlloc DLLNode Buffer Class Root C User int64 arr10 Ar10 Ar9 Ar3 Ar2 Ar1 void Defines cta ct0 ar9 DLLNodeAlloc4 Int DLListClone DLList Integer Pointer Compiler Logic Shell int List Combinators Bits System libc OpenVmTil Lexer Interpreter Debug byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

 array test ok
 0x0000000000000001
Dump at : namespaces/test/localsTest.csl : 162.15 :
Dump : Address = 0x00007670609a8eb3 : Number = 50 :: (little endian dump)
0x00007670609a8eb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ec3 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ed3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a8ee3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........

Dump at : namespaces/test/localsTest.csl : 165.15 :
Dump : Address = 0x00007670609a90b3 : Number = 50 :: (little endian dump)
0x00007670609a90b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a90c3 :  05 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a90d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a90e3 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 0x0000000000000077 0x000076705fbb2ad8 0x0000000000000001 0x000076705fbb2ae8 0x0000641cca180c20 0x0000000000000001 0x000076705fbb2af0 0x0000000000000001 0x000076705fbb2b00 0x000076705fbb2ae8 0x0000000000000001 0x000076705fbb2af0 0x0000000000000001 0x000076705fbb2b00 0x0000000000000001 0x0000000000000001

testing nested locals

 =============================
User.goedel <:> csl compiled word
SourceCode for User.goedel :>
: goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
Source code file location of goedel : "namespaces/test/localsTest.csl" : 201.2 :: we are now at : namespaces/test/localsTest.csl : 203.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb575b -- code size = 162 bytes
TypeSignature :
 -----------------------------
Word :: User.goedel : definition = 0x0000767060bb575b : disassembly at namespaces/test/localsTest.csl : 203.19 :
0x767060bb575b    4d897e08                mov [r14+0x8], r15
0x767060bb575f    4d8d7e08                lea r15, [r14+0x8]
0x767060bb5763    4981c618000000          add r14, 0x18
 ..                 : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  ..
0x767060bb576a    49c7470801000000        mov qword [r15+0x8], 0x1
 ..               : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  ..
0x767060bb5772    498b4708                mov rax, [r15+0x8]
 ..           : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  ..
0x767060bb5776    b906000000              mov ecx, 0x6
 ..         : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  ..
0x767060bb577b    4803c1                  add rax, rcx
0x767060bb577e    4983c610                add r14, 0x10
0x767060bb5782    498906                  mov [r14], rax
 ..       : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  ..
0x767060bb5785    498946f8                mov [r14-0x8], rax
 ..   : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  ..
0x767060bb5789    b807000000              mov eax, 0x7
0x767060bb578e    4983c608                add r14, 0x8
0x767060bb5792    498906                  mov [r14], rax
0x767060bb5795    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb579f    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 ..  { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57a2    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb57ac    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57af    49c7471003000000        mov qword [r15+0x10], 0x3
 .. + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57b7    498b4710                mov rax, [r15+0x10]
 .. p 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57bb    b904000000              mov ecx, 0x4
 .. 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57c0    4803c1                  add rax, rcx
0x767060bb57c3    4983c610                add r14, 0x10
0x767060bb57c7    498906                  mov [r14], rax
 .. _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57ca    498946f8                mov [r14-0x8], rax
 .. ert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57ce    b807000000              mov eax, 0x7
0x767060bb57d3    4983c608                add r14, 0x8
0x767060bb57d7    498906                  mov [r14], rax
0x767060bb57da    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb57e4    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 ..  { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57e7    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb57f1    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bb57f4    4d8d77f8                lea r14, [r15-0x8]
0x767060bb57f8    4d8b7e08                mov r15, [r14+0x8]
 ..  ) m 3 = m @ 4 + dup 7 _assert p } ix ;
0x767060bb57fc    c3                      ret
Word_Disassemble : word - 'goedel' :: codeSize = 162
Word : 0x0000767060fbb36b :: Compiled at : 0x0000767060bb575b
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 203.19 <::

 goedel ::  7 7
 =============================
User.goedel2 <:> csl compiled word
SourceCode for User.goedel2 :>
: goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
Source code file location of goedel2 : "namespaces/test/localsTest.csl" : 205.2 :: we are now at : namespaces/test/localsTest.csl : 206.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb5802 -- code size = 220 bytes
TypeSignature :
 -----------------------------
Word :: User.goedel2 : definition = 0x0000767060bb5802 : disassembly at namespaces/test/localsTest.csl : 206.20 :
0x767060bb5802    4d897e08                mov [r14+0x8], r15
0x767060bb5806    4d8d7e08                lea r15, [r14+0x8]
0x767060bb580a    4981c618000000          add r14, 0x18
 ..                : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_ass ..
0x767060bb5811    49c7470802000000        mov qword [r15+0x8], 0x2
 ..              : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_asser ..
0x767060bb5819    498b4708                mov rax, [r15+0x8]
 ..          : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" a ..
0x767060bb581d    b905000000              mov ecx, 0x5
0x767060bb5822    4803c1                  add rax, rcx
0x767060bb5825    4983c610                add r14, 0x10
0x767060bb5829    498906                  mov [r14], rax
 ..      : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" asser ..
0x767060bb582c    498946f8                mov [r14-0x8], rax
 ..  : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert }  ..
0x767060bb5830    b807000000              mov eax, 0x7
0x767060bb5835    4983c608                add r14, 0x8
0x767060bb5839    498906                  mov [r14], rax
   : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ..
0x767060bb583c    48b84c9f8b6070760000    mov rax, 0x7670608b9f4c       < string : 'goedel2_1_assert' >
0x767060bb5846    4983c608                add r14, 0x8
0x767060bb584a    498906                  mov [r14], rax
0x767060bb584d    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb5857    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb585a    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb5864    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. del2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb5867    498b4710                mov rax, [r15+0x10]
0x767060bb586b    4983c608                add r14, 0x8
0x767060bb586f    498906                  mov [r14], rax
 .. _1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb5872    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb587c    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb587f    49c7471003000000        mov qword [r15+0x10], 0x3
 .. t" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb5887    498b4710                mov rax, [r15+0x10]
 .. ssert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb588b    b904000000              mov ecx, 0x4
0x767060bb5890    4803c1                  add rax, rcx
0x767060bb5893    4983c610                add r14, 0x10
0x767060bb5897    498906                  mov [r14], rax
 .. t p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb589a    498946f8                mov [r14-0x8], rax
 .. } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb589e    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb58a8    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb58ab    b807000000              mov eax, 0x7
0x767060bb58b0    4983c608                add r14, 0x8
0x767060bb58b4    498906                  mov [r14], rax
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ;
0x767060bb58b7    48b8949f8b6070760000    mov rax, 0x7670608b9f94       < string : 'goedel2_2_assert' >
0x767060bb58c1    4983c608                add r14, 0x8
0x767060bb58c5    498906                  mov [r14], rax
0x767060bb58c8    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb58d2    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb58d5    4d8d77f8                lea r14, [r15-0x8]
0x767060bb58d9    4d8b7e08                mov r15, [r14+0x8]
 .. up p 7 "goedel2_2_assert" assert } ix ;
0x767060bb58dd    c3                      ret
Word_Disassemble : word - 'goedel2' :: codeSize = 220
Word : 0x0000767060fbea4b :: Compiled at : 0x0000767060bb5802
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 206.20 <::

 goedel2 ::  goedel2_1_assert  : ok

 7 0 7 goedel2_2_assert  : ok


 =============================
User.goedel4 <:> csl compiled word
SourceCode for User.goedel4 :>
: goedel4 (| n ) nl "goedel4 :: " ps nl n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix n @ 6 + 8 _assert } ix { (| n ) n @ p n 3 = n dup @ 4 + dup dup 7 "goedel4_3_assert" assert p = n @ p n @ 7 "goedel4_4_assert" assert } ix n @ dup p return tos ;
Source code file location of goedel4 : "namespaces/test/localsTest.csl" : 209.2 :: we are now at : namespaces/test/localsTest.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb58e3 -- code size = 622 bytes
TypeSignature : -> Integer
 -----------------------------
Word :: User.goedel4 : definition = 0x0000767060bb58e3 : disassembly at namespaces/test/localsTest.csl : 229.21 :
0x767060bb58e3    4d897e08                mov [r14+0x8], r15
0x767060bb58e7    4d8d7e08                lea r15, [r14+0x8]
0x767060bb58eb    4981c628000000          add r14, 0x28
0x767060bb58f2    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb58fc    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb5906    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..              : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" asser ..
0x767060bb5909    48b890a08b6070760000    mov rax, 0x7670608ba090       < string : 'goedel4 :: ' >
0x767060bb5913    4983c608                add r14, 0x8
0x767060bb5917    498906                  mov [r14], rax
   : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (|  ..
0x767060bb591a    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb5924    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
: goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) ..
0x767060bb5927    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb5931    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb593b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3  ..
0x767060bb593e    49c7470809000000        mov qword [r15+0x8], 0x9
 .. ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goede ..
0x767060bb5946    498b4710                mov rax, [r15+0x10]
0x767060bb594a    4983c608                add r14, 0x8
0x767060bb594e    498906                  mov [r14], rax
 .. l     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2 ..
0x767060bb5951    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb595b    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_asser ..
0x767060bb595e    49c7471002000000        mov qword [r15+0x10], 0x2
 .. 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" ..
0x767060bb5966    498b4710                mov rax, [r15+0x10]
0x767060bb596a    4983c610                add r14, 0x10
0x767060bb596e    498906                  mov [r14], rax
 ..     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" ass ..
0x767060bb5971    498946f8                mov [r14-0x8], rax
 .. {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert  ..
0x767060bb5975    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb597f    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert }  ..
0x767060bb5982    b802000000              mov eax, 0x2
0x767060bb5987    4983c608                add r14, 0x8
0x767060bb598b    498906                  mov [r14], rax
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix ..
0x767060bb598e    48b8cea08b6070760000    mov rax, 0x7670608ba0ce       < string : 'goedel4_1_assert' >
0x767060bb5998    4983c608                add r14, 0x8
0x767060bb599c    498906                  mov [r14], rax
0x767060bb599f    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb59a9    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. del4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     {  ..
0x767060bb59ac    498b4718                mov rax, [r15+0x18]
0x767060bb59b0    4983c608                add r14, 0x8
0x767060bb59b4    498906                  mov [r14], rax
 .. _1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n ..
0x767060bb59b7    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb59c1    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )     ..
0x767060bb59c4    49c7471803000000        mov qword [r15+0x18], 0x3
 .. t" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )       ..
0x767060bb59cc    498b4718                mov rax, [r15+0x18]
 .. ssert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )           ..
0x767060bb59d0    b904000000              mov ecx, 0x4
0x767060bb59d5    4803c1                  add rax, rcx
0x767060bb59d8    4983c610                add r14, 0x10
0x767060bb59dc    498906                  mov [r14], rax
 .. t        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @  ..
0x767060bb59df    498946f8                mov [r14-0x8], rax
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p    ..
0x767060bb59e3    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb59ed    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p      ..
0x767060bb59f0    b807000000              mov eax, 0x7
0x767060bb59f5    4983c608                add r14, 0x8
0x767060bb59f9    498906                  mov [r14], rax
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p        ..
0x767060bb59fc    48b816a18b6070760000    mov rax, 0x7670608ba116       < string : 'goedel4_2_assert' >
0x767060bb5a06    4983c608                add r14, 0x8
0x767060bb5a0a    498906                  mov [r14], rax
0x767060bb5a0d    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb5a17    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb5a1a    498b4710                mov rax, [r15+0x10]
 .. del4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup du ..
0x767060bb5a1e    b906000000              mov ecx, 0x6
 .. l4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup  ..
0x767060bb5a23    4803c1                  add rax, rcx
0x767060bb5a26    4983c608                add r14, 0x8
0x767060bb5a2a    498906                  mov [r14], rax
 .. _2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7  ..
0x767060bb5a2d    b808000000              mov eax, 0x8
0x767060bb5a32    4983c608                add r14, 0x8
0x767060bb5a36    498906                  mov [r14], rax
0x767060bb5a39    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bb5a43    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bb5a46    498b4720                mov rax, [r15+0x20]
0x767060bb5a4a    4983c608                add r14, 0x8
0x767060bb5a4e    498906                  mov [r14], rax
 .. t      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =   ..
0x767060bb5a51    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb5a5b    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..  { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ ..
0x767060bb5a5e    49c7472003000000        mov qword [r15+0x20], 0x3
0x767060bb5a66    498d4720                lea rax, [r15+0x20]
0x767060bb5a6a    4983c610                add r14, 0x10
0x767060bb5a6e    498906                  mov [r14], rax
 ..        n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_ ..
0x767060bb5a71    498946f8                mov [r14-0x8], rax
 ..    n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_as ..
0x767060bb5a75    498b06                  mov rax, [r14]
0x767060bb5a78    488b00                  mov rax, [rax]
0x767060bb5a7b    498906                  mov [r14], rax
 ..  @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert ..
0x767060bb5a7e    49830604                add qword [r14], 0x4
0x767060bb5a82    498b06                  mov rax, [r14]
0x767060bb5a85    4983c608                add r14, 0x8
0x767060bb5a89    4983c608                add r14, 0x8
0x767060bb5a8d    498906                  mov [r14], rax
 ..  =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix  ..
0x767060bb5a90    b807000000              mov eax, 0x7
0x767060bb5a95    4983c608                add r14, 0x8
0x767060bb5a99    498906                  mov [r14], rax
 ..          n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix    ..
0x767060bb5a9c    48b862a18b6070760000    mov rax, 0x7670608ba162       < string : 'goedel4_3_assert' >
0x767060bb5aa6    4983c608                add r14, 0x8
0x767060bb5aaa    498906                  mov [r14], rax
0x767060bb5aad    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb5ab7    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb5aba    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb5ac4    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bb5ac7    498b0e                  mov rcx, [r14]
0x767060bb5aca    498b46f8                mov rax, [r14-0x8]
0x767060bb5ace    4983ee10                sub r14, 0x10
0x767060bb5ad2    488908                  mov [rax], rcx
0x767060bb5ad5    498b4720                mov rax, [r15+0x20]
0x767060bb5ad9    4983c608                add r14, 0x8
0x767060bb5add    498906                  mov [r14], rax
 ..  assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5ae0    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb5aea    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ssert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5aed    498b4720                mov rax, [r15+0x20]
0x767060bb5af1    4983c608                add r14, 0x8
0x767060bb5af5    498906                  mov [r14], rax
 .. t        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5af8    b807000000              mov eax, 0x7
0x767060bb5afd    4983c608                add r14, 0x8
0x767060bb5b01    498906                  mov [r14], rax
 ..        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5b04    48b89ba18b6070760000    mov rax, 0x7670608ba19b       < string : 'goedel4_4_assert' >
0x767060bb5b0e    4983c608                add r14, 0x8
0x767060bb5b12    498906                  mov [r14], rax
0x767060bb5b15    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb5b1f    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb5b22    498b4708                mov rax, [r15+0x8]
0x767060bb5b26    4983c610                add r14, 0x10
0x767060bb5b2a    498906                  mov [r14], rax
 .. el4_4_assert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5b2d    498946f8                mov [r14-0x8], rax
 .. 4_assert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5b31    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb5b3b    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ert" assert    } ix      n @ dup p    return tos ;  ..
0x767060bb5b3e    498b06                  mov rax, [r14]
0x767060bb5b41    4d8d77f8                lea r14, [r15-0x8]
0x767060bb5b45    4d8b7e08                mov r15, [r14+0x8]
0x767060bb5b49    4983c608                add r14, 0x8
0x767060bb5b4d    498906                  mov [r14], rax
 ..     } ix      n @ dup p    return tos ;  ..
0x767060bb5b50    c3                      ret
Word_Disassemble : word - 'goedel4' :: codeSize = 622
Word : 0x0000767060fc299b :: Compiled at : 0x0000767060bb58e3
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 229.21 <::

 goedel4 ::
 130225035553179 2 goedel4_1_assert  : ok

 130225014516448 7 goedel4_2_assert  : ok

 130225028108527 goedel4_3_assert  : ok

 130225014516448 7 goedel4_4_assert  : ok

 9 goedel4_0_assert  : ok


goedel4 :: output should have read :
'junk' 2 'junk' 7 'junk' 7 7 9
 goedel5 ::
 110074812435488 2 goedel5_1_assert  : ok

 130225028110505 7 goedel5_2_assert  : ok

 goedel5_3_assert  : ok

 7 7 goedel5_4_assert  : ok

 9 goedel5_0_assert  : ok


goedel5 :: output should read : junk' 2 'junk' 7 7 9
 goedel6 ::
 110074812435488 2 goedel6_1_assert  : ok

 130225028110505 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 7 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok


goedel6 :: goedel6 output should read :
'junk' 2 'junk' 7 7 'junk' 9
 goedel7 ::

 goedel7 ::
 0 2 goedel7_1_assert  : ok

 0 7 goedel7_2_assert  : ok

 18 goedel7_0_assert  : ok


goedel7 :: goedel7 output should read :
'junk' 2 'junk' 7 18
including namespaces/test/file.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Lexer.ofile <:> csl compiled word, prefix
SourceCode for Lexer.ofile :>
: ofile ( name | file input result ) input 0 = "open/read/print :: " ps name @ ps nl file name @ fopen = nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile file @ fclose ;
Source code file location of ofile : "namespaces/test/file.csl" : 5.2 :: we are now at : namespaces/test/file.csl : 13.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb618f -- code size = 356 bytes
TypeSignature :
 -----------------------------
Word :: Lexer.ofile : definition = 0x0000767060bb618f : disassembly at namespaces/test/file.csl : 13.19 :
0x767060bb618f    4d897e08                mov [r14+0x8], r15
0x767060bb6193    4d8d7e08                lea r15, [r14+0x8]
0x767060bb6197    4981c620000000          add r14, 0x20
 .. ame | file input result )     input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 f ..
0x767060bb619e    49c7471000000000        mov qword [r15+0x10], 0x0
0x767060bb61a6    48b81bb08b6070760000    mov rax, 0x7670608bb01b       < string : 'open/read/print :: ' >
0x767060bb61b0    4983c608                add r14, 0x8
0x767060bb61b4    498906                  mov [r14], rax
 ..   input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { resu ..
0x767060bb61b7    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb61c1    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. nput 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result  ..
0x767060bb61c4    498b47f8                mov rax, [r15-0x8]
0x767060bb61c8    4983c608                add r14, 0x8
0x767060bb61cc    498906                  mov [r14], rax
 .. =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 ==  ..
0x767060bb61cf    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb61d9    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..    "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } d ..
0x767060bb61dc    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb61e6    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb61f0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. n/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile  ..
0x767060bb61f3    498d4708                lea rax, [r15+0x8]
0x767060bb61f7    4983c608                add r14, 0x8
0x767060bb61fb    498906                  mov [r14], rax
 .. d/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile       ..
0x767060bb61fe    498b47f8                mov rax, [r15-0x8]
0x767060bb6202    4983c608                add r14, 0x8
0x767060bb6206    498906                  mov [r14], rax
 ..  :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @  ..
0x767060bb6209    49baf01c13ca1c640000    mov r10, 0x641cca131cf0
0x767060bb6213    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb621d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb6220    498b0e                  mov rcx, [r14]
0x767060bb6223    498b46f8                mov rax, [r14-0x8]
0x767060bb6227    4983ee10                sub r14, 0x10
 .. ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ..
0x767060bb622b    488908                  mov [rax], rcx
0x767060bb622e    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6238    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6242    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. s nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb6245    498d4718                lea rax, [r15+0x18]
0x767060bb6249    4983c608                add r14, 0x8
0x767060bb624d    498906                  mov [r14], rax
 ..   file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb6250    498b4708                mov rax, [r15+0x8]
0x767060bb6254    4983c608                add r14, 0x8
0x767060bb6258    498906                  mov [r14], rax
 .. name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb625b    498d4710                lea rax, [r15+0x10]
0x767060bb625f    4983c608                add r14, 0x8
0x767060bb6263    498906                  mov [r14], rax
 ..  fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb6266    b801000000              mov eax, 0x1
0x767060bb626b    4983c608                add r14, 0x8
0x767060bb626f    498906                  mov [r14], rax
 .. open =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb6272    49ba401d13ca1c640000    mov r10, 0x641cca131d40
0x767060bb627c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6286    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb6289    498b0e                  mov rcx, [r14]
0x767060bb628c    498b46f8                mov rax, [r14-0x8]
0x767060bb6290    4983ee10                sub r14, 0x10
 ..      nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb6294    488908                  mov [rax], rcx
 ..    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb6297    498b4710                mov rax, [r15+0x10]
0x767060bb629b    4983c608                add r14, 0x8
0x767060bb629f    498906                  mov [r14], rax
 .. result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62a2    49ba90e212ca1c640000    mov r10, 0x641cca12e290
0x767060bb62ac    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb62b6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. le @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62b9    49837f1801              cmp qword [r15+0x18], 0x1
 .. read = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62be    0f8481ffffff            jz 0x767060bb6245             < Lexer.ofile+182 >
 .. emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62c4    498b4708                mov rax, [r15+0x8]
 .. 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62c8    4983c608                add r14, 0x8
0x767060bb62cc    498906                  mov [r14], rax
 .. { result @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62cf    49ba201d13ca1c640000    mov r10, 0x641cca131d20
0x767060bb62d9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb62e3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb62e6    4d8d77f8                lea r14, [r15-0x8]
0x767060bb62ea    4d8b7e08                mov r15, [r14+0x8]
0x767060bb62ee    4983ee08                sub r14, 0x8
 .. t @ 1 == } doWhile      file @ fclose ;  ..
0x767060bb62f2    c3                      ret
Word_Disassemble : word - 'ofile' :: codeSize = 356
Word : 0x0000767060fe79bb :: Compiled at : 0x0000767060bb618f
 =============================
::> 'wdiss' was called at namespaces/test/file.csl 13.19 <::
 open/read/print ::  namespaces/test/file.csl

5
#if 1 // already added to .init.csl
C Compiler Int Lexer
jcc8_Off
: ofile ( name | file input result )
    input 0 =
    "open/read/print :: " ps name @ ps nl
    file name @ fopen =
    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile
    file @ fclose
; prefix
#endif
' ofile find wdiss //pause
ofile ( "namespaces/test/file.csl" )
//pause
: hi 1 2 + p ;
: hey hi hi ;
: heey hey hey ;
heey
2 + 7 assertStkChk // stack checking


 3 3 3 3
including namespaces/test/dobject.csl at namespaces/test/initTest.csl : 86.41 ...

dynamic object test
 object new slot test :   : ok

 object clone test :   : ok

 object clone test2 :   : ok

 object clone test3 :   : ok

 object clone test4 :   : ok

 object clone test5 :   : ok

 object compile test6 :   : ok

 object compile test7 :   : ok

 object compile test8 :   : ok


including namespaces/test/control.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Control.abrkcon <:> csl compiled word
SourceCode for Control.abrkcon :>
: abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
Source code file location of abrkcon : "namespaces/test/control.csl" : 14.2 :: we are now at : namespaces/test/control.csl : 15.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb64c5 -- code size = 150 bytes
TypeSignature :
 -----------------------------
Word :: Control.abrkcon : definition = 0x0000767060bb64c5 : disassembly at namespaces/test/control.csl : 15.20 :
 ..                         : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64c5    48b8ab23ff6070760000    mov rax, 0x767060ff23ab
0x767060bb64cf    488b00                  mov rax, [rax]
 ..                   : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64d2    4883f800                cmp rax, 0x0
 ..                : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64d6    0f850a000000            jnz 0x767060bb64e6            < Control.abrkcon+33 >
 ..            : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64dc    e979000000              jmp 0x767060bb655a            < Control.abrkcon+149 >
 ..      : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64e1    e956000000              jmp 0x767060bb653c            < Control.abrkcon+119 >
 ..  : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64e6    48b8ab23ff6070760000    mov rax, 0x767060ff23ab
0x767060bb64f0    488b00                  mov rax, [rax]
0x767060bb64f3    4983c608                add r14, 0x8
0x767060bb64f7    498906                  mov [r14], rax
 : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  ..
0x767060bb64fa    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6504    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. kcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6507    48b8ab23ff6070760000    mov rax, 0x767060ff23ab
0x767060bb6511    4983c610                add r14, 0x10
0x767060bb6515    498906                  mov [r14], rax
 .. on { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6518    498946f8                mov [r14-0x8], rax
 ..  { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb651c    498b06                  mov rax, [r14]
0x767060bb651f    488b00                  mov rax, [rax]
0x767060bb6522    498906                  mov [r14], rax
 ..  @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6525    49832e01                sub qword [r14], 0x1
 .. reak } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6529    498b0e                  mov rcx, [r14]
0x767060bb652c    498b46f8                mov rax, [r14-0x8]
0x767060bb6530    4983ee10                sub r14, 0x10
 ..  0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6534    488908                  mov [rax], rcx
 ..  == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6537    e989ffffff              jmp 0x767060bb64c5            < Control.abrkcon : 0x0000767060bb64c5 >
 .. x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb653c    b802000000              mov eax, 0x2
0x767060bb6541    4983c608                add r14, 0x8
0x767060bb6545    498906                  mov [r14], rax
 .. @ p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6548    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6552    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. p x dup @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb6555    e96bffffff              jmp 0x767060bb64c5            < Control.abrkcon : 0x0000767060bb64c5 >
 ..  @ 1 - = continue } ifElse 2 p } loop ;
0x767060bb655a    c3                      ret
Word_Disassemble : word - 'abrkcon' :: codeSize = 150
Word : 0x0000767060ff24cb :: Compiled at : 0x0000767060bb64c5
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 15.20 <::
 10 9 8 7 6 5 4 3 2 1
 =============================
Control.abrk0 <:> csl compiled word
SourceCode for Control.abrk0 :>
: abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;
Source code file location of abrk0 : "namespaces/test/control.csl" : 17.2 :: we are now at : namespaces/test/control.csl : 18.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb6560 -- code size = 110 bytes
TypeSignature :
 -----------------------------
Word :: Control.abrk0 : definition = 0x0000767060bb6560 : disassembly at namespaces/test/control.csl : 18.10 :
0x767060bb6560    4d897e08                mov [r14+0x8], r15
0x767060bb6564    4d8d7e08                lea r15, [r14+0x8]
0x767060bb6568    4981c608000000          add r14, 0x8
 ..  ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb656f    49837ff800              cmp qword [r15-0x8], 0x0
 ..            : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  ..
0x767060bb6574    0f850a000000            jnz 0x767060bb6584            < Control.abrk0+36 >
 ..        : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  ..
0x767060bb657a    e942000000              jmp 0x767060bb65c1            < Control.abrk0+97 >
 ..  : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  ..
0x767060bb657f    e922000000              jmp 0x767060bb65a6            < Control.abrk0+70 >
 : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  ..
0x767060bb6584    498b47f8                mov rax, [r15-0x8]
0x767060bb6588    4983c608                add r14, 0x8
0x767060bb658c    498906                  mov [r14], rax
 ..  ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb658f    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6599    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb659c    49836ff801              sub qword [r15-0x8], 0x1
 .. { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb65a1    e9c9ffffff              jmp 0x767060bb656f            < Control.abrk0+15 >
 .. ak } { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb65a6    b802000000              mov eax, 0x2
0x767060bb65ab    4983c608                add r14, 0x8
0x767060bb65af    498906                  mov [r14], rax
 ..  } { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb65b2    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb65bc    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  { x @ p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb65bf    ebae                    jmp 0x767060bb656f            < Control.abrk0+15 >
0x767060bb65c1    4d8d77f8                lea r14, [r15-0x8]
0x767060bb65c5    4d8b7e08                mov r15, [r14+0x8]
0x767060bb65c9    4983ee08                sub r14, 0x8
 .. p x 1 -= continue } ifElse 2 p } loop ;
0x767060bb65cd    c3                      ret
Word_Disassemble : word - 'abrk0' :: codeSize = 110
Word : 0x0000767060ff4b9b :: Compiled at : 0x0000767060bb6560
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 18.10 <::

 10 9 8 7 6 5 4 3 2 1
 =============================
Control.ct00 <:> csl compiled word
SourceCode for Control.ct00 :>
: ct00 ( n | j ) { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p } for ;
Source code file location of ct00 : "namespaces/test/control.csl" : 34.2 :: we are now at : namespaces/test/control.csl : 41.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb66c4 -- code size = 107 bytes
TypeSignature :
 -----------------------------
Word :: Control.ct00 : definition = 0x0000767060bb66c4 : disassembly at namespaces/test/control.csl : 41.17 :
0x767060bb66c4    4d897e08                mov [r14+0x8], r15
0x767060bb66c8    4d8d7e08                lea r15, [r14+0x8]
0x767060bb66cc    4981c610000000          add r14, 0x10
 ..           : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  ..
0x767060bb66d3    49c7470801000000        mov qword [r15+0x8], 0x1
 ..     : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  ..
0x767060bb66db    498b4708                mov rax, [r15+0x8]
 .. : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  ..
0x767060bb66df    498b4ff8                mov rcx, [r15-0x8]
: ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  ..
0x767060bb66e3    483bc1                  cmp rax, rcx
 .. ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;
0x767060bb66e6    0f8f36000000            jg 0x767060bb6722             < Control.ct00+94 >
0x767060bb66ec    498b47f8                mov rax, [r15-0x8]
0x767060bb66f0    4983c608                add r14, 0x8
0x767060bb66f4    498906                  mov [r14], rax
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;
0x767060bb66f7    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6701    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p      }     for ;
0x767060bb6704    498b4708                mov rax, [r15+0x8]
0x767060bb6708    4983c608                add r14, 0x8
0x767060bb670c    498906                  mov [r14], rax
 ..  <= } { j ++ }     {        n @ p j @ p      }     for ;
0x767060bb670f    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6719    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;
0x767060bb671c    49ff4708                inc qword [r15+0x8]
 ..       { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;
0x767060bb6720    ebb9                    jmp 0x767060bb66db            < Control.ct00+23 >
0x767060bb6722    4d8d77f8                lea r14, [r15-0x8]
0x767060bb6726    4d8b7e08                mov r15, [r14+0x8]
0x767060bb672a    4983ee08                sub r14, 0x8
 ..   {        n @ p j @ p      }     for ;
0x767060bb672e    c3                      ret
Word_Disassemble : word - 'ct00' :: codeSize = 107
Word : 0x0000767060ff935b :: Compiled at : 0x0000767060bb66c4
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 41.17 <::
 17 1 17 2 17 3 17 4 17 5 17 6 17 7 17 8 17 9 17 10 17 11 17 12 17 13 17 14 17 15 17 16 17 17
 =============================
Control.ct0 <:> csl compiled word
SourceCode for Control.ct0 :>
: ct0 ( n | j ) nl "ct0 : " ps nl { label: test1 "ct0 before goto/label works" ps nl goto: leave } _ { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse } for label: leave "ct0" n @ j @ leaving ;
Source code file location of ct0 : "namespaces/test/control.csl" : 44.2 :: we are now at : namespaces/test/control.csl : 60.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb6734 -- code size = 412 bytes
TypeSignature :
 -----------------------------
Word :: Control.ct0 : definition = 0x0000767060bb6734 : disassembly at namespaces/test/control.csl : 60.16 :
0x767060bb6734    4d897e08                mov [r14+0x8], r15
0x767060bb6738    4d8d7e08                lea r15, [r14+0x8]
0x767060bb673c    4981c610000000          add r14, 0x10
0x767060bb6743    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb674d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6757    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..               : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          got ..
0x767060bb675a    48b832b98b6070760000    mov rax, 0x7670608bb932       < string : 'ct0 : ' >
0x767060bb6764    4983c608                add r14, 0x8
0x767060bb6768    498906                  mov [r14], rax
 ..      : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave  ..
0x767060bb676b    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb6775    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..   : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave     ..
0x767060bb6778    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6782    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb678c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb678f    e93b000000              jmp 0x767060bb67cf            < Control.ct0+155 >
0x767060bb6794    48b871b98b6070760000    mov rax, 0x7670608bb971       < string : 'ct0 before goto/label works' >
0x767060bb679e    4983c608                add r14, 0x8
0x767060bb67a2    498906                  mov [r14], rax
 ..         "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p   ..
0x767060bb67a5    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb67af    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..      "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      ..
0x767060bb67b2    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb67bc    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb67c6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb67c9    e9c1000000              jmp 0x767060bb688f            < Control.ct0+347 >
0x767060bb67ce    c3                      ret
 ..        goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto ..
0x767060bb67cf    49c7470801000000        mov qword [r15+0x8], 0x1
 ..  goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label ..
0x767060bb67d7    498b4708                mov rax, [r15+0x8]
 .. o: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'h ..
0x767060bb67db    498b4ff8                mov rcx, [r15-0x8]
 .. eave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\'  ..
0x767060bb67df    483bc1                  cmp rax, rcx
 .. e      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ..
0x767060bb67e2    0f8fa7000000            jg 0x767060bb688f             < Control.ct0+347 >
0x767060bb67e8    498b47f8                mov rax, [r15-0x8]
0x767060bb67ec    4983c608                add r14, 0x8
0x767060bb67f0    498906                  mov [r14], rax
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continu ..
0x767060bb67f3    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb67fd    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuin ..
0x767060bb6800    498b4708                mov rax, [r15+0x8]
0x767060bb6804    4983c608                add r14, 0x8
0x767060bb6808    498906                  mov [r14], rax
 ..  <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct ..
0x767060bb680b    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6815    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifEl ..
0x767060bb6818    498b47f8                mov rax, [r15-0x8]
 ..    {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse   ..
0x767060bb681c    498b4f08                mov rcx, [r15+0x8]
 ..         n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     } ..
0x767060bb6820    483bc1                  cmp rax, rcx
 ..      n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }    ..
0x767060bb6823    0f853f000000            jnz 0x767060bb6868            < Control.ct0+308 >
 ..  n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     fo ..
0x767060bb6829    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6833    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb683d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for   ..
0x767060bb6840    48b8d0b98b6070760000    mov rax, 0x7670608bb9d0       < string : 'testing ct0 : goto/label 'hi' ->' >
0x767060bb684a    4983c608                add r14, 0x8
0x767060bb684e    498906                  mov [r14], rax
 ..  "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ le ..
0x767060bb6851    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb685b    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. esting ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leavi ..
0x767060bb685e    e931ffffff              jmp 0x767060bb6794            < Control.ct0+96 >
 ..  goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb6863    e91e000000              jmp 0x767060bb6886            < Control.ct0+338 >
 .. o/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb6868    48b825ba8b6070760000    mov rax, 0x7670608bba25       < string : 'continuing ct0' >
0x767060bb6872    4983c608                add r14, 0x8
0x767060bb6876    498906                  mov [r14], rax
 .. " ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb6879    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb6883    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps go ..
0x767060bb6886    49ff4708                inc qword [r15+0x8]
 .. _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: ..
0x767060bb688a    e948ffffff              jmp 0x767060bb67d7            < Control.ct0+163 >
0x767060bb688f    48b851ba8b6070760000    mov rax, 0x7670608bba51       < string : 'ct0' >
0x767060bb6899    4983c608                add r14, 0x8
0x767060bb689d    498906                  mov [r14], rax
 .. }     for     label: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb68a0    498b47f8                mov rax, [r15-0x8]
0x767060bb68a4    4983c608                add r14, 0x8
0x767060bb68a8    498906                  mov [r14], rax
 ..   for     label: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb68ab    498b4708                mov rax, [r15+0x8]
0x767060bb68af    4983c608                add r14, 0x8
0x767060bb68b3    498906                  mov [r14], rax
 .. r     label: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb68b6    49bbd365bb6070760000    mov r11, 0x767060bb65d3
0x767060bb68c0    49ffd3                  call r11                      < Control.leaving : 0x0000767060bb65d3 >
0x767060bb68c3    4d8d77f8                lea r14, [r15-0x8]
0x767060bb68c7    4d8b7e08                mov r15, [r14+0x8]
0x767060bb68cb    4983ee08                sub r14, 0x8
 .. bel: leave      "ct0" n @ j @ leaving ;  ..
0x767060bb68cf    c3                      ret
Word_Disassemble : word - 'ct0' :: codeSize = 412
Word : 0x0000767060ffc15b :: Compiled at : 0x0000767060bb6734
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 60.16 <::

 ct0 :
 17 1 continuing ct0 17 2 continuing ct0 17 3 continuing ct0 17 4 continuing ct0 17 5 continuing ct0 17 6 continuing ct0 17 7 continuing ct0 17 8 continuing ct0 17 9 continuing ct0 17 10 continuing ct0 17 11 continuing ct0 17 12 continuing ct0 17 13 continuing ct0 17 14 continuing ct0 17 15 continuing ct0 17 16 continuing ct0 17 17
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000076705fbb2b08, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b08 > = 0x000076705fbb2ae0
  DataStack   [  -1 ] < 0x000076705fbb2b00 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x000076705fbb2af8 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x000076705fbb2af0 > = 0x00007670608bba51       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000076705fbb2ae8 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -6 ] < 0x000076705fbb2ad8 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 leaving ct0 n = 17 j =  17
DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000076705fbb2b08, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b08 > = 0x000076705fbb2ae0
  DataStack   [  -1 ] < 0x000076705fbb2b00 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x000076705fbb2af8 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x000076705fbb2af0 > = 0x00007670608bba51       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000076705fbb2ae8 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -6 ] < 0x000076705fbb2ad8 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct1 :
 17 1 continuing ct1 17 2 continuing ct1 17 3 continuing ct1 17 4 continuing ct1 17 5 continuing ct1 17 6 continuing ct1 17 7 continuing ct1 17 8 continuing ct1 17 9 continuing ct1 17 10 continuing ct1 17 11 continuing ct1 17 12 continuing ct1 17 13 continuing ct1 17 14 continuing ct1 17 15 continuing ct1 17 16 continuing ct1 17 17
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

 ct2 :

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

 =============================
Control.hic2 <:> csl compiled word
SourceCode for Control.hic2 :>
: hic2 ( n ) nl "hic2 : start " ps nl s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p nl "hic2 : done " ps nl ;
Source code file location of hic2 : "namespaces/test/control.csl" : 83.2 :: we are now at : namespaces/test/control.csl : 88.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb6b24 -- code size = 438 bytes
TypeSignature :
 -----------------------------
Word :: Control.hic2 : definition = 0x0000767060bb6b24 : disassembly at namespaces/test/control.csl : 88.17 :
0x767060bb6b24    4d897e08                mov [r14+0x8], r15
0x767060bb6b28    4d8d7e08                lea r15, [r14+0x8]
0x767060bb6b2c    4981c608000000          add r14, 0x8
0x767060bb6b33    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6b3d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6b47    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..                  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps  ..
0x767060bb6b4a    48b8d5bf8b6070760000    mov rax, 0x7670608bbfd5       < string : 'hic2 : start ' >
0x767060bb6b54    4983c608                add r14, 0x8
0x767060bb6b58    498906                  mov [r14], rax
 ..  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  ..
0x767060bb6b5b    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb6b65    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  ..
0x767060bb6b68    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6b72    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6b7c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb6b7f    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb6b89    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6b93    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6b96    498b47f8                mov rax, [r15-0x8]
0x767060bb6b9a    4983c608                add r14, 0x8
0x767060bb6b9e    498906                  mov [r14], rax
 ..    nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6ba1    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6bab    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6bae    498b47f8                mov rax, [r15-0x8]
0x767060bb6bb2    4983c608                add r14, 0x8
0x767060bb6bb6    498906                  mov [r14], rax
 .. "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6bb9    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb6bc3    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6bcd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6bd0    49bb3467bb6070760000    mov r11, 0x767060bb6734
0x767060bb6bda    49ffd3                  call r11                      < Control.ct0 : 0x0000767060bb6734 >
 .. : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6bdd    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb6be7    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6bf1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6bf4    498b47f8                mov rax, [r15-0x8]
0x767060bb6bf8    4983c608                add r14, 0x8
0x767060bb6bfc    498906                  mov [r14], rax
 .. t " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6bff    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb6c09    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6c13    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c16    49bbd568bb6070760000    mov r11, 0x767060bb68d5
0x767060bb6c20    49ffd3                  call r11                      < Control.ct1 : 0x0000767060bb68d5 >
 ..  nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c23    498b47f8                mov rax, [r15-0x8]
0x767060bb6c27    4983c608                add r14, 0x8
0x767060bb6c2b    498906                  mov [r14], rax
 ..     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c2e    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb6c38    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6c42    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c45    49bb5d6abb6070760000    mov r11, 0x767060bb6a5d
0x767060bb6c4f    49ffd3                  call r11                      < Control.ct2 : 0x0000767060bb6a5d >
 .. n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c52    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bb6c5c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6c66    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c69    498b47f8                mov rax, [r15-0x8]
0x767060bb6c6d    4983c608                add r14, 0x8
0x767060bb6c71    498906                  mov [r14], rax
 .. n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c74    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb6c7e    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb6c81    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6c8b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6c95    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6c98    48b802c08b6070760000    mov rax, 0x7670608bc002       < string : 'hic2 : done ' >
0x767060bb6ca2    4983c608                add r14, 0x8
0x767060bb6ca6    498906                  mov [r14], rax
 ..  s ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6ca9    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb6cb3    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ct2 s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6cb6    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb6cc0    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb6cca    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bb6ccd    4d8d77f8                lea r14, [r15-0x8]
0x767060bb6cd1    4d8b7e08                mov r15, [r14+0x8]
0x767060bb6cd5    4983ee08                sub r14, 0x8
 .. s n @ p      nl "hic2 : done " ps nl  ;
0x767060bb6cd9    c3                      ret
Word_Disassemble : word - 'hic2' :: codeSize = 438
Word : 0x000076706100ae1b :: Compiled at : 0x0000767060bb6b24
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 88.17 <::

 hic2 : start

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct0 :
 3 1 continuing ct0 3 2 continuing ct0 3 3
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000076705fbb2b18, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b18 > = 0x000076705fbb2af0
  DataStack   [  -1 ] < 0x000076705fbb2b10 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000076705fbb2b08 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000076705fbb2b00 > = 0x00007670608bba51       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000076705fbb2af8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x000076705fbb2af0 > = 0x000076705fbb2ae0
  DataStack   [  -6 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -8 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 leaving ct0 n = 3 j =  3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000076705fbb2b18, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b18 > = 0x000076705fbb2af0
  DataStack   [  -1 ] < 0x000076705fbb2b10 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000076705fbb2b08 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000076705fbb2b00 > = 0x00007670608bba51       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000076705fbb2af8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x000076705fbb2af0 > = 0x000076705fbb2ae0
  DataStack   [  -6 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -8 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct1 :
 3 1 continuing ct1 3 2 continuing ct1 3 3
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct2 :

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 3
 hic2 : done

 hic2 : start

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct0 :
 7 1 continuing ct0 7 2 continuing ct0 7 3 continuing ct0 7 4 continuing ct0 7 5 continuing ct0 7 6 continuing ct0 7 7
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000076705fbb2b18, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b18 > = 0x000076705fbb2af0
  DataStack   [  -1 ] < 0x000076705fbb2b10 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2b08 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2b00 > = 0x00007670608bba51       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000076705fbb2af8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x000076705fbb2af0 > = 0x000076705fbb2ae0
  DataStack   [  -6 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -8 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 leaving ct0 n = 7 j =  7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x000076705fbb2b18, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b18 > = 0x000076705fbb2af0
  DataStack   [  -1 ] < 0x000076705fbb2b10 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2b08 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2b00 > = 0x00007670608bba51       < string : 'ct0' >
  DataStack   [  -4 ] < 0x000076705fbb2af8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x000076705fbb2af0 > = 0x000076705fbb2ae0
  DataStack   [  -6 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -8 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct1 :
 7 1 continuing ct1 7 2 continuing ct1 7 3 continuing ct1 7 4 continuing ct1 7 5 continuing ct1 7 6 continuing ct1 7 7
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 ct2 :

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x000076705fbb2ae8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -2 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 7
 hic2 : done

 7
 3
 2
 '1
 1
 77
 7
 9
 9
 8

 7
 7
 3
 2
 1
 77
 3
 8
 9

 =============================
C_Syntax.csMatchExWithReturn <:> csl compiled word
SourceCode for C_Syntax.csMatchExWithReturn :>
void csMatchExWithReturn ( n | x rtn ) { x = 1111 ; match ( n ) { case '1 { nl ; p (1) ; rtn = x ; } case '2 { nl ; p (2) ; rtn = n ; } case '3 { nl ; p (3) ; rtn = x ; } case 3 { nl ; p (3) ; rtn = n ; } case 77 { nl ; p (77) ; rtn = n ; } case 'seven { nl ; p (7) ; rtn = n ; } case 'eight { nl ; p (8) ; rtn = n ; } case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; } case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; } case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; } } p ( x - 103 ) ; return rtn ; }
Source code file location of csMatchExWithReturn : "namespaces/test/control.csl" : 154.20 :: we are now at : namespaces/test/control.csl : 173.24
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb7179 -- code size = 934 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.csMatchExWithReturn : definition = 0x0000767060bb7179 : disassembly at namespaces/test/control.csl : 173.24 :
0x767060bb7179    4d897e08                mov [r14+0x8], r15
0x767060bb717d    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7181    4981c618000000          add r14, 0x18
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p ( ..
0x767060bb7188    49c7470857040000        mov qword [r15+0x8], 0x457
 ..  x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }      ..
0x767060bb7190    498b47f8                mov rax, [r15-0x8]
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p ( ..
0x767060bb7194    4983c608                add r14, 0x8
0x767060bb7198    498906                  mov [r14], rax
0x767060bb719b    e927030000              jmp 0x767060bb74c7            < C_Syntax.csMatchExWithReturn+846 >
 ..      match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ..
0x767060bb71a0    e939000000              jmp 0x767060bb71de            < C_Syntax.csMatchExWithReturn+101 >
 ..    match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; ..
0x767060bb71a5    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb71af    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb71b9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ..
0x767060bb71bc    b801000000              mov eax, 0x1
0x767060bb71c1    4983c608                add r14, 0x8
0x767060bb71c5    498906                  mov [r14], rax
 .. tch ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn  ..
0x767060bb71c8    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb71d2    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..          case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }        ..
0x767060bb71d5    498b4708                mov rax, [r15+0x8]
 .. )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }  ..
0x767060bb71d9    49894710                mov [r15+0x10], rax
 ..      case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          c ..
0x767060bb71dd    c3                      ret
 ..  p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3)  ..
0x767060bb71de    e939000000              jmp 0x767060bb721c            < C_Syntax.csMatchExWithReturn+163 >
 ..  (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ;  ..
0x767060bb71e3    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb71ed    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb71f7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. tn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n  ..
0x767060bb71fa    b802000000              mov eax, 0x2
0x767060bb71ff    4983c608                add r14, 0x8
0x767060bb7203    498906                  mov [r14], rax
 .. ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = ..
0x767060bb7206    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb7210    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }         ..
0x767060bb7213    498b47f8                mov rax, [r15-0x8]
 .. x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }   ..
0x767060bb7217    49894710                mov [r15+0x10], rax
 ..      case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          ca ..
0x767060bb721b    c3                      ret
 ..  p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ..
0x767060bb721c    e939000000              jmp 0x767060bb725a            < C_Syntax.csMatchExWithReturn+225 >
 ..  (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; ..
0x767060bb7221    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb722b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb7235    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. tn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ..
0x767060bb7238    b803000000              mov eax, 0x3
0x767060bb723d    4983c608                add r14, 0x8
0x767060bb7241    498906                  mov [r14], rax
 .. ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn  ..
0x767060bb7244    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb724e    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }        ..
0x767060bb7251    498b4708                mov rax, [r15+0x8]
 .. n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }  ..
0x767060bb7255    49894710                mov [r15+0x10], rax
 ..      case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          c ..
0x767060bb7259    c3                      ret
 .. l ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl  ..
0x767060bb725a    b803000000              mov eax, 0x3
0x767060bb725f    4983c608                add r14, 0x8
0x767060bb7263    498906                  mov [r14], rax
 .. ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ;  ..
0x767060bb7266    e939000000              jmp 0x767060bb72a4            < C_Syntax.csMatchExWithReturn+299 >
 .. p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p  ..
0x767060bb726b    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb7275    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb727f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rt ..
0x767060bb7282    b803000000              mov eax, 0x3
0x767060bb7287    4983c608                add r14, 0x8
0x767060bb728b    498906                  mov [r14], rax
 ..  ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; ..
0x767060bb728e    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb7298    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..           case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }   ..
0x767060bb729b    498b47f8                mov rax, [r15-0x8]
 ..  x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ..
0x767060bb729f    49894710                mov [r15+0x10], rax
 ..       case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }       ..
0x767060bb72a3    c3                      ret
 .. l ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight  ..
0x767060bb72a4    b84d000000              mov eax, 0x4d
0x767060bb72a9    4983c608                add r14, 0x8
0x767060bb72ad    498906                  mov [r14], rax
 ..  p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { n ..
0x767060bb72b0    e939000000              jmp 0x767060bb72ee            < C_Syntax.csMatchExWithReturn+373 >
 ..  (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl  ..
0x767060bb72b5    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb72bf    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb72c9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. tn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8)  ..
0x767060bb72cc    b84d000000              mov eax, 0x4d
0x767060bb72d1    4983c608                add r14, 0x8
0x767060bb72d5    498906                  mov [r14], rax
 .. ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p ( ..
0x767060bb72d8    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb72e2    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..         case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ;  ..
0x767060bb72e5    498b47f8                mov rax, [r15-0x8]
 ..  ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn  ..
0x767060bb72e9    49894710                mov [r15+0x10], rax
 ..     case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }    ..
0x767060bb72ed    c3                      ret
 .. 7) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { ..
0x767060bb72ee    e939000000              jmp 0x767060bb732c            < C_Syntax.csMatchExWithReturn+435 >
 ..  ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { n ..
0x767060bb72f3    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb72fd    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb7307    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( ..
0x767060bb730a    b807000000              mov eax, 0x7
0x767060bb730f    4983c608                add r14, 0x8
0x767060bb7313    498906                  mov [r14], rax
 .. n = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; p ..
0x767060bb7316    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb7320    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..      case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9 ..
0x767060bb7323    498b47f8                mov rax, [r15-0x8]
 .. }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n )  ..
0x767060bb7327    49894710                mov [r15+0x10], rax
 ..  case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ;  ..
0x767060bb732b    c3                      ret
 .. 7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; ..
0x767060bb732c    e939000000              jmp 0x767060bb736a            < C_Syntax.csMatchExWithReturn+497 >
 ..  ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; r ..
0x767060bb7331    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb733b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb7345    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; ..
0x767060bb7348    b808000000              mov eax, 0x8
0x767060bb734d    4983c608                add r14, 0x8
0x767060bb7351    498906                  mov [r14], rax
 .. n = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn =  ..
0x767060bb7354    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb735e    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..      case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          ..
0x767060bb7361    498b47f8                mov rax, [r15-0x8]
 .. }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }    ..
0x767060bb7365    49894710                mov [r15+0x10], rax
 ..  case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          cas ..
0x767060bb7369    c3                      ret
 .. ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ;  ..
0x767060bb736a    e96f000000              jmp 0x767060bb73de            < C_Syntax.csMatchExWithReturn+613 >
 .. rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p  ..
0x767060bb736f    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb7379    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb7383    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( ..
0x767060bb7386    498b47f8                mov rax, [r15-0x8]
0x767060bb738a    4983c608                add r14, 0x8
0x767060bb738e    498906                  mov [r14], rax
 ..  n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ..
0x767060bb7391    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb739b    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..   case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQ ..
0x767060bb739e    b809000000              mov eax, 0x9
0x767060bb73a3    4983c608                add r14, 0x8
0x767060bb73a7    498906                  mov [r14], rax
 ..      case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "sing ..
0x767060bb73aa    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb73b4    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; ..
0x767060bb73b7    48b8cbc48b6070760000    mov rax, 0x7670608bc4cb       < string : 'singleQuote1' >
0x767060bb73c1    4983c608                add r14, 0x8
0x767060bb73c5    498906                  mov [r14], rax
 .. e ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2 ..
0x767060bb73c8    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb73d2    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          cas ..
0x767060bb73d5    498b4708                mov rax, [r15+0x8]
 .. n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }        ..
0x767060bb73d9    49894710                mov [r15+0x10], rax
 .. ) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case (  ..
0x767060bb73dd    c3                      ret
 .. " ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ..
0x767060bb73de    e96f000000              jmp 0x767060bb7452            < C_Syntax.csMatchExWithReturn+729 >
 .. ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; ..
0x767060bb73e3    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb73ed    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb73f7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; p ..
0x767060bb73fa    498b47f8                mov rax, [r15-0x8]
0x767060bb73fe    4983c608                add r14, 0x8
0x767060bb7402    498906                  mov [r14], rax
 .. tn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9 ..
0x767060bb7405    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb740f    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..       case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doub ..
0x767060bb7412    b809000000              mov eax, 0x9
0x767060bb7417    4983c608                add r14, 0x8
0x767060bb741b    498906                  mov [r14], rax
 ..          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "d ..
0x767060bb741e    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb7428    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..  'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ..
0x767060bb742b    48b8fdc48b6070760000    mov rax, 0x7670608bc4fd       < string : 'singleQuote2' >
0x767060bb7435    4983c608                add r14, 0x8
0x767060bb7439    498906                  mov [r14], rax
 ..  case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuo ..
0x767060bb743c    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb7446    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }     ..
0x767060bb7449    498b4708                mov rax, [r15+0x8]
 .. n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      ..
0x767060bb744d    49894710                mov [r15+0x10], rax
 .. ) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p  ..
0x767060bb7451    c3                      ret
 ..  rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rt ..
0x767060bb7452    e96f000000              jmp 0x767060bb74c6            < C_Syntax.csMatchExWithReturn+845 >
 .. tn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn  ..
0x767060bb7457    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bb7461    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb746b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb746e    498b47f8                mov rax, [r15-0x8]
0x767060bb7472    4983c608                add r14, 0x8
0x767060bb7476    498906                  mov [r14], rax
 .. x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb7479    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb7483    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..    case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb7486    b809000000              mov eax, 0x9
0x767060bb748b    4983c608                add r14, 0x8
0x767060bb748f    498906                  mov [r14], rax
 ..       case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb7492    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb749c    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb749f    48b83cc58b6070760000    mov rax, 0x7670608bc53c       < string : 'doubleQuote' >
0x767060bb74a9    4983c608                add r14, 0x8
0x767060bb74ad    498906                  mov [r14], rax
 .. se ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74b0    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb74ba    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74bd    498b4708                mov rax, [r15+0x8]
 ..  (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74c1    49894710                mov [r15+0x10], rax
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74c5    c3                      ret
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74c6    c3                      ret
0x767060bb74c7    48b82b17026170760000    mov rax, 0x76706102172b
0x767060bb74d1    4983c608                add r14, 0x8
0x767060bb74d5    498906                  mov [r14], rax
0x767060bb74d8    49ba60d10dca1c640000    mov r10, 0x641cca0dd160
0x767060bb74e2    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bb74ec    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. uote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74ef    498b4708                mov rax, [r15+0x8]
 .. " ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74f3    b967000000              mov ecx, 0x67
 .. te" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb74f8    482bc1                  sub rax, rcx
0x767060bb74fb    4983c608                add r14, 0x8
0x767060bb74ff    498906                  mov [r14], rax
0x767060bb7502    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb750c    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. x ; }      }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb750f    498b4710                mov rax, [r15+0x10]
0x767060bb7513    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7517    4d8b7e08                mov r15, [r14+0x8]
 ..     }      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb751b    498906                  mov [r14], rax
 ..      p ( x - 103 ) ;     return rtn ; }  ..
0x767060bb751e    c3                      ret
Word_Disassemble : word - 'csMatchExWithReturn' :: codeSize = 934
Word : 0x000076706101e873 :: Compiled at : 0x0000767060bb7179
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 173.24 <::

 1 1008 1111
 7 1008 seven
 7 1008 seven
 3 1008 1111
 2 1008 2
 77 1008 77
 3 1008 3
 8 1008 eight
 8 1008 eight
 nine 9 singleQuote1 1008 1111
 nine 9 singleQuote1 1008 1111
 1008 1111
 1 2 2 2
last line should show : 2 2 2
including namespaces/test/lisp.csl at namespaces/test/initTest.csl : 86.41 ...

starting lisp.csl
 7
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 above line should show ::
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 777
 7
 f

 =============================
LispDefines.f <:> variablef <:> lambdaCalculus compiled word
SourceCode for LispDefines.f :>
( define f ( lambda (a) ( + a 1 2 ) ) )
Source code file location of f : "namespaces/test/lisp.csl" : 31.38 :: we are now at : namespaces/test/lisp.csl : 33.6
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb764b -- code size = 47 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.f : definition = 0x0000767060bb764b : disassembly at namespaces/test/lisp.csl : 33.6 :
0x767060bb764b    4d897e08                mov [r14+0x8], r15
0x767060bb764f    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7653    4981c608000000          add r14, 0x8
 ..           ( define f ( lambda (a) ( + a 1 2 ) ) ) ..
0x767060bb765a    498b47f8                mov rax, [r15-0x8]
 ..         ( define f ( lambda (a) ( + a 1 2 ) ) ) ..
0x767060bb765e    b901000000              mov ecx, 0x1
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) ..
0x767060bb7663    4803c1                  add rax, rcx
 ..       ( define f ( lambda (a) ( + a 1 2 ) ) ) ..
0x767060bb7666    b902000000              mov ecx, 0x2
0x767060bb766b    4803c1                  add rax, rcx
0x767060bb766e    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7672    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7676    498906                  mov [r14], rax
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) ..
0x767060bb7679    c3                      ret
Word_Disassemble : word - 'f' :: codeSize = 47
Word : 0x0000767060abc040 :: Compiled at : 0x0000767060bb764b
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 33.6 <::
 7
 f1
 7
 f2
 7
 7
 7
 f
 7
 7
 777
 7
 77
 77
 77
 77
 77
 77
 77
 x
 7
 f1
 7
 7
 7
 f4
 zs1 abc
 zs1
 f3
 13
 f4
 77
 zs1
 7
 7
 7
 0
 0
 1

 if :: should show 7 7 7 0 0 1
 7
 7
 7
 7
 7
 11

 cond :: should show 7 7 7 7 7 11
 g
 h
 7
 7
 7
 7
 7
 7
 7
 h1
 7
 7
 7
 7
 7
 7
 7
 7
 7
 77
 77
 pd
 7

starting BigNum
 g
 h
 1.00000000000000000000000000000000
 -1.00000000000000000000000000000000
 -2.00000000000000000000000000000000
 0.33333333333333331482961625624739
 3.00000000000000000000000000000000
 7.00000000000000000000000000000000
 7.00000000000000000000000000000000

ending BigNum
 a
 b
 ( 3 4 1 2 )
 ( a b 1 2 )
 x
 x
 ( x x x x )
 ( x x x 3 4 1 2 )
 y
 y
 ( y y y y )
 ( y y y x x x 3 4 1 2 )

lisp test
 namespaces/test/lisp.csl 169.30 a
 b
 y
 x
 y
 ( x x x 1 2 3 4 5 6 7 8 9 y )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 7
 x
 ( 1 2 3 x )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 7 8 9 47 )
 77
 q1x
 q2
 7
 q3
 q4
 q5
 77
 above line should show 77
DataStack at : namespaces/test/lisp.csl : 202.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 7
 yfac
 3628800
 5040
 fibc

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :>
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 209.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb7811 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibc : definition = 0x0000767060bb7811 : disassembly at namespaces/test/lisp.csl : 209.21 :
0x767060bb7811    4d897e08                mov [r14+0x8], r15
0x767060bb7815    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7819    4981c608000000          add r14, 0x8
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb7820    49837ff802              cmp qword [r15-0x8], 0x2
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb7825    0f8d10000000            jge 0x767060bb783b            < LispDefines.fibc+42 >
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb782b    498b47f8                mov rax, [r15-0x8]
0x767060bb782f    4983c608                add r14, 0x8
0x767060bb7833    498906                  mov [r14], rax
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7836    e945000000              jmp 0x767060bb7880            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb783b    498b47f8                mov rax, [r15-0x8]
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb783f    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bb7848    83c608                  add esi, 0x8
0x767060bb784b    498906                  mov [r14], rax
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb784e    e8beffffff              call 0x767060bb7811           < LispDefines.fibc : 0x0000767060bb7811 >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7853    498b47f8                mov rax, [r15-0x8]
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7857    b902000000              mov ecx, 0x2
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb785c    482bc1                  sub rax, rcx
0x767060bb785f    4983c608                add r14, 0x8
0x767060bb7863    498906                  mov [r14], rax
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7866    e8a6ffffff              call 0x767060bb7811           < LispDefines.fibc : 0x0000767060bb7811 >
0x767060bb786b    498b0e                  mov rcx, [r14]
0x767060bb786e    498b46f8                mov rax, [r14-0x8]
0x767060bb7872    4983ee10                sub r14, 0x10
0x767060bb7876    4803c1                  add rax, rcx
0x767060bb7879    4983c608                add r14, 0x8
0x767060bb787d    498906                  mov [r14], rax
0x767060bb7880    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7884    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7888    498906                  mov [r14], rax
 ..           (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb788b    c3                      ret
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x0000767060b0b338 :: Compiled at : 0x0000767060bb7811
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 209.21 <::
 fibc1
 fibc2

 =============================
LispDefines.fibc1 <:> variablefibc1 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc1 :>
(define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
Source code file location of fibc1 : "namespaces/test/lisp.csl" : 213.83 :: we are now at : namespaces/test/lisp.csl : 215.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb7891 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibc1 : definition = 0x0000767060bb7891 : disassembly at namespaces/test/lisp.csl : 215.22 :
0x767060bb7891    4d897e08                mov [r14+0x8], r15
0x767060bb7895    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7899    4981c608000000          add r14, 0x8
   (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) ..
0x767060bb78a0    49837ff802              cmp qword [r15-0x8], 0x2
 ..  (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) ..
0x767060bb78a5    0f8d10000000            jge 0x767060bb78bb            < LispDefines.fibc1+42 >
 (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) ..
0x767060bb78ab    498b47f8                mov rax, [r15-0x8]
0x767060bb78af    4983c608                add r14, 0x8
0x767060bb78b3    498906                  mov [r14], rax
 .. e fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78b6    e945000000              jmp 0x767060bb7900            < LispDefines.fibc1+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78bb    498b47f8                mov rax, [r15-0x8]
 ..  n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78bf    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bb78c8    83c608                  add esi, 0x8
0x767060bb78cb    498906                  mov [r14], rax
 .. 1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78ce    e8beffffff              call 0x767060bb7891           < LispDefines.fibc1 : 0x0000767060bb7891 >
 .. < n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78d3    498b47f8                mov rax, [r15-0x8]
 .. n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78d7    b902000000              mov ecx, 0x2
 ..  (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78dc    482bc1                  sub rax, rcx
0x767060bb78df    4983c608                add r14, 0x8
0x767060bb78e3    498906                  mov [r14], rax
 .. (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x767060bb78e6    e8a6ffffff              call 0x767060bb7891           < LispDefines.fibc1 : 0x0000767060bb7891 >
0x767060bb78eb    498b0e                  mov rcx, [r14]
0x767060bb78ee    498b46f8                mov rax, [r14-0x8]
0x767060bb78f2    4983ee10                sub r14, 0x10
0x767060bb78f6    4803c1                  add rax, rcx
0x767060bb78f9    4983c608                add r14, 0x8
0x767060bb78fd    498906                  mov [r14], rax
0x767060bb7900    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7904    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7908    498906                  mov [r14], rax
0x767060bb790b    c3                      ret
Word_Disassemble : word - 'fibc1' :: codeSize = 123
Word : 0x0000767060b133e0 :: Compiled at : 0x0000767060bb7891
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 215.22 <::

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :>
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 216.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb7811 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibc : definition = 0x0000767060bb7811 : disassembly at namespaces/test/lisp.csl : 216.21 :
0x767060bb7811    4d897e08                mov [r14+0x8], r15
0x767060bb7815    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7819    4981c608000000          add r14, 0x8
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb7820    49837ff802              cmp qword [r15-0x8], 0x2
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb7825    0f8d10000000            jge 0x767060bb783b            < LispDefines.fibc+42 >
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) ..
0x767060bb782b    498b47f8                mov rax, [r15-0x8]
0x767060bb782f    4983c608                add r14, 0x8
0x767060bb7833    498906                  mov [r14], rax
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7836    e945000000              jmp 0x767060bb7880            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb783b    498b47f8                mov rax, [r15-0x8]
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb783f    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bb7848    83c608                  add esi, 0x8
0x767060bb784b    498906                  mov [r14], rax
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb784e    e8beffffff              call 0x767060bb7811           < LispDefines.fibc : 0x0000767060bb7811 >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7853    498b47f8                mov rax, [r15-0x8]
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7857    b902000000              mov ecx, 0x2
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb785c    482bc1                  sub rax, rcx
0x767060bb785f    4983c608                add r14, 0x8
0x767060bb7863    498906                  mov [r14], rax
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x767060bb7866    e8a6ffffff              call 0x767060bb7811           < LispDefines.fibc : 0x0000767060bb7811 >
0x767060bb786b    498b0e                  mov rcx, [r14]
0x767060bb786e    498b46f8                mov rax, [r14-0x8]
0x767060bb7872    4983ee10                sub r14, 0x10
0x767060bb7876    4803c1                  add rax, rcx
0x767060bb7879    4983c608                add r14, 0x8
0x767060bb787d    498906                  mov [r14], rax
0x767060bb7880    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7884    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7888    498906                  mov [r14], rax
0x767060bb788b    c3                      ret
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x0000767060b0b338 :: Compiled at : 0x0000767060bb7811
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 216.21 <::

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :>
(definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
Source code file location of fibc2 : "namespaces/test/lisp.csl" : 214.75 :: we are now at : namespaces/test/lisp.csl : 217.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb7911 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x0000767060bb7911 : disassembly at namespaces/test/lisp.csl : 217.22 :
0x767060bb7911    4d897e08                mov [r14+0x8], r15
0x767060bb7915    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7919    4981c608000000          add r14, 0x8
 ..       (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) ..
0x767060bb7920    49837ff802              cmp qword [r15-0x8], 0x2
 ..         (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) ..
0x767060bb7925    0f8d10000000            jge 0x767060bb793b            < LispDefines.fibc2+42 >
 ..     (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) ..
0x767060bb792b    498b47f8                mov rax, [r15-0x8]
0x767060bb792f    4983c608                add r14, 0x8
0x767060bb7933    498906                  mov [r14], rax
 ..  (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) ..
0x767060bb7936    e945000000              jmp 0x767060bb7980            < LispDefines.fibc2+111 >
 .. c2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb793b    498b47f8                mov rax, [r15-0x8]
 ..  n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb793f    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bb7948    83c608                  add esi, 0x8
0x767060bb794b    498906                  mov [r14], rax
 .. nec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb794e    e8beffffff              call 0x767060bb7911           < LispDefines.fibc2 : 0x0000767060bb7911 >
 .. < n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb7953    498b47f8                mov rax, [r15-0x8]
 .. n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb7957    b902000000              mov ecx, 0x2
 ..  (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb795c    482bc1                  sub rax, rcx
0x767060bb795f    4983c608                add r14, 0x8
0x767060bb7963    498906                  mov [r14], rax
 .. (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x767060bb7966    e8a6ffffff              call 0x767060bb7911           < LispDefines.fibc2 : 0x0000767060bb7911 >
0x767060bb796b    498b0e                  mov rcx, [r14]
0x767060bb796e    498b46f8                mov rax, [r14-0x8]
0x767060bb7972    4983ee10                sub r14, 0x10
0x767060bb7976    4803c1                  add rax, rcx
0x767060bb7979    4983c608                add r14, 0x8
0x767060bb797d    498906                  mov [r14], rax
0x767060bb7980    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7984    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7988    498906                  mov [r14], rax
 ..                 (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) ..
0x767060bb798b    c3                      ret
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x0000767060b1b6e0 :: Compiled at : 0x0000767060bb7911
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 217.22 <::

fibc1 20 =  6765

fibc 20 =  6765

fibc2 20 =  6765

 11 7
DataStack at : namespaces/test/lisp.csl : 227.80 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 7 11 11 7
 =============================
Root.hioo <:> csl compiled word
SourceCode for Root.hioo :>
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hioo : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb79a0 -- code size = 30 bytes
 -----------------------------
Word :: Root.hioo : definition = 0x0000767060bb79a0 : disassembly at namespaces/test/lisp.csl : 229.21 :
 ..                           ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) ..
0x767060bb79a0    b807000000              mov eax, 0x7
0x767060bb79a5    4983c610                add r14, 0x10
0x767060bb79a9    498906                  mov [r14], rax
 ..                     ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) ..
0x767060bb79ac    498946f8                mov [r14-0x8], rax
0x767060bb79b0    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb79ba    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..                 ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) ..
0x767060bb79bd    c3                      ret
Word_Disassemble : word - 'hioo' :: codeSize = 30
Word : 0x0000767061043b6b :: Compiled at : 0x0000767060bb79a0
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 229.21 <::

 =============================
Root.hio <:> csl compiled word
SourceCode for Root.hio :>
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hio : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 230.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb79d2 -- code size = 30 bytes
 -----------------------------
Word :: Root.hio : definition = 0x0000767060bb79d2 : disassembly at namespaces/test/lisp.csl : 230.20 :
 ..       ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) ..
0x767060bb79d2    b80b000000              mov eax, 0xb
0x767060bb79d7    4983c610                add r14, 0x10
0x767060bb79db    498906                  mov [r14], rax
 .. ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) ..
0x767060bb79de    498946f8                mov [r14-0x8], rax
0x767060bb79e2    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb79ec    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) ..
0x767060bb79ef    c3                      ret
Word_Disassemble : word - 'hio' :: codeSize = 30
Word : 0x000076706104473b :: Compiled at : 0x0000767060bb79d2
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 230.20 <::

 =============================
C.bexp43 <:> csl compiled word
SourceCode for C.bexp43 :>
: bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;
Source code file location of bexp43 : "namespaces/test/lisp.csl" : 233.2 :: we are now at : namespaces/test/lisp.csl : 234.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb79f5 -- code size = 107 bytes
TypeSignature :
 -----------------------------
Word :: C.bexp43 : definition = 0x0000767060bb79f5 : disassembly at namespaces/test/lisp.csl : 234.19 :
0x767060bb79f5    4d897e08                mov [r14+0x8], r15
0x767060bb79f9    4d8d7e08                lea r15, [r14+0x8]
0x767060bb79fd    4981c608000000          add r14, 0x8
 ..                      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  ..
0x767060bb7a04    49837ff801              cmp qword [r15-0x8], 0x1
 ..              : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  ..
0x767060bb7a09    0f8e39000000            jle 0x767060bb7a48            < C.bexp43+83 >
 ..          : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  ..
0x767060bb7a0f    498b47f8                mov rax, [r15-0x8]
0x767060bb7a13    4983c608                add r14, 0x8
0x767060bb7a17    498906                  mov [r14], rax
 ..      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  ..
0x767060bb7a1a    498b47f8                mov rax, [r15-0x8]
 ..  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  ..
0x767060bb7a1e    48ffc8                  dec rax
0x767060bb7a21    4983c608                add r14, 0x8
0x767060bb7a25    498906                  mov [r14], rax
  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  ..
0x767060bb7a28    e8c8ffffff              call 0x767060bb79f5           < C.bexp43 : 0x0000767060bb79f5 >
0x767060bb7a2d    498b0e                  mov rcx, [r14]
0x767060bb7a30    498b46f8                mov rax, [r14-0x8]
0x767060bb7a34    4983ee10                sub r14, 0x10
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;
0x767060bb7a38    480fafc1                imul rax, rcx
0x767060bb7a3c    4983c608                add r14, 0x8
0x767060bb7a40    498906                  mov [r14], rax
 .. n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;
0x767060bb7a43    e90c000000              jmp 0x767060bb7a54            < C.bexp43+95 >
 .. { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;
0x767060bb7a48    b801000000              mov eax, 0x1
0x767060bb7a4d    4983c608                add r14, 0x8
0x767060bb7a51    498906                  mov [r14], rax
0x767060bb7a54    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7a58    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7a5c    498906                  mov [r14], rax
 ..  { n @ n @ -- bexp43 * } { 1 } ifElse ;
0x767060bb7a5f    c3                      ret
Word_Disassemble : word - 'bexp43' :: codeSize = 107
Word : 0x000076706104530b :: Compiled at : 0x0000767060bb79f5
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 234.19 <::
 C : bexp43_assert  : ok

 5040

 =============================
C.bexp44 <:> csl compiled word
SourceCode for C.bexp44 :>
( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
Source code file location of bexp44 : "namespaces/test/lisp.csl" : 239.73 :: we are now at : namespaces/test/lisp.csl : 240.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb7a65 -- code size = 107 bytes
TypeSignature :
 -----------------------------
Word :: C.bexp44 : definition = 0x0000767060bb7a65 : disassembly at namespaces/test/lisp.csl : 240.23 :
0x767060bb7a65    4d897e08                mov [r14+0x8], r15
0x767060bb7a69    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7a6d    4981c608000000          add r14, 0x8
 ..               ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) ..
0x767060bb7a74    49837ff801              cmp qword [r15-0x8], 0x1
 ..       ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) ..
0x767060bb7a79    0f8e39000000            jle 0x767060bb7ab8            < C.bexp44+83 >
 ..   ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) ..
0x767060bb7a7f    498b47f8                mov rax, [r15-0x8]
0x767060bb7a83    4983c608                add r14, 0x8
0x767060bb7a87    498906                  mov [r14], rax
  ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) ..
0x767060bb7a8a    498b47f8                mov rax, [r15-0x8]
 ..  : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x767060bb7a8e    48ffc8                  dec rax
0x767060bb7a91    4983c608                add r14, 0x8
0x767060bb7a95    498906                  mov [r14], rax
 .. bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x767060bb7a98    e8c8ffffff              call 0x767060bb7a65           < C.bexp44 : 0x0000767060bb7a65 >
0x767060bb7a9d    498b0e                  mov rcx, [r14]
0x767060bb7aa0    498b46f8                mov rax, [r14-0x8]
0x767060bb7aa4    4983ee10                sub r14, 0x10
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x767060bb7aa8    480fafc1                imul rax, rcx
0x767060bb7aac    4983c608                add r14, 0x8
0x767060bb7ab0    498906                  mov [r14], rax
 .. n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x767060bb7ab3    e90c000000              jmp 0x767060bb7ac4            < C.bexp44+95 >
 .. { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x767060bb7ab8    b801000000              mov eax, 0x1
0x767060bb7abd    4983c608                add r14, 0x8
0x767060bb7ac1    498906                  mov [r14], rax
0x767060bb7ac4    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7ac8    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7acc    498906                  mov [r14], rax
 .. @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x767060bb7acf    c3                      ret
Word_Disassemble : word - 'bexp44' :: codeSize = 107
Word : 0x000076706104789b :: Compiled at : 0x0000767060bb7a65
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 240.23 <::
 C : bexp43_assert  : ok

 5040 goedel3 ::
 goedel3 ::  130225028199416 2 goedel3_assert1  : ok

 110074812435488 7 goedel3_assert2  : ok

 goedel3_assert4  : ok

 130225028110505 7 goedel3_assert5  : ok

 9
goedel3 output should read (after ignoring _asserts) :
'junk' 2 'junk' 7 'junk' 7 9
 =============================
Root.goedel6 <:> csl compiled word
SourceCode for Root.goedel6 :>
( :: : goedel6 (| n ) "\n goedel6 :: " ps n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix n @ 6 + 8 "goedel6_3_assert" assert } ix { (| n ) n @ p n 3 = n dup @ 4 + = n @ dup p 7 "goedel6_4_assert" assert } ix n @ dup p return tos ; ".I" typeSignature ' goedel6 find wdiss 9 goedel6 "goedel6_0_assert" assert "\ngoedel6 output should read (after ignoring _asserts) : \n 'junk' 2 'junk' 7 'junk' 7 9" ps )
Source code file location of goedel6 : "namespaces/test/lisp.csl" : 290.0 :: we are now at : namespaces/test/lisp.csl : 290.1
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb7cdf -- code size = 517 bytes
TypeSignature : -> Integer
 -----------------------------
Word :: Root.goedel6 : definition = 0x0000767060bb7cdf : disassembly at namespaces/test/lisp.csl : 290.1 :
0x767060bb7cdf    4d897e08                mov [r14+0x8], r15
0x767060bb7ce3    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7ce7    4981c628000000          add r14, 0x28
 ..   ( ::      : goedel6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_ ..
0x767060bb7cee    48b815ff8b6070760000    mov rax, 0x7670608bff15
0x767060bb7cf8    4983c608                add r14, 0x8
0x767060bb7cfc    498906                  mov [r14], rax
 .. del6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert    ..
0x767060bb7cff    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb7d09    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..      "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n  ..
0x767060bb7d0c    49c7470809000000        mov qword [r15+0x8], 0x9
 ..   n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "g ..
0x767060bb7d14    498b4710                mov rax, [r15+0x10]
0x767060bb7d18    4983c608                add r14, 0x8
0x767060bb7d1c    498906                  mov [r14], rax
 .. 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goede ..
0x767060bb7d1f    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7d29    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..       {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_a ..
0x767060bb7d2c    49c7471002000000        mov qword [r15+0x10], 0x2
 ..     {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_ass ..
0x767060bb7d34    498b4710                mov rax, [r15+0x10]
0x767060bb7d38    4983c610                add r14, 0x10
0x767060bb7d3c    498906                  mov [r14], rax
 .. {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" ..
0x767060bb7d3f    498946f8                mov [r14-0x8], rax
 ..            (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" ass ..
0x767060bb7d43    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7d4d    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" asser ..
0x767060bb7d50    b802000000              mov eax, 0x2
0x767060bb7d55    4983c608                add r14, 0x8
0x767060bb7d59    498906                  mov [r14], rax
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert  ..
0x767060bb7d5c    48b844ff8b6070760000    mov rax, 0x7670608bff44       < string : 'goedel6_1_assert' >
0x767060bb7d66    4983c608                add r14, 0x8
0x767060bb7d6a    498906                  mov [r14], rax
0x767060bb7d6d    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb7d77    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. _1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" a ..
0x767060bb7d7a    498b4718                mov rax, [r15+0x18]
0x767060bb7d7e    4983c608                add r14, 0x8
0x767060bb7d82    498906                  mov [r14], rax
 .. ssert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" asser ..
0x767060bb7d85    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7d8f    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert      ..
0x767060bb7d92    49c7471803000000        mov qword [r15+0x18], 0x3
 .. ssert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert        ..
0x767060bb7d9a    498b4718                mov rax, [r15+0x18]
 .. t            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ..
0x767060bb7d9e    b904000000              mov ecx, 0x4
0x767060bb7da3    4803c1                  add rax, rcx
0x767060bb7da6    4983c610                add r14, 0x10
0x767060bb7daa    498906                  mov [r14], rax
 ..          { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix  ..
0x767060bb7dad    498946f8                mov [r14-0x8], rax
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix      ..
0x767060bb7db1    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7dbb    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix        ..
0x767060bb7dbe    b807000000              mov eax, 0x7
0x767060bb7dc3    4983c608                add r14, 0x8
0x767060bb7dc7    498906                  mov [r14], rax
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix          ..
0x767060bb7dca    48b879ff8b6070760000    mov rax, 0x7670608bff79       < string : 'goedel6_2_assert' >
0x767060bb7dd4    4983c608                add r14, 0x8
0x767060bb7dd8    498906                  mov [r14], rax
0x767060bb7ddb    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb7de5    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb7de8    498b4710                mov rax, [r15+0x10]
 .. _2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 = ..
0x767060bb7dec    b906000000              mov ecx, 0x6
 .. _assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =   ..
0x767060bb7df1    4803c1                  add rax, rcx
0x767060bb7df4    4983c608                add r14, 0x8
0x767060bb7df8    498906                  mov [r14], rax
 .. ssert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =     ..
0x767060bb7dfb    b808000000              mov eax, 0x8
0x767060bb7e00    4983c608                add r14, 0x8
0x767060bb7e04    498906                  mov [r14], rax
 .. ert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =       ..
0x767060bb7e07    48b8a1ff8b6070760000    mov rax, 0x7670608bffa1       < string : 'goedel6_3_assert' >
0x767060bb7e11    4983c608                add r14, 0x8
0x767060bb7e15    498906                  mov [r14], rax
0x767060bb7e18    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb7e22    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb7e25    498b4720                mov rax, [r15+0x20]
0x767060bb7e29    4983c608                add r14, 0x8
0x767060bb7e2d    498906                  mov [r14], rax
 ..  ix         { (| n )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert   ..
0x767060bb7e30    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7e3a    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        ..
0x767060bb7e3d    49c7472003000000        mov qword [r15+0x20], 0x3
0x767060bb7e45    498d4720                lea rax, [r15+0x20]
0x767060bb7e49    4983c610                add r14, 0x10
0x767060bb7e4d    498906                  mov [r14], rax
 .. @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p        ..
0x767060bb7e50    498946f8                mov [r14-0x8], rax
 ..              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         re ..
0x767060bb7e54    498b06                  mov rax, [r14]
0x767060bb7e57    488b00                  mov rax, [rax]
0x767060bb7e5a    498906                  mov [r14], rax
 ..          n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return ..
0x767060bb7e5d    49830604                add qword [r14], 0x4
 .. 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @  ..
0x767060bb7e61    498b0e                  mov rcx, [r14]
0x767060bb7e64    498b46f8                mov rax, [r14-0x8]
0x767060bb7e68    4983ee10                sub r14, 0x10
 ..        n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return t ..
0x767060bb7e6c    488908                  mov [rax], rcx
0x767060bb7e6f    498b4720                mov rax, [r15+0x20]
0x767060bb7e73    4983c610                add r14, 0x10
0x767060bb7e77    498906                  mov [r14], rax
 ..        n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeS ..
0x767060bb7e7a    498946f8                mov [r14-0x8], rax
 ..    n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSigna ..
0x767060bb7e7e    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7e88    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignatu ..
0x767060bb7e8b    b807000000              mov eax, 0x7
0x767060bb7e90    4983c608                add r14, 0x8
0x767060bb7e94    498906                  mov [r14], rax
 ..  dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignature ..
0x767060bb7e97    48b8d6ff8b6070760000    mov rax, 0x7670608bffd6       < string : 'goedel6_4_assert' >
0x767060bb7ea1    4983c608                add r14, 0x8
0x767060bb7ea5    498906                  mov [r14], rax
0x767060bb7ea8    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb7eb2    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb7eb5    498b4708                mov rax, [r15+0x8]
0x767060bb7eb9    4983c610                add r14, 0x10
0x767060bb7ebd    498906                  mov [r14], rax
 .. sert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_a ..
0x767060bb7ec0    498946f8                mov [r14-0x8], rax
0x767060bb7ec4    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7ece    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb7ed1    498b06                  mov rax, [r14]
0x767060bb7ed4    4d8d77f8                lea r14, [r15-0x8]
0x767060bb7ed8    4d8b7e08                mov r15, [r14+0x8]
0x767060bb7edc    4983c608                add r14, 0x8
0x767060bb7ee0    498906                  mov [r14], rax
 .. " assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_asser ..
0x767060bb7ee3    c3                      ret
Word_Disassemble : word - 'goedel6' :: codeSize = 517
Word : 0x0000767061052f5b :: Compiled at : 0x0000767060bb7cdf
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 290.1 <::

 goedel6 ::  130225036144475 2 goedel6_1_assert  : ok

 130225014516448 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 130225028108527 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok


goedel6 output should read (after ignoring _asserts) :
 'junk' 2 'junk' 7 'junk' 7 9

goedel8 output :  0 2 goedel8_1_assert  : ok

 0 7 goedel8_3_assert  : ok

 goedel8_4_assert  : ok

 0 10 goedel8_5_assert  : ok

 9 goedel8_6_assert  : ok


goedel8 output should read :
'junk' 2 'junk' 7 'junk' 10 9

 =============================
Root.goedel8 <:> csl compiled word
SourceCode for Root.goedel8 :>
( :: "\ngoedel8 output : " ps : goedel8 (| n -t "V.I" ) n 1 = { 'n var n @ p n 2 = n @ dup p 2 "goedel8_1_assert" assert { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix n @ 6 + 8 "goedel8_4_assert" assert } ix { 'n var n @ p n 3 = n dup @ 7 + = n @ dup p 10 "goedel8_5_assert" assert } ix n @ 8 + dup p return tos ; goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read : \n'junk' 2 'junk' 7 'junk' 10 9" ps)
Source code file location of goedel8 : "namespaces/test/lisp.csl" : 313.0 :: we are now at : namespaces/test/lisp.csl : 314.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bb7ee9 -- code size = 594 bytes
TypeSignature :
 -----------------------------
Word :: Root.goedel8 : definition = 0x0000767060bb7ee9 : disassembly at namespaces/test/lisp.csl : 314.24 :
0x767060bb7ee9    4d897e08                mov [r14+0x8], r15
0x767060bb7eed    4d8d7e08                lea r15, [r14+0x8]
0x767060bb7ef1    4981c628000000          add r14, 0x28
 .. goedel8 (| n -t "V.I"  )          n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert       ..
0x767060bb7ef8    49c7470801000000        mov qword [r15+0x8], 0x1
 ..   n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p ..
0x767060bb7f00    48b8abc3056170760000    mov rax, 0x76706105c3ab
0x767060bb7f0a    488b00                  mov rax, [rax]
0x767060bb7f0d    4983c608                add r14, 0x8
0x767060bb7f11    498906                  mov [r14], rax
 .. 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 ..
0x767060bb7f14    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7f1e    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb7f21    48b8abc3056170760000    mov rax, 0x76706105c3ab
0x767060bb7f2b    b902000000              mov ecx, 0x2
 ..         'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7  ..
0x767060bb7f30    488908                  mov [rax], rcx
 ..       'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "g ..
0x767060bb7f33    48b8abc3056170760000    mov rax, 0x76706105c3ab
0x767060bb7f3d    488b00                  mov rax, [rax]
0x767060bb7f40    4983c610                add r14, 0x10
0x767060bb7f44    498906                  mov [r14], rax
 ..   'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goede ..
0x767060bb7f47    498946f8                mov [r14-0x8], rax
 ..  var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3 ..
0x767060bb7f4b    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7f55    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 .. ar n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_a ..
0x767060bb7f58    b802000000              mov eax, 0x2
0x767060bb7f5d    4983c608                add r14, 0x8
0x767060bb7f61    498906                  mov [r14], rax
 ..  n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_ass ..
0x767060bb7f64    48b888078c6070760000    mov rax, 0x7670608c0788       < string : 'goedel8_1_assert' >
0x767060bb7f6e    4983c608                add r14, 0x8
0x767060bb7f72    498906                  mov [r14], rax
0x767060bb7f75    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb7f7f    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. ssert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" a ..
0x767060bb7f82    48b81bdf056170760000    mov rax, 0x76706105df1b
0x767060bb7f8c    488b00                  mov rax, [rax]
0x767060bb7f8f    4983c608                add r14, 0x8
0x767060bb7f93    498906                  mov [r14], rax
 .. t                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" asser ..
0x767060bb7f96    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7fa0    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert  ..
0x767060bb7fa3    48b81bdf056170760000    mov rax, 0x76706105df1b
0x767060bb7fad    b903000000              mov ecx, 0x3
 ..                    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert      ..
0x767060bb7fb2    488908                  mov [rax], rcx
 ..                  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert        ..
0x767060bb7fb5    48b81bdf056170760000    mov rax, 0x76706105df1b
0x767060bb7fbf    488b00                  mov rax, [rax]
 ..              { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ..
0x767060bb7fc2    b904000000              mov ecx, 0x4
0x767060bb7fc7    4803c1                  add rax, rcx
0x767060bb7fca    4983c610                add r14, 0x10
0x767060bb7fce    498906                  mov [r14], rax
 ..          { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix  ..
0x767060bb7fd1    498946f8                mov [r14-0x8], rax
 ..      { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix      ..
0x767060bb7fd5    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb7fdf    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix        ..
0x767060bb7fe2    b807000000              mov eax, 0x7
0x767060bb7fe7    4983c608                add r14, 0x8
0x767060bb7feb    498906                  mov [r14], rax
 ..  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix          ..
0x767060bb7fee    48b8bf078c6070760000    mov rax, 0x7670608c07bf       < string : 'goedel8_3_assert' >
0x767060bb7ff8    4983c608                add r14, 0x8
0x767060bb7ffc    498906                  mov [r14], rax
0x767060bb7fff    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb8009    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb800c    48b8abc3056170760000    mov rax, 0x76706105c3ab
0x767060bb8016    488b00                  mov rax, [rax]
 .. _3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 = ..
0x767060bb8019    b906000000              mov ecx, 0x6
 .. _assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =   ..
0x767060bb801e    4803c1                  add rax, rcx
0x767060bb8021    4983c608                add r14, 0x8
0x767060bb8025    498906                  mov [r14], rax
 .. ssert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =     ..
0x767060bb8028    b808000000              mov eax, 0x8
0x767060bb802d    4983c608                add r14, 0x8
0x767060bb8031    498906                  mov [r14], rax
 .. ert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =       ..
0x767060bb8034    48b8e7078c6070760000    mov rax, 0x7670608c07e7       < string : 'goedel8_4_assert' >
0x767060bb803e    4983c608                add r14, 0x8
0x767060bb8042    498906                  mov [r14], rax
0x767060bb8045    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb804f    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..    } ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" ass ..
0x767060bb8052    48b87b10066170760000    mov rax, 0x76706106107b
0x767060bb805c    488b00                  mov rax, [rax]
0x767060bb805f    4983c608                add r14, 0x8
0x767060bb8063    498906                  mov [r14], rax
 ..  ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert  ..
0x767060bb8066    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb8070    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb8073    48b87b10066170760000    mov rax, 0x76706106107b
0x767060bb807d    b903000000              mov ecx, 0x3
 ..         'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix       ..
0x767060bb8082    488908                  mov [rax], rcx
0x767060bb8085    48b87b10066170760000    mov rax, 0x76706106107b
0x767060bb808f    4983c610                add r14, 0x10
0x767060bb8093    498906                  mov [r14], rax
 .. @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p   ..
0x767060bb8096    498946f8                mov [r14-0x8], rax
 ..              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p       ..
0x767060bb809a    498b06                  mov rax, [r14]
0x767060bb809d    488b00                  mov rax, [rax]
0x767060bb80a0    498906                  mov [r14], rax
 ..          n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         r ..
0x767060bb80a3    49830607                add qword [r14], 0x7
0x767060bb80a7    498b0e                  mov rcx, [r14]
0x767060bb80aa    498b46f8                mov rax, [r14-0x8]
0x767060bb80ae    4983ee10                sub r14, 0x10
 ..        n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         ret ..
0x767060bb80b2    488908                  mov [rax], rcx
0x767060bb80b5    48b87b10066170760000    mov rax, 0x76706106107b
0x767060bb80bf    488b00                  mov rax, [rax]
0x767060bb80c2    4983c610                add r14, 0x10
0x767060bb80c6    498906                  mov [r14], rax
 ..        n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;      ..
0x767060bb80c9    498946f8                mov [r14-0x8], rax
 ..    n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goed ..
0x767060bb80cd    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb80d7    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
 ..  n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel ..
0x767060bb80da    b80a000000              mov eax, 0xa
0x767060bb80df    4983c608                add r14, 0x8
0x767060bb80e3    498906                  mov [r14], rax
 .. dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 ..
0x767060bb80e6    48b81f088c6070760000    mov rax, 0x7670608c081f       < string : 'goedel8_5_assert' >
0x767060bb80f0    4983c608                add r14, 0x8
0x767060bb80f4    498906                  mov [r14], rax
0x767060bb80f7    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bb8101    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
0x767060bb8104    498b4708                mov rax, [r15+0x8]
 .. sert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output shoul ..
0x767060bb8108    b908000000              mov ecx, 0x8
 .. rt" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should  ..
0x767060bb810d    4803c1                  add rax, rcx
0x767060bb8110    4983c610                add r14, 0x10
0x767060bb8114    498906                  mov [r14], rax
 .. " assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should re ..
0x767060bb8117    498946f8                mov [r14-0x8], rax
0x767060bb811b    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bb8125    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bb8128    498b06                  mov rax, [r14]
0x767060bb812b    4d8d77f8                lea r14, [r15-0x8]
0x767060bb812f    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8133    4983c608                add r14, 0x8
0x767060bb8137    498906                  mov [r14], rax
 .. sert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read : ..
0x767060bb813a    c3                      ret
Word_Disassemble : word - 'goedel8' :: codeSize = 594
Word : 0x000076706105b30b :: Compiled at : 0x0000767060bb7ee9
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 314.24 <::
 ( ( 1 2 ) )
 ( 1 2 )
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )

ending lisp.csl
total 44
drwxr-xr-x 11 root root 4096 Sep 16 17:44 .
drwxr-xr-x  9 root root 4096 Nov 23 07:50 ..
drwxr-xr-x  2 root root 4096 Nov 22 00:42 bin
drwxr-xr-x  2 root root 4096 Sep 21 10:47 etc
drwxr-xr-x  2 root root 4096 Apr  7  2024 games
drwxr-xr-x  3 root root 4096 Sep 16 22:09 include
drwxr-xr-x  3 root root 4096 Nov 22 00:42 lib
drwxr-xr-x  2 root root 4096 Apr  7  2024 man
drwxr-xr-x  2 root root 4096 Apr  7  2024 sbin
drwxr-xr-x  3 root root 4096 Sep 16 22:08 share
drwxr-xr-x  2 root root 4096 Apr  7  2024 src

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.501
 7 7 7
version 0.940.501
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21820 : Unused =   1026756 : Allocations =    1 : Largest =  1026756 : Smallest =  1026756 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    769071 : Unused =   3425233 : Allocations =    1 : Largest =  3425233 : Smallest =  3425233 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2131860 : Unused =  23055684
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1172016 : 2713  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :>
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ;
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x156bd400 -- code size = 77 bytes
TypeSignature :
 -----------------------------
Word :: Int.fac : definition = 0x00007649156bd400 : disassembly at etc/script : 35.8 :
0x7649156bd400    4d897e08                mov [r14+0x8], r15
0x7649156bd404    4d8d7e08                lea r15, [r14+0x8]
0x7649156bd408    4981c610000000          add r14, 0x10
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x7649156bd40f    49c7470801000000        mov qword [r15+0x8], 0x1
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x7649156bd417    49837ff801              cmp qword [r15-0x8], 0x1
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd41c    0f8e16000000            jle 0x7649156bd438            < Int.fac+56 >
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd422    498b47f8                mov rax, [r15-0x8]
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd426    498b4f08                mov rcx, [r15+0x8]
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd42a    480fafc1                imul rax, rcx
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd42e    49894708                mov [r15+0x8], rax
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd432    49ff4ff8                dec qword [r15-0x8]
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd436    ebdf                    jmp 0x7649156bd417            < Int.fac+23 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7649156bd438    498b4708                mov rax, [r15+0x8]
0x7649156bd43c    e900000000              jmp 0x7649156bd441            < Int.fac+65 >
0x7649156bd441    4d8d77f8                lea r14, [r15-0x8]
0x7649156bd445    4d8b7e08                mov r15, [r14+0x8]
 .. * rec1 store n -- } while      return rec1 @ ;
0x7649156bd449    498906                  mov [r14], rax
 .. store n -- } while      return rec1 @ ;
0x7649156bd44c    c3                      ret
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x0000764915877f27 :: Compiled at : 0x00007649156bd400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.501
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21159 : Unused =   1027417 : Allocations =    1 : Largest =  1027417 : Smallest =  1027417 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    752431 : Unused =   3441873 : Allocations =    1 : Largest =  3441873 : Smallest =  3441873 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1894450 : Unused =  23290974
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    846720 : 1960  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :>
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ;
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xdf06a37f -- code size = 77 bytes
TypeSignature :
 -----------------------------
Word :: Int.fac : definition = 0x00007277df06a37f : disassembly at etc/lispScript : 28.17 :
0x7277df06a37f    4d897e08                mov [r14+0x8], r15
0x7277df06a383    4d8d7e08                lea r15, [r14+0x8]
0x7277df06a387    4981c610000000          add r14, 0x10
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x7277df06a38e    49c7470801000000        mov qword [r15+0x8], 0x1
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x7277df06a396    49837ff801              cmp qword [r15-0x8], 0x1
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a39b    0f8e16000000            jle 0x7277df06a3b7            < Int.fac+56 >
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3a1    498b47f8                mov rax, [r15-0x8]
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3a5    498b4f08                mov rcx, [r15+0x8]
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3a9    480fafc1                imul rax, rcx
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3ad    49894708                mov [r15+0x8], rax
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3b1    49ff4ff8                dec qword [r15-0x8]
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3b5    ebdf                    jmp 0x7277df06a396            < Int.fac+23 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3b7    498b4708                mov rax, [r15+0x8]
0x7277df06a3bb    e900000000              jmp 0x7277df06a3c0            < Int.fac+65 >
0x7277df06a3c0    4d8d77f8                lea r14, [r15-0x8]
0x7277df06a3c4    4d8b7e08                mov r15, [r14+0x8]
 .. * rec1 store n -- } while      return rec1 @ ;
0x7277df06a3c8    498906                  mov [r14], rax
 .. store n -- } while      return rec1 @ ;
0x7277df06a3cb    c3                      ret
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x00007277df223c97 :: Compiled at : 0x00007277df06a37f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye
 3
total 1684
drwxr-xr-x 11 dennisj dennisj    4096 Nov 23 07:42 .
drwx------ 62 dennisj dennisj    4096 Nov 22 00:40 ..
drwxr-xr-x  8 dennisj dennisj    4096 Nov 22 00:16 .git
-rw-------  1 dennisj dennisj       8 Sep 26 12:40 .gitignore
drwxr-xr-x  2 dennisj dennisj    4096 Sep 26 23:25 .vscode
-rw-r--r--  1 dennisj dennisj    1067 Sep 18 12:10 LICENSE
-rw-r--r--  1 dennisj dennisj    9070 Sep 18 12:10 Makefile
-rw-r--r--  1 dennisj dennisj   14382 Sep 18 12:10 README.md
-rw-r--r--  1 dennisj dennisj   14382 Sep 18 12:10 README.txt
drwxr-xr-x  2 dennisj dennisj    4096 Sep 18 12:10 archive
drwxr-xr-x  2 dennisj dennisj    4096 Nov 23 07:06 bin
drwxr-xr-x  6 dennisj dennisj    4096 Sep 26 14:51 build
-rw-r--r--  1 dennisj dennisj 1543122 Nov 23 07:42 csl.log
drwxr-xr-x  2 dennisj dennisj    4096 Sep 18 12:10 etc
-rw-r--r--  1 dennisj dennisj   22654 Nov 23 07:41 init.csl
-rw-r--r--  1 dennisj dennisj   20368 Sep 18 12:10 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj     220 Sep 18 12:10 m
-rwxr-xr-x  1 dennisj dennisj     664 Sep 18 12:10 m0
-rwxr-xr-x  1 dennisj dennisj     224 Sep 18 12:10 ma
-rwxr-xr-x  1 dennisj dennisj     503 Sep 18 12:10 mir
-rwxr-xr-x  1 dennisj dennisj     549 Sep 18 12:10 mirAll
-rwxr-xr-x  1 dennisj dennisj     504 Sep 18 12:10 mira
-rwxr-xr-x  1 dennisj dennisj     518 Sep 18 12:10 mirs
drwxr-xr-x  4 dennisj dennisj    4096 Sep 18 12:10 namespaces
drwxr-xr-x  3 dennisj dennisj    4096 Sep 18 12:10 nbproject
-rw-r--r--  1 dennisj dennisj       5 Nov 23 07:50 node.txt
-rwxr-xr-x  1 dennisj dennisj     124 Sep 18 12:10 r
drwxr-xr-x  5 dennisj dennisj    4096 Sep 18 12:10 src

3
 namespaces/test/lisp.csl 351.9
including namespaces/compiler/syntax.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :>
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
Source code file location of yada : "namespaces/compiler/syntax.csl" : 7.10 :: we are now at : namespaces/compiler/syntax.csl : 7.83
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb81dd -- code size = 81 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.yada : definition = 0x0000767060bb81dd : disassembly at namespaces/compiler/syntax.csl : 7.83 :
0x767060bb81dd    4d897e08                mov [r14+0x8], r15
0x767060bb81e1    4d8d7e08                lea r15, [r14+0x8]
0x767060bb81e5    4981c620000000          add r14, 0x20
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  ..
0x767060bb81ec    49c7470802000000        mov qword [r15+0x8], 0x2
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  ..
0x767060bb81f4    49c747100c000000        mov qword [r15+0x10], 0xc
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb81fc    498b4708                mov rax, [r15+0x8]
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8200    498b4f10                mov rcx, [r15+0x10]
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8204    4803c1                  add rax, rcx
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8207    b902000000              mov ecx, 0x2
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb820c    48c7c200000000          mov rdx, 0x0
0x767060bb8213    48f7f9                  idiv rcx
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  ..
0x767060bb8216    49894718                mov [r15+0x18], rax
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb821a    498b4718                mov rax, [r15+0x18]
0x767060bb821e    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8222    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8226    4983c608                add r14, 0x8
 .. 12, x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb822a    498906                  mov [r14], rax
 .. x ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb822d    c3                      ret
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x0000767061065c4b :: Compiled at : 0x0000767060bb81dd
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 7.83 <::

DataStack at : namespaces/compiler/syntax.csl : 7.97 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/syntax.csl : 7.107 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :>
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
Source code file location of yadaYada : "namespaces/compiler/syntax.csl" : 8.14 :: we are now at : namespaces/compiler/syntax.csl : 8.98
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb8233 -- code size = 81 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x0000767060bb8233 : disassembly at namespaces/compiler/syntax.csl : 8.98 :
0x767060bb8233    4d897e08                mov [r14+0x8], r15
0x767060bb8237    4d8d7e08                lea r15, [r14+0x8]
0x767060bb823b    4981c620000000          add r14, 0x20
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  ..
0x767060bb8242    49c7470802000000        mov qword [r15+0x8], 0x2
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  ..
0x767060bb824a    49c747100c000000        mov qword [r15+0x10], 0xc
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8252    498b4708                mov rax, [r15+0x8]
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8256    498b4f10                mov rcx, [r15+0x10]
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb825a    4803c1                  add rax, rcx
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb825d    b902000000              mov ecx, 0x2
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8262    48c7c200000000          mov rdx, 0x0
0x767060bb8269    48f7f9                  idiv rcx
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb826c    49894718                mov [r15+0x18], rax
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8270    498b4718                mov rax, [r15+0x18]
0x767060bb8274    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8278    4d8b7e08                mov r15, [r14+0x8]
0x767060bb827c    4983c608                add r14, 0x8
 ..  = 12 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8280    498906                  mov [r14], rax
 .. 2 ; x = (( a + b ) / 2 ) ; return x ; }
0x767060bb8283    c3                      ret
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x00007670610686eb :: Compiled at : 0x0000767060bb8233
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 8.98 <::

DataStack at : namespaces/compiler/syntax.csl : 8.124 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Root.hi <:> csl compiled word
SourceCode for Root.hi :>
: hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x
Source code file location of hi : "namespaces/compiler/syntax.csl" : 14.2 :: we are now at : namespaces/compiler/syntax.csl : 15.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb82c2 -- code size = 101 bytes
TypeSignature :
 -----------------------------
Word :: Root.hi : definition = 0x0000767060bb82c2 : disassembly at namespaces/compiler/syntax.csl : 15.16 :
0x767060bb82c2    4d897e08                mov [r14+0x8], r15
0x767060bb82c6    4d8d7e08                lea r15, [r14+0x8]
0x767060bb82ca    4981c610000000          add r14, 0x10
 ..                    : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb82d1    b802000000              mov eax, 0x2
0x767060bb82d6    4983c608                add r14, 0x8
0x767060bb82da    498906                  mov [r14], rax
 ..              : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb82dd    b80c0000004983c608      mov rax, 0x8c683490000000c
0x767060bb82e6    498906                  mov [r14], rax
 ..          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb82e9    498b0e                  mov rcx, [r14]
0x767060bb82ec    498b46f8                mov rax, [r14-0x8]
0x767060bb82f0    4983ee10                sub r14, 0x10
 ..                  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb82f4    4803c1                  add rax, rcx
 ..                          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb82f7    49894708                mov [r15+0x8], rax
 ..   : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb82fb    498b4708                mov rax, [r15+0x8]
0x767060bb82ff    4983c608                add r14, 0x8
0x767060bb8303    498906                  mov [r14], rax
 .. : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb8306    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb8310    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  ..
0x767060bb8313    498b4708                mov rax, [r15+0x8]
0x767060bb8317    4d8d77f8                lea r14, [r15-0x8]
0x767060bb831b    4d8b7e08                mov r15, [r14+0x8]
0x767060bb831f    4983c608                add r14, 0x8
 .. x ) x = ( 2 + ( 3 * 4 ) ), x p return x
0x767060bb8323    498906                  mov [r14], rax
0x767060bb8326    c3                      ret
Word_Disassemble : word - 'hi' :: codeSize = 101
Word : 0x000076706106bd5b :: Compiled at : 0x0000767060bb82c2
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 15.16 <::
 14
DataStack at : namespaces/compiler/syntax.csl : 16.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :>
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 19.2 :: we are now at : namespaces/compiler/syntax.csl : 20.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb832c -- code size = 124 bytes
TypeSignature :
 -----------------------------
Word :: Root.hi1 : definition = 0x0000767060bb832c : disassembly at namespaces/compiler/syntax.csl : 20.17 :
0x767060bb832c    4d897e08                mov [r14+0x8], r15
0x767060bb8330    4d8d7e08                lea r15, [r14+0x8]
0x767060bb8334    4981c610000000          add r14, 0x10
 ..                 : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb833b    b802000000              mov eax, 0x2
0x767060bb8340    4983c608                add r14, 0x8
0x767060bb8344    498906                  mov [r14], rax
 ..         : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb8347    498b47f0                mov rax, [r15-0x10]
 .. : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb834b    498b4ff8                mov rcx, [r15-0x8]
 ..     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb834f    48c7c200000000          mov rdx, 0x0
0x767060bb8356    48f7f9                  idiv rcx
0x767060bb8359    4983c608                add r14, 0x8
  : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb835d    498906                  mov [r14], rax
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb8360    498b0e                  mov rcx, [r14]
0x767060bb8363    498b46f8                mov rax, [r14-0x8]
0x767060bb8367    4983ee10                sub r14, 0x10
 ..               : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb836b    4803c1                  add rax, rcx
0x767060bb836e    4983c608                add r14, 0x8
0x767060bb8372    498906                  mov [r14], rax
 .. b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
0x767060bb8375    b80c000000              mov eax, 0xc
0x767060bb837a    4983c608                add r14, 0x8
0x767060bb837e    498906                  mov [r14], rax
 .. x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
0x767060bb8381    498b0e                  mov rcx, [r14]
0x767060bb8384    498b46f8                mov rax, [r14-0x8]
0x767060bb8388    4983ee10                sub r14, 0x10
 .. | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
0x767060bb838c    480fafc1                imul rax, rcx
 ..                     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  ..
0x767060bb8390    49894708                mov [r15+0x8], rax
 ..  = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
0x767060bb8394    498b4708                mov rax, [r15+0x8]
0x767060bb8398    4d8d77f8                lea r14, [r15-0x8]
0x767060bb839c    4d8b7e08                mov r15, [r14+0x8]
0x767060bb83a0    4983ee08                sub r14, 0x8
 .. ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
0x767060bb83a4    498906                  mov [r14], rax
 .. ( a ) / ( b ) ) * ( 3 * 4 ), return x ;
0x767060bb83a7    c3                      ret
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x000076706106e13b :: Compiled at : 0x0000767060bb832c
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 20.17 <::
 48
 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :>
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 22.2 :: we are now at : namespaces/compiler/syntax.csl : 23.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb83ad -- code size = 124 bytes
TypeSignature :
 -----------------------------
Word :: Root.hi1 : definition = 0x0000767060bb83ad : disassembly at namespaces/compiler/syntax.csl : 23.17 :
0x767060bb83ad    4d897e08                mov [r14+0x8], r15
0x767060bb83b1    4d8d7e08                lea r15, [r14+0x8]
0x767060bb83b5    4981c610000000          add r14, 0x10
 ..               : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83bc    b802000000              mov eax, 0x2
0x767060bb83c1    4983c608                add r14, 0x8
0x767060bb83c5    498906                  mov [r14], rax
 ..         : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83c8    498b47f0                mov rax, [r15-0x10]
 ..     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83cc    498b4ff8                mov rcx, [r15-0x8]
 ..       : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83d0    48c7c200000000          mov rdx, 0x0
0x767060bb83d7    48f7f9                  idiv rcx
0x767060bb83da    4983c608                add r14, 0x8
0x767060bb83de    498906                  mov [r14], rax
 ..   : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83e1    498b0e                  mov rcx, [r14]
0x767060bb83e4    498b46f8                mov rax, [r14-0x8]
0x767060bb83e8    4983ee10                sub r14, 0x10
 ..             : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83ec    4803c1                  add rax, rcx
0x767060bb83ef    4983c608                add r14, 0x8
0x767060bb83f3    498906                  mov [r14], rax
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb83f6    b80c000000              mov eax, 0xc
0x767060bb83fb    4983c608                add r14, 0x8
0x767060bb83ff    498906                  mov [r14], rax
 .. a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;
0x767060bb8402    498b0e                  mov rcx, [r14]
0x767060bb8405    498b46f8                mov rax, [r14-0x8]
0x767060bb8409    4983ee10                sub r14, 0x10
 .. ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;
0x767060bb840d    480fafc1                imul rax, rcx
 ..                     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  ..
0x767060bb8411    49894708                mov [r15+0x8], rax
 ..  ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;
0x767060bb8415    498b4708                mov rax, [r15+0x8]
0x767060bb8419    4d8d77f8                lea r14, [r15-0x8]
0x767060bb841d    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8421    4983ee08                sub r14, 0x8
 .. ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;
0x767060bb8425    498906                  mov [r14], rax
 .. 2 + ( a / b ) * ( 3 * 4 ) ), return x ;
0x767060bb8428    c3                      ret
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x0000767061070f3b :: Compiled at : 0x0000767060bb83ad
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 23.17 <::
 48 48
DataStack at : namespaces/compiler/syntax.csl : 26.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Root.hi2 <:> csl compiled word
SourceCode for Root.hi2 :>
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
Source code file location of hi2 : "namespaces/compiler/syntax.csl" : 27.2 :: we are now at : namespaces/compiler/syntax.csl : 28.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb842e -- code size = 124 bytes
TypeSignature :
 -----------------------------
Word :: Root.hi2 : definition = 0x0000767060bb842e : disassembly at namespaces/compiler/syntax.csl : 28.17 :
0x767060bb842e    4d897e08                mov [r14+0x8], r15
0x767060bb8432    4d8d7e08                lea r15, [r14+0x8]
0x767060bb8436    4981c610000000          add r14, 0x10
 ..       : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  ..
0x767060bb843d    b802000000              mov eax, 0x2
0x767060bb8442    4983c608                add r14, 0x8
0x767060bb8446    498906                  mov [r14], rax
 .. : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  ..
0x767060bb8449    498b47f0                mov rax, [r15-0x10]
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  ..
0x767060bb844d    498b4ff8                mov rcx, [r15-0x8]
  : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  ..
0x767060bb8451    48c7c200000000          mov rdx, 0x0
0x767060bb8458    48f7f9                  idiv rcx
0x767060bb845b    4983c608                add r14, 0x8
0x767060bb845f    498906                  mov [r14], rax
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb8462    498b0e                  mov rcx, [r14]
0x767060bb8465    498b46f8                mov rax, [r14-0x8]
0x767060bb8469    4983ee10                sub r14, 0x10
 ..     : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  ..
0x767060bb846d    4803c1                  add rax, rcx
0x767060bb8470    4983c608                add r14, 0x8
0x767060bb8474    498906                  mov [r14], rax
 .. ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb8477    b80c000000              mov eax, 0xc
0x767060bb847c    4983c608                add r14, 0x8
0x767060bb8480    498906                  mov [r14], rax
 .. x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb8483    498b0e                  mov rcx, [r14]
0x767060bb8486    498b46f8                mov rax, [r14-0x8]
0x767060bb848a    4983ee10                sub r14, 0x10
 .. ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb848e    480fafc1                imul rax, rcx
 ..                   : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  ..
0x767060bb8492    49894708                mov [r15+0x8], rax
 ..  ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb8496    498b4708                mov rax, [r15+0x8]
0x767060bb849a    4d8d77f8                lea r14, [r15-0x8]
0x767060bb849e    4d8b7e08                mov r15, [r14+0x8]
0x767060bb84a2    4983ee08                sub r14, 0x8
 .. b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb84a6    498906                  mov [r14], rax
 .. ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;
0x767060bb84a9    c3                      ret
Word_Disassemble : word - 'hi2' :: codeSize = 124
Word : 0x00007670610739db :: Compiled at : 0x0000767060bb842e
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 28.17 <::
 48
DataStack at : namespaces/compiler/syntax.csl : 29.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 48
DataStack at : namespaces/compiler/syntax.csl : 31.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Root.h3 <:> csl compiled word
SourceCode for Root.h3 :>
: h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
Source code file location of h3 : "namespaces/compiler/syntax.csl" : 32.2 :: we are now at : namespaces/compiler/syntax.csl : 33.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb84af -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: Root.h3 : definition = 0x0000767060bb84af : disassembly at namespaces/compiler/syntax.csl : 33.16 :
0x767060bb84af    4d897e08                mov [r14+0x8], r15
0x767060bb84b3    4d8d7e08                lea r15, [r14+0x8]
0x767060bb84b7    4981c610000000          add r14, 0x10
 ..        : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  ..
0x767060bb84be    b802000000              mov eax, 0x2
0x767060bb84c3    4983c608                add r14, 0x8
0x767060bb84c7    498906                  mov [r14], rax
   : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  ..
0x767060bb84ca    b80c000000              mov eax, 0xc
0x767060bb84cf    4983c608                add r14, 0x8
0x767060bb84d3    498906                  mov [r14], rax
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb84d6    498b0e                  mov rcx, [r14]
0x767060bb84d9    498b46f8                mov rax, [r14-0x8]
0x767060bb84dd    4983ee10                sub r14, 0x10
 ..      : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  ..
0x767060bb84e1    4803c1                  add rax, rcx
0x767060bb84e4    4983c608                add r14, 0x8
0x767060bb84e8    498906                  mov [r14], rax
 ..  ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb84eb    498b47f0                mov rax, [r15-0x10]
 ..  ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb84ef    498b4ff8                mov rcx, [r15-0x8]
 .. x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb84f3    48c7c200000000          mov rdx, 0x0
0x767060bb84fa    48f7f9                  idiv rcx
0x767060bb84fd    4983c608                add r14, 0x8
 .. ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb8501    498906                  mov [r14], rax
 .. ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb8504    498b0e                  mov rcx, [r14]
0x767060bb8507    498b46f8                mov rax, [r14-0x8]
0x767060bb850b    4983ee10                sub r14, 0x10
 .. | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb850f    482bc1                  sub rax, rcx
 ..                    : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  ..
0x767060bb8512    49894708                mov [r15+0x8], rax
 ..  3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb8516    498b4708                mov rax, [r15+0x8]
0x767060bb851a    4d8d77f8                lea r14, [r15-0x8]
0x767060bb851e    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8522    4983ee08                sub r14, 0x8
 .. ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb8526    498906                  mov [r14], rax
 .. ) - ( (a) / (b) ) ) ) ) ) ), return x ;
0x767060bb8529    c3                      ret
Word_Disassemble : word - 'h3' :: codeSize = 123
Word : 0x000076706107755b :: Compiled at : 0x0000767060bb84af
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 33.16 <::
 12 6 3 h3_assert1  : ok

 12
DataStack at : namespaces/compiler/syntax.csl : 35.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Root.h4 <:> csl compiled word
SourceCode for Root.h4 :>
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;
Source code file location of h4 : "namespaces/compiler/syntax.csl" : 36.2 :: we are now at : namespaces/compiler/syntax.csl : 37.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb852f -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: Root.h4 : definition = 0x0000767060bb852f : disassembly at namespaces/compiler/syntax.csl : 37.16 :
0x767060bb852f    4d897e08                mov [r14+0x8], r15
0x767060bb8533    4d8d7e08                lea r15, [r14+0x8]
0x767060bb8537    4981c610000000          add r14, 0x10
 ..                : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb853e    b814000000              mov eax, 0x14
0x767060bb8543    4983c608                add r14, 0x8
0x767060bb8547    498906                  mov [r14], rax
 ..         : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb854a    b80c000000              mov eax, 0xc
0x767060bb854f    4983c608                add r14, 0x8
0x767060bb8553    498906                  mov [r14], rax
 ..     : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb8556    498b0e                  mov rcx, [r14]
0x767060bb8559    498b46f8                mov rax, [r14-0x8]
0x767060bb855d    4983ee10                sub r14, 0x10
 ..             : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb8561    482bc1                  sub rax, rcx
0x767060bb8564    4983c608                add r14, 0x8
0x767060bb8568    498906                  mov [r14], rax
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb856b    498b47f0                mov rax, [r15-0x10]
 ..  b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;
0x767060bb856f    498b4ff8                mov rcx, [r15-0x8]
 ..  a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;
0x767060bb8573    48c7c200000000          mov rdx, 0x0
0x767060bb857a    48f7f9                  idiv rcx
0x767060bb857d    4983c608                add r14, 0x8
0x767060bb8581    498906                  mov [r14], rax
 ..  | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;
0x767060bb8584    498b0e                  mov rcx, [r14]
0x767060bb8587    498b46f8                mov rax, [r14-0x8]
0x767060bb858b    4983ee10                sub r14, 0x10
 .. : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb858f    482bc1                  sub rax, rcx
 ..                      : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  ..
0x767060bb8592    49894708                mov [r15+0x8], rax
 .. ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;
0x767060bb8596    498b4708                mov rax, [r15+0x8]
0x767060bb859a    4d8d77f8                lea r14, [r15-0x8]
0x767060bb859e    4d8b7e08                mov r15, [r14+0x8]
0x767060bb85a2    4983ee08                sub r14, 0x8
 ..  20 - ( 3 * 4 ) - ( a / b ) ), return x ;
0x767060bb85a6    498906                  mov [r14], rax
 .. 0 - ( 3 * 4 ) - ( a / b ) ), return x ;
0x767060bb85a9    c3                      ret
Word_Disassemble : word - 'h4' :: codeSize = 123
Word : 0x000076706107b79b :: Compiled at : 0x0000767060bb852f
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 37.16 <::
 6
DataStack at : namespaces/compiler/syntax.csl : 38.24 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 6
DataStack at : namespaces/compiler/syntax.csl : 39.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

above lines should read 6
DataStack at : namespaces/compiler/syntax.csl : 42.40 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 3
above line should read 3

  52.53799999999999670308170607313514
  52.53799999999999670308170607313514
  52.53799999999999670308170607313514
above lines should show : 52.53799999999999670308170607313514
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :>
void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 59.11 :: we are now at : namespaces/compiler/syntax.csl : 62.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb88a1 -- code size = 255 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x0000767060bb88a1 : disassembly at namespaces/compiler/syntax.csl : 62.18 :
0x767060bb88a1    4d897e08                mov [r14+0x8], r15
0x767060bb88a5    4d8d7e08                lea r15, [r14+0x8]
0x767060bb88a9    4981c608000000          add r14, 0x8
 ..                    void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  ..
0x767060bb88b0    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bb88b5    0f8523000000            jnz 0x767060bb88de            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  ..
0x767060bb88bb    48b8fd178c6070760000    mov rax, 0x7670608c17fd       < string : 'hi1' >
0x767060bb88c5    4983c608                add r14, 0x8
0x767060bb88c9    498906                  mov [r14], rax
 ..     void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  ..
0x767060bb88cc    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb88d6    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb88d9    e929000000              jmp 0x767060bb8907            < C_Syntax.thi42+102 >
   void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  ..
0x767060bb88de    49837ff802              cmp qword [r15-0x8], 0x2
0x767060bb88e3    0f8523000000            jnz 0x767060bb890c            < C_Syntax.thi42+107 >
 ..  ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb88e9    48b80f188c6070760000    mov rax, 0x7670608c180f       < string : 'hi2' >
0x767060bb88f3    4983c608                add r14, 0x8
0x767060bb88f7    498906                  mov [r14], rax
 ..  { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb88fa    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8904    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8907    e929000000              jmp 0x767060bb8935            < C_Syntax.thi42+148 >
 .. == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb890c    49837ff803              cmp qword [r15-0x8], 0x3
0x767060bb8911    0f8523000000            jnz 0x767060bb893a            < C_Syntax.thi42+153 >
 .. i1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8917    48b821188c6070760000    mov rax, 0x7670608c1821       < string : 'hi3' >
0x767060bb8921    4983c608                add r14, 0x8
0x767060bb8925    498906                  mov [r14], rax
 ..  : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8928    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8932    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8935    e929000000              jmp 0x767060bb8963            < C_Syntax.thi42+194 >
 .. == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb893a    49837ff804              cmp qword [r15-0x8], 0x4
0x767060bb893f    0f8523000000            jnz 0x767060bb8968            < C_Syntax.thi42+199 >
 .. i2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8945    48b834188c6070760000    mov rax, 0x7670608c1834       < string : 'hi42' >
0x767060bb894f    4983c608                add r14, 0x8
0x767060bb8953    498906                  mov [r14], rax
 .. : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8956    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8960    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8963    e92b000000              jmp 0x767060bb8993            < C_Syntax.thi42+242 >
 .. = 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8968    48b846188c6070760000    mov rax, 0x7670608c1846       < string : 'err' >
0x767060bb8972    4983c608                add r14, 0x8
0x767060bb8976    498906                  mov [r14], rax
 .. "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8979    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8983    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. 3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb8986    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8990    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8993    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8997    4d8b7e08                mov r15, [r14+0x8]
0x767060bb899b    4983ee08                sub r14, 0x8
 .. n == 4 ? "hi42" ps : "err" ps Error ; }
0x767060bb899f    c3                      ret
Word_Disassemble : word - 'thi42' :: codeSize = 255
Word : 0x000076706108493b :: Compiled at : 0x0000767060bb88a1
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 62.18 <::

 hi1 hi2 hi3 hi42
should show : hi1 hi2 hi3 hi42  hi42

 =============================
Interpreter.thi2 <:> csl compiled word
SourceCode for Interpreter.thi2 :>
: thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;
Source code file location of thi2 : "namespaces/compiler/syntax.csl" : 72.2 :: we are now at : namespaces/compiler/syntax.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb89a5 -- code size = 150 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter.thi2 : definition = 0x0000767060bb89a5 : disassembly at namespaces/compiler/syntax.csl : 73.17 :
0x767060bb89a5    4d897e08                mov [r14+0x8], r15
0x767060bb89a9    4d8d7e08                lea r15, [r14+0x8]
0x767060bb89ad    4981c608000000          add r14, 0x8
 ..                          : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  ..
0x767060bb89b4    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bb89b9    0f8523000000            jnz 0x767060bb89e2            < Interpreter.thi2+61 >
 ..               : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  ..
0x767060bb89bf    48b86d198c6070760000    mov rax, 0x7670608c196d       < string : 'hi1' >
0x767060bb89c9    4983c608                add r14, 0x8
0x767060bb89cd    498906                  mov [r14], rax
 ..         : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  ..
0x767060bb89d0    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb89da    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb89dd    e929000000              jmp 0x767060bb8a0b            < Interpreter.thi2+102 >
 ..    : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  ..
0x767060bb89e2    49837ff802              cmp qword [r15-0x8], 0x2
0x767060bb89e7    0f8523000000            jnz 0x767060bb8a10            < Interpreter.thi2+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;
0x767060bb89ed    48b87f198c6070760000    mov rax, 0x7670608c197f       < string : 'hi2' >
0x767060bb89f7    4983c608                add r14, 0x8
0x767060bb89fb    498906                  mov [r14], rax
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;
0x767060bb89fe    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8a08    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8a0b    e91e000000              jmp 0x767060bb8a2e            < Interpreter.thi2+137 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;
0x767060bb8a10    48b88f198c6070760000    mov rax, 0x7670608c198f       < string : 'err' >
0x767060bb8a1a    4983c608                add r14, 0x8
0x767060bb8a1e    498906                  mov [r14], rax
 .. hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;
0x767060bb8a21    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8a2b    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8a2e    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8a32    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8a36    4983ee08                sub r14, 0x8
 .. " ps : n @ 2 == ? "hi2" ps : "err" ps ;
0x767060bb8a3a    c3                      ret
Word_Disassemble : word - 'thi2' :: codeSize = 150
Word : 0x0000767061087c4b :: Compiled at : 0x0000767060bb89a5
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 73.17 <::
 hi2
 =============================
Interpreter.thi3 <:> csl compiled word
SourceCode for Interpreter.thi3 :>
: thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
Source code file location of thi3 : "namespaces/compiler/syntax.csl" : 75.2 :: we are now at : namespaces/compiler/syntax.csl : 76.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb8a40 -- code size = 179 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter.thi3 : definition = 0x0000767060bb8a40 : disassembly at namespaces/compiler/syntax.csl : 76.17 :
0x767060bb8a40    4d897e08                mov [r14+0x8], r15
0x767060bb8a44    4d8d7e08                lea r15, [r14+0x8]
0x767060bb8a48    4981c608000000          add r14, 0x8
 ..                          : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  ..
0x767060bb8a4f    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bb8a54    0f8523000000            jnz 0x767060bb8a7d            < Interpreter.thi3+61 >
 ..               : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  ..
0x767060bb8a5a    48b8f8198c6070760000    mov rax, 0x7670608c19f8       < string : 'hi1' >
0x767060bb8a64    4983c608                add r14, 0x8
0x767060bb8a68    498906                  mov [r14], rax
 ..         : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  ..
0x767060bb8a6b    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8a75    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8a78    e929000000              jmp 0x767060bb8aa6            < Interpreter.thi3+102 >
 ..    : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  ..
0x767060bb8a7d    49837ff802              cmp qword [r15-0x8], 0x2
0x767060bb8a82    0f8523000000            jnz 0x767060bb8aab            < Interpreter.thi3+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8a88    48b80a1a8c6070760000    mov rax, 0x7670608c1a0a       < string : 'hi2' >
0x767060bb8a92    4983c608                add r14, 0x8
0x767060bb8a96    498906                  mov [r14], rax
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8a99    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8aa3    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8aa6    e929000000              jmp 0x767060bb8ad4            < Interpreter.thi3+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8aab    49837ff803              cmp qword [r15-0x8], 0x3
0x767060bb8ab0    0f8523000000            jnz 0x767060bb8ad9            < Interpreter.thi3+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8ab6    48b81c1a8c6070760000    mov rax, 0x7670608c1a1c       < string : 'hi3' >
0x767060bb8ac0    4983c608                add r14, 0x8
0x767060bb8ac4    498906                  mov [r14], rax
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8ac7    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8ad1    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8ad4    e90d000000              jmp 0x767060bb8ae6            < Interpreter.thi3+166 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8ad9    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8ae3    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8ae6    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8aea    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8aee    4983ee08                sub r14, 0x8
 .. hi2" ps : n @ 3 == ? "hi3" ps : Error ;
0x767060bb8af2    c3                      ret
Word_Disassemble : word - 'thi3' :: codeSize = 179
Word : 0x0000767061089b1b :: Compiled at : 0x0000767060bb8a40
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 76.17 <::
 hi3
 =============================
Interpreter.thi43 <:> csl compiled word
SourceCode for Interpreter.thi43 :>
: thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
Source code file location of thi43 : "namespaces/compiler/syntax.csl" : 79.2 :: we are now at : namespaces/compiler/syntax.csl : 80.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb8af8 -- code size = 225 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter.thi43 : definition = 0x0000767060bb8af8 : disassembly at namespaces/compiler/syntax.csl : 80.18 :
0x767060bb8af8    4d897e08                mov [r14+0x8], r15
0x767060bb8afc    4d8d7e08                lea r15, [r14+0x8]
0x767060bb8b00    4981c608000000          add r14, 0x8
 ..                         : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  ..
0x767060bb8b07    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bb8b0c    0f8523000000            jnz 0x767060bb8b35            < Interpreter.thi43+61 >
 ..              : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  ..
0x767060bb8b12    48b8991a8c6070760000    mov rax, 0x7670608c1a99       < string : 'hi1' >
0x767060bb8b1c    4983c608                add r14, 0x8
0x767060bb8b20    498906                  mov [r14], rax
 ..        : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  ..
0x767060bb8b23    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8b2d    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8b30    e929000000              jmp 0x767060bb8b5e            < Interpreter.thi43+102 >
 ..   : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  ..
0x767060bb8b35    49837ff802              cmp qword [r15-0x8], 0x2
0x767060bb8b3a    0f8523000000            jnz 0x767060bb8b63            < Interpreter.thi43+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b40    48b8ab1a8c6070760000    mov rax, 0x7670608c1aab       < string : 'hi2' >
0x767060bb8b4a    4983c608                add r14, 0x8
0x767060bb8b4e    498906                  mov [r14], rax
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b51    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8b5b    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8b5e    e929000000              jmp 0x767060bb8b8c            < Interpreter.thi43+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b63    49837ff803              cmp qword [r15-0x8], 0x3
0x767060bb8b68    0f8523000000            jnz 0x767060bb8b91            < Interpreter.thi43+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b6e    48b8bd1a8c6070760000    mov rax, 0x7670608c1abd       < string : 'hi3' >
0x767060bb8b78    4983c608                add r14, 0x8
0x767060bb8b7c    498906                  mov [r14], rax
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b7f    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8b89    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8b8c    e929000000              jmp 0x767060bb8bba            < Interpreter.thi43+194 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b91    49837ff804              cmp qword [r15-0x8], 0x4
0x767060bb8b96    0f8523000000            jnz 0x767060bb8bbf            < Interpreter.thi43+199 >
 .. ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8b9c    48b8d01a8c6070760000    mov rax, 0x7670608c1ad0       < string : 'hi42' >
0x767060bb8ba6    4983c608                add r14, 0x8
0x767060bb8baa    498906                  mov [r14], rax
 .. @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8bad    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8bb7    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8bba    e90d000000              jmp 0x767060bb8bcc            < Interpreter.thi43+212 >
 .. = ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8bbf    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8bc9    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8bcc    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8bd0    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8bd4    4983ee08                sub r14, 0x8
 .. i3" ps : n @ 4 == ? "hi42" ps : Error ;
0x767060bb8bd8    c3                      ret
Word_Disassemble : word - 'thi43' :: codeSize = 225
Word : 0x000076706108c40b :: Compiled at : 0x0000767060bb8af8
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 80.18 <::
 hi42
 hi1 hi2 hi3 hi42
n = 3 : m = 4 7 hi42

 =============================
C_Syntax.thi41 <:> csl compiled word
SourceCode for C_Syntax.thi41 :>
void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
Source code file location of thi41 : "namespaces/compiler/syntax.csl" : 97.11 :: we are now at : namespaces/compiler/syntax.csl : 101.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb8ca4 -- code size = 220 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.thi41 : definition = 0x0000767060bb8ca4 : disassembly at namespaces/compiler/syntax.csl : 101.18 :
 ..                       void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  ..
0x767060bb8ca4    48c7c000000000          mov rax, 0x0
0x767060bb8cab    4883f800                cmp rax, 0x0
0x767060bb8caf    0f8423000000            jz 0x767060bb8cd8             < C_Syntax.thi41+52 >
 ..                   void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  ..
0x767060bb8cb5    48b8411c8c6070760000    mov rax, 0x7670608c1c41       < string : 'hi1' >
0x767060bb8cbf    4983c608                add r14, 0x8
0x767060bb8cc3    498906                  mov [r14], rax
 ..             void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  ..
0x767060bb8cc6    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8cd0    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8cd3    e92f000000              jmp 0x767060bb8d07            < C_Syntax.thi41+99 >
 ..     void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  ..
0x767060bb8cd8    48c7c000000000          mov rax, 0x0
0x767060bb8cdf    4883f800                cmp rax, 0x0
0x767060bb8ce3    0f8423000000            jz 0x767060bb8d0c             < C_Syntax.thi41+104 >
 .. void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  ..
0x767060bb8ce9    48b8531c8c6070760000    mov rax, 0x7670608c1c53       < string : 'hi2' >
0x767060bb8cf3    4983c608                add r14, 0x8
0x767060bb8cf7    498906                  mov [r14], rax
 .. hi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8cfa    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8d04    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8d07    e92f000000              jmp 0x767060bb8d3b            < C_Syntax.thi41+151 >
 .. { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d0c    48c7c000000000          mov rax, 0x0
0x767060bb8d13    4883f800                cmp rax, 0x0
0x767060bb8d17    0f8423000000            jz 0x767060bb8d40             < C_Syntax.thi41+156 >
 .. ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d1d    48b8651c8c6070760000    mov rax, 0x7670608c1c65       < string : 'hi3' >
0x767060bb8d27    4983c608                add r14, 0x8
0x767060bb8d2b    498906                  mov [r14], rax
 .. " Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d2e    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8d38    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8d3b    e92d000000              jmp 0x767060bb8d6d            < C_Syntax.thi41+201 >
 .. : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d40    b801000000              mov eax, 0x1
0x767060bb8d45    4883f800                cmp rax, 0x0
0x767060bb8d49    0f8423000000            jz 0x767060bb8d72             < C_Syntax.thi41+206 >
 .. ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d4f    48b8791c8c6070760000    mov rax, 0x7670608c1c79
0x767060bb8d59    4983c608                add r14, 0x8
0x767060bb8d5d    498906                  mov [r14], rax
 .. rror : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d60    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8d6a    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8d6d    e90d000000              jmp 0x767060bb8d7f            < C_Syntax.thi41+219 >
 .. : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d72    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8d7c    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
 .. i3" Error : 1 ? "hi42\n" ps : Error ; }
0x767060bb8d7f    c3                      ret
Word_Disassemble : word - 'thi41' :: codeSize = 220
Word : 0x00007670610915eb :: Compiled at : 0x0000767060bb8ca4
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 101.18 <::
 hi42

should show : 'hi42'
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :>
void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 107.11 :: we are now at : namespaces/compiler/syntax.csl : 109.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb8d85 -- code size = 225 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x0000767060bb8d85 : disassembly at namespaces/compiler/syntax.csl : 109.18 :
0x767060bb8d85    4d897e08                mov [r14+0x8], r15
0x767060bb8d89    4d8d7e08                lea r15, [r14+0x8]
0x767060bb8d8d    4981c608000000          add r14, 0x8
 ..                    void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  ..
0x767060bb8d94    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bb8d99    0f8523000000            jnz 0x767060bb8dc2            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  ..
0x767060bb8d9f    48b84e1d8c6070760000    mov rax, 0x7670608c1d4e       < string : '1:hi1' >
0x767060bb8da9    4983c608                add r14, 0x8
0x767060bb8dad    498906                  mov [r14], rax
 ..   void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  ..
0x767060bb8db0    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8dba    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8dbd    e929000000              jmp 0x767060bb8deb            < C_Syntax.thi42+102 >
 void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  ..
0x767060bb8dc2    49837ff802              cmp qword [r15-0x8], 0x2
0x767060bb8dc7    0f8523000000            jnz 0x767060bb8df0            < C_Syntax.thi42+107 >
 ..  n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8dcd    48b8661d8c6070760000    mov rax, 0x7670608c1d66       < string : '2:hi2' >
0x767060bb8dd7    4983c608                add r14, 0x8
0x767060bb8ddb    498906                  mov [r14], rax
 ..  == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8dde    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8de8    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8deb    e929000000              jmp 0x767060bb8e19            < C_Syntax.thi42+148 >
 ..  ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8df0    49837ff803              cmp qword [r15-0x8], 0x3
0x767060bb8df5    0f8523000000            jnz 0x767060bb8e1e            < C_Syntax.thi42+153 >
 .. " ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8dfb    48b87e1d8c6070760000    mov rax, 0x7670608c1d7e       < string : '3:hi3' >
0x767060bb8e05    4983c608                add r14, 0x8
0x767060bb8e09    498906                  mov [r14], rax
 ..  == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8e0c    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8e16    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8e19    e929000000              jmp 0x767060bb8e47            < C_Syntax.thi42+194 >
 ..  ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8e1e    49837ff804              cmp qword [r15-0x8], 0x4
0x767060bb8e23    0f8523000000            jnz 0x767060bb8e4c            < C_Syntax.thi42+199 >
 .. " ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8e29    48b8971d8c6070760000    mov rax, 0x7670608c1d97       < string : '4:hi42' >
0x767060bb8e33    4983c608                add r14, 0x8
0x767060bb8e37    498906                  mov [r14], rax
 .. == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8e3a    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb8e44    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bb8e47    e90d000000              jmp 0x767060bb8e59            < C_Syntax.thi42+212 >
 .. ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8e4c    49bb6388bb6070760000    mov r11, 0x767060bb8863
0x767060bb8e56    49ffd3                  call r11                      < void.Error : 0x0000767060bb8863 >
0x767060bb8e59    4d8d77f8                lea r14, [r15-0x8]
0x767060bb8e5d    4d8b7e08                mov r15, [r14+0x8]
0x767060bb8e61    4983ee08                sub r14, 0x8
 .. " ps : n == 4 ? "4:hi42" ps : Error ; }
0x767060bb8e65    c3                      ret
Word_Disassemble : word - 'thi42' :: codeSize = 225
Word : 0x000076706109381b :: Compiled at : 0x0000767060bb8d85
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 109.18 <::
 4:hi42
should show : '4:hi42'  ok ok
n = 3 : m = 4 7
ok
including namespaces/test/system.csl at namespaces/test/initTest.csl : 86.41 ...

hello world! - parse this!?
1234            and this!
        also this!
Hello world! = 0x000004d2


Hello world! = 42


hello world! - parse this!?

        also this!
 7 7 7 7
DataStack at : namespaces/test/system.csl : 21.18 :
DataStack depth =   8 : Dsp (R14) = Top = 0x000076705fbb2af8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2af8 > = 0x000076705fbb2ae0
  DataStack   [  -1 ] < 0x000076705fbb2af0 > = 0x0000767060d4f567       < word : User.s : value = 0x0000641cca0fe0f0 >
  DataStack   [  -2 ] < 0x000076705fbb2ae8 > = 0x0000000000000000
  DataStack   [  -3 ] < 0x000076705fbb2ae0 > = 0x0000641cca180c20
  DataStack   [  -4 ] < 0x000076705fbb2ad8 > = 0x0000767060d4f567       < word : User.s : value = 0x0000641cca0fe0f0 >
  DataStack   [  -5 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

Hello world! = 0x000004d2


hello world!
parse this!



 and this!

hello world! - parse this!?
                 and this!
Hello world! = 0x000004d2


Hello world! = 0x000004d2


yes, Hello world! = 0x000004d2
yes, Hello world! = 0x000004d2 : and more yet
e
i       e
line above should read...
i       e
 =============================
Shell.hio <:> csl compiled word
SourceCode for Shell.hio :>
: hio if 1 p else 0 p endif ;
Source code file location of hio : "namespaces/test/system.csl" : 52.2 :: we are now at : namespaces/test/system.csl : 53.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb9589 -- code size = 75 bytes
 -----------------------------
Word :: Shell.hio : definition = 0x0000767060bb9589 : disassembly at namespaces/test/system.csl : 53.17 :
 ..                                : hio  if 1 p else 0 p endif ;  ..
0x767060bb9589    498b06                  mov rax, [r14]
0x767060bb958c    4983ee08                sub r14, 0x8
0x767060bb9590    4883f800                cmp rax, 0x0
0x767060bb9594    0f841e000000            jz 0x767060bb95b8             < Shell.hio+47 >
 ..                             : hio  if 1 p else 0 p endif ;  ..
0x767060bb959a    b801000000              mov eax, 0x1
0x767060bb959f    4983c608                add r14, 0x8
0x767060bb95a3    498906                  mov [r14], rax
 ..                           : hio  if 1 p else 0 p endif ;  ..
0x767060bb95a6    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb95b0    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..                         : hio  if 1 p else 0 p endif ;  ..
0x767060bb95b3    e91b000000              jmp 0x767060bb95d3            < Shell.hio+74 >
 ..                    : hio  if 1 p else 0 p endif ;  ..
0x767060bb95b8    48c7c000000000          mov rax, 0x0
0x767060bb95bf    4983c608                add r14, 0x8
0x767060bb95c3    498906                  mov [r14], rax
 ..                  : hio  if 1 p else 0 p endif ;  ..
0x767060bb95c6    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb95d0    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..          : hio  if 1 p else 0 p endif ;  ..
0x767060bb95d3    c3                      ret
Word_Disassemble : word - 'hio' :: codeSize = 75
Word : 0x00007670610a5d0b :: Compiled at : 0x0000767060bb9589
 =============================
::> 'wdiss' was called at namespaces/test/system.csl 53.17 <::
 1 0
 876543

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.501
 7 7 7
version 0.940.501
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21820 : Unused =   1026756 : Allocations =    1 : Largest =  1026756 : Smallest =  1026756 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    769071 : Unused =   3425233 : Allocations =    1 : Largest =  3425233 : Smallest =  3425233 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2131860 : Unused =  23055684
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1172016 : 2713  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :>
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ;
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x7e9ac400 -- code size = 77 bytes
TypeSignature :
 -----------------------------
Word :: Int.fac : definition = 0x000077af7e9ac400 : disassembly at etc/script : 35.8 :
0x77af7e9ac400    4d897e08                mov [r14+0x8], r15
0x77af7e9ac404    4d8d7e08                lea r15, [r14+0x8]
0x77af7e9ac408    4981c610000000          add r14, 0x10
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x77af7e9ac40f    49c7470801000000        mov qword [r15+0x8], 0x1
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x77af7e9ac417    49837ff801              cmp qword [r15-0x8], 0x1
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac41c    0f8e16000000            jle 0x77af7e9ac438            < Int.fac+56 >
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac422    498b47f8                mov rax, [r15-0x8]
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac426    498b4f08                mov rcx, [r15+0x8]
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac42a    480fafc1                imul rax, rcx
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac42e    49894708                mov [r15+0x8], rax
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac432    49ff4ff8                dec qword [r15-0x8]
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac436    ebdf                    jmp 0x77af7e9ac417            < Int.fac+23 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac438    498b4708                mov rax, [r15+0x8]
0x77af7e9ac43c    e900000000              jmp 0x77af7e9ac441            < Int.fac+65 >
0x77af7e9ac441    4d8d77f8                lea r14, [r15-0x8]
0x77af7e9ac445    4d8b7e08                mov r15, [r14+0x8]
 .. * rec1 store n -- } while      return rec1 @ ;
0x77af7e9ac449    498906                  mov [r14], rax
 .. store n -- } while      return rec1 @ ;
0x77af7e9ac44c    c3                      ret
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x000077af7eb66f27 :: Compiled at : 0x000077af7e9ac400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.501
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21159 : Unused =   1027417 : Allocations =    1 : Largest =  1027417 : Smallest =  1027417 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    752431 : Unused =   3441873 : Allocations =    1 : Largest =  3441873 : Smallest =  3441873 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1894450 : Unused =  23290974
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    846720 : 1960  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :>
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ;
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xaa1ac37f -- code size = 77 bytes
TypeSignature :
 -----------------------------
Word :: Int.fac : definition = 0x00007479aa1ac37f : disassembly at etc/lispScript : 28.17 :
0x7479aa1ac37f    4d897e08                mov [r14+0x8], r15
0x7479aa1ac383    4d8d7e08                lea r15, [r14+0x8]
0x7479aa1ac387    4981c610000000          add r14, 0x10
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x7479aa1ac38e    49c7470801000000        mov qword [r15+0x8], 0x1
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x7479aa1ac396    49837ff801              cmp qword [r15-0x8], 0x1
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac39b    0f8e16000000            jle 0x7479aa1ac3b7            < Int.fac+56 >
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3a1    498b47f8                mov rax, [r15-0x8]
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3a5    498b4f08                mov rcx, [r15+0x8]
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3a9    480fafc1                imul rax, rcx
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3ad    49894708                mov [r15+0x8], rax
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3b1    49ff4ff8                dec qword [r15-0x8]
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3b5    ebdf                    jmp 0x7479aa1ac396            < Int.fac+23 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3b7    498b4708                mov rax, [r15+0x8]
0x7479aa1ac3bb    e900000000              jmp 0x7479aa1ac3c0            < Int.fac+65 >
0x7479aa1ac3c0    4d8d77f8                lea r14, [r15-0x8]
0x7479aa1ac3c4    4d8b7e08                mov r15, [r14+0x8]
 .. * rec1 store n -- } while      return rec1 @ ;
0x7479aa1ac3c8    498906                  mov [r14], rax
 .. store n -- } while      return rec1 @ ;
0x7479aa1ac3cb    c3                      ret
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x00007479aa365c97 :: Compiled at : 0x00007479aa1ac37f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye

including namespaces/compiler/interpreter.csl at namespaces/test/initTest.csl : 86.41 ...

xxhi :
xhi =  7 7
yhi :  7
xxhi :
xhi =  7 7
zhi :
yhi :  7
xxhi :
xhi =  7 7 7
xxhi :
xhi =  7 7
 =============================
C_Syntax.testc1 <:> csl compiled word, prefix
SourceCode for C_Syntax.testc1 :>
void testc1 () { int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ; int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ; ps ( "\ntdbg =" ) ; p ( tdbg ) ; ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ; ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ; ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ; ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ; ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ; ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4) ; xhi1 p (1 + 2 + 4) ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1 p (1 + 2 + 4) ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ; }
Source code file location of testc1 : "namespaces/compiler/interpreter.csl" : 37.7 :: we are now at : namespaces/compiler/interpreter.csl : 49.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bb9e7c -- code size = 1219 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.testc1 : definition = 0x0000767060bb9e7c : disassembly at namespaces/compiler/interpreter.csl : 49.19 :
0x767060bb9e7c    4d897e08                mov [r14+0x8], r15
0x767060bb9e80    4d8d7e08                lea r15, [r14+0x8]
0x767060bb9e84    4981c638000000          add r14, 0x38
 ..        void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p (  ..
0x767060bb9e8b    49c7470801000000        mov qword [r15+0x8], 0x1
void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;    ..
0x767060bb9e93    49c7471002000000        mov qword [r15+0x10], 0x2
 ..  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\n ..
0x767060bb9e9b    49c7471803000000        mov qword [r15+0x18], 0x3
 .. tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg ..
0x767060bb9ea3    49c7472004000000        mov qword [r15+0x20], 0x4
 .. tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;       ..
0x767060bb9eab    49c7472805000000        mov qword [r15+0x28], 0x5
 ..       int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdb ..
0x767060bb9eb3    49c7473006000000        mov qword [r15+0x30], 0x6
 .. = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( td ..
0x767060bb9ebb    48b8972f8c6070760000    mov rax, 0x7670608c2f97
0x767060bb9ec5    4983c608                add r14, 0x8
0x767060bb9ec9    498906                  mov [r14], rax
0x767060bb9ecc    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb9ed6    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. g6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\n ..
0x767060bb9ed9    498b4708                mov rax, [r15+0x8]
0x767060bb9edd    4983c608                add r14, 0x8
0x767060bb9ee1    498906                  mov [r14], rax
 ..  tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( ..
0x767060bb9ee4    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb9eee    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( td ..
0x767060bb9ef1    48b8b42f8c6070760000    mov rax, 0x7670608c2fb4
0x767060bb9efb    4983c608                add r14, 0x8
0x767060bb9eff    498906                  mov [r14], rax
0x767060bb9f02    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb9f0c    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. dbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ ..
0x767060bb9f0f    498b4710                mov rax, [r15+0x10]
0x767060bb9f13    4983c608                add r14, 0x8
0x767060bb9f17    498906                  mov [r14], rax
 ..  ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps  ..
0x767060bb9f1a    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb9f24    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( td ..
0x767060bb9f27    48b8d32f8c6070760000    mov rax, 0x7670608c2fd3
0x767060bb9f31    4983c608                add r14, 0x8
0x767060bb9f35    498906                  mov [r14], rax
0x767060bb9f38    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb9f42    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. bg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ ..
0x767060bb9f45    498b4718                mov rax, [r15+0x18]
0x767060bb9f49    4983c608                add r14, 0x8
0x767060bb9f4d    498906                  mov [r14], rax
 .. ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps  ..
0x767060bb9f50    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb9f5a    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p (  ..
0x767060bb9f5d    48b8f22f8c6070760000    mov rax, 0x7670608c2ff2
0x767060bb9f67    4983c608                add r14, 0x8
0x767060bb9f6b    498906                  mov [r14], rax
0x767060bb9f6e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb9f78    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\n ..
0x767060bb9f7b    498b4720                mov rax, [r15+0x20]
0x767060bb9f7f    4983c608                add r14, 0x8
0x767060bb9f83    498906                  mov [r14], rax
 .. p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps  ..
0x767060bb9f86    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb9f90    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\ ..
0x767060bb9f93    48b811308c6070760000    mov rax, 0x7670608c3011
0x767060bb9f9d    4983c608                add r14, 0x8
0x767060bb9fa1    498906                  mov [r14], rax
0x767060bb9fa4    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb9fae    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. bg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4 ..
0x767060bb9fb1    498b4728                mov rax, [r15+0x28]
0x767060bb9fb5    4983c608                add r14, 0x8
0x767060bb9fb9    498906                  mov [r14], rax
 .. ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhi ..
0x767060bb9fbc    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb9fc6    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0 ..
0x767060bb9fc9    48b830308c6070760000    mov rax, 0x7670608c3030
0x767060bb9fd3    4983c608                add r14, 0x8
0x767060bb9fd7    498906                  mov [r14], rax
0x767060bb9fda    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bb9fe4    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. bg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xh ..
0x767060bb9fe7    498b4730                mov rax, [r15+0x30]
0x767060bb9feb    4983c608                add r14, 0x8
0x767060bb9fef    498906                  mov [r14], rax
 .. ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)    ..
0x767060bb9ff2    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bb9ffc    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..  "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)  ..
0x767060bb9fff    48b851308c6070760000    mov rax, 0x7670608c3051
0x767060bba009    4983c608                add r14, 0x8
0x767060bba00d    498906                  mov [r14], rax
0x767060bba010    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba01a    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 ..
0x767060bba01d    48b873308c6070760000    mov rax, 0x7670608c3073
0x767060bba027    4983c608                add r14, 0x8
0x767060bba02b    498906                  mov [r14], rax
 ..  p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 ));  ..
0x767060bba02e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba038    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + ..
0x767060bba03b    b804000000              mov eax, 0x4
0x767060bba040    4983c608                add r14, 0x8
0x767060bba044    498906                  mov [r14], rax
0x767060bba047    4d897e08                mov [r14+0x8], r15
0x767060bba04b    4d8d7e08                lea r15, [r14+0x8]
0x767060bba04f    4981c608000000          add r14, 0x8
0x767060bba056    b803000000              mov eax, 0x3
0x767060bba05b    498b4ff8                mov rcx, [r15-0x8]
0x767060bba05f    4803c1                  add rax, rcx
0x767060bba062    4983c608                add r14, 0x8
0x767060bba066    498906                  mov [r14], rax
0x767060bba069    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba073    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba076    4d8d77f8                lea r14, [r15-0x8]
0x767060bba07a    4d8b7e08                mov r15, [r14+0x8]
0x767060bba07e    4983ee08                sub r14, 0x8
 ..  ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xh ..
0x767060bba082    b804000000              mov eax, 0x4
0x767060bba087    4983c608                add r14, 0x8
0x767060bba08b    498906                  mov [r14], rax
0x767060bba08e    4d897e08                mov [r14+0x8], r15
0x767060bba092    4d8d7e08                lea r15, [r14+0x8]
0x767060bba096    4981c608000000          add r14, 0x8
0x767060bba09d    48b8662d8c6070760000    mov rax, 0x7670608c2d66
0x767060bba0a7    4983c608                add r14, 0x8
0x767060bba0ab    498906                  mov [r14], rax
0x767060bba0ae    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba0b8    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba0bb    b803000000              mov eax, 0x3
0x767060bba0c0    498b4ff8                mov rcx, [r15-0x8]
0x767060bba0c4    4803c1                  add rax, rcx
0x767060bba0c7    4983c608                add r14, 0x8
0x767060bba0cb    498906                  mov [r14], rax
0x767060bba0ce    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba0d8    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba0db    4d8d77f8                lea r14, [r15-0x8]
0x767060bba0df    4d8b7e08                mov r15, [r14+0x8]
0x767060bba0e3    4983ee08                sub r14, 0x8
 ..  =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xh ..
0x767060bba0e7    b803000000              mov eax, 0x3
 .. xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1  ..
0x767060bba0ec    b904000000              mov ecx, 0x4
 .. ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p ( ..
0x767060bba0f1    4803c1                  add rax, rcx
0x767060bba0f4    4983c608                add r14, 0x8
0x767060bba0f8    498906                  mov [r14], rax
 .. hii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; ..
0x767060bba0fb    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba105    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..  (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xh ..
0x767060bba108    b803000000              mov eax, 0x3
 .. xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; ..
0x767060bba10d    b904000000              mov ecx, 0x4
 .. ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ..
0x767060bba112    4803c1                  add rax, rcx
0x767060bba115    4983c608                add r14, 0x8
0x767060bba119    498906                  mov [r14], rax
 .. xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; ..
0x767060bba11c    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba126    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi ..
0x767060bba129    b804000000              mov eax, 0x4
0x767060bba12e    4983c608                add r14, 0x8
0x767060bba132    498906                  mov [r14], rax
0x767060bba135    4d897e08                mov [r14+0x8], r15
0x767060bba139    4d8d7e08                lea r15, [r14+0x8]
0x767060bba13d    4981c608000000          add r14, 0x8
0x767060bba144    48b8662d8c6070760000    mov rax, 0x7670608c2d66
0x767060bba14e    4983c608                add r14, 0x8
0x767060bba152    498906                  mov [r14], rax
0x767060bba155    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba15f    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba162    b803000000              mov eax, 0x3
0x767060bba167    498b4ff8                mov rcx, [r15-0x8]
0x767060bba16b    4803c1                  add rax, rcx
0x767060bba16e    4983c608                add r14, 0x8
0x767060bba172    498906                  mov [r14], rax
0x767060bba175    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba17f    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba182    4d8d77f8                lea r14, [r15-0x8]
0x767060bba186    4d8b7e08                mov r15, [r14+0x8]
0x767060bba18a    4983ee08                sub r14, 0x8
 .. 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba18e    b803000000              mov eax, 0x3
 .. xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba193    b904000000              mov ecx, 0x4
 .. ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba198    4803c1                  add rax, rcx
0x767060bba19b    4983c608                add r14, 0x8
0x767060bba19f    498906                  mov [r14], rax
 ..  + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1a2    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba1ac    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1af    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba1b9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba1c3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1c6    b803000000              mov eax, 0x3
 ..  4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1cb    b904000000              mov ecx, 0x4
 ..  + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1d0    4803c1                  add rax, rcx
0x767060bba1d3    4983c608                add r14, 0x8
0x767060bba1d7    498906                  mov [r14], rax
 ..  p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1da    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba1e4    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba1e7    b808000000              mov eax, 0x8
0x767060bba1ec    4983c608                add r14, 0x8
0x767060bba1f0    498906                  mov [r14], rax
0x767060bba1f3    4d897e08                mov [r14+0x8], r15
0x767060bba1f7    4d8d7e08                lea r15, [r14+0x8]
0x767060bba1fb    4981c608000000          add r14, 0x8
0x767060bba202    48b8732b8c6070760000    mov rax, 0x7670608c2b73       < string : 'xhi1' >
0x767060bba20c    4983c608                add r14, 0x8
0x767060bba210    498906                  mov [r14], rax
0x767060bba213    4d897e08                mov [r14+0x8], r15
0x767060bba217    4d8d7e08                lea r15, [r14+0x8]
0x767060bba21b    4981c608000000          add r14, 0x8
0x767060bba222    498b47f8                mov rax, [r15-0x8]
0x767060bba226    4983c608                add r14, 0x8
0x767060bba22a    498906                  mov [r14], rax
0x767060bba22d    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba237    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba241    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bba244    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba24e    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba251    4d8d77f8                lea r14, [r15-0x8]
0x767060bba255    4d8b7e08                mov r15, [r14+0x8]
0x767060bba259    4983ee08                sub r14, 0x8
0x767060bba25d    b803000000              mov eax, 0x3
0x767060bba262    498b4ff8                mov rcx, [r15-0x8]
0x767060bba266    4803c1                  add rax, rcx
0x767060bba269    4983c608                add r14, 0x8
0x767060bba26d    498906                  mov [r14], rax
0x767060bba270    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba27a    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba27d    4d8d77f8                lea r14, [r15-0x8]
0x767060bba281    4d8b7e08                mov r15, [r14+0x8]
0x767060bba285    4983ee08                sub r14, 0x8
 ..  p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba289    48b8af308c6070760000    mov rax, 0x7670608c30af       < string : 'xhi2a =' >
0x767060bba293    4983c608                add r14, 0x8
0x767060bba297    498906                  mov [r14], rax
 ..  4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba29a    b808000000              mov eax, 0x8
0x767060bba29f    4983c608                add r14, 0x8
0x767060bba2a3    498906                  mov [r14], rax
0x767060bba2a6    4d897e08                mov [r14+0x8], r15
0x767060bba2aa    4d8d7e08                lea r15, [r14+0x8]
0x767060bba2ae    4981c608000000          add r14, 0x8
0x767060bba2b5    498b47f0                mov rax, [r15-0x10]
0x767060bba2b9    4983c608                add r14, 0x8
0x767060bba2bd    498906                  mov [r14], rax
0x767060bba2c0    4d897e08                mov [r14+0x8], r15
0x767060bba2c4    4d8d7e08                lea r15, [r14+0x8]
0x767060bba2c8    4981c608000000          add r14, 0x8
0x767060bba2cf    498b47f8                mov rax, [r15-0x8]
0x767060bba2d3    4983c608                add r14, 0x8
0x767060bba2d7    498906                  mov [r14], rax
0x767060bba2da    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba2e4    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba2ee    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bba2f1    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba2fb    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba2fe    4d8d77f8                lea r14, [r15-0x8]
0x767060bba302    4d8b7e08                mov r15, [r14+0x8]
0x767060bba306    4983ee08                sub r14, 0x8
0x767060bba30a    b803000000              mov eax, 0x3
0x767060bba30f    498b4ff8                mov rcx, [r15-0x8]
0x767060bba313    4803c1                  add rax, rcx
0x767060bba316    4983c608                add r14, 0x8
0x767060bba31a    498906                  mov [r14], rax
0x767060bba31d    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba327    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba32a    4d8d77f8                lea r14, [r15-0x8]
0x767060bba32e    4d8b7e08                mov r15, [r14+0x8]
0x767060bba332    4983ee10                sub r14, 0x10
0x767060bba336    4d8d77f8                lea r14, [r15-0x8]
0x767060bba33a    4d8b7e08                mov r15, [r14+0x8]
 .. xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  ..
0x767060bba33e    c3                      ret
Word_Disassemble : word - 'testc1' :: codeSize = 1219
Word : 0x000076705cfa3036 :: Compiled at : 0x0000767060bb9e7c
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 49.19 <::

tdbg = 1
tdbg2 = 2
tdbg3 = 3
tdbg4 = 4
tdbg5 = 5
tdbg6 = 6
last line
xhii = 7
xhi =  7 7 7
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
 =============================
C_Syntax.interpret <:> csl compiled word
SourceCode for C_Syntax.interpret :>
void interpret ( | atoken aword ) { testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1p (1 + 2 + 4) ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ; nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ; while ( 1 ) { atoken = token () ; if ( ! atoken ) break ; oPrintf ( "\n\tinterpret : token = %s", atoken ) ; if ( StringEqual ( atoken, "ihalt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ; break ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } label: done ; }
Source code file location of interpret : "namespaces/compiler/interpreter.csl" : 55.10 :: we are now at : namespaces/compiler/interpreter.csl : 90.14
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bba344 -- code size = 878 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.interpret : definition = 0x0000767060bba344 : disassembly at namespaces/compiler/interpreter.csl : 90.14 :
0x767060bba344    4d897e08                mov [r14+0x8], r15
0x767060bba348    4d8d7e08                lea r15, [r14+0x8]
0x767060bba34c    4981c618000000          add r14, 0x18
 void interpret ( | atoken aword )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ;  ..
0x767060bba353    49bb7c9ebb6070760000    mov r11, 0x767060bb9e7c
0x767060bba35d    49ffd3                  call r11                      < C_Syntax.testc1 : 0x0000767060bb9e7c >
 ..  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;       ..
0x767060bba360    b803000000              mov eax, 0x3
 .. estc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ;  ..
0x767060bba365    b9040000004803c149      mov r9, 0x49c1034800000004
0x767060bba36e    83c608                  add esi, 0x8
0x767060bba371    498906                  mov [r14], rax
 ..  )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;    ..
0x767060bba374    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba37e    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps  ..
0x767060bba381    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba38b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba395    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> ..
0x767060bba398    b803000000              mov eax, 0x3
 .. + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; n ..
0x767060bba39d    b904000000              mov ecx, 0x4
 .. 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; ..
0x767060bba3a2    4803c1                  add rax, rcx
0x767060bba3a5    4983c608                add r14, 0x8
0x767060bba3a9    498906                  mov [r14], rax
 .. 1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret ..
0x767060bba3ac    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba3b6    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while  ..
0x767060bba3b9    b808000000              mov eax, 0x8
0x767060bba3be    4983c608                add r14, 0x8
0x767060bba3c2    498906                  mov [r14], rax
0x767060bba3c5    4d897e08                mov [r14+0x8], r15
0x767060bba3c9    4d8d7e08                lea r15, [r14+0x8]
0x767060bba3cd    4981c608000000          add r14, 0x8
0x767060bba3d4    48b8732b8c6070760000    mov rax, 0x7670608c2b73       < string : 'xhi1' >
0x767060bba3de    4983c608                add r14, 0x8
0x767060bba3e2    498906                  mov [r14], rax
0x767060bba3e5    4d897e08                mov [r14+0x8], r15
0x767060bba3e9    4d8d7e08                lea r15, [r14+0x8]
0x767060bba3ed    4981c608000000          add r14, 0x8
0x767060bba3f4    498b47f8                mov rax, [r15-0x8]
0x767060bba3f8    4983c608                add r14, 0x8
0x767060bba3fc    498906                  mov [r14], rax
0x767060bba3ff    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba409    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba413    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bba416    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba420    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba423    4d8d77f8                lea r14, [r15-0x8]
0x767060bba427    4d8b7e08                mov r15, [r14+0x8]
0x767060bba42b    4983ee08                sub r14, 0x8
0x767060bba42f    b803000000              mov eax, 0x3
0x767060bba434    498b4ff8                mov rcx, [r15-0x8]
0x767060bba438    4803c1                  add rax, rcx
0x767060bba43b    4983c608                add r14, 0x8
0x767060bba43f    498906                  mov [r14], rax
0x767060bba442    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba44c    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba44f    4d8d77f8                lea r14, [r15-0x8]
0x767060bba453    4d8b7e08                mov r15, [r14+0x8]
0x767060bba457    4983ee08                sub r14, 0x8
 ..  2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {     ..
0x767060bba45b    48b850338c6070760000    mov rax, 0x7670608c3350       < string : 'xhi2a =' >
0x767060bba465    4983c608                add r14, 0x8
0x767060bba469    498906                  mov [r14], rax
 ..  ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            ato ..
0x767060bba46c    b808000000              mov eax, 0x8
0x767060bba471    4983c608                add r14, 0x8
0x767060bba475    498906                  mov [r14], rax
0x767060bba478    4d897e08                mov [r14+0x8], r15
0x767060bba47c    4d8d7e08                lea r15, [r14+0x8]
0x767060bba480    4981c608000000          add r14, 0x8
0x767060bba487    498b47f0                mov rax, [r15-0x10]
0x767060bba48b    4983c608                add r14, 0x8
0x767060bba48f    498906                  mov [r14], rax
0x767060bba492    4d897e08                mov [r14+0x8], r15
0x767060bba496    4d8d7e08                lea r15, [r14+0x8]
0x767060bba49a    4981c608000000          add r14, 0x8
0x767060bba4a1    498b47f8                mov rax, [r15-0x8]
0x767060bba4a5    4983c608                add r14, 0x8
0x767060bba4a9    498906                  mov [r14], rax
0x767060bba4ac    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba4b6    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba4c0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bba4c3    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba4cd    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba4d0    4d8d77f8                lea r14, [r15-0x8]
0x767060bba4d4    4d8b7e08                mov r15, [r14+0x8]
0x767060bba4d8    4983ee08                sub r14, 0x8
0x767060bba4dc    b803000000              mov eax, 0x3
0x767060bba4e1    498b4ff8                mov rcx, [r15-0x8]
0x767060bba4e5    4803c1                  add rax, rcx
0x767060bba4e8    4983c608                add r14, 0x8
0x767060bba4ec    498906                  mov [r14], rax
0x767060bba4ef    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bba4f9    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
0x767060bba4fc    4d8d77f8                lea r14, [r15-0x8]
0x767060bba500    4d8b7e08                mov r15, [r14+0x8]
0x767060bba504    4983ee10                sub r14, 0x10
0x767060bba508    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba512    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba51c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. hi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;     ..
0x767060bba51f    49ba10df12ca1c640000    mov r10, 0x641cca12df10
0x767060bba529    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba533    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! at ..
0x767060bba536    48b874338c6070760000    mov rax, 0x7670608c3374       < string : 'interpret :> ' >
0x767060bba540    4983c608                add r14, 0x8
0x767060bba544    498906                  mov [r14], rax
 .. i2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ..
0x767060bba547    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba551    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;       ..
0x767060bba554    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bba55e    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba568    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. terpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tin ..
0x767060bba56b    b801000000              mov r8d, 0x1
0x767060bba570    4883f800                cmp rax, 0x0
0x767060bba574    0f842f010000            jz 0x767060bba6a9             < C_Syntax.interpret+869 >
0x767060bba57a    49ba50e512ca1c640000    mov r10, 0x641cca12e550
0x767060bba584    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba58e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoke ..
0x767060bba591    498d4708                lea rax, [r15+0x8]
0x767060bba595    488bc8                  mov rcx, rax
0x767060bba598    498b06                  mov rax, [r14]
0x767060bba59b    4983ee08                sub r14, 0x8
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoke ..
0x767060bba59f    488901                  mov [rcx], rax
 ..   atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( St ..
0x767060bba5a2    498b4708                mov rax, [r15+0x8]
 ..     atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if (  ..
0x767060bba5a6    4883f800                cmp rax, 0x0
0x767060bba5aa    0f8505000000            jnz 0x767060bba5b5            < C_Syntax.interpret+625 >
 .. = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ..
0x767060bba5b0    e9f4000000              jmp 0x767060bba6a9            < C_Syntax.interpret+869 >
 .. ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )      ..
0x767060bba5b5    48b8a8cb666070760000    mov rax, 0x76706066cba8
0x767060bba5bf    488bf8                  mov rdi, rax
 .. rintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPr ..
0x767060bba5c2    498b4708                mov rax, [r15+0x8]
0x767060bba5c6    488bf0                  mov rsi, rax
0x767060bba5c9    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bba5d3    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba5dd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting  ..
0x767060bba5e0    498b4708                mov rax, [r15+0x8]
 .. n () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( ato ..
0x767060bba5e4    4983c608                add r14, 0x8
0x767060bba5e8    498906                  mov [r14], rax
 ..            if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", at ..
0x767060bba5eb    48b819348c6070760000    mov rax, 0x7670608c3419       < string : 'ihalt' >
0x767060bba5f5    4983c608                add r14, 0x8
0x767060bba5f9    498906                  mov [r14], rax
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: inte ..
0x767060bba5fc    49bbcab4ba6070760000    mov r11, 0x767060bab4ca
0x767060bba606    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x0000767060bab4ca >
 ..  if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;   ..
0x767060bba609    498b06                  mov rax, [r14]
0x767060bba60c    4983ee08                sub r14, 0x8
0x767060bba610    4883f800                cmp rax, 0x0
0x767060bba614    0f8435000000            jz 0x767060bba64f             < C_Syntax.interpret+779 >
 ..              {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;              break ;                         ..
0x767060bba61a    48b8afcc666070760000    mov rax, 0x76706066ccaf
0x767060bba624    488bf8                  mov rdi, rax
 .. token = %s :: interpret exiting ...", atoken ) ;              break ;                              }                 else         {        ..
0x767060bba627    498b4708                mov rax, [r15+0x8]
0x767060bba62b    488bf0                  mov rsi, rax
0x767060bba62e    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bba638    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba642    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bba645    e95f000000              jmp 0x767060bba6a9            < C_Syntax.interpret+869 >
0x767060bba64a    e955000000              jmp 0x767060bba6a4            < C_Syntax.interpret+864 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  ..
0x767060bba64f    498b4708                mov rax, [r15+0x8]
0x767060bba653    4983c608                add r14, 0x8
0x767060bba657    498906                  mov [r14], rax
0x767060bba65a    49baf0ed12ca1c640000    mov r10, 0x641cca12edf0
0x767060bba664    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba66e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  ..
0x767060bba671    498d4710                lea rax, [r15+0x10]
0x767060bba675    488bc8                  mov rcx, rax
0x767060bba678    498b06                  mov rax, [r14]
0x767060bba67b    4983ee08                sub r14, 0x8
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  ..
0x767060bba67f    488901                  mov [rcx], rax
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  ..
0x767060bba682    498b4710                mov rax, [r15+0x10]
0x767060bba686    4983c608                add r14, 0x8
0x767060bba68a    498906                  mov [r14], rax
0x767060bba68d    49bae0ea12ca1c640000    mov r10, 0x641cca12eae0
0x767060bba697    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bba6a1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..            doWord ( aword ) ;         }     }     label: done ; }  ..
0x767060bba6a4    e9c2feffff              jmp 0x767060bba56b            < C_Syntax.interpret+551 >
0x767060bba6a9    4d8d77f8                lea r14, [r15-0x8]
0x767060bba6ad    4d8b7e08                mov r15, [r14+0x8]
 .. ) ;         }     }     label: done ; }  ..
0x767060bba6b1    c3                      ret
Word_Disassemble : word - 'interpret' :: codeSize = 878
Word : 0x000076705cfb0036 :: Compiled at : 0x0000767060bba344
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 90.14 <::

tdbg = 1
tdbg2 = 2
tdbg3 = 3
tdbg4 = 4
tdbg5 = 5
tdbg6 = 6
last line
xhii = 7
xhi =  7 7 7
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :>

        interpret : token = c_syntaxOff
        interpret : token = using
Using Namespaces :> libc void C Root Dlsym int Defines Interpreter System Shell String Compiler User Combinators Class Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

        interpret : token = //
        interpret : token = User
        interpret : token = :
        interpret : token = 1
        interpret : token = 2
        interpret : token = +
        interpret : token = p
        interpret : token = ;
        interpret : token = hi1 3
        interpret : token = :
        interpret : token = hi1
        interpret : token = hi1
        interpret : token = ;
        interpret : token = :
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = ;
        interpret : token = nl

        interpret : token = heey1 3 3 3 3 3 3
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... hi
including namespaces/test/stack.csl at namespaces/test/initTest.csl : 86.41 ...

DataStack at : namespaces/test/stack.csl : 2.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.45 :
DataStack depth =   9 : Dsp (R14) = Top = 0x000076705fbb2b00, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b00 > = 0x0000000000000000
  DataStack   [  -1 ] < 0x000076705fbb2af8 > = 0x0000000000000001
  DataStack   [  -2 ] < 0x000076705fbb2af0 > = 0x0000000000000002
  DataStack   [  -3 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -4 ] < 0x000076705fbb2ae0 > = 0x0000000000000004
  DataStack   [  -5 ] < 0x000076705fbb2ad8 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.53 :
DataStack depth =  10 : Dsp (R14) = Top = 0x000076705fbb2b08, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b08 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x000076705fbb2b00 > = 0x0000000000000000
  DataStack   [  -2 ] < 0x000076705fbb2af8 > = 0x0000000000000001
  DataStack   [  -3 ] < 0x000076705fbb2af0 > = 0x0000000000000002
  DataStack   [  -4 ] < 0x000076705fbb2ae8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x000076705fbb2ae0 > = 0x0000000000000004
  DataStack   [  -6 ] < 0x000076705fbb2ad8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
3
DataStack at : namespaces/test/stack.csl : 2.81 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 1
DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   4 : Dsp (R14) = Top = 0x000076705fbb2ad8, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad8 > = 0x0000000000000001
  DataStack   [  -1 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

testpick : above line should read 1

including namespaces/compiler/c_syntax.csl at namespaces/test/initTest.csl : 86.41 ...
 namespaces/compiler/c_syntax.csl 7.9
hello 7

 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :>
define xtc( a ) a @ ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 25.8 :: we are now at : namespaces/compiler/c_syntax.csl : 26.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bba885 -- code size = 52 bytes
TypeSignature :
 -----------------------------
Word :: Defines.xtc : definition = 0x0000767060bba885 : disassembly at namespaces/compiler/c_syntax.csl : 26.8 :
0x767060bba885    4d897e08                mov [r14+0x8], r15
0x767060bba889    4d8d7e08                lea r15, [r14+0x8]
0x767060bba88d    4981c608000000          add r14, 0x8
 ..                       define xtc( a ) a @ ps ..
0x767060bba894    498b47f8                mov rax, [r15-0x8]
0x767060bba898    4983c608                add r14, 0x8
0x767060bba89c    498906                  mov [r14], rax
0x767060bba89f    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba8a9    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba8ac    4d8d77f8                lea r14, [r15-0x8]
0x767060bba8b0    4d8b7e08                mov r15, [r14+0x8]
0x767060bba8b4    4983ee08                sub r14, 0x8
 ..                   define xtc( a ) a @ ps ..
0x767060bba8b8    c3                      ret
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x000076705cfbd0a6 :: Compiled at : 0x0000767060bba885
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 26.8 <::

 xtc : hi
 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :>
define xtc( a ) a ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 31.8 :: we are now at : namespaces/compiler/c_syntax.csl : 32.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bba8be -- code size = 52 bytes
TypeSignature :
 -----------------------------
Word :: Defines.xtc : definition = 0x0000767060bba8be : disassembly at namespaces/compiler/c_syntax.csl : 32.8 :
0x767060bba8be    4d897e08                mov [r14+0x8], r15
0x767060bba8c2    4d8d7e08                lea r15, [r14+0x8]
0x767060bba8c6    4981c608000000          add r14, 0x8
 ..                       define xtc( a ) a ps ..
0x767060bba8cd    498b47f8                mov rax, [r15-0x8]
0x767060bba8d1    4983c608                add r14, 0x8
0x767060bba8d5    498906                  mov [r14], rax
0x767060bba8d8    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bba8e2    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bba8e5    4d8d77f8                lea r14, [r15-0x8]
0x767060bba8e9    4d8b7e08                mov r15, [r14+0x8]
0x767060bba8ed    4983ee08                sub r14, 0x8
 ..                     define xtc( a ) a ps ..
0x767060bba8f1    c3                      ret
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x000076705cfbd0a6 :: Compiled at : 0x0000767060bba8be
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 32.8 <::

 xtc : hi CObj size = 104
DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

Dump at : namespaces/compiler/c_syntax.csl : 52.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a9593 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

        chey.hi = 1234 255
Dump at : namespaces/compiler/c_syntax.csl : 58.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a9593 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

        chey.heey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 61.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a9593 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

Dump at : namespaces/compiler/c_syntax.csl : 69.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a9593 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

        chey.hey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 76.25 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 16 00 00 00 00 00  ........ ........
0x00007670609a9593 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

CObj.size = 104

chey = 7670609a9573

chey.hey = 123456789abcdef

&chey.hey = 7670609a959b 0x0123456789abcdef 0x00007670609a959b
        hoot
Dump at : namespaces/compiler/c_syntax.csl : 93.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well....
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot
0x00007670609a9593 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

Dump at : namespaces/compiler/c_syntax.csl : 96.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well....
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot
0x00007670609a9593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

Dump at : namespaces/compiler/c_syntax.csl : 98.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  68 6f 6f 74 00 00 00 00  ........ hoot....
0x00007670609a9583 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot
0x00007670609a9593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

Dump at : namespaces/compiler/c_syntax.csl : 100.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  6f 6b 21 20 64 6f 6e 27  ........ ok! don'
0x00007670609a9583 :  74 20 68 6f 6f 74 00 00  00 00 0a 09 68 6f 6f 74  t hoot.. ....hoot
0x00007670609a9593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

Dump at : namespaces/compiler/c_syntax.csl : 102.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do
0x00007670609a9583 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t
0x00007670609a9593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

        don't

        hoot

Dump at : namespaces/compiler/c_syntax.csl : 106.24 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do
0x00007670609a9583 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t
0x00007670609a9593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

 =============================
C_Syntax.chi <:> csl compiled word, prefix
SourceCode for C_Syntax.chi :>
void chi ( CObj * chey0 | a b c d ) { c = 1 + 2 ; b = c + 2 ; a = b + c ; nl p ( c ) ; c 3 "c should be 3" assert p ( b ) ; b 5 "b should be 5" assert p ( a ) ; a 8 "a should be 8" assert dump ( chey0, CObj.size ) ; d = chey0->hey ; hex p ( d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ; oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; d = chey0.hey ; oPrintf ( "\n%lx\n", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; _assert ( d #x0123456789abcdef ) ; oPrintf ( "\n%x\n", CObj.chey0.hey ) ; sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ; dump ( chey0, CObj.size ) ; }
Source code file location of chi : "namespaces/compiler/c_syntax.csl" : 114.4 :: we are now at : namespaces/compiler/c_syntax.csl : 141.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbae53 -- code size = 1163 bytes
TypeSignature : Object
 -----------------------------
Word :: C_Syntax.chi : definition = 0x0000767060bbae53 : disassembly at namespaces/compiler/c_syntax.csl : 141.8 :
0x767060bbae53    4d897e08                mov [r14+0x8], r15
0x767060bbae57    4d8d7e08                lea r15, [r14+0x8]
0x767060bbae5b    4981c628000000          add r14, 0x28
 ..  ( CObj * chey0 | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; ..
0x767060bbae62    b803000000              mov eax, 0x3
0x767060bbae67    49894718                mov [r15+0x18], rax
 .. | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should b ..
0x767060bbae6b    498b4718                mov rax, [r15+0x18]
 .. b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" ..
0x767060bbae6f    b902000000              mov ecx, 0x2
 .. a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be  ..
0x767060bbae74    4803c1                  add rax, rcx
0x767060bbae77    49894710                mov [r15+0x10], rax
 ..   c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ..
0x767060bbae7b    498b4710                mov rax, [r15+0x10]
 .. = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ..
0x767060bbae7f    498b4f18                mov rcx, [r15+0x18]
 .. c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( ..
0x767060bbae83    4803c1                  add rax, rcx
0x767060bbae86    49894708                mov [r15+0x8], rax
0x767060bbae8a    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bbae94    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbae9e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should  ..
0x767060bbaea1    498b4718                mov rax, [r15+0x18]
0x767060bbaea5    4983c608                add r14, 0x8
0x767060bbaea9    498906                  mov [r14], rax
0x767060bbaeac    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bbaeb6    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..      a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8"  ..
0x767060bbaeb9    498b4718                mov rax, [r15+0x18]
0x767060bbaebd    4983c608                add r14, 0x8
0x767060bbaec1    498906                  mov [r14], rax
 ..    a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" as ..
0x767060bbaec4    b803000000              mov eax, 0x3
0x767060bbaec9    4983c608                add r14, 0x8
0x767060bbaecd    498906                  mov [r14], rax
 ..  a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" asse ..
0x767060bbaed0    48b88d418c6070760000    mov rax, 0x7670608c418d       < string : 'c should be 3' >
0x767060bbaeda    4983c608                add r14, 0x8
0x767060bbaede    498906                  mov [r14], rax
0x767060bbaee1    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bbaeeb    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size  ..
0x767060bbaeee    498b4710                mov rax, [r15+0x10]
0x767060bbaef2    4983c608                add r14, 0x8
0x767060bbaef6    498906                  mov [r14], rax
0x767060bbaef9    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bbaf03    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;    ..
0x767060bbaf06    498b4710                mov rax, [r15+0x10]
0x767060bbaf0a    4983c608                add r14, 0x8
0x767060bbaf0e    498906                  mov [r14], rax
 .. "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      ..
0x767060bbaf11    b805000000              mov eax, 0x5
0x767060bbaf16    4983c608                add r14, 0x8
0x767060bbaf1a    498906                  mov [r14], rax
 ..  should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d ..
0x767060bbaf1d    48b8bd418c6070760000    mov rax, 0x7670608c41bd       < string : 'b should be 5' >
0x767060bbaf27    4983c608                add r14, 0x8
0x767060bbaf2b    498906                  mov [r14], rax
0x767060bbaf2e    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bbaf38    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 .. ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d  ..
0x767060bbaf3b    498b4708                mov rax, [r15+0x8]
0x767060bbaf3f    4983c608                add r14, 0x8
0x767060bbaf43    498906                  mov [r14], rax
0x767060bbaf46    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bbaf50    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    ..
0x767060bbaf53    498b4708                mov rax, [r15+0x8]
0x767060bbaf57    4983c608                add r14, 0x8
0x767060bbaf5b    498906                  mov [r14], rax
 .. "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    o ..
0x767060bbaf5e    b808000000              mov eax, 0x8
0x767060bbaf63    4983c608                add r14, 0x8
0x767060bbaf67    498906                  mov [r14], rax
 ..  should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPr ..
0x767060bbaf6a    48b8ed418c6070760000    mov rax, 0x7670608c41ed       < string : 'a should be 8' >
0x767060bbaf74    4983c608                add r14, 0x8
0x767060bbaf78    498906                  mov [r14], rax
0x767060bbaf7b    49bb42abba6070760000    mov r11, 0x767060baab42
0x767060bbaf85    49ffd3                  call r11                      < C._assert1 : 0x0000767060baab42 >
 ..  a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d )  ..
0x767060bbaf88    498b47f8                mov rax, [r15-0x8]
0x767060bbaf8c    4881c000000000          add rax, 0x0
0x767060bbaf93    4983c608                add r14, 0x8
0x767060bbaf97    498906                  mov [r14], rax
 .. ld be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprint ..
0x767060bbaf9a    48b80eeffb5c70760000    mov rax, 0x76705cfbef0e       < string : 'h' >
0x767060bbafa4    488b00                  mov rax, [rax]
0x767060bbafa7    4983c608                add r14, 0x8
0x767060bbafab    498906                  mov [r14], rax
 .. ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n ..
0x767060bbafae    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bbafb8    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbafc2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars,  ..
0x767060bbafc5    498b47f8                mov rax, [r15-0x8]
 ..  chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\t ..
0x767060bbafc9    4881c028000000          add rax, 0x28
0x767060bbafd0    488b00                  mov rax, [rax]
0x767060bbafd3    49894720                mov [r15+0x20], rax
 .. bj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx" ..
0x767060bbafd7    49ba600213ca1c640000    mov r10, 0x641cca130260
0x767060bbafe1    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbafeb    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;  ..
0x767060bbafee    498b4720                mov rax, [r15+0x20]
0x767060bbaff2    4983c608                add r14, 0x8
0x767060bbaff6    498906                  mov [r14], rax
 .. ize ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d  ..
0x767060bbaff9    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bbb003    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. >hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n ch ..
0x767060bbb006    48b8fe7c676070760000    mov rax, 0x767060677cfe
0x767060bbb010    488bf8                  mov rdi, rax
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;  ..
0x767060bbb013    498b4720                mov rax, [r15+0x20]
0x767060bbb017    488bf0                  mov rsi, rax
 .. d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrint ..
0x767060bbb01a    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb024    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb02e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0. ..
0x767060bbb031    498b47f8                mov rax, [r15-0x8]
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2 ..
0x767060bbb035    4881c008000000          add rax, 0x8
0x767060bbb03c    488bf8                  mov rdi, rax
 .. n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t ..
0x767060bbb03f    48b80f7d676070760000    mov rax, 0x767060677d0f
0x767060bbb049    488bf0                  mov rsi, rax
 .. tf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", & ..
0x767060bbb04c    498b4720                mov rax, [r15+0x20]
0x767060bbb050    488bd0                  mov rdx, rax
0x767060bbb053    b803000000              mov eax, 0x3
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprint ..
0x767060bbb058    49ba40de266170760000    mov r10, 0x76706126de40
0x767060bbb062    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb06c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;  ..
0x767060bbb06f    48b81c7d676070760000    mov rax, 0x767060677d1c
0x767060bbb079    488bf8                  mov rdi, rax
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey ..
0x767060bbb07c    498b4720                mov rax, [r15+0x20]
0x767060bbb080    488bf0                  mov rsi, rax
 .. y0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey ..
0x767060bbb083    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb08d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb097    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &COb ..
0x767060bbb09a    498b47f8                mov rax, [r15-0x8]
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey ..
0x767060bbb09e    4881c038000000          add rax, 0x38
0x767060bbb0a5    488bf8                  mov rdi, rax
 .. ", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars  ..
0x767060bbb0a8    48b82d7d676070760000    mov rax, 0x767060677d2d
0x767060bbb0b2    488bf0                  mov rsi, rax
 .. .chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.c ..
0x767060bbb0b5    498b47f8                mov rax, [r15-0x8]
 .. 2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2  ..
0x767060bbb0b9    4881c028000000          add rax, 0x28
0x767060bbb0c0    4983c608                add r14, 0x8
0x767060bbb0c4    498906                  mov [r14], rax
0x767060bbb0c7    488bd0                  mov rdx, rax
0x767060bbb0ca    b803000000              mov eax, 0x3
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars =  ..
0x767060bbb0cf    49ba40de266170760000    mov r10, 0x76706126de40
0x767060bbb0d9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb0e3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. x", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.c ..
0x767060bbb0e6    48b83e7d676070760000    mov rax, 0x767060677d3e
0x767060bbb0f0    488bf8                  mov rdi, rax
 .. intf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi ..
0x767060bbb0f3    498b47f8                mov rax, [r15-0x8]
 ..  "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = ..
0x767060bbb0f7    4881c008000000          add rax, 0x8
0x767060bbb0fe    4983c608                add r14, 0x8
0x767060bbb102    498906                  mov [r14], rax
0x767060bbb105    488bf0                  mov rsi, rax
 .. y hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CO ..
0x767060bbb108    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb112    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb11c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. , &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = c ..
0x767060bbb11f    48b8527d676070760000    mov rax, 0x767060677d52
0x767060bbb129    488bf8                  mov rdi, rax
 .. ntf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\ ..
0x767060bbb12c    498b47f8                mov rax, [r15-0x8]
 .. "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d  ..
0x767060bbb130    4881c038000000          add rax, 0x38
0x767060bbb137    4983c608                add r14, 0x8
0x767060bbb13b    498906                  mov [r14], rax
0x767060bbb13e    488bf0                  mov rsi, rax
 .. rs = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ; ..
0x767060bbb141    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb14b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb155    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi ..
0x767060bbb158    48b8677d676070760000    mov rax, 0x767060677d67
0x767060bbb162    488bf8                  mov rdi, rax
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;   ..
0x767060bbb165    498b4720                mov rax, [r15+0x20]
0x767060bbb169    488bf0                  mov rsi, rax
 .. 2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ..
0x767060bbb16c    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb176    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb180    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d ..
0x767060bbb183    498b47f8                mov rax, [r15-0x8]
 .. chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x012 ..
0x767060bbb187    4881c028000000          add rax, 0x28
0x767060bbb18e    488b00                  mov rax, [rax]
0x767060bbb191    49894720                mov [r15+0x20], rax
 .. ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;    ..
0x767060bbb195    48b8487f676070760000    mov rax, 0x767060677f48
0x767060bbb19f    488bf8                  mov rdi, rax
 ..  chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf  ..
0x767060bbb1a2    498b4720                mov rax, [r15+0x20]
0x767060bbb1a6    488bf0                  mov rsi, rax
 .. %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abc ..
0x767060bbb1a9    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb1b3    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb1bd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. intf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.che ..
0x767060bbb1c0    48b84e7f676070760000    mov rax, 0x767060677f4e
0x767060bbb1ca    488bf8                  mov rdi, rax
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ..
0x767060bbb1cd    498b4720                mov rax, [r15+0x20]
0x767060bbb1d1    488bf0                  mov rsi, rax
 ..  ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n" ..
0x767060bbb1d4    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb1de    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb1e8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ..
0x767060bbb1eb    498b4720                mov rax, [r15+0x20]
0x767060bbb1ef    4983c608                add r14, 0x8
0x767060bbb1f3    498906                  mov [r14], rax
 .. i : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ] ..
0x767060bbb1f6    48b8efcdab8967452301    mov rax, 0x123456789abcdef
0x767060bbb200    4983c608                add r14, 0x8
0x767060bbb204    498906                  mov [r14], rax
0x767060bbb207    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bbb211    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
 .. #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, C ..
0x767060bbb214    48b85f7f676070760000    mov rax, 0x767060677f5f
0x767060bbb21e    488bf8                  mov rdi, rax
 .. def ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  } ..
0x767060bbb221    498b47f8                mov rax, [r15-0x8]
 .. ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb225    4881c028000000          add rax, 0x28
0x767060bbb22c    4983c608                add r14, 0x8
0x767060bbb230    498906                  mov [r14], rax
0x767060bbb233    488b00                  mov rax, [rax]
0x767060bbb236    488bf0                  mov rsi, rax
 .. ssert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump  ..
0x767060bbb239    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb243    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb24d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb250    498b47f8                mov rax, [r15-0x8]
 .. bj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb254    4881c020000000          add rax, 0x20
0x767060bbb25b    488bf8                  mov rdi, rax
 ..  ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb25e    48b8647f676070760000    mov rax, 0x767060677f64       < string : '%s' >
0x767060bbb268    488bf0                  mov rsi, rax
 ..  sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb26b    48b8677f676070760000    mov rax, 0x767060677f67       < string : 'hoot' >
0x767060bbb275    488bd0                  mov rdx, rax
0x767060bbb278    b803000000              mov eax, 0x3
 .. tf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb27d    49ba40de266170760000    mov r10, 0x76706126de40
0x767060bbb287    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb291    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. s [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb294    498b47f8                mov rax, [r15-0x8]
0x767060bbb298    4881c000000000          add rax, 0x0
0x767060bbb29f    4983c608                add r14, 0x8
0x767060bbb2a3    498906                  mov [r14], rax
 .. s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb2a6    48b80eeffb5c70760000    mov rax, 0x76705cfbef0e       < string : 'h' >
0x767060bbb2b0    488b00                  mov rax, [rax]
0x767060bbb2b3    4983c608                add r14, 0x8
0x767060bbb2b7    498906                  mov [r14], rax
 .. y0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb2ba    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bbb2c4    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb2ce    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbb2d1    4d8d77f8                lea r14, [r15-0x8]
0x767060bbb2d5    4d8b7e08                mov r15, [r14+0x8]
0x767060bbb2d9    4983ee08                sub r14, 0x8
 ..  ) ;     dump ( chey0, CObj.size ) ;  }  ..
0x767060bbb2dd    c3                      ret
Word_Disassemble : word - 'chi' :: codeSize = 1163
Word : 0x000076705cfc2d26 :: Compiled at : 0x0000767060bbae53
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 141.8 <::

 3 c should be 3  : ok

 5 b should be 5  : ok

 8 a should be 8  : ok


Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do
0x00007670609a9583 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t
0x00007670609a9593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
0x00007670609a95b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a95c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........
 0x0123456789abcdef
 chi : d = 123456789abcdef

 chi : d = 123456789abcdef

 chey0.chars =
                hey = 123456789abcdef

 chey0.chars2 =
                hey hey = 7670609a959b

 chi : d = 123456789abcdef

123456789abcdef

 chi : d = 123456789abcdef

89abcdef

Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x00007670609a9573 : Number = 104 :: (little endian dump)
0x00007670609a9573 :  d2 04 00 00 00 00 00 00  0a 09 09 68 65 79 20 3d  ........ ...hey =
0x00007670609a9583 :  20 31 32 33 34 35 36 37  38 39 61 62 63 64 65 66   1234567 89abcdef
0x00007670609a9593 :  68 6f 6f 74 00 00 00 00  ef cd ab 89 67 45 23 01  hoot.... ....gE#.
0x00007670609a95a3 :  ef cd ab 89 67 45 23 01  0a 09 09 68 65 79 20 68  ....gE#. ...hey h
0x00007670609a95b3 :  65 79 20 3d 20 37 36 37  30 36 30 39 61 39 35 39  ey = 767 0609a959
0x00007670609a95c3 :  62 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  b....... ....gE#.
0x00007670609a95d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........

tdbg = 1
tdbg2 = 2
tdbg3 = 3
tdbg4 = 4
tdbg5 = 5
tdbg6 = 6
last line
xhii = 7
xhi =  7 7 7
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :>

        interpret : token = ;
        interpret : token = //
        interpret : token = sp0
        interpret : token = #
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = while
        interpret : token = //
        interpret : token = //
        interpret : token = }
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = while
        interpret : token = //
        interpret : token = }
        interpret : token = #
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret2 <:> csl compiled word
SourceCode for C_Syntax.interpret2 :>
void interpret2 ( | atoken aword ) { testc1 () ; nl tab () ; ps ( "interpret2 :> " ) ; nl while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i2halt" ) ) { oPrintf ( "\n\tinterpret2 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } }
Source code file location of interpret2 : "namespaces/compiler/c_syntax.csl" : 149.11 :: we are now at : namespaces/compiler/c_syntax.csl : 205.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb2e3 -- code size = 428 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.interpret2 : definition = 0x0000767060bbb2e3 : disassembly at namespaces/compiler/c_syntax.csl : 205.15 :
0x767060bbb2e3    4d897e08                mov [r14+0x8], r15
0x767060bbb2e7    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb2eb    4981c618000000          add r14, 0x18
void interpret2 ( | atoken aword )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = to ..
0x767060bbb2f2    49bb7c9ebb6070760000    mov r11, 0x767060bb9e7c
0x767060bbb2fc    49ffd3                  call r11                      < C_Syntax.testc1 : 0x0000767060bb9e7c >
0x767060bbb2ff    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bbb309    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb313    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbb316    49ba10df12ca1c640000    mov r10, 0x641cca12df10
0x767060bbb320    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb32a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\ ..
0x767060bbb32d    48b871498c6070760000    mov rax, 0x7670608c4971       < string : 'interpret2 :> ' >
0x767060bbb337    4983c608                add r14, 0x8
0x767060bbb33b    498906                  mov [r14], rax
 .. d )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( ..
0x767060bbb33e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbb348    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = ..
0x767060bbb34b    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bbb355    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb35f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken )  ..
0x767060bbb362    b801000000              mov eax, 0x1
0x767060bbb367    4883f800                cmp rax, 0x0
0x767060bbb36b    0f8415010000            jz 0x767060bbb486             < C_Syntax.interpret2+419 >
0x767060bbb371    49ba50e512ca1c640000    mov r10, 0x641cca12e550
0x767060bbb37b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb385    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( Strin ..
0x767060bbb388    498d4708                lea rax, [r15+0x8]
0x767060bbb38c    488bc8                  mov rcx, rax
0x767060bbb38f    498b06                  mov rax, [r14]
0x767060bbb392    4983ee08                sub r14, 0x8
0x767060bbb396    488901                  mov [rcx], rax
 .. token = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )    ..
0x767060bbb399    48b8681e686070760000    mov rax, 0x767060681e68
0x767060bbb3a3    488bf8                  mov rdi, rax
 .. intf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf (  ..
0x767060bbb3a6    498b4708                mov rax, [r15+0x8]
0x767060bbb3aa    488bf0                  mov rsi, rax
0x767060bbb3ad    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb3b7    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb3c1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                ..
0x767060bbb3c4    498b4708                mov rax, [r15+0x8]
0x767060bbb3c8    4983c608                add r14, 0x8
0x767060bbb3cc    498906                  mov [r14], rax
 ..            if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                        ..
0x767060bbb3cf    48b81b4a8c6070760000    mov rax, 0x7670608c4a1b       < string : 'i2halt' >
0x767060bbb3d9    4983c608                add r14, 0x8
0x767060bbb3dd    498906                  mov [r14], rax
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;  ..
0x767060bbb3e0    49bbcab4ba6070760000    mov r11, 0x767060bab4ca
0x767060bbb3ea    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x0000767060bab4ca >
 .. if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                   ..
0x767060bbb3ed    498b06                  mov rax, [r14]
0x767060bbb3f0    4983ee08                sub r14, 0x8
0x767060bbb3f4    4883f800                cmp rax, 0x0
0x767060bbb3f8    0f842e000000            jz 0x767060bbb42c             < C_Syntax.interpret2+329 >
 ..  ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                    return ;         }         else   ..
0x767060bbb3fe    48b8711f686070760000    mov rax, 0x767060681f71
0x767060bbb408    488bf8                  mov rdi, rax
0x767060bbb40b    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb415    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb41f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbb422    e95f000000              jmp 0x767060bbb486            < C_Syntax.interpret2+419 >
0x767060bbb427    e955000000              jmp 0x767060bbb481            < C_Syntax.interpret2+414 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  ..
0x767060bbb42c    498b4708                mov rax, [r15+0x8]
0x767060bbb430    4983c608                add r14, 0x8
0x767060bbb434    498906                  mov [r14], rax
0x767060bbb437    49baf0ed12ca1c640000    mov r10, 0x641cca12edf0
0x767060bbb441    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb44b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  ..
0x767060bbb44e    498d4710                lea rax, [r15+0x10]
0x767060bbb452    488bc8                  mov rcx, rax
0x767060bbb455    498b06                  mov rax, [r14]
0x767060bbb458    4983ee08                sub r14, 0x8
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  ..
0x767060bbb45c    488901                  mov [rcx], rax
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }   }  ..
0x767060bbb45f    498b4710                mov rax, [r15+0x10]
0x767060bbb463    4983c608                add r14, 0x8
0x767060bbb467    498906                  mov [r14], rax
0x767060bbb46a    49bae0ea12ca1c640000    mov r10, 0x641cca12eae0
0x767060bbb474    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb47e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..            doWord ( aword ) ;         }     }   }  ..
0x767060bbb481    e9dcfeffff              jmp 0x767060bbb362            < C_Syntax.interpret2+127 >
0x767060bbb486    4d8d77f8                lea r14, [r15-0x8]
0x767060bbb48a    4d8b7e08                mov r15, [r14+0x8]
 ..  doWord ( aword ) ;         }     }   }  ..
0x767060bbb48e    c3                      ret
Word_Disassemble : word - 'interpret2' :: codeSize = 428
Word : 0x000076705cfd19d6 :: Compiled at : 0x0000767060bbb2e3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 205.15 <::

        interpret : token = pwi
 =============================
C_Syntax.interpret3 <:> csl compiled word
SourceCode for C_Syntax.interpret3 :>
void interpret3 ( | atoken aword ) { testc1 () ; nl () ; tab () ; ps ( "interpret3 :> " ) ; nl () ; while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i3halt" ) ) { oPrintf ( "\n\tinterpret3 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } }
Source code file location of interpret3 : "namespaces/compiler/c_syntax.csl" : 176.11 :: we are now at : namespaces/compiler/c_syntax.csl : 206.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb494 -- code size = 428 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.interpret3 : definition = 0x0000767060bbb494 : disassembly at namespaces/compiler/c_syntax.csl : 206.15 :
0x767060bbb494    4d897e08                mov [r14+0x8], r15
0x767060bbb498    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb49c    4981c618000000          add r14, 0x18
void interpret3 ( | atoken aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {         ..
0x767060bbb4a3    49bb7c9ebb6070760000    mov r11, 0x767060bb9e7c
0x767060bbb4ad    49ffd3                  call r11                      < C_Syntax.testc1 : 0x0000767060bb9e7c >
0x767060bbb4b0    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bbb4ba    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb4c4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ; ..
0x767060bbb4c7    49ba10df12ca1c640000    mov r10, 0x641cca12df10
0x767060bbb4d1    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb4db    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. c1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( ..
0x767060bbb4de    48b8d54c8c6070760000    mov rax, 0x7670608c4cd5       < string : 'interpret3 :> ' >
0x767060bbb4e8    4983c608                add r14, 0x8
0x767060bbb4ec    498906                  mov [r14], rax
0x767060bbb4ef    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbb4f9    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. b () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : to ..
0x767060bbb4fc    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bbb506    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb510    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. terpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken )  ..
0x767060bbb513    b801000000              mov eax, 0x1
0x767060bbb518    4883f800                cmp rax, 0x0
0x767060bbb51c    0f8415010000            jz 0x767060bbb637             < C_Syntax.interpret3+419 >
0x767060bbb522    49ba50e512ca1c640000    mov r10, 0x641cca12e550
0x767060bbb52c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb536    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                            ..
0x767060bbb539    498d4708                lea rax, [r15+0x8]
0x767060bbb53d    488bc8                  mov rcx, rax
0x767060bbb540    498b06                  mov rax, [r14]
0x767060bbb543    4983ee08                sub r14, 0x8
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                            ..
0x767060bbb547    488901                  mov [rcx], rax
 .. token = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken, " ..
0x767060bbb54a    48b83032686070760000    mov rax, 0x767060683230
0x767060bbb554    488bf8                  mov rdi, rax
 .. intf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken, "i3halt" ) )         {           ..
0x767060bbb557    498b4708                mov rax, [r15+0x8]
0x767060bbb55b    488bf0                  mov rsi, rax
0x767060bbb55e    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb568    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb572    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..                    if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                ..
0x767060bbb575    498b4708                mov rax, [r15+0x8]
0x767060bbb579    4983c608                add r14, 0x8
0x767060bbb57d    498906                  mov [r14], rax
 ..            if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                        ..
0x767060bbb580    48b87f4d8c6070760000    mov rax, 0x7670608c4d7f       < string : 'i3halt' >
0x767060bbb58a    4983c608                add r14, 0x8
0x767060bbb58e    498906                  mov [r14], rax
 ..  ;                               if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;  ..
0x767060bbb591    49bbcab4ba6070760000    mov r11, 0x767060bab4ca
0x767060bbb59b    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x0000767060bab4ca >
 .. if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                   ..
0x767060bbb59e    498b06                  mov rax, [r14]
0x767060bbb5a1    4983ee08                sub r14, 0x8
0x767060bbb5a5    4883f800                cmp rax, 0x0
0x767060bbb5a9    0f842e000000            jz 0x767060bbb5dd             < C_Syntax.interpret3+329 >
 ..  ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                    return ;         }         else   ..
0x767060bbb5af    48b83933686070760000    mov rax, 0x767060683339
0x767060bbb5b9    488bf8                  mov rdi, rax
0x767060bbb5bc    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb5c6    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb5d0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbb5d3    e95f000000              jmp 0x767060bbb637            < C_Syntax.interpret3+419 >
0x767060bbb5d8    e955000000              jmp 0x767060bbb632            < C_Syntax.interpret3+414 >
 ..                 aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  ..
0x767060bbb5dd    498b4708                mov rax, [r15+0x8]
0x767060bbb5e1    4983c608                add r14, 0x8
0x767060bbb5e5    498906                  mov [r14], rax
0x767060bbb5e8    49baf0ed12ca1c640000    mov r10, 0x641cca12edf0
0x767060bbb5f2    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb5fc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  ..
0x767060bbb5ff    498d4710                lea rax, [r15+0x10]
0x767060bbb603    488bc8                  mov rcx, rax
0x767060bbb606    498b06                  mov rax, [r14]
0x767060bbb609    4983ee08                sub r14, 0x8
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  ..
0x767060bbb60d    488901                  mov [rcx], rax
 .. ord ( atoken ) ;             doWord ( aword ) ;         }            }    }  ..
0x767060bbb610    498b4710                mov rax, [r15+0x10]
0x767060bbb614    4983c608                add r14, 0x8
0x767060bbb618    498906                  mov [r14], rax
0x767060bbb61b    49bae0ea12ca1c640000    mov r10, 0x641cca12eae0
0x767060bbb625    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb62f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..            doWord ( aword ) ;         }            }    }  ..
0x767060bbb632    e9dcfeffff              jmp 0x767060bbb513            < C_Syntax.interpret3+127 >
0x767060bbb637    4d8d77f8                lea r14, [r15-0x8]
0x767060bbb63b    4d8b7e08                mov r15, [r14+0x8]
 .. ( aword ) ;         }            }    }  ..
0x767060bbb63f    c3                      ret
Word_Disassemble : word - 'interpret3' :: codeSize = 428
Word : 0x000076705cfd7206 :: Compiled at : 0x0000767060bbb494
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 206.15 <::

        interpret : token = C
        interpret : token = sp0
        interpret : token = #
        interpret : token = //
        interpret : token = interpret2
tdbg = 1
tdbg2 = 2
tdbg3 = 3
tdbg4 = 4
tdbg5 = 5
tdbg6 = 6
last line
xhii = 7
xhi =  7 7 7
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret2 :>

        interpret2 : token = using
Using Namespaces :> C Root libc void C_Syntax Infix PrefixCombinators chey0 CObj Dlsym chey Class Defines User String Combinators Interpreter System int Shell Compiler Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9

        interpret2 : token = sp0
        interpret2 : token = #
        interpret2 : token = int
        interpret2 : token = int
        interpret2 : token = ;
        interpret2 : token = #
        interpret2 : token = while
        interpret2 : token = #
        interpret2 : token = return
        interpret2 : token = ;
        interpret2 : token = }
        interpret2 : token = pwi
 =============================
C_Syntax.fac40 <:> csl compiled word
SourceCode for C_Syntax.fac40 :>
int fac40 ( n | facc ) { int facc = 1 ; while ( n > 1 ) facc = n -- * facc ; return facc ; }
Source code file location of fac40 : "namespaces/compiler/c_syntax.csl" : 216.6 :: we are now at : namespaces/compiler/c_syntax.csl : 226.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb645 -- code size = 72 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fac40 : definition = 0x0000767060bbb645 : disassembly at namespaces/compiler/c_syntax.csl : 226.10 :
0x767060bbb645    4d897e08                mov [r14+0x8], r15
0x767060bbb649    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb64d    4981c618000000          add r14, 0x18
 int fac40 ( n  | facc )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }  ..
0x767060bbb654    49c7471001000000        mov qword [r15+0x10], 0x1
 ..  )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb65c    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bbb661    0f8e16000000            jle 0x767060bbb67d            < C_Syntax.fac40+56 >
 .. facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb667    498b47f8                mov rax, [r15-0x8]
 .. 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb66b    498b4f10                mov rcx, [r15+0x10]
 .. = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb66f    480fafc1                imul rax, rcx
 ..    int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb673    49894710                mov [r15+0x10], rax
 .. cc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb677    49ff4ff8                dec qword [r15-0x8]
 ..    while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb67b    ebdf                    jmp 0x767060bbb65c            < C_Syntax.fac40+23 >
 .. le ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb67d    498b4710                mov rax, [r15+0x10]
0x767060bbb681    4d8d77f8                lea r14, [r15-0x8]
 .. t facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb685    4d8b7e08                mov r15, [r14+0x8]
 .. > 1 ) facc = n -- * facc ;     return facc ; }
0x767060bbb689    498906                  mov [r14], rax
 .. acc = n -- * facc ;     return facc ; }
0x767060bbb68c    c3                      ret
Word_Disassemble : word - 'fac40' :: codeSize = 72
Word : 0x000076705cfdd606 :: Compiled at : 0x0000767060bbb645
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 226.10 <::

        interpret2 : token = //
        interpret2 : token = fac40
        interpret2 : token = dup
        interpret2 : token = p 5040
        interpret2 : token = 5040
        interpret2 : token = _assert
        interpret2 : token = i2halt
        interpret2 exiting...
        interpret : token = sp0
        interpret : token = //
        interpret : token = #
        interpret : token = interpret3
tdbg = 1
tdbg2 = 2
tdbg3 = 3
tdbg4 = 4
tdbg5 = 5
tdbg6 = 6
last line
xhii = 7
xhi =  7 7 7
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret3 :>

        interpret3 : token = sp0
        interpret3 : token = c_syntaxOff
        interpret3 : token = User
        interpret3 : token = words
Words :
 - <namespace> ':>' <word list>
 - User :>  heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
 - Root :>  sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
 - C :>  x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test1 test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf
 - int :>  this size
 - libc :>  x xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
 - void :>  Error ftoc ctof ftoc ctof this size
 - CObj :>  this size
 - Dlsym :>
 - chey :>
 - Class :>  . clone new struct class :{ +:{ };
 - Defines :>  xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
 - String :>  hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
 - Combinators :>  ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
 - Interpreter :>  sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
 - System :>  ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwu pwi pwdissu pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackInit warmInit init reset _include
 - Shell :>  hio ppxe ppx epause apause test sh $ _sh endif else if
 - Compiler :>  vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
 - Int :>  mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / pow_03 pow ** * -= += - +
 - Debug :>  dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState udis1x udis1 dsOn dsOff stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
 - Ar9 :>  arr9 a9 a9dump _adump ar dimSize this size
 - Ar3 :>  a7 a a8 a6x a6 ar this size
 - Ar2 :>  a a5 a4 ar this size
 - Ar1 :>  a a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
 - DLLNodeAlloc :>  testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
 - DLLNode :>  sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
 - Buffer :>  buf this size
 - Logic :>  l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
 - Control :>  maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
 - Bits :>  tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
 - DObject :>  new clone dobject
 - Lexer :>  sp heey hey hi ofile orpfile % "
 - testD :>  testC
 - a112 :>  c1138
 - int64 :>  this size
 - arr10 :>
 - Ar10 :>  a10dump ar dimSize this size
 - cta :>  a caba cadump a tcta aba ar this size
 - ct0 :>  ac a tct ab ar this size
 - ar9 :>
 - DLLNodeAlloc4 :>  testna5 dlna4o testna5 testna4 nodes this size
 - DLListClone :>  testClone init Accum Four Three Twelve Sum Prototype Category this size
 - DLList :>  hey hi hey hi testList init TailNode HeadNode this size
 - Integer :>
 - Pointer :>  this size
 - List :>  bexp3 lcRestoreStack dupList printList eval _( _lisp
 - OpenVmTil :>  ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
 - byte :>  this size
 - Io :>  Error logWrite logAppend logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc space tab cr newline kbhit key emit printString
 - Word :>  code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
 - Macro :>  rdim rdi s _s tm: findAlias alias sm:
 - Namespace :>  usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
 - StartupMacros :>  namespaces Delimiters
 - Compiling :>  pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
 - Reserved :>  {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
 - PreProcessor :>  ifndef ifdef undef defined include define elif if else endif !
 - Stack :>  stackCheck setDsp dsp _swap stackDepth depth pick _ndrop dropN drop ndup tos dup _dup
 - Memory :>  recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
 - Colors :>  alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
 - File :>  freadToString fexists fsize ftell fseek fread fwrite fclose fopen
 - Asm :>  jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
 - Array :>  [ ]
 - MemorySpace :>  msDelete memspace
 - Locals :>  (| (
 - Forth :>  rpn n, 8, 4, , 2, 1, '
 - Experimental :>  <does <do does> do> locationPrint locationPush
 - L9 :>  l9
1221 words on the 'using' Namespaces List ::
        interpret3 : token = sp0
        interpret3 : token = :
        interpret3 : token = 1
        interpret3 : token = 2
        interpret3 : token = +
        interpret3 : token = p
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hi1
        interpret3 : token = hi1
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = ;
        interpret3 : token = nl

        interpret3 : token = heey1 3 3 3 3 3 3
        interpret3 : token = #
        interpret3 : token = c_syntaxOn
        interpret3 : token = int
        interpret3 : token = for
        interpret3 : token = return
        interpret3 : token = ;
        interpret3 : token = }
        interpret3 : token = pwi
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :>
int faccs2 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; }
Source code file location of faccs2 : "namespaces/compiler/c_syntax.csl" : 247.7 :: we are now at : namespaces/compiler/c_syntax.csl : 255.11
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb72b -- code size = 72 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x0000767060bbb72b : disassembly at namespaces/compiler/c_syntax.csl : 255.11 :
0x767060bbb72b    4d897e08                mov [r14+0x8], r15
0x767060bbb72f    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb733    4981c610000000          add r14, 0x10
  int faccs2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  ..
0x767060bbb73a    49c7470801000000        mov qword [r15+0x8], 0x1
 .. s2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb742    49837ff801              cmp qword [r15-0x8], 0x1
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb747    0f8e16000000            jle 0x767060bbb763            < C_Syntax.faccs2+56 >
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb74d    498b4708                mov rax, [r15+0x8]
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb751    498b4ff8                mov rcx, [r15-0x8]
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb755    480fafc1                imul rax, rcx
0x767060bbb759    49894708                mov [r15+0x8], rax
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb75d    49ff4ff8                dec qword [r15-0x8]
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb761    ebdf                    jmp 0x767060bbb742            < C_Syntax.faccs2+23 >
 ..           rec = rec * n ;      }      return rec ; }
0x767060bbb763    498b4708                mov rax, [r15+0x8]
0x767060bbb767    4d8d77f8                lea r14, [r15-0x8]
0x767060bbb76b    4d8b7e08                mov r15, [r14+0x8]
 ..    rec = rec * n ;      }      return rec ; }
0x767060bbb76f    498906                  mov [r14], rax
 ..  = rec * n ;      }      return rec ; }
0x767060bbb772    c3                      ret
Word_Disassemble : word - 'faccs2' :: codeSize = 72
Word : 0x000076705cfe1f06 :: Compiled at : 0x0000767060bbb72b
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 255.11 <::

        interpret3 : token = //
        interpret3 : token = faccs2
        interpret3 : token = dup
        interpret3 : token = p 5040
        interpret3 : token = 5040
        interpret3 : token = _assert0
        interpret3 : token = sp0
        interpret3 : token = libc
        interpret3 : token = void
        interpret3 : token = //
        interpret3 : token = //
        interpret3 : token = while
        interpret3 : token = }
        interpret3 : token = //
        interpret3 : token = i3halt
        interpret3 exiting...
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret4 <:> csl compiled word
SourceCode for C_Syntax.interpret4 :>
void interpret4 ( | atoken aword ) { while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ; if ( atoken ) { if ( StringEqual ( atoken, "i4halt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ; return ; } aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } else break ; } }
Source code file location of interpret4 : "namespaces/compiler/c_syntax.csl" : 260.11 :: we are now at : namespaces/compiler/c_syntax.csl : 284.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb778 -- code size = 342 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.interpret4 : definition = 0x0000767060bbb778 : disassembly at namespaces/compiler/c_syntax.csl : 284.15 :
0x767060bbb778    4d897e08                mov [r14+0x8], r15
0x767060bbb77c    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb780    4981c618000000          add r14, 0x18
 .. | atoken aword )  {           while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken )  ..
0x767060bbb787    b801000000              mov r8d, 0x1
0x767060bbb78c    4883f800                cmp rax, 0x0
0x767060bbb790    0f842f010000            jz 0x767060bbb8c5             < C_Syntax.interpret4+333 >
0x767060bbb796    49ba50e512ca1c640000    mov r10, 0x641cca12e550
0x767060bbb7a0    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb7aa    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )     ..
0x767060bbb7ad    498d4708                lea rax, [r15+0x8]
0x767060bbb7b1    488bc8                  mov rcx, rax
0x767060bbb7b4    498b06                  mov rax, [r14]
0x767060bbb7b7    4983ee08                sub r14, 0x8
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )     ..
0x767060bbb7bb    488901                  mov [rcx], rax
 .. token = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringEq ..
0x767060bbb7be    48b83e5d696070760000    mov rax, 0x767060695d3e
0x767060bbb7c8    488bf8                  mov rdi, rax
 .. intf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )      ..
0x767060bbb7cb    498b4708                mov rax, [r15+0x8]
0x767060bbb7cf    488bf0                  mov rsi, rax
0x767060bbb7d2    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb7dc    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb7e6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                  ..
0x767060bbb7e9    498b4708                mov rax, [r15+0x8]
0x767060bbb7ed    4883f800                cmp rax, 0x0
0x767060bbb7f1    0f84c4000000            jz 0x767060bbb8bb             < C_Syntax.interpret4+323 >
 ..      {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ..
0x767060bbb7f7    498b4708                mov rax, [r15+0x8]
0x767060bbb7fb    4983c608                add r14, 0x8
0x767060bbb7ff    498906                  mov [r14], rax
 ..            if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", a ..
0x767060bbb802    48b877528c6070760000    mov rax, 0x7670608c5277       < string : 'i4halt' >
0x767060bbb80c    4983c608                add r14, 0x8
0x767060bbb810    498906                  mov [r14], rax
 .. ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: inte ..
0x767060bbb813    49bbcab4ba6070760000    mov r11, 0x767060bab4ca
0x767060bbb81d    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x0000767060bab4ca >
 .. if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;   ..
0x767060bbb820    498b06                  mov rax, [r14]
0x767060bbb823    4983ee08                sub r14, 0x8
0x767060bbb827    4883f800                cmp rax, 0x0
0x767060bbb82b    0f8430000000            jz 0x767060bbb861             < C_Syntax.interpret4+233 >
 ..          {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;    ..
0x767060bbb831    48b8cf5f696070760000    mov rax, 0x767060695fcf
0x767060bbb83b    488bf8                  mov rdi, rax
 .. oken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord ( ..
0x767060bbb83e    498b4708                mov rax, [r15+0x8]
0x767060bbb842    488bf0                  mov rsi, rax
0x767060bbb845    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb84f    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb859    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord ( atoken ) ..
0x767060bbb85c    e964000000              jmp 0x767060bbb8c5            < C_Syntax.interpret4+333 >
 ..   }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  ..
0x767060bbb861    498b4708                mov rax, [r15+0x8]
0x767060bbb865    4983c608                add r14, 0x8
0x767060bbb869    498906                  mov [r14], rax
0x767060bbb86c    49baf0ed12ca1c640000    mov r10, 0x641cca12edf0
0x767060bbb876    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb880    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  ..
0x767060bbb883    498d4710                lea rax, [r15+0x10]
0x767060bbb887    488bc8                  mov rcx, rax
0x767060bbb88a    498b06                  mov rax, [r14]
0x767060bbb88d    4983ee08                sub r14, 0x8
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  ..
0x767060bbb891    488901                  mov [rcx], rax
 .. ord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  ..
0x767060bbb894    498b4710                mov rax, [r15+0x10]
0x767060bbb898    4983c608                add r14, 0x8
0x767060bbb89c    498906                  mov [r14], rax
0x767060bbb89f    49bae0ea12ca1c640000    mov r10, 0x641cca12eae0
0x767060bbb8a9    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb8b3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbb8b6    e905000000              jmp 0x767060bbb8c0            < C_Syntax.interpret4+328 >
 .. rd ( aword ) ;         }         else break ;     } }  ..
0x767060bbb8bb    e905000000              jmp 0x767060bbb8c5            < C_Syntax.interpret4+333 >
0x767060bbb8c0    e9c2feffff              jmp 0x767060bbb787            < C_Syntax.interpret4+15 >
0x767060bbb8c5    4d8d77f8                lea r14, [r15-0x8]
0x767060bbb8c9    4d8b7e08                mov r15, [r14+0x8]
 ..          }         else break ;     } }  ..
0x767060bbb8cd    c3                      ret
Word_Disassemble : word - 'interpret4' :: codeSize = 342
Word : 0x000076705cfe58d6 :: Compiled at : 0x0000767060bbb778
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 284.15 <::

        interpret : token = sp0
        interpret : token = interpret4
        interpret4 : token = C
        interpret4 : token = int
        interpret4 : token = for
        interpret4 : token = return
        interpret4 : token = ;
        interpret4 : token = }
        interpret4 : token = '
        interpret4 : token = find
        interpret4 : token = wdiss
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :>
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; }
Source code file location of faccs3 : "namespaces/compiler/c_syntax.csl" : 288.7 :: we are now at : namespaces/compiler/c_syntax.csl : 296.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb8d3 -- code size = 72 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x0000767060bbb8d3 : disassembly at namespaces/compiler/c_syntax.csl : 296.20 :
0x767060bbb8d3    4d897e08                mov [r14+0x8], r15
0x767060bbb8d7    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb8db    4981c610000000          add r14, 0x10
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  ..
0x767060bbb8e2    49c7470801000000        mov qword [r15+0x8], 0x1
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb8ea    49837ff801              cmp qword [r15-0x8], 0x1
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb8ef    0f8e16000000            jle 0x767060bbb90b            < C_Syntax.faccs3+56 >
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb8f5    498b4708                mov rax, [r15+0x8]
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb8f9    498b4ff8                mov rcx, [r15-0x8]
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb8fd    480fafc1                imul rax, rcx
0x767060bbb901    49894708                mov [r15+0x8], rax
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb905    49ff4ff8                dec qword [r15-0x8]
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bbb909    ebdf                    jmp 0x767060bbb8ea            < C_Syntax.faccs3+23 >
 ..           rec = rec * n ;      }      return rec ; }
0x767060bbb90b    498b4708                mov rax, [r15+0x8]
0x767060bbb90f    4d8d77f8                lea r14, [r15-0x8]
0x767060bbb913    4d8b7e08                mov r15, [r14+0x8]
 ..    rec = rec * n ;      }      return rec ; }
0x767060bbb917    498906                  mov [r14], rax
 ..  = rec * n ;      }      return rec ; }
0x767060bbb91a    c3                      ret
Word_Disassemble : word - 'faccs3' :: codeSize = 72
Word : 0x000076705cfeaa46 :: Compiled at : 0x0000767060bbb8d3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 296.20 <::

        interpret4 : token = faccs3
        interpret4 : token = dup
        interpret4 : token = p 5040
        interpret4 : token = 5040
        interpret4 : token = _assert0
        interpret4 : token = sp0
        interpret4 : token = i4halt

        token = i4halt :: interpret4 exiting ...
        interpret : token = sp0
        interpret : token = //
        interpret : token = c_syntaxOff
        interpret : token = //
        interpret : token = #
        interpret : token = //
        interpret : token = C
        interpret : token = sp0
        interpret : token = c_syntaxOn
        interpret : token = C
        interpret : token = String
        interpret : token = libc
        interpret : token = typedef
        interpret : token = void
        interpret : token = buffer
        interpret : token = =
        interpret : token = ;
        interpret : token = memset
        interpret : token = ;
        interpret : token = while
        interpret : token = }
        interpret : token = pwi
 =============================
C_Syntax.$ <:> csl compiled word
SourceCode for C_Syntax.$ :>
void $ ( | atoken, buffer, CBuffer buffer0 ) { buffer = &buffer0.buf ; memset ( buffer, 0, CBuffer.size ) ; while ( atoken = token () ) { oPrintf ( "\n\ttoken = %s\n", atoken ) ; if ( ! strcmp ( atoken, ";" ) ) { oPrintf ( "\n\tbuffer = %s\n", buffer ) ; sh ( buffer ) ; break ; } else { if ( strcmp ( atoken, "." ) ) { strcat ( buffer, " " ) ; } strcat ( buffer, atoken ) ; } } }
Source code file location of $ : "namespaces/compiler/c_syntax.csl" : 309.2 :: we are now at : namespaces/compiler/c_syntax.csl : 333.5
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbb920 -- code size = 515 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.$ : definition = 0x0000767060bbb920 : disassembly at namespaces/compiler/c_syntax.csl : 333.5 :
0x767060bbb920    4d897e08                mov [r14+0x8], r15
0x767060bbb924    4d8d7e08                lea r15, [r14+0x8]
0x767060bbb928    4981c620000000          add r14, 0x20
 .. er, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {      ..
0x767060bbb92f    48bfcee5fe5c70760000    mov rdi, 0x76705cfee5ce
0x767060bbb939    498d7718                lea rsi, [r15+0x18]
0x767060bbb93d    ba00010000              mov edx, 0x100
0x767060bbb942    49ba90a10dca1c640000    mov r10, 0x641cca0da190
0x767060bbb94c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb956    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. r, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {       ..
0x767060bbb959    498b4718                mov rax, [r15+0x18]
0x767060bbb95d    4881c000000000          add rax, 0x0
 .. ken, buffer, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )    ..
0x767060bbb964    49894710                mov [r15+0x10], rax
 ..  buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken  ..
0x767060bbb968    498b4710                mov rax, [r15+0x10]
0x767060bbb96c    488bf8                  mov rdi, rax
 .. = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", ..
0x767060bbb96f    48c7c000000000          mov rax, 0x0
0x767060bbb976    488bf0                  mov rsi, rax
 .. buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ; ..
0x767060bbb979    48b846e8fe5c70760000    mov rax, 0x76705cfee846
0x767060bbb983    488b00                  mov rax, [rax]
0x767060bbb986    488bd0                  mov rdx, rax
 ..  )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\ ..
0x767060bbb989    49ba90bf376170760000    mov r10, 0x76706137bf90
0x767060bbb993    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb99d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. fer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( !  ..
0x767060bbb9a0    49ba50e512ca1c640000    mov r10, 0x641cca12e550
0x767060bbb9aa    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbb9b4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp  ..
0x767060bbb9b7    498d4708                lea rax, [r15+0x8]
 .. fer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( !  ..
0x767060bbb9bb    488bc8                  mov rcx, rax
0x767060bbb9be    498b06                  mov rax, [r14]
0x767060bbb9c1    4983ee08                sub r14, 0x8
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp  ..
0x767060bbb9c5    488901                  mov [rcx], rax
 .. ze ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, " ..
0x767060bbb9c8    498b06                  mov rax, [r14]
0x767060bbb9cb    4983ee08                sub r14, 0x8
0x767060bbb9cf    4883f800                cmp rax, 0x0
0x767060bbb9d3    0f8441010000            jz 0x767060bbbb1a             < C_Syntax.$+506 >
 .. oken () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              ..
0x767060bbb9d9    48b8fccc696070760000    mov rax, 0x76706069ccfc
0x767060bbb9e3    488bf8                  mov rdi, rax
 ..         oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuff ..
0x767060bbb9e6    498b4708                mov rax, [r15+0x8]
0x767060bbb9ea    488bf0                  mov rsi, rax
0x767060bbb9ed    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbb9f7    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbba01    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( bu ..
0x767060bbba04    498b4708                mov rax, [r15+0x8]
0x767060bbba08    488bf8                  mov rdi, rax
 ..               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ; ..
0x767060bbba0b    48b80acd696070760000    mov rax, 0x76706069cd0a       < string : ';' >
0x767060bbba15    488bf0                  mov rsi, rax
 .. s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;           ..
0x767060bbba18    49bad0db376170760000    mov r10, 0x76706137dbd0
0x767060bbba22    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbba2c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;         ..
0x767060bbba2f    4883f800                cmp rax, 0x0
0x767060bbba33    0f8557000000            jnz 0x767060bbba90            < C_Syntax.$+368 >
 .. ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         el ..
0x767060bbba39    48b80ccd696070760000    mov rax, 0x76706069cd0c
0x767060bbba43    488bf8                  mov rdi, rax
 ..        oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {         ..
0x767060bbba46    498b4710                mov rax, [r15+0x10]
0x767060bbba4a    488bf0                  mov rsi, rax
0x767060bbba4d    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbba57    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbba61    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. r = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {              if ( strcmp ( atoken, ..
0x767060bbba64    498b4710                mov rax, [r15+0x10]
0x767060bbba68    4983c608                add r14, 0x8
0x767060bbba6c    498906                  mov [r14], rax
0x767060bbba6f    49ba90fe12ca1c640000    mov r10, 0x641cca12fe90
0x767060bbba79    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbba83    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbba86    e98f000000              jmp 0x767060bbbb1a            < C_Syntax.$+506 >
0x767060bbba8b    e985000000              jmp 0x767060bbbb15            < C_Syntax.$+501 >
 ..          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             strc ..
0x767060bbba90    498b4708                mov rax, [r15+0x8]
0x767060bbba94    488bf8                  mov rdi, rax
 ..  {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             strcat ( buf ..
0x767060bbba97    48b833ce696070760000    mov rax, 0x76706069ce33       < string : '.' >
0x767060bbbaa1    488bf0                  mov rsi, rax
 ..     else          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }         ..
0x767060bbbaa4    49bad0db376170760000    mov r10, 0x76706137dbd0
0x767060bbbaae    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbbab8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbbabb    4883f800                cmp rax, 0x0
0x767060bbbabf    0f842b000000            jz 0x767060bbbaf0             < C_Syntax.$+464 >
 ..            {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  ..
0x767060bbbac5    498b4710                mov rax, [r15+0x10]
0x767060bbbac9    488bf8                  mov rdi, rax
 ..    {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  ..
0x767060bbbacc    48b835ce696070760000    mov rax, 0x76706069ce35       < string : ' ' >
0x767060bbbad6    488bf0                  mov rsi, rax
0x767060bbbad9    49ba90d4376170760000    mov r10, 0x76706137d490
0x767060bbbae3    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbbaed    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ) ;            }             strcat ( buffer, atoken ) ;         }     } }  ..
0x767060bbbaf0    498b4710                mov rax, [r15+0x10]
0x767060bbbaf4    488bf8                  mov rdi, rax
 ..        }             strcat ( buffer, atoken ) ;         }     } }  ..
0x767060bbbaf7    498b4708                mov rax, [r15+0x8]
0x767060bbbafb    488bf0                  mov rsi, rax
0x767060bbbafe    49ba90d4376170760000    mov r10, 0x76706137d490
0x767060bbbb08    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbbb12    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   strcat ( buffer, atoken ) ;         }     } }  ..
0x767060bbbb15    e986feffff              jmp 0x767060bbb9a0            < C_Syntax.$+128 >
0x767060bbbb1a    4d8d77f8                lea r14, [r15-0x8]
0x767060bbbb1e    4d8b7e08                mov r15, [r14+0x8]
 ..  ( buffer, atoken ) ;         }     } }  ..
0x767060bbbb22    c3                      ret
Word_Disassemble : word - '$' :: codeSize = 515
Word : 0x000076705cfeeb16 :: Compiled at : 0x0000767060bbb920
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 333.5 <::

        interpret : token = //
        interpret : token = sp0
        interpret : token = ihalt

        token = ihalt :: interpret exiting ...

new $ test
total 1684
drwxr-xr-x 11 dennisj dennisj    4096 Nov 23 07:42 .
drwx------ 62 dennisj dennisj    4096 Nov 22 00:40 ..
drwxr-xr-x  8 dennisj dennisj    4096 Nov 22 00:16 .git
-rw-------  1 dennisj dennisj       8 Sep 26 12:40 .gitignore
drwxr-xr-x  2 dennisj dennisj    4096 Sep 26 23:25 .vscode
-rw-r--r--  1 dennisj dennisj    1067 Sep 18 12:10 LICENSE
-rw-r--r--  1 dennisj dennisj    9070 Sep 18 12:10 Makefile
-rw-r--r--  1 dennisj dennisj   14382 Sep 18 12:10 README.md
-rw-r--r--  1 dennisj dennisj   14382 Sep 18 12:10 README.txt
drwxr-xr-x  2 dennisj dennisj    4096 Sep 18 12:10 archive
drwxr-xr-x  2 dennisj dennisj    4096 Nov 23 07:06 bin
drwxr-xr-x  6 dennisj dennisj    4096 Sep 26 14:51 build
-rw-r--r--  1 dennisj dennisj 1543122 Nov 23 07:42 csl.log
drwxr-xr-x  2 dennisj dennisj    4096 Sep 18 12:10 etc
-rw-r--r--  1 dennisj dennisj   22654 Nov 23 07:41 init.csl
-rw-r--r--  1 dennisj dennisj   20368 Sep 18 12:10 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj     220 Sep 18 12:10 m
-rwxr-xr-x  1 dennisj dennisj     664 Sep 18 12:10 m0
-rwxr-xr-x  1 dennisj dennisj     224 Sep 18 12:10 ma
-rwxr-xr-x  1 dennisj dennisj     503 Sep 18 12:10 mir
-rwxr-xr-x  1 dennisj dennisj     549 Sep 18 12:10 mirAll
-rwxr-xr-x  1 dennisj dennisj     504 Sep 18 12:10 mira
-rwxr-xr-x  1 dennisj dennisj     518 Sep 18 12:10 mirs
drwxr-xr-x  4 dennisj dennisj    4096 Sep 18 12:10 namespaces
drwxr-xr-x  3 dennisj dennisj    4096 Sep 18 12:10 nbproject
-rw-r--r--  1 dennisj dennisj       5 Nov 23 07:50 node.txt
-rwxr-xr-x  1 dennisj dennisj     124 Sep 18 12:10 r
drwxr-xr-x  5 dennisj dennisj    4096 Sep 18 12:10 src

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.501
 7 7 7
version 0.940.501
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21820 : Unused =   1026756 : Allocations =    1 : Largest =  1026756 : Smallest =  1026756 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    769071 : Unused =   3425233 : Allocations =    1 : Largest =  3425233 : Smallest =  3425233 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2131860 : Unused =  23055684
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1172016 : 2713  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :>
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ;
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x9da6a400 -- code size = 77 bytes
TypeSignature :
 -----------------------------
Word :: Int.fac : definition = 0x0000744c9da6a400 : disassembly at etc/script : 35.8 :
0x744c9da6a400    4d897e08                mov [r14+0x8], r15
0x744c9da6a404    4d8d7e08                lea r15, [r14+0x8]
0x744c9da6a408    4981c610000000          add r14, 0x10
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x744c9da6a40f    49c7470801000000        mov qword [r15+0x8], 0x1
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  ..
0x744c9da6a417    49837ff801              cmp qword [r15-0x8], 0x1
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a41c    0f8e16000000            jle 0x744c9da6a438            < Int.fac+56 >
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a422    498b47f8                mov rax, [r15-0x8]
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a426    498b4f08                mov rcx, [r15+0x8]
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a42a    480fafc1                imul rax, rcx
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a42e    49894708                mov [r15+0x8], rax
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a432    49ff4ff8                dec qword [r15-0x8]
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a436    ebdf                    jmp 0x744c9da6a417            < Int.fac+23 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a438    498b4708                mov rax, [r15+0x8]
0x744c9da6a43c    e900000000              jmp 0x744c9da6a441            < Int.fac+65 >
0x744c9da6a441    4d8d77f8                lea r14, [r15-0x8]
0x744c9da6a445    4d8b7e08                mov r15, [r14+0x8]
 .. * rec1 store n -- } while      return rec1 @ ;
0x744c9da6a449    498906                  mov [r14], rax
 .. store n -- } while      return rec1 @ ;
0x744c9da6a44c    c3                      ret
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x0000744c9dc24f27 :: Compiled at : 0x0000744c9da6a400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 349.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.C
should read 3 : 3
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :>
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; }
Source code file location of fac5 : "namespaces/compiler/c_syntax.csl" : 355.5 :: we are now at : namespaces/compiler/c_syntax.csl : 365.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbbba6 -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x0000767060bbbba6 : disassembly at namespaces/compiler/c_syntax.csl : 365.9 :
0x767060bbbba6    498b3e                  mov rdi, [r14]
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; }
0x767060bbbba9    be01000000              mov esi, 0x1
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; }
0x767060bbbbae    4883ff01                cmp rdi, 0x1
0x767060bbbbb2    0f8e09000000            jle 0x767060bbbbc1            < C_Syntax.fac5+27 >
 ..  ( n > 1 )      {                facc *= n -- ;     }     return facc ; }
0x767060bbbbb8    480faff7                imul rsi, rdi
 .. > 1 )      {                facc *= n -- ;     }     return facc ; }
0x767060bbbbbc    48ffcf                  dec rdi
0x767060bbbbbf    ebed                    jmp 0x767060bbbbae            < C_Syntax.fac5+8 >
 ..       facc *= n -- ;     }     return facc ; }
0x767060bbbbc1    498936                  mov [r14], rsi
 .. acc *= n -- ;     }     return facc ; }
0x767060bbbbc4    c3                      ret
Word_Disassemble : word - 'fac5' :: codeSize = 31
Word : 0x000076705cff3c86 :: Compiled at : 0x0000767060bbbba6
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 365.9 <::
 5040
0x767060bbbbca    4d897e08                mov [r14+0x8], r15
0x767060bbbbce    4d8d7e08                lea r15, [r14+0x8]
0x767060bbbbd2    4981c618000000          add r14, 0x18
0x767060bbbbd9    48b8d6f2fe5c70760000    mov rax, 0x76705cfef2d6
0x767060bbbbe3    b902000000              mov ecx, 0x2
0x767060bbbbe8    488908                  mov [rax], rcx
0x767060bbbbeb    48b8d661ff5c70760000    mov rax, 0x76705cff61d6
0x767060bbbbf5    b904000000              mov ecx, 0x4
0x767060bbbbfa    488908                  mov [rax], rcx
0x767060bbbbfd    48b8d6f2fe5c70760000    mov rax, 0x76705cfef2d6
0x767060bbbc07    488b00                  mov rax, [rax]
0x767060bbbc0a    48b9d661ff5c70760000    mov rcx, 0x76705cff61d6
0x767060bbbc14    488b09                  mov rcx, [rcx]
0x767060bbbc17    4803c1                  add rax, rcx
0x767060bbbc1a    b902000000              mov ecx, 0x2
0x767060bbbc1f    48c7c200000000          mov rdx, 0x0
0x767060bbbc26    48f7f9                  idiv rcx
0x767060bbbc29    4983c610                add r14, 0x10
0x767060bbbc2d    498906                  mov [r14], rax
0x767060bbbc30    498946f8                mov [r14-0x8], rax
0x767060bbbc34    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bbbc3e    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bbbc41    b803000000              mov eax, 0x3
0x767060bbbc46    4983c608                add r14, 0x8
0x767060bbbc4a    498906                  mov [r14], rax
0x767060bbbc4d    49bbf6acba6070760000    mov r11, 0x767060baacf6
0x767060bbbc57    49ffd3                  call r11                      < C._assert0 : 0x0000767060baacf6 >
0x767060bbbc5a    4d8d77f8                lea r14, [r15-0x8]
0x767060bbbc5e    4d8b7e08                mov r15, [r14+0x8]
0x767060bbbc62    c3                      ret
 3 3
above line should show 3 3
 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :>
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
Source code file location of yada : "namespaces/compiler/c_syntax.csl" : 385.10 :: we are now at : namespaces/compiler/c_syntax.csl : 385.85
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbbc68 -- code size = 81 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.yada : definition = 0x0000767060bbbc68 : disassembly at namespaces/compiler/c_syntax.csl : 385.85 :
0x767060bbbc68    4d897e08                mov [r14+0x8], r15
0x767060bbbc6c    4d8d7e08                lea r15, [r14+0x8]
0x767060bbbc70    4981c620000000          add r14, 0x20
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  ..
0x767060bbbc77    49c7470802000000        mov qword [r15+0x8], 0x2
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  ..
0x767060bbbc7f    49c747100c000000        mov qword [r15+0x10], 0xc
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbc87    498b4708                mov rax, [r15+0x8]
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbc8b    498b4f10                mov rcx, [r15+0x10]
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbc8f    4803c1                  add rax, rcx
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbc92    b902000000              mov ecx, 0x2
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbc97    48c7c200000000          mov rdx, 0x0
0x767060bbbc9e    48f7f9                  idiv rcx
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  ..
0x767060bbbca1    49894718                mov [r15+0x18], rax
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbca5    498b4718                mov rax, [r15+0x18]
0x767060bbbca9    4d8d77f8                lea r14, [r15-0x8]
0x767060bbbcad    4d8b7e08                mov r15, [r14+0x8]
0x767060bbbcb1    4983c608                add r14, 0x8
 .. 2, x ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbcb5    498906                  mov [r14], rax
 .. ; x = (( a + b ) / 2 ) ; return (x) ; }
0x767060bbbcb8    c3                      ret
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x000076705cff7c46 :: Compiled at : 0x0000767060bbbc68
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 385.85 <::

DataStack at : namespaces/compiler/c_syntax.csl : 385.99 :
DataStack depth =   5 : Dsp (R14) = Top = 0x000076705fbb2ae0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 385.109 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :>
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return ( x ) ; }
Source code file location of yadaYada : "namespaces/compiler/c_syntax.csl" : 386.14 :: we are now at : namespaces/compiler/c_syntax.csl : 386.103
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbbcbe -- code size = 81 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x0000767060bbbcbe : disassembly at namespaces/compiler/c_syntax.csl : 386.103 :
0x767060bbbcbe    4d897e08                mov [r14+0x8], r15
0x767060bbbcc2    4d8d7e08                lea r15, [r14+0x8]
0x767060bbbcc6    4981c620000000          add r14, 0x20
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  ..
0x767060bbbccd    49c7470802000000        mov qword [r15+0x8], 0x2
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  ..
0x767060bbbcd5    49c747100c000000        mov qword [r15+0x10], 0xc
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbcdd    498b4708                mov rax, [r15+0x8]
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbce1    498b4f10                mov rcx, [r15+0x10]
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbce5    4803c1                  add rax, rcx
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbce8    b902000000              mov ecx, 0x2
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbced    48c7c200000000          mov rdx, 0x0
0x767060bbbcf4    48f7f9                  idiv rcx
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbcf7    49894718                mov [r15+0x18], rax
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbcfb    498b4718                mov rax, [r15+0x18]
0x767060bbbcff    4d8d77f8                lea r14, [r15-0x8]
0x767060bbbd03    4d8b7e08                mov r15, [r14+0x8]
0x767060bbbd07    4983c608                add r14, 0x8
 .. 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbd0b    498906                  mov [r14], rax
 ..  = (( a + b ) / 2 ) ; return  ( x ) ; }
0x767060bbbd0e    c3                      ret
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x000076705cffa896 :: Compiled at : 0x0000767060bbbcbe
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 386.103 <::

DataStack at : namespaces/compiler/c_syntax.csl : 386.129 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

including namespaces/types.csl at namespaces/compiler/c_syntax.csl : 400.11 ...

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 401.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes,
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes,
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes,
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes,
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes,
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12293 : WordCreateCount = 13727 : WordsAdded = 5124 : FindWordCount = 147 : FindWordMaxCount = 150
RecycledWordCount : 483
WordsInRecycling : 0
MPFR library: 4.2.1
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
 78024 653
 =============================
int.wtdInclude <:> csl compiled word
SourceCode for int.wtdInclude :>
: wtdInclude "namespaces/types.csl" include ;
Source code file location of wtdInclude : "namespaces/compiler/c_syntax.csl" : 399.2 :: we are now at : namespaces/compiler/c_syntax.csl : 403.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbbd23 -- code size = 31 bytes
 -----------------------------
Word :: int.wtdInclude : definition = 0x0000767060bbbd23 : disassembly at namespaces/compiler/c_syntax.csl : 403.15 :
 ..                          : wtdInclude "namespaces/types.csl" include ;  ..
0x767060bbbd23    48b8e45c8c6070760000    mov rax, 0x7670608c5ce4       < string : 'namespaces/types.csl' >
0x767060bbbd2d    4983c608                add r14, 0x8
0x767060bbbd31    498906                  mov [r14], rax
 ..   : wtdInclude "namespaces/types.csl" include ;  ..
0x767060bbbd34    49bb6e93ba6070760000    mov r11, 0x767060ba936e
0x767060bbbd3e    49ffd3                  call r11                      < Root.include : 0x0000767060ba936e >
 .. nclude "namespaces/types.csl" include ;
0x767060bbbd41    c3                      ret
Word_Disassemble : word - 'wtdInclude' :: codeSize = 31
Word : 0x000076705cffdf06 :: Compiled at : 0x0000767060bbbd23
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 403.15 <::
 0x000076705cffdf06
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 404.69 : data = '76705cffdf06' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x000076705cffdf06
_Identifier

                  DLNode : S_Node : size = 88 : at 000076705cffdf06
union

                 _DLNode : n_DLNode : size = 24 : at 000076705cffdf06
union
0x000076705cffdf06  dlnode           *   n_After                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf0e  dlnode           *   n_Before                 = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e

                  dlnode : n_Node : size = 16 : at 000076705cffdf06
_node
union
0x000076705cffdf06  _node            *   n_After                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  _node            *   n_Head                   = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06

union
0x000076705cffdf0e  _node            *   n_Before                 = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e
0x000076705cffdf0e  _node            *   n_Tail                   = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e


union
0x000076705cffdf16  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x76705cffdf16
0x000076705cffdf1a  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x76705cffdf1a
0x000076705cffdf1c  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x76705cffdf1c
0x000076705cffdf1d  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x76705cffdf1d
0x000076705cffdf06  byte             *   n_unmap                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  byte             *   n_bData                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  int64            *   n_iData                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  int64                node                     = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  int64            *   n_CurrentNode            = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06


                 dobject : n_dobject : size = 32 : at 000076705cffdf06
union
0x000076705cffdf06  dlnode           *   do_After                 = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf0e  dlnode           *   do_Before                = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e

                  dlnode : do_Node : size = 16 : at 000076705cffdf06
_node
union
0x000076705cffdf06  _node            *   n_After                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  _node            *   n_Head                   = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06

union
0x000076705cffdf0e  _node            *   n_Before                 = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e
0x000076705cffdf0e  _node            *   n_Tail                   = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e


0x000076705cffdf16  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x76705cffdf16
0x000076705cffdf1a  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x76705cffdf1a
0x000076705cffdf1c  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x76705cffdf1c
0x000076705cffdf1d  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x76705cffdf1d
union
0x000076705cffdf1e  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x76705cffdf1e
0x000076705cffdf1e  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x76705cffdf1e
0x000076705cffdf1e  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x76705cffdf1e



           AttributeInfo : n_Attributes : size = 56 : at 000076705cffdf26
union
union
0x000076705cffdf26  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x76705cffdf26
0x000076705cffdf2e  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x76705cffdf2e
0x000076705cffdf36  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x76705cffdf36
0x000076705cffdf3e  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x76705cffdf3e
0x000076705cffdf46  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x76705cffdf46
0x000076705cffdf4a  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x76705cffdf4a
0x000076705cffdf4c  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x76705cffdf4c

union
0x000076705cffdf4e  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x76705cffdf4e
0x000076705cffdf4e  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x76705cffdf4e

union
0x000076705cffdf56  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x76705cffdf56
0x000076705cffdf56  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x76705cffdf56

0x000076705cffdf26  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x76705cffdf26

0x000076705cffdf5e  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x76705cffdf5e
0x000076705cffdf66  byte             *   S_Name                   = 0x00007670608c5cc2          offset = 0x60 : dataPtr = 0x76705cffdf66
        S_Name = 'wtdInclude'
0x000076705cffdf6e  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x76705cffdf6e
0x000076705cffdf76  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x76705cffdf76
0x000076705cffdf7e  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x76705cffdf7e
0x000076705cffdf86  uint64           *   S_PtrToValue             = 0x000076705cffdf96          offset = 0x80 : dataPtr = 0x76705cffdf86
0x000076705cffdf8e  block                Definition               = 0x0000767060bbbd23          offset = 0x88 : dataPtr = 0x76705cffdf8e
union
0x000076705cffdf96  uint64               S_Value                  = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96
0x000076705cffdf96  byte             *   S_BytePtr                = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96
0x000076705cffdf96  byte             *   S_Object                 = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96
0x000076705cffdf96  _Identifier      *   S_ValueWord              = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96

union
0x000076705cffdf9e  _Identifier      *   S_ContainingNamespace    = 0x0000767060d07454          offset = 0x98 : dataPtr = 0x76705cffdf9e
0x000076705cffdf9e  _Identifier      *   S_ContainingList         = 0x0000767060d07454          offset = 0x98 : dataPtr = 0x76705cffdf9e
0x000076705cffdf9e  _Identifier      *   S_Prototype              = 0x0000767060d07454          offset = 0x98 : dataPtr = 0x76705cffdf9e
 0x000076705cffdf06
Dump at : namespaces/compiler/c_syntax.csl : 405.54 :
Dump : Address = 0x000076705cffdf06 : Number = 184 :: (little endian dump)
0x000076705cffdf06 :  56 dd ff 5c 70 76 00 00  1c 76 d0 60 70 76 00 00  V..\pv.. .v.`pv..
0x000076705cffdf16 :  00 00 00 00 b0 01 00 00  00 00 00 00 00 00 00 00  ........ ........
0x000076705cffdf26 :  02 00 00 00 00 00 04 00  00 00 00 00 00 00 00 00  ........ ........
0x000076705cffdf36 :  00 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  ........ @.......
0x000076705cffdf46 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x000076705cffdf56 :  00 00 00 00 00 00 00 00  1f 00 00 00 00 00 00 00  ........ ........
0x000076705cffdf66 :  c2 5c 8c 60 70 76 00 00  30 00 04 04 00 00 00 00  .\.`pv.. 0.......
0x000076705cffdf76 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x000076705cffdf86 :  96 df ff 5c 70 76 00 00  23 bd bb 60 70 76 00 00  ...\pv.. #..`pv..
0x000076705cffdf96 :  23 bd bb 60 70 76 00 00  54 74 d0 60 70 76 00 00  #..`pv.. Tt.`pv..
0x000076705cffdfa6 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x000076705cffdfb6 :  be df ff 5c 70 76 00 00  00 00 00 00 00 00 00 00  ...\pv.. ........
 0x000076705cffdde6 0x000076705cffdf06 0x000076705cffdf06 0x000076705cffdf8e wtdInclude
Identifier = 7670606bcb7e, Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


 =============================
C_Syntax.tfw1 <:> csl compiled word
SourceCode for C_Syntax.tfw1 :>
void tfw1 ( Word * w ) { hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name ) ; hp ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_WordData->Filename ) ; }
Source code file location of tfw1 : "namespaces/compiler/c_syntax.csl" : 414.10 :: we are now at : namespaces/compiler/c_syntax.csl : 419.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbcff7 -- code size = 262 bytes
TypeSignature : Object
 -----------------------------
Word :: C_Syntax.tfw1 : definition = 0x0000767060bbcff7 : disassembly at namespaces/compiler/c_syntax.csl : 419.9 :
0x767060bbcff7    4d897e08                mov [r14+0x8], r15
0x767060bbcffb    4d8d7e08                lea r15, [r14+0x8]
0x767060bbcfff    4981c608000000          add r14, 0x8
 ..   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filenam ..
0x767060bbd006    498b47f8                mov rax, [r15-0x8]
   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename   ..
0x767060bbd00a    4881c088000000          add rax, 0x88
0x767060bbd011    488b00                  mov rax, [rax]
0x767060bbd014    4983c608                add r14, 0x8
 ..  void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename ..
0x767060bbd018    498906                  mov [r14], rax
0x767060bbd01b    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bbd025    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_F ..
0x767060bbd028    498b47f8                mov rax, [r15-0x8]
 .. {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_File ..
0x767060bbd02c    4881c060000000          add rax, 0x60
0x767060bbd033    488b00                  mov rax, [rax]
0x767060bbd036    4983c608                add r14, 0x8
 ..   {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Fi ..
0x767060bbd03a    498906                  mov [r14], rax
 ..  * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w ..
0x767060bbd03d    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd047    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. efinition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData- ..
0x767060bbd04a    498b47f8                mov rax, [r15-0x8]
 .. n ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filenam ..
0x767060bbd04e    4881c060000000          add rax, 0x60
0x767060bbd055    488b00                  mov rax, [rax]
0x767060bbd058    4983c608                add r14, 0x8
 .. finition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData-> ..
0x767060bbd05c    498906                  mov [r14], rax
 ..  w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_Word ..
0x767060bbd05f    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd069    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ame ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_ ..
0x767060bbd06c    498b47f8                mov rax, [r15-0x8]
 .. ->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->File ..
0x767060bbd070    4881c0b0000000          add rax, 0xb0
0x767060bbd077    488b00                  mov rax, [rax]
 .. e  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  } ..
0x767060bbd07a    4881c028000000          add rax, 0x28
0x767060bbd081    488b00                  mov rax, [rax]
0x767060bbd084    4983c608                add r14, 0x8
 .. ame  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  ..
0x767060bbd088    498906                  mov [r14], rax
 .. ->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps (  ..
0x767060bbd08b    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bbd095    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. e W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd098    498b47f8                mov rax, [r15-0x8]
 .. Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd09c    4881c0b0000000          add rax, 0xb0
0x767060bbd0a3    488b00                  mov rax, [rax]
 .. ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0a6    4881c028000000          add rax, 0x28
0x767060bbd0ad    488b00                  mov rax, [rax]
0x767060bbd0b0    4983c608                add r14, 0x8
 .. ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0b4    498906                  mov [r14], rax
0x767060bbd0b7    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd0c1    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. lename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0c4    498b47f8                mov rax, [r15-0x8]
 .. ame W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0c8    4881c0b0000000          add rax, 0xb0
0x767060bbd0cf    488b00                  mov rax, [rax]
 .. ta->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0d2    4881c028000000          add rax, 0x28
0x767060bbd0d9    488b00                  mov rax, [rax]
0x767060bbd0dc    4983c608                add r14, 0x8
 .. Data->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0e0    498906                  mov [r14], rax
 .. >W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0e3    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd0ed    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bbd0f0    4d8d77f8                lea r14, [r15-0x8]
0x767060bbd0f4    4d8b7e08                mov r15, [r14+0x8]
0x767060bbd0f8    4983ee08                sub r14, 0x8
 ..  ; ps ( w->W_WordData->Filename  ) ;  }  ..
0x767060bbd0fc    c3                      ret
Word_Disassemble : word - 'tfw1' :: codeSize = 262
Word : 0x000076705d0bdf29 :: Compiled at : 0x0000767060bbcff7
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 419.9 <::
 0x0000767060bbcff7 tfw1 0x0000767060bbcff7 tfw1 tfw1 0x00007670608c394c namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
 -----------------------------
WordDisassemble : word = 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 423.25 <::
 0x0000767060bbbd23 wtdInclude
 0x000076705faf8efe fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x000076705faf8efe fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x000076705cffdf06
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 434.69 : data = '76705cffdf06' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x000076705cffdf06
_Identifier

                  DLNode : S_Node : size = 88 : at 000076705cffdf06
union

                 _DLNode : n_DLNode : size = 24 : at 000076705cffdf06
union
0x000076705cffdf06  dlnode           *   n_After                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf0e  dlnode           *   n_Before                 = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e

                  dlnode : n_Node : size = 16 : at 000076705cffdf06
_node
union
0x000076705cffdf06  _node            *   n_After                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  _node            *   n_Head                   = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06

union
0x000076705cffdf0e  _node            *   n_Before                 = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e
0x000076705cffdf0e  _node            *   n_Tail                   = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e


union
0x000076705cffdf16  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x76705cffdf16
0x000076705cffdf1a  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x76705cffdf1a
0x000076705cffdf1c  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x76705cffdf1c
0x000076705cffdf1d  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x76705cffdf1d
0x000076705cffdf06  byte             *   n_unmap                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  byte             *   n_bData                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  int64            *   n_iData                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  int64                node                     = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  int64            *   n_CurrentNode            = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06


                 dobject : n_dobject : size = 32 : at 000076705cffdf06
union
0x000076705cffdf06  dlnode           *   do_After                 = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf0e  dlnode           *   do_Before                = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e

                  dlnode : do_Node : size = 16 : at 000076705cffdf06
_node
union
0x000076705cffdf06  _node            *   n_After                  = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06
0x000076705cffdf06  _node            *   n_Head                   = 0x000076705cffdd56          offset = 0x0 : dataPtr = 0x76705cffdf06

union
0x000076705cffdf0e  _node            *   n_Before                 = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e
0x000076705cffdf0e  _node            *   n_Tail                   = 0x0000767060d0761c          offset = 0x8 : dataPtr = 0x76705cffdf0e


0x000076705cffdf16  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x76705cffdf16
0x000076705cffdf1a  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x76705cffdf1a
0x000076705cffdf1c  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x76705cffdf1c
0x000076705cffdf1d  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x76705cffdf1d
union
0x000076705cffdf1e  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x76705cffdf1e
0x000076705cffdf1e  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x76705cffdf1e
0x000076705cffdf1e  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x76705cffdf1e



           AttributeInfo : n_Attributes : size = 56 : at 000076705cffdf26
union
union
0x000076705cffdf26  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x76705cffdf26
0x000076705cffdf2e  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x76705cffdf2e
0x000076705cffdf36  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x76705cffdf36
0x000076705cffdf3e  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x76705cffdf3e
0x000076705cffdf46  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x76705cffdf46
0x000076705cffdf4a  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x76705cffdf4a
0x000076705cffdf4c  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x76705cffdf4c

union
0x000076705cffdf4e  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x76705cffdf4e
0x000076705cffdf4e  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x76705cffdf4e

union
0x000076705cffdf56  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x76705cffdf56
0x000076705cffdf56  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x76705cffdf56

0x000076705cffdf26  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x76705cffdf26

0x000076705cffdf5e  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x76705cffdf5e
0x000076705cffdf66  byte             *   S_Name                   = 0x00007670608c5cc2          offset = 0x60 : dataPtr = 0x76705cffdf66
        S_Name = 'wtdInclude'
0x000076705cffdf6e  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x76705cffdf6e
0x000076705cffdf76  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x76705cffdf76
0x000076705cffdf7e  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x76705cffdf7e
0x000076705cffdf86  uint64           *   S_PtrToValue             = 0x000076705cffdf96          offset = 0x80 : dataPtr = 0x76705cffdf86
0x000076705cffdf8e  block                Definition               = 0x0000767060bbbd23          offset = 0x88 : dataPtr = 0x76705cffdf8e
union
0x000076705cffdf96  uint64               S_Value                  = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96
0x000076705cffdf96  byte             *   S_BytePtr                = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96
0x000076705cffdf96  byte             *   S_Object                 = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96
0x000076705cffdf96  _Identifier      *   S_ValueWord              = 0x0000767060bbbd23          offset = 0x90 : dataPtr = 0x76705cffdf96

union
0x000076705cffdf9e  _Identifier      *   S_ContainingNamespace    = 0x0000767060d07454          offset = 0x98 : dataPtr = 0x76705cffdf9e
0x000076705cffdf9e  _Identifier      *   S_ContainingList         = 0x0000767060d07454          offset = 0x98 : dataPtr = 0x76705cffdf9e
0x000076705cffdf9e  _Identifier      *   S_Prototype              = 0x0000767060d07454          offset = 0x98 : dataPtr = 0x76705cffdf9e

Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 16.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 441.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes,
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes,
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes,
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes,
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes,
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12366 : WordCreateCount = 13804 : WordsAdded = 5144 : FindWordCount = 152 : FindWordMaxCount = 156
RecycledWordCount : 484
WordsInRecycling : 0
MPFR library: 4.2.1
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
 =============================
Infix.tt <:> csl compiled word
SourceCode for Infix.tt :>
: tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name ps w->W_Filename W_WordData->Filename ps w->W_Filename W_WordData->Filename ps w->W_WordData->Filename ps ;
Source code file location of tt : "namespaces/compiler/c_syntax.csl" : 443.2 :: we are now at : namespaces/compiler/c_syntax.csl : 444.7
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbd428 -- code size = 319 bytes
TypeSignature : Object
 -----------------------------
Word :: Infix.tt : definition = 0x0000767060bbd428 : disassembly at namespaces/compiler/c_syntax.csl : 444.7 :
0x767060bbd428    4d897e08                mov [r14+0x8], r15
0x767060bbd42c    4d8d7e08                lea r15, [r14+0x8]
0x767060bbd430    4981c608000000          add r14, 0x8
 ..                     : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filen ..
0x767060bbd437    48b81cab8d6070760000    mov rax, 0x7670608dab1c
0x767060bbd441    4983c608                add r14, 0x8
0x767060bbd445    498906                  mov [r14], rax
 ..           : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w- ..
0x767060bbd448    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd452    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..        : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_ ..
0x767060bbd455    498b47f8                mov rax, [r15-0x8]
0x767060bbd459    488b00                  mov rax, [rax]
0x767060bbd45c    4983c608                add r14, 0x8
0x767060bbd460    498906                  mov [r14], rax
 ..    : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_File ..
0x767060bbd463    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bbd46d    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 .. : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filenam ..
0x767060bbd470    498b47f8                mov rax, [r15-0x8]
 : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W ..
0x767060bbd474    4881c088000000          add rax, 0x88
0x767060bbd47b    488b00                  mov rax, [rax]
0x767060bbd47e    4983c608                add r14, 0x8
   : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename ..
0x767060bbd482    498906                  mov [r14], rax
 .. w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData-> ..
0x767060bbd485    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bbd48f    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
 ..  "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fil ..
0x767060bbd492    498b47f8                mov rax, [r15-0x8]
 .. ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filena ..
0x767060bbd496    4881c060000000          add rax, 0x60
0x767060bbd49d    488b00                  mov rax, [rax]
0x767060bbd4a0    4983c608                add r14, 0x8
 .. "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->File ..
0x767060bbd4a4    498906                  mov [r14], rax
 ..  ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps  ..
0x767060bbd4a7    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd4b1    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w-> ..
0x767060bbd4b4    498b47f8                mov rax, [r15-0x8]
 .. w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordDa ..
0x767060bbd4b8    4881c060000000          add rax, 0x60
0x767060bbd4bf    488b00                  mov rax, [rax]
0x767060bbd4c2    4983c608                add r14, 0x8
 .. w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W ..
0x767060bbd4c6    498906                  mov [r14], rax
 .. ition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->File ..
0x767060bbd4c9    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd4d3    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. on hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filenam ..
0x767060bbd4d6    498b47f8                mov rax, [r15-0x8]
 .. e ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd4da    4881c0b0000000          add rax, 0xb0
0x767060bbd4e1    488b00                  mov rax, [rax]
 ..  S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd4e4    4881c028000000          add rax, 0x28
0x767060bbd4eb    488b00                  mov rax, [rax]
0x767060bbd4ee    4983c608                add r14, 0x8
 .. me S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd4f2    498906                  mov [r14], rax
 .. s w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd4f5    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd4ff    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd502    498b47f8                mov rax, [r15-0x8]
 .. _WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd506    4881c0b0000000          add rax, 0xb0
0x767060bbd50d    488b00                  mov rax, [rax]
 .. ilename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd510    4881c028000000          add rax, 0x28
0x767060bbd517    488b00                  mov rax, [rax]
0x767060bbd51a    4983c608                add r14, 0x8
 .. >Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd51e    498906                  mov [r14], rax
 .. s w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd521    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd52b    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd52e    498b47f8                mov rax, [r15-0x8]
 .. _Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd532    4881c0b0000000          add rax, 0xb0
0x767060bbd539    488b00                  mov rax, [rax]
 .. WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd53c    4881c028000000          add rax, 0x28
0x767060bbd543    488b00                  mov rax, [rax]
0x767060bbd546    4983c608                add r14, 0x8
 .. W_WordData->Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd54a    498906                  mov [r14], rax
 .. >Filename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd54d    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd557    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bbd55a    4d8d77f8                lea r14, [r15-0x8]
0x767060bbd55e    4d8b7e08                mov r15, [r14+0x8]
0x767060bbd562    4983ee08                sub r14, 0x8
 .. lename  ps w->W_WordData->Filename ps ;  ..
0x767060bbd566    c3                      ret
Word_Disassemble : word - 'tt' :: codeSize = 319
Word : 0x000076705d0c76b1 :: Compiled at : 0x0000767060bbd428
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 444.7 <::

 0x000076705cffdf06
tt :  0x000076705cffdd56 0x0000767060bbbd23 wtdInclude wtdInclude namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x000076705d0caed1
tti 0x0000767060bbd56c tti tti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
ctti
ctti : word = 76705d0ce391 : Definition = 767060bbd695 ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
C_Syntax.ctti <:> csl compiled word
SourceCode for C_Syntax.ctti :>
void ctti ( Word * w | ptr l ) { ps ( "\nctti" ) ; l = w->Definition ; oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name ; ps(w->S_Name) ; ps ( ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps(ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps (ptr) ; ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ; ptr = w->W_WordData ; }
Source code file location of ctti : "namespaces/compiler/c_syntax.csl" : 451.10 :: we are now at : namespaces/compiler/c_syntax.csl : 463.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbd695 -- code size = 469 bytes
TypeSignature : Object
 -----------------------------
Word :: C_Syntax.ctti : definition = 0x0000767060bbd695 : disassembly at namespaces/compiler/c_syntax.csl : 463.9 :
0x767060bbd695    4d897e08                mov [r14+0x8], r15
0x767060bbd699    4d8d7e08                lea r15, [r14+0x8]
0x767060bbd69d    4981c618000000          add r14, 0x18
 .. tti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; p ..
0x767060bbd6a4    48b805ad8d6070760000    mov rax, 0x7670608dad05
0x767060bbd6ae    4983c608                add r14, 0x8
0x767060bbd6b2    498906                  mov [r14], rax
0x767060bbd6b5    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd6bf    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ;  ..
0x767060bbd6c2    498b47f8                mov rax, [r15-0x8]
 ..  l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps( ..
0x767060bbd6c6    4881c088000000          add rax, 0x88
0x767060bbd6cd    488b00                  mov rax, [rax]
 .. w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Nam ..
0x767060bbd6d0    49894710                mov [r15+0x10], rax
 ..  ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ..
0x767060bbd6d4    48b83e726c6070760000    mov rax, 0x7670606c723e
0x767060bbd6de    488bf8                  mov rdi, rax
 .. tti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr =  ..
0x767060bbd6e1    498b47f8                mov rax, [r15-0x8]
0x767060bbd6e5    4881c000000000          add rax, 0x0
0x767060bbd6ec    488bf0                  mov rsi, rax
 ..  : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W ..
0x767060bbd6ef    498b4710                mov rax, [r15+0x10]
0x767060bbd6f3    488bd0                  mov rdx, rax
 .. "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Na ..
0x767060bbd6f6    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbd700    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbd70a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. x : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_ ..
0x767060bbd70d    498b47f8                mov rax, [r15-0x8]
 ..  Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_Wor ..
0x767060bbd711    4881c060000000          add rax, 0x60
0x767060bbd718    488b00                  mov rax, [rax]
 .. d = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filen ..
0x767060bbd71b    49894708                mov [r15+0x8], rax
 .. = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filen ..
0x767060bbd71f    498b4708                mov rax, [r15+0x8]
0x767060bbd723    4983c608                add r14, 0x8
0x767060bbd727    498906                  mov [r14], rax
 .. on = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Fi ..
0x767060bbd72a    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd734    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(pt ..
0x767060bbd737    498b47f8                mov rax, [r15-0x8]
 .. = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr ..
0x767060bbd73b    4881c060000000          add rax, 0x60
0x767060bbd742    488b00                  mov rax, [rax]
 ..  w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ..
0x767060bbd745    49894708                mov [r15+0x8], rax
 ..  ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filena ..
0x767060bbd749    498b47f8                mov rax, [r15-0x8]
 .. (ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename  ..
0x767060bbd74d    4881c060000000          add rax, 0x60
0x767060bbd754    488b00                  mov rax, [rax]
0x767060bbd757    4983c608                add r14, 0x8
 .. ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filenam ..
0x767060bbd75b    498906                  mov [r14], rax
 .. e ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Fil ..
0x767060bbd75e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd768    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Fil ..
0x767060bbd76b    498b4708                mov rax, [r15+0x8]
0x767060bbd76f    4983c608                add r14, 0x8
0x767060bbd773    498906                  mov [r14], rax
 .. r = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData ..
0x767060bbd776    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd780    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. s(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr)  ..
0x767060bbd783    498b47f8                mov rax, [r15-0x8]
 .. ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr =  ..
0x767060bbd787    4881c0b0000000          add rax, 0xb0
0x767060bbd78e    488b00                  mov rax, [rax]
 .. ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordDat ..
0x767060bbd791    4881c028000000          add rax, 0x28
0x767060bbd798    488b00                  mov rax, [rax]
0x767060bbd79b    49894708                mov [r15+0x8], rax
 .. _Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps ..
0x767060bbd79f    498b4708                mov rax, [r15+0x8]
0x767060bbd7a3    4983c608                add r14, 0x8
0x767060bbd7a7    498906                  mov [r14], rax
 .. w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ..
0x767060bbd7aa    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd7b4    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps ( ..
0x767060bbd7b7    498b47f8                mov rax, [r15-0x8]
 .. name  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData ..
0x767060bbd7bb    4881c0b0000000          add rax, 0xb0
0x767060bbd7c2    488b00                  mov rax, [rax]
 .. ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename)  ..
0x767060bbd7c5    4881c028000000          add rax, 0x28
0x767060bbd7cc    488b00                  mov rax, [rax]
 .. me W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr)  ..
0x767060bbd7cf    49894708                mov [r15+0x8], rax
 .. _Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W ..
0x767060bbd7d3    498b4708                mov rax, [r15+0x8]
0x767060bbd7d7    4983c608                add r14, 0x8
0x767060bbd7db    498906                  mov [r14], rax
 ..  w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr =  ..
0x767060bbd7de    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd7e8    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ta->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd7eb    498b47f8                mov rax, [r15-0x8]
 .. >Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd7ef    4881c0b0000000          add rax, 0xb0
0x767060bbd7f6    488b00                  mov rax, [rax]
 ..  ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd7f9    4881c028000000          add rax, 0x28
0x767060bbd800    488b00                  mov rax, [rax]
0x767060bbd803    49894708                mov [r15+0x8], rax
 ..   ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd807    498b4708                mov rax, [r15+0x8]
0x767060bbd80b    4983c608                add r14, 0x8
0x767060bbd80f    498906                  mov [r14], rax
 ..       ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd812    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd81c    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd81f    498b47f8                mov rax, [r15-0x8]
 .. ordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd823    4881c0b0000000          add rax, 0xb0
0x767060bbd82a    488b00                  mov rax, [rax]
 .. ename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd82d    4881c028000000          add rax, 0x28
0x767060bbd834    488b00                  mov rax, [rax]
0x767060bbd837    4983c608                add r14, 0x8
 .. ilename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd83b    498906                  mov [r14], rax
 ..  w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd83e    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbd848    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd84b    498b47f8                mov rax, [r15-0x8]
 .. >W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd84f    4881c0b0000000          add rax, 0xb0
0x767060bbd856    488b00                  mov rax, [rax]
 ..  ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd859    49894708                mov [r15+0x8], rax
0x767060bbd85d    4d8d77f8                lea r14, [r15-0x8]
0x767060bbd861    4d8b7e08                mov r15, [r14+0x8]
0x767060bbd865    4983ee08                sub r14, 0x8
 .. ename) ;     ptr = w->W_WordData ;    }  ..
0x767060bbd869    c3                      ret
Word_Disassemble : word - 'ctti' :: codeSize = 469
Word : 0x000076705d0ce391 :: Compiled at : 0x0000767060bbd695
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 463.9 <::

ctti
ctti : word = 76705d0ce391 : Definition = 767060bbd695 ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x000076705d0ce391 0x000076705d0ce449
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 465.89 : data = '76705d0ce449' : typedef = 'WordData'
               _WordData :: size = 248 :: at : 0x000076705d0ce449
_WordData
0x000076705d0ce449  uint64               WD_RunType               = 0x0000000000000000          offset = 0x0 : dataPtr = 0x76705d0ce449
0x000076705d0ce451  Namespace        *   TypeNamespace            = 0x0000000000000000          offset = 0x8 : dataPtr = 0x76705d0ce451
0x000076705d0ce459  byte             *   TypeNamespaceName        = 0x0000641cca15acfa          offset = 0x10 : dataPtr = 0x76705d0ce459
        TypeNamespaceName = 'Word'
0x000076705d0ce461  byte             *   CodeStart                = 0x0000767060bbd695          offset = 0x18 : dataPtr = 0x76705d0ce461
union
0x000076705d0ce469  byte             *   WD_Coding                = 0x0000767060bbd690          offset = 0x20 : dataPtr = 0x76705d0ce469
0x000076705d0ce469  byte             *   WD_LogicCodingAfter      = 0x0000767060bbd690          offset = 0x20 : dataPtr = 0x76705d0ce469

0x000076705d0ce471  byte             *   Filename                 = 0x00007670608c394c          offset = 0x28 : dataPtr = 0x76705d0ce471
        Filename = 'namespaces/compiler/c_syntax.csl'
0x000076705d0ce479  int64                LineNumber               = 0x00000000000001c3          offset = 0x30 : dataPtr = 0x76705d0ce479
0x000076705d0ce481  int64                TokenStart_LineIndex     = 0x000000000000000a          offset = 0x38 : dataPtr = 0x76705d0ce481
0x000076705d0ce489  int64                NumberOfNonRegisterArgs  = 0x0000000000000001          offset = 0x40 : dataPtr = 0x76705d0ce489
0x000076705d0ce491  int64                NumberOfNonRegisterLocals = 0x0000000000000002         offset = 0x48 : dataPtr = 0x76705d0ce491
0x000076705d0ce499  int64                NumberOfVariables        = 0x0000000000000003          offset = 0x50 : dataPtr = 0x76705d0ce499
0x000076705d0ce4a1  byte             *   ObjectCode               = 0x0000000000000000          offset = 0x58 : dataPtr = 0x76705d0ce4a1
0x000076705d0ce4a9  byte             *   StackPushRegisterCode    = 0x0000000000000000          offset = 0x60 : dataPtr = 0x76705d0ce4a9
0x000076705d0ce4b1  Word             *   AliasOf                  = 0x0000000000000000          offset = 0x68 : dataPtr = 0x76705d0ce4b1
0x000076705d0ce4b9  Word             *   OriginalWord             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x76705d0ce4b9
0x000076705d0ce4c1  int64                Offset                   = 0x0000000000000000          offset = 0x78 : dataPtr = 0x76705d0ce4c1
0x000076705d0ce4c9  uint8                RegToUse                 = '' : 0x00           offset = 0x80 : dataPtr = 0x76705d0ce4c9
0x000076705d0ce4ca  uint8                Opt_Rm                   = '' : 0x00           offset = 0x81 : dataPtr = 0x76705d0ce4ca
0x000076705d0ce4cb  uint8                Opt_Reg                  = '' : 0x00           offset = 0x82 : dataPtr = 0x76705d0ce4cb
0x000076705d0ce4cc  uint8                SrcReg                   = '' : 0x00           offset = 0x83 : dataPtr = 0x76705d0ce4cc
0x000076705d0ce4cd  uint8                DstReg                   = '' : 0x00           offset = 0x84 : dataPtr = 0x76705d0ce4cd
0x000076705d0ce4ce  uint8                RegFlags                 = '' : 0x00           offset = 0x85 : dataPtr = 0x76705d0ce4ce
0x000076705d0ce4cf  uint8                OpInsnGroup              = '' : 0x00           offset = 0x86 : dataPtr = 0x76705d0ce4cf
0x000076705d0ce4d0  uint8                OpInsnCode               = '' : 0x00           offset = 0x87 : dataPtr = 0x76705d0ce4d0
0x000076705d0ce4d1  byte                 TypeSignature            = 'O' : 0x4f          offset = 0x88 : dataPtr = 0x76705d0ce4d1
union
0x000076705d0ce4e1  dllist           *   LocalNamespaces          = 0x0000000000000000          offset = 0x98 : dataPtr = 0x76705d0ce4e1

                  dllist : Location : size = 24 : at 000076705d0ce4e1

                 _dllist : l_List : size = 16 : at 000076705d0ce4e1
_node
union
0x000076705d0ce4e1  _node            *   n_After                  = 0x0000000000000000          offset = 0x0 : dataPtr = 0x76705d0ce4e1
0x000076705d0ce4e1  _node            *   n_Head                   = 0x0000000000000000          offset = 0x0 : dataPtr = 0x76705d0ce4e1

union
0x000076705d0ce4e9  _node            *   n_Before                 = 0x00007670608dadbf          offset = 0x8 : dataPtr = 0x76705d0ce4e9
0x000076705d0ce4e9  _node            *   n_Tail                   = 0x00007670608dadbf          offset = 0x8 : dataPtr = 0x76705d0ce4e9


                 _dllist : node : size = 16 : at 000076705d0ce4f1
_node
union
0x000076705d0ce4f1  _node            *   n_After                  = 0x000076705d7f8c68          offset = 0x0 : dataPtr = 0x76705d0ce4f1
0x000076705d0ce4f1  _node            *   n_Head                   = 0x000076705d7f8c68          offset = 0x0 : dataPtr = 0x76705d0ce4f1

union
0x000076705d0ce4f9  _node            *   n_Before                 = 0x0000000000000000          offset = 0x8 : dataPtr = 0x76705d0ce4f9
0x000076705d0ce4f9  _node            *   n_Tail                   = 0x0000000000000000          offset = 0x8 : dataPtr = 0x76705d0ce4f9

0x000076705d0ce4f1  _dllist          *   l_CurrentNode            = 0x000076705d7f8c68          offset = 0x10 : dataPtr = 0x76705d0ce4f1
0x000076705d0ce4e1  dllist           *   OurLocation              = 0x0000000000000000          offset = 0x98 : dataPtr = 0x76705d0ce4e1
0x000076705d0ce4e1  Word             *   CompiledAsPartOf         = 0x0000000000000000          offset = 0x98 : dataPtr = 0x76705d0ce4e1

union
0x000076705d0ce4e9  int64            *   WD_ArrayDimensions       = 0x00007670608dadbf          offset = 0xa0 : dataPtr = 0x76705d0ce4e9
0x000076705d0ce4e9  byte             *   WD_OriginalCodeText      = 0x00007670608dadbf          offset = 0xa0 : dataPtr = 0x76705d0ce4e9
        WD_OriginalCodeText = 'void ctti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    } '

0x000076705d0ce4f1  Stack            *   WD_NamespaceStack        = 0x000076705d7f8c68          offset = 0xa8 : dataPtr = 0x76705d0ce4f1
union
0x000076705d0ce4f9  ListObject       *   LambdaBody               = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x76705d0ce4f9
0x000076705d0ce4f9  int64                AccumulatedOffset        = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x76705d0ce4f9

union
0x000076705d0ce501  ListObject       *   LambdaArgs               = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x76705d0ce501
0x000076705d0ce501  int64                Index                    = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x76705d0ce501
0x000076705d0ce501  int64                WD_ArrayNumberOfDimensions = 0x0000000000000000                offset = 0xb8 : dataPtr = 0x76705d0ce501

0x000076705d0ce509  dllist           *   SourceCodeWordList       = 0x000076705d7f7148          offset = 0xc0 : dataPtr = 0x76705d0ce509
0x000076705d0ce511  int64                SourceCodeMemSpaceRandMarker = 0x0000000000000000              offset = 0xc8 : dataPtr = 0x76705d0ce511
0x000076705d0ce519  dllist           *   DebugWordList            = 0x0000000000000000          offset = 0xd0 : dataPtr = 0x76705d0ce519
0x000076705d0ce521  int64                StartCharRlIndex         = 0x0000000000000014          offset = 0xd8 : dataPtr = 0x76705d0ce521
0x000076705d0ce529  int64                SC_WordIndex             = 0x0000000000000015          offset = 0xe0 : dataPtr = 0x76705d0ce529
0x000076705d0ce531  Identifier       *   CSLWord                  = 0x0000000000000000          offset = 0xe8 : dataPtr = 0x76705d0ce531
0x000076705d0ce539  Identifier       *   BaseObject               = 0x0000000000000000          offset = 0xf0 : dataPtr = 0x76705d0ce539
DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Experimental3.byteTest <:> structure : size = 0byteTest alias for _byteTest, immediate
SourceCode for Experimental3._byteTest :>
typedef struct _byteTest { byte a8_123 ; int64 a64_123 ; byte b8_123 ; byte c8_123 ; union { int64 u64_123 ; int32 u32_123 ; int8 u8_123 ; } ; int32 a32_123 ; byte d8_123 ; int16 a16_123 ; } byteTest, abyteTest ;
Source code file location of byteTest : "namespaces/compiler/c_syntax.csl" : 493.2 :: we are now at : namespaces/compiler/c_syntax.csl : 495.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x5fb056be -- code size = 34 bytes
 -----------------------------
Word :: Experimental3.byteTest : definition = 0x000076705fb056be : disassembly at namespaces/compiler/c_syntax.csl : 495.13 :
0x76705fb056be    48bf69810d5d70760000    mov rdi, 0x76705d0d8169
0x76705fb056c8    49ba30bf0dca1c640000    mov r10, 0x641cca0dbf30
0x76705fb056d2    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x76705fb056dc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x76705fb056df    c3                      ret
Word_Disassemble : word - 'byteTest' :: codeSize = 34
Word : 0x000076705d0d9791 :: Compiled at : 0x000076705fb056be
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 495.13 <::

bt.size = 26
DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
C_Syntax.bttt <:> csl compiled word
SourceCode for C_Syntax.bttt :>
void bttt ( byteTest * xbt | btt byte bbtt) { oPrintf ( "\nbtt" ) ; dump ( &xbt, xbt.size ) ; xbt.a8_123 = 'a' ; bbtt = xbt.a8_123 ; oPrintf ( "\nbtt = %c", bbtt ) ; xbt.a64_123 = 0x123456789abcdef ; xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ; xbt.a32_123 = 0x12345678 ; xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ; xbt.d8_123 = 'd' ; oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ; oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ; oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ; oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ; oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ; oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ; oPrintf ( "\nbtt = %lx", btt ) ; dump ( &xbt, xbt.size ) ; hp ( &xbt.a8_123 ) ; }
Source code file location of bttt : "namespaces/compiler/c_syntax.csl" : 499.5 :: we are now at : namespaces/compiler/c_syntax.csl : 525.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbd86f -- code size = 903 bytes
TypeSignature : Object
 -----------------------------
Word :: C_Syntax.bttt : definition = 0x0000767060bbd86f : disassembly at namespaces/compiler/c_syntax.csl : 525.9 :
0x767060bbd86f    4d897e08                mov [r14+0x8], r15
0x767060bbd873    4d8d7e08                lea r15, [r14+0x8]
0x767060bbd877    4981c618000000          add r14, 0x18
 .. bt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      o ..
0x767060bbd87e    48b8baf26c6070760000    mov rax, 0x7670606cf2ba
0x767060bbd888    488bf8                  mov rdi, rax
 .. teTest * xbt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_12 ..
0x767060bbd88b    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbd895    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbd89f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..     oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", b ..
0x767060bbd8a2    498b47f8                mov rax, [r15-0x8]
0x767060bbd8a6    4881c000000000          add rax, 0x0
0x767060bbd8ad    4983c608                add r14, 0x8
0x767060bbd8b1    498906                  mov [r14], rax
 .. Printf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ..
0x767060bbd8b4    48b8e1830d5d70760000    mov rax, 0x76705d0d83e1
0x767060bbd8be    488b00                  mov rax, [rax]
0x767060bbd8c1    4983c608                add r14, 0x8
0x767060bbd8c5    498906                  mov [r14], rax
 .. tt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt  ..
0x767060bbd8c8    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bbd8d2    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbd8dc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = ..
0x767060bbd8df    498b47f8                mov rax, [r15-0x8]
0x767060bbd8e3    4881c000000000          add rax, 0x0
0x767060bbd8ea    b161                    mov cl, 0x61
 .. &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x12345678 ..
0x767060bbd8ec    488908                  mov [rax], rcx
 ..        xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b ..
0x767060bbd8ef    498b47f8                mov rax, [r15-0x8]
0x767060bbd8f3    4881c000000000          add rax, 0x0
0x767060bbd8fa    488b00                  mov rax, [rax]
 .. e ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;     ..
0x767060bbd8fd    49894710                mov [r15+0x10], rax
 ..    bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = ' ..
0x767060bbd901    48b85ff66c6070760000    mov rax, 0x7670606cf65f
0x767060bbd90b    488bf8                  mov rdi, rax
 .. a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_1 ..
0x767060bbd90e    498b4710                mov rax, [r15+0x10]
0x767060bbd912    488bf0                  mov rsi, rax
 .. = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt. ..
0x767060bbd915    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbd91f    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbd929    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbd92c    498b47f8                mov rax, [r15-0x8]
 .. ntf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      ..
0x767060bbd930    4881c001000000          add rax, 0x1
0x767060bbd937    48b9efcdab8967452301    mov rcx, 0x123456789abcdef
 .. nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32 ..
0x767060bbd941    488908                  mov [rax], rcx
0x767060bbd944    498b47f8                mov rax, [r15-0x8]
 .. 64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_ ..
0x767060bbd948    4881c009000000          add rax, 0x9
0x767060bbd94f    b162                    mov cl, 0x62
 .. = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0 ..
0x767060bbd951    488908                  mov [rax], rcx
 .. 56789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567 ..
0x767060bbd954    498b47f8                mov rax, [r15-0x8]
 .. 9abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, bt ..
0x767060bbd958    4881c00a000000          add rax, 0xa
0x767060bbd95f    b163                    mov cl, 0x63
 ..  ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xe ..
0x767060bbd961    488908                  mov [rax], rcx
 .. xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987 ..
0x767060bbd964    498b47f8                mov rax, [r15-0x8]
 .. b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba09876543 ..
0x767060bbd968    4881c018000000          add rax, 0x18
0x767060bbd96f    66b93412                mov cx, 0x1234
 ..  'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     ..
0x767060bbd973    488908                  mov [rax], rcx
0x767060bbd976    498b47f8                mov rax, [r15-0x8]
 .. 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;  ..
0x767060bbd97a    4881c013000000          add rax, 0x13
0x767060bbd981    b978563412              mov ecx, 0x12345678
 .. t.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPri ..
0x767060bbd986    488908                  mov [rax], rcx
 ..  ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_12 ..
0x767060bbd989    498b47f8                mov rax, [r15-0x8]
 ..     xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 =  ..
0x767060bbd98d    4881c00b000000          add rax, 0xb
0x767060bbd994    b967452301              mov ecx, 0x1234567
 .. a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ",  ..
0x767060bbd999    488908                  mov [rax], rcx
 .. 678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;   ..
0x767060bbd99c    49bb2143658709badc0e    mov r11, 0xedcba0987654321
 .. 2345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ..
0x767060bbd9a6    4d895f08                mov [r15+0x8], r11
 .. 234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_12 ..
0x767060bbd9aa    498b47f8                mov rax, [r15-0x8]
 .. 67, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 =  ..
0x767060bbd9ae    4881c017000000          add rax, 0x17
0x767060bbd9b5    b164                    mov r9b, 0x64
 ..  = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx " ..
0x767060bbd9b7    488908                  mov [rax], rcx
 ..      xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      ..
0x767060bbd9ba    48b8e9046d6070760000    mov rax, 0x7670606d04e9
0x767060bbd9c4    488bf8                  mov rdi, rax
 ..     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 ..
0x767060bbd9c7    498b47f8                mov rax, [r15-0x8]
 .. oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0 ..
0x767060bbd9cb    4881c018000000          add rax, 0x18
0x767060bbd9d2    488b00                  mov rax, [rax]
0x767060bbd9d5    488bf0                  mov rsi, rax
 .. 87654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_12 ..
0x767060bbd9d8    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbd9e2    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbd9ec    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;     ..
0x767060bbd9ef    48b8fd046d6070760000    mov rax, 0x7670606d04fd
0x767060bbd9f9    488bf8                  mov rdi, rax
 ..    oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 ..
0x767060bbd9fc    498b47f8                mov rax, [r15-0x8]
 .. Printf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0 ..
0x767060bbda00    4881c013000000          add rax, 0x13
0x767060bbda07    488b00                  mov rax, [rax]
0x767060bbda0a    488bf0                  mov rsi, rax
 .. 16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_1 ..
0x767060bbda0d    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbda17    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbda21    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. %lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;     ..
0x767060bbda24    48b812056d6070760000    mov rax, 0x7670606d0512
0x767060bbda2e    488bf8                  mov rdi, rax
 ..    oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123  ..
0x767060bbda31    498b47f8                mov rax, [r15-0x8]
 .. Printf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ..
0x767060bbda35    4881c001000000          add rax, 0x1
0x767060bbda3c    488b00                  mov rax, [rax]
0x767060bbda3f    488bf0                  mov rsi, rax
 .. 2_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_1 ..
0x767060bbda42    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbda4c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbda56    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. %lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPr ..
0x767060bbda59    48b827056d6070760000    mov rax, 0x7670606d0527
0x767060bbda63    488bf8                  mov rdi, rax
 ..    oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c  ..
0x767060bbda66    498b47f8                mov rax, [r15-0x8]
 .. Printf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", x ..
0x767060bbda6a    4881c00b000000          add rax, 0xb
0x767060bbda71    488b00                  mov rax, [rax]
0x767060bbda74    488bf0                  mov rsi, rax
 .. 4_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 )  ..
0x767060bbda77    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbda81    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbda8b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. %lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf  ..
0x767060bbda8e    48b83c056d6070760000    mov rax, 0x7670606d053c
0x767060bbda98    488bf8                  mov rdi, rax
 .. ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c " ..
0x767060bbda9b    498b47f8                mov rax, [r15-0x8]
0x767060bbda9f    4881c000000000          add rax, 0x0
0x767060bbdaa6    488b00                  mov rax, [rax]
0x767060bbdaa9    488bf0                  mov rsi, rax
 .. 2_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;     ..
0x767060bbdaac    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbdab6    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdac0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf  ..
0x767060bbdac3    48b84d056d6070760000    mov rax, 0x7670606d054d
0x767060bbdacd    488bf8                  mov rdi, rax
 .. ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c " ..
0x767060bbdad0    498b47f8                mov rax, [r15-0x8]
 ..    oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xb ..
0x767060bbdad4    4881c009000000          add rax, 0x9
0x767060bbdadb    488b00                  mov rax, [rax]
0x767060bbdade    488bf0                  mov rsi, rax
 .. bt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;     ..
0x767060bbdae1    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbdaeb    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdaf5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf  ..
0x767060bbdaf8    48b85e056d6070760000    mov rax, 0x7670606d055e
0x767060bbdb02    488bf8                  mov rdi, rax
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt  ..
0x767060bbdb05    498b47f8                mov rax, [r15-0x8]
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;  ..
0x767060bbdb09    4881c00a000000          add rax, 0xa
0x767060bbdb10    488b00                  mov rax, [rax]
0x767060bbdb13    488bf0                  mov rsi, rax
 .. bt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;     ..
0x767060bbdb16    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbdb20    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdb2a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ..
0x767060bbdb2d    48b86f056d6070760000    mov rax, 0x7670606d056f
0x767060bbdb37    488bf8                  mov rdi, rax
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a ..
0x767060bbdb3a    498b47f8                mov rax, [r15-0x8]
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_12 ..
0x767060bbdb3e    4881c017000000          add rax, 0x17
0x767060bbdb45    488b00                  mov rax, [rax]
0x767060bbdb48    488bf0                  mov rsi, rax
 .. bt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt ..
0x767060bbdb4b    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbdb55    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdb5f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdb62    48b880056d6070760000    mov rax, 0x7670606d0580
0x767060bbdb6c    488bf8                  mov rdi, rax
 .. 123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdb6f    498b4708                mov rax, [r15+0x8]
0x767060bbdb73    488bf0                  mov rsi, rax
 .. bt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdb76    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbdb80    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdb8a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdb8d    498b47f8                mov rax, [r15-0x8]
0x767060bbdb91    4881c000000000          add rax, 0x0
0x767060bbdb98    4983c608                add r14, 0x8
0x767060bbdb9c    498906                  mov [r14], rax
 .. btt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdb9f    48b8e1830d5d70760000    mov rax, 0x76705d0d83e1
0x767060bbdba9    488b00                  mov rax, [rax]
0x767060bbdbac    4983c608                add r14, 0x8
0x767060bbdbb0    498906                  mov [r14], rax
 .. oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdbb3    49bac00213ca1c640000    mov r10, 0x641cca1302c0
0x767060bbdbbd    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdbc7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdbca    498b47f8                mov rax, [r15-0x8]
0x767060bbdbce    4881c000000000          add rax, 0x0
0x767060bbdbd5    4983c608                add r14, 0x8
0x767060bbdbd9    498906                  mov [r14], rax
0x767060bbdbdc    49bb2895ba6070760000    mov r11, 0x767060ba9528
0x767060bbdbe6    49ffd3                  call r11                      < Int.hp : 0x0000767060ba9528 >
0x767060bbdbe9    4d8d77f8                lea r14, [r15-0x8]
0x767060bbdbed    4d8b7e08                mov r15, [r14+0x8]
0x767060bbdbf1    4983ee08                sub r14, 0x8
 .. bt.size ) ;      hp ( &xbt.a8_123 ) ; }  ..
0x767060bbdbf5    c3                      ret
Word_Disassemble : word - 'bttt' :: codeSize = 903
Word : 0x000076705d0d9d49 :: Compiled at : 0x0000767060bbd86f
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 525.9 <::

btt
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x00007670609a95f5 : Number = 26 :: (little endian dump)
0x00007670609a95f5 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........
0x00007670609a9605 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........

btt = a
bt.a16_123 = 0x12345
bt.a32_123 = 0x123456412345678
bt.a64_123 = 0x123456789abcdef
bt.u32_123 = 0x1234567
bt.a8_123 = a
bt.b8_123 = b
bt.c8_123 = c
bt.c8_123 = d
btt = edcba0987654321
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x00007670609a95f5 : Number = 26 :: (little endian dump)
0x00007670609a95f5 :  61 ef cd ab 89 67 45 23  01 62 63 67 45 23 01 00  a....gE# .bcgE#..
0x00007670609a9605 :  00 00 00 78 56 34 12 64  45 23 01 00 00 00 00 01  ...xV4.d E#......
 0x00007670609a95f5
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 527.40 : data = '76705d0e70a9' : typedef = 'byteTest'
               _byteTest :: size = 26 :: at : 0x000076705d0e70a9
_byteTest
0x000076705d0e70a9  byte                 a8_123                   = 'a' : 0x61          offset = 0x0 : dataPtr = 0x76705d0e70a9
0x000076705d0e70aa  int64                a64_123                  = 0x31000076705d0d9b          offset = 0x1 : dataPtr = 0x76705d0e70aa
0x000076705d0e70b2  byte                 b8_123                   = '' : 0xffffff83            offset = 0x9 : dataPtr = 0x76705d0e70b2
' : 0x0d705d0e70b3  byteoffset = 0xa : dataPtr = 0x76705d0e70b3   = '
union
0x000076705d0e70b4  int64                u64_123                  = 0x000000000076705d          offset = 0xb : dataPtr = 0x76705d0e70b4
0x000076705d0e70b4  int32                u32_123                  = 0x0076705d          offset = 0xb : dataPtr = 0x76705d0e70b4
0x000076705d0e70b4  int8                 u8_123                   = ']' : 0x5d          offset = 0xb : dataPtr = 0x76705d0e70b4

0x000076705d0e70bc  int32                a32_123                  = 0x0001b000          offset = 0x13 : dataPtr = 0x76705d0e70bc
0x000076705d0e70c0  byte                 d8_123                   = '' : 0x00           offset = 0x17 : dataPtr = 0x76705d0e70c0
0x000076705d0e70c1  int16                a16_123                  = 0x0000              offset = 0x18 : dataPtr = 0x76705d0e70c1
 0x0000000012345678
 0x0000000001234567
System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 536.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes,
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes,
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes,
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes,
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes,
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12479 : WordCreateCount = 13923 : WordsAdded = 5186 : FindWordCount = 100 : FindWordMaxCount = 161
RecycledWordCount : 484
WordsInRecycling : 0
MPFR library: 4.2.1
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
Word size =  184
WordData size =  248
DLNode size =  88
dobject size =  32
AttributeInfo size =  56
 =============================
Experimental.Word <:> structure : size = 0Word alias for _Identifier, immediate
SourceCode for Experimental._Identifier :>
typedef struct _Identifier { DLNode S_Node ; int64 CodeSize ; byte * S_Name ; uint64 State ; dllist * S_SymbolList ; uint64 S_DObjectValue ; uint64 * S_PtrToValue ; block Definition ; union { uint64 S_Value ; byte * S_BytePtr ; byte * S_Object ; struct _Identifier * S_ValueWord ; } ; union { struct _Identifier * S_ContainingNamespace ; struct _Identifier * S_ContainingList ; struct _Identifier * S_Prototype ; } ;
Source code file location of Word : "namespaces/types.csl" : 304.18 :: we are now at : namespaces/compiler/c_syntax.csl : 542.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x5faf9e66 -- code size = 34 bytes
 -----------------------------
Word :: Experimental.Word : definition = 0x000076705faf9e66 : disassembly at namespaces/compiler/c_syntax.csl : 542.9 :
0x76705faf9e66    48bf04bd005d70760000    mov rdi, 0x76705d00bd04
0x76705faf9e70    49ba30bf0dca1c640000    mov r10, 0x641cca0dbf30
0x76705faf9e7a    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x76705faf9e84    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x76705faf9e87    c3                      ret
Word_Disassemble : word - 'Word' :: codeSize = 34
Word : 0x000076705d00fa6c :: Compiled at : 0x000076705faf9e66
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 542.9 <::

_ClassTypedef : at namespaces/compiler/c_syntax.csl : 555.17 : token = struct : cloneFlag = 0
DataStack at : namespaces/compiler/c_syntax.csl : 609.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 609.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Buffer2048.node-p <:> csl compiled word
SourceCode for Buffer2048.node-p :>
: node-p ( txt, poftxt, buffer ) sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt ) buffer @ ash ;
Source code file location of node-p : "namespaces/compiler/c_syntax.csl" : 611.2 :: we are now at : namespaces/compiler/c_syntax.csl : 616.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbdcdf -- code size = 114 bytes
TypeSignature :
 -----------------------------
Word :: Buffer2048.node-p : definition = 0x0000767060bbdcdf : disassembly at namespaces/compiler/c_syntax.csl : 616.11 :
0x767060bbdcdf    4d897e08                mov [r14+0x8], r15
0x767060bbdce3    4d8d7e08                lea r15, [r14+0x8]
0x767060bbdce7    4981c608000000          add r14, 0x8
 ..  txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;
0x767060bbdcee    498b47f8                mov rax, [r15-0x8]
0x767060bbdcf2    488bf8                  mov rdi, rax
0x767060bbdcf5    48b893a16d6070760000    mov rax, 0x7670606da193       < string : 'node -p " %s " > %s' >
0x767060bbdcff    488bf0                  mov rsi, rax
 .. tf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;
0x767060bbdd02    498b47e8                mov rax, [r15-0x18]
0x767060bbdd06    488bd0                  mov rdx, rax
 .. buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;
0x767060bbdd09    498b47f0                mov rax, [r15-0x10]
0x767060bbdd0d    488bc8                  mov rcx, rax
0x767060bbdd10    b804000000              mov r8d, 0x4
 .. : node-p ( txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;  ..
0x767060bbdd15    49ba40de266170760000    mov r10, 0x76706126de40
0x767060bbdd1f    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbdd29    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;
0x767060bbdd2c    498b47f8                mov rax, [r15-0x8]
0x767060bbdd30    4983c608                add r14, 0x8
0x767060bbdd34    498906                  mov [r14], rax
 .. \" > %s", txt, poftxt )      buffer @ ash    ;
0x767060bbdd37    49bb6ddcbb6070760000    mov r11, 0x767060bbdc6d
0x767060bbdd41    49ffd3                  call r11                      < Buffer2048.ash : 0x0000767060bbdc6d >
0x767060bbdd44    4d8d77f8                lea r14, [r15-0x8]
0x767060bbdd48    4d8b7e08                mov r15, [r14+0x8]
0x767060bbdd4c    4983ee18                sub r14, 0x18
 .. ", txt, poftxt )      buffer @ ash    ;
0x767060bbdd50    c3                      ret
Word_Disassemble : word - 'node-p' :: codeSize = 114
Word : 0x000076705d0ea511 :: Compiled at : 0x0000767060bbdcdf
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 616.11 <::
 node -p " 1+1007 " > ./node.txt
1008

including namespaces/test/dev0.csl at namespaces/test/initTest.csl : 86.41 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 17.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
 =============================
Experimental.tx <:> csl compiled word
SourceCode for Experimental.tx :>
: tx 4 2 / 5 + ;
Source code file location of tx : "namespaces/test/dev0.csl" : 24.2 :: we are now at : namespaces/test/dev0.csl : 25.7
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbdd8f -- code size = 21 bytes
TypeSignature :
 -----------------------------
Word :: Experimental.tx : definition = 0x0000767060bbdd8f : disassembly at namespaces/test/dev0.csl : 25.7 :
 ..                                  : tx 4 2 / 5 + ;  ..
0x767060bbdd8f    b802000000              mov eax, 0x2
 ..                            : tx 4 2 / 5 + ;  ..
0x767060bbdd94    b905000000              mov ecx, 0x5
 ..                          : tx 4 2 / 5 + ;  ..
0x767060bbdd99    4803c1                  add rax, rcx
0x767060bbdd9c    4983c608                add r14, 0x8
0x767060bbdda0    498906                  mov [r14], rax
 ..                        : tx 4 2 / 5 + ;  ..
0x767060bbdda3    c3                      ret
Word_Disassemble : word - 'tx' :: codeSize = 21
Word : 0x000076705d0ec0f1 :: Compiled at : 0x0000767060bbdd8f
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 25.7 <::

 =============================
Logic.tx1 <:> csl compiled word
SourceCode for Logic.tx1 :>
: tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;
Source code file location of tx1 : "namespaces/test/dev0.csl" : 28.2 :: we are now at : namespaces/test/dev0.csl : 29.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbddb8 -- code size = 90 bytes
TypeSignature :
 -----------------------------
Word :: Logic.tx1 : definition = 0x0000767060bbddb8 : disassembly at namespaces/test/dev0.csl : 29.8 :
 ..                                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddb8    48c7c000000000          mov rax, 0x0
 ..                               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddbf    4883f800                cmp rax, 0x0
0x767060bbddc3    0f95c0                  setnz r8b
0x767060bbddc6    480fb6c0                movzx rax, al
 ..                             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddca    4983c608                add r14, 0x8
0x767060bbddce    498906                  mov [r14], rax
 ..                           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddd1    b804000000              mov r8d, 0x4
 ..                     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddd6    b902000000              mov ecx, 0x2
 ..                   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbdddb    48c7c200000000          mov rdx, 0x0
0x767060bbdde2    48f7f9                  idiv rcx
 ..                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbdde5    b903000000              mov ecx, 0x3
 ..               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddea    4823c1                  and rax, rcx
 ..             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbdded    b904000000              mov ecx, 0x4
 ..           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddf2    480bc1                  or rax, rcx
 ..         : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddf5    b901000000              mov ecx, 0x1
0x767060bbddfa    4803c1                  add rax, rcx
 ..       : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbddfd    488bc8                  mov rcx, rax
0x767060bbde00    498b06                  mov rax, [r14]
0x767060bbde03    4983ee08                sub r14, 0x8
 ..     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbde07    4803c1                  add rax, rcx
0x767060bbde0a    4983c608                add r14, 0x8
0x767060bbde0e    498906                  mov [r14], rax
 ..   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  ..
0x767060bbde11    c3                      ret
Word_Disassemble : word - 'tx1' :: codeSize = 90
Word : 0x000076705d0eccc1 :: Compiled at : 0x0000767060bbddb8
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 29.8 <::

 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :>
int factoriali ( REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n-- ; res = res * (n--) ; } return res; }
Source code file location of factoriali : "namespaces/test/dev0.csl" : 37.15 :: we are now at : namespaces/test/dev0.csl : 54.27
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbde26 -- code size = 38 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x0000767060bbde26 : disassembly at namespaces/test/dev0.csl : 54.27 :
0x767060bbde26    498b3e                  mov rdi, [r14]
 .. toriali ( REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     ret ..
0x767060bbde29    be01000000              mov esi, 0x1
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  ..
0x767060bbde2e    4883ff02                cmp rdi, 0x2
0x767060bbde32    0f8c10000000            jl 0x767060bbde48             < C_Syntax.factoriali+34 >
 .. le ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  ..
0x767060bbde38    480faff7                imul rsi, rdi
 .. ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  ..
0x767060bbde3c    48ffcf                  dec rdi
 ..  res = res * n-- ;          res = res * (n--) ;     }     return res; }  ..
0x767060bbde3f    480faff7                imul rsi, rdi
 ..  = res * n-- ;          res = res * (n--) ;     }     return res; }  ..
0x767060bbde43    48ffcf                  dec rdi
0x767060bbde46    ebe6                    jmp 0x767060bbde2e            < C_Syntax.factoriali+8 >
 ..  res = res * (n--) ;     }     return res; }  ..
0x767060bbde48    498936                  mov [r14], rsi
 .. = res * (n--) ;     }     return res; }  ..
0x767060bbde4b    c3                      ret
Word_Disassemble : word - 'factoriali' :: codeSize = 38
Word : 0x000076705d0ee971 :: Compiled at : 0x0000767060bbde26
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 54.27 <::
 5040 5040
 =============================
C.fac <:> csl compiled word
SourceCode for C.fac :>
: fac ( n | rec ) rec 1 = { n @ 1 > } { n @ rec @ * rec store n -- } while return rec @ ;
Source code file location of fac : "namespaces/test/dev0.csl" : 68.2 :: we are now at : namespaces/test/dev0.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbde84 -- code size = 72 bytes
TypeSignature :
 -----------------------------
Word :: C.fac : definition = 0x0000767060bbde84 : disassembly at namespaces/test/dev0.csl : 73.17 :
0x767060bbde84    4d897e08                mov [r14+0x8], r15
0x767060bbde88    4d8d7e08                lea r15, [r14+0x8]
0x767060bbde8c    4981c610000000          add r14, 0x10
 ..         : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  ..
0x767060bbde93    49c7470801000000        mov qword [r15+0x8], 0x1
   : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  ..
0x767060bbde9b    49837ff801              cmp qword [r15-0x8], 0x1
 ..   | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdea0    0f8e16000000            jle 0x767060bbdebc            < C.fac+56 >
 .. rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdea6    498b47f8                mov rax, [r15-0x8]
 .. )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdeaa    498b4f08                mov rcx, [r15+0x8]
 ..  rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdeae    480fafc1                imul rax, rcx
 .. ec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdeb2    49894708                mov [r15+0x8], rax
 .. { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdeb6    49ff4ff8                dec qword [r15-0x8]
 ..  @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdeba    ebdf                    jmp 0x767060bbde9b            < C.fac+23 >
 .. @ rec @ * rec store n -- } while      return rec @ ;
0x767060bbdebc    498b4708                mov rax, [r15+0x8]
0x767060bbdec0    4d8d77f8                lea r14, [r15-0x8]
0x767060bbdec4    4d8b7e08                mov r15, [r14+0x8]
 ..  * rec store n -- } while      return rec @ ;
0x767060bbdec8    498906                  mov [r14], rax
 ..  store n -- } while      return rec @ ;
0x767060bbdecb    c3                      ret
Word_Disassemble : word - 'fac' :: codeSize = 72
Word : 0x000076705d0f6071 :: Compiled at : 0x0000767060bbde84
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 73.17 <::
 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :>
: factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
Source code file location of factorial : "namespaces/test/dev0.csl" : 76.2 :: we are now at : namespaces/test/dev0.csl : 77.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbdee0 -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C.factorial : definition = 0x0000767060bbdee0 : disassembly at namespaces/test/dev0.csl : 77.14 :
 ..                           : factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;  ..
0x767060bbdee0    498b3e                  mov rdi, [r14]
 .. torial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
0x767060bbdee3    be01000000              mov esi, 0x1
 .. nt8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
0x767060bbdee8    4883ff01                cmp rdi, 0x1
 .. 8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
0x767060bbdeec    0f8e09000000            jle 0x767060bbdefb            < C.factorial+27 >
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
0x767060bbdef2    480faff7                imul rsi, rdi
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
0x767060bbdef6    48ffcf                  dec rdi
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
0x767060bbdef9    ebed                    jmp 0x767060bbdee8            < C.factorial+8 >
 .. @ n @ * rec store n -- } while return rec ;
0x767060bbdefb    498936                  mov [r14], rsi
 .. @ * rec store n -- } while return rec ;
0x767060bbdefe    c3                      ret
Word_Disassemble : word - 'factorial' :: codeSize = 31
Word : 0x000076705d0f8b11 :: Compiled at : 0x0000767060bbdee0
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 77.14 <::
 5040 factorial  : ok


 namespaces/test/dev0.csl 79.12
starting Lisp
 stack is ...
DataStack at : namespaces/test/dev0.csl : 79.52 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005
 g23
 7
 7
 q1x0
 7
 h01
 7
 7
 average

 =============================
LispDefines.average <:> variableaverage <:> lambdaCalculus compiled word
SourceCode for LispDefines.average :>
(define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
Source code file location of average : "namespaces/test/dev0.csl" : 92.48 :: we are now at : namespaces/test/dev0.csl : 93.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bbdf04 -- code size = 57 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.average : definition = 0x0000767060bbdf04 : disassembly at namespaces/test/dev0.csl : 93.24 :
0x767060bbdf04    4d897e08                mov [r14+0x8], r15
0x767060bbdf08    4d8d7e08                lea r15, [r14+0x8]
0x767060bbdf0c    4981c608000000          add r14, 0x8
 ..   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) ..
0x767060bbdf13    498b47f0                mov rax, [r15-0x10]
   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) ..
0x767060bbdf17    498b4ff8                mov rcx, [r15-0x8]
 ..     (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) ..
0x767060bbdf1b    4803c1                  add rax, rcx
 .. e average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
0x767060bbdf1e    b902000000              mov ecx, 0x2
0x767060bbdf23    48c7c200000000          mov rdx, 0x0
0x767060bbdf2a    48f7f9                  idiv rcx
0x767060bbdf2d    4d8d77f8                lea r14, [r15-0x8]
0x767060bbdf31    4d8b7e08                mov r15, [r14+0x8]
0x767060bbdf35    4983ee08                sub r14, 0x8
0x767060bbdf39    498906                  mov [r14], rax
 ..         (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) ..
0x767060bbdf3c    c3                      ret
Word_Disassemble : word - 'average' :: codeSize = 57
Word : 0x0000767060ab8638 :: Compiled at : 0x0000767060bbdf04
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 93.24 <::
 77
  : should show 77 7
 fib

 =============================
LispDefines.fib <:> variablefib <:> lambdaCalculus compiled word
SourceCode for LispDefines.fib :>
(define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
Source code file location of fib : "namespaces/test/dev0.csl" : 97.76 :: we are now at : namespaces/test/dev0.csl : 98.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bbdf42 -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fib : definition = 0x0000767060bbdf42 : disassembly at namespaces/test/dev0.csl : 98.20 :
0x767060bbdf42    4d897e08                mov [r14+0x8], r15
0x767060bbdf46    4d8d7e08                lea r15, [r14+0x8]
0x767060bbdf4a    4981c608000000          add r14, 0x8
 ..   (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) ..
0x767060bbdf51    49837ff802              cmp qword [r15-0x8], 0x2
 ..     (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) ..
0x767060bbdf56    0f8d10000000            jge 0x767060bbdf6c            < LispDefines.fib+42 >
 .. (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) ..
0x767060bbdf5c    498b47f8                mov rax, [r15-0x8]
0x767060bbdf60    4983c608                add r14, 0x8
0x767060bbdf64    498906                  mov [r14], rax
 (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) ..
0x767060bbdf67    e945000000              jmp 0x767060bbdfb1            < LispDefines.fib+111 >
 .. bda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf6c    498b47f8                mov rax, [r15-0x8]
 .. a (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf70    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bbdf79    83c608                  add esi, 0x8
0x767060bbdf7c    498906                  mov [r14], rax
 .. ib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf7f    e8beffffff              call 0x767060bbdf42           < LispDefines.fib : 0x0000767060bbdf42 >
 .. se (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf84    498b47f8                mov rax, [r15-0x8]
 ..  (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf88    b902000000              mov ecx, 0x2
 .. Else (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf8d    482bc1                  sub rax, rcx
0x767060bbdf90    4983c608                add r14, 0x8
0x767060bbdf94    498906                  mov [r14], rax
 ..  ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x767060bbdf97    e8a6ffffff              call 0x767060bbdf42           < LispDefines.fib : 0x0000767060bbdf42 >
0x767060bbdf9c    498b0e                  mov rcx, [r14]
0x767060bbdf9f    498b46f8                mov rax, [r14-0x8]
0x767060bbdfa3    4983ee10                sub r14, 0x10
0x767060bbdfa7    4803c1                  add rax, rcx
0x767060bbdfaa    4983c608                add r14, 0x8
0x767060bbdfae    498906                  mov [r14], rax
0x767060bbdfb1    4d8d77f8                lea r14, [r15-0x8]
0x767060bbdfb5    4d8b7e08                mov r15, [r14+0x8]
0x767060bbdfb9    498906                  mov [r14], rax
 ..             (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) ..
0x767060bbdfbc    c3                      ret
Word_Disassemble : word - 'fib' :: codeSize = 123
Word : 0x0000767060abfa68 :: Compiled at : 0x0000767060bbdf42
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 98.20 <::
 6765
 fib2
 6765
 7
 7
 7
 g
 h
 g1
 g2
 7
 7
 j
 h
 k

 77
 777
 77
 77
 777

before fib
 =============================
Compiler._fib1 <:> csl compiled word
SourceCode for Compiler._fib1 :>
: _fib1 ( n ) { n @ 2 < } { n @ } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
Source code file location of _fib1 : "namespaces/test/dev0.csl" : 128.2 :: we are now at : namespaces/test/dev0.csl : 129.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe0dd -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: Compiler._fib1 : definition = 0x0000767060bbe0dd : disassembly at namespaces/test/dev0.csl : 129.19 :
0x767060bbe0dd    4d897e08                mov [r14+0x8], r15
0x767060bbe0e1    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe0e5    4981c608000000          add r14, 0x8
 ..                       : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  ..
0x767060bbe0ec    49837ff802              cmp qword [r15-0x8], 0x2
 ..               : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  ..
0x767060bbe0f1    0f8d10000000            jge 0x767060bbe107            < Compiler._fib1+42 >
 ..           : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  ..
0x767060bbe0f7    498b47f8                mov rax, [r15-0x8]
0x767060bbe0fb    4983c608                add r14, 0x8
0x767060bbe0ff    498906                  mov [r14], rax
 ..      : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  ..
0x767060bbe102    e945000000              jmp 0x767060bbe14c            < Compiler._fib1+111 >
 ..  : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  ..
0x767060bbe107    498b47f8                mov rax, [r15-0x8]
 : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  ..
0x767060bbe10b    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bbe114    83c608                  add esi, 0x8
0x767060bbe117    498906                  mov [r14], rax
 ..  ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe11a    e8beffffff              call 0x767060bbe0dd           < Compiler._fib1 : 0x0000767060bbe0dd >
 ..  { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe11f    498b47f8                mov rax, [r15-0x8]
 ..  @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe123    b902000000              mov ecx, 0x2
 ..  2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe128    482bc1                  sub rax, rcx
0x767060bbe12b    4983c608                add r14, 0x8
0x767060bbe12f    498906                  mov [r14], rax
 ..  < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe132    e8a6ffffff              call 0x767060bbe0dd           < Compiler._fib1 : 0x0000767060bbe0dd >
0x767060bbe137    498b0e                  mov rcx, [r14]
0x767060bbe13a    498b46f8                mov rax, [r14-0x8]
0x767060bbe13e    4983ee10                sub r14, 0x10
 ..  n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe142    4803c1                  add rax, rcx
0x767060bbe145    4983c608                add r14, 0x8
0x767060bbe149    498906                  mov [r14], rax
0x767060bbe14c    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe150    4d8b7e08                mov r15, [r14+0x8]
0x767060bbe154    498906                  mov [r14], rax
 ..  @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;
0x767060bbe157    c3                      ret
Word_Disassemble : word - '_fib1' :: codeSize = 123
Word : 0x000076705d102761 :: Compiled at : 0x0000767060bbe0dd
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 129.19 <::
 6765
System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off,
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 132.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.Compiler fibbc

 =============================
LispDefines.fibbc <:> variablefibbc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibbc :>
(define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
Source code file location of fibbc : "namespaces/test/dev0.csl" : 134.83 :: we are now at : namespaces/test/dev0.csl : 135.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bbe15d -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibbc : definition = 0x0000767060bbe15d : disassembly at namespaces/test/dev0.csl : 135.22 :
0x767060bbe15d    4d897e08                mov [r14+0x8], r15
0x767060bbe161    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe165    4981c608000000          add r14, 0x8
   (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) ..
0x767060bbe16c    49837ff802              cmp qword [r15-0x8], 0x2
 ..  (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) ..
0x767060bbe171    0f8d10000000            jge 0x767060bbe187            < LispDefines.fibbc+42 >
 (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) ..
0x767060bbe177    498b47f8                mov rax, [r15-0x8]
0x767060bbe17b    4983c608                add r14, 0x8
0x767060bbe17f    498906                  mov [r14], rax
 .. e fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe182    e945000000              jmp 0x767060bbe1cc            < LispDefines.fibbc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe187    498b47f8                mov rax, [r15-0x8]
 ..  n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe18b    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bbe194    83c608                  add esi, 0x8
0x767060bbe197    498906                  mov [r14], rax
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe19a    e8beffffff              call 0x767060bbe15d           < LispDefines.fibbc : 0x0000767060bbe15d >
 .. < n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe19f    498b47f8                mov rax, [r15-0x8]
 .. n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe1a3    b902000000              mov ecx, 0x2
 ..  (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe1a8    482bc1                  sub rax, rcx
0x767060bbe1ab    4983c608                add r14, 0x8
0x767060bbe1af    498906                  mov [r14], rax
 .. (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x767060bbe1b2    e8a6ffffff              call 0x767060bbe15d           < LispDefines.fibbc : 0x0000767060bbe15d >
0x767060bbe1b7    498b0e                  mov rcx, [r14]
0x767060bbe1ba    498b46f8                mov rax, [r14-0x8]
0x767060bbe1be    4983ee10                sub r14, 0x10
0x767060bbe1c2    4803c1                  add rax, rcx
0x767060bbe1c5    4983c608                add r14, 0x8
0x767060bbe1c9    498906                  mov [r14], rax
0x767060bbe1cc    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe1d0    4d8b7e08                mov r15, [r14+0x8]
0x767060bbe1d4    498906                  mov [r14], rax
 ..          (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) ..
0x767060bbe1d7    c3                      ret
Word_Disassemble : word - 'fibbc' :: codeSize = 123
Word : 0x0000767060aac330 :: Compiled at : 0x0000767060bbe15d
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 135.22 <::
 6765
 fibcc

 =============================
LispDefines.fibcc <:> variablefibcc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibcc :>
(define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
Source code file location of fibcc : "namespaces/test/dev0.csl" : 138.83 :: we are now at : namespaces/test/dev0.csl : 139.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0x60bbe1dd -- code size = 123 bytes
TypeSignature :
 -----------------------------
Word :: LispDefines.fibcc : definition = 0x0000767060bbe1dd : disassembly at namespaces/test/dev0.csl : 139.22 :
0x767060bbe1dd    4d897e08                mov [r14+0x8], r15
0x767060bbe1e1    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe1e5    4981c608000000          add r14, 0x8
   (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) ..
0x767060bbe1ec    49837ff802              cmp qword [r15-0x8], 0x2
 ..  (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) ..
0x767060bbe1f1    0f8d10000000            jge 0x767060bbe207            < LispDefines.fibcc+42 >
 (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) ..
0x767060bbe1f7    498b47f8                mov rax, [r15-0x8]
0x767060bbe1fb    4983c608                add r14, 0x8
0x767060bbe1ff    498906                  mov [r14], rax
 .. e fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe202    e945000000              jmp 0x767060bbe24c            < LispDefines.fibcc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe207    498b47f8                mov rax, [r15-0x8]
 ..  n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe20b    b901000000482bc149      mov r9, 0x49c12b4800000001
0x767060bbe214    83c608                  add esi, 0x8
0x767060bbe217    498906                  mov [r14], rax
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe21a    e8beffffff              call 0x767060bbe1dd           < LispDefines.fibcc : 0x0000767060bbe1dd >
 .. < n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe21f    498b47f8                mov rax, [r15-0x8]
 .. n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe223    b902000000              mov ecx, 0x2
 ..  (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe228    482bc1                  sub rax, rcx
0x767060bbe22b    4983c608                add r14, 0x8
0x767060bbe22f    498906                  mov [r14], rax
 .. (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x767060bbe232    e8a6ffffff              call 0x767060bbe1dd           < LispDefines.fibcc : 0x0000767060bbe1dd >
0x767060bbe237    498b0e                  mov rcx, [r14]
0x767060bbe23a    498b46f8                mov rax, [r14-0x8]
0x767060bbe23e    4983ee10                sub r14, 0x10
0x767060bbe242    4803c1                  add rax, rcx
0x767060bbe245    4983c608                add r14, 0x8
0x767060bbe249    498906                  mov [r14], rax
0x767060bbe24c    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe250    4d8b7e08                mov r15, [r14+0x8]
0x767060bbe254    498906                  mov [r14], rax
 ..          (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) ..
0x767060bbe257    c3                      ret
Word_Disassemble : word - 'fibcc' :: codeSize = 123
Word : 0x0000767060ab4c80 :: Compiled at : 0x0000767060bbe1dd
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 139.22 <::
 6765

after fib

 namespaces/test/dev0.csl 142.12
ending Lisp

DataStack at : namespaces/test/dev0.csl : 142.35 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :>
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev0.csl : 148.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe26c -- code size = 116 bytes
TypeSignature :
 -----------------------------
Word :: C._fib2 : definition = 0x0000767060bbe26c : disassembly at namespaces/test/dev0.csl : 148.19 :
0x767060bbe26c    498b06                  mov rax, [r14]
0x767060bbe26f    4983c608                add r14, 0x8
0x767060bbe273    498906                  mov [r14], rax
0x767060bbe276    b802000000              mov eax, 0x2
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe27b    488bc8                  mov rcx, rax
0x767060bbe27e    498b06                  mov rax, [r14]
0x767060bbe281    4983ee08                sub r14, 0x8
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe285    483bc1                  cmp rax, rcx
0x767060bbe288    0f8d05000000            jge 0x767060bbe293            < C._fib2+39 >
0x767060bbe28e    e94c000000              jmp 0x767060bbe2df            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe293    498b06                  mov rax, [r14]
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe296    4983c608                add r14, 0x8
0x767060bbe29a    498906                  mov [r14], rax
0x767060bbe29d    498b06                  mov rax, [r14]
0x767060bbe2a0    4983ee08                sub r14, 0x8
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2a4    48ffc8                  dec rax
0x767060bbe2a7    4983c608                add r14, 0x8
0x767060bbe2ab    498906                  mov [r14], rax
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2ae    e8b9ffffff              call 0x767060bbe26c           < C._fib2 : 0x0000767060bbe26c >
 ..      : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2b3    498b0e                  mov rcx, [r14]
0x767060bbe2b6    498b46f8                mov rax, [r14-0x8]
0x767060bbe2ba    49894ef8                mov [r14-0x8], rcx
0x767060bbe2be    498906                  mov [r14], rax
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2c1    49832e02                sub qword [r14], 0x2
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2c5    e8a2ffffff              call 0x767060bbe26c           < C._fib2 : 0x0000767060bbe26c >
0x767060bbe2ca    498b0e                  mov rcx, [r14]
0x767060bbe2cd    498b46f8                mov rax, [r14-0x8]
0x767060bbe2d1    4983ee10                sub r14, 0x10
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
0x767060bbe2d5    4803c1                  add rax, rcx
0x767060bbe2d8    4983c608                add r14, 0x8
0x767060bbe2dc    498906                  mov [r14], rax
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
0x767060bbe2df    c3                      ret
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x000076705d107651 :: Compiled at : 0x0000767060bbe26c
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 148.19 <::

 6765 6765 6765
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :>
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev0.csl : 168.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe3e0 -- code size = 164 bytes
TypeSignature :
 -----------------------------
Word :: C.fibPTC? : definition = 0x0000767060bbe3e0 : disassembly at namespaces/test/dev0.csl : 168.12 :
0x767060bbe3e0    4d897e08                mov [r14+0x8], r15
0x767060bbe3e4    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe3e8    4981c620000000          add r14, 0x20
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =        ..
0x767060bbe3ef    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn ..
0x767060bbe3f7    49c7471000000000        mov qword [r15+0x10], 0x0
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  ..
0x767060bbe3ff    49c7471801000000        mov qword [r15+0x18], 0x1
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  ..
0x767060bbe407    498b47f8                mov rax, [r15-0x8]
0x767060bbe40b    4883f800                cmp rax, 0x0
0x767060bbe40f    0f845f000000            jz 0x767060bbe474             < C.fibPTC?+148 >
0x767060bbe415    498d4710                lea rax, [r15+0x10]
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe419    498b4f18                mov rcx, [r15+0x18]
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe41d    488908                  mov [rax], rcx
0x767060bbe420    498d4718                lea rax, [r15+0x18]
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe424    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe428    488908                  mov [rax], rcx
0x767060bbe42b    498d4708                lea rax, [r15+0x8]
0x767060bbe42f    4983c608                add r14, 0x8
0x767060bbe433    498906                  mov [r14], rax
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe436    498b4710                mov rax, [r15+0x10]
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe43a    498b4f18                mov rcx, [r15+0x18]
0x767060bbe43e    4803c1                  add rax, rcx
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe441    488bc8                  mov rcx, rax
0x767060bbe444    498b06                  mov rax, [r14]
0x767060bbe447    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe44b    488908                  mov [rax], rcx
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   ..
0x767060bbe44e    498d47f8                lea rax, [r15-0x8]
0x767060bbe452    4983c608                add r14, 0x8
0x767060bbe456    498906                  mov [r14], rax
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     ..
0x767060bbe459    498b47f8                mov rax, [r15-0x8]
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for ..
0x767060bbe45d    b901000000              mov ecx, 0x1
0x767060bbe462    482bc1                  sub rax, rcx
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for   ..
0x767060bbe465    488bc8                  mov rcx, rax
0x767060bbe468    498b06                  mov rax, [r14]
0x767060bbe46b    4983ee08                sub r14, 0x8
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     ..
0x767060bbe46f    488908                  mov [rax], rcx
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     r ..
0x767060bbe472    eb93                    jmp 0x767060bbe407            < C.fibPTC?+39 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe474    498b4708                mov rax, [r15+0x8]
0x767060bbe478    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe47c    4d8b7e08                mov r15, [r14+0x8]
 .. @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe480    498906                  mov [r14], rax
 ..  @ + =      }     for     return fn @ ;  ..
0x767060bbe483    c3                      ret
Word_Disassemble : word - 'fibPTC?' :: codeSize = 164
Word : 0x000076705d10e331 :: Compiled at : 0x0000767060bbe3e0
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 168.12 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
infibPTC2? ( n ){ int fn, fn1, fn2 ; for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev0.csl" : 187.9 :: we are now at : namespaces/test/dev0.csl : 198.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe5a6 -- code size = 106 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bbe5a6 : disassembly at namespaces/test/dev0.csl : 198.13 :
0x767060bbe5a6    4d897e08                mov [r14+0x8], r15
0x767060bbe5aa    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe5ae    4981c620000000          add r14, 0x20
 .. {     int fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 ..
0x767060bbe5b5    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bbe5bd    49c7471000000000        mov qword [r15+0x10], 0x0
 ..  fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bbe5c5    49c7471801000000        mov qword [r15+0x18], 0x1
 ..      for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     retu ..
0x767060bbe5cd    498b47f8                mov rax, [r15-0x8]
0x767060bbe5d1    4883f800                cmp rax, 0x0
0x767060bbe5d5    0f8425000000            jz 0x767060bbe600             < C_Syntax.fibPTC2?+90 >
 ..  ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe5db    498b4718                mov rax, [r15+0x18]
0x767060bbe5df    49894710                mov [r15+0x10], rax
 ..             fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe5e3    498b4708                mov rax, [r15+0x8]
0x767060bbe5e7    49894718                mov [r15+0x18], rax
 .. fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe5eb    498b4710                mov rax, [r15+0x10]
 ..         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe5ef    498b4f18                mov rcx, [r15+0x18]
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe5f3    4803c1                  add rax, rcx
0x767060bbe5f6    49894708                mov [r15+0x8], rax
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bbe5fa    49ff4ff8                dec qword [r15-0x8]
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe5fe    ebcd                    jmp 0x767060bbe5cd            < C_Syntax.fibPTC2?+39 >
 .. ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe600    498b4708                mov rax, [r15+0x8]
0x767060bbe604    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe608    4d8b7e08                mov r15, [r14+0x8]
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe60c    498906                  mov [r14], rax
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bbe60f    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 106
Word : 0x000076705d1191e1 :: Compiled at : 0x0000767060bbe5a6
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 198.13 <::
 6765
including namespaces/compiler/x64.csl at namespaces/test/initTest.csl : 86.41 ...

including namespaces/compiler/asmConstants.csl at namespaces/compiler/x64.csl : 92.47 ...

 =============================
Root.;; <:> csl compiled word, immediate
SourceCode for Root.;; :>
: ;; '; find compileWord prefixable ;
Source code file location of ;; : "namespaces/compiler/x64.csl" : 114.2 :: we are now at : namespaces/compiler/x64.csl : 114.55
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe81c -- code size = 37 bytes
 -----------------------------
Word :: Root.;; : definition = 0x0000767060bbe81c : disassembly at namespaces/compiler/x64.csl : 114.55 :
 ..                          : ;; '; find compileWord prefixable ;  ..
0x767060bbe81c    49bbf098ba6070760000    mov r11, 0x767060ba98f0
0x767060bbe826    49ffd3                  call r11                      < Interpreter.semi : 0x0000767060ba98f0 >
 ..              : ;; '; find compileWord prefixable ;  ..
0x767060bbe829    49ba001313ca1c640000    mov r10, 0x641cca131300
0x767060bbe833    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbe83d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   : ;; '; find compileWord prefixable ;  ..
0x767060bbe840    c3                      ret
Word_Disassemble : word - ';;' :: codeSize = 37
Word : 0x000076705d125325 :: Compiled at : 0x0000767060bbe81c
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 114.55 <::

 =============================
C_Syntax.Calculate_Rex <:> csl compiled word
SourceCode for C_Syntax.Calculate_Rex :>
uint8 Calculate_Rex ( uint8 reg, uint8 rm, uint8 rex_w_flag, uint8 rex_b_flag ) { uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ; if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ; return rex ; }
Source code file location of Calculate_Rex : "namespaces/compiler/x64.csl" : 143.14 :: we are now at : namespaces/compiler/x64.csl : 150.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe903 -- code size = 250 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.Calculate_Rex : definition = 0x0000767060bbe903 : disassembly at namespaces/compiler/x64.csl : 150.18 :
0x767060bbe903    4d897e08                mov [r14+0x8], r15
0x767060bbe907    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe90b    4981c610000000          add r14, 0x10
 .. t8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_fl ..
0x767060bbe912    498b47f0                mov rax, [r15-0x10]
0x767060bbe916    4883f800                cmp rax, 0x0
0x767060bbe91a    0f8411000000            jz 0x767060bbe931             < C_Syntax.Calculate_Rex+46 >
 ..  ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_f ..
0x767060bbe920    b808000000              mov eax, 0x8
0x767060bbe925    4983c608                add r14, 0x8
0x767060bbe929    498906                  mov [r14], rax
0x767060bbe92c    e90e000000              jmp 0x767060bbe93f            < C_Syntax.Calculate_Rex+60 >
 ..      uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag  ..
0x767060bbe931    48c7c000000000          mov rax, 0x0
0x767060bbe938    4983c608                add r14, 0x8
0x767060bbe93c    498906                  mov [r14], rax
 ..  rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0 ..
0x767060bbe93f    49837fe007              cmp qword [r15-0x20], 0x7
0x767060bbe944    0f8e11000000            jle 0x767060bbe95b            < C_Syntax.Calculate_Rex+88 >
 .. ex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     re ..
0x767060bbe94a    b804000000              mov eax, 0x4
0x767060bbe94f    4983c608                add r14, 0x8
0x767060bbe953    498906                  mov [r14], rax
0x767060bbe956    e90e000000              jmp 0x767060bbe969            < C_Syntax.Calculate_Rex+102 >
 .. _flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return ..
0x767060bbe95b    48c7c000000000          mov rax, 0x0
0x767060bbe962    4983c608                add r14, 0x8
0x767060bbe966    498906                  mov [r14], rax
 .. lag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return r ..
0x767060bbe969    498b0e                  mov rcx, [r14]
0x767060bbe96c    498b46f8                mov rax, [r14-0x8]
0x767060bbe970    4983ee10                sub r14, 0x10
 ..  uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) re ..
0x767060bbe974    480bc1                  or rax, rcx
0x767060bbe977    4983c608                add r14, 0x8
0x767060bbe97b    498906                  mov [r14], rax
 .. : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe97e    49837fe807              cmp qword [r15-0x18], 0x7
0x767060bbe983    0f8e11000000            jle 0x767060bbe99a            < C_Syntax.Calculate_Rex+151 >
 ..  reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe989    b801000000              mov eax, 0x1
0x767060bbe98e    4983c608                add r14, 0x8
0x767060bbe992    498906                  mov [r14], rax
0x767060bbe995    e90e000000              jmp 0x767060bbe9a8            < C_Syntax.Calculate_Rex+165 >
 ..  > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe99a    48c7c000000000          mov rax, 0x0
0x767060bbe9a1    4983c608                add r14, 0x8
0x767060bbe9a5    498906                  mov [r14], rax
 ..  7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9a8    498b0e                  mov rcx, [r14]
0x767060bbe9ab    498b46f8                mov rax, [r14-0x8]
0x767060bbe9af    4983ee10                sub r14, 0x10
 .. g ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ..
0x767060bbe9b3    480bc1                  or rax, rcx
 .. _flag, uint8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex | ..
0x767060bbe9b6    49894708                mov [r15+0x8], rax
 .. | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9ba    498b4708                mov rax, [r15+0x8]
0x767060bbe9be    4883f800                cmp rax, 0x0
0x767060bbe9c2    0f851c000000            jnz 0x767060bbe9e4            < C_Syntax.Calculate_Rex+225 >
 .. m > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9c8    498b47f8                mov rax, [r15-0x8]
0x767060bbe9cc    4883f800                cmp rax, 0x0
0x767060bbe9d0    0f850e000000            jnz 0x767060bbe9e4            < C_Syntax.Calculate_Rex+225 >
 .. 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9d6    498b47f0                mov rax, [r15-0x10]
0x767060bbe9da    4883f800                cmp rax, 0x0
0x767060bbe9de    0f8405000000            jz 0x767060bbe9e9             < C_Syntax.Calculate_Rex+230 >
 ..  || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9e4    49834f0840              or qword [r15+0x8], 0x40
 .. lag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9e9    498b4708                mov rax, [r15+0x8]
0x767060bbe9ed    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe9f1    4d8b7e08                mov r15, [r14+0x8]
0x767060bbe9f5    4983ee18                sub r14, 0x18
 .. rex_w_flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9f9    498906                  mov [r14], rax
 .. flag ) rex |= 0x40 ;     return rex ; }  ..
0x767060bbe9fc    c3                      ret
Word_Disassemble : word - 'Calculate_Rex' :: codeSize = 250
Word : 0x000076705d12db75 :: Compiled at : 0x0000767060bbe903
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 150.18 <::

 =============================
C_Syntax.CalculateModRegardingDisplacement <:> csl compiled word
SourceCode for C_Syntax.CalculateModRegardingDisplacement :>
uint8 CalculateModRegardingDisplacement ( uint8 mod, int64 disp ) { if ( mod != REG ) { if ( disp == 0 ) mod = 0 ; else if ( disp <= 0x7f ) mod = 1 ; else mod = 2 ; } return mod ; }
Source code file location of CalculateModRegardingDisplacement : "namespaces/compiler/x64.csl" : 163.34 :: we are now at : namespaces/compiler/x64.csl : 177.38
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbeab3 -- code size = 102 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.CalculateModRegardingDisplacement : definition = 0x0000767060bbeab3 : disassembly at namespaces/compiler/x64.csl : 177.38 :
0x767060bbeab3    4d897e08                mov [r14+0x8], r15
0x767060bbeab7    4d8d7e08                lea r15, [r14+0x8]
0x767060bbeabb    4981c608000000          add r14, 0x8
 .. mod, int64 disp ) {              if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) m ..
0x767060bbeac2    49837ff003              cmp qword [r15-0x10], 0x3
0x767060bbeac7    0f8438000000            jz 0x767060bbeb05             < C_Syntax.CalculateModRegardingDisplacement+82 >
 ..  if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;   ..
0x767060bbeacd    49837ff800              cmp qword [r15-0x8], 0x0
0x767060bbead2    0f850d000000            jnz 0x767060bbeae5            < C_Syntax.CalculateModRegardingDisplacement+50 >
 ..      if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbead8    49c747f000000000        mov qword [r15-0x10], 0x0
 ..  if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbeae0    e920000000              jmp 0x767060bbeb05            < C_Syntax.CalculateModRegardingDisplacement+82 >
 ..           mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbeae5    49837ff87f              cmp qword [r15-0x8], 0x7f
0x767060bbeaea    0f8f0d000000            jg 0x767060bbeafd             < C_Syntax.CalculateModRegardingDisplacement+74 >
 ..          else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbeaf0    49c747f001000000        mov qword [r15-0x10], 0x1
 ..      else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbeaf8    e908000000              jmp 0x767060bbeb05            < C_Syntax.CalculateModRegardingDisplacement+82 >
 .. p <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbeafd    49c747f002000000        mov qword [r15-0x10], 0x2
 .. = 1 ;        else mod = 2 ;     }     return mod ; }  ..
0x767060bbeb05    498b47f0                mov rax, [r15-0x10]
0x767060bbeb09    4d8d77f8                lea r14, [r15-0x8]
0x767060bbeb0d    4d8b7e08                mov r15, [r14+0x8]
0x767060bbeb11    4983ee08                sub r14, 0x8
 ..       else mod = 2 ;     }     return mod ; }  ..
0x767060bbeb15    498906                  mov [r14], rax
 .. else mod = 2 ;     }     return mod ; }  ..
0x767060bbeb18    c3                      ret
Word_Disassemble : word - 'CalculateModRegardingDisplacement' :: codeSize = 102
Word : 0x000076705d138875 :: Compiled at : 0x0000767060bbeab3
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 177.38 <::

 =============================
C_Syntax.CalculateModRmByte <:> csl compiled word
SourceCode for C_Syntax.CalculateModRmByte :>
uint8 CalculateModRmByte ( uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp ) { uint8 modRm ; mod = CalculateModRegardingDisplacement ( mod, disp ) ; if ( ( mod < 3 ) && ( rm == 4 ) ) { alertColors ; ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ; ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ; defaultColors ; pause ; quit ; } if ( sib ) { rm = 4 ; reg = 0 ; } modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ; return modRm ; }
Source code file location of CalculateModRmByte : "namespaces/compiler/x64.csl" : 222.19 :: we are now at : namespaces/compiler/x64.csl : 246.23
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbed8e -- code size = 427 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.CalculateModRmByte : definition = 0x0000767060bbed8e : disassembly at namespaces/compiler/x64.csl : 246.23 :
0x767060bbed8e    4d897e08                mov [r14+0x8], r15
0x767060bbed92    4d8d7e08                lea r15, [r14+0x8]
0x767060bbed96    4981c610000000          add r14, 0x10
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( ..
0x767060bbed9d    498b47d8                mov rax, [r15-0x28]
0x767060bbeda1    4983c608                add r14, 0x8
0x767060bbeda5    498906                  mov [r14], rax
 .. culateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\ ..
0x767060bbeda8    498b47f8                mov rax, [r15-0x8]
0x767060bbedac    4983c608                add r14, 0x8
0x767060bbedb0    498906                  mov [r14], rax
0x767060bbedb3    49bbb3eabb6070760000    mov r11, 0x767060bbeab3
0x767060bbedbd    49ffd3                  call r11                      < C_Syntax.CalculateModRegardingDisplacement : 0x0000767060bbeab3 >
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {     ..
0x767060bbedc0    498d47d8                lea rax, [r15-0x28]
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( ..
0x767060bbedc4    488bc8                  mov rcx, rax
0x767060bbedc7    498b06                  mov rax, [r14]
0x767060bbedca    4983ee08                sub r14, 0x8
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {     ..
0x767060bbedce    488901                  mov [rcx], rax
 .. splacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte  ..
0x767060bbedd1    49837fd803              cmp qword [r15-0x28], 0x3
0x767060bbedd6    0f8dc3000000            jge 0x767060bbee9f            < C_Syntax.CalculateModRmByte+273 >
 .. d, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ ..
0x767060bbeddc    49837fe804              cmp qword [r15-0x18], 0x4
0x767060bbede1    0f85b8000000            jnz 0x767060bbee9f            < C_Syntax.CalculateModRmByte+273 >
 ..  ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_ ..
0x767060bbede7    498bc6                  mov rax, r14
0x767060bbedea    4983ee08                sub r14, 0x8
0x767060bbedee    48833800                cmp qword [rax], 0x0
0x767060bbedf2    7410                    jz 0x60bbee04                 < C_Syntax.CalculateModRmByte+118 >
0x767060bbedf4    488378f800              cmp qword [rax-0x8], 0x0
0x767060bbedf9    7409                    jz 0x60bbee04                 < C_Syntax.CalculateModRmByte+118 >
0x767060bbedfb    49c70601000000          mov qword [r14], 0x1
0x767060bbee02    eb07                    jmp 0x767060bbee0b            < C_Syntax.CalculateModRmByte+125 >
0x767060bbee04    49c70600000000          mov qword [r14], 0x0
0x767060bbee0b    0f848e000000            jz 0x767060bbee9f             < C_Syntax.CalculateModRmByte+273 >
 .. < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps ( " ..
0x767060bbee11    49ba70d210ca1c640000    mov r10, 0x641cca10d270
0x767060bbee1b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbee25    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..     alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666.p ..
0x767060bbee28    48b8eee88d6070760000    mov rax, 0x7670608de8ee
0x767060bbee32    4983c608                add r14, 0x8
0x767060bbee36    498906                  mov [r14], rax
0x767060bbee39    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbee43    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;     ..
0x767060bbee46    48b878e98d6070760000    mov rax, 0x7670608de978
0x767060bbee50    4983c608                add r14, 0x8
0x767060bbee54    498906                  mov [r14], rax
0x767060bbee57    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbee61    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. 253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;                quit ;     }     if ( sib )     {         rm = 4 ;    ..
0x767060bbee64    49ba60d310ca1c640000    mov r10, 0x641cca10d360
0x767060bbee6e    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbee78    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbee7b    49bb93b7ba6070760000    mov r11, 0x767060bab793
0x767060bbee85    49ffd3                  call r11                      < User.pause : 0x0000767060bab793 >
0x767060bbee88    49ba20ea11ca1c640000    mov r10, 0x641cca11ea20
0x767060bbee92    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbee9c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..                 quit ;     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 )  ..
0x767060bbee9f    498b47f0                mov rax, [r15-0x10]
0x767060bbeea3    4883f800                cmp rax, 0x0
0x767060bbeea7    0f8410000000            jz 0x767060bbeebd             < C_Syntax.CalculateModRmByte+303 >
 ..     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x ..
0x767060bbeead    49c747e804000000        mov qword [r15-0x18], 0x4
 .. b )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return m ..
0x767060bbeeb5    49c747e000000000        mov qword [r15-0x20], 0x0
 ..         reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeebd    498b47d8                mov rax, [r15-0x28]
 ..  reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeec1    b906000000              mov ecx, 0x6
 ..     reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeec6    48d3e0                  shl rax, cl
0x767060bbeec9    4983c608                add r14, 0x8
0x767060bbeecd    498906                  mov [r14], rax
 ..      }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeed0    498b47e0                mov rax, [r15-0x20]
 .. modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeed4    b907000000              mov ecx, 0x7
 ..   modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeed9    4823c1                  and rax, rcx
 ..  mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeedc    b903000000              mov ecx, 0x3
 .. = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeee1    48d3e0                  shl rax, cl
0x767060bbeee4    4983c608                add r14, 0x8
0x767060bbeee8    498906                  mov [r14], rax
 .. od << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeeeb    498b0e                  mov rcx, [r14]
0x767060bbeeee    498b46f8                mov rax, [r14-0x8]
0x767060bbeef2    4983ee10                sub r14, 0x10
 ..  = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbeef6    4803c1                  add rax, rcx
0x767060bbeef9    4983c608                add r14, 0x8
0x767060bbeefd    498906                  mov [r14], rax
 .. 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef00    498b47e8                mov rax, [r15-0x18]
 .. reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef04    b907000000              mov ecx, 0x7
 .. ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef09    4823c1                  and rax, rcx
0x767060bbef0c    4983c608                add r14, 0x8
0x767060bbef10    498906                  mov [r14], rax
 .. Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef13    498b0e                  mov rcx, [r14]
0x767060bbef16    498b46f8                mov rax, [r14-0x8]
0x767060bbef1a    4983ee10                sub r14, 0x10
 ..  << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef1e    4803c1                  add rax, rcx
 ..   rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef21    49894708                mov [r15+0x8], rax
 .. 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef25    498b4708                mov rax, [r15+0x8]
0x767060bbef29    4d8d77f8                lea r14, [r15-0x8]
0x767060bbef2d    4d8b7e08                mov r15, [r14+0x8]
0x767060bbef31    4983ee20                sub r14, 0x20
 .. < 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef35    498906                  mov [r14], rax
 .. ( rm Bits.& 0x7 ) ;    return modRm ; }  ..
0x767060bbef38    c3                      ret
Word_Disassemble : word - 'CalculateModRmByte' :: codeSize = 427
Word : 0x000076705d14bce5 :: Compiled at : 0x0000767060bbed8e
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 246.23 <::

 =============================
C_Syntax._Compile_Write_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax._Compile_Write_Instruction_X64 :>
void _Compile_Write_Instruction_X64 ( uint8 rex, uint8 opCode0, uint8 opCode1, uint8 modRm, int16 controlFlags, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { int64 nbytes, _here ; if ( DBI ) { _here = Here ; } if ( rex ) _Compile_Int8 ( rex ) ; if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ; if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ; if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ; if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ; if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ; if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ; if ( DBI ) { nbytes = Here - _here ; if ( nbytes ) { location ( ) ; alertColors ; oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; udis1x ( _here ) ; defaultColors ; } else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; } }
Source code file location of _Compile_Write_Instruction_X64 : "namespaces/compiler/x64.csl" : 249.31 :: we are now at : namespaces/compiler/x64.csl : 280.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbef3e -- code size = 848 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax._Compile_Write_Instruction_X64 : definition = 0x0000767060bbef3e : disassembly at namespaces/compiler/x64.csl : 280.35 :
0x767060bbef3e    4d897e08                mov [r14+0x8], r15
0x767060bbef42    4d8d7e08                lea r15, [r14+0x8]
0x767060bbef46    4981c618000000          add r14, 0x18
 .. ) {    int64 nbytes, _here ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _ ..
0x767060bbef4d    48b8153c125d70760000    mov rax, 0x76705d123c15
0x767060bbef57    488b00                  mov rax, [rax]
0x767060bbef5a    4883f800                cmp rax, 0x0
0x767060bbef5e    0f8428000000            jz 0x767060bbef8c             < C_Syntax._Compile_Write_Instruction_X64+78 >
0x767060bbef64    49ba600413ca1c640000    mov r10, 0x641cca130460
0x767060bbef6e    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbef78    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) op ..
0x767060bbef7b    498d4710                lea rax, [r15+0x10]
0x767060bbef7f    488bc8                  mov rcx, rax
0x767060bbef82    498b06                  mov rax, [r14]
0x767060bbef85    4983ee08                sub r14, 0x8
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) op ..
0x767060bbef89    488901                  mov [rcx], rax
 ..         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCod ..
0x767060bbef8c    498b47b0                mov rax, [r15-0x50]
0x767060bbef90    4883f800                cmp rax, 0x0
0x767060bbef94    0f8422000000            jz 0x767060bbefbc             < C_Syntax._Compile_Write_Instruction_X64+126 >
 ..      }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( ..
0x767060bbef9a    498b47b0                mov rax, [r15-0x50]
0x767060bbef9e    4983c608                add r14, 0x8
0x767060bbefa2    498906                  mov [r14], rax
 ..   _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _ ..
0x767060bbefa5    49ba800513ca1c640000    mov r10, 0x641cca130580
0x767060bbefaf    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbefb9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. ex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ..
0x767060bbefbc    498b47b8                mov rax, [r15-0x48]
0x767060bbefc0    4883f800                cmp rax, 0x0
0x767060bbefc4    0f8422000000            jz 0x767060bbefec             < C_Syntax._Compile_Write_Instruction_X64+174 >
 ..  ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& M ..
0x767060bbefca    498b47b8                mov rax, [r15-0x48]
0x767060bbefce    4983c608                add r14, 0x8
0x767060bbefd2    498906                  mov [r14], rax
 .. ile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if  ..
0x767060bbefd5    49ba800513ca1c640000    mov r10, 0x641cca130580
0x767060bbefdf    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbefe9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. _Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_I ..
0x767060bbefec    498b47c0                mov rax, [r15-0x40]
0x767060bbeff0    4883f800                cmp rax, 0x0
0x767060bbeff4    0f8422000000            jz 0x767060bbf01c             < C_Syntax._Compile_Write_Instruction_X64+222 >
 ..  ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( c ..
0x767060bbeffa    498b47c0                mov rax, [r15-0x40]
0x767060bbeffe    4983c608                add r14, 0x8
0x767060bbf002    498906                  mov [r14], rax
 .. byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modR ..
0x767060bbf005    49ba800513ca1c640000    mov r10, 0x641cca130580
0x767060bbf00f    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf019    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. nt8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_ ..
0x767060bbf01c    498b47d0                mov rax, [r15-0x30]
 .. e1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8  ..
0x767060bbf020    b902000000              mov ecx, 0x2
 .. ode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int ..
0x767060bbf025    4823c1                  and rax, rcx
0x767060bbf028    4883f800                cmp rax, 0x0
 .. ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compil ..
0x767060bbf02c    0f8422000000            jz 0x767060bbf054             < C_Syntax._Compile_Write_Instruction_X64+278 >
 .. gs Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( ..
0x767060bbf032    498b47c8                mov rax, [r15-0x38]
0x767060bbf036    4983c608                add r14, 0x8
0x767060bbf03a    498906                  mov [r14], rax
 .. f ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;    ..
0x767060bbf03d    49ba800513ca1c640000    mov r10, 0x641cca130580
0x767060bbf047    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf051    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits. ..
0x767060bbf054    498b47d8                mov rax, [r15-0x28]
 ..  ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlag ..
0x767060bbf058    4883f800                cmp rax, 0x0
0x767060bbf05c    0f845f000000            jz 0x767060bbf0c1             < C_Syntax._Compile_Write_Instruction_X64+387 >
 .. le_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B  ..
0x767060bbf062    498b47d0                mov rax, [r15-0x30]
 ..     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDisp ..
0x767060bbf066    b904000000              mov ecx, 0x4
 .. ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDi ..
0x767060bbf06b    4823c1                  and rax, rcx
0x767060bbf06e    4983c608                add r14, 0x8
 .. Rm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ ..
0x767060bbf072    498906                  mov [r14], rax
 .. Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DI ..
0x767060bbf075    498bc6                  mov rax, r14
0x767060bbf078    4983ee08                sub r14, 0x8
0x767060bbf07c    48833800                cmp qword [rax], 0x0
0x767060bbf080    7410                    jz 0x60bbf092                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x767060bbf082    488378f800              cmp qword [rax-0x8], 0x0
0x767060bbf087    7409                    jz 0x60bbf092                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x767060bbf089    49c70601000000          mov qword [r14], 0x1
 .. & MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( control ..
0x767060bbf090    eb07                    jmp 0x767060bbf099            < C_Syntax._Compile_Write_Instruction_X64+347 >
0x767060bbf092    49c70600000000          mov qword [r14], 0x0
0x767060bbf099    0f8422000000            jz 0x767060bbf0c1             < C_Syntax._Compile_Write_Instruction_X64+387 >
 .. lags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ..
0x767060bbf09f    498b47d8                mov rax, [r15-0x28]
0x767060bbf0a3    4983c608                add r14, 0x8
0x767060bbf0a7    498906                  mov [r14], rax
 .. ib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( dis ..
0x767060bbf0aa    49ba800513ca1c640000    mov r10, 0x641cca130580
0x767060bbf0b4    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf0be    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm | ..
0x767060bbf0c1    498b47e0                mov rax, [r15-0x20]
0x767060bbf0c5    4883f800                cmp rax, 0x0
0x767060bbf0c9    0f8513000000            jnz 0x767060bbf0e2            < C_Syntax._Compile_Write_Instruction_X64+420 >
 .. ile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( contro ..
0x767060bbf0cf    498b47d0                mov rax, [r15-0x30]
 ..    if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B  ..
0x767060bbf0d3    b908000000              mov ecx, 0x8
 ..      if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_ ..
0x767060bbf0d8    4823c1                  and rax, rcx
0x767060bbf0db    4983c608                add r14, 0x8
 .. b ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& ..
0x767060bbf0df    498906                  mov [r14], rax
 .. s.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, im ..
0x767060bbf0e2    498b47e0                mov rax, [r15-0x20]
0x767060bbf0e6    4983c608                add r14, 0x8
0x767060bbf0ea    498906                  mov [r14], rax
 .. SP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ..
0x767060bbf0ed    498b47e8                mov rax, [r15-0x18]
0x767060bbf0f1    4983c608                add r14, 0x8
0x767060bbf0f5    498906                  mov [r14], rax
 .. Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( control ..
0x767060bbf0f8    48c7c000000000          mov rax, 0x0
0x767060bbf0ff    4983c608                add r14, 0x8
0x767060bbf103    498906                  mov [r14], rax
 .. p || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compil ..
0x767060bbf106    49bbaeebbb6070760000    mov r11, 0x767060bbebae
0x767060bbf110    49ffd3                  call r11                      < C_Syntax._Compile_ImmDispData : 0x0000767060bbebae >
 .. Data ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IM ..
0x767060bbf113    498b47f0                mov rax, [r15-0x10]
0x767060bbf117    4883f800                cmp rax, 0x0
0x767060bbf11b    0f8513000000            jnz 0x767060bbf134            < C_Syntax._Compile_Write_Instruction_X64+502 >
 .. sp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ; ..
0x767060bbf121    498b47d0                mov rax, [r15-0x30]
 ..     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )      ..
0x767060bbf125    b910000000              mov ecx, 0x10
 .. ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )    ..
0x767060bbf12a    4823c1                  and rax, rcx
0x767060bbf12d    4983c608                add r14, 0x8
 ..  0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI ..
0x767060bbf131    498906                  mov [r14], rax
 .. ts.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ; ..
0x767060bbf134    498b47f0                mov rax, [r15-0x10]
0x767060bbf138    4983c608                add r14, 0x8
0x767060bbf13c    498906                  mov [r14], rax
 .. IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;      ..
0x767060bbf13f    498b47f8                mov rax, [r15-0x8]
0x767060bbf143    4983c608                add r14, 0x8
0x767060bbf147    498906                  mov [r14], rax
 .. Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nb ..
0x767060bbf14a    498b47d0                mov rax, [r15-0x30]
 .. ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {     ..
0x767060bbf14e    b910000000              mov ecx, 0x10
 .. a ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {   ..
0x767060bbf153    4823c1                  and rax, rcx
0x767060bbf156    4983c608                add r14, 0x8
0x767060bbf15a    498906                  mov [r14], rax
 .. mm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {          ..
0x767060bbf15d    49bbaeebbb6070760000    mov r11, 0x767060bbebae
0x767060bbf167    49ffd3                  call r11                      < C_Syntax._Compile_ImmDispData : 0x0000767060bbebae >
 .. trolFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ..
0x767060bbf16a    48b8153c125d70760000    mov rax, 0x76705d123c15
0x767060bbf174    488b00                  mov rax, [rax]
0x767060bbf177    4883f800                cmp rax, 0x0
0x767060bbf17b    0f8400010000            jz 0x767060bbf281             < C_Syntax._Compile_Write_Instruction_X64+835 >
0x767060bbf181    49ba600413ca1c640000    mov r10, 0x641cca130460
0x767060bbf18b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf195    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbf198    498b4710                mov rax, [r15+0x10]
 .. ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;         ..
0x767060bbf19c    488bc8                  mov rcx, rax
0x767060bbf19f    498b06                  mov rax, [r14]
0x767060bbf1a2    4983ee08                sub r14, 0x8
 .. f ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;       ..
0x767060bbf1a6    482bc1                  sub rax, rcx
0x767060bbf1a9    49894708                mov [r15+0x8], rax
 ..  nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;             oPrintf ( "\n_Co ..
0x767060bbf1ad    498b4708                mov rax, [r15+0x8]
0x767060bbf1b1    4883f800                cmp rax, 0x0
0x767060bbf1b5    0f8494000000            jz 0x767060bbf24f             < C_Syntax._Compile_Write_Instruction_X64+785 >
0x767060bbf1bb    49bbdd9eba6070760000    mov r11, 0x767060ba9edd
0x767060bbf1c5    49ffd3                  call r11                      < System.location : 0x0000767060ba9edd >
 ..            location ( ) ;             alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here ..
0x767060bbf1c8    49ba70d210ca1c640000    mov r10, 0x641cca10d270
0x767060bbf1d2    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf1dc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..   alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _h ..
0x767060bbf1df    48b88102716070760000    mov rax, 0x767060710281
0x767060bbf1e9    488bf8                  mov rdi, rax
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else  ..
0x767060bbf1ec    498b4710                mov rax, [r15+0x10]
0x767060bbf1f0    488bf0                  mov rsi, rax
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ..
0x767060bbf1f3    498b4708                mov rax, [r15+0x8]
0x767060bbf1f7    488bd0                  mov rdx, rax
0x767060bbf1fa    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbf204    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf20e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Ins ..
0x767060bbf211    498b4710                mov rax, [r15+0x10]
0x767060bbf215    4983c608                add r14, 0x8
0x767060bbf219    498906                  mov [r14], rax
0x767060bbf21c    49babe9011ca1c640000    mov r10, 0x641cca1190be
0x767060bbf226    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf230    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..        udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : % ..
0x767060bbf233    49ba60d310ca1c640000    mov r10, 0x641cca10d360
0x767060bbf23d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf247    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. lx : %d bytes : ...", _here, nbytes ) ;     } }  ..
0x767060bbf24a    e932000000              jmp 0x767060bbf281            < C_Syntax._Compile_Write_Instruction_X64+835 >
 .. rs ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  ..
0x767060bbf24f    48b8b802716070760000    mov rax, 0x7670607102b8
0x767060bbf259    488bf8                  mov rdi, rax
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  ..
0x767060bbf25c    498b4710                mov rax, [r15+0x10]
0x767060bbf260    488bf0                  mov rsi, rax
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  ..
0x767060bbf263    498b4708                mov rax, [r15+0x8]
0x767060bbf267    488bd0                  mov rdx, rax
 .. efaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } ..
0x767060bbf26a    49bab03b0eca1c640000    mov r10, 0x641cca0e3bb0
0x767060bbf274    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf27e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bbf281    4d8d77f8                lea r14, [r15-0x8]
0x767060bbf285    4d8b7e08                mov r15, [r14+0x8]
0x767060bbf289    4983ee50                sub r14, 0x50
 .. bytes : ...", _here, nbytes ) ;     } }  ..
0x767060bbf28d    c3                      ret
Word_Disassemble : word - '_Compile_Write_Instruction_X64' :: codeSize = 848
Word : 0x000076705d155385 :: Compiled at : 0x0000767060bbef3e
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 280.35 <::

 =============================
C_Syntax.Compile_CalculateWrite_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax.Compile_CalculateWrite_Instruction_X64 :>
void Compile_CalculateWrite_Instruction_X64 ( uint8 opCode0, uint8 opCode1, uint8 mod, uint8 reg, uint8 rm, uint16 controlFlags, uint8 sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize ) { uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ; uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ; _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }
Source code file location of Compile_CalculateWrite_Instruction_X64 : "namespaces/compiler/x64.csl" : 319.39 :: we are now at : namespaces/compiler/x64.csl : 327.43
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbf293 -- code size = 373 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.Compile_CalculateWrite_Instruction_X64 : definition = 0x0000767060bbf293 : disassembly at namespaces/compiler/x64.csl : 327.43 :
0x767060bbf293    4d897e08                mov [r14+0x8], r15
0x767060bbf297    4d8d7e08                lea r15, [r14+0x8]
0x767060bbf29b    4981c618000000          add r14, 0x18
 .. e ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     ui ..
0x767060bbf2a2    498b47c0                mov rax, [r15-0x40]
0x767060bbf2a6    4983c608                add r14, 0x8
0x767060bbf2aa    498906                  mov [r14], rax
 ..      uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 m ..
0x767060bbf2ad    498b47c8                mov rax, [r15-0x38]
0x767060bbf2b1    4983c608                add r14, 0x8
0x767060bbf2b5    498906                  mov [r14], rax
 .. int8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = ..
0x767060bbf2b8    49837ff808              cmp qword [r15-0x8], 0x8
0x767060bbf2bd    0f94c0                  setz r8b
0x767060bbf2c0    480fb6c0                movzx rax, al
0x767060bbf2c4    4983c608                add r14, 0x8
0x767060bbf2c8    498906                  mov [r14], rax
 .. _Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte  ..
0x767060bbf2cb    498b47d0                mov rax, [r15-0x30]
 .. mSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, ..
0x767060bbf2cf    b920000000              mov ecx, 0x20
 .. immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, si ..
0x767060bbf2d4    4823c1                  and rax, rcx
0x767060bbf2d7    4983c608                add r14, 0x8
0x767060bbf2db    498906                  mov [r14], rax
 .. == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp  ..
0x767060bbf2de    498b0e                  mov rcx, [r14]
0x767060bbf2e1    498b46f8                mov rax, [r14-0x8]
0x767060bbf2e5    4983ee10                sub r14, 0x10
 .. ulate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRm ..
0x767060bbf2e9    480bc1                  or rax, rcx
0x767060bbf2ec    0f95c0                  setnz al
0x767060bbf2ef    480fb6c0                movzx rax, al
0x767060bbf2f3    4983c608                add r14, 0x8
0x767060bbf2f7    498906                  mov [r14], rax
 .. ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;   ..
0x767060bbf2fa    498b47d0                mov rax, [r15-0x30]
 .. Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_In ..
0x767060bbf2fe    b901000000              mov ecx, 0x1
 .. s Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_ ..
0x767060bbf303    4823c1                  and rax, rcx
0x767060bbf306    4983c608                add r14, 0x8
0x767060bbf30a    498906                  mov [r14], rax
 ..  REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruct ..
0x767060bbf30d    49bb03e9bb6070760000    mov r11, 0x767060bbe903
0x767060bbf317    49ffd3                  call r11                      < C_Syntax.Calculate_Rex : 0x0000767060bbe903 >
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.&  ..
0x767060bbf31a    498d4708                lea rax, [r15+0x8]
 .. nt64 imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bit ..
0x767060bbf31e    488bc8                  mov rcx, rax
0x767060bbf321    498b06                  mov rax, [r14]
0x767060bbf324    4983ee08                sub r14, 0x8
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.&  ..
0x767060bbf328    488901                  mov [rcx], rax
 ..    uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, contr ..
0x767060bbf32b    498b47b8                mov rax, [r15-0x48]
0x767060bbf32f    4983c608                add r14, 0x8
0x767060bbf333    498906                  mov [r14], rax
 .. nt8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFla ..
0x767060bbf336    498b47c0                mov rax, [r15-0x40]
0x767060bbf33a    4983c608                add r14, 0x8
0x767060bbf33e    498906                  mov [r14], rax
 .. odRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, s ..
0x767060bbf341    498b47c8                mov rax, [r15-0x38]
0x767060bbf345    4983c608                add r14, 0x8
0x767060bbf349    498906                  mov [r14], rax
 ..  = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib,  ..
0x767060bbf34c    498b47d8                mov rax, [r15-0x28]
0x767060bbf350    4983c608                add r14, 0x8
0x767060bbf354    498906                  mov [r14], rax
 .. lculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, ..
0x767060bbf357    498b47e0                mov rax, [r15-0x20]
0x767060bbf35b    4983c608                add r14, 0x8
0x767060bbf35f    498906                  mov [r14], rax
0x767060bbf362    49bb8eedbb6070760000    mov r11, 0x767060bbed8e
0x767060bbf36c    49ffd3                  call r11                      < C_Syntax.CalculateModRmByte : 0x0000767060bbed8e >
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0 ..
0x767060bbf36f    498d4710                lea rax, [r15+0x10]
 .. rolFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, o ..
0x767060bbf373    488bc8                  mov rcx, rax
0x767060bbf376    498b06                  mov rax, [r14]
0x767060bbf379    4983ee08                sub r14, 0x8
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0 ..
0x767060bbf37d    488901                  mov [rcx], rax
 ..      _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf380    498b4708                mov rax, [r15+0x8]
0x767060bbf384    4983c608                add r14, 0x8
0x767060bbf388    498906                  mov [r14], rax
 .. _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf38b    498b47a8                mov rax, [r15-0x58]
0x767060bbf38f    4983c608                add r14, 0x8
0x767060bbf393    498906                  mov [r14], rax
 .. Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf396    498b47b0                mov rax, [r15-0x50]
0x767060bbf39a    4983c608                add r14, 0x8
0x767060bbf39e    498906                  mov [r14], rax
 .. truction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3a1    498b4710                mov rax, [r15+0x10]
0x767060bbf3a5    4983c608                add r14, 0x8
0x767060bbf3a9    498906                  mov [r14], rax
 .. n_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3ac    498b47d0                mov rax, [r15-0x30]
0x767060bbf3b0    4983c608                add r14, 0x8
0x767060bbf3b4    498906                  mov [r14], rax
 .. pCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3b7    498b47d8                mov rax, [r15-0x28]
0x767060bbf3bb    4983c608                add r14, 0x8
0x767060bbf3bf    498906                  mov [r14], rax
 .. 0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3c2    498b47e0                mov rax, [r15-0x20]
0x767060bbf3c6    4983c608                add r14, 0x8
0x767060bbf3ca    498906                  mov [r14], rax
 .. ode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3cd    498b47e8                mov rax, [r15-0x18]
0x767060bbf3d1    4983c608                add r14, 0x8
0x767060bbf3d5    498906                  mov [r14], rax
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3d8    498b47f0                mov rax, [r15-0x10]
0x767060bbf3dc    4983c608                add r14, 0x8
0x767060bbf3e0    498906                  mov [r14], rax
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf3e3    498b47f8                mov rax, [r15-0x8]
0x767060bbf3e7    4983c608                add r14, 0x8
0x767060bbf3eb    498906                  mov [r14], rax
 .. yte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, im ..
0x767060bbf3ee    49bb3eefbb6070760000    mov r11, 0x767060bbef3e
0x767060bbf3f8    49ffd3                  call r11                      < C_Syntax._Compile_Write_Instruction_X64 : 0x0000767060bbef3e >
0x767060bbf3fb    4d8d77f8                lea r14, [r15-0x8]
0x767060bbf3ff    4d8b7e08                mov r15, [r14+0x8]
0x767060bbf403    4983ee58                sub r14, 0x58
 .. sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf407    c3                      ret
Word_Disassemble : word - 'Compile_CalculateWrite_Instruction_X64' :: codeSize = 373
Word : 0x000076705d1641e5 :: Compiled at : 0x0000767060bbf293
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 327.43 <::

 =============================
C_Syntax.Compile_Move <:> csl compiled word
SourceCode for C_Syntax.Compile_Move :>
void Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { uint8 opCode0 = 0, opCode ; uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ; if ( ! operandSize ) operandSize = 8 ; if ( imm || immSize ) { reg = 0 ; controlFlags |= IMM_B ; if ( immSize >= 8 ) { controlFlags |= ( REX_W ) ; if ( imm <= 0xffffffff ) { opCode = 0xc7 ; immSize = 4 ; controlFlags |= ( MODRM_B ) ; } else { if ( direction == TO_MEM ) { alertColors ; ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ; pause ( ) ; quit ( ) ; } opCode = 0xb8 + ( rm Bits.& 7 ) ; } } else { if ( immSize == 1 ) opCode = 0xb0 + rm ; else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ; else if ( immSize == 4 ) opCode = 0xb8 | rm ; } } else { controlFlags |= ( MODRM_B ) ; opCode = 0x88 ; if ( operandSize > 1 ) opCode |= 1 ; if ( direction == TO_REG ) opCode |= 2 ; if ( operandSize == 2 ) opCode0 = 0x66 ; if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ; } Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }
Source code file location of Compile_Move : "namespaces/compiler/x64.csl" : 346.13 :: we are now at : namespaces/compiler/x64.csl : 396.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbf40d -- code size = 743 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.Compile_Move : definition = 0x0000767060bbf40d : disassembly at namespaces/compiler/x64.csl : 396.17 :
0x767060bbf40d    4d897e08                mov [r14+0x8], r15
0x767060bbf411    4d8d7e08                lea r15, [r14+0x8]
0x767060bbf415    4981c620000000          add r14, 0x20
 .. , uint8 immSize ) {     uint8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! ope ..
0x767060bbf41c    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm  ..
0x767060bbf424    498b47e0                mov rax, [r15-0x20]
0x767060bbf428    4883f800                cmp rax, 0x0
0x767060bbf42c    0f8411000000            jz 0x767060bbf443             < C_Syntax.Compile_Move+54 >
 ..  ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immS ..
0x767060bbf432    b808000000              mov eax, 0x8
0x767060bbf437    4983c608                add r14, 0x8
0x767060bbf43b    498906                  mov [r14], rax
0x767060bbf43e    e90e000000              jmp 0x767060bbf451            < C_Syntax.Compile_Move+68 >
 .. nt64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     ..
0x767060bbf443    48c7c000000000          mov rax, 0x0
0x767060bbf44a    4983c608                add r14, 0x8
0x767060bbf44e    498906                  mov [r14], rax
 .. trolFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {       ..
0x767060bbf451    498b47d8                mov rax, [r15-0x28]
0x767060bbf455    4883f800                cmp rax, 0x0
0x767060bbf459    0f8411000000            jz 0x767060bbf470             < C_Syntax.Compile_Move+99 >
 .. ags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg ..
0x767060bbf45f    b804000000              mov eax, 0x4
0x767060bbf464    4983c608                add r14, 0x8
0x767060bbf468    498906                  mov [r14], rax
0x767060bbf46b    e90e000000              jmp 0x767060bbf47e            < C_Syntax.Compile_Move+113 >
 .. disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;   ..
0x767060bbf470    48c7c000000000          mov rax, 0x0
0x767060bbf477    4983c608                add r14, 0x8
0x767060bbf47b    498906                  mov [r14], rax
 .. sp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;     ..
0x767060bbf47e    498b0e                  mov rcx, [r14]
0x767060bbf481    498b46f8                mov rax, [r14-0x8]
0x767060bbf485    4983ee10                sub r14, 0x10
 ..  controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {   ..
0x767060bbf489    480bc1                  or rax, rcx
 .. int8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize =  ..
0x767060bbf48c    49894718                mov [r15+0x18], rax
 ..  ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlag ..
0x767060bbf490    498b47d0                mov rax, [r15-0x30]
 ..  0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFl ..
0x767060bbf494    4883f800                cmp rax, 0x0
0x767060bbf498    0f8508000000            jnz 0x767060bbf4a6            < C_Syntax.Compile_Move+153 >
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if (  ..
0x767060bbf49e    49c747d008000000        mov qword [r15-0x30], 0x8
 .. randSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )  ..
0x767060bbf4a6    498b47f0                mov rax, [r15-0x10]
0x767060bbf4aa    4883f800                cmp rax, 0x0
0x767060bbf4ae    0f850e000000            jnz 0x767060bbf4c2            < C_Syntax.Compile_Move+181 >
 .. f ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, op ..
0x767060bbf4b4    498b47f8                mov rax, [r15-0x8]
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if (  ..
0x767060bbf4b8    4883f800                cmp rax, 0x0
0x767060bbf4bc    0f8444010000            jz 0x767060bbf606             < C_Syntax.Compile_Move+505 >
 ..  ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags  ..
0x767060bbf4c2    49c747c000000000        mov qword [r15-0x40], 0x0
 ..      reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             if ..
0x767060bbf4ca    49834f1810              or qword [r15+0x18], 0x10
 ..  controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff  ..
0x767060bbf4cf    49837ff808              cmp qword [r15-0x8], 0x8
 ..  | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;      ..
0x767060bbf4d4    0f8cc4000000            jl 0x767060bbf59e             < C_Syntax.Compile_Move+401 >
 ..       {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;          ..
0x767060bbf4da    49834f1820              or qword [r15+0x18], 0x20
 .. Flags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;                 immSize = 4 ;       ..
0x767060bbf4df    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff
0x767060bbf4e4    0f8f1a000000            jg 0x767060bbf504             < C_Syntax.Compile_Move+247 >
 .. )            {                 opCode = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }   ..
0x767060bbf4ea    49c74710c7000000        mov qword [r15+0x10], 0xc7
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {     ..
0x767060bbf4f2    49c747f804000000        mov qword [r15-0x8], 0x4
 .. 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {                 if ( direction == TO_MEM )  ..
0x767060bbf4fa    49834f1802              or qword [r15+0x18], 0x2
0x767060bbf4ff    e995000000              jmp 0x767060bbf599            < C_Syntax.Compile_Move+396 >
 .. se             {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps (  ..
0x767060bbf504    49837fb002              cmp qword [r15-0x50], 0x2
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {     ..
0x767060bbf509    0f8559000000            jnz 0x767060bbf568            < C_Syntax.Compile_Move+347 >
0x767060bbf50f    49ba70d210ca1c640000    mov r10, 0x641cca10d270
 ..      {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( "\n Compil ..
0x767060bbf519    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf523    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. lertColors ;                     ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ;                     pause ( ) ;                     qui ..
0x767060bbf526    48b8cff78d6070760000    mov rax, 0x7670608df7cf
0x767060bbf530    4983c608                add r14, 0x8
0x767060bbf534    498906                  mov [r14], rax
0x767060bbf537    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bbf541    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
0x767060bbf544    49bb93b7ba6070760000    mov r11, 0x767060bab793
0x767060bbf54e    49ffd3                  call r11                      < User.pause : 0x0000767060bab793 >
0x767060bbf551    49ba20ea11ca1c640000    mov r10, 0x641cca11ea20
0x767060bbf55b    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bbf565    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..            }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize ==  ..
0x767060bbf568    b8b8000000              mov eax, 0xb8
0x767060bbf56d    4983c608                add r14, 0x8
0x767060bbf571    498906                  mov [r14], rax
 ..   }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCod ..
0x767060bbf574    498b47c8                mov rax, [r15-0x38]
 ..           opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 + ..
0x767060bbf578    b907000000              mov ecx, 0x7
 ..             opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 ..
0x767060bbf57d    4823c1                  and rax, rcx
0x767060bbf580    4983c608                add r14, 0x8
0x767060bbf584    498906                  mov [r14], rax
 ..         opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 + r ..
0x767060bbf587    498b0e                  mov rcx, [r14]
0x767060bbf58a    498b46f8                mov rax, [r14-0x8]
0x767060bbf58e    4983ee10                sub r14, 0x10
 ..       }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) o ..
0x767060bbf592    4803c1                  add rax, rcx
0x767060bbf595    49894710                mov [r15+0x10], rax
 ..  0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;              ..
0x767060bbf599    e963000000              jmp 0x767060bbf601            < C_Syntax.Compile_Move+500 >
 ..       else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0x ..
0x767060bbf59e    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bbf5a3    0f8515000000            jnz 0x767060bbf5be            < C_Syntax.Compile_Move+433 >
 ..          if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             el ..
0x767060bbf5a9    b8b0000000498b4fc8      mov r8, 0xc84f8b49000000b0
 ..     if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ..
0x767060bbf5b2    4803c1                  add rax, rcx
 ..     {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;       ..
0x767060bbf5b5    49894710                mov [r15+0x10], rax
 .. f ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( im ..
0x767060bbf5b9    e943000000              jmp 0x767060bbf601            < C_Syntax.Compile_Move+500 >
 .. e = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0x ..
0x767060bbf5be    49837ff802              cmp qword [r15-0x8], 0x2
0x767060bbf5c3    0f851d000000            jnz 0x767060bbf5e6            < C_Syntax.Compile_Move+473 >
 ..      else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     ..
0x767060bbf5c9    49c7470866000000        mov qword [r15+0x8], 0x66
 .. mSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {  ..
0x767060bbf5d1    b8b8000000              mov eax, 0xb8
 .. = 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         ..
0x767060bbf5d6    498b4fc8                mov rcx, [r15-0x38]
 ..  == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {       ..
0x767060bbf5da    480bc1                  or rax, rcx
 .. e if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     e ..
0x767060bbf5dd    49894710                mov [r15+0x10], rax
 ..  ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         co ..
0x767060bbf5e1    e91b000000              jmp 0x767060bbf601            < C_Syntax.Compile_Move+500 >
 .. e = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B  ..
0x767060bbf5e6    49837ff804              cmp qword [r15-0x8], 0x4
0x767060bbf5eb    0f8510000000            jnz 0x767060bbf601            < C_Syntax.Compile_Move+500 >
 ..     else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x8 ..
0x767060bbf5f1    b8b8000000              mov eax, 0xb8
 .. e if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;     ..
0x767060bbf5f6    498b4fc8                mov rcx, [r15-0x38]
 .. lse if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;   ..
0x767060bbf5fa    480bc1                  or rax, rcx
 ..              else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opC ..
0x767060bbf5fd    49894710                mov [r15+0x10], rax
 .. e == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( ope ..
0x767060bbf601    e95b000000              jmp 0x767060bbf661            < C_Syntax.Compile_Move+596 >
 ..   else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( directi ..
0x767060bbf606    49834f1802              or qword [r15+0x18], 0x2
 .. Flags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2  ..
0x767060bbf60b    49c7471088000000        mov qword [r15+0x10], 0x88
 ..          opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandS ..
0x767060bbf613    49837fd001              cmp qword [r15-0x30], 0x1
0x767060bbf618    0f8e05000000            jle 0x767060bbf623            < C_Syntax.Compile_Move+534 >
 ..      if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;  ..
0x767060bbf61e    49834f1001              or qword [r15+0x10], 0x1
 .. dSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( op ..
0x767060bbf623    49837fb003              cmp qword [r15-0x50], 0x3
 .. ode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) o ..
0x767060bbf628    0f8505000000            jnz 0x767060bbf633            < C_Syntax.Compile_Move+550 >
 ..  if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= ..
0x767060bbf62e    49834f1002              or qword [r15+0x10], 0x2
 .. == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFl ..
0x767060bbf633    49837fd002              cmp qword [r15-0x30], 0x2
 .. ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize  ..
0x767060bbf638    0f8508000000            jnz 0x767060bbf646            < C_Syntax.Compile_Move+569 >
 ..       if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }   ..
0x767060bbf63e    49c7470866000000        mov qword [r15+0x8], 0x66
 .. == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWri ..
0x767060bbf646    49837fd008              cmp qword [r15-0x30], 0x8
0x767060bbf64b    0f8d0b000000            jge 0x767060bbf65c            < C_Syntax.Compile_Move+591 >
 ..        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opC ..
0x767060bbf651    49837ff808              cmp qword [r15-0x8], 0x8
0x767060bbf656    0f8c05000000            jl 0x767060bbf661             < C_Syntax.Compile_Move+596 >
 ..  ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, control ..
0x767060bbf65c    49834f1820              or qword [r15+0x18], 0x20
 .. pile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf661    498b4708                mov rax, [r15+0x8]
0x767060bbf665    4983c608                add r14, 0x8
0x767060bbf669    498906                  mov [r14], rax
 .. ulateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf66c    498b4710                mov rax, [r15+0x10]
 ..  ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCod ..
0x767060bbf670    4983c608                add r14, 0x8
0x767060bbf674    498906                  mov [r14], rax
 .. te_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf677    498b47b8                mov rax, [r15-0x48]
0x767060bbf67b    4983c608                add r14, 0x8
 ..  ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, co ..
0x767060bbf67f    498906                  mov [r14], rax
 .. struction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf682    498b47c0                mov rax, [r15-0x40]
0x767060bbf686    4983c608                add r14, 0x8
0x767060bbf68a    498906                  mov [r14], rax
 .. tion_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf68d    498b47c8                mov rax, [r15-0x38]
0x767060bbf691    4983c608                add r14, 0x8
0x767060bbf695    498906                  mov [r14], rax
 .. _X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf698    498b4718                mov rax, [r15+0x18]
0x767060bbf69c    4983c608                add r14, 0x8
0x767060bbf6a0    498906                  mov [r14], rax
 .. , opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf6a3    498b47d8                mov rax, [r15-0x28]
0x767060bbf6a7    4983c608                add r14, 0x8
0x767060bbf6ab    498906                  mov [r14], rax
 .. ode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf6ae    498b47e0                mov rax, [r15-0x20]
0x767060bbf6b2    4983c608                add r14, 0x8
0x767060bbf6b6    498906                  mov [r14], rax
 .. od, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf6b9    498b47e8                mov rax, [r15-0x18]
0x767060bbf6bd    4983c608                add r14, 0x8
0x767060bbf6c1    498906                  mov [r14], rax
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf6c4    498b47f0                mov rax, [r15-0x10]
0x767060bbf6c8    4983c608                add r14, 0x8
0x767060bbf6cc    498906                  mov [r14], rax
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf6cf    498b47f8                mov rax, [r15-0x8]
0x767060bbf6d3    4983c608                add r14, 0x8
0x767060bbf6d7    498906                  mov [r14], rax
 .. ontrolFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dis ..
0x767060bbf6da    49bb93f2bb6070760000    mov r11, 0x767060bbf293
0x767060bbf6e4    49ffd3                  call r11                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x0000767060bbf293 >
0x767060bbf6e7    4d8d77f8                lea r14, [r15-0x8]
0x767060bbf6eb    4d8b7e08                mov r15, [r14+0x8]
0x767060bbf6ef    4983ee50                sub r14, 0x50
 .. sib, disp, dispSize, imm, immSize ) ; }  ..
0x767060bbf6f3    c3                      ret
Word_Disassemble : word - 'Compile_Move' :: codeSize = 743
Word : 0x000076705d1691a5 :: Compiled at : 0x0000767060bbf40d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 396.17 <::

 =============================
C_Syntax.Compile_MoveImm <:> csl compiled word
SourceCode for C_Syntax.Compile_MoveImm :>
void Compile_MoveImm ( Boolean mod, Boolean rm, int64 disp, int64 imm, byte immSize ) { if ( ! immSize ) immSize = 8 ; if ( mod == MEM ) { if ( disp && ( imm <= 0xffffffff ) ) { Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ; } else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) { Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ; Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ; } } else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}
Source code file location of Compile_MoveImm : "namespaces/compiler/x64.csl" : 430.16 :: we are now at : namespaces/compiler/x64.csl : 450.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbf9dd -- code size = 631 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.Compile_MoveImm : definition = 0x0000767060bbf9dd : disassembly at namespaces/compiler/x64.csl : 450.20 :
0x767060bbf9dd    4d897e08                mov [r14+0x8], r15
0x767060bbf9e1    4d8d7e08                lea r15, [r14+0x8]
0x767060bbf9e5    4981c608000000          add r14, 0x8
 .. nt64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff  ..
0x767060bbf9ec    498b47f8                mov rax, [r15-0x8]
 ..  int64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xfffffff ..
0x767060bbf9f0    4883f800                cmp rax, 0x0
0x767060bbf9f4    0f8508000000            jnz 0x767060bbfa02            < C_Syntax.Compile_MoveImm+37 >
 .. Size ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {      ..
0x767060bbf9fa    49c747f808000000        mov qword [r15-0x8], 0x8
 ..  ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile ..
0x767060bbfa02    49837fd800              cmp qword [r15-0x28], 0x0
0x767060bbfa07    0f85b2010000            jnz 0x767060bbfbbf            < C_Syntax.Compile_MoveImm+482 >
 .. od == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, ..
0x767060bbfa0d    498b47e8                mov rax, [r15-0x18]
0x767060bbfa11    4883f800                cmp rax, 0x0
0x767060bbfa15    0f84c2000000            jz 0x767060bbfadd             < C_Syntax.Compile_MoveImm+256 >
 .. )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, i ..
0x767060bbfa1b    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff
0x767060bbfa20    0f8fb7000000            jg 0x767060bbfadd             < C_Syntax.Compile_MoveImm+256 >
 ..  MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, i ..
0x767060bbfa26    498bc6                  mov rax, r14
 ..                 if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize  ..
0x767060bbfa29    4983ee08                sub r14, 0x8
0x767060bbfa2d    48833800                cmp qword [rax], 0x0
0x767060bbfa31    7410                    jz 0x60bbfa43                 < C_Syntax.Compile_MoveImm+102 >
0x767060bbfa33    488378f800              cmp qword [rax-0x8], 0x0
0x767060bbfa38    7409                    jz 0x60bbfa43                 < C_Syntax.Compile_MoveImm+102 >
 ..   {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSi ..
0x767060bbfa3a    49c70601000000          mov qword [r14], 0x1
0x767060bbfa41    eb07                    jmp 0x767060bbfa4a            < C_Syntax.Compile_MoveImm+109 >
0x767060bbfa43    49c70600000000          mov qword [r14], 0x0
0x767060bbfa4a    0f8e8d000000            jle 0x767060bbfadd            < C_Syntax.Compile_MoveImm+256 >
 ..          {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) ||  ..
0x767060bbfa50    b802000000              mov eax, 0x2
0x767060bbfa55    4983c608                add r14, 0x8
0x767060bbfa59    498906                  mov [r14], rax
 ..  {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm >  ..
0x767060bbfa5c    498b47d8                mov rax, [r15-0x28]
0x767060bbfa60    4983c608                add r14, 0x8
0x767060bbfa64    498906                  mov [r14], rax
 ..           Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xfff ..
0x767060bbfa67    48c7c000000000          mov rax, 0x0
0x767060bbfa6e    4983c608                add r14, 0x8
0x767060bbfa72    498906                  mov [r14], rax
 ..        Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffff ..
0x767060bbfa75    498b47e0                mov rax, [r15-0x20]
0x767060bbfa79    4983c608                add r14, 0x8
0x767060bbfa7d    498906                  mov [r14], rax
 ..    Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ..
0x767060bbfa80    48c7c000000000          mov rax, 0x0
0x767060bbfa87    4983c608                add r14, 0x8
0x767060bbfa8b    498906                  mov [r14], rax
 .. Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )  ..
0x767060bbfa8e    48c7c000000000          mov rax, 0x0
0x767060bbfa95    4983c608                add r14, 0x8
0x767060bbfa99    498906                  mov [r14], rax
 .. pile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )     ..
0x767060bbfa9c    498b47e8                mov rax, [r15-0x18]
0x767060bbfaa0    4983c608                add r14, 0x8
0x767060bbfaa4    498906                  mov [r14], rax
 .. ove ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         { ..
0x767060bbfaa7    48c7c000000000          mov rax, 0x0
0x767060bbfaae    4983c608                add r14, 0x8
0x767060bbfab2    498906                  mov [r14], rax
 ..  ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {    ..
0x767060bbfab5    498b47f0                mov rax, [r15-0x10]
0x767060bbfab9    4983c608                add r14, 0x8
0x767060bbfabd    498906                  mov [r14], rax
 .. _MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {         ..
0x767060bbfac0    498b47f8                mov rax, [r15-0x8]
0x767060bbfac4    4983c608                add r14, 0x8
0x767060bbfac8    498906                  mov [r14], rax
 ..  0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( imm ..
0x767060bbfacb    49bb0df4bb6070760000    mov r11, 0x767060bbf40d
0x767060bbfad5    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x0000767060bbf40d >
0x767060bbfad8    e9dd000000              jmp 0x767060bbfbba            < C_Syntax.Compile_MoveImm+477 >
 .. ize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG ..
0x767060bbfadd    49837ff808              cmp qword [r15-0x8], 0x8
0x767060bbfae2    0f8d0b000000            jge 0x767060bbfaf3            < C_Syntax.Compile_MoveImm+278 >
 ..       else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, ..
0x767060bbfae8    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff
0x767060bbfaed    0f8ec7000000            jle 0x767060bbfbba            < C_Syntax.Compile_MoveImm+477 >
 ..                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU ..
0x767060bbfaf3    b803000000              mov eax, 0x3
0x767060bbfaf8    4983c608                add r14, 0x8
0x767060bbfafc    498906                  mov [r14], rax
 ..                Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, di ..
0x767060bbfaff    b803000000              mov eax, 0x3
0x767060bbfb04    4983c608                add r14, 0x8
 ..   else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0,  ..
0x767060bbfb08    498906                  mov [r14], rax
 ..           Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, i ..
0x767060bbfb0b    48c7c000000000          mov rax, 0x0
0x767060bbfb12    4983c608                add r14, 0x8
0x767060bbfb16    498906                  mov [r14], rax
 ..        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immS ..
0x767060bbfb19    b809000000              mov eax, 0x9
0x767060bbfb1e    4983c608                add r14, 0x8
0x767060bbfb22    498906                  mov [r14], rax
 .. pile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;    ..
0x767060bbfb25    48c7c000000000          mov rax, 0x0
0x767060bbfb2c    4983c608                add r14, 0x8
0x767060bbfb30    498906                  mov [r14], rax
 .. e_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;       ..
0x767060bbfb33    48c7c000000000          mov rax, 0x0
0x767060bbfb3a    4983c608                add r14, 0x8
0x767060bbfb3e    498906                  mov [r14], rax
 .. ove ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;          ..
0x767060bbfb41    48c7c000000000          mov rax, 0x0
0x767060bbfb48    4983c608                add r14, 0x8
0x767060bbfb4c    498906                  mov [r14], rax
 ..  ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }   ..
0x767060bbfb4f    48c7c000000000          mov rax, 0x0
0x767060bbfb56    4983c608                add r14, 0x8
0x767060bbfb5a    498906                  mov [r14], rax
 .. TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }      ..
0x767060bbfb5d    498b47f0                mov rax, [r15-0x10]
0x767060bbfb61    4983c608                add r14, 0x8
0x767060bbfb65    498906                  mov [r14], rax
 .. G, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     ..
0x767060bbfb68    498b47f8                mov rax, [r15-0x8]
0x767060bbfb6c    4983c608                add r14, 0x8
0x767060bbfb70    498906                  mov [r14], rax
 ..  ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_T ..
0x767060bbfb73    49bb0df4bb6070760000    mov r11, 0x767060bbf40d
0x767060bbfb7d    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x0000767060bbf40d >
 ..              Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, di ..
0x767060bbfb80    498b47e0                mov rax, [r15-0x20]
0x767060bbfb84    4983c608                add r14, 0x8
0x767060bbfb88    498906                  mov [r14], rax
 ..          Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp,  ..
0x767060bbfb8b    b809000000              mov eax, 0x9
0x767060bbfb90    4983c608                add r14, 0x8
0x767060bbfb94    498906                  mov [r14], rax
 .. ompile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, im ..
0x767060bbfb97    498b47e8                mov rax, [r15-0x18]
0x767060bbfb9b    4983c608                add r14, 0x8
0x767060bbfb9f    498906                  mov [r14], rax
 .. _Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize  ..
0x767060bbfba2    498b47f8                mov rax, [r15-0x8]
0x767060bbfba6    4983c608                add r14, 0x8
0x767060bbfbaa    498906                  mov [r14], rax
 .. 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_ ..
0x767060bbfbad    49bbc5f7bb6070760000    mov r11, 0x767060bbf7c5
0x767060bbfbb7    49ffd3                  call r11                      < C_Syntax.Compile_Move_Reg_To_Rm : 0x0000767060bbf7c5 >
 .. , THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbba    e988000000              jmp 0x767060bbfc47            < C_Syntax.Compile_MoveImm+618 >
 ..       }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbbf    b803000000              mov eax, 0x3
0x767060bbfbc4    4983c608                add r14, 0x8
0x767060bbfbc8    498906                  mov [r14], rax
 ..     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbcb    498b47d8                mov rax, [r15-0x28]
0x767060bbfbcf    4983c608                add r14, 0x8
0x767060bbfbd3    498906                  mov [r14], rax
 ..      else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbd6    48c7c000000000          mov rax, 0x0
0x767060bbfbdd    4983c608                add r14, 0x8
0x767060bbfbe1    498906                  mov [r14], rax
 ..   else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbe4    498b47e0                mov rax, [r15-0x20]
0x767060bbfbe8    4983c608                add r14, 0x8
0x767060bbfbec    498906                  mov [r14], rax
 .. se Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbef    48c7c000000000          mov rax, 0x0
0x767060bbfbf6    4983c608                add r14, 0x8
0x767060bbfbfa    498906                  mov [r14], rax
 .. Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfbfd    48c7c000000000          mov rax, 0x0
0x767060bbfc04    4983c608                add r14, 0x8
0x767060bbfc08    498906                  mov [r14], rax
 .. pile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfc0b    498b47e8                mov rax, [r15-0x18]
0x767060bbfc0f    4983c608                add r14, 0x8
0x767060bbfc13    498906                  mov [r14], rax
 .. ove ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfc16    48c7c000000000          mov rax, 0x0
0x767060bbfc1d    4983c608                add r14, 0x8
0x767060bbfc21    498906                  mov [r14], rax
 ..  ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfc24    498b47f0                mov rax, [r15-0x10]
0x767060bbfc28    4983c608                add r14, 0x8
0x767060bbfc2c    498906                  mov [r14], rax
 .. _REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfc2f    498b47f8                mov rax, [r15-0x8]
0x767060bbfc33    4983c608                add r14, 0x8
0x767060bbfc37    498906                  mov [r14], rax
 ..  immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfc3a    49bb0df4bb6070760000    mov r11, 0x767060bbf40d
0x767060bbfc44    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x0000767060bbf40d >
0x767060bbfc47    4d8d77f8                lea r14, [r15-0x8]
0x767060bbfc4b    4d8b7e08                mov r15, [r14+0x8]
0x767060bbfc4f    4983ee28                sub r14, 0x28
 .. 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  ..
0x767060bbfc53    c3                      ret
Word_Disassemble : word - 'Compile_MoveImm' :: codeSize = 631
Word : 0x000076705d18afd5 :: Compiled at : 0x0000767060bbf9dd
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 450.20 <::

 =============================
C_Syntax._Compile_X_Group1_Immediate <:> csl compiled word
SourceCode for C_Syntax._Compile_X_Group1_Immediate :>
void _Compile_X_Group1_Immediate ( Boolean code, Boolean mod, Boolean rm, int64 disp, uint64 imm, Boolean iSize ) { byte opCode = 0x80 ; int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ; if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) ) { Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ; _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ; } else { rm &= 0xff, controlFlags |= REX_W ; if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ; else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ; Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ; } }
Source code file location of _Compile_X_Group1_Immediate : "namespaces/compiler/x64.csl" : 562.28 :: we are now at : namespaces/compiler/x64.csl : 587.32
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0211 -- code size = 642 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax._Compile_X_Group1_Immediate : definition = 0x0000767060bc0211 : disassembly at namespaces/compiler/x64.csl : 587.32 :
0x767060bc0211    4d897e08                mov [r14+0x8], r15
0x767060bc0215    4d8d7e08                lea r15, [r14+0x8]
0x767060bc0219    4981c618000000          add r14, 0x18
 .. an iSize ) {              byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == ME ..
0x767060bc0220    49c7470880000000        mov qword [r15+0x8], 0x80
 .. e = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0x ..
0x767060bc0228    b812000000              mov eax, 0x12
0x767060bc022d    4983c608                add r14, 0x8
0x767060bc0231    498906                  mov [r14], rax
 ..  controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     { ..
0x767060bc0234    498b47e8                mov rax, [r15-0x18]
0x767060bc0238    4883f800                cmp rax, 0x0
0x767060bc023c    0f8411000000            jz 0x767060bc0253             < C_Syntax._Compile_X_Group1_Immediate+66 >
 .. lFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {        ..
0x767060bc0242    b808000000              mov eax, 0x8
0x767060bc0247    4983c608                add r14, 0x8
0x767060bc024b    498906                  mov [r14], rax
0x767060bc024e    e90e000000              jmp 0x767060bc0261            < C_Syntax._Compile_X_Group1_Immediate+80 >
 .. ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                 ..
0x767060bc0253    48c7c000000000          mov rax, 0x0
0x767060bc025a    4983c608                add r14, 0x8
0x767060bc025e    498906                  mov [r14], rax
 .. IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                   ..
0x767060bc0261    498b0e                  mov rcx, [r14]
0x767060bc0264    498b46f8                mov rax, [r14-0x8]
0x767060bc0268    4983ee10                sub r14, 0x10
 .. nt64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )   ..
0x767060bc026c    480bc1                  or rax, rcx
 ..        byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize >  ..
0x767060bc026f    49894710                mov [r15+0x10], rax
 ..  ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_Move ..
0x767060bc0273    49837fd800              cmp qword [r15-0x28], 0x0
0x767060bc0278    0f85e2000000            jnz 0x767060bc0360            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..  ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_RE ..
0x767060bc027e    49837ff804              cmp qword [r15-0x8], 0x4
0x767060bc0283    0f8f35000000            jg 0x767060bc02be             < C_Syntax._Compile_X_Group1_Immediate+173 >
 ..  mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ; ..
0x767060bc0289    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff
0x767060bc028e    0f8ecc000000            jle 0x767060bc0360            < C_Syntax._Compile_X_Group1_Immediate+335 >
 .. P_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg (  ..
0x767060bc0294    498bc6                  mov rax, r14
0x767060bc0297    4983ee08                sub r14, 0x8
0x767060bc029b    48833800                cmp qword [rax], 0x0
0x767060bc029f    7410                    jz 0x60bc02b1                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x767060bc02a1    488378f800              cmp qword [rax-0x8], 0x0
0x767060bc02a6    7409                    jz 0x60bc02b1                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x767060bc02a8    49c70601000000          mov qword [r14], 0x1
0x767060bc02af    eb07                    jmp 0x767060bc02b8            < C_Syntax._Compile_X_Group1_Immediate+167 >
0x767060bc02b1    49c70600000000          mov qword [r14], 0x0
0x767060bc02b8    0f8ea2000000            jle 0x767060bc0360            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..              Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ; ..
0x767060bc02be    b809000000              mov eax, 0x9
0x767060bc02c3    4983c608                add r14, 0x8
0x767060bc02c7    498906                  mov [r14], rax
 ..    Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     ..
0x767060bc02ca    498b47f0                mov rax, [r15-0x10]
0x767060bc02ce    4983c608                add r14, 0x8
0x767060bc02d2    498906                  mov [r14], rax
 .. mpile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else ..
0x767060bc02d5    498b47f8                mov rax, [r15-0x8]
0x767060bc02d9    4983c608                add r14, 0x8
0x767060bc02dd    498906                  mov [r14], rax
 .. fff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_R ..
0x767060bc02e0    49bb59fcbb6070760000    mov r11, 0x767060bbfc59
0x767060bc02ea    49ffd3                  call r11                      < C_Syntax.Compile_MoveImm_To_Reg : 0x0000767060bbfc59 >
 .. iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlag ..
0x767060bc02ed    498b47d0                mov rax, [r15-0x30]
0x767060bc02f1    4983c608                add r14, 0x8
0x767060bc02f5    498906                  mov [r14], rax
 .. ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= R ..
0x767060bc02f8    b803000000              mov eax, 0x3
0x767060bc02fd    4983c608                add r14, 0x8
0x767060bc0301    498906                  mov [r14], rax
 ..        _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W  ..
0x767060bc0304    48c7c000000000          mov rax, 0x0
0x767060bc030b    4983c608                add r14, 0x8
0x767060bc030f    498906                  mov [r14], rax
 ..   _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;     ..
0x767060bc0312    b809000000              mov eax, 0x9
0x767060bc0317    4983c608                add r14, 0x8
0x767060bc031b    498906                  mov [r14], rax
 .. _X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( ..
0x767060bc031e    498b47e0                mov rax, [r15-0x20]
0x767060bc0322    4983c608                add r14, 0x8
0x767060bc0326    498906                  mov [r14], rax
 .. roup1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSi ..
0x767060bc0329    48c7c000000000          mov rax, 0x0
0x767060bc0330    4983c608                add r14, 0x8
0x767060bc0334    498906                  mov [r14], rax
 .. p1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize  ..
0x767060bc0337    498b47e8                mov rax, [r15-0x18]
0x767060bc033b    4983c608                add r14, 0x8
0x767060bc033f    498906                  mov [r14], rax
 .. ode, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ..
0x767060bc0342    b808000000              mov eax, 0x8
0x767060bc0347    4983c608                add r14, 0x8
0x767060bc034b    498906                  mov [r14], rax
 .. eg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm  ..
0x767060bc034e    49bbb2ffbb6070760000    mov r11, 0x767060bbffb2
0x767060bc0358    49ffd3                  call r11                      < C_Syntax._Compile_X_Group1 : 0x0000767060bbffb2 >
0x767060bc035b    e926010000              jmp 0x767060bc0486            < C_Syntax._Compile_X_Group1_Immediate+629 >
 ..  ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ..
0x767060bc0360    498367e0ff              and qword [r15-0x20], 0xffffffffffffffff
 .. {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( ..
0x767060bc0365    49834f1020              or qword [r15+0x10], 0x20
 .. controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || (  ..
0x767060bc036a    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bc036f    0f8f30000000            jg 0x767060bc03a5             < C_Syntax._Compile_X_Group1_Immediate+404 >
 ..      if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) op ..
0x767060bc0375    498b47f0                mov rax, [r15-0x10]
0x767060bc0379    4983c608                add r14, 0x8
 ..    {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if  ..
0x767060bc037d    498906                  mov [r14], rax
0x767060bc0380    49bb46e8bb6070760000    mov r11, 0x767060bbe846
0x767060bc038a    49ffd3                  call r11                      < C_Syntax.Abs : 0x0000767060bbe846 >
0x767060bc038d    b800010000              mov eax, 0x100
 ..  ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3 ..
0x767060bc0392    488bc8                  mov rcx, rax
0x767060bc0395    498b06                  mov rax, [r14]
0x767060bc0398    4983ee08                sub r14, 0x8
 .. f ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode | ..
0x767060bc039c    483bc1                  cmp rax, rcx
0x767060bc039f    0f8c0a000000            jl 0x767060bc03af             < C_Syntax._Compile_X_Group1_Immediate+414 >
 ..  ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;        ..
0x767060bc03a5    49834f0801              or qword [r15+0x8], 0x1
 ..  Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;          ..
0x767060bc03aa    e948000000              jmp 0x767060bc03f7            < C_Syntax._Compile_X_Group1_Immediate+486 >
 .. ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                                ..
0x767060bc03af    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bc03b4    0f8e30000000            jle 0x767060bc03ea            < C_Syntax._Compile_X_Group1_Immediate+473 >
 .. lse if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Inst ..
0x767060bc03ba    498b47f0                mov rax, [r15-0x10]
0x767060bc03be    4983c608                add r14, 0x8
0x767060bc03c2    498906                  mov [r14], rax
0x767060bc03c5    49bb46e8bb6070760000    mov r11, 0x767060bbe846
0x767060bc03cf    49ffd3                  call r11                      < C_Syntax.Abs : 0x0000767060bbe846 >
0x767060bc03d2    b800010000              mov eax, 0x100
 ..  ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_ ..
0x767060bc03d7    488bc8                  mov rcx, rax
0x767060bc03da    498b06                  mov rax, [r14]
0x767060bc03dd    4983ee08                sub r14, 0x8
 ..  ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instructio ..
0x767060bc03e1    483bc1                  cmp rax, rcx
0x767060bc03e4    0f8d0d000000            jge 0x767060bc03f7            < C_Syntax._Compile_X_Group1_Immediate+486 >
 .. | ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod ..
0x767060bc03ea    49834f0803              or qword [r15+0x8], 0x3
 ..  imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, r ..
0x767060bc03ef    49c747f801000000        mov qword [r15-0x8], 0x1
 .. pile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc03f7    48c7c000000000          mov rax, 0x0
0x767060bc03fe    4983c608                add r14, 0x8
0x767060bc0402    498906                  mov [r14], rax
 .. e_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0405    498b4708                mov rax, [r15+0x8]
0x767060bc0409    4983c608                add r14, 0x8
 .. ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode,  ..
0x767060bc040d    498906                  mov [r14], rax
 .. ateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0410    498b47d8                mov rax, [r15-0x28]
0x767060bc0414    4983c608                add r14, 0x8
0x767060bc0418    498906                  mov [r14], rax
 .. ite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc041b    498b47d0                mov rax, [r15-0x30]
0x767060bc041f    4983c608                add r14, 0x8
0x767060bc0423    498906                  mov [r14], rax
 .. struction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0426    498b47e0                mov rax, [r15-0x20]
0x767060bc042a    4983c608                add r14, 0x8
0x767060bc042e    498906                  mov [r14], rax
 .. ction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0431    498b4710                mov rax, [r15+0x10]
0x767060bc0435    4983c608                add r14, 0x8
0x767060bc0439    498906                  mov [r14], rax
 ..  opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc043c    48c7c000000000          mov rax, 0x0
0x767060bc0443    4983c608                add r14, 0x8
0x767060bc0447    498906                  mov [r14], rax
 .. Code, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc044a    498b47e8                mov rax, [r15-0x18]
0x767060bc044e    4983c608                add r14, 0x8
0x767060bc0452    498906                  mov [r14], rax
 .. mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0455    48c7c000000000          mov rax, 0x0
0x767060bc045c    4983c608                add r14, 0x8
0x767060bc0460    498906                  mov [r14], rax
 .. , code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0463    498b47f0                mov rax, [r15-0x10]
0x767060bc0467    4983c608                add r14, 0x8
0x767060bc046b    498906                  mov [r14], rax
 .. e, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc046e    498b47f8                mov rax, [r15-0x8]
0x767060bc0472    4983c608                add r14, 0x8
0x767060bc0476    498906                  mov [r14], rax
 .. e = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iS ..
0x767060bc0479    49bb93f2bb6070760000    mov r11, 0x767060bbf293
0x767060bc0483    49ffd3                  call r11                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x0000767060bbf293 >
0x767060bc0486    4d8d77f8                lea r14, [r15-0x8]
0x767060bc048a    4d8b7e08                mov r15, [r14+0x8]
0x767060bc048e    4983ee30                sub r14, 0x30
 .. ags, 0, disp, 0, imm, iSize ) ;     } }  ..
0x767060bc0492    c3                      ret
Word_Disassemble : word - '_Compile_X_Group1_Immediate' :: codeSize = 642
Word : 0x000076705d1ac325 :: Compiled at : 0x0000767060bc0211
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 587.32 <::

 =============================
C_Syntax._Compile_Move_DataStackN_ToReg <:> csl compiled word
SourceCode for C_Syntax._Compile_Move_DataStackN_ToReg :>
void _Compile_Move_DataStackN_ToReg ( reg, n ) { Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
Source code file location of _Compile_Move_DataStackN_ToReg : "namespaces/compiler/x64.csl" : 640.31 :: we are now at : namespaces/compiler/x64.csl : 645.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0a1b -- code size = 178 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax._Compile_Move_DataStackN_ToReg : definition = 0x0000767060bc0a1b : disassembly at namespaces/compiler/x64.csl : 645.35 :
0x767060bc0a1b    4d897e08                mov [r14+0x8], r15
0x767060bc0a1f    4d8d7e08                lea r15, [r14+0x8]
0x767060bc0a23    4981c608000000          add r14, 0x8
 .. eg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a2a    b803000000              mov eax, 0x3
0x767060bc0a2f    4983c608                add r14, 0x8
0x767060bc0a33    498906                  mov [r14], rax
 .. reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a36    48c7c000000000          mov rax, 0x0
0x767060bc0a3d    4983c608                add r14, 0x8
0x767060bc0a41    498906                  mov [r14], rax
 .. n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a44    498b47f0                mov rax, [r15-0x10]
0x767060bc0a48    4983c608                add r14, 0x8
0x767060bc0a4c    498906                  mov [r14], rax
 ..         Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a4f    b80e000000              mov eax, 0xe
0x767060bc0a54    4983c608                add r14, 0x8
0x767060bc0a58    498906                  mov [r14], rax
 ..    Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a5b    b808000000              mov eax, 0x8
0x767060bc0a60    4983c608                add r14, 0x8
0x767060bc0a64    498906                  mov [r14], rax
 .. Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a67    48c7c000000000          mov rax, 0x0
0x767060bc0a6e    4983c608                add r14, 0x8
0x767060bc0a72    498906                  mov [r14], rax
 .. pile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a75    498b47f8                mov rax, [r15-0x8]
 .. _Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a79    b908000000              mov ecx, 0x8
 .. le_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a7e    480fafc1                imul rax, rcx
0x767060bc0a82    4983c608                add r14, 0x8
0x767060bc0a86    498906                  mov [r14], rax
 .. ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a89    48c7c000000000          mov rax, 0x0
0x767060bc0a90    4983c608                add r14, 0x8
0x767060bc0a94    498906                  mov [r14], rax
 .. EG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0a97    48c7c000000000          mov rax, 0x0
0x767060bc0a9e    4983c608                add r14, 0x8
0x767060bc0aa2    498906                  mov [r14], rax
 ..  MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0aa5    48c7c000000000          mov rax, 0x0
0x767060bc0aac    4983c608                add r14, 0x8
0x767060bc0ab0    498906                  mov [r14], rax
 .. _DataStackN_ToReg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0ab3    49bb0df4bb6070760000    mov r11, 0x767060bbf40d
0x767060bc0abd    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x0000767060bbf40d >
0x767060bc0ac0    4d8d77f8                lea r14, [r15-0x8]
0x767060bc0ac4    4d8b7e08                mov r15, [r14+0x8]
0x767060bc0ac8    4983ee10                sub r14, 0x10
 .. reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; }
0x767060bc0acc    c3                      ret
Word_Disassemble : word - '_Compile_Move_DataStackN_ToReg' :: codeSize = 178
Word : 0x000076705d1c75d5 :: Compiled at : 0x0000767060bc0a1b
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 645.35 <::

 =============================
Interpreter._Compile_Stack_PopToReg <:> csl compiled word
SourceCode for Interpreter._Compile_Stack_PopToReg :>
: _Compile_Stack_PopToReg ( reg ) _Compile_Move_DataStackN_ToReg ( reg, 0 ) _Compile_SUBI_DSP ( CELL ) ;
Source code file location of _Compile_Stack_PopToReg : "namespaces/compiler/x64.csl" : 655.2 :: we are now at : namespaces/compiler/x64.csl : 660.28
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0ad2 -- code size = 91 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter._Compile_Stack_PopToReg : definition = 0x0000767060bc0ad2 : disassembly at namespaces/compiler/x64.csl : 660.28 :
0x767060bc0ad2    4d897e08                mov [r14+0x8], r15
0x767060bc0ad6    4d8d7e08                lea r15, [r14+0x8]
0x767060bc0ada    4981c608000000          add r14, 0x8
 ..      _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ;
0x767060bc0ae1    498b47f8                mov rax, [r15-0x8]
0x767060bc0ae5    4983c608                add r14, 0x8
0x767060bc0ae9    498906                  mov [r14], rax
 .. _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ;
0x767060bc0aec    48c7c000000000          mov rax, 0x0
0x767060bc0af3    4983c608                add r14, 0x8
0x767060bc0af7    498906                  mov [r14], rax
 .. : _Compile_Stack_PopToReg ( reg )     _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ;  ..
0x767060bc0afa    49bb1b0abc6070760000    mov r11, 0x767060bc0a1b
0x767060bc0b04    49ffd3                  call r11                      < C_Syntax._Compile_Move_DataStackN_ToReg : 0x0000767060bc0a1b >
 .. reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ;
0x767060bc0b07    b808000000              mov eax, 0x8
0x767060bc0b0c    4983c608                add r14, 0x8
0x767060bc0b10    498906                  mov [r14], rax
 .. _DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ;
0x767060bc0b13    49bb2507bc6070760000    mov r11, 0x767060bc0725
0x767060bc0b1d    49ffd3                  call r11                      < C_Syntax._Compile_SUBI_DSP : 0x0000767060bc0725 >
0x767060bc0b20    4d8d77f8                lea r14, [r15-0x8]
0x767060bc0b24    4d8b7e08                mov r15, [r14+0x8]
0x767060bc0b28    4983ee08                sub r14, 0x8
 .. SUBI_DSP ( CELL )                     ;
0x767060bc0b2c    c3                      ret
Word_Disassemble : word - '_Compile_Stack_PopToReg' :: codeSize = 91
Word : 0x000076705d1c8de5 :: Compiled at : 0x0000767060bc0ad2
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 660.28 <::

 =============================
Combinators.iax <:> csl compiled word
SourceCode for Combinators.iax :>
asm: iax _Compile_Stack_PopToReg ( R8D ) _Compile_CallThruReg ( R8D ) ;asm
Source code file location of iax : "namespaces/compiler/x64.csl" : 665.5 :: we are now at : namespaces/compiler/x64.csl : 672.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0b41 -- code size = 11 bytes
 -----------------------------
Word :: Combinators.iax : definition = 0x0000767060bc0b41 : disassembly at namespaces/compiler/x64.csl : 672.17 :
 ..                         asm: iax      _Compile_Stack_PopToReg ( R8D )                                       _Compile_CallThruReg ( R8D )   ..
0x767060bc0b41    4d8b06                  mov r8, [r14]
0x767060bc0b44    4983ee08                sub r14, 0x8
 ..                                       _Compile_CallThruReg ( R8D )                                       ;asm  ..
0x767060bc0b48    49ffd0                  call r8
 ..                                       ;asm  ..
0x767060bc0b4b    c3                      ret
Word_Disassemble : word - 'iax' :: codeSize = 11
Word : 0x000076705d1c9f35 :: Compiled at : 0x0000767060bc0b41
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 672.17 <::

 =============================
Combinators.Compile_Stack_Push_R8D <:> csl compiled word
SourceCode for Combinators.Compile_Stack_Push_R8D :>
: Compile_Stack_Push_R8D ( ) _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
Source code file location of Compile_Stack_Push_R8D : "namespaces/compiler/x64.csl" : 695.2 :: we are now at : namespaces/compiler/x64.csl : 700.27
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0dac -- code size = 77 bytes
TypeSignature :
 -----------------------------
Word :: Combinators.Compile_Stack_Push_R8D : definition = 0x0000767060bc0dac : disassembly at namespaces/compiler/x64.csl : 700.27 :
 .. _Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
0x767060bc0dac    b8080000004983c608      mov r8, 0x8c6834900000008
0x767060bc0db5    498906                  mov [r14], rax
 ..      : Compile_Stack_Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;  ..
0x767060bc0db8    49bbaf0cbc6070760000    mov r11, 0x767060bc0caf
0x767060bc0dc2    49ffd3                  call r11                      < Combinators._Compile_ADDI_DSP : 0x0000767060bc0caf >
 .. LL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
0x767060bc0dc5    b80e000000              mov eax, 0xe
0x767060bc0dca    4983c608                add r14, 0x8
0x767060bc0dce    498906                  mov [r14], rax
 ..     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
0x767060bc0dd1    48c7c000000000          mov rax, 0x0
0x767060bc0dd8    4983c608                add r14, 0x8
0x767060bc0ddc    498906                  mov [r14], rax
 ..  _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
0x767060bc0ddf    b808000000              mov eax, 0x8
0x767060bc0de4    4983c608                add r14, 0x8
0x767060bc0de8    498906                  mov [r14], rax
 ..  )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
0x767060bc0deb    49bb0709bc6070760000    mov r11, 0x767060bc0907
0x767060bc0df5    49ffd3                  call r11                      < C_Syntax._Compile_MoveReg_To_StackN : 0x0000767060bc0907 >
 .. ile_MoveReg_To_StackN ( DSP, 0, R8D ) ;
0x767060bc0df8    c3                      ret
Word_Disassemble : word - 'Compile_Stack_Push_R8D' :: codeSize = 77
Word : 0x000076705d1d0d65 :: Compiled at : 0x0000767060bc0dac
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 700.27 <::

 =============================
User.qeval <:> csl compiled word
SourceCode for User.qeval :>
: qeval s iax ;
Source code file location of qeval : "namespaces/compiler/x64.csl" : 703.2 :: we are now at : namespaces/compiler/x64.csl : 704.19
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0e0d -- code size = 37 bytes
 -----------------------------
Word :: User.qeval : definition = 0x0000767060bc0e0d : disassembly at namespaces/compiler/x64.csl : 704.19 :
 ..                               : qeval s iax ;  ..
0x767060bc0e0d    49baf0e00fca1c640000    mov r10, 0x641cca0fe0f0
0x767060bc0e17    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc0e21    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..                             : qeval s iax ;  ..
0x767060bc0e24    49bb410bbc6070760000    mov r11, 0x767060bc0b41
0x767060bc0e2e    49ffd3                  call r11                      < Combinators.iax : 0x0000767060bc0b41 >
 ..                         : qeval s iax ;  ..
0x767060bc0e31    c3                      ret
Word_Disassemble : word - 'qeval' :: codeSize = 37
Word : 0x000076705d1d19a5 :: Compiled at : 0x0000767060bc0e0d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 704.19 <::

 =============================
User.stest <:> csl compiled word
SourceCode for User.stest :>
asm: stest _Compile_MoveTOS_To_R8D ( ) _Compile_Move_DataStackN_ToReg ( R8D, 0 ) Compile_Stack_Push_R8D ( ) _Compile_SUBI_DSP ( CELL ) ;asm
Source code file location of stest : "namespaces/compiler/x64.csl" : 707.5 :: we are now at : namespaces/compiler/x64.csl : 713.10
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0e46 -- code size = 18 bytes
 -----------------------------
Word :: User.stest : definition = 0x0000767060bc0e46 : disassembly at namespaces/compiler/x64.csl : 713.10 :
 ..                        asm: stest     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ..
0x767060bc0e46    4d8b06                  mov r8, [r14]
 .. t     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CEL ..
0x767060bc0e49    4d8b06                  mov r8, [r14]
 .. _Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  ..
0x767060bc0e4c    4983c608                add r14, 0x8
0x767060bc0e50    4d8906                  mov [r14], r8
 ..  )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  ..
0x767060bc0e53    4983ee08                sub r14, 0x8
 .. 8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  ..
0x767060bc0e57    c3                      ret
Word_Disassemble : word - 'stest' :: codeSize = 18
Word : 0x000076705d1d1eb5 :: Compiled at : 0x0000767060bc0e46
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 713.10 <::

this is some purposefully funky code for testing

DataStack at : namespaces/compiler/x64.csl : 717.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 717.10 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 x64 test ok
 =============================
Stack.ndup <:> csl compiled word
SourceCode for Stack.ndup :>
asm: ndup _Compile_MoveTOS_To_R8D ( ) _Compile_SUBI_DSP ( CELL ) _Compile_Move_DataStackN_ToReg ( R9D, 0 ) "start" label _Compile_TESTreg_Toreg ( R8D, R8D ) "end" 0 EQ jcc _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R9D ) _Compile_IncDecreg ( DEC, R8D ) "start" goto "end" label;asm
Source code file location of ndup : "namespaces/compiler/x64.csl" : 721.5 :: we are now at : namespaces/compiler/x64.csl : 735.22
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc0e6c -- code size = 35 bytes
 -----------------------------
Word :: Stack.ndup : definition = 0x0000767060bc0e6c : disassembly at namespaces/compiler/x64.csl : 735.22 :
 ..                         asm: ndup     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, ..
0x767060bc0e6c    4d8b06                  mov r8, [r14]
 .. p     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Comp ..
0x767060bc0e6f    4983ee08                sub r14, 0x8
 ..  )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D )  ..
0x767060bc0e73    4d8b0e                  mov r9, [r14]
 .. oReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_M ..
0x767060bc0e76    4585c0                  test r8d, r8d
 .. reg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDe ..
0x767060bc0e79    0f840f000000            jz 0x767060bc0e8e             < Stack.ndup+34 >
 .. g ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( D ..
0x767060bc0e7f    4983c608                add r14, 0x8
 .. cc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto      ..
0x767060bc0e83    4d890e                  mov [r14], r9
 .. MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  ..
0x767060bc0e86    41ffc8                  dec r8d
 .. le_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  ..
0x767060bc0e89    e9e8ffffff              jmp 0x767060bc0e76            < Stack.ndup+10 >
 .. R8D )     "start" goto     "end" label;asm  ..
0x767060bc0e8e    c3                      ret
Word_Disassemble : word - 'ndup' :: codeSize = 35
Word : 0x000076705d1d2a85 :: Compiled at : 0x0000767060bc0e6c
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 735.22 <::

DataStack at : namespaces/compiler/x64.csl : 736.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 736.27 :
DataStack depth =  11 : Dsp (R14) = Top = 0x000076705fbb2b10, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2b10 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x000076705fbb2b08 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x000076705fbb2b00 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x000076705fbb2af8 > = 0x0000000000000007
  DataStack   [  -4 ] < 0x000076705fbb2af0 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x000076705fbb2ae8 > = 0x0000000000000007
  DataStack   [  -6 ] < 0x000076705fbb2ae0 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x000076705fbb2ad8 > = 0x0000000000000007
  DataStack   [  -8 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 736.37 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Asm.testAsm <:> csl compiled word
SourceCode for Asm.testAsm :>
asm: testAsm MOVrr RDX, RAX MOVrr RAX, RBX MOVrr RBX, RAX MOVrr RAX, RDX ;asm
Source code file location of testAsm : "namespaces/compiler/x64.csl" : 785.5 :: we are now at : namespaces/compiler/x64.csl : 791.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc10f1 -- code size = 13 bytes
 -----------------------------
Word :: Asm.testAsm : definition = 0x0000767060bc10f1 : disassembly at namespaces/compiler/x64.csl : 791.12 :
 ..                      asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  ..
0x767060bc10f1    488bd0                  mov rdx, rax
 ..   asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  ..
0x767060bc10f4    488bc3                  mov rax, rbx
 .. MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm
0x767060bc10f7    488bd8                  mov rbx, rax
 .. MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm
0x767060bc10fa    488bc2                  mov rax, rdx
 ..     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm
0x767060bc10fd    c3                      ret
Word_Disassemble : word - 'testAsm' :: codeSize = 13
Word : 0x000076705d1dad65 :: Compiled at : 0x0000767060bc10f1
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 791.12 <::

 _TestDone_ = 1

including namespaces/test/dev.csl at namespaces/ninit.csl : 13.22 ...
 5040 5040
 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :>
int factoriali ( int8 REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n ; n = n - 1 ; res = res * (n--) ; } return res; }
Source code file location of factoriali : "namespaces/test/dev.csl" : 22.15 :: we are now at : namespaces/test/dev.csl : 45.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1192 -- code size = 39 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x0000767060bc1192 : disassembly at namespaces/test/dev.csl : 45.15 :
0x767060bc1192    498b3e                  mov rdi, [r14]
 .. li ( int8 REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     ..
0x767060bc1195    be01000000              mov esi, 0x1
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return re ..
0x767060bc119a    4883ff02                cmp rdi, 0x2
0x767060bc119e    7c15                    jl 0x60bc11b5                 < C_Syntax.factoriali+35 >
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  ..
0x767060bc11a0    480faff7                imul rsi, rdi
 .. )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  ..
0x767060bc11a4    4883ef01                sub rdi, 0x1
 ..  * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  ..
0x767060bc11a8    480faff7                imul rsi, rdi
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  ..
0x767060bc11ac    48ffcf                  dec rdi
0x767060bc11af    4883ff02                cmp rdi, 0x2
0x767060bc11b3    7deb                    jge 0x60bc11a0                < C_Syntax.factoriali+14 >
 .. s = res * (n--) ;     }        return res; }  ..
0x767060bc11b5    498936                  mov [r14], rsi
 .. es * (n--) ;     }        return res; }  ..
0x767060bc11b8    c3                      ret
Word_Disassemble : word - 'factoriali' :: codeSize = 39
Word : 0x000076705d1dd289 :: Compiled at : 0x0000767060bc1192
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 45.15 <::

 =============================
C_Syntax.factoriali2 <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali2 :>
int factoriali2 ( int8 REG n | REG res ) { res = 1; do { res = res * n ; n = n - 1 ; } while ( n >= 2 ) ; return res; }
Source code file location of factoriali2 : "namespaces/test/dev.csl" : 49.16 :: we are now at : namespaces/test/dev.csl : 59.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc11cd -- code size = 26 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.factoriali2 : definition = 0x0000767060bc11cd : disassembly at namespaces/test/dev.csl : 59.16 :
0x767060bc11cd    498b3e                  mov rdi, [r14]
 .. i2 ( int8 REG n | REG res ) {     res = 1;     do      {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; }
0x767060bc11d0    be01000000              mov esi, 0x1
 ..  ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; }
0x767060bc11d5    480faff7                imul rsi, rdi
 ..       {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; }
0x767060bc11d9    4883ef01                sub rdi, 0x1
 .. * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; }
0x767060bc11dd    4883ff02                cmp rdi, 0x2
0x767060bc11e1    7df2                    jge 0x60bc11d5                < C_Syntax.factoriali2+8 >
 ..   }     while ( n >= 2 ) ;     return res; }
0x767060bc11e3    498936                  mov [r14], rsi
 ..    while ( n >= 2 ) ;     return res; }
0x767060bc11e6    c3                      ret
Word_Disassemble : word - 'factoriali2' :: codeSize = 26
Word : 0x000076705d1e25a9 :: Compiled at : 0x0000767060bc11cd
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 59.16 <::
 5040 5040 5040
 =============================
User.factorial006 <:> csl compiled word
SourceCode for User.factorial006 :>
: factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
Source code file location of factorial006 : "namespaces/test/dev.csl" : 70.2 :: we are now at : namespaces/test/dev.csl : 72.25
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1249 -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial006 : definition = 0x0000767060bc1249 : disassembly at namespaces/test/dev.csl : 72.25 :
 ..                        : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  ..
0x767060bc1249    498b3e                  mov rdi, [r14]
 : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  ..
0x767060bc124c    be01000000              mov esi, 0x1
 .. 6 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060bc1251    4883ff01                cmp rdi, 0x1
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060bc1255    7e0d                    jle 0x60bc1264                < User.factorial006+27 >
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060bc1257    480faff7                imul rsi, rdi
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060bc125b    48ffcf                  dec rdi
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
0x767060bc125e    4883ff01                cmp rdi, 0x1
0x767060bc1262    7ff3                    jg 0x60bc1257                 < User.factorial006+14 >
 .. n @ * rec store n -- } while return ( rec @ ) ;
0x767060bc1264    498936                  mov [r14], rsi
 .. c store n -- } while return ( rec @ ) ;
0x767060bc1267    c3                      ret
Word_Disassemble : word - 'factorial006' :: codeSize = 31
Word : 0x000076705d1e8d79 :: Compiled at : 0x0000767060bc1249
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 72.25 <::
 5040 factorial006  : ok


 =============================
User.qexp <:> csl compiled word
SourceCode for User.qexp :>
: qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;
Source code file location of qexp : "namespaces/test/dev.csl" : 74.2 :: we are now at : namespaces/test/dev.csl : 74.64
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc127c -- code size = 94 bytes
TypeSignature :
 -----------------------------
Word :: User.qexp : definition = 0x0000767060bc127c : disassembly at namespaces/test/dev.csl : 74.64 :
0x767060bc127c    498b06                  mov rax, [r14]
0x767060bc127f    4983c608                add r14, 0x8
0x767060bc1283    498906                  mov [r14], rax
0x767060bc1286    b801000000              mov eax, 0x1
 ..                            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc128b    488bc8                  mov rcx, rax
0x767060bc128e    498b06                  mov rax, [r14]
0x767060bc1291    4983ee08                sub r14, 0x8
 ..                          : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc1295    483bc1                  cmp rax, rcx
0x767060bc1298    0f8f05000000            jg 0x767060bc12a3             < User.qexp+39 >
 ..                   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc129e    e936000000              jmp 0x767060bc12d9            < User.qexp+93 >
 ..            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc12a3    498b06                  mov rax, [r14]
 ..                       : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc12a6    4983c608                add r14, 0x8
0x767060bc12aa    498906                  mov [r14], rax
0x767060bc12ad    498b06                  mov rax, [r14]
0x767060bc12b0    4983ee08                sub r14, 0x8
 ..        : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc12b4    48ffc8                  dec rax
0x767060bc12b7    4983c608                add r14, 0x8
0x767060bc12bb    498906                  mov [r14], rax
 ..     : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc12be    e8b9ffffff              call 0x767060bc127c           < User.qexp : 0x0000767060bc127c >
0x767060bc12c3    498b0e                  mov rcx, [r14]
0x767060bc12c6    498b46f8                mov rax, [r14-0x8]
0x767060bc12ca    4983ee10                sub r14, 0x10
   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  ..
0x767060bc12ce    480fafc1                imul rax, rcx
0x767060bc12d2    4983c608                add r14, 0x8
0x767060bc12d6    498906                  mov [r14], rax
 .. dup 1 <= if{ }else{ dup -- qexp * }fi ;
0x767060bc12d9    c3                      ret
Word_Disassemble : word - 'qexp' :: codeSize = 94
Word : 0x000076705d1eb9c9 :: Compiled at : 0x0000767060bc127c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 74.64 <::
 5040 5040 5040 5040
 5040
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :>
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; }
Source code file location of faccs3 : "namespaces/test/dev.csl" : 84.7 :: we are now at : namespaces/test/dev.csl : 92.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc14af -- code size = 73 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x0000767060bc14af : disassembly at namespaces/test/dev.csl : 92.20 :
0x767060bc14af    4d897e08                mov [r14+0x8], r15
0x767060bc14b3    4d8d7e08                lea r15, [r14+0x8]
0x767060bc14b7    4981c610000000          add r14, 0x10
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  ..
0x767060bc14be    49c7470801000000        mov qword [r15+0x8], 0x1
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14c6    49837ff801              cmp qword [r15-0x8], 0x1
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14cb    7e1b                    jle 0x60bc14e8                < C_Syntax.faccs3+57 >
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14cd    498b4708                mov rax, [r15+0x8]
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14d1    498b4ff8                mov rcx, [r15-0x8]
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14d5    480fafc1                imul rax, rcx
0x767060bc14d9    49894708                mov [r15+0x8], rax
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14dd    49ff4ff8                dec qword [r15-0x8]
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc14e1    49837ff801              cmp qword [r15-0x8], 0x1
0x767060bc14e6    7fe5                    jg 0x60bc14cd                 < C_Syntax.faccs3+30 >
 ..           rec = rec * n ;      }      return rec ; }
0x767060bc14e8    498b4708                mov rax, [r15+0x8]
0x767060bc14ec    4d8d77f8                lea r14, [r15-0x8]
0x767060bc14f0    4d8b7e08                mov r15, [r14+0x8]
 ..    rec = rec * n ;      }      return rec ; }
0x767060bc14f4    498906                  mov [r14], rax
 ..  = rec * n ;      }      return rec ; }
0x767060bc14f7    c3                      ret
Word_Disassemble : word - 'faccs3' :: codeSize = 73
Word : 0x000076705d1f3649 :: Compiled at : 0x0000767060bc14af
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 92.20 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :>
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc = facc * ( n -- ) ; } return facc ; }
Source code file location of fac5 : "namespaces/test/dev.csl" : 98.5 :: we are now at : namespaces/test/dev.csl : 108.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc150c -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x0000767060bc150c : disassembly at namespaces/test/dev.csl : 108.21 :
0x767060bc150c    498b3e                  mov rdi, [r14]
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; }
0x767060bc150f    be01000000              mov esi, 0x1
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; }
0x767060bc1514    4883ff01                cmp rdi, 0x1
0x767060bc1518    7e0d                    jle 0x60bc1527                < C_Syntax.fac5+27 >
 .. 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; }
0x767060bc151a    480faff7                imul rsi, rdi
 ..    {                facc = facc * ( n -- ) ;    }     return facc ; }
0x767060bc151e    48ffcf                  dec rdi
0x767060bc1521    4883ff01                cmp rdi, 0x1
0x767060bc1525    7ff3                    jg 0x60bc151a                 < C_Syntax.fac5+14 >
 .. c = facc * ( n -- ) ;    }     return facc ; }
0x767060bc1527    498936                  mov [r14], rsi
 .. c * ( n -- ) ;    }     return facc ; }
0x767060bc152a    c3                      ret
Word_Disassemble : word - 'fac5' :: codeSize = 31
Word : 0x000076705d1f7019 :: Compiled at : 0x0000767060bc150c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 108.21 <::
 5040
 =============================
C_Syntax.faccs <:> csl compiled word
SourceCode for C_Syntax.faccs :>
int faccs ( REG n | REG rec ) { rec = 1 ; while ( n > 1 ) { rec = rec * n ; n-- ; } return rec ; }
Source code file location of faccs : "namespaces/test/dev.csl" : 112.6 :: we are now at : namespaces/test/dev.csl : 121.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc153f -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.faccs : definition = 0x0000767060bc153f : disassembly at namespaces/test/dev.csl : 121.19 :
0x767060bc153f    498b3e                  mov rdi, [r14]
 int faccs ( REG n | REG rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }  ..
0x767060bc1542    be01000000              mov esi, 0x1
 .. rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }
0x767060bc1547    4883ff01                cmp rdi, 0x1
0x767060bc154b    7e0d                    jle 0x60bc155a                < C_Syntax.faccs+27 >
 .. le ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }
0x767060bc154d    480faff7                imul rsi, rdi
 ..  1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }
0x767060bc1551    48ffcf                  dec rdi
0x767060bc1554    4883ff01                cmp rdi, 0x1
0x767060bc1558    7ff3                    jg 0x60bc154d                 < C_Syntax.faccs+14 >
 .. = rec * n ;  n-- ;      }      return rec ; }
0x767060bc155a    498936                  mov [r14], rsi
 .. * n ;  n-- ;      }      return rec ; }
0x767060bc155d    c3                      ret
Word_Disassemble : word - 'faccs' :: codeSize = 31
Word : 0x000076705d1fa9e9 :: Compiled at : 0x0000767060bc153f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 121.19 <::
 5040
 =============================
C_Syntax.faccs1 <:> csl compiled word
SourceCode for C_Syntax.faccs1 :>
int faccs1 ( REG n | REG rec ) { rec = 1 ; if ( n > 1 ) { do { rec = rec * n ; n-- ; } while ( n > 1 ) ; } return rec ; }
Source code file location of faccs1 : "namespaces/test/dev.csl" : 125.7 :: we are now at : namespaces/test/dev.csl : 138.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1572 -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.faccs1 : definition = 0x0000767060bc1572 : disassembly at namespaces/test/dev.csl : 138.20 :
0x767060bc1572    498b3e                  mov rdi, [r14]
int faccs1 ( REG n | REG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }     ..
0x767060bc1575    be01000000              mov esi, 0x1
 .. EG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }          while ( n >  ..
0x767060bc157a    4883ff01                cmp rdi, 0x1
0x767060bc157e    7f00                    jg 0x60bc1580                 < C_Syntax.faccs1+14 >
 .. n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  ..
0x767060bc1580    480faff7                imul rsi, rdi
 ..      {              rec = rec * n ;  n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  ..
0x767060bc1584    48ffcf                  dec rdi
 ..   n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  ..
0x767060bc1587    4883ff01                cmp rdi, 0x1
0x767060bc158b    7ff3                    jg 0x60bc1580                 < C_Syntax.faccs1+14 >
 ..    while ( n > 1 ) ;     }     return rec ; }  ..
0x767060bc158d    498936                  mov [r14], rsi
 .. le ( n > 1 ) ;     }     return rec ; }  ..
0x767060bc1590    c3                      ret
Word_Disassemble : word - 'faccs1' :: codeSize = 31
Word : 0x000076705d1fe059 :: Compiled at : 0x0000767060bc1572
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 138.20 <::
 5040 5040
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :>
int faccs2 ( REG n | REG rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; }
Source code file location of faccs2 : "namespaces/test/dev.csl" : 167.7 :: we are now at : namespaces/test/dev.csl : 175.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1626 -- code size = 31 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x0000767060bc1626 : disassembly at namespaces/test/dev.csl : 175.20 :
0x767060bc1626    498b3e                  mov rdi, [r14]
 ..  ( REG n | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc1629    be01000000              mov esi, 0x1
 ..  | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc162e    4883ff01                cmp rdi, 0x1
 .. EG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc1632    7e0d                    jle 0x60bc1641                < C_Syntax.faccs2+27 >
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc1634    480faff7                imul rsi, rdi
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc1638    48ffcf                  dec rdi
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }
0x767060bc163b    4883ff01                cmp rdi, 0x1
0x767060bc163f    7ff3                    jg 0x60bc1634                 < C_Syntax.faccs2+14 >
 ..    rec = rec * n ;      }      return rec ; }
0x767060bc1641    498936                  mov [r14], rsi
 ..  = rec * n ;      }      return rec ; }
0x767060bc1644    c3                      ret
Word_Disassemble : word - 'faccs2' :: codeSize = 31
Word : 0x000076705d2083a9 :: Compiled at : 0x0000767060bc1626
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 175.20 <::
 5040 5040
 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 196.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 196.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 196.15 <::

 =============================
User.ifx <:> csl compiled word
SourceCode for User.ifx :>
: ifx ( n w | k ) { k 1 = } { k @ n @ <= } { k ++ } { w @ _ifx } for ;
Source code file location of ifx : "namespaces/test/dev.csl" : 221.2 :: we are now at : namespaces/test/dev.csl : 225.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc198a -- code size = 83 bytes
TypeSignature :
 -----------------------------
Word :: User.ifx : definition = 0x0000767060bc198a : disassembly at namespaces/test/dev.csl : 225.16 :
0x767060bc198a    4d897e08                mov [r14+0x8], r15
0x767060bc198e    4d8d7e08                lea r15, [r14+0x8]
0x767060bc1992    4981c610000000          add r14, 0x10
 ..          : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  ..
0x767060bc1999    49c7470801000000        mov qword [r15+0x8], 0x1
 ..    : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  ..
0x767060bc19a1    498b4708                mov rax, [r15+0x8]
   : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  ..
0x767060bc19a5    498b4ff0                mov rcx, [r15-0x10]
 ..  ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19a9    483bc1                  cmp rax, rcx
 .. n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19ac    0f8f1e000000            jg 0x767060bc19d0             < User.ifx+70 >
 ..  1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19b2    498b47f8                mov rax, [r15-0x8]
0x767060bc19b6    4983c608                add r14, 0x8
0x767060bc19ba    498906                  mov [r14], rax
 ..  } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19bd    49bb8d18bc6070760000    mov r11, 0x767060bc188d
0x767060bc19c7    49ffd3                  call r11                      < User._ifx : 0x0000767060bc188d >
 .. k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19ca    49ff4708                inc qword [r15+0x8]
 ..       { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19ce    ebd1                    jmp 0x767060bc19a1            < User.ifx+23 >
0x767060bc19d0    4d8d77f8                lea r14, [r15-0x8]
0x767060bc19d4    4d8b7e08                mov r15, [r14+0x8]
0x767060bc19d8    4983ee10                sub r14, 0x10
 .. @ <= } { k ++ }      { w @ _ifx } for ;
0x767060bc19dc    c3                      ret
Word_Disassemble : word - 'ifx' :: codeSize = 83
Word : 0x000076705d21def9 :: Compiled at : 0x0000767060bc198a
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 225.16 <::

 =============================
User._ffx <:> csl compiled word
SourceCode for User._ffx :>
: _ffx ( n w | t ) nl 7 w @ wordRun decimal p nl { t 0 = } { t @ n @ < } { t ++ } { reps @ w @ ifx } for ;
Source code file location of _ffx : "namespaces/test/dev.csl" : 228.2 :: we are now at : namespaces/test/dev.csl : 233.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1a3a -- code size = 231 bytes
TypeSignature :
 -----------------------------
Word :: User._ffx : definition = 0x0000767060bc1a3a : disassembly at namespaces/test/dev.csl : 233.17 :
0x767060bc1a3a    4d897e08                mov [r14+0x8], r15
0x767060bc1a3e    4d8d7e08                lea r15, [r14+0x8]
0x767060bc1a42    4981c610000000          add r14, 0x10
0x767060bc1a49    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc1a53    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc1a5d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..            : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  ..
0x767060bc1a60    b807000000              mov eax, 0x7
0x767060bc1a65    4983c608                add r14, 0x8
0x767060bc1a69    498906                  mov [r14], rax
 ..          : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  ..
0x767060bc1a6c    498b47f8                mov rax, [r15-0x8]
0x767060bc1a70    4983c608                add r14, 0x8
0x767060bc1a74    498906                  mov [r14], rax
 ..      : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  ..
0x767060bc1a77    49ba100d13ca1c640000    mov r10, 0x641cca130d10
0x767060bc1a81    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc1a8b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  ..
0x767060bc1a8e    49baa00213ca1c640000    mov r10, 0x641cca1302a0
0x767060bc1a98    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc1aa2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1aa5    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bc1aaf    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1ab2    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc1abc    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc1ac6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. l 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1ac9    49c7470800000000        mov qword [r15+0x8], 0x0
 .. @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1ad1    498b4708                mov rax, [r15+0x8]
 .. rdRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1ad5    498b4ff0                mov rcx, [r15-0x10]
 .. n decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1ad9    483bc1                  cmp rax, rcx
 .. decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1adc    0f8d32000000            jge 0x767060bc1b14            < User._ffx+218 >
 .. t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1ae2    48b86931225d70760000    mov rax, 0x76705d223169
0x767060bc1aec    488b00                  mov rax, [rax]
0x767060bc1aef    4983c608                add r14, 0x8
0x767060bc1af3    498906                  mov [r14], rax
 ..  { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1af6    498b47f8                mov rax, [r15-0x8]
0x767060bc1afa    4983c608                add r14, 0x8
0x767060bc1afe    498906                  mov [r14], rax
 ..  @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1b01    49bb8a19bc6070760000    mov r11, 0x767060bc198a
0x767060bc1b0b    49ffd3                  call r11                      < User.ifx : 0x0000767060bc198a >
 .. l p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1b0e    49ff4708                inc qword [r15+0x8]
 ..  nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1b12    ebbd                    jmp 0x767060bc1ad1            < User._ffx+151 >
0x767060bc1b14    4d8d77f8                lea r14, [r15-0x8]
0x767060bc1b18    4d8b7e08                mov r15, [r14+0x8]
0x767060bc1b1c    4983ee10                sub r14, 0x10
 .. { t ++ }      { reps @ w @ ifx } for  ;
0x767060bc1b20    c3                      ret
Word_Disassemble : word - '_ffx' :: codeSize = 231
Word : 0x000076705d223289 :: Compiled at : 0x0000767060bc1a3a
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 233.17 <::

 ffx ...

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 247.9 :: we are now at : namespaces/test/dev.csl : 260.22
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1f43 -- code size = 49 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc1f43 : disassembly at namespaces/test/dev.csl : 260.22 :
0x767060bc1f43    498b3e                  mov rdi, [r14]
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 ..
0x767060bc1f46    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc1f4d    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc1f54    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc1f59    4883ff00                cmp rdi, 0x0
0x767060bc1f5d    7411                    jz 0x60bc1f70                 < C_Syntax.fibPTC2?+45 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc1f5f    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc1f62    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc1f65    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc1f68    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc1f6b    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc1f6e    75ef                    jnz 0x60bc1f5f                < C_Syntax.fibPTC2?+28 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc1f70    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc1f73    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 49
Word : 0x000076705d2305f9 :: Compiled at : 0x0000767060bc1f43
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 260.22 <::
 6765
 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000442360 seconds at namespaces/test/dev.csl : 269.16
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000839304 seconds at namespaces/test/dev.csl : 270.17
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000441729 seconds at namespaces/test/dev.csl : 271.18
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000480952 seconds at namespaces/test/dev.csl : 272.18
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000470943 seconds at namespaces/test/dev.csl : 273.17
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.003029502 seconds at namespaces/test/dev.csl : 275.16
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003342718 seconds at namespaces/test/dev.csl : 276.13
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003358739 seconds at namespaces/test/dev.csl : 277.12
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002955683 seconds at namespaces/test/dev.csl : 278.13
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 qexp2 :
Timer [ 1 ] : elapsed time = 0.002877245 seconds at namespaces/test/dev.csl : 279.14
 :: function : qexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003348940 seconds at namespaces/test/dev.csl : 280.11
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003299738 seconds at namespaces/test/dev.csl : 281.12
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp3 :
Timer [ 1 ] : elapsed time = 0.002554430 seconds at namespaces/test/dev.csl : 282.12
 :: function : bexp3 : called on args : 1 - 23 : 1000 reps

 5040

 fac :
Timer [ 1 ] : elapsed time = 0.000737513 seconds at namespaces/test/dev.csl : 284.10
 :: function : fac : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000472646 seconds at namespaces/test/dev.csl : 285.11
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000452219 seconds at namespaces/test/dev.csl : 287.16
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 factorial2 :
Timer [ 1 ] : elapsed time = 0.000581751 seconds at namespaces/test/dev.csl : 288.17
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 5040

 factorial006 :
Timer [ 1 ] : elapsed time = 0.000445595 seconds at namespaces/test/dev.csl : 289.19
 :: function : factorial006 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000421982 seconds at namespaces/test/dev.csl : 290.17
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000445926 seconds at namespaces/test/dev.csl : 291.18
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000440456 seconds at namespaces/test/dev.csl : 292.18
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000430226 seconds at namespaces/test/dev.csl : 293.18
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000852559 seconds at namespaces/test/dev.csl : 294.17
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000434645 seconds at namespaces/test/dev.csl : 295.18
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000434074 seconds at namespaces/test/dev.csl : 296.18
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial_O3 :
Timer [ 1 ] : elapsed time = 0.000964789 seconds at namespaces/test/dev.csl : 297.20
 :: function : cfactorial_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2_O3 :
Timer [ 1 ] : elapsed time = 0.000426440 seconds at namespaces/test/dev.csl : 298.21
 :: function : cfactorial2_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3_O3 :
Timer [ 1 ] : elapsed time = 0.000427111 seconds at namespaces/test/dev.csl : 299.21
 :: function : cfactorial3_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial4_O3 :
Timer [ 1 ] : elapsed time = 0.000412363 seconds at namespaces/test/dev.csl : 300.21
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

Using Namespaces :> User Root C int Locals Int Logic Compiler Interpreter Shell Defines Stack Asm void Combinators X64 int64 byte uint64 uint8 Bits Compiling a Ar1 DLLNodeAlloc DLLNode Buffer Class Experimental Buffer2048 typedef byteTest Experimental3 xbt _byteTest w Experimental libc CBuffer Dlsym String chey0 CObj chey System Debug Ar9 Ar3 Ar2 Control DObject Lexer testD a112 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil Io Word Macro Namespace StartupMacros Reserved PreProcessor Memory Colors File Array MemorySpace Forth L9

 5040

 faccs :
Timer [ 1 ] : elapsed time = 0.000479019 seconds at namespaces/test/dev.csl : 303.12
 :: function : faccs : called on args : 1 - 23 : 1000 reps

 5040

 faccs1 :
Timer [ 1 ] : elapsed time = 0.000474430 seconds at namespaces/test/dev.csl : 304.13
 :: function : faccs1 : called on args : 1 - 23 : 1000 reps

 5040

 faccs2 :
Timer [ 1 ] : elapsed time = 0.000602620 seconds at namespaces/test/dev.csl : 305.13
 :: function : faccs2 : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000461836 seconds at namespaces/test/dev.csl : 306.11
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 fac40 :
Timer [ 1 ] : elapsed time = 0.000777839 seconds at namespaces/test/dev.csl : 307.12
 :: function : fac40 : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.cpow <:> csl compiled word
SourceCode for C_Syntax.cpow :>
int cpow ( base power | out ) { for ( out = 1 ; power ; power -- ) { out = out * base ; } return out ; }
Source code file location of cpow : "namespaces/test/dev.csl" : 316.9 :: we are now at : namespaces/test/dev.csl : 318.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1f79 -- code size = 79 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x0000767060bc1f79 : disassembly at namespaces/test/dev.csl : 318.17 :
0x767060bc1f79    4d897e08                mov [r14+0x8], r15
0x767060bc1f7d    4d8d7e08                lea r15, [r14+0x8]
0x767060bc1f81    4981c610000000          add r14, 0x10
int cpow ( base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }  ..
0x767060bc1f88    49c7470801000000        mov qword [r15+0x8], 0x1
 ..  base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1f90    498b47f8                mov rax, [r15-0x8]
0x767060bc1f94    4883f800                cmp rax, 0x0
0x767060bc1f98    0f8416000000            jz 0x767060bc1fb4             < C_Syntax.cpow+59 >
 .. out = 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1f9e    498b4708                mov rax, [r15+0x8]
 .. 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1fa2    498b4ff0                mov rcx, [r15-0x10]
 .. = 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1fa6    480fafc1                imul rax, rcx
 .. for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1faa    49894708                mov [r15+0x8], rax
 .. out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1fae    49ff4ff8                dec qword [r15-0x8]
 .. ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }
0x767060bc1fb2    ebdc                    jmp 0x767060bc1f90            < C_Syntax.cpow+23 >
 ..  ; power --  ) { out = out * base ; } return out ; }
0x767060bc1fb4    498b4708                mov rax, [r15+0x8]
0x767060bc1fb8    4d8d77f8                lea r14, [r15-0x8]
0x767060bc1fbc    4d8b7e08                mov r15, [r14+0x8]
0x767060bc1fc0    4983ee08                sub r14, 0x8
 .. r --  ) { out = out * base ; } return out ; }
0x767060bc1fc4    498906                  mov [r14], rax
 .. ) { out = out * base ; } return out ; }
0x767060bc1fc7    c3                      ret
Word_Disassemble : word - 'cpow' :: codeSize = 79
Word : 0x000076705d236189 :: Compiled at : 0x0000767060bc1f79
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 318.17 <::
 1073741824 1073741824
 =============================
Root.pow <:> csl compiled word
SourceCode for Root.pow :>
: pow ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of pow : "namespaces/test/dev.csl" : 323.2 :: we are now at : namespaces/test/dev.csl : 326.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc1fcd -- code size = 96 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.pow : definition = 0x0000767060bc1fcd : disassembly at namespaces/test/dev.csl : 326.11 :
0x767060bc1fcd    4d897e08                mov [r14+0x8], r15
0x767060bc1fd1    4d8d7e08                lea r15, [r14+0x8]
0x767060bc1fd5    4981c610000000          add r14, 0x10
 ..  ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1fdc    49c7470801000000        mov qword [r15+0x8], 0x1
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1fe4    49837ff800              cmp qword [r15-0x8], 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1fe9    0f8e2a000000            jle 0x767060bc2019            < Root.pow+76 >
 .. 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1fef    498d4708                lea rax, [r15+0x8]
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1ff3    4983c608                add r14, 0x8
0x767060bc1ff7    498906                  mov [r14], rax
 .. } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1ffa    498b4708                mov rax, [r15+0x8]
 .. wer @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc1ffe    498b4ff0                mov rcx, [r15-0x10]
0x767060bc2002    480fafc1                imul rax, rcx
 ..  > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc2006    488bc8                  mov rcx, rax
0x767060bc2009    498b06                  mov rax, [r14]
0x767060bc200c    4983ee08                sub r14, 0x8
 ..  } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc2010    488908                  mov [rax], rcx
 .. ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc2013    49ff4ff8                dec qword [r15-0x8]
 .. out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ;
0x767060bc2017    ebcb                    jmp 0x767060bc1fe4            < Root.pow+23 >
 .. er --  } { out out @ base @ * = } for return out @ ;
0x767060bc2019    498b4708                mov rax, [r15+0x8]
0x767060bc201d    4d8d77f8                lea r14, [r15-0x8]
0x767060bc2021    4d8b7e08                mov r15, [r14+0x8]
0x767060bc2025    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc2029    498906                  mov [r14], rax
 .. t out @ base @ * = } for return out @ ;
0x767060bc202c    c3                      ret
Word_Disassemble : word - 'pow' :: codeSize = 96
Word : 0x000076705d2397f9 :: Compiled at : 0x0000767060bc1fcd
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 326.11 <::

 65536

Timer [ 1 ] : elapsed time = 0.000942899 seconds at namespaces/test/dev.csl : 326.11

 1073741824
 =============================
Root.powReg <:> csl compiled word
SourceCode for Root.powReg :>
: powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg : "namespaces/test/dev.csl" : 327.2 :: we are now at : namespaces/test/dev.csl : 329.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc2041 -- code size = 39 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg : definition = 0x0000767060bc2041 : disassembly at namespaces/test/dev.csl : 329.14 :
 ..                              : powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ ..
0x767060bc2041    498b36                  mov rsi, [r14]
0x767060bc2044    498b7ef8                mov rdi, [r14-0x8]
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2048    ba01000000              mov edx, 0x1
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc204d    4883fe00                cmp rsi, 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2051    0f8e09000000            jle 0x767060bc2060            < Root.powReg+31 >
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2057    480fafd7                imul rdx, rdi
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc205b    48ffce                  dec rsi
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc205e    ebed                    jmp 0x767060bc204d            < Root.powReg+12 >
0x767060bc2060    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc2064    498916                  mov [r14], rdx
 .. t out @ base @ * = } for return out @ ;
0x767060bc2067    c3                      ret
Word_Disassemble : word - 'powReg' :: codeSize = 39
Word : 0x000076705d23cb09 :: Compiled at : 0x0000767060bc2041
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 329.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.000796995 seconds at namespaces/test/dev.csl : 329.14

 1073741824
 =============================
Root.powReg2 <:> csl compiled word
SourceCode for Root.powReg2 :>
: powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg2 : "namespaces/test/dev.csl" : 330.2 :: we are now at : namespaces/test/dev.csl : 332.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc206d -- code size = 63 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg2 : definition = 0x0000767060bc206d : disassembly at namespaces/test/dev.csl : 332.15 :
0x767060bc206d    4d897e08                mov [r14+0x8], r15
0x767060bc2071    4d8d7e08                lea r15, [r14+0x8]
0x767060bc2075    4981c608000000          add r14, 0x8
 ..                             : powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = ..
0x767060bc207c    498b7ff8                mov rdi, [r15-0x8]
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2080    be01000000              mov esi, 0x1
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2085    4883ff00                cmp rdi, 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2089    0f8e0d000000            jle 0x767060bc209c            < Root.powReg2+47 >
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc208f    498b4ff0                mov rcx, [r15-0x10]
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2093    480faff1                imul rsi, rcx
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2097    48ffcf                  dec rdi
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc209a    ebe9                    jmp 0x767060bc2085            < Root.powReg2+24 >
0x767060bc209c    4d8d77f8                lea r14, [r15-0x8]
0x767060bc20a0    4d8b7e08                mov r15, [r14+0x8]
0x767060bc20a4    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc20a8    498936                  mov [r14], rsi
 .. t out @ base @ * = } for return out @ ;
0x767060bc20ab    c3                      ret
Word_Disassemble : word - 'powReg2' :: codeSize = 63
Word : 0x000076705d23fe19 :: Compiled at : 0x0000767060bc206d
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 332.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000915287 seconds at namespaces/test/dev.csl : 332.15

 1073741824
 =============================
Root.powReg3 <:> csl compiled word
SourceCode for Root.powReg3 :>
: powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg3 : "namespaces/test/dev.csl" : 333.2 :: we are now at : namespaces/test/dev.csl : 336.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc20b1 -- code size = 61 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg3 : definition = 0x0000767060bc20b1 : disassembly at namespaces/test/dev.csl : 336.15 :
0x767060bc20b1    4d897e08                mov [r14+0x8], r15
0x767060bc20b5    4d8d7e08                lea r15, [r14+0x8]
0x767060bc20b9    4981c608000000          add r14, 0x8
 ..                             : powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = ..
0x767060bc20c0    498b7ff0                mov rdi, [r15-0x10]
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc20c4    be01000000              mov esi, 0x1
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc20c9    49837ff800              cmp qword [r15-0x8], 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc20ce    0f8e0a000000            jle 0x767060bc20de            < Root.powReg3+45 >
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc20d4    480faff7                imul rsi, rdi
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc20d8    49ff4ff8                dec qword [r15-0x8]
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc20dc    ebeb                    jmp 0x767060bc20c9            < Root.powReg3+24 >
0x767060bc20de    4d8d77f8                lea r14, [r15-0x8]
0x767060bc20e2    4d8b7e08                mov r15, [r14+0x8]
0x767060bc20e6    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc20ea    498936                  mov [r14], rsi
 .. t out @ base @ * = } for return out @ ;
0x767060bc20ed    c3                      ret
Word_Disassemble : word - 'powReg3' :: codeSize = 61
Word : 0x000076705d243129 :: Compiled at : 0x0000767060bc20b1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 336.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000852869 seconds at namespaces/test/dev.csl : 336.15

 1073741824
 =============================
Root.powReg4 <:> csl compiled word
SourceCode for Root.powReg4 :>
: powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg4 : "namespaces/test/dev.csl" : 337.2 :: we are now at : namespaces/test/dev.csl : 340.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc20f3 -- code size = 98 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg4 : definition = 0x0000767060bc20f3 : disassembly at namespaces/test/dev.csl : 340.15 :
0x767060bc20f3    4d897e08                mov [r14+0x8], r15
0x767060bc20f7    4d8d7e08                lea r15, [r14+0x8]
0x767060bc20fb    4981c610000000          add r14, 0x10
 ..                             : powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = ..
0x767060bc2102    498b77f8                mov rsi, [r15-0x8]
0x767060bc2106    498b7ff0                mov rdi, [r15-0x10]
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc210a    49c7470801000000        mov qword [r15+0x8], 0x1
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2112    4883fe00                cmp rsi, 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2116    0f8e25000000            jle 0x767060bc2141            < Root.powReg4+78 >
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc211c    498d4708                lea rax, [r15+0x8]
0x767060bc2120    4983c608                add r14, 0x8
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2124    498906                  mov [r14], rax
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2127    498b4708                mov rax, [r15+0x8]
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc212b    480fafc7                imul rax, rdi
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc212f    488bc8                  mov rcx, rax
0x767060bc2132    498b06                  mov rax, [r14]
0x767060bc2135    4983ee08                sub r14, 0x8
 .. > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2139    488908                  mov [rax], rcx
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc213c    48ffce                  dec rsi
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc213f    ebd1                    jmp 0x767060bc2112            < Root.powReg4+31 >
 .. wer -- } { out out @ base @ * = } for return out @ ;
0x767060bc2141    498b4708                mov rax, [r15+0x8]
0x767060bc2145    4d8d77f8                lea r14, [r15-0x8]
0x767060bc2149    4d8b7e08                mov r15, [r14+0x8]
0x767060bc214d    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc2151    498906                  mov [r14], rax
 .. t out @ base @ * = } for return out @ ;
0x767060bc2154    c3                      ret
Word_Disassemble : word - 'powReg4' :: codeSize = 98
Word : 0x000076705d246439 :: Compiled at : 0x0000767060bc20f3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 340.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000979497 seconds at namespaces/test/dev.csl : 340.15

 1073741824
 =============================
Root.powReg5 <:> csl compiled word
SourceCode for Root.powReg5 :>
: powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg5 : "namespaces/test/dev.csl" : 341.2 :: we are now at : namespaces/test/dev.csl : 344.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc215a -- code size = 98 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg5 : definition = 0x0000767060bc215a : disassembly at namespaces/test/dev.csl : 344.15 :
0x767060bc215a    4d897e08                mov [r14+0x8], r15
0x767060bc215e    4d8d7e08                lea r15, [r14+0x8]
0x767060bc2162    4981c610000000          add r14, 0x10
 ..                             : powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } f ..
0x767060bc2169    498b7ff8                mov rdi, [r15-0x8]
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc216d    49c7470801000000        mov qword [r15+0x8], 0x1
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2175    4883ff00                cmp rdi, 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2179    0f8e29000000            jle 0x767060bc21a8            < Root.powReg5+78 >
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc217f    498d4708                lea rax, [r15+0x8]
0x767060bc2183    4983c608                add r14, 0x8
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2187    498906                  mov [r14], rax
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc218a    498b4708                mov rax, [r15+0x8]
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc218e    498b4ff0                mov rcx, [r15-0x10]
0x767060bc2192    480fafc1                imul rax, rcx
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2196    488bc8                  mov rcx, rax
0x767060bc2199    498b06                  mov rax, [r14]
0x767060bc219c    4983ee08                sub r14, 0x8
 .. > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21a0    488908                  mov [rax], rcx
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21a3    48ffcf                  dec rdi
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21a6    ebcd                    jmp 0x767060bc2175            < Root.powReg5+27 >
 .. wer -- } { out out @ base @ * = } for return out @ ;
0x767060bc21a8    498b4708                mov rax, [r15+0x8]
0x767060bc21ac    4d8d77f8                lea r14, [r15-0x8]
0x767060bc21b0    4d8b7e08                mov r15, [r14+0x8]
0x767060bc21b4    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc21b8    498906                  mov [r14], rax
 .. t out @ base @ * = } for return out @ ;
0x767060bc21bb    c3                      ret
Word_Disassemble : word - 'powReg5' :: codeSize = 98
Word : 0x000076705d249749 :: Compiled at : 0x0000767060bc215a
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 344.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000959459 seconds at namespaces/test/dev.csl : 344.15

 1073741824
 =============================
Root.powReg6 <:> csl compiled word
SourceCode for Root.powReg6 :>
: powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg6 : "namespaces/test/dev.csl" : 345.2 :: we are now at : namespaces/test/dev.csl : 347.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc21c1 -- code size = 96 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg6 : definition = 0x0000767060bc21c1 : disassembly at namespaces/test/dev.csl : 347.15 :
0x767060bc21c1    4d897e08                mov [r14+0x8], r15
0x767060bc21c5    4d8d7e08                lea r15, [r14+0x8]
0x767060bc21c9    4981c610000000          add r14, 0x10
 ..                             : powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } f ..
0x767060bc21d0    498b7ff0                mov rdi, [r15-0x10]
 .. EG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21d4    49c7470801000000        mov qword [r15+0x8], 0x1
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21dc    49837ff800              cmp qword [r15-0x8], 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21e1    0f8e26000000            jle 0x767060bc220d            < Root.powReg6+76 >
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21e7    498d4708                lea rax, [r15+0x8]
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21eb    4983c608                add r14, 0x8
0x767060bc21ef    498906                  mov [r14], rax
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21f2    498b4708                mov rax, [r15+0x8]
0x767060bc21f6    480fafc7                imul rax, rdi
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc21fa    488bc8                  mov rcx, rax
0x767060bc21fd    498b06                  mov rax, [r14]
0x767060bc2200    4983ee08                sub r14, 0x8
 .. > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2204    488908                  mov [rax], rcx
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2207    49ff4ff8                dec qword [r15-0x8]
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc220b    ebcf                    jmp 0x767060bc21dc            < Root.powReg6+27 >
 .. wer -- } { out out @ base @ * = } for return out @ ;
0x767060bc220d    498b4708                mov rax, [r15+0x8]
0x767060bc2211    4d8d77f8                lea r14, [r15-0x8]
0x767060bc2215    4d8b7e08                mov r15, [r14+0x8]
0x767060bc2219    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc221d    498906                  mov [r14], rax
 .. t out @ base @ * = } for return out @ ;
0x767060bc2220    c3                      ret
Word_Disassemble : word - 'powReg6' :: codeSize = 96
Word : 0x000076705d24ca59 :: Compiled at : 0x0000767060bc21c1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 347.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.001016937 seconds at namespaces/test/dev.csl : 347.15

 1073741824
 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :>
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg7 : "namespaces/test/dev.csl" : 348.2 :: we are now at : namespaces/test/dev.csl : 350.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc2226 -- code size = 61 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg7 : definition = 0x0000767060bc2226 : disassembly at namespaces/test/dev.csl : 350.20 :
0x767060bc2226    4d897e08                mov [r14+0x8], r15
0x767060bc222a    4d8d7e08                lea r15, [r14+0x8]
0x767060bc222e    4981c608000000          add r14, 0x8
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2235    bf01000000              mov edi, 0x1
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc223a    49837ff800              cmp qword [r15-0x8], 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc223f    0f8e0e000000            jle 0x767060bc2253            < Root.powReg7+45 >
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2245    498b4ff0                mov rcx, [r15-0x10]
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2249    480faff9                imul rdi, rcx
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc224d    49ff4ff8                dec qword [r15-0x8]
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2251    ebe7                    jmp 0x767060bc223a            < Root.powReg7+20 >
0x767060bc2253    4d8d77f8                lea r14, [r15-0x8]
0x767060bc2257    4d8b7e08                mov r15, [r14+0x8]
0x767060bc225b    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc225f    49893e                  mov [r14], rdi
 .. t out @ base @ * = } for return out @ ;
0x767060bc2262    c3                      ret
Word_Disassemble : word - 'powReg7' :: codeSize = 61
Word : 0x000076705d24fd69 :: Compiled at : 0x0000767060bc2226
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 350.20 <::

 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :>
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
Source code file location of powReg7 : "namespaces/test/dev.csl" : 348.2 :: we are now at : namespaces/test/dev.csl : 351.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc2226 -- code size = 61 bytes
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Root.powReg7 : definition = 0x0000767060bc2226 : disassembly at namespaces/test/dev.csl : 351.15 :
0x767060bc2226    4d897e08                mov [r14+0x8], r15
0x767060bc222a    4d8d7e08                lea r15, [r14+0x8]
0x767060bc222e    4981c608000000          add r14, 0x8
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2235    bf01000000              mov edi, 0x1
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc223a    49837ff800              cmp qword [r15-0x8], 0x0
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc223f    0f8e0e000000            jle 0x767060bc2253            < Root.powReg7+45 >
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2245    498b4ff0                mov rcx, [r15-0x10]
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2249    480faff9                imul rdi, rcx
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc224d    49ff4ff8                dec qword [r15-0x8]
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
0x767060bc2251    ebe7                    jmp 0x767060bc223a            < Root.powReg7+20 >
0x767060bc2253    4d8d77f8                lea r14, [r15-0x8]
0x767060bc2257    4d8b7e08                mov r15, [r14+0x8]
0x767060bc225b    4983ee08                sub r14, 0x8
 .. } { out out @ base @ * = } for return out @ ;
0x767060bc225f    49893e                  mov [r14], rdi
 .. t out @ base @ * = } for return out @ ;
0x767060bc2262    c3                      ret
Word_Disassemble : word - 'powReg7' :: codeSize = 61
Word : 0x000076705d24fd69 :: Compiled at : 0x0000767060bc2226
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 351.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000933941 seconds at namespaces/test/dev.csl : 351.15


 =============================
Int.** <:> C compiled primitive, immediate, infixable
SourceCode for Int.** :>
C Primitive
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Int.** : definition = 0x0000641cca134530 : disassembly at namespaces/test/dev.csl : 353.10 :
0x641cca134530    498b3e                  mov rdi, [r14]
0x641cca134533    498b4ef8                mov rcx, [r14-0x8]
0x641cca134537    4c89f6                  mov rsi, r14
0x641cca13453a    4889fa                  mov rdx, rdi
0x641cca13453d    4889c8                  mov rax, rcx
0x641cca134540    4883ea01                sub rdx, 0x1
0x641cca134544    7428                    jz 0xca13456e                 < C compiler code >
0x641cca134546    f6c201                  test dl, 0x1
0x641cca134549    7415                    jz 0xca134560                 < C compiler code >
0x641cca13454b    480fafc1                imul rax, rcx
0x641cca13454f    4883ef02                sub rdi, 0x2
0x641cca134553    4889fa                  mov rdx, rdi
0x641cca134556    7416                    jz 0xca13456e                 < C compiler code >
0x641cca134558    0f1f840000000000        nop [rax+rax]
0x641cca134560    480fafc1                imul rax, rcx
0x641cca134564    480fafc1                imul rax, rcx
0x641cca134568    4883ea02                sub rdx, 0x2
0x641cca13456c    75f2                    jnz 0xca134560                < C compiler code >
0x641cca13456e    488946f8                mov [rsi-0x8], rax
0x641cca134572    e9899afcff              jmp 0x641cca0fe000            < C compiler code >
0x641cca134577    660f1f840000000000      o16 nop [rax+rax]
0x641cca134580    498b16                  mov rdx, [r14]
0x641cca134583    4c89f1                  mov rcx, r14
0x641cca134586    b801000000              mov eax, 0x1
0x641cca13458b    4883fa01                cmp rdx, 0x1
0x641cca13458f    7f07                    jg 0xca134598                 < C compiler code >
0x641cca134591    488901                  mov [rcx], rax
0x641cca134594    c3                      ret
Word_Disassemble : word - '**' :: codeSize = 102
Word : 0x0000767060cc2468 :: Compiled at : 0x0000641cca134530
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 353.10 <::

 65536

Timer [ 1 ] : elapsed time = 0.001113157 seconds at namespaces/test/dev.csl : 353.10


 =============================
Int.pow_03 <:> C compiled primitive, infixable
SourceCode for Int.pow_03 :>
C Primitive
TypeSignature : Integer . Integer -> Integer
 -----------------------------
Word :: Int.pow_03 : definition = 0x0000641cca133d40 : disassembly at namespaces/test/dev.csl : 354.14 :
0x641cca133d40    498b3e                  mov rdi, [r14]
0x641cca133d43    498b4ef8                mov rcx, [r14-0x8]
0x641cca133d47    4c89f6                  mov rsi, r14
0x641cca133d4a    4889fa                  mov rdx, rdi
0x641cca133d4d    4889c8                  mov rax, rcx
0x641cca133d50    4883ea01                sub rdx, 0x1
0x641cca133d54    7428                    jz 0xca133d7e                 < C compiler code >
0x641cca133d56    f6c201                  test dl, 0x1
0x641cca133d59    7415                    jz 0xca133d70                 < C compiler code >
0x641cca133d5b    480fafc1                imul rax, rcx
0x641cca133d5f    4883ef02                sub rdi, 0x2
0x641cca133d63    4889fa                  mov rdx, rdi
0x641cca133d66    7416                    jz 0xca133d7e                 < C compiler code >
0x641cca133d68    0f1f840000000000        nop [rax+rax]
0x641cca133d70    480fafc1                imul rax, rcx
0x641cca133d74    480fafc1                imul rax, rcx
0x641cca133d78    4883ea02                sub rdx, 0x2
0x641cca133d7c    75f2                    jnz 0xca133d70                < C compiler code >
0x641cca133d7e    488946f8                mov [rsi-0x8], rax
0x641cca133d82    e979a2fcff              jmp 0x641cca0fe000            < C compiler code >
0x641cca133d87    660f1f840000000000      o16 nop [rax+rax]
0x641cca133d90    4155                    push r13
0x641cca133d92    4989fd                  mov r13, rdi
0x641cca133d95    4154                    push r12
0x641cca133d97    55                      push rbp
0x641cca133d98    53                      push rbx
0x641cca133d99    4881ecc8000000          sub rsp, 0xc8
0x641cca133da0    4883ff01                cmp rdi, 0x1
0x641cca133da4    0f8ee6030000            jle 0x641cca134190            < C compiler code >
0x641cca133daa    488d57ff                lea rdx, [rdi-0x1]
0x641cca133dae    4889fd                  mov rbp, rdi
0x641cca133db1    4531e4                  xor r12d, r12d
0x641cca133db4    4889d0                  mov rax, rdx
0x641cca133db7    4889d1                  mov rcx, rdx
0x641cca133dba    4883e0fe                and rax, 0xfffffffffffffffe
0x641cca133dbe    4829                    invalid
Word_Disassemble : word - 'pow_03' :: codeSize = 127
Word : 0x0000767060cc27c8 :: Compiled at : 0x0000641cca133d40
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 354.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.001093161 seconds at namespaces/test/dev.csl : 354.14



Word :: C.tt : definition = 0x0000767060bc2268 : disassembly at namespaces/test/dev.csl : 360.22 :
0x767060bc2268    4d897e08                mov [r14+0x8], r15
0x767060bc226c    4d8d7e08                lea r15, [r14+0x8]
0x767060bc2270    4981c610000000          add r14, 0x10
 ..                      : tt ( | t ) t 6 = t ++ t @ p ;  ..
0x767060bc2277    49c7470806000000        mov qword [r15+0x8], 0x6
 ..                  : tt ( | t ) t 6 = t ++ t @ p ;  ..
0x767060bc227f    49ff4708                inc qword [r15+0x8]
 ..               : tt ( | t ) t 6 = t ++ t @ p ;  ..
0x767060bc2283    498b4708                mov rax, [r15+0x8]
0x767060bc2287    4983c608                add r14, 0x8
0x767060bc228b    498906                  mov [r14], rax
 ..           : tt ( | t ) t 6 = t ++ t @ p ;  ..
0x767060bc228e    49bbe594ba6070760000    mov r11, 0x767060ba94e5
0x767060bc2298    49ffd3                  call r11                      < Int.p : 0x0000767060ba94e5 >
0x767060bc229b    4d8d77f8                lea r14, [r15-0x8]
0x767060bc229f    4d8b7e08                mov r15, [r14+0x8]
 ..         : tt ( | t ) t 6 = t ++ t @ p ;  ..
0x767060bc22a3    c3                      ret
Word_Disassemble : word - 'tt' :: codeSize = 60 7
should show 7 6765
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :>
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev.csl : 388.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe3e0 -- code size = 164 bytes
TypeSignature :
 -----------------------------
Word :: C.fibPTC? : definition = 0x0000767060bbe3e0 : disassembly at namespaces/test/dev.csl : 388.21 :
0x767060bbe3e0    4d897e08                mov [r14+0x8], r15
0x767060bbe3e4    4d8d7e08                lea r15, [r14+0x8]
0x767060bbe3e8    4981c620000000          add r14, 0x20
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =        ..
0x767060bbe3ef    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn ..
0x767060bbe3f7    49c7471000000000        mov qword [r15+0x10], 0x0
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  ..
0x767060bbe3ff    49c7471801000000        mov qword [r15+0x18], 0x1
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  ..
0x767060bbe407    498b47f8                mov rax, [r15-0x8]
0x767060bbe40b    4883f800                cmp rax, 0x0
0x767060bbe40f    0f845f000000            jz 0x767060bbe474             < C.fibPTC?+148 >
0x767060bbe415    498d4710                lea rax, [r15+0x10]
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe419    498b4f18                mov rcx, [r15+0x18]
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe41d    488908                  mov [rax], rcx
0x767060bbe420    498d4718                lea rax, [r15+0x18]
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe424    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe428    488908                  mov [rax], rcx
0x767060bbe42b    498d4708                lea rax, [r15+0x8]
0x767060bbe42f    4983c608                add r14, 0x8
0x767060bbe433    498906                  mov [r14], rax
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe436    498b4710                mov rax, [r15+0x10]
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe43a    498b4f18                mov rcx, [r15+0x18]
0x767060bbe43e    4803c1                  add rax, rcx
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe441    488bc8                  mov rcx, rax
0x767060bbe444    498b06                  mov rax, [r14]
0x767060bbe447    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe44b    488908                  mov [rax], rcx
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   ..
0x767060bbe44e    498d47f8                lea rax, [r15-0x8]
0x767060bbe452    4983c608                add r14, 0x8
0x767060bbe456    498906                  mov [r14], rax
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     ..
0x767060bbe459    498b47f8                mov rax, [r15-0x8]
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for ..
0x767060bbe45d    b901000000              mov ecx, 0x1
0x767060bbe462    482bc1                  sub rax, rcx
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for   ..
0x767060bbe465    488bc8                  mov rcx, rax
0x767060bbe468    498b06                  mov rax, [r14]
0x767060bbe46b    4983ee08                sub r14, 0x8
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     ..
0x767060bbe46f    488908                  mov [rax], rcx
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     r ..
0x767060bbe472    eb93                    jmp 0x767060bbe407            < C.fibPTC?+39 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe474    498b4708                mov rax, [r15+0x8]
0x767060bbe478    4d8d77f8                lea r14, [r15-0x8]
0x767060bbe47c    4d8b7e08                mov r15, [r14+0x8]
 .. @ fn2 @ + =      }     for     return fn @ ;  ..
0x767060bbe480    498906                  mov [r14], rax
 ..  @ + =      }     for     return fn @ ;  ..
0x767060bbe483    c3                      ret
Word_Disassemble : word - 'fibPTC?' :: codeSize = 164
Word : 0x000076705d10e331 :: Compiled at : 0x0000767060bbe3e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 388.21 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 402.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 402.13 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 402.13 <::
 6765
 13

 fibPTC? :
Timer [ 1 ] : elapsed time = 0.002487194 seconds at namespaces/test/dev.csl : 404.14
 :: function : fibPTC? : called on args : 1 - 23 : 1000 reps

 13

 fibPTC2? :
Timer [ 1 ] : elapsed time = 0.000713278 seconds at namespaces/test/dev.csl : 405.15
 :: function : fibPTC2? : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.fibPTC4? <:> csl compiled word
SourceCode for C_Syntax.fibPTC4? :>
int fibPTC4? ( REG n | REG fn, REG fn1, REG fn2 ) { fn = 0, fn1 = 0, fn2 = 1 ; do { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; n -- ; } while ( n > 0 ) ; return fn ; }
Source code file location of fibPTC4? : "namespaces/test/dev.csl" : 407.9 :: we are now at : namespaces/test/dev.csl : 420.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23e9 -- code size = 51 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC4? : definition = 0x0000767060bc23e9 : disassembly at namespaces/test/dev.csl : 420.13 :
0x767060bc23e9    498b3e                  mov rdi, [r14]
 .. | REG fn, REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 +  ..
0x767060bc23ec    48c7c600000000          mov rsi, 0x0
 ..  REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;     ..
0x767060bc23f3    48c7c200000000          mov rdx, 0x0
 ..  REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n - ..
0x767060bc23fa    b901000000              mov ecx, 0x1
 .. 2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;      ..
0x767060bc23ff    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc2402    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc2405    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc2408    488bf2                  mov rsi, rdx
 .. ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc240b    48ffcf                  dec rdi
 .. ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc240e    4883ff00                cmp rdi, 0x0
0x767060bc2412    0f8fe7ffffff            jg 0x767060bc23ff             < C_Syntax.fibPTC4?+22 >
 ..    }     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc2418    498936                  mov [r14], rsi
 ..     while ( n > 0 ) ;     return fn ; }  ..
0x767060bc241b    c3                      ret
Word_Disassemble : word - 'fibPTC4?' :: codeSize = 51
Word : 0x000076705d2632b9 :: Compiled at : 0x0000767060bc23e9
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 420.13 <::

 13

 fibPTC4? :
Timer [ 1 ] : elapsed time = 0.000640922 seconds at namespaces/test/dev.csl : 423.15
 :: function : fibPTC4? : called on args : 1 - 23 : 1000 reps
 6765
 13

 cfib2_O3 :
Timer [ 1 ] : elapsed time = 0.000456075 seconds at namespaces/test/dev.csl : 426.15
 :: function : cfib2_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User._fibn1 <:> csl compiled word
SourceCode for User._fibn1 :>
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @ _fibn1 + } ifElse return tos ;
Source code file location of _fibn1 : "namespaces/test/dev.csl" : 429.2 :: we are now at : namespaces/test/dev.csl : 430.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc2421 -- code size = 115 bytes
TypeSignature :
 -----------------------------
Word :: User._fibn1 : definition = 0x0000767060bc2421 : disassembly at namespaces/test/dev.csl : 430.20 :
0x767060bc2421    4d897e08                mov [r14+0x8], r15
0x767060bc2425    4d8d7e08                lea r15, [r14+0x8]
0x767060bc2429    4981c608000000          add r14, 0x8
 ..                      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  ..
0x767060bc2430    49837ff802              cmp qword [r15-0x8], 0x2
 ..              : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  ..
0x767060bc2435    0f8d10000000            jge 0x767060bc244b            < User._fibn1+42 >
 ..          : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  ..
0x767060bc243b    498b47f8                mov rax, [r15-0x8]
0x767060bc243f    4983c608                add r14, 0x8
0x767060bc2443    498906                  mov [r14], rax
 ..      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  ..
0x767060bc2446    e93d000000              jmp 0x767060bc2488            < User._fibn1+103 >
   : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  ..
0x767060bc244b    49ff4ff8                dec qword [r15-0x8]
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  ..
0x767060bc244f    498b47f8                mov rax, [r15-0x8]
0x767060bc2453    4983c608                add r14, 0x8
0x767060bc2457    498906                  mov [r14], rax
 ..  ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;
0x767060bc245a    e8c2ffffff              call 0x767060bc2421           < User._fibn1 : 0x0000767060bc2421 >
 .. n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;
0x767060bc245f    49ff4ff8                dec qword [r15-0x8]
 ..  2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;
0x767060bc2463    498b47f8                mov rax, [r15-0x8]
0x767060bc2467    4983c608                add r14, 0x8
0x767060bc246b    498906                  mov [r14], rax
 .. } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;
0x767060bc246e    e8aeffffff              call 0x767060bc2421           < User._fibn1 : 0x0000767060bc2421 >
0x767060bc2473    498b0e                  mov rcx, [r14]
0x767060bc2476    498b46f8                mov rax, [r14-0x8]
0x767060bc247a    4983ee10                sub r14, 0x10
 ..  } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;
0x767060bc247e    4803c1                  add rax, rcx
0x767060bc2481    4983c608                add r14, 0x8
0x767060bc2485    498906                  mov [r14], rax
0x767060bc2488    4d8d77f8                lea r14, [r15-0x8]
0x767060bc248c    4d8b7e08                mov r15, [r14+0x8]
0x767060bc2490    498906                  mov [r14], rax
 ..  -- n @  _fibn1 + } ifElse return tos ;
0x767060bc2493    c3                      ret
Word_Disassemble : word - '_fibn1' :: codeSize = 115
Word : 0x000076705d269359 :: Compiled at : 0x0000767060bc2421
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 430.20 <::
 6765
 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :>
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 441.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe26c -- code size = 116 bytes
TypeSignature :
 -----------------------------
Word :: C._fib2 : definition = 0x0000767060bbe26c : disassembly at namespaces/test/dev.csl : 441.19 :
0x767060bbe26c    498b06                  mov rax, [r14]
0x767060bbe26f    4983c608                add r14, 0x8
0x767060bbe273    498906                  mov [r14], rax
0x767060bbe276    b802000000              mov eax, 0x2
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe27b    488bc8                  mov rcx, rax
0x767060bbe27e    498b06                  mov rax, [r14]
0x767060bbe281    4983ee08                sub r14, 0x8
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe285    483bc1                  cmp rax, rcx
0x767060bbe288    0f8d05000000            jge 0x767060bbe293            < C._fib2+39 >
0x767060bbe28e    e94c000000              jmp 0x767060bbe2df            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe293    498b06                  mov rax, [r14]
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe296    4983c608                add r14, 0x8
0x767060bbe29a    498906                  mov [r14], rax
0x767060bbe29d    498b06                  mov rax, [r14]
0x767060bbe2a0    4983ee08                sub r14, 0x8
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2a4    48ffc8                  dec rax
0x767060bbe2a7    4983c608                add r14, 0x8
0x767060bbe2ab    498906                  mov [r14], rax
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2ae    e8b9ffffff              call 0x767060bbe26c           < C._fib2 : 0x0000767060bbe26c >
0x767060bbe2b3    498b0e                  mov rcx, [r14]
0x767060bbe2b6    498b46f8                mov rax, [r14-0x8]
0x767060bbe2ba    49894ef8                mov [r14-0x8], rcx
0x767060bbe2be    498906                  mov [r14], rax
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2c1    49832e02                sub qword [r14], 0x2
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2c5    e8a2ffffff              call 0x767060bbe26c           < C._fib2 : 0x0000767060bbe26c >
0x767060bbe2ca    498b0e                  mov rcx, [r14]
0x767060bbe2cd    498b46f8                mov rax, [r14-0x8]
0x767060bbe2d1    4983ee10                sub r14, 0x10
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
0x767060bbe2d5    4803c1                  add rax, rcx
0x767060bbe2d8    4983c608                add r14, 0x8
0x767060bbe2dc    498906                  mov [r14], rax
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
0x767060bbe2df    c3                      ret
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x000076705d107651 :: Compiled at : 0x0000767060bbe26c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 441.19 <::
 6765
 6765
 =============================
User._fib3 <:> csl compiled word
SourceCode for User._fib3 :>
: _fib3 dup 2 < ?< >:< dup -- _fib3 swap 2 - _fib3 + >; ;
Source code file location of _fib3 : "namespaces/test/dev.csl" : 445.2 :: we are now at : namespaces/test/dev.csl : 451.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc2633 -- code size = 116 bytes
TypeSignature :
 -----------------------------
Word :: User._fib3 : definition = 0x0000767060bc2633 : disassembly at namespaces/test/dev.csl : 451.19 :
0x767060bc2633    498b06                  mov rax, [r14]
0x767060bc2636    4983c608                add r14, 0x8
0x767060bc263a    498906                  mov [r14], rax
0x767060bc263d    b802000000              mov eax, 0x2
 ..                      : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  ..
0x767060bc2642    488bc8                  mov rcx, rax
0x767060bc2645    498b06                  mov rax, [r14]
0x767060bc2648    4983ee08                sub r14, 0x8
 ..                    : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  ..
0x767060bc264c    483bc1                  cmp rax, rcx
0x767060bc264f    0f8d05000000            jge 0x767060bc265a            < User._fib3+39 >
 ..          : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  ..
0x767060bc2655    e94c000000              jmp 0x767060bc26a6            < User._fib3+115 >
0x767060bc265a    498b06                  mov rax, [r14]
0x767060bc265d    4983c608                add r14, 0x8
0x767060bc2661    498906                  mov [r14], rax
0x767060bc2664    498b06                  mov rax, [r14]
0x767060bc2667    4983ee08                sub r14, 0x8
 ..      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc266b    48ffc8                  dec rax
0x767060bc266e    4983c608                add r14, 0x8
0x767060bc2672    498906                  mov [r14], rax
 ..   dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc2675    e8b9ffffff              call 0x767060bc2633           < User._fib3 : 0x0000767060bc2633 >
 .. 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc267a    498b0e                  mov rcx, [r14]
0x767060bc267d    498b46f8                mov rax, [r14-0x8]
0x767060bc2681    49894ef8                mov [r14-0x8], rcx
0x767060bc2685    498906                  mov [r14], rax
 ..   ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc2688    49832e02                sub qword [r14], 0x2
 .. ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc268c    e8a2ffffff              call 0x767060bc2633           < User._fib3 : 0x0000767060bc2633 >
0x767060bc2691    498b0e                  mov rcx, [r14]
0x767060bc2694    498b46f8                mov rax, [r14-0x8]
0x767060bc2698    4983ee10                sub r14, 0x10
 ..           dup -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc269c    4803c1                  add rax, rcx
0x767060bc269f    4983c608                add r14, 0x8
0x767060bc26a3    498906                  mov [r14], rax
 .. up -- _fib3 swap 2 - _fib3 +      >;  ;
0x767060bc26a6    c3                      ret
Word_Disassemble : word - '_fib3' :: codeSize = 116
Word : 0x000076705d271629 :: Compiled at : 0x0000767060bc2633
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 451.19 <::
 6765
 =============================
User._fib4 <:> csl compiled word
SourceCode for User._fib4 :>
: _fib4 { dup 2 >= } { dup -- _fib4 swap 2 - _fib4 + } if2 ;
Source code file location of _fib4 : "namespaces/test/dev.csl" : 453.2 :: we are now at : namespaces/test/dev.csl : 459.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc26bb -- code size = 105 bytes
TypeSignature :
 -----------------------------
Word :: User._fib4 : definition = 0x0000767060bc26bb : disassembly at namespaces/test/dev.csl : 459.19 :
 ..  dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc26bb    498b06                  mov rax, [r14]
0x767060bc26be    4983c608                add r14, 0x8
0x767060bc26c2    498906                  mov [r14], rax
0x767060bc26c5    b802000000              mov eax, 0x2
 ..                    : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  ..
0x767060bc26ca    488bc8                  mov rcx, rax
0x767060bc26cd    498b06                  mov rax, [r14]
0x767060bc26d0    4983ee08                sub r14, 0x8
 ..                  : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  ..
0x767060bc26d4    483bc1                  cmp rax, rcx
 ..               : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  ..
0x767060bc26d7    0f8c46000000            jl 0x767060bc2723             < User._fib4+104 >
0x767060bc26dd    498b06                  mov rax, [r14]
0x767060bc26e0    4983c608                add r14, 0x8
0x767060bc26e4    4983ee08                sub r14, 0x8
 ..       { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc26e8    48ffc8                  dec rax
0x767060bc26eb    4983c608                add r14, 0x8
0x767060bc26ef    498906                  mov [r14], rax
 ..    { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc26f2    e8c4ffffff              call 0x767060bc26bb           < User._fib4 : 0x0000767060bc26bb >
 .. up 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc26f7    498b0e                  mov rcx, [r14]
0x767060bc26fa    498b46f8                mov rax, [r14-0x8]
0x767060bc26fe    49894ef8                mov [r14-0x8], rcx
0x767060bc2702    498906                  mov [r14], rax
 ..  }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc2705    49832e02                sub qword [r14], 0x2
 ..      {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc2709    e8adffffff              call 0x767060bc26bb           < User._fib4 : 0x0000767060bc26bb >
0x767060bc270e    498b0e                  mov rcx, [r14]
0x767060bc2711    498b46f8                mov rax, [r14-0x8]
0x767060bc2715    4983ee10                sub r14, 0x10
 ..           dup -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc2719    4803c1                  add rax, rcx
0x767060bc271c    4983c608                add r14, 0x8
0x767060bc2720    498906                  mov [r14], rax
 .. -- _fib4 swap 2 - _fib4 +      } if2  ;
0x767060bc2723    c3                      ret
Word_Disassemble : word - '_fib4' :: codeSize = 105
Word : 0x000076705d272a69 :: Compiled at : 0x0000767060bc26bb
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 459.19 <::
 6765
 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 469.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C compiler code >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C compiler code >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 469.21 <::

 0x000076705fbb2ae0
 The fibonacci sequence 15 :
 C -O3 :  610
Timer [ 1 ] : elapsed time = 0.000007804 seconds at namespaces/test/dev.csl : 493.8

 no locals fib  :  610
Timer [ 1 ] : elapsed time = 0.000009388 seconds at namespaces/test/dev.csl : 493.8

 locals fib1    :  610
Timer [ 1 ] : elapsed time = 0.000010490 seconds at namespaces/test/dev.csl : 493.8

 no locals fib2 :  610
Timer [ 1 ] : elapsed time = 0.000009498 seconds at namespaces/test/dev.csl : 493.8

 no locals fib3 :  610
Timer [ 1 ] : elapsed time = 0.000009618 seconds at namespaces/test/dev.csl : 493.8

 fibPTC?        :  610
Timer [ 1 ] : elapsed time = 0.000005660 seconds at namespaces/test/dev.csl : 493.8

 fibPTC2?       :  610
Timer [ 1 ] : elapsed time = 0.000004859 seconds at namespaces/test/dev.csl : 493.8


 0x000076705fbb2ae0
 The fibonacci sequence 30 :
 C -O3 :  832040
Timer [ 1 ] : elapsed time = 0.001376702 seconds at namespaces/test/dev.csl : 493.16

 no locals fib  :  832040
Timer [ 1 ] : elapsed time = 0.005421867 seconds at namespaces/test/dev.csl : 493.16

 locals fib1    :  832040
Timer [ 1 ] : elapsed time = 0.006161726 seconds at namespaces/test/dev.csl : 493.16

 no locals fib2 :  832040
Timer [ 1 ] : elapsed time = 0.005534610 seconds at namespaces/test/dev.csl : 493.16

 no locals fib3 :  832040
Timer [ 1 ] : elapsed time = 0.005352077 seconds at namespaces/test/dev.csl : 493.16

 fibPTC?        :  832040
Timer [ 1 ] : elapsed time = 0.000005621 seconds at namespaces/test/dev.csl : 493.16

 fibPTC2?       :  832040
Timer [ 1 ] : elapsed time = 0.000005881 seconds at namespaces/test/dev.csl : 493.16


DataStack at : namespaces/test/dev.csl : 494.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x000076705fbb2ad0, InitialTos = 0x000076705fbb2ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x000076705fbb2ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x000076705fbb2ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x000076705fbb2ac0 > = 0x0000000000000005

 =============================
Interpreter.tfib3 <:> csl compiled word
SourceCode for Interpreter.tfib3 :>
: tfib3 ( n | m ) "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;
Source code file location of tfib3 : "namespaces/test/dev.csl" : 517.2 :: we are now at : namespaces/test/dev.csl : 523.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc3d24 -- code size = 864 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter.tfib3 : definition = 0x0000767060bc3d24 : disassembly at namespaces/test/dev.csl : 523.19 :
0x767060bc3d24    4d897e08                mov [r14+0x8], r15
0x767060bc3d28    4d8d7e08                lea r15, [r14+0x8]
0x767060bc3d2c    4981c610000000          add r14, 0x10
0x767060bc3d33    48b8bd628e6070760000    mov rax, 0x7670608e62bd       < string : 'Cfib2_O3       : ' >
0x767060bc3d3d    4983c608                add r14, 0x8
0x767060bc3d41    498906                  mov [r14], rax
 .. 3 ( n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ..
0x767060bc3d44    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bc3d4e    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 ..  n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti ..
0x767060bc3d51    b801000000              mov eax, 0x1
0x767060bc3d56    4983c608                add r14, 0x8
0x767060bc3d5a    498906                  mov [r14], rax
 ..  | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m ..
0x767060bc3d5d    49bb5ea5ba6070760000    mov r11, 0x767060baa55e
0x767060bc3d67    49ffd3                  call r11                      < System.ti : 0x0000767060baa55e >
 ..       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = {  ..
0x767060bc3d6a    49c7470801000000        mov qword [r15+0x8], 0x1
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @  ..
0x767060bc3d72    498b4708                mov rax, [r15+0x8]
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @  ..
0x767060bc3d76    498b4ff8                mov rcx, [r15-0x8]
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } ..
0x767060bc3d7a    483bc1                  cmp rax, rcx
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } {  ..
0x767060bc3d7d    0f8f35000000            jg 0x767060bc3db8             < Interpreter.tfib3+148 >
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @  ..
0x767060bc3d83    498b4708                mov rax, [r15+0x8]
0x767060bc3d87    4983c608                add r14, 0x8
0x767060bc3d8b    498906                  mov [r14], rax
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibP ..
0x767060bc3d8e    49ba804213ca1c640000    mov r10, 0x641cca134280
0x767060bc3d98    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3da2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m + ..
0x767060bc3da5    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bc3daf    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ }  ..
0x767060bc3db2    49ff4708                inc qword [r15+0x8]
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } whi ..
0x767060bc3db6    ebba                    jmp 0x767060bc3d72            < Interpreter.tfib3+78 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 tim ..
0x767060bc3db8    b801000000              mov eax, 0x1
0x767060bc3dbd    4983c608                add r14, 0x8
0x767060bc3dc1    498906                  mov [r14], rax
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time  ..
0x767060bc3dc4    49bad0fb12ca1c640000    mov r10, 0x641cca12fbd0
0x767060bc3dce    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3dd8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl ..
0x767060bc3ddb    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc3de5    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3def    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl    ..
0x767060bc3df2    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc3dfc    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3e06    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bc3e09    48b8fd628e6070760000    mov rax, 0x7670608e62fd       < string : 'locals fibPTC? : ' >
0x767060bc3e13    4983c608                add r14, 0x8
0x767060bc3e17    498906                  mov [r14], rax
 ..  1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ..
0x767060bc3e1a    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bc3e24    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti ..
0x767060bc3e27    b801000000              mov eax, 0x1
0x767060bc3e2c    4983c608                add r14, 0x8
0x767060bc3e30    498906                  mov [r14], rax
 .. me nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m ..
0x767060bc3e33    49bb5ea5ba6070760000    mov r11, 0x767060baa55e
0x767060bc3e3d    49ffd3                  call r11                      < System.ti : 0x0000767060baa55e >
 .. l     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = {  ..
0x767060bc3e40    49c7470801000000        mov qword [r15+0x8], 0x1
 ..   "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @  ..
0x767060bc3e48    498b4708                mov rax, [r15+0x8]
 .. ocals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @  ..
0x767060bc3e4c    498b4ff8                mov rcx, [r15-0x8]
 .. s fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } ..
0x767060bc3e50    483bc1                  cmp rax, rcx
 .. ibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } {  ..
0x767060bc3e53    0f8f2b000000            jg 0x767060bc3e84             < Interpreter.tfib3+352 >
 .. C? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @  ..
0x767060bc3e59    498b4708                mov rax, [r15+0x8]
0x767060bc3e5d    4983c608                add r14, 0x8
0x767060bc3e61    498906                  mov [r14], rax
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibP ..
0x767060bc3e64    49bbe0e3bb6070760000    mov r11, 0x767060bbe3e0
0x767060bc3e6e    49ffd3                  call r11                      < C.fibPTC? : 0x0000767060bbe3e0 >
 .. ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ..
0x767060bc3e71    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bc3e7b    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 ..  1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++  ..
0x767060bc3e7e    49ff4708                inc qword [r15+0x8]
 .. = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } w ..
0x767060bc3e82    ebc4                    jmp 0x767060bc3e48            < Interpreter.tfib3+292 >
 .. n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 t ..
0x767060bc3e84    b801000000              mov eax, 0x1
0x767060bc3e89    4983c608                add r14, 0x8
0x767060bc3e8d    498906                  mov [r14], rax
 .. @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 tim ..
0x767060bc3e90    49bad0fb12ca1c640000    mov r10, 0x641cca12fbd0
0x767060bc3e9a    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3ea4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl  ..
0x767060bc3ea7    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc3eb1    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3ebb    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl  ..
0x767060bc3ebe    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc3ec8    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3ed2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bc3ed5    48b83e638e6070760000    mov rax, 0x7670608e633e       < string : 'locals fibPTC2? : ' >
0x767060bc3edf    4983c608                add r14, 0x8
0x767060bc3ee3    498906                  mov [r14], rax
 .. 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ..
0x767060bc3ee6    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bc3ef0    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. ime nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti ..
0x767060bc3ef3    b801000000              mov eax, 0x1
0x767060bc3ef8    4983c608                add r14, 0x8
0x767060bc3efc    498906                  mov [r14], rax
 .. e nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m ..
0x767060bc3eff    49bb5ea5ba6070760000    mov r11, 0x767060baa55e
0x767060bc3f09    49ffd3                  call r11                      < System.ti : 0x0000767060baa55e >
 ..      "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = {  ..
0x767060bc3f0c    49c7470801000000        mov qword [r15+0x8], 0x1
 ..  "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @  ..
0x767060bc3f14    498b4708                mov rax, [r15+0x8]
 .. cals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @  ..
0x767060bc3f18    498b4ff8                mov rcx, [r15-0x8]
 ..  fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } ..
0x767060bc3f1c    483bc1                  cmp rax, rcx
 .. bPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } {  ..
0x767060bc3f1f    0f8f2b000000            jg 0x767060bc3f50             < Interpreter.tfib3+556 >
 .. 2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @  ..
0x767060bc3f25    498b4708                mov rax, [r15+0x8]
0x767060bc3f29    4983c608                add r14, 0x8
0x767060bc3f2d    498906                  mov [r14], rax
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib ..
0x767060bc3f30    49bba023bc6070760000    mov r11, 0x767060bc23a0
0x767060bc3f3a    49ffd3                  call r11                      < C_Syntax.fibPTC2? : 0x0000767060bc23a0 >
 .. i m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m  ..
0x767060bc3f3d    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bc3f47    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } ..
0x767060bc3f4a    49ff4708                inc qword [r15+0x8]
 ..  { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } wh ..
0x767060bc3f4e    ebc4                    jmp 0x767060bc3f14            < Interpreter.tfib3+496 >
 ..  @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 ti ..
0x767060bc3f50    b801000000              mov eax, 0x1
0x767060bc3f55    4983c608                add r14, 0x8
0x767060bc3f59    498906                  mov [r14], rax
 ..  <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time ..
0x767060bc3f5c    49bad0fb12ca1c640000    mov r10, 0x641cca12fbd0
0x767060bc3f66    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3f70    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl n ..
0x767060bc3f73    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc3f7d    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3f87    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ; ..
0x767060bc3f8a    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc3f94    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc3f9e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bc3fa1    48b880638e6070760000    mov rax, 0x7670608e6380       < string : 'Cfib2_O3       : ' >
0x767060bc3fab    4983c608                add r14, 0x8
0x767060bc3faf    498906                  mov [r14], rax
 ..  1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fb2    49bb1e94ba6070760000    mov r11, 0x767060ba941e
0x767060bc3fbc    49ffd3                  call r11                      < Int.ps : 0x0000767060ba941e >
 .. time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fbf    b801000000              mov eax, 0x1
0x767060bc3fc4    4983c608                add r14, 0x8
0x767060bc3fc8    498906                  mov [r14], rax
 .. me nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fcb    49bb5ea5ba6070760000    mov r11, 0x767060baa55e
0x767060bc3fd5    49ffd3                  call r11                      < System.ti : 0x0000767060baa55e >
 .. l     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fd8    49c7470801000000        mov qword [r15+0x8], 0x1
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fe0    498b4708                mov rax, [r15+0x8]
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fe4    498b4ff8                mov rcx, [r15-0x8]
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3fe8    483bc1                  cmp rax, rcx
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3feb    0f8f35000000            jg 0x767060bc4026             < Interpreter.tfib3+770 >
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3ff1    498b4708                mov rax, [r15+0x8]
0x767060bc3ff5    4983c608                add r14, 0x8
0x767060bc3ff9    498906                  mov [r14], rax
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc3ffc    49ba804213ca1c640000    mov r10, 0x641cca134280
0x767060bc4006    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc4010    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4013    49bbd096ba6070760000    mov r11, 0x767060ba96d0
0x767060bc401d    49ffd3                  call r11                      < User.p : 0x0000767060ba96d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4020    49ff4708                inc qword [r15+0x8]
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4024    ebba                    jmp 0x767060bc3fe0            < Interpreter.tfib3+700 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4026    b801000000              mov eax, 0x1
0x767060bc402b    4983c608                add r14, 0x8
0x767060bc402f    498906                  mov [r14], rax
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4032    49bad0fb12ca1c640000    mov r10, 0x641cca12fbd0
0x767060bc403c    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc4046    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4049    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc4053    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc405d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4060    49bae0de12ca1c640000    mov r10, 0x641cca12dee0
0x767060bc406a    49bb32e7a95f70760000    mov r11, 0x76705fa9e732
0x767060bc4074    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x000076705fa9e732 >
0x767060bc4077    4d8d77f8                lea r14, [r15-0x8]
0x767060bc407b    4d8b7e08                mov r15, [r14+0x8]
0x767060bc407f    4983ee08                sub r14, 0x8
 ..  cfib2_O3 p m ++ } while 1 time nl nl ;  ..
0x767060bc4083    c3                      ret
Word_Disassemble : word - 'tfib3' :: codeSize = 864
Word : 0x000076705d2b3729 :: Compiled at : 0x0000767060bc3d24
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 523.19 <::

 The fibonacci sequence:: first : 30 ...
 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002315012 seconds at namespaces/test/dev.csl : 525.9


 Cfib            :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002398368 seconds at namespaces/test/dev.csl : 525.9


 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002313780 seconds at namespaces/test/dev.csl : 525.9


 no locals _fib  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008879722 seconds at namespaces/test/dev.csl : 525.9


 locals   _fibn0 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010292534 seconds at namespaces/test/dev.csl : 525.9


 locals   _fibn1 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009909564 seconds at namespaces/test/dev.csl : 525.9


 locals   _fib1  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.010151588 seconds at namespaces/test/dev.csl : 525.9


 no locals _fib2 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009103123 seconds at namespaces/test/dev.csl : 525.9


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009075049 seconds at namespaces/test/dev.csl : 525.9


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.007859501 seconds at namespaces/test/dev.csl : 525.9


 fibPTC?         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000149681 seconds at namespaces/test/dev.csl : 525.9


 fibPTC2?        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000148018 seconds at namespaces/test/dev.csl : 525.9


 Cfib_O3        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002358093 seconds at namespaces/test/dev.csl : 526.9


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008023689 seconds at namespaces/test/dev.csl : 526.9


 locals _fibn1   :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009991257 seconds at namespaces/test/dev.csl : 526.9


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009035486 seconds at namespaces/test/dev.csl : 526.9


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000498805 seconds at namespaces/test/dev.csl : 527.9


 locals fibPTC? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000513743 seconds at namespaces/test/dev.csl : 527.9


 locals fibPTC2? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000505858 seconds at namespaces/test/dev.csl : 527.9


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000498886 seconds at namespaces/test/dev.csl : 527.9



 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :>
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 533.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bbe26c -- code size = 116 bytes
TypeSignature :
 -----------------------------
Word :: C._fib2 : definition = 0x0000767060bbe26c : disassembly at namespaces/test/dev.csl : 533.19 :
0x767060bbe26c    498b06                  mov rax, [r14]
0x767060bbe26f    4983c608                add r14, 0x8
0x767060bbe273    498906                  mov [r14], rax
0x767060bbe276    b802000000              mov eax, 0x2
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe27b    488bc8                  mov rcx, rax
0x767060bbe27e    498b06                  mov rax, [r14]
0x767060bbe281    4983ee08                sub r14, 0x8
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe285    483bc1                  cmp rax, rcx
0x767060bbe288    0f8d05000000            jge 0x767060bbe293            < C._fib2+39 >
0x767060bbe28e    e94c000000              jmp 0x767060bbe2df            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe293    498b06                  mov rax, [r14]
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe296    4983c608                add r14, 0x8
0x767060bbe29a    498906                  mov [r14], rax
0x767060bbe29d    498b06                  mov rax, [r14]
0x767060bbe2a0    4983ee08                sub r14, 0x8
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2a4    48ffc8                  dec rax
0x767060bbe2a7    4983c608                add r14, 0x8
0x767060bbe2ab    498906                  mov [r14], rax
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2ae    e8b9ffffff              call 0x767060bbe26c           < C._fib2 : 0x0000767060bbe26c >
0x767060bbe2b3    498b0e                  mov rcx, [r14]
0x767060bbe2b6    498b46f8                mov rax, [r14-0x8]
0x767060bbe2ba    49894ef8                mov [r14-0x8], rcx
0x767060bbe2be    498906                  mov [r14], rax
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2c1    49832e02                sub qword [r14], 0x2
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  ..
0x767060bbe2c5    e8a2ffffff              call 0x767060bbe26c           < C._fib2 : 0x0000767060bbe26c >
0x767060bbe2ca    498b0e                  mov rcx, [r14]
0x767060bbe2cd    498b46f8                mov rax, [r14-0x8]
0x767060bbe2d1    4983ee10                sub r14, 0x10
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
0x767060bbe2d5    4803c1                  add rax, rcx
0x767060bbe2d8    4983c608                add r14, 0x8
0x767060bbe2dc    498906                  mov [r14], rax
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;
0x767060bbe2df    c3                      ret
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x000076705d107651 :: Compiled at : 0x0000767060bbe26c
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 533.19 <::
 9
 should be 9
 =============================
Interpreter.fibBN <:> csl compiled word
SourceCode for Interpreter.fibBN :>
: fibBN ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ;
Source code file location of fibBN : "namespaces/test/dev.csl" : 540.2 :: we are now at : namespaces/test/dev.csl : 551.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc40e6 -- code size = 130 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter.fibBN : definition = 0x0000767060bc40e6 : disassembly at namespaces/test/dev.csl : 551.19 :
0x767060bc40e6    4d897e08                mov [r14+0x8], r15
0x767060bc40ea    4d8d7e08                lea r15, [r14+0x8]
0x767060bc40ee    4981c620000000          add r14, 0x20
   : fibBN ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =         ..
0x767060bc40f5    49c7470800000000        mov qword [r15+0x8], 0x0
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 ..
0x767060bc40fd    49c7471000000000        mov qword [r15+0x10], 0x0
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ ..
0x767060bc4105    49c7471801000000        mov qword [r15+0x18], 0x1
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =   ..
0x767060bc410d    49837ff800              cmp qword [r15-0x8], 0x0
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    ..
0x767060bc4112    0f8e40000000            jle 0x767060bc4158            < Interpreter.fibBN+114 >
0x767060bc4118    498d4710                lea rax, [r15+0x10]
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc411c    498b4f18                mov rcx, [r15+0x18]
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc4120    488908                  mov [rax], rcx
0x767060bc4123    498d4718                lea rax, [r15+0x18]
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc4127    498b4f08                mov rcx, [r15+0x8]
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc412b    488908                  mov [rax], rcx
0x767060bc412e    498d4708                lea rax, [r15+0x8]
0x767060bc4132    4983c608                add r14, 0x8
0x767060bc4136    498906                  mov [r14], rax
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc4139    498b4710                mov rax, [r15+0x10]
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc413d    498b4f18                mov rcx, [r15+0x18]
0x767060bc4141    4803c1                  add rax, rcx
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc4144    488bc8                  mov rcx, rax
0x767060bc4147    498b06                  mov rax, [r14]
0x767060bc414a    4983ee08                sub r14, 0x8
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc414e    488908                  mov [rax], rcx
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo ..
0x767060bc4151    49836ff801              sub qword [r15-0x8], 0x1
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for       ..
0x767060bc4156    ebb5                    jmp 0x767060bc410d            < Interpreter.fibBN+39 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  ..
0x767060bc4158    498b4708                mov rax, [r15+0x8]
0x767060bc415c    4d8d77f8                lea r14, [r15-0x8]
0x767060bc4160    4d8b7e08                mov r15, [r14+0x8]
 .. n2 @ + =      }     for        return fn @ ;  ..
0x767060bc4164    498906                  mov [r14], rax
 .. + =      }     for        return fn @ ;  ..
0x767060bc4167    c3                      ret
Word_Disassemble : word - 'fibBN' :: codeSize = 130
Word : 0x000076705d2c16c9 :: Compiled at : 0x0000767060bc40e6
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 551.19 <::
 6765

 locals fibBN :  1 :  1, 2 :  1, 3 :  2, 4 :  3, 5 :  5, 6 :  8, 7 :  13, 8 :  21, 9 :  34, 10 :  55, 11 :  89, 12 :  144, 13 :  233, 14 :  377, 15 :  610, 16 :  987, 17 :  1597, 18 :  2584, 19 :  4181, 20 :  6765, 21 :  10946, 22 :  17711, 23 :  28657, 24 :  46368, 25 :  75025, 26 :  121393, 27 :  196418, 28 :  317811, 29 :  514229, 30 :  832040, 31 :  1346269, 32 :  2178309, 33 :  3524578, 34 :  5702887, 35 :  9227465, 36 :  14930352, 37 :  24157817, 38 :  39088169, 39 :  63245986, 40 :  102334155, 41 :  165580141, 42 :  267914296, 43 :  433494437, 44 :  701408733, 45 :  1134903170, 46 :  1836311903, 47 :  2971215073, 48 :  4807526976, 49 :  7778742049, 50 :  12586269025, 51 :  20365011074, 52 :  32951280099, 53 :  53316291173, 54 :  86267571272, 55 :  139583862445, 56 :  225851433717, 57 :  365435296162, 58 :  591286729879, 59 :  956722026041, 60 :  1548008755920, 61 :  2504730781961, 62 :  4052739537881, 63 :  6557470319842, 64 :  10610209857723, 65 :  17167680177565, 66 :  27777890035288, 67 :  44945570212853, 68 :  72723460248141, 69 :  117669030460994, 70 :  190392490709135, 71 :  308061521170129, 72 :  498454011879264, 73 :  806515533049393, 74 :  1304969544928657, 75 :  2111485077978050, 76 :  3416454622906707, 77 :  5527939700884757, 78 :  8944394323791464, 79 :  14472334024676221, 80 :  23416728348467685, 81 :  37889062373143906, 82 :  61305790721611591, 83 :  99194853094755497, 84 :  160500643816367088, 85 :  259695496911122585, 86 :  420196140727489673, 87 :  679891637638612258, 88 :  1100087778366101931, 89 :  1779979416004714189, 90 :  2880067194370816120, 91 :  4660046610375530309, 92 :  7540113804746346429
 92 7540113804746346429 6765 ok
 =============================
Interpreter._ifx <:> csl compiled word
SourceCode for Interpreter._ifx :>
: _ifx ( w | j ) { j 1 = } { j @ reps0 @ <= } { j ++ } { j @ w @ wrun drop } for ;
Source code file location of _ifx : "namespaces/test/dev.csl" : 567.2 :: we are now at : namespaces/test/dev.csl : 578.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc42f2 -- code size = 107 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter._ifx : definition = 0x0000767060bc42f2 : disassembly at namespaces/test/dev.csl : 578.9 :
0x767060bc42f2    4d897e08                mov [r14+0x8], r15
0x767060bc42f6    4d8d7e08                lea r15, [r14+0x8]
0x767060bc42fa    4981c610000000          add r14, 0x10
 ..            : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ..
0x767060bc4301    49c7470801000000        mov qword [r15+0x8], 0x1
 ..      : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  ..
0x767060bc4309    498b4708                mov rax, [r15+0x8]
 ..  : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  ..
0x767060bc430d    48b95974215d70760000    mov rcx, 0x76705d217459
0x767060bc4317    488b09                  mov rcx, [rcx]
 .. ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;
0x767060bc431a    483bc1                  cmp rax, rcx
 ..  | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;
0x767060bc431d    0f8f2d000000            jg 0x767060bc4350             < Interpreter._ifx+94 >
0x767060bc4323    498b4708                mov rax, [r15+0x8]
0x767060bc4327    4983c608                add r14, 0x8
0x767060bc432b    498906                  mov [r14], rax
 .. }      {                          j @ w @ wrun drop          }     for ;
0x767060bc432e    498b47f8                mov rax, [r15-0x8]
0x767060bc4332    4983c608                add r14, 0x8
0x767060bc4336    498906                  mov [r14], rax
 ..    {                          j @ w @ wrun drop          }     for ;
0x767060bc4339    49bb47eda95f70760000    mov r11, 0x76705fa9ed47
0x767060bc4343    49ffd3                  call r11                      < System.wrun : 0x000076705fa9ed47 >
 ..                          j @ w @ wrun drop          }     for ;
0x767060bc4346    4983ee08                sub r14, 0x8
 ..      { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;
0x767060bc434a    49ff4708                inc qword [r15+0x8]
 ..   { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;
0x767060bc434e    ebb9                    jmp 0x767060bc4309            < Interpreter._ifx+23 >
0x767060bc4350    4d8d77f8                lea r14, [r15-0x8]
0x767060bc4354    4d8b7e08                mov r15, [r14+0x8]
0x767060bc4358    4983ee08                sub r14, 0x8
 ..  j @ w @ wrun drop          }     for ;
0x767060bc435c    c3                      ret
Word_Disassemble : word - '_ifx' :: codeSize = 107
Word : 0x000076705d2cbd09 :: Compiled at : 0x0000767060bc42f2
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 578.9 <::

 =============================
Interpreter._ffx <:> csl compiled word
SourceCode for Interpreter._ffx :>
: _ffx ( n w ) { n @ 0 > } { reps @ w @ ifx n -- } while ;
Source code file location of _ffx : "namespaces/test/dev.csl" : 583.2 :: we are now at : namespaces/test/dev.csl : 588.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc43ba -- code size = 89 bytes
TypeSignature :
 -----------------------------
Word :: Interpreter._ffx : definition = 0x0000767060bc43ba : disassembly at namespaces/test/dev.csl : 588.9 :
0x767060bc43ba    4d897e08                mov [r14+0x8], r15
0x767060bc43be    4d8d7e08                lea r15, [r14+0x8]
0x767060bc43c2    4981c608000000          add r14, 0x8
 ..                 : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  ..
0x767060bc43c9    49837ff000              cmp qword [r15-0x10], 0x0
 ..         : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  ..
0x767060bc43ce    0f8e32000000            jle 0x767060bc4406            < Interpreter._ffx+76 >
   : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  ..
0x767060bc43d4    48b86931225d70760000    mov rax, 0x76705d223169
0x767060bc43de    488b00                  mov rax, [rax]
0x767060bc43e1    4983c608                add r14, 0x8
0x767060bc43e5    498906                  mov [r14], rax
 ..  n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;
0x767060bc43e8    498b47f8                mov rax, [r15-0x8]
0x767060bc43ec    4983c608                add r14, 0x8
0x767060bc43f0    498906                  mov [r14], rax
 ..  )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;
0x767060bc43f3    49bb6243bc6070760000    mov r11, 0x767060bc4362
0x767060bc43fd    49ffd3                  call r11                      < Interpreter.ifx : 0x0000767060bc4362 >
 ..   { n @ 0 > }      { reps @ w @ ifx n -- }       while ;
0x767060bc4400    49ff4ff0                dec qword [r15-0x10]
 ..  n @ 0 > }      { reps @ w @ ifx n -- }       while ;
0x767060bc4404    ebc3                    jmp 0x767060bc43c9            < Interpreter._ffx+15 >
0x767060bc4406    4d8d77f8                lea r14, [r15-0x8]
0x767060bc440a    4d8b7e08                mov r15, [r14+0x8]
0x767060bc440e    4983ee10                sub r14, 0x10
 ..   { reps @ w @ ifx n -- }       while ;
0x767060bc4412    c3                      ret
Word_Disassemble : word - '_ffx' :: codeSize = 89
Word : 0x000076705d2d1909 :: Compiled at : 0x0000767060bc43ba
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 588.9 <::


fib_shootout begin ...

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.048544059 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035540602 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.046532860 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.036080585 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.047172267 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035773238 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.048769604 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035234138 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.047851100 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035601257 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.048210454 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035240400 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.047474304 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035229971 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.048052317 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035373750 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :>
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; }
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 392.9 :: we are now at : namespaces/test/dev.csl : 638.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc23a0 -- code size = 53 bytes
TypeSignature :
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x0000767060bc23a0 : disassembly at namespaces/test/dev.csl : 638.21 :
0x767060bc23a0    498b3e                  mov rdi, [r14]
 ..  REG fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn  ..
0x767060bc23a3    48c7c600000000          mov rsi, 0x0
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;  ..
0x767060bc23aa    48c7c200000000          mov rdx, 0x0
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }    ..
0x767060bc23b1    b901000000              mov ecx, 0x1
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     re ..
0x767060bc23b6    4883ff00                cmp rdi, 0x0
0x767060bc23ba    0f8411000000            jz 0x767060bc23d1             < C_Syntax.fibPTC2?+49 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c0    488bd1                  mov rdx, rcx
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c3    488bce                  mov rcx, rsi
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c6    4803d1                  add rdx, rcx
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23c9    488bf2                  mov rsi, rdx
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn  ..
0x767060bc23cc    48ffcf                  dec rdi
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; } ..
0x767060bc23cf    ebe5                    jmp 0x767060bc23b6            < C_Syntax.fibPTC2?+22 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d1    498936                  mov [r14], rsi
 ..  = fn1 + fn2 ;      }     return fn ; }  ..
0x767060bc23d4    c3                      ret
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x000076705d25d729 :: Compiled at : 0x0000767060bc23a0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 4 ] : elapsed time = 0.048927099 seconds at namespaces/test/dev.csl : 638.21
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :>
C Primitive
starting at address : 0xca134280 -- code size = 53 bytes
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x0000641cca134280 : disassembly at namespaces/test/dev.csl : 638.21 :
0x641cca134280    498b06                  mov rax, [r14]
0x641cca134283    4c89f7                  mov rdi, r14
0x641cca134286    4885c0                  test rax, rax
0x641cca134289    742d                    jz 0xca1342b8                 < C compiler code >
0x641cca13428b    b901000000              mov ecx, 0x1
0x641cca134290    31d2                    xor edx, edx
0x641cca134292    eb0f                    jmp 0x641cca1342a3            < C.cfib2_O3+35 >
0x641cca134294    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13429f    90                      nop
0x641cca1342a0    4889f2                  mov rdx, rsi
0x641cca1342a3    488d340a                lea rsi, [rdx+rcx]
0x641cca1342a7    4889d1                  mov rcx, rdx
0x641cca1342aa    4883e801                sub rax, 0x1
0x641cca1342ae    75f0                    jnz 0xca1342a0                < C.cfib2_O3+32 >
0x641cca1342b0    488937                  mov [rdi], rsi
0x641cca1342b3    c3                      ret
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x0000767060cb3788 :: Compiled at : 0x0000641cca134280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 638.21 <::

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 4 ] : elapsed time = 0.035279052 seconds at namespaces/test/dev.csl : 638.21
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

fib_shootout end ...


fac_shootout begin ...

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003450932 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :>
C Primitive
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x0000641cca134400 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134400    498b06                  mov rax, [r14]
0x641cca134403    4c89f6                  mov rsi, r14
0x641cca134406    ba01000000              mov edx, 0x1
0x641cca13440b    4883f801                cmp rax, 0x1
0x641cca13440f    7e45                    jle 0xca134456                < C compiler code >
0x641cca134411    488d48ff                lea rcx, [rax-0x1]
0x641cca134415    a801                    test al, 0x1
0x641cca134417    7527                    jnz 0xca134440                < C compiler code >
0x641cca134419    4889c2                  mov rdx, rax
0x641cca13441c    4889c8                  mov rax, rcx
0x641cca13441f    4883f901                cmp rcx, 0x1
0x641cca134423    7431                    jz 0xca134456                 < C compiler code >
0x641cca134425    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca134430    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13443b    0f1f440000              nop [r8+rax]
0x641cca134440    480fafd0                imul rdx, rax
0x641cca134444    488d48ff                lea rcx, [rax-0x1]
0x641cca134448    4883e802                sub rax, 0x2
0x641cca13444c    480fafd1                imul rdx, rcx
0x641cca134450    4883f801                cmp rax, 0x1
0x641cca134454    75ea                    jnz 0xca134440                < C compiler code >
0x641cca134456    488916                  mov [rsi], rdx
0x641cca134459    c3                      ret
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000767060cb3e48 :: Compiled at : 0x0000641cca134400
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 4 ] : elapsed time = 0.002393339 seconds at namespaces/test/dev.csl : 668.21
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003418110 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :>
C Primitive
starting at address : 0xca134400 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x0000641cca134400 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134400    498b06                  mov rax, [r14]
0x641cca134403    4c89f6                  mov rsi, r14
0x641cca134406    ba01000000              mov edx, 0x1
0x641cca13440b    4883f801                cmp rax, 0x1
0x641cca13440f    7e45                    jle 0xca134456                < C.cfactorial4_O3+86 >
0x641cca134411    488d48ff                lea rcx, [rax-0x1]
0x641cca134415    a801                    test al, 0x1
0x641cca134417    7527                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134419    4889c2                  mov rdx, rax
0x641cca13441c    4889c8                  mov rax, rcx
0x641cca13441f    4883f901                cmp rcx, 0x1
0x641cca134423    7431                    jz 0xca134456                 < C.cfactorial4_O3+86 >
0x641cca134425    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca134430    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13443b    0f1f440000              nop [rax+rax]
0x641cca134440    480fafd0                imul rdx, rax
0x641cca134444    488d48ff                lea rcx, [rax-0x1]
0x641cca134448    4883e802                sub rax, 0x2
0x641cca13444c    480fafd1                imul rdx, rcx
0x641cca134450    4883f801                cmp rax, 0x1
0x641cca134454    75ea                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134456    488916                  mov [rsi], rdx
0x641cca134459    c3                      ret
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000767060cb3e48 :: Compiled at : 0x0000641cca134400
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 4 ] : elapsed time = 0.002336332 seconds at namespaces/test/dev.csl : 668.21
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003450691 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :>
C Primitive
 -----------------------------
Word :: C.cfactorial3 : definition = 0x0000641cca134680 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134680    498b06                  mov rax, [r14]
0x641cca134683    4c89f6                  mov rsi, r14
0x641cca134686    ba01000000              mov edx, 0x1
0x641cca13468b    4883f801                cmp rax, 0x1
0x641cca13468f    7e20                    jle 0xca1346b1                < C compiler code >
0x641cca134691    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13469c    0f1f4000                nop [rax]
0x641cca1346a0    4889c1                  mov rcx, rax
0x641cca1346a3    4883e801                sub rax, 0x1
0x641cca1346a7    480fafd1                imul rdx, rcx
0x641cca1346ab    4883f801                cmp rax, 0x1
0x641cca1346af    75ef                    jnz 0xca1346a0                < C compiler code >
0x641cca1346b1    488916                  mov [rsi], rdx
0x641cca1346b4    c3                      ret
Word_Disassemble : word - 'cfactorial3' :: codeSize = 54
Word : 0x0000767060cb3428 :: Compiled at : 0x0000641cca134680
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 4 ] : elapsed time = 0.002489869 seconds at namespaces/test/dev.csl : 668.21
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003412250 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :>
C Primitive
starting at address : 0xca134400 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x0000641cca134400 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134400    498b06                  mov rax, [r14]
0x641cca134403    4c89f6                  mov rsi, r14
0x641cca134406    ba01000000              mov edx, 0x1
0x641cca13440b    4883f801                cmp rax, 0x1
0x641cca13440f    7e45                    jle 0xca134456                < C.cfactorial4_O3+86 >
0x641cca134411    488d48ff                lea rcx, [rax-0x1]
0x641cca134415    a801                    test al, 0x1
0x641cca134417    7527                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134419    4889c2                  mov rdx, rax
0x641cca13441c    4889c8                  mov rax, rcx
0x641cca13441f    4883f901                cmp rcx, 0x1
0x641cca134423    7431                    jz 0xca134456                 < C.cfactorial4_O3+86 >
0x641cca134425    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca134430    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13443b    0f1f440000              nop [rax+rax]
0x641cca134440    480fafd0                imul rdx, rax
0x641cca134444    488d48ff                lea rcx, [rax-0x1]
0x641cca134448    4883e802                sub rax, 0x2
0x641cca13444c    480fafd1                imul rdx, rcx
0x641cca134450    4883f801                cmp rax, 0x1
0x641cca134454    75ea                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134456    488916                  mov [rsi], rdx
0x641cca134459    c3                      ret
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000767060cb3e48 :: Compiled at : 0x0000641cca134400
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 4 ] : elapsed time = 0.002356039 seconds at namespaces/test/dev.csl : 668.21
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003418862 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :>
C Primitive
starting at address : 0xca134400 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x0000641cca134400 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134400    498b06                  mov rax, [r14]
0x641cca134403    4c89f6                  mov rsi, r14
0x641cca134406    ba01000000              mov edx, 0x1
0x641cca13440b    4883f801                cmp rax, 0x1
0x641cca13440f    7e45                    jle 0xca134456                < C.cfactorial4_O3+86 >
0x641cca134411    488d48ff                lea rcx, [rax-0x1]
0x641cca134415    a801                    test al, 0x1
0x641cca134417    7527                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134419    4889c2                  mov rdx, rax
0x641cca13441c    4889c8                  mov rax, rcx
0x641cca13441f    4883f901                cmp rcx, 0x1
0x641cca134423    7431                    jz 0xca134456                 < C.cfactorial4_O3+86 >
0x641cca134425    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca134430    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13443b    0f1f440000              nop [rax+rax]
0x641cca134440    480fafd0                imul rdx, rax
0x641cca134444    488d48ff                lea rcx, [rax-0x1]
0x641cca134448    4883e802                sub rax, 0x2
0x641cca13444c    480fafd1                imul rdx, rcx
0x641cca134450    4883f801                cmp rax, 0x1
0x641cca134454    75ea                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134456    488916                  mov [rsi], rdx
0x641cca134459    c3                      ret
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000767060cb3e48 :: Compiled at : 0x0000641cca134400
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 4 ] : elapsed time = 0.002352031 seconds at namespaces/test/dev.csl : 668.21
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003491940 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :>
C Primitive
starting at address : 0xca134680 -- code size = 54 bytes
 -----------------------------
Word :: C.cfactorial3 : definition = 0x0000641cca134680 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134680    498b06                  mov rax, [r14]
0x641cca134683    4c89f6                  mov rsi, r14
0x641cca134686    ba01000000              mov edx, 0x1
0x641cca13468b    4883f801                cmp rax, 0x1
0x641cca13468f    7e20                    jle 0xca1346b1                < C.cfactorial3+49 >
0x641cca134691    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13469c    0f1f4000                nop [rax]
0x641cca1346a0    4889c1                  mov rcx, rax
0x641cca1346a3    4883e801                sub rax, 0x1
0x641cca1346a7    480fafd1                imul rdx, rcx
0x641cca1346ab    4883f801                cmp rax, 0x1
0x641cca1346af    75ef                    jnz 0xca1346a0                < C.cfactorial3+32 >
0x641cca1346b1    488916                  mov [rsi], rdx
0x641cca1346b4    c3                      ret
Word_Disassemble : word - 'cfactorial3' :: codeSize = 54
Word : 0x0000767060cb3428 :: Compiled at : 0x0000641cca134680
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 4 ] : elapsed time = 0.002527590 seconds at namespaces/test/dev.csl : 668.21
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003475868 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :>
C Primitive
starting at address : 0xca134400 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x0000641cca134400 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134400    498b06                  mov rax, [r14]
0x641cca134403    4c89f6                  mov rsi, r14
0x641cca134406    ba01000000              mov edx, 0x1
0x641cca13440b    4883f801                cmp rax, 0x1
0x641cca13440f    7e45                    jle 0xca134456                < C.cfactorial4_O3+86 >
0x641cca134411    488d48ff                lea rcx, [rax-0x1]
0x641cca134415    a801                    test al, 0x1
0x641cca134417    7527                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134419    4889c2                  mov rdx, rax
0x641cca13441c    4889c8                  mov rax, rcx
0x641cca13441f    4883f901                cmp rcx, 0x1
0x641cca134423    7431                    jz 0xca134456                 < C.cfactorial4_O3+86 >
0x641cca134425    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca134430    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13443b    0f1f440000              nop [rax+rax]
0x641cca134440    480fafd0                imul rdx, rax
0x641cca134444    488d48ff                lea rcx, [rax-0x1]
0x641cca134448    4883e802                sub rax, 0x2
0x641cca13444c    480fafd1                imul rdx, rcx
0x641cca134450    4883f801                cmp rax, 0x1
0x641cca134454    75ea                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134456    488916                  mov [rsi], rdx
0x641cca134459    c3                      ret
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000767060cb3e48 :: Compiled at : 0x0000641cca134400
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 4 ] : elapsed time = 0.002316845 seconds at namespaces/test/dev.csl : 668.21
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003517707 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial4_O3 <:> C compiled primitive
SourceCode for C.cfactorial4_O3 :>
C Primitive
starting at address : 0xca134400 -- code size = 91 bytes
 -----------------------------
Word :: C.cfactorial4_O3 : definition = 0x0000641cca134400 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134400    498b06                  mov rax, [r14]
0x641cca134403    4c89f6                  mov rsi, r14
0x641cca134406    ba01000000              mov edx, 0x1
0x641cca13440b    4883f801                cmp rax, 0x1
0x641cca13440f    7e45                    jle 0xca134456                < C.cfactorial4_O3+86 >
0x641cca134411    488d48ff                lea rcx, [rax-0x1]
0x641cca134415    a801                    test al, 0x1
0x641cca134417    7527                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134419    4889c2                  mov rdx, rax
0x641cca13441c    4889c8                  mov rax, rcx
0x641cca13441f    4883f901                cmp rcx, 0x1
0x641cca134423    7431                    jz 0xca134456                 < C.cfactorial4_O3+86 >
0x641cca134425    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca134430    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13443b    0f1f440000              nop [rax+rax]
0x641cca134440    480fafd0                imul rdx, rax
0x641cca134444    488d48ff                lea rcx, [rax-0x1]
0x641cca134448    4883e802                sub rax, 0x2
0x641cca13444c    480fafd1                imul rdx, rcx
0x641cca134450    4883f801                cmp rax, 0x1
0x641cca134454    75ea                    jnz 0xca134440                < C.cfactorial4_O3+64 >
0x641cca134456    488916                  mov [rsi], rdx
0x641cca134459    c3                      ret
Word_Disassemble : word - 'cfactorial4_O3' :: codeSize = 91
Word : 0x0000767060cb3e48 :: Compiled at : 0x0000641cca134400
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 4 ] : elapsed time = 0.002346942 seconds at namespaces/test/dev.csl : 668.21
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :>
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 668.21
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x60bc186f -- code size = 25 bytes
TypeSignature :
 -----------------------------
Word :: User.factorial2 : definition = 0x0000767060bc186f : disassembly at namespaces/test/dev.csl : 668.21 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc186f    498b3e                  mov rdi, [r14]
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  ..
0x767060bc1872    be01000000              mov esi, 0x1
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1877    480faff7                imul rsi, rdi
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187b    48ffcf                  dec rdi
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc187e    4883ff01                cmp rdi, 0x1
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1882    7ff3                    jg 0x60bc1877                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1884    498936                  mov [r14], rsi
 .. n -- } { n @ 1 > } doWhile return rec ;
0x767060bc1887    c3                      ret
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x000076705d214ad9 :: Compiled at : 0x0000767060bc186f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 4 ] : elapsed time = 0.003502879 seconds at namespaces/test/dev.csl : 668.21
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 =============================
C.cfactorial3 <:> C compiled primitive
SourceCode for C.cfactorial3 :>
C Primitive
starting at address : 0xca134680 -- code size = 54 bytes
 -----------------------------
Word :: C.cfactorial3 : definition = 0x0000641cca134680 : disassembly at namespaces/test/dev.csl : 668.21 :
0x641cca134680    498b06                  mov rax, [r14]
0x641cca134683    4c89f6                  mov rsi, r14
0x641cca134686    ba01000000              mov edx, 0x1
0x641cca13468b    4883f801                cmp rax, 0x1
0x641cca13468f    7e20                    jle 0xca1346b1                < C.cfactorial3+49 >
0x641cca134691    66662e0f1f840000000000  o16 nop [cs:rax+rax]
0x641cca13469c    0f1f4000                nop [rax]
0x641cca1346a0    4889c1                  mov rcx, rax
0x641cca1346a3    4883e801                sub rax, 0x1
0x641cca1346a7    480fafd1                imul rdx, rcx
0x641cca1346ab    4883f801                cmp rax, 0x1
0x641cca1346af    75ef                    jnz 0xca1346a0                < C.cfactorial3+32 >
0x641cca1346b1    488916                  mov [rsi], rdx
0x641cca1346b4    c3                      ret
Word_Disassemble : word - 'cfactorial3' :: codeSize = 54
Word : 0x0000767060cb3428 :: Compiled at : 0x0000641cca134680
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 668.21 <::

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 4 ] : elapsed time = 0.002444344 seconds at namespaces/test/dev.csl : 668.21
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps


fac_shootout end ...


NamespaceTree - All Namespaces : using : not using :: with : words
         - Root powReg7 powReg6 powReg5 powReg4 powReg3 powReg2 powReg pow ;; sp sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
                 - Interpreter fac_shootout fib_shootout _shootout WDISS_ON comment _ffx ifx _ifx dbg tfib3 fibBN tbn tfib3 tfib2 tfib1 tfib fibPTC2 fibPTC Cfib_O3 Cfib fibn0 sp _Compile_Stack_PopToReg sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
                 - C fib4 fib3 fib2 fib tt fibPTC3? fibPTC? _fib1 _fib2 factorial fac hi x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf
                         - C_Syntax fibPTC4? fibPTC2? fibPTC? _fibn0 cpow fibPTC2? faccs2 fac5 fac40 faccs1 faccs fac5 faccs3 factoriali2 factoriali MOVrr MOVmr MOV32rm MOV8rm _Compile_Move _Compile_Move_DataStackN_ToReg _Compile_TESTreg_Toreg _Compile_MoveReg_To_StackN _Compile_MoveReg_To_Rm _Compile_Test _Compile_SUBI_DSP _Compile_CallThruReg _Compile_Group5 _Compile_X_Group1_Immediate _Compile_X_Group1_Reg_To_Reg _Compile_X_Group1 _Compile_SetAtAddress_WithReg _Compile_Move_Literal_Immediate_To_Reg Compile_MoveReg_ToAddress_ThruReg Compile_MoveMemValue_ToReg_ThruReg Compile_MoveMemValue_To_Reg Compile_MoveImm_To_Mem Compile_MoveImm_To_Reg Compile_MoveImm Compile_Move_Reg_To_Reg Compile_Move_Rm_To_Reg Compile_Move_Reg_To_Rm Compile_Move_WithSib Compile_Move Compile_CalculateWrite_Instruction_X64 _Compile_Write_Instruction_X64 CalculateModRmByte _Compile_ImmDispData CalculateSib CalculateModRegardingDisplacement Calculate_Mod Calculate_Rex _CalculateRex Abs fibPTC2? _fib1c factorial factoriali ash bttt ctti tfw1 tfw yadaYada yada fac5 $ faccs3 interpret4 faccs2 fac40 interpret3 interpret2 chi interpret testc1 thi42 thi41 thi42 ctof1 ctof yadaYada yada csMatchExWithReturn csMatchEx taa CSL_a10 ctcta cmoe cmoe cpow fac5 ctof1 ctof0 factorial tl l0030 l0061 l0052 l0060 l0051 l0050 l0041 l0040 l0020 l002 l0010 l001 ctof ctof pbAssert StringEqual rpn match & typedef type c_class ? ! , ; } {
                         - int wtdInclude fw this size
                         - void Error ftoc ctof ftoc ctof this size
                         - int64 this size
                         - byte this size
                         - uint64 this size
                         - uint8 this size
                         - typedef buf this size
                                 - Buffer2048 node-p ash buffer this size
                         - Experimental3 abyteTest
                                 - byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                                 - _byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                         - Dlsym
                                 - libc buf xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
                                         - CBuffer this size
                         - CObj this size
                                 - chey
                         - block this size
                         - Pointer this size
                         - Boolean this size
                         - quad this size
                         - long this size
                         - char this size
                         - uint32 this size
                         - int32 this size
                         - uint16 this size
                         - int16 this size
                         - int8 this size
                         - Experimental OMS RemainingAllocated Freed Allocated OvtMemChunkList OVT_MemChunk OSMS RemainingAllocated Freed Allocated HistorySpace_MemChunkStringList OVT_StaticMemList StaticMemSpace OS_MemChunk TSI TypeStatusInfo Ppibs PreProcessorIfBlockStatus SuperNamespace NameSpace i32_FunctionArg Function blk_CallHook ui64_ObjectAttributes ui64_MorphismAttributes ccp_Name SuperNamespace const NameSpace const ui64_LispAttributes ui64_ObjectAttributes ui64_MorphismAttributes blk_Definition OpInsnCode OpInsnCodeGroup uint64_TypeSignature TypeSignature pb_TypeSignature ccp_Name ] 8 [ Pbf8 Pblc JmpBuf0 sigjmp_buf PrintBufferConcatCopy PrintBufferCopy PrintBuffer Thrown StringSpaceSize BufferSpaceSize CSLSize OpenVmTilSize DataStackSize SessionObjectsSize WordRecylingSize CompilerTempObjectsSize TempObjectsSize ContextSize LispSpaceSize InternalObjectsSize ObjectSpaceSize MachineCodeSize LispTempSize LispCopySize DictionarySize Dbi ReAllocations SigSegvs Restarts StartedTimes StartIncludeTries Verbosity CSL_InternalSpace OpenVmTilSpace InternalObjectSpace HistorySpace RecycledOptInfoList RecycledWordList BufferList NBAs MemorySpaceList MemorySpace0 TotalMemSizeTarget TotalNbaAccountedMemAllocated TotalNbaAccountedMemRemaining TotalRemainingAccounted Notice Alert Default Current SigLocation SigAddress Argv Argc ExceptionWord ExceptionToken ExceptionSpecialMessage ExceptionMessage VersionString ErrorFilename StartupFilename StartupString InitString Console ExceptionCode Signal RestartCondition LastRestartCondition SignalExceptionsHandled DebugOutputFlag LogFlag CodeByteArray OVT_LC OVT_Interpreter OVT_Context OVT_CSL State OVT_MemChunk ics_IntColors rgbcs_RgbColors Bg Fg rgbc_Bg rgbc_Fg Blue Green Red SavedCslNamespaces InNamespace Namespaces WordsAllocated WordsInRecycling RecycledWordCount NBAs StringSpace DictionarySpace LispSpace ObjectSpace CodeSpace BufferSpace LispCopySpace LispTempSpace WordRecylingSpace ContextSpace CompilerTempObjectSpace TempObjectSpace SessionObjectsSpace MS_MemChunk ContextSensitiveLanguage StrTokInfo StringTokenInfo CharInfo 16 CharType CharType 16 CharFunctionTableIndex CharFunctionTableIndex LambdaCalculus CombinatorInfo LexerFunction cntx ContextFunction arg cntx ContextFunction_1 arg2 arg1 cntx ContextFunction_2 arg3 arg2 arg1 cntx ContextFunction_3 JmpBuf0 sigjmp_buf ContextNba PreprocessorStackList CurrentlyRunningWordDefinition TypeCastNamespace QidInNamespace BaseObject SC_CurrentCombinator ArrayBaseFieldObject CurrentWordBeingCompiled LastCompiledWord CurrentDisassemblyWord SourceCodeWord CurrentCombinator NlsWord LastEvalWord CurrentEvalWord TokenDebugSetupWord CurrentTokenWord LastRanWord CurrentlyRunningWord SpecialDelimiterOrDotCharSet SpecialDelimiterCharSet SpecialTokenDelimiters DefaultDelimiterOrDotCharSet DefaultDelimiterCharSet DefaultTokenDelimiters CurrentToken Location ContextDataStack System0 Compiler0 Interpreter0 Finder0 Lexer0 ReadLiner0 WordCount NsCount State C_Node Timers IncludeFileStackNumber ExceptionFlag BigNum_Printf_Width BigNum_Printf_Precision NumberBase State Debugger struct DebuggerFunction Interpreter TDI_StructUnionStack CurrentTopBlockInfo OptimizeInfoList InfixOperatorStack InternalNamespacesStack CombinatorStack BlockStack CombinatorBlockInfoStack LocalsCompilingNamespacesStack PointerToJmpInsnStack PostfixLists OptInfo JccAdressOffsetList RegisterParameterList CurrentMatchList SetccMovedList GotoList NonCompilingNs LocalsNamespace Qid_BackgroundNamespace C_FunctionBackgroundNamespace C_BackgroundNamespace PrefixWord LHS_Word Current_Word_Create Current_Word_New ReturnLParenOperandWord ReturnVariableWord ReturnWord RspRestoreOffset RspSaveOffset BlocksBegun FrameSizeCellOffset AccumulatedOffsetPointer BeginBlockFlag TakesLParenAsBlock SemicolonEndsThisBlock InLParenBlock AccumulatedOptimizeOffsetPointer InitHere ArrayEnds OptimizeForcedReturn CombinatorLevel BlockLevel GlobalParenLevel ParenLevel SaveOptimizeState SaveCompileMode LocalsFrameSize NumberOfArgs NumberOfRegisterArgs NumberOfNonRegisterArgs NumberOfVariables NumberOfRegisterVariables NumberOfNonRegisterVariables NumberOfLocals NumberOfRegisterLocals NumberOfNonRegisterLocals CombinatorEndsAt CombinatorStartsAt StartPoint BreakPoint ContinuePoint IfZElseOffset State JON OffsetPointer JmpToAddress JON_Node TDSCI COI wordArg2_Op wordArg1_Op wordArg2_literal wordArg1_literal wordArg2_rvalue wordArg1_rvalue rvalue wordArg1Node wordArg2Node nextNode wordNode nodem node lparen2 lparen1 wordArg0_ForOpEqual xBetweenArg1AndArg2 wordArg2 wordArg1 wordm wordn opWord rparenPrevOp ControlFlags NumberOfArgs rtrn CPState CpuPipelineState COIW coiw_seven coiw_six coiw_five coiw_four coiw_three coiw_two coiw_one coiw_zero UseReg CO_DstReg CO_SrcReg CO_ImmSize CO_Imm CO_Disp CO_Rm CO_Reg CO_Mod CO_Dest_RegOrMem OptimizeFlag State_OREG2 State_OREG State_ACC State S_Node Lexer QualifyingNamespace FoundWord State ReadLineFunction struct ReadLiner_KeyFunction TabCompletionInfo Registers Rip RFlags R15d R14d R13d R12d R11d R10d R9d R8d Rdi Rsi Rbp Rsp Rbx Rdx Rcx Rax State Disp OffsetSize InsnSize Insn InsnType InsnAddress IiFlags BI_LocalsNamespace BI_Rllafl BI_Gi RegisterVariableControlWord OurCombinator LogicCodeWord ResetFlag N SetccNegFlag Ttt SetccTtt JmpToAddress ActualCopiedToJccCode CopiedToLogicJccCode CopiedToEnd MovzxCode SetccCode BI_StackPushRegisterCode CopiedToStart OriginalActualCodeStart AfterCmpCode CmpCode TestCode JccAddedCode JccCode TttnCode CompiledAtAddress PtrToJmpInsn PtrToJumpOffset bp_Last bp_First AfterLocalFrame LocalFrameStart ParenLevel JccType CopiedSize State BI_Symbol andOrCount la_code pparenlvl mparenlvl oparenlvl rtrn j i orAfterAnd andAfterOr orAfter2rparen andAfter2rparen Ncll Ncul ncp ncm nc PtrToJmpInsn pb_JmpOffsetPointer LabeledAddress OriginalAddress CompiledAtAddress pb_LabelName GI_BlockInfo CombinatorLevel BlockLevel Combinator GI_Word AddressSet GI_Symbol NBA BA_Data bp_Last EndIndex StartIndex MemRemaining BA_DataSize OurNBA NamedByteArray BA_Symbol BA_MemChunk TypeNamespace TypeSignatureCodes StackMapFunction4 StackMapFunction2 StackMapFunction1 StackMapFunction0 symbol VMapSymbol2 MapNodeFunction MapSymbolFunction2 VMapNodeFunction MapSymbolFunction MapFunction_2 MapFunction_Word MapFunction_1 MapFunction MapFunction_Word_PtrInt ListFunction4 ListFunction3 ListFunction2 ListFunction ListFunction0 cMapFunction_1 HistoryStringNode MemChunk CaseNode Buffer Symbol ListObject DObject DynamicObject Class Vocabulary Namespace Combinator ID BoolMapFunction_1 MapFunction5 MapFunction4 MapFunction4wReturn MapFunction3 MapFunction2_64 MapFunction2 MapFunction1 MapFunction0 List DLList ListNode Node n_Attributes n_dobject n_DLNode _DLList _ListNode _Node n_CurrentNode n_iData n_bData n_unmap n_InUseFlag n_Slots n_Size n_Type n_Node n_Before n_After do_iData do_bData do_unmap do_InUseFlag do_Slots do_Size do_Type do_Node do_Before do_After l_CurrentNode l_List _dllist node TI AttributeArray T_ChunkSize T_Size T_NumberOfBytes T_NumberOfSlots T_Unused T_NumberOfPrefixedArgs T_WordAttributes T_WAllocationType T_LispAttributes T_ObjectAttributes T_MorphismAttributes slot object function StackData InitialTosPointer StackMax StackMin StackPointer StackSize cFunction_2_Arg cFunction_1_Arg cFunction_0_Arg vFunction_2_Arg vFunction_1_UArg vFunction_1_Arg VoidFunction
                                 - dlnode n_Tail n_Before n_Head n_After this size
                                 - dllist this size
                                 - TypeInfo this size
                                 - Stack this size
                                 - Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - OpenVmTil this size
                                 - CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - OVT_MemSystem this size
                                 - OVT_StaticMemSystem this size
                                 - typeStatusInfo OpWordReturnSignatureLetterCode OpWord_ReturnsACodedValue_Flag TypeErrorStatus ] 128 [ ActualTypeStackRecordingBuffer ] 32 [ ExpandedTypeCodeBuffer OpWordTypeSignature OpWordFunctionTypeSignatureLength TypeStackDepth StackWord1 StackWord0 WordBeingCompiled OpWord TypeWordStack this size
                                 - ppibs LineNumber Filename 1 SvIfCond SvIfCond 1 ElifCond ElifCond 1 IfCond IfCond 1 Status Status 1 AccumStatus AccumStatus int64_Ppibs this size
                                 - MachineCodePrimitive this size
                                 - CPrimitive this size
                                 - Colors this size
                                 - IntColors this size
                                 - RgbColors this size
                                 - RgbColor this size
                                 - MemorySpace this size
                                 - _CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - _StringTokenInfo CharSet0 CharSet SMNamespace Delimiters Out In EndIndex StartIndex State this size
                                 - CharacterType this size
                                 - _LambdaCalculus LC_JmpBuf sigjmp_buf OurCSL _CSL IndentDbgPrint SavedTypeCheckState LetFlag ApplyFlag Lambda_SC_WordList Code outBuffer buffer PrintBuffer OutBuffer BaseObject ArrayBaseObject Sc_Word LC_Here LC_SourceCode SaveStackPointer CombinatorInfoStack QuoteStateStack QuoteState ItemQuoteState SavedCodeSpace LastInterpretedWord FunctionArgs FunctionParameters True Nil Largs1 Largs Largs0 Locals Lvalue Lfunction Lfunction0 Lfirst L1 L0 Lread BackgroundNamespace LispTempNamespace LispDefinesNamespace LispNamespace ParenLevel Loop DontCopyFlag DebuggerSetupFlag DebuggerState State this size
                                 - _CombinatorInfo 16 ParenLevel ParenLevel 16 BlockLevel BlockLevel CI_i32_Info this size
                                 - Context this size
                                 - System this size
                                 - _Debugger DebugWordList Udis ud_t CharacterFunctionTable DebuggerFunction CharacterTable StepInstructionBA cs_Cpu LocalsCompilingNamespacesStack BreakReturnStack ReturnStack RestoreCpuState SaveCpuState Filename ShowLine LastDisStart StartHere SpecialPreHere PreHere LastSourceCodeAddress CopyRBP CopyRSP ReturnAddress DebugAddress Token Menu SubstitutedWord LastSourceCodeWord CurrentlyRunningWord SteppedWord LastPreSetupWord LocalsNamespace NextEvalWord LastShowEffectsWord LastShowInfoWord EntryWord w_AliasOf w_Alias w_Word InsnSize Edi Esi LastScwi SaveKey Key SaveStackDepth SaveTOS RL_ReadIndex Insn LevelBitNamespaceMap LastRsp DebugRDI DebugRSI DebugRBP DebugRSP WordDsp SaveRsp SaveEdi AddressModeSaveDsp RaDsp InitDsp SaveDsp State this size
                                 - _Interpreter InterpList WordType ThisNamespace CurrentObjectNamespace LastWord w_Word Token Compiler0 Lexer0 Finder0 ReadLiner0 State this size
                                 - Compiler this size
                                 - JccOffsetNode this size
                                 - TypeDefStructCompileInfo StructureUnionName FieldName TdsciToken DataPtr NextChar Tdsci_Field_Object Tdsci_Field_Type_Namespace Tdsci_StructureUnion_Namespace Tdsci_InNamespace Tdsci_ArrayNumberOfDimensions Tdsci_ArrayDimensions Token_StartIndex Token_EndIndex LineNumber Tdsci_Field_Size Tdsci_Union_Size Tdsci_Structure_Size Tdsci_StructureUnion_Size Tdsci_Offset State this size
                                 - CompileOptimizeInfo this size
                                 - _Lexer TokenList SCI ReadLiner0 NextPeekListItem TokenWord LiteralString Literal CurrentChar TokenBuffer lexer struct NextChar LastToken Filename DelimiterOrDotCharSet DelimiterCharSet TokenDelimiters CurrentTokenDelimiter LastLexedChar TokenInputByte ParsedToken OriginalToken LineNumber TokenWriteIndex CurrentReadIndex SC_Index Token_Length TokenEnd_FileIndex TokenStart_FileIndex TokenEnd_ReadLineIndex TokenStart_ReadLineIndex Token_CompiledDataFieldByteSize L_ObjectAttributes L_MorphismAttributes State this size
                                 - SourceCodeInfo SciBuffer SciWord SciFileIndexScEnd SciFileIndexScStart SciQuoteMode SciIndex this size
                                 - Finder this size
                                 - ReadLiner TciNamespaceStack TabCompletionInfo0 HistoryNode OutputFile InputFile FILE Key ReadLiner_KeyFunction svLine InputStringCurrent InputStringOriginal InputLineString InputLine Prompt AltPrompt NormalPrompt DebugAltPrompt DebugPrompt LastCheckedInputKeyedCharacter Filename LineStartFileIndex InputStringLength InputStringIndex EscapeModeFlag CursorPosition MaxEndPosition EndPosition svReadIndex ReadIndex OutputLineCharacterNumber LineNumber FileCharacterNumber InputKeyedCharacter svState State this size
                                 - TCI MarkNamespace OriginalContainingNamespace LastFoundWord ObjectExtWord NextWord OriginalRunWord RunWord OriginalWord TrialWord Identifier PreviousIdentifier SearchToken ShownWrap StartFlag FoundMarker LastWordWrapCount WordWrapCount WordCount FoundWrapCount MaxFoundCount FoundCount TokenLength DotSeparator EndDottedPos TokenLastChar TokenFirstChar State this size
                                 - Cpu this size
                                 - BlockInfo this size
                                 - Rllafl this size
                                 - GotoInfo this size
                                 - NamedByteArray NBA_ML_TailNode NBA_ML_HeadNode NBA_BaList InitFreedRandMarker Allocations NumberOfByteArrays SmallestRemaining LargestRemaining MemRemaining MemAllocated MemInitial TotalAllocSize NBA_DataSize OriginalSize ba_CurrentByteArray NBA_Symbol NBA_MemChunk this size
                                 - ByteArray this size
                                 - _WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - TypeSignatureInfo this size
                                 - location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - _Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - _DLNode this size
                                 - _node n_Tail n_Before n_Head n_After this size
                                 - int64 this size
                                 - Location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - block this size
                                 - Pointer this size
                                 - AttributeInfo this size
                                 - dobject this size
                                 - DLNode this size
                                 - WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - Word wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                         - PrefixCombinators loop for do while if
                         - Infix tti tt ftfw2 ftfw1 moe moe =
                 - User fib1 _fib4 _fib3 _fib2 _fib _fib1 _fibn1 ffx2 ffx comment _ffx2 _ffx reps ifx2 ifx _ifx2 _ifx reps1 reps0 factorial2 factorial s fac bexp3 bexp2 bexp qexp2 qexp factorial006 factorial005 stest qeval sp heey1 hey1 hi1 heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
                         - Experimental tx
                         - StartupMacros namespaces Delimiters
                 - Locals (| (
                 - Int mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / pow_03 pow ** * -= += - +
                 - Logic tx1 l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
                         - Bits tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
                 - Compiler _fib1 vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
                         - Compiling pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
                         - Reserved {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
                 - Shell hio ppxe ppx epause apause test sh $ _sh endif else if
                 - Defines _DEV_H_ Compile_DEC Compile_INC _X64_CSL_ TSE_SIZE_MISMATCH TSE_ERROR SC_Index SC_QuoteMode SC_Buffer SC_Word STI_INITIALIZED TDI_POST_STRUCT TDI_UNION_PRINTED TDI_POINTER TDI_PRINT TDI_UNION TDI_STRUCT TDI_CLONE_FLAG OP_RESULT ARG2_R ARG2_L ARG1_R ARG1_L STACK_ARGS_TO_STANDARD_REGS OP_RESULT_OREG2 OP_RESULT_OREG OP_RESULT_ACC OREG2_2R OREG2_2L OREG2_1R OREG2_1L OREG_2R OREG_2L OREG_1R OREG_1L ACC_2R ACC_2L ACC_1R ACC_1L REG_LOCK_BIT LOC_OREG LOC_ACC LOC_STACK_1 LOC_STACK_0 IDEAL_LOC_OREG2 IDEAL_LOC_OREG IDEAL_LOC_ACC IDEAL_STACK_3 IDEAL_STACK_2 IDEAL_STACK_1 IDEAL_STACK_0 IDEAL_LOC_LITERAL ASSUMED_LOC_OREG2 ASSUMED_LOC_OREG ASSUMED_LOC_ACC ASSUMED_STACK_3 ASSUMED_STACK_2 ASSUMED_STACK_1 ASSUMED_STACK_0 ASSUMED_LOC_LITERAL LOGIC_FLAG SHOULD_BE_32 COULD_BE_16 COULD_BE_8 PRESERVE_INSN_SIZE GI_CAttribute CN_CaseUint64Value CN_CaseBytePtrValue CN_CaseBlock NBA_Name NBA_Chunk_Size NBA_AAttribute BA_AAttribute BA_AllocSize mc_TotalAllocSize mc_Data mc_Name mc_AllocType mc_ChunkSize mc_unmap mc_Type mc_Node B_Data B_Size B_CAttribute W_DObjectValue W_PtrToValue W_BytePtr W_Value3 W_Value2 W_Object W_Value W_List Lo_LambdaBody Lo_LambdaParameters Lo_String Lo_Integer Lo_UInteger Lo_Object Lo_PtrToValue Lo_Value Lo_List Lo_NumberOfSlots Lo_Tail Lo_Head Lo_Size Lo_Name Lo_LProp Lo_CProp Lo_LAttribute Lo_CAttribute InUseFlag Data WProp LProp CProp2 CProp W_LineNumber W_Filename W_AllocType W_NumberOfPrefixedArgs W_TypeAttributes W_LispAttributes W_ObjectAttributes W_MorphismAttributes Name S_MacroLength S_CodeSize S_unmap S_String S_Pointer S_NumberOfSlots S_ChunkSize ObjectByteSize CompiledDataFieldByteSize Size S_Size S_NumberOfPrefixedArgs S_LispAttributes S_WAllocType S_WordAttributes S_ObjectAttributes S_MorphismAttributes S_CurrentNode S_Before S_After S_Cdr S_Car n_Cdr n_Car Tail Head ENUM BITFIELDS xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
                 - Stack ndup stackCheck setDsp dsp _swap stackDepth depth pick _ndrop dropN drop ndup tos dup _dup
                 - Asm testAsm ;asm asm: asmEnd asmBegin svDsp jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
                         - X64 _Compile_Int64 _Compile_Int32 _Compile_Int16 _Compile_Int8 fa dbiOff dbiOn DBI x64_dbg REX_W IMM_B DISP_B SIB_B MODRM_B REX_B DEC INC N TO_MEM TO_REG INT32_SIZE CELL_SIZE CELL BYTE CALL CMP SUB ADD NG LE LESS NA BE Z ZERO EQ EQUAL BELOW SREG THRU_REG ACC FP DSP R15D R14D R13D R12D R11D R10D R9D R8D RDI RSI RBP RSP RBX RDX RCX RAX MEM MEM0 MEM32 MEM8 REG off on false true sp
                 - Combinators Compile_Stack_Push_R8D _Compile_CMPreg_IMM _Compile_ADDI_DSP _Compile_MoveTOS_To_R8D _Compile_IncDecreg _Compile_Test_Imm iax ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
                 - Class . clone new struct class :{ +:{ };
                         - Buffer buf this size
                                 - DLLNode sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
                                         - DLLNodeAlloc testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
                                                 - Ar1 a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
                                                         - a
                                                         - Ar2 a5 a4 ar this size
                                                                 - Ar3 a7 a8 a6x a6 ar this size
                                                                         - Ar9 arr9 a9 a9dump _adump ar dimSize this size
                                                                                 - Ar10 a10dump ar dimSize this size
                                                                                         - arr10
                                                                                 - ct0 ac a tct ab ar this size
                                                                                         - cta a caba cadump a tcta aba ar this size
                                                                                 - ar9
                                                 - testD testC
                                                         - a112 c1138
                                                 - DLLNodeAlloc4 testna5 dlna4o testna5 testna4 nodes this size
                                         - DLList hey hi hey hi testList init TailNode HeadNode this size
                                                 - DLListClone testClone init Accum Four Three Twelve Sum Prototype Category this size
                         - Pointer this size
                                 - Integer
                         - BigNum ctof2 ftoc ctof tfib3 fibBN tbn bexpl !! ! bexp0 bexp aexp x ! qexp ftoc ctof _bassert eprint p fprint _bfprint _beprint ** ^^ pow sqrt != == > >= < <= / * -- ++ /= -= *= += - +
                 - Experimental xyxz <does <do does> do> locationPrint locationPush
                 - String hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
                 - System ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwu pwi pwdissu pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackInit warmInit init reset _include
                         - Colors alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
                         - File freadToString fexists fsize ftell fseek fread fwrite fclose fopen
                 - Debug dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState udis1x udis1 dsOn dsOff stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
                 - Control maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
                 - DObject new clone dobject
                         - DO_Experimental o12
                                 - o1
                                         - o2 ay
                                                 - o3 ott o4
                 - Lexer sp heey hey hi ofile orpfile % "
                 - List bexp3 lcRestoreStack dupList printList eval _( _lisp
                 - OpenVmTil ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
                         - Memory recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
                 - Io Error logWrite logAppend logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc space tab cr newline kbhit key emit printString
                 - Word code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
                 - Macro rdim rdi s _s tm: findAlias alias sm:
                 - Namespace usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
                 - PreProcessor ifndef ifdef undef defined include define elif if else endif !
                 - Array [ ]
                 - MemorySpace msDelete memspace
                 - Forth rpn n, 8, 4, , 2, 1, '
                 - L9 l9
                 - Test hey2 hey
                         - test2 hi
                         - test hi
                 - Lisp /| /. /\ lambda sp oPrintf lcDbOff lcDbOn ;;; lcShowLisp lcShowLispDefines lcClearDefines lcReset = :: ,@ unquoteSplicing , unquote ` quasiquote @ ' load list eval quote cdr car if* cond if condc ifc macro let set begin lambda _lambda definec define _Printf ) print _( (
         - LispTemp
         - LispDefines
Total namespaces = 160 :: Total words = 3208

Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =   3082906 : Unused =   1111398 : Allocations =    2 : Largest =  1109249 : Smallest =     2149 : AllocSize =  2097152
SessionObjectsSpace     InUse =   1255334 : Unused =    841818 : Allocations =    2 : Largest =   841739 : Smallest =       79 : AllocSize =  1048576
WordRecylingSpace       InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CompilerTempObjectSpace InUse =   7077488 : Unused =   1311120 : Allocations =    2 : Largest =  1310968 : Smallest =      152 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =       105 : Unused =   4194199 : Allocations =    2 : Largest =  4194199 : Smallest =  4194199 : AllocSize =  4194304
BufferSpace             InUse =    344195 : Unused =    704381 : Allocations =    1 : Largest =   704381 : Smallest =   704381 : AllocSize =  1048576
StringSpace             InUse =    266877 : Unused =    781699 : Allocations =    1 : Largest =   781699 : Smallest =   781699 : AllocSize =  1048576
ObjectSpace             InUse =         0 : Unused =   1048576 : Allocations =    3 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
LispSpace               InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CodeSpace               InUse =    238265 : Unused =    810311 : Allocations =    1 : Largest =   810311 : Smallest =   810311 : AllocSize =  1048576
DictionarySpace         InUse =   7714931 : Unused =    673677 : Allocations =    2 : Largest =   673311 : Smallest =      366 : AllocSize =  4194304
InternalObjectSpace     InUse =    502274 : Unused =    546302 : Allocations =    1 : Largest =   546302 : Smallest =   546302 : AllocSize =  1048576
CSLInternalSpace        InUse =    774712 : Unused =    273864 : Allocations =    1 : Largest =   273864 : Smallest =   273864 : AllocSize =  1048576
StaticSpace             InUse =       115 : Unused =      1933 : Allocations =    1 : Largest =     1933 : Smallest =     1933 : AllocSize =     2048
Data Stack              InUse =        24 : Unused =      8168
Total Accounted Mem     InUse =  21499474 : Unused =  15445006
Non-Static Mem Allocated      =  36944480
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         9
WordsAllocation               =  15322608 : 35469 x 432 bytes
Recycled-Bytes:WordCount      =    233280 : 540   x 432 bytes
InRecycling-Bytes:Words       =   4802544 : 11117 x 432 bytes

Timer [ 1 ] : elapsed time = 1.092629749 seconds at namespaces/ninit.csl : 13.22

Timer [ 2 ] : elapsed time = 2.335943251 seconds at namespaces/ninit.csl : 13.22

System Startup [ 0 ] : elapsed time = 3.594856552 seconds at <command line> : 1.3
OVT Startup : elapsed time = 3.594852474 seconds
version 0.940.501
<:

