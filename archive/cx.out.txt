[dennisj@infinity-a5 csl]$ cx

including ./init.csl at <command line> : 0.21 ...

System Startup [ 0 ] : elapsed time = 0.019006324 seconds
OVT Startup : elapsed time = 0.025078925 seconds
version 0.940.177
<: tc

including namespaces/ninit.csl at <command line> : 1.3 ...

including namespaces/test/initTest.csl at namespaces/ninit.csl : 10.23 ...

before testAll 
test nested elif 1 - correct 

including namespaces/compiler/preprocessor.csl at namespaces/test/initTest.csl : 86.41 ...
 
preprocessor test ok1
 
preprocessor test ok2
 
ppx = 2 
ppxe = 0
including namespaces/test/logic.csl at namespaces/test/initTest.csl : 86.41 ...
 1 0
 =============================
Bits.lnt <:> csl compiled word
SourceCode for Bits.lnt :> 
: lnt ( n ) n @ 7 < dup p return tos ; 
Source code file location of lnt : "namespaces/test/logic.csl" : 12.2 :: we are now at : namespaces/test/logic.csl : 13.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b034f7 -- code size = 66 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.lnt : definition = 0x00007e8de8b034f7 : disassembly at namespaces/test/logic.csl : 13.17 :
0x7e8de8b034f7    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b034fb    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b034ff    4981c608000000          add r14, 0x8                                           
 ..                           : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x7e8de8b03506    49837ff807              cmp qword [r15-0x8], 0x7                               
0x7e8de8b0350b    0f9cc0                  setl al                                                
0x7e8de8b0350e    480fb6c0                movzx rax, al                                          
0x7e8de8b03512    4983c610                add r14, 0x10                                          
0x7e8de8b03516    498906                  mov [r14], rax                                         
 ..                   : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x7e8de8b03519    498946f8                mov [r14-0x8], rax                                     
 ..               : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x7e8de8b0351d    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b03527    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..             : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x7e8de8b0352a    498b06                  mov rax, [r14]                                         
0x7e8de8b0352d    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03531    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03535    498906                  mov [r14], rax                                         
 ..  : lnt ( n ) n @ 7 < dup p return tos ;  .. 
0x7e8de8b03538    c3                      ret                                                    
Word_Disassemble : word - 'lnt' :: codeSize = 66
Word : 0x00007e8de8ce13b7 :: Compiled at : 0x00007e8de8b034f7
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 13.17 <::
 1 0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 1 0
 =============================
Bits.lnt2 <:> csl compiled word
SourceCode for Bits.lnt2 :> 
: lnt2 ( n m ) n @ m @ >= dup p return tos ; 
Source code file location of lnt2 : "namespaces/test/logic.csl" : 25.2 :: we are now at : namespaces/test/logic.csl : 26.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03706 -- code size = 76 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.lnt2 : definition = 0x00007e8de8b03706 : disassembly at namespaces/test/logic.csl : 26.18 :
0x7e8de8b03706    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0370a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0370e    4981c608000000          add r14, 0x8                                           
 ..                        : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x7e8de8b03715    498b47f0                mov rax, [r15-0x10]                                    
 ..                    : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x7e8de8b03719    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x7e8de8b0371d    483bc1                  cmp rax, rcx                                           
0x7e8de8b03720    0f9dc0                  setge al                                               
0x7e8de8b03723    480fb6c0                movzx rax, al                                          
0x7e8de8b03727    4983c610                add r14, 0x10                                          
0x7e8de8b0372b    498906                  mov [r14], rax                                         
 ..             : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x7e8de8b0372e    498946f8                mov [r14-0x8], rax                                     
 ..         : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x7e8de8b03732    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0373c    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..       : lnt2 ( n m ) n @ m @ >= dup p return tos ;  .. 
0x7e8de8b0373f    498b06                  mov rax, [r14]                                         
0x7e8de8b03742    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03746    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0374a    4983ee08                sub r14, 0x8                                           
0x7e8de8b0374e    498906                  mov [r14], rax                                         
 .. 2 ( n m ) n @ m @ >= dup p return tos ; 
0x7e8de8b03751    c3                      ret                                                    
Word_Disassemble : word - 'lnt2' :: codeSize = 76
Word : 0x00007e8de8ce9dc7 :: Compiled at : 0x00007e8de8b03706
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 26.18 <::

 0 0 1 1 0 0 0 0 1 1
 1 0 0
 =============================
Bits.tnot <:> csl compiled word
SourceCode for Bits.tnot :> 
: tnot ( n ) n @ not dup n store n @ dup p return tos ; 
Source code file location of tnot : "namespaces/test/logic.csl" : 46.2 :: we are now at : namespaces/test/logic.csl : 47.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03a44 -- code size = 101 bytes
TypeSignature : Integer -> Integer 
 -----------------------------
Word :: Bits.tnot : definition = 0x00007e8de8b03a44 : disassembly at namespaces/test/logic.csl : 47.18 :
0x7e8de8b03a44    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03a48    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03a4c    4981c608000000          add r14, 0x8                                           
 ..                          : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a53    498b47f8                mov rax, [r15-0x8]                                     
 ..                      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a57    4883f800                cmp rax, 0x0                                           
0x7e8de8b03a5b    0f94c0                  setz al                                                
0x7e8de8b03a5e    480fb6c0                movzx rax, al                                          
0x7e8de8b03a62    4983c610                add r14, 0x10                                          
0x7e8de8b03a66    498906                  mov [r14], rax                                         
0x7e8de8b03a69    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b03a6d    498d47f8                lea rax, [r15-0x8]                                     
 ..              : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a71    488bc8                  mov rcx, rax                                           
0x7e8de8b03a74    498b06                  mov rax, [r14]                                         
0x7e8de8b03a77    4983ee08                sub r14, 0x8                                           
 ..            : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a7b    488901                  mov [rcx], rax                                         
 ..      : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a7e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b03a82    4983c610                add r14, 0x10                                          
0x7e8de8b03a86    498906                  mov [r14], rax                                         
 ..  : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a89    498946f8                mov [r14-0x8], rax                                     
 : tnot ( n ) n @ not dup n store n @ dup p return tos ;  .. 
0x7e8de8b03a8d    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b03a97    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. t ( n ) n @ not dup n store n @ dup p return tos ; 
0x7e8de8b03a9a    498b06                  mov rax, [r14]                                         
0x7e8de8b03a9d    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03aa1    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03aa5    498906                  mov [r14], rax                                         
 ..  not dup n store n @ dup p return tos ; 
0x7e8de8b03aa8    c3                      ret                                                    
Word_Disassemble : word - 'tnot' :: codeSize = 101
Word : 0x00007e8de8cf5bc7 :: Compiled at : 0x00007e8de8b03a44
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 47.18 <::
 tnot_1_assert  : ok

 tnot_2_assert  : ok

 1 tnot_3_assert  : ok

 0 tnot_4_assert  : ok


 =============================
Bits.tnot2 <:> csl compiled word
SourceCode for Bits.tnot2 :> 
: tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
Source code file location of tnot2 : "namespaces/test/logic.csl" : 53.2 :: we are now at : namespaces/test/logic.csl : 54.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03aae -- code size = 98 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.tnot2 : definition = 0x00007e8de8b03aae : disassembly at namespaces/test/logic.csl : 54.19 :
0x7e8de8b03aae    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03ab2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03ab6    4981c610000000          add r14, 0x10                                          
 ..                   : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x7e8de8b03abd    498b47f0                mov rax, [r15-0x10]                                    
 ..               : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x7e8de8b03ac1    498b4ff8                mov rcx, [r15-0x8]                                     
 ..           : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x7e8de8b03ac5    480bc1                  or rax, rcx                                            
 ..         : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x7e8de8b03ac8    4883f800                cmp rax, 0x0                                           
0x7e8de8b03acc    0f94c0                  setz al                                                
0x7e8de8b03acf    480fb6c0                movzx rax, al                                          
0x7e8de8b03ad3    4983c610                add r14, 0x10                                          
0x7e8de8b03ad7    498906                  mov [r14], rax                                         
0x7e8de8b03ada    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b03ade    498d4708                lea rax, [r15+0x8]                                     
 .. : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x7e8de8b03ae2    488bc8                  mov rcx, rax                                           
0x7e8de8b03ae5    498b06                  mov rax, [r14]                                         
0x7e8de8b03ae8    4983ee08                sub r14, 0x8                                           
  : tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  .. 
0x7e8de8b03aec    488901                  mov [rcx], rax                                         
 .. ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
0x7e8de8b03aef    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b03af9    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. n m | v ) n @ m @ | not dup v store p return ( v @ ) ; 
0x7e8de8b03afc    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b03b00    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03b04    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03b08    4983ee08                sub r14, 0x8                                           
 ..  n @ m @ | not dup v store p return ( v @ ) ; 
0x7e8de8b03b0c    498906                  mov [r14], rax                                         
 ..  @ | not dup v store p return ( v @ ) ; 
0x7e8de8b03b0f    c3                      ret                                                    
Word_Disassemble : word - 'tnot2' :: codeSize = 98
Word : 0x00007e8de8cf73d7 :: Compiled at : 0x00007e8de8b03aae
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 54.19 <::
 1 0
 =============================
Bits.tnot3 <:> csl compiled word
SourceCode for Bits.tnot3 :> 
: tnot3 ( n ) n @ not dup p return tos ; 
Source code file location of tnot3 : "namespaces/test/logic.csl" : 57.2 :: we are now at : namespaces/test/logic.csl : 58.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03b15 -- code size = 69 bytes
TypeSignature : 
 -----------------------------
Word :: Bits.tnot3 : definition = 0x00007e8de8b03b15 : disassembly at namespaces/test/logic.csl : 58.19 :
0x7e8de8b03b15    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03b19    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03b1d    4981c608000000          add r14, 0x8                                           
 ..                         : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x7e8de8b03b24    498b47f8                mov rax, [r15-0x8]                                     
 ..                     : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x7e8de8b03b28    4883f800                cmp rax, 0x0                                           
0x7e8de8b03b2c    0f94c0                  setz al                                                
0x7e8de8b03b2f    480fb6c0                movzx rax, al                                          
0x7e8de8b03b33    4983c610                add r14, 0x10                                          
0x7e8de8b03b37    498906                  mov [r14], rax                                         
 ..                 : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x7e8de8b03b3a    498946f8                mov [r14-0x8], rax                                     
 ..             : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x7e8de8b03b3e    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b03b48    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..           : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x7e8de8b03b4b    498b06                  mov rax, [r14]                                         
0x7e8de8b03b4e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03b52    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03b56    498906                  mov [r14], rax                                         
   : tnot3 ( n ) n @ not dup p return tos ;  .. 
0x7e8de8b03b59    c3                      ret                                                    
Word_Disassemble : word - 'tnot3' :: codeSize = 69
Word : 0x00007e8de8cf8f47 :: Compiled at : 0x00007e8de8b03b15
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 58.19 <::
 0
 =============================
Bits.tAnd <:> csl compiled word
SourceCode for Bits.tAnd :> 
: tAnd ( n m ) n @ m @ && dup p return tos ; 
Source code file location of tAnd : "namespaces/test/logic.csl" : 61.2 :: we are now at : namespaces/test/logic.csl : 62.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03b5f -- code size = 121 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Bits.tAnd : definition = 0x00007e8de8b03b5f : disassembly at namespaces/test/logic.csl : 62.18 :
0x7e8de8b03b5f    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03b63    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03b67    4981c608000000          add r14, 0x8                                           
 ..                        : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x7e8de8b03b6e    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b03b72    4983c608                add r14, 0x8                                           
0x7e8de8b03b76    498906                  mov [r14], rax                                         
 ..                    : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x7e8de8b03b79    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b03b7d    4983c608                add r14, 0x8                                           
0x7e8de8b03b81    498906                  mov [r14], rax                                         
 ..                : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x7e8de8b03b84    498bc6                  mov rax, r14                                           
0x7e8de8b03b87    4983ee08                sub r14, 0x8                                           
0x7e8de8b03b8b    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b03b8f    7410                    jz 0xe8b03ba1                 < Bits.tAnd+66 >
0x7e8de8b03b91    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b03b96    7409                    jz 0xe8b03ba1                 < Bits.tAnd+66 >
0x7e8de8b03b98    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b03b9f    eb07                    jmp 0x7e8de8b03ba8            < Bits.tAnd+73 >
0x7e8de8b03ba1    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b03ba8    0f8400000000            jz 0x7e8de8b03bae             < Bits.tAnd+79 >
 ..             : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x7e8de8b03bae    498b06                  mov rax, [r14]                                         
0x7e8de8b03bb1    4983c608                add r14, 0x8                                           
0x7e8de8b03bb5    498906                  mov [r14], rax                                         
 ..         : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x7e8de8b03bb8    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b03bc2    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..       : tAnd ( n m ) n @ m @ && dup p return tos ;  .. 
0x7e8de8b03bc5    498b06                  mov rax, [r14]                                         
0x7e8de8b03bc8    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03bcc    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03bd0    4983ee08                sub r14, 0x8                                           
0x7e8de8b03bd4    498906                  mov [r14], rax                                         
 .. d ( n m ) n @ m @ && dup p return tos ; 
0x7e8de8b03bd7    c3                      ret                                                    
Word_Disassemble : word - 'tAnd' :: codeSize = 121
Word : 0x00007e8de8cfa097 :: Compiled at : 0x00007e8de8b03b5f
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 62.18 <::
 0 1 0  : ok

 1 1 1  : ok

 0 0 0  : ok

 0 0 1  : ok


 =============================
Bits.tNotAnd <:> csl compiled word
SourceCode for Bits.tNotAnd :> 
: tNotAnd ( n m ) n @ m @ not && dup p return tos ; 
Source code file location of tNotAnd : "namespaces/test/logic.csl" : 68.2 :: we are now at : namespaces/test/logic.csl : 69.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03bdd -- code size = 132 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Bits.tNotAnd : definition = 0x00007e8de8b03bdd : disassembly at namespaces/test/logic.csl : 69.21 :
0x7e8de8b03bdd    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03be1    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03be5    4981c608000000          add r14, 0x8                                           
 ..                     : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03bec    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b03bf0    4983c608                add r14, 0x8                                           
0x7e8de8b03bf4    498906                  mov [r14], rax                                         
 ..                 : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03bf7    498b47f8                mov rax, [r15-0x8]                                     
 ..             : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03bfb    4883f800                cmp rax, 0x0                                           
0x7e8de8b03bff    0f94c0                  setz al                                                
0x7e8de8b03c02    480fb6c0                movzx rax, al                                          
0x7e8de8b03c06    4983c608                add r14, 0x8                                           
0x7e8de8b03c0a    498906                  mov [r14], rax                                         
 ..         : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03c0d    498bc6                  mov rax, r14                                           
0x7e8de8b03c10    4983ee08                sub r14, 0x8                                           
0x7e8de8b03c14    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b03c18    7410                    jz 0xe8b03c2a                 < Bits.tNotAnd+77 >
0x7e8de8b03c1a    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b03c1f    7409                    jz 0xe8b03c2a                 < Bits.tNotAnd+77 >
0x7e8de8b03c21    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b03c28    eb07                    jmp 0x7e8de8b03c31            < Bits.tNotAnd+84 >
0x7e8de8b03c2a    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b03c31    0f8400000000            jz 0x7e8de8b03c37             < Bits.tNotAnd+90 >
 ..      : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03c37    498b06                  mov rax, [r14]                                         
0x7e8de8b03c3a    4983c608                add r14, 0x8                                           
0x7e8de8b03c3e    498906                  mov [r14], rax                                         
 ..  : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03c41    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b03c4b    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
   : tNotAnd ( n m ) n @ m @ not && dup p return tos ;  .. 
0x7e8de8b03c4e    498b06                  mov rax, [r14]                                         
0x7e8de8b03c51    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03c55    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03c59    4983ee08                sub r14, 0x8                                           
0x7e8de8b03c5d    498906                  mov [r14], rax                                         
 .. n m ) n @ m @ not && dup p return tos ; 
0x7e8de8b03c60    c3                      ret                                                    
Word_Disassemble : word - 'tNotAnd' :: codeSize = 132
Word : 0x00007e8de8cfb547 :: Compiled at : 0x00007e8de8b03bdd
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 69.21 <::
 1 tNotAnd1 1 0  : ok

 0 tNotAnd2 1 1  : ok

 0 tNotAnd3 0 0  : ok

 0 tNotAnd4 0 1  : ok


 0x0000000100000000  >  0x00000000ffffffff 1
DataStack at : namespaces/test/logic.csl : 77.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 0x00000000ffffffff  >  0x0000000100000000 0
 =============================
Logic.nt <:> csl compiled word
SourceCode for Logic.nt :> 
: nt ( n ) n @ ! ! ! return tos ; 
Source code file location of nt : "namespaces/test/logic.csl" : 80.2 :: we are now at : namespaces/test/logic.csl : 83.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03d1c -- code size = 42 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.nt : definition = 0x00007e8de8b03d1c : disassembly at namespaces/test/logic.csl : 83.15 :
0x7e8de8b03d1c    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03d20    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03d24    4981c608000000          add r14, 0x8                                           
 ..                            : nt ( n ) n @ ! ! ! return tos ;  .. 
0x7e8de8b03d2b    498b47f8                mov rax, [r15-0x8]                                     
 ..                        : nt ( n ) n @ ! ! ! return tos ;  .. 
0x7e8de8b03d2f    4883f800                cmp rax, 0x0                                           
0x7e8de8b03d33    0f94c0                  setz al                                                
0x7e8de8b03d36    480fb6c0                movzx rax, al                                          
 ..                    : nt ( n ) n @ ! ! ! return tos ;  .. 
0x7e8de8b03d3a    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03d3e    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03d42    498906                  mov [r14], rax                                         
 ..       : nt ( n ) n @ ! ! ! return tos ;  .. 
0x7e8de8b03d45    c3                      ret                                                    
Word_Disassemble : word - 'nt' :: codeSize = 42
Word : 0x00007e8de8cfedd7 :: Compiled at : 0x00007e8de8b03d1c
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 83.15 <::
 1 0 1 0 0 1 0 1 
 1 0 1 0 0 1 0 1 : above line should show
 1 0 1 0 0 1 0 1 
 1 0 1 0 0 1 0 1 : above line should show
 =============================
C_Syntax.l001 <:> csl compiled word
SourceCode for C_Syntax.l001 :> 
void l001 ( a b c d ) { if ( a || b || c || d ) return 1 ; else return 0 ; } 
Source code file location of l001 : "namespaces/test/logic.csl" : 107.10 :: we are now at : namespaces/test/logic.csl : 112.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03f05 -- code size = 104 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l001 : definition = 0x00007e8de8b03f05 : disassembly at namespaces/test/logic.csl : 112.9 :
0x7e8de8b03f05    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03f09    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03f0d    4981c608000000          add r14, 0x8                                           
 ..     void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b03f14    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b03f18    4883f800                cmp rax, 0x0                                           
0x7e8de8b03f1c    0f852a000000            jnz 0x7e8de8b03f4c            < C_Syntax.l001+71 >
   void l001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b03f22    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b03f26    4883f800                cmp rax, 0x0                                           
0x7e8de8b03f2a    0f851c000000            jnz 0x7e8de8b03f4c            < C_Syntax.l001+71 >
 .. 001 ( a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03f30    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b03f34    4883f800                cmp rax, 0x0                                           
0x7e8de8b03f38    0f850e000000            jnz 0x7e8de8b03f4c            < C_Syntax.l001+71 >
 ..  a b c d )  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03f3e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b03f42    4883f800                cmp rax, 0x0                                           
0x7e8de8b03f46    0f840a000000            jz 0x7e8de8b03f56             < C_Syntax.l001+81 >
 ..  {     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03f4c    b801000000              mov eax, 0x1                                           
 ..     if ( a || b || c || d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03f51    e907000000              jmp 0x7e8de8b03f5d            < C_Syntax.l001+88 >
0x7e8de8b03f56    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b03f5d    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b03f61    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b03f65    4983ee18                sub r14, 0x18                                          
 .. c || d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03f69    498906                  mov [r14], rax                                         
 .. d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03f6c    c3                      ret                                                    
Word_Disassemble : word - 'l001' :: codeSize = 104
Word : 0x00007e8de8d02e67 :: Compiled at : 0x00007e8de8b03f05
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 112.9 <::

 =============================
C_Syntax.l0010 <:> csl compiled word
SourceCode for C_Syntax.l0010 :> 
void l0010 ( a b c d ) { if ( a && b && c && d ) return 1 ; else return 0 ; } 
Source code file location of l0010 : "namespaces/test/logic.csl" : 123.11 :: we are now at : namespaces/test/logic.csl : 128.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b03f72 -- code size = 230 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0010 : definition = 0x00007e8de8b03f72 : disassembly at namespaces/test/logic.csl : 128.10 :
0x7e8de8b03f72    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b03f76    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b03f7a    4981c608000000          add r14, 0x8                                           
 ..    void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b03f81    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b03f85    4883f800                cmp rax, 0x0                                           
0x7e8de8b03f89    0f84b2000000            jz 0x7e8de8b04041             < C_Syntax.l0010+207 >
  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b03f8f    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b03f93    4883f800                cmp rax, 0x0                                           
0x7e8de8b03f97    0f84a4000000            jz 0x7e8de8b04041             < C_Syntax.l0010+207 >
 ..  void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b03f9d    498bc6                  mov rax, r14                                           
0x7e8de8b03fa0    4983ee08                sub r14, 0x8                                           
0x7e8de8b03fa4    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b03fa8    7410                    jz 0xe8b03fba                 < C_Syntax.l0010+72 >
0x7e8de8b03faa    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b03faf    7409                    jz 0xe8b03fba                 < C_Syntax.l0010+72 >
0x7e8de8b03fb1    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b03fb8    eb07                    jmp 0x7e8de8b03fc1            < C_Syntax.l0010+79 >
0x7e8de8b03fba    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b03fc1    747e                    jz 0xe8b04041                 < C_Syntax.l0010+207 >
0x7e8de8b03fc3    0f1f4000                nop [rax]                                              
 .. 010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03fc7    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b03fcb    4883f800                cmp rax, 0x0                                           
0x7e8de8b03fcf    7470                    jz 0xe8b04041                 < C_Syntax.l0010+207 >
0x7e8de8b03fd1    0f1f4000                nop [rax]                                              
void l0010 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b03fd5    498bc6                  mov rax, r14                                           
0x7e8de8b03fd8    4983ee08                sub r14, 0x8                                           
0x7e8de8b03fdc    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b03fe0    7410                    jz 0xe8b03ff2                 < C_Syntax.l0010+128 >
0x7e8de8b03fe2    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b03fe7    7409                    jz 0xe8b03ff2                 < C_Syntax.l0010+128 >
0x7e8de8b03fe9    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b03ff0    eb07                    jmp 0x7e8de8b03ff9            < C_Syntax.l0010+135 >
0x7e8de8b03ff2    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b03ff9    7446                    jz 0xe8b04041                 < C_Syntax.l0010+207 >
0x7e8de8b03ffb    0f1f4000                nop [rax]                                              
 ..  a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x7e8de8b03fff    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04003    4883f800                cmp rax, 0x0                                           
0x7e8de8b04007    7438                    jz 0xe8b04041                 < C_Syntax.l0010+207 >
0x7e8de8b04009    0f1f4000                nop [r8]                                               
 .. 0 ( a b c d )  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x7e8de8b0400d    498bc6                  mov rax, r14                                           
0x7e8de8b04010    4983ee08                sub r14, 0x8                                           
0x7e8de8b04014    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b04018    7410                    jz 0xe8b0402a                 < C_Syntax.l0010+184 >
0x7e8de8b0401a    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b0401f    7409                    jz 0xe8b0402a                 < C_Syntax.l0010+184 >
0x7e8de8b04021    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b04028    eb07                    jmp 0x7e8de8b04031            < C_Syntax.l0010+191 >
0x7e8de8b0402a    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b04031    740e                    jz 0xe8b04041                 < C_Syntax.l0010+207 >
0x7e8de8b04033    0f1f4000                nop [rax]                                              
 ..  {     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x7e8de8b04037    b801000000              mov eax, 0x1                                           
 ..     if ( a && b && c && d ) return 1  ;      else return 0 ;  } 
0x7e8de8b0403c    e907000000              jmp 0x7e8de8b04048            < C_Syntax.l0010+214 >
0x7e8de8b04041    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b04048    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0404c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b04050    4983ee18                sub r14, 0x18                                          
 .. c && d ) return 1  ;      else return 0 ;  } 
0x7e8de8b04054    498906                  mov [r14], rax                                         
 .. d ) return 1  ;      else return 0 ;  } 
0x7e8de8b04057    c3                      ret                                                    
Word_Disassemble : word - 'l0010' :: codeSize = 230
Word : 0x00007e8de8d04ee7 :: Compiled at : 0x00007e8de8b03f72
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 128.10 <::

 =============================
C_Syntax.l0041 <:> csl compiled word
SourceCode for C_Syntax.l0041 :> 
void l0041 ( a b c ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1 ; else return 0 ; } 
Source code file location of l0041 : "namespaces/test/logic.csl" : 187.11 :: we are now at : namespaces/test/logic.csl : 192.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0421d -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0041 : definition = 0x00007e8de8b0421d : disassembly at namespaces/test/logic.csl : 192.10 :
0x7e8de8b0421d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b04221    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b04225    4981c608000000          add r14, 0x8                                           
 ..    void l0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  }  .. 
0x7e8de8b0422c    49837fe801              cmp qword [r15-0x18], 0x1                              
0x7e8de8b04231    0f8535000000            jnz 0x7e8de8b0426c            < C_Syntax.l0041+79 >
 .. ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b04237    49837ff001              cmp qword [r15-0x10], 0x1                              
0x7e8de8b0423c    0f8435000000            jz 0x7e8de8b04277             < C_Syntax.l0041+90 >
 .. 0041 ( a b c )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b04242    498bc6                  mov rax, r14                                           
0x7e8de8b04245    4983ee08                sub r14, 0x8                                           
0x7e8de8b04249    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b0424d    7410                    jz 0xe8b0425f                 < C_Syntax.l0041+66 >
0x7e8de8b0424f    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b04254    7409                    jz 0xe8b0425f                 < C_Syntax.l0041+66 >
0x7e8de8b04256    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b0425d    eb07                    jmp 0x7e8de8b04266            < C_Syntax.l0041+73 >
0x7e8de8b0425f    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b04266    0f8400000000            jz 0x7e8de8b0426c             < C_Syntax.l0041+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b0426c    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b04271    0f850a000000            jnz 0x7e8de8b04281            < C_Syntax.l0041+100 >
 ..  && ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b04277    b801000000              mov eax, 0x1                                           
 ..  ( b == 1 ) || ( c == 1 ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b0427c    e907000000              jmp 0x7e8de8b04288            < C_Syntax.l0041+107 >
0x7e8de8b04281    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b04288    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0428c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b04290    4983ee10                sub r14, 0x10                                          
 .. == 1 ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b04294    498906                  mov [r14], rax                                         
 .. ) ) return 1  ;      else return 0 ;  } 
0x7e8de8b04297    c3                      ret                                                    
Word_Disassemble : word - 'l0041' :: codeSize = 123
Word : 0x00007e8de8d11b27 :: Compiled at : 0x00007e8de8b0421d
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 192.10 <::

 =============================
C_Syntax.l0030 <:> csl compiled word
SourceCode for C_Syntax.l0030 :> 
void l0030 ( a b c d ) { if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ; else return 0 ; } 
Source code file location of l0030 : "namespaces/test/logic.csl" : 287.11 :: we are now at : namespaces/test/logic.csl : 292.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0455d -- code size = 176 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.l0030 : definition = 0x00007e8de8b0455d : disassembly at namespaces/test/logic.csl : 292.10 :
0x7e8de8b0455d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b04561    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b04565    4981c608000000          add r14, 0x8                                           
 ..  void l0030 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  }  .. 
0x7e8de8b0456c    49837fe001              cmp qword [r15-0x20], 0x1                              
0x7e8de8b04571    0f8535000000            jnz 0x7e8de8b045ac            < C_Syntax.l0030+79 >
 .. a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b04577    49837fe801              cmp qword [r15-0x18], 0x1                              
0x7e8de8b0457c    0f8435000000            jz 0x7e8de8b045b7             < C_Syntax.l0030+90 >
 .. 30 ( a b c d )  {     if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b04582    498bc6                  mov rax, r14                                           
0x7e8de8b04585    4983ee08                sub r14, 0x8                                           
0x7e8de8b04589    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b0458d    7410                    jz 0xe8b0459f                 < C_Syntax.l0030+66 >
0x7e8de8b0458f    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b04594    7409                    jz 0xe8b0459f                 < C_Syntax.l0030+66 >
0x7e8de8b04596    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b0459d    eb07                    jmp 0x7e8de8b045a6            < C_Syntax.l0030+73 >
0x7e8de8b0459f    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b045a6    0f8400000000            jz 0x7e8de8b045ac             < C_Syntax.l0030+79 >
 ..    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b045ac    49837ff001              cmp qword [r15-0x10], 0x1                              
0x7e8de8b045b1    0f853f000000            jnz 0x7e8de8b045f6            < C_Syntax.l0030+153 >
 ..  1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b045b7    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b045bc    0f8534000000            jnz 0x7e8de8b045f6            < C_Syntax.l0030+153 >
 ..  a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b045c2    498bc6                  mov rax, r14                                           
0x7e8de8b045c5    4983ee08                sub r14, 0x8                                           
0x7e8de8b045c9    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b045cd    7410                    jz 0xe8b045df                 < C_Syntax.l0030+130 >
0x7e8de8b045cf    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b045d4    7409                    jz 0xe8b045df                 < C_Syntax.l0030+130 >
0x7e8de8b045d6    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b045dd    eb07                    jmp 0x7e8de8b045e6            < C_Syntax.l0030+137 >
0x7e8de8b045df    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b045e6    0f840a000000            jz 0x7e8de8b045f6             < C_Syntax.l0030+153 >
 ..  || ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b045ec    b801000000              mov eax, 0x1                                           
 .. | ( c == 1 ) && ( d == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b045f1    e907000000              jmp 0x7e8de8b045fd            < C_Syntax.l0030+160 >
0x7e8de8b045f6    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b045fd    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b04601    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b04605    4983ee18                sub r14, 0x18                                          
 ..  == 1 ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b04609    498906                  mov [r14], rax                                         
 ..  ) ) return 1 ;      else return 0 ;  } 
0x7e8de8b0460c    c3                      ret                                                    
Word_Disassemble : word - 'l0030' :: codeSize = 176
Word : 0x00007e8de8d26be7 :: Compiled at : 0x00007e8de8b0455d
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 292.10 <::

 =============================
Logic.l0031 <:> csl compiled word
SourceCode for Logic.l0031 :> 
: l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1 } { return 0 } ifElse ; 
Source code file location of l0031 : "namespaces/test/logic.csl" : 310.2 :: we are now at : namespaces/test/logic.csl : 311.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b04612 -- code size = 222 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.l0031 : definition = 0x00007e8de8b04612 : disassembly at namespaces/test/logic.csl : 311.10 :
0x7e8de8b04612    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b04616    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0461a    4981c608000000          add r14, 0x8                                           
 ..                 : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x7e8de8b04621    49837fe001              cmp qword [r15-0x20], 0x1                              
0x7e8de8b04626    0f94c0                  setz al                                                
0x7e8de8b04629    480fb6c0                movzx rax, al                                          
0x7e8de8b0462d    4983c608                add r14, 0x8                                           
 ..             : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x7e8de8b04631    498906                  mov [r14], rax                                         
 ..        : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x7e8de8b04634    49837fe801              cmp qword [r15-0x18], 0x1                              
0x7e8de8b04639    0f94c0                  setz al                                                
0x7e8de8b0463c    480fb6c0                movzx rax, al                                          
0x7e8de8b04640    4983c608                add r14, 0x8                                           
 ..    : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x7e8de8b04644    498906                  mov [r14], rax                                         
  : l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ;  .. 
0x7e8de8b04647    498bc6                  mov rax, r14                                           
0x7e8de8b0464a    4983ee08                sub r14, 0x8                                           
0x7e8de8b0464e    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b04652    7410                    jz 0xe8b04664                 < Logic.l0031+82 >
0x7e8de8b04654    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b04659    7409                    jz 0xe8b04664                 < Logic.l0031+82 >
0x7e8de8b0465b    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b04662    eb07                    jmp 0x7e8de8b0466b            < Logic.l0031+89 >
0x7e8de8b04664    49c70600000000          mov qword [r14], 0x0                                   
 .. 31 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b0466b    49837ff001              cmp qword [r15-0x10], 0x1                              
0x7e8de8b04670    0f94c0                  setz al                                                
0x7e8de8b04673    480fb6c0                movzx rax, al                                          
 ..  b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b04677    488bc8                  mov rcx, rax                                           
0x7e8de8b0467a    498b06                  mov rax, [r14]                                         
0x7e8de8b0467d    4983ee08                sub r14, 0x8                                           
 .. c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b04681    480bc1                  or rax, rcx                                            
0x7e8de8b04684    0f95c0                  setnz al                                               
0x7e8de8b04687    480fb6c0                movzx rax, al                                          
0x7e8de8b0468b    4983c608                add r14, 0x8                                           
0x7e8de8b0468f    498906                  mov [r14], rax                                         
 ..  ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b04692    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b04697    0f94c0                  setz al                                                
0x7e8de8b0469a    480fb6c0                movzx rax, al                                          
0x7e8de8b0469e    4983c608                add r14, 0x8                                           
 ..  a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046a2    498906                  mov [r14], rax                                         
 .. 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046a5    498bc6                  mov rax, r14                                           
0x7e8de8b046a8    4983ee08                sub r14, 0x8                                           
0x7e8de8b046ac    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b046b0    7410                    jz 0xe8b046c2                 < Logic.l0031+176 >
0x7e8de8b046b2    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b046b7    7409                    jz 0xe8b046c2                 < Logic.l0031+176 >
0x7e8de8b046b9    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b046c0    eb07                    jmp 0x7e8de8b046c9            < Logic.l0031+183 >
0x7e8de8b046c2    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b046c9    0f840a000000            jz 0x7e8de8b046d9             < Logic.l0031+199 >
 .. && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046cf    b801000000              mov eax, 0x1                                           
 .. c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046d4    e907000000              jmp 0x7e8de8b046e0            < Logic.l0031+206 >
 .. 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046d9    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b046e0    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b046e4    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b046e8    4983ee18                sub r14, 0x18                                          
 ..  d @ 1 == && } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046ec    498906                  mov [r14], rax                                         
 ..  } { return 1  } { return 0  } ifElse ; 
0x7e8de8b046ef    c3                      ret                                                    
Word_Disassemble : word - 'l0031' :: codeSize = 222
Word : 0x00007e8de8d2a767 :: Compiled at : 0x00007e8de8b04612
 =============================
::> 'wdiss' was called at namespaces/test/logic.csl 311.10 <::

n = 1
n = 2
n = 3
n = 4
n = 5
n = 6 
pbAssert : ok

including namespaces/test/namespace.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Test.hey <:> csl compiled word
SourceCode for Test.hey :> 
: hey test hi test2.hi hi ; 
Source code file location of hey : "namespaces/test/namespace.csl" : 20.2 :: we are now at : namespaces/test/namespace.csl : 22.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0490c -- code size = 40 bytes
TypeSignature : 
 -----------------------------
Word :: Test.hey : definition = 0x00007e8de8b0490c : disassembly at namespaces/test/namespace.csl : 22.8 :
 ..                            : hey test hi test2.hi hi ;  .. 
0x7e8de8b0490c    49bbb048b0e88d7e0000    mov r11, 0x7e8de8b048b0                                
0x7e8de8b04916    49ffd3                  call r11                      < test.hi : 0x00007e8de8b048b0 >
 ..                   : hey test hi test2.hi hi ;  .. 
0x7e8de8b04919    49bbde48b0e88d7e0000    mov r11, 0x7e8de8b048de                                
0x7e8de8b04923    49ffd3                  call r11                      < test2.hi : 0x00007e8de8b048de >
 ..                : hey test hi test2.hi hi ;  .. 
0x7e8de8b04926    49bbb048b0e88d7e0000    mov r11, 0x7e8de8b048b0                                
0x7e8de8b04930    49ffd3                  call r11                      < test.hi : 0x00007e8de8b048b0 >
 ..             : hey test hi test2.hi hi ;  .. 
0x7e8de8b04933    c3                      ret                                                    
Word_Disassemble : word - 'hey' :: codeSize = 40
Word : 0x00007e8de8d386a7 :: Compiled at : 0x00007e8de8b0490c
 =============================
::> 'wdiss' was called at namespaces/test/namespace.csl 22.8 <::
 3 4 3 3 7 7 
pbAssert : ok
 
above line should show : 3 4 3 3 7 7
 3 4 3 3 7 7 
pbAssert : ok
 
above line should show : 3 4 3 3 7 7
including namespaces/test/bigNum.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 16.2 :: we are now at : namespaces/test/bigNum.csl : 17.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b04999 -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x00007e8de8b04999 : disassembly at namespaces/test/bigNum.csl : 17.22 :
 ..                           : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x7e8de8b04999    498b3e                  mov rdi, [r14]                                         
 .. : factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x7e8de8b0499c    be01000000              mov esi, 0x1                                           
 .. l ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b049a1    4883ff01                cmp rdi, 0x1                                           
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b049a5    7e11                    jle 0xe8b049b8                < C.factorial+31 >
0x7e8de8b049a7    0f1f4000                nop [rax]                                              
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b049ab    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b049af    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b049b2    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b049b6    7ff3                    jg 0xe8b049ab                 < C.factorial+18 >
 .. n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b049b8    498936                  mov [r14], rsi                                         
 .. c store n -- } while return ( rec @ ) ; 
0x7e8de8b049bb    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 35
Word : 0x00007e8de8d39ae7 :: Compiled at : 0x00007e8de8b04999
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 17.22 <::
 5040 factorial  : ok

 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 25.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b049c1 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x00007e8de8b049c1 : disassembly at namespaces/test/bigNum.csl : 25.14 :
0x7e8de8b049c1    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b049c5    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b049c9    4981c610000000          add r14, 0x10                                          
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  .. 
0x7e8de8b049d0    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049d8    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049dd    7e1f                    jle 0xe8b049fe                < C.factorial+61 >
0x7e8de8b049df    0f1f4000                nop [rax]                                              
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049e3    498b47f8                mov rax, [r15-0x8]                                     
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049e7    498b4f08                mov rcx, [r15+0x8]                                     
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049eb    480fafc1                imul rax, rcx                                          
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049ef    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049f3    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049f7    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b049fc    7fe5                    jg 0xe8b049e3                 < C.factorial+34 >
 .. @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049fe    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b04a02    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b04a06    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * fac store n -- } while      return fac @ ; 
0x7e8de8b04a0a    498906                  mov [r14], rax                                         
 ..  store n -- } while      return fac @ ; 
0x7e8de8b04a0d    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 77
Word : 0x00007e8de8d3c737 :: Compiled at : 0x00007e8de8b049c1
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 25.14 <::
 5040 factorial  : ok


 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( n | fac ) fac 1 = { n @ 1 > } { n @ fac @ * fac store n -- } while return fac @ ; 
Source code file location of factorial : "namespaces/test/bigNum.csl" : 19.2 :: we are now at : namespaces/test/bigNum.csl : 40.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b049c1 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x00007e8de8b049c1 : disassembly at namespaces/test/bigNum.csl : 40.14 :
0x7e8de8b049c1    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b049c5    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b049c9    4981c610000000          add r14, 0x10                                          
 ..   : factorial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ;  .. 
0x7e8de8b049d0    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. rial ( n  | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049d8    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049dd    7e1f                    jle 0xe8b049fe                < C.factorial+61 >
0x7e8de8b049df    0f1f4000                nop [rax]                                              
 .. fac )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049e3    498b47f8                mov rax, [r15-0x8]                                     
 .. )      fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049e7    498b4f08                mov rcx, [r15+0x8]                                     
 ..  fac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049eb    480fafc1                imul rax, rcx                                          
 .. ac 1 =      { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049ef    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049f3    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049f7    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b049fc    7fe5                    jg 0xe8b049e3                 < C.factorial+34 >
 .. @ fac @ * fac store n -- } while      return fac @ ; 
0x7e8de8b049fe    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b04a02    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b04a06    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * fac store n -- } while      return fac @ ; 
0x7e8de8b04a0a    498906                  mov [r14], rax                                         
 ..  store n -- } while      return fac @ ; 
0x7e8de8b04a0d    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 77
Word : 0x00007e8de8d3c737 :: Compiled at : 0x00007e8de8b049c1
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 40.14 <::
 5040 5040 5040
 =============================
BigNum.qexp <:> csl compiled word
SourceCode for BigNum.qexp :> 
: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ; 
Source code file location of qexp : "namespaces/test/bigNum.csl" : 67.2 :: we are now at : namespaces/test/bigNum.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b04ac6 -- code size = 155 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.qexp : definition = 0x00007e8de8b04ac6 : disassembly at namespaces/test/bigNum.csl : 68.17 :
 ..                              : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04ac6    498b06                  mov rax, [r14]                                         
0x7e8de8b04ac9    4983c608                add r14, 0x8                                           
0x7e8de8b04acd    498906                  mov [r14], rax                                         
 ..                          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04ad0    48b8c8d28fe88d7e0000    mov rax, 0x7e8de88fd2c8                                
0x7e8de8b04ada    4983c608                add r14, 0x8                                           
0x7e8de8b04ade    498906                  mov [r14], rax                                         
 ..                        : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04ae1    49ba102c2f3f345b0000    mov r10, 0x5b343f2f2c10                                
0x7e8de8b04aeb    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04af5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..                     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04af8    498b06                  mov rax, [r14]                                         
0x7e8de8b04afb    4983ee08                sub r14, 0x8                                           
0x7e8de8b04aff    4883f800                cmp rax, 0x0                                           
0x7e8de8b04b03    7446                    jz 0xe8b04b4b                 < BigNum.qexp+133 >
0x7e8de8b04b05    0f1f4000                nop [rax]                                              
 ..                 : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04b09    498b06                  mov rax, [r14]                                         
0x7e8de8b04b0c    4983c608                add r14, 0x8                                           
0x7e8de8b04b10    498906                  mov [r14], rax                                         
 ..             : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04b13    49ba90292f3f345b0000    mov r10, 0x5b343f2f2990                                
0x7e8de8b04b1d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04b27    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..          : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04b2a    e897ffffff              call 0x7e8de8b04ac6           < BigNum.qexp : 0x00007e8de8b04ac6 >
 ..     : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04b2f    49baf0232f3f345b0000    mov r10, 0x5b343f2f23f0                                
0x7e8de8b04b39    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04b43    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04b46    e915000000              jmp 0x7e8de8b04b60            < BigNum.qexp+154 >
  : qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;  .. 
0x7e8de8b04b4b    4983ee08                sub r14, 0x8                                           
 .. { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ; 
0x7e8de8b04b4f    48b8e8d28fe88d7e0000    mov rax, 0x7e8de88fd2e8                                
0x7e8de8b04b59    4983c608                add r14, 0x8                                           
0x7e8de8b04b5d    498906                  mov [r14], rax                                         
 .. } { dup -- qexp * } { drop 1 } ifElse ; 
0x7e8de8b04b60    c3                      ret                                                    
Word_Disassemble : word - 'qexp' :: codeSize = 155
Word : 0x00007e8de8d44c27 :: Compiled at : 0x00007e8de8b04ac6
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 68.17 <::
  5040.00000000000000000000000000000000
 3 ! =   6.00000000000000000000000000000000

 64 ! =   126886932185884165437806897585122925290119029064705209778508545103477590511637067401789440.00000000000000000000000000000000

 1000 ! =   402387260077093317429838470612651212102966544163507701660266720704119769806989908398209100071577186893068783090923128165735185588027950353406889129247368414891358045299136715953285063420682021387062794693734409198431464246127206235813045990002520274575909913104326478290225140523401539128692178502019758932379457660249046286531112392122380536653533830469747019332630736468271962539511539517441084091548395205048568212151444266888000138311891331566327132041056785317671646218089496261058757458787888541256427910203949128089206098055125528721518540745206161392721407919025351918548714416743327782559176825452026920939896650865615375932384088669573776686670230120401967406703221961478508625793738568876894309533382821706462209404383271115048542505623589393244859172067791463260443310322632277086216651948161974359681932191356240096436367728220552696578891140360197109166205168814488843752507533608852420430013930971847404190565644080893716664167484606779509284725356307607453587140866090513556602389786314751645178165892536096487015707711106075548237758750720237969870741884999152710615300248006635156934216386533604180800310044427576766526698205875054102420138835953783455601875460666959726091571753923250888678519341775500944897553109652505576219868712943936816004071499019660567823510797715276436660145634137500784272753784426136757887964608313021469311145437608977653284416534488769657576551428116889055034143916030868893389979589311091787747753219895109769658109225123470666446036735269784453370721503321062189796734101265733985144495303980387714235857934638061903831020065022291748914637789230739688113987278630835326137898889409963697611934221880018811713177314813564661145933534317386414684061553856935609663369047123517526541585122825292881833314108423140887719392737182402316020908137071516792711706047934013431336843979924451761308238654898682984005419308645871979362328241353332225797576735874429116813731278034586920918899118608957379765314107649804799427092368500214215026155655045463410885162072371026890934825997956670061525624894885363999426927042531844766438019218864096423481135872477323129779559975108350645074636085739110547195349803925936614194372873277654120733612780634323002524104511888215344901671044835044792618211134128152728410000993830277064175810066870964517723058282768208805399871089529259410156036114796318882403031559180723928162345304700421054310769024829129647665165341148171035020178261641554401108640147151436811311148320263879332249366165087443125790648495729573323524293680134965188784846657625841212990509177684364910061642842112.00000000000000000000000000000000

 =============================
BigNum.aexp <:> csl compiled word
SourceCode for BigNum.aexp :> 
: aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
Source code file location of aexp : "namespaces/test/bigNum.csl" : 77.2 :: we are now at : namespaces/test/bigNum.csl : 78.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b04b75 -- code size = 155 bytes
TypeSignature : BigNum -> BigNum 
 -----------------------------
Word :: BigNum.aexp : definition = 0x00007e8de8b04b75 : disassembly at namespaces/test/bigNum.csl : 78.17 :
 ..                   : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04b75    498b06                  mov rax, [r14]                                         
0x7e8de8b04b78    4983c608                add r14, 0x8                                           
0x7e8de8b04b7c    498906                  mov [r14], rax                                         
 ..               : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04b7f    48b808d38fe88d7e0000    mov rax, 0x7e8de88fd308                                
0x7e8de8b04b89    4983c608                add r14, 0x8                                           
0x7e8de8b04b8d    498906                  mov [r14], rax                                         
 ..             : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04b90    49bab02b2f3f345b0000    mov r10, 0x5b343f2f2bb0                                
0x7e8de8b04b9a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04ba4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..          : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04ba7    498b06                  mov rax, [r14]                                         
0x7e8de8b04baa    4983ee08                sub r14, 0x8                                           
0x7e8de8b04bae    4883f800                cmp rax, 0x0                                           
0x7e8de8b04bb2    741e                    jz 0xe8b04bd2                 < BigNum.aexp+93 >
0x7e8de8b04bb4    0f1f4000                nop [rax]                                              
 ..      : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04bb8    4983ee08                sub r14, 0x8                                           
 .. : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04bbc    48b828d38fe88d7e0000    mov rax, 0x7e8de88fd328                                
0x7e8de8b04bc6    4983c608                add r14, 0x8                                           
0x7e8de8b04bca    498906                  mov [r14], rax                                         
  : aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;  .. 
0x7e8de8b04bcd    e93d000000              jmp 0x7e8de8b04c0f            < BigNum.aexp+154 >
 ..  ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x7e8de8b04bd2    498b06                  mov rax, [r14]                                         
0x7e8de8b04bd5    4983c608                add r14, 0x8                                           
0x7e8de8b04bd9    498906                  mov [r14], rax                                         
 .. t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x7e8de8b04bdc    49ba90292f3f345b0000    mov r10, 0x5b343f2f2990                                
0x7e8de8b04be6    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04bf0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. .N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x7e8de8b04bf3    e87dffffff              call 0x7e8de8b04b75           < BigNum.aexp : 0x00007e8de8b04b75 >
 .. { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ; 
0x7e8de8b04bf8    49baf0232f3f345b0000    mov r10, 0x5b343f2f23f0                                
0x7e8de8b04c02    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04c0c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. } { drop 1 } { dup -- aexp * } ifElse ; 
0x7e8de8b04c0f    c3                      ret                                                    
Word_Disassemble : word - 'aexp' :: codeSize = 155
Word : 0x00007e8de8d46727 :: Compiled at : 0x00007e8de8b04b75
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 78.17 <::

 =============================
BigNum.bexp <:> csl compiled word
SourceCode for BigNum.bexp :> 
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
Source code file location of bexp : "namespaces/test/bigNum.csl" : 79.2 :: we are now at : namespaces/test/bigNum.csl : 81.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b04c15 -- code size = 203 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexp : definition = 0x00007e8de8b04c15 : disassembly at namespaces/test/bigNum.csl : 81.9 :
0x7e8de8b04c15    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b04c19    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b04c1d    4981c608000000          add r14, 0x8                                           
 ..                        : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c24    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04c28    4983c608                add r14, 0x8                                           
0x7e8de8b04c2c    498906                  mov [r14], rax                                         
 ..                    : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c2f    48b848d38fe88d7e0000    mov rax, 0x7e8de88fd348                                
0x7e8de8b04c39    4983c608                add r14, 0x8                                           
0x7e8de8b04c3d    498906                  mov [r14], rax                                         
0x7e8de8b04c40    49bab02b2f3f345b0000    mov r10, 0x5b343f2f2bb0                                
0x7e8de8b04c4a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04c54    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..               : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c57    498b06                  mov rax, [r14]                                         
0x7e8de8b04c5a    4983ee08                sub r14, 0x8                                           
0x7e8de8b04c5e    4883f800                cmp rax, 0x0                                           
0x7e8de8b04c62    741a                    jz 0xe8b04c7e                 < BigNum.bexp+105 >
0x7e8de8b04c64    0f1f4000                nop [rax]                                              
 ..           : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c68    48b868d38fe88d7e0000    mov rax, 0x7e8de88fd368                                
0x7e8de8b04c72    4983c608                add r14, 0x8                                           
0x7e8de8b04c76    498906                  mov [r14], rax                                         
 ..         : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c79    e953000000              jmp 0x7e8de8b04cd1            < BigNum.bexp+188 >
 ..     : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c7e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04c82    4983c610                add r14, 0x10                                          
0x7e8de8b04c86    498906                  mov [r14], rax                                         
 .. : bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c89    498946f8                mov [r14-0x8], rax                                     
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ;  .. 
0x7e8de8b04c8d    48b888d38fe88d7e0000    mov rax, 0x7e8de88fd388                                
0x7e8de8b04c97    4983c608                add r14, 0x8                                           
0x7e8de8b04c9b    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x7e8de8b04c9e    49ba30252f3f345b0000    mov r10, 0x5b343f2f2530                                
0x7e8de8b04ca8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04cb2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x7e8de8b04cb5    e85bffffff              call 0x7e8de8b04c15           < BigNum.bexp : 0x00007e8de8b04c15 >
0x7e8de8b04cba    49baf0232f3f345b0000    mov r10, 0x5b343f2f23f0                                
0x7e8de8b04cc4    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04cce    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
0x7e8de8b04cd1    498b06                  mov rax, [r14]                                         
0x7e8de8b04cd4    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b04cd8    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b04cdc    498906                  mov [r14], rax                                         
 ..  @ dup 1 - bexp * } ifElse return tos ; 
0x7e8de8b04cdf    c3                      ret                                                    
Word_Disassemble : word - 'bexp' :: codeSize = 203
Word : 0x00007e8de8d48297 :: Compiled at : 0x00007e8de8b04c15
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.9 <::

 =============================
BigNum.bexp0 <:> csl compiled word
SourceCode for BigNum.bexp0 :> 
: bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
Source code file location of bexp0 : "namespaces/test/bigNum.csl" : 80.2 :: we are now at : namespaces/test/bigNum.csl : 81.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b04ce5 -- code size = 186 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexp0 : definition = 0x00007e8de8b04ce5 : disassembly at namespaces/test/bigNum.csl : 81.19 :
0x7e8de8b04ce5    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b04ce9    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b04ced    4981c608000000          add r14, 0x8                                           
 ..                       : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04cf4    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04cf8    4983c608                add r14, 0x8                                           
0x7e8de8b04cfc    498906                  mov [r14], rax                                         
 ..                   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04cff    48b8a8d38fe88d7e0000    mov rax, 0x7e8de88fd3a8                                
0x7e8de8b04d09    4983c608                add r14, 0x8                                           
0x7e8de8b04d0d    498906                  mov [r14], rax                                         
 ..                 : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04d10    49bab02b2f3f345b0000    mov r10, 0x5b343f2f2bb0                                
0x7e8de8b04d1a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04d24    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..              : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04d27    498b06                  mov rax, [r14]                                         
0x7e8de8b04d2a    4983ee08                sub r14, 0x8                                           
0x7e8de8b04d2e    4883f800                cmp rax, 0x0                                           
0x7e8de8b04d32    741a                    jz 0xe8b04d4e                 < BigNum.bexp0+105 >
0x7e8de8b04d34    0f1f4000                nop [rax]                                              
 ..          : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04d38    48b8c8d38fe88d7e0000    mov rax, 0x7e8de88fd3c8                                
0x7e8de8b04d42    4983c608                add r14, 0x8                                           
0x7e8de8b04d46    498906                  mov [r14], rax                                         
 ..        : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04d49    e942000000              jmp 0x7e8de8b04d90            < BigNum.bexp0+171 >
 ..    : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04d4e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04d52    4983c610                add r14, 0x10                                          
0x7e8de8b04d56    498906                  mov [r14], rax                                         
   : bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ;  .. 
0x7e8de8b04d59    498946f8                mov [r14-0x8], rax                                     
 .. p0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x7e8de8b04d5d    49ba90292f3f345b0000    mov r10, 0x5b343f2f2990                                
0x7e8de8b04d67    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04d71    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x7e8de8b04d74    e86cffffff              call 0x7e8de8b04ce5           < BigNum.bexp0 : 0x00007e8de8b04ce5 >
 .. { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x7e8de8b04d79    49baf0232f3f345b0000    mov r10, 0x5b343f2f23f0                                
0x7e8de8b04d83    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04d8d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
0x7e8de8b04d90    498b06                  mov rax, [r14]                                         
0x7e8de8b04d93    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b04d97    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b04d9b    498906                  mov [r14], rax                                         
 ..  @ dup -- bexp0 * } ifElse return tos ; 
0x7e8de8b04d9e    c3                      ret                                                    
Word_Disassemble : word - 'bexp0' :: codeSize = 186
Word : 0x00007e8de8d4a4c7 :: Compiled at : 0x00007e8de8b04ce5
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 81.19 <::
  5040.00000000000000000000000000000000  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000  40320.00000000000000000000000000000000
  5040.00000000000000000000000000000000
 50 ! =   30414093201713375576366966406747986832057064836514787179557289984.00000000000000000000000000000000
  5040.00000000000000000000000000000000  40320.00000000000000000000000000000000
 =============================
BigNum.!! <:> csl compiled word
SourceCode for BigNum.!! :> 
: !! ! p nl ; 
Source code file location of !! : "namespaces/test/bigNum.csl" : 92.2 :: we are now at : namespaces/test/bigNum.csl : 93.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b04db3 -- code size = 50 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.!! : definition = 0x00007e8de8b04db3 : disassembly at namespaces/test/bigNum.csl : 93.15 :
 ..                                  : !! ! p nl ;  .. 
0x7e8de8b04db3    49bbe54cb0e88d7e0000    mov r11, 0x7e8de8b04ce5                                
0x7e8de8b04dbd    49ffd3                  call r11                      < BigNum.bexp0 : 0x00007e8de8b04ce5 >
 ..                                : !! ! p nl ;  .. 
0x7e8de8b04dc0    49bb9efaafe88d7e0000    mov r11, 0x7e8de8affa9e                                
0x7e8de8b04dca    49ffd3                  call r11                      < BigNum.fprint : 0x00007e8de8affa9e >
 ..                              : !! ! p nl ;  .. 
0x7e8de8b04dcd    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b04dd7    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04de1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..                           : !! ! p nl ;  .. 
0x7e8de8b04de4    c3                      ret                                                    
Word_Disassemble : word - '!!' :: codeSize = 50
Word : 0x00007e8de8d4c6f7 :: Compiled at : 0x00007e8de8b04db3
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 93.15 <::
  5040.00000000000000000000000000000000
  40320.00000000000000000000000000000000
  40320.00000000000000000000000000000000

 =============================
BigNum.bexpl <:> csl compiled word
SourceCode for BigNum.bexpl :> 
: bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
Source code file location of bexpl : "namespaces/test/bigNum.csl" : 102.2 :: we are now at : namespaces/test/bigNum.csl : 103.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b04dea -- code size = 203 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.bexpl : definition = 0x00007e8de8b04dea : disassembly at namespaces/test/bigNum.csl : 103.10 :
0x7e8de8b04dea    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b04dee    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b04df2    4981c608000000          add r14, 0x8                                           
 ..                       : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04df9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04dfd    4983c608                add r14, 0x8                                           
0x7e8de8b04e01    498906                  mov [r14], rax                                         
 ..                   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e04    48b8e8d38fe88d7e0000    mov rax, 0x7e8de88fd3e8                                
0x7e8de8b04e0e    4983c608                add r14, 0x8                                           
0x7e8de8b04e12    498906                  mov [r14], rax                                         
 ..                 : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e15    49bab02b2f3f345b0000    mov r10, 0x5b343f2f2bb0                                
0x7e8de8b04e1f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04e29    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..              : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e2c    498b06                  mov rax, [r14]                                         
0x7e8de8b04e2f    4983ee08                sub r14, 0x8                                           
0x7e8de8b04e33    4883f800                cmp rax, 0x0                                           
0x7e8de8b04e37    741a                    jz 0xe8b04e53                 < BigNum.bexpl+105 >
0x7e8de8b04e39    0f1f4000                nop [rax]                                              
 ..          : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e3d    48b808d48fe88d7e0000    mov rax, 0x7e8de88fd408                                
0x7e8de8b04e47    4983c608                add r14, 0x8                                           
0x7e8de8b04e4b    498906                  mov [r14], rax                                         
 ..        : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e4e    e953000000              jmp 0x7e8de8b04ea6            < BigNum.bexpl+188 >
 ..    : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e53    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b04e57    4983c610                add r14, 0x10                                          
0x7e8de8b04e5b    498906                  mov [r14], rax                                         
   : bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;  .. 
0x7e8de8b04e5e    498946f8                mov [r14-0x8], rax                                     
 .. pl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x7e8de8b04e62    48b828d48fe88d7e0000    mov rax, 0x7e8de88fd428                                
0x7e8de8b04e6c    4983c608                add r14, 0x8                                           
0x7e8de8b04e70    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x7e8de8b04e73    49ba30252f3f345b0000    mov r10, 0x5b343f2f2530                                
0x7e8de8b04e7d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04e87    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x7e8de8b04e8a    e85bffffff              call 0x7e8de8b04dea           < BigNum.bexpl : 0x00007e8de8b04dea >
 ..  n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x7e8de8b04e8f    49baf0232f3f345b0000    mov r10, 0x5b343f2f23f0                                
0x7e8de8b04e99    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b04ea3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  { 1 } { n @ dup 1 - bexpl * } ifElse return tos ; 
0x7e8de8b04ea6    498b06                  mov rax, [r14]                                         
0x7e8de8b04ea9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b04ead    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b04eb1    498906                  mov [r14], rax                                         
 .. @ dup 1 - bexpl * } ifElse return tos ; 
0x7e8de8b04eb4    c3                      ret                                                    
Word_Disassemble : word - 'bexpl' :: codeSize = 203
Word : 0x00007e8de8d4cf67 :: Compiled at : 0x00007e8de8b04dea
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 103.10 <::
  5040.00000000000000000000000000000000
 starting BigNum
  0.33333333333333331482961625624739  1.73205080756887719317660412343685  2.99999999999999955591079014993738  9.00000000000000000000000000000000  : should be 9
 
fib  200.00000000000000000000000000000000 =  280571172992510158789853658433108939112448.00000000000000000000000000000000
 =============================
BigNum.tfib3 <:> csl compiled word
SourceCode for BigNum.tfib3 :> 
: tfib3 ( n | m ) "locals fibBN : " ps { m 1 = } { m @ n @ <= } { m 1 += } { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } for ; 
Source code file location of tfib3 : "namespaces/test/bigNum.csl" : 130.2 :: we are now at : namespaces/test/bigNum.csl : 136.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum on : Lisp off
starting at address : 0xe8b050c3 -- code size = 386 bytes
TypeSignature : 
 -----------------------------
Word :: BigNum.tfib3 : definition = 0x00007e8de8b050c3 : disassembly at namespaces/test/bigNum.csl : 136.10 :
0x7e8de8b050c3    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b050c7    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b050cb    4981c610000000          add r14, 0x10                                          
0x7e8de8b050d2    48b89b4f80e88d7e0000    mov rax, 0x7e8de8804f9b       < string : 'locals fibBN : ' >
0x7e8de8b050dc    4983c608                add r14, 0x8                                           
0x7e8de8b050e0    498906                  mov [r14], rax                                         
: tfib3 ( n | m )       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," .. 
0x7e8de8b050e3    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b050ed    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..       "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }   .. 
0x7e8de8b050f0    49bb28d58fe88d7e0000    mov r11, 0x7e8de88fd528                                
0x7e8de8b050fa    4d895f08                mov [r15+0x8], r11                                     
 .. "locals fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      fo .. 
0x7e8de8b050fe    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05102    4983c608                add r14, 0x8                                           
0x7e8de8b05106    498906                  mov [r14], rax                                         
 .. als fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05109    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0510d    4983c608                add r14, 0x8                                           
0x7e8de8b05111    498906                  mov [r14], rax                                         
 .. fibBN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05114    49bab02b2f3f345b0000    mov r10, 0x5b343f2f2bb0                                
0x7e8de8b0511e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b05128    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. BN : " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0512b    498b06                  mov rax, [r14]                                         
0x7e8de8b0512e    4983ee08                sub r14, 0x8                                           
0x7e8de8b05132    4883f800                cmp rax, 0x0                                           
0x7e8de8b05136    0f84fc000000            jz 0x7e8de8b05238             < BigNum.tfib3+373 >
 .. = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0513c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05140    4983c610                add r14, 0x10                                          
0x7e8de8b05144    498906                  mov [r14], rax                                         
 .. { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05147    498946f8                mov [r14-0x8], rax                                     
 .. @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0514b    49bb9efaafe88d7e0000    mov r11, 0x7e8de8affa9e                                
0x7e8de8b05155    49ffd3                  call r11                      < BigNum.fprint : 0x00007e8de8affa9e >
 .. n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05158    48b8c74f80e88d7e0000    mov rax, 0x7e8de8804fc7       < string : ' : ' >
0x7e8de8b05162    4983c608                add r14, 0x8                                           
0x7e8de8b05166    498906                  mov [r14], rax                                         
 ..  } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05169    49baa0d6313f345b0000    mov r10, 0x5b343f31d6a0                                
0x7e8de8b05173    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0517d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05180    49bb924fb0e88d7e0000    mov r11, 0x7e8de8b04f92                                
0x7e8de8b0518a    49ffd3                  call r11                      < BigNum.fibBN : 0x00007e8de8b04f92 >
 .. =  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0518d    49bb9efaafe88d7e0000    mov r11, 0x7e8de8affa9e                                
0x7e8de8b05197    49ffd3                  call r11                      < BigNum.fprint : 0x00007e8de8affa9e >
 ..       { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0519a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0519e    4983c608                add r14, 0x8                                           
0x7e8de8b051a2    498906                  mov [r14], rax                                         
 ..   { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b051a5    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b051a9    4983c608                add r14, 0x8                                           
0x7e8de8b051ad    498906                  mov [r14], rax                                         
 .. m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b051b0    49bae02b2f3f345b0000    mov r10, 0x5b343f2f2be0                                
0x7e8de8b051ba    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b051c4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b051c7    498b06                  mov rax, [r14]                                         
0x7e8de8b051ca    4983ee08                sub r14, 0x8                                           
0x7e8de8b051ce    4883f800                cmp rax, 0x0                                           
0x7e8de8b051d2    742c                    jz 0xe8b05200                 < BigNum.tfib3+317 >
0x7e8de8b051d4    0f1f4000                nop [rax]                                              
 .. p p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b051d8    48b8d54f80e88d7e0000    mov rax, 0x7e8de8804fd5       < string : ',' >
0x7e8de8b051e2    4983c608                add r14, 0x8                                           
0x7e8de8b051e6    498906                  mov [r14], rax                                         
 .. " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b051e9    49baa0d6313f345b0000    mov r10, 0x5b343f31d6a0                                
0x7e8de8b051f3    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b051fd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  " ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05200    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b05204    4983c608                add r14, 0x8                                           
0x7e8de8b05208    498906                  mov [r14], rax                                         
 ..  ps      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0520b    48b848d58fe88d7e0000    mov rax, 0x7e8de88fd548                                
0x7e8de8b05215    4983c608                add r14, 0x8                                           
0x7e8de8b05219    498906                  mov [r14], rax                                         
 .. s      { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b0521c    49ba70262f3f345b0000    mov r10, 0x5b343f2f2670                                
0x7e8de8b05226    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b05230    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..    { m 1 = } { m @ n @ <= } { m 1 +=  }      { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05233    e9c6feffff              jmp 0x7e8de8b050fe            < BigNum.tfib3+59 >
0x7e8de8b05238    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0523c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b05240    4983ee08                sub r14, 0x8                                           
 ..  @ m @ > } { "," _ps } if2 }      for ;  .. 
0x7e8de8b05244    c3                      ret                                                    
Word_Disassemble : word - 'tfib3' :: codeSize = 386
Word : 0x00007e8de8d56897 :: Compiled at : 0x00007e8de8b050c3
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 136.10 <::


 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000

 locals fibBN :   1.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  2.00000000000000000000000000000000 :   1.00000000000000000000000000000000,  3.00000000000000000000000000000000 :   2.00000000000000000000000000000000,  4.00000000000000000000000000000000 :   3.00000000000000000000000000000000,  5.00000000000000000000000000000000 :   5.00000000000000000000000000000000,  6.00000000000000000000000000000000 :   8.00000000000000000000000000000000,  7.00000000000000000000000000000000 :   13.00000000000000000000000000000000,  8.00000000000000000000000000000000 :   21.00000000000000000000000000000000,  9.00000000000000000000000000000000 :   34.00000000000000000000000000000000,  10.00000000000000000000000000000000 :   55.00000000000000000000000000000000,  11.00000000000000000000000000000000 :   89.00000000000000000000000000000000,  12.00000000000000000000000000000000 :   144.00000000000000000000000000000000,  13.00000000000000000000000000000000 :   233.00000000000000000000000000000000,  14.00000000000000000000000000000000 :   377.00000000000000000000000000000000,  15.00000000000000000000000000000000 :   610.00000000000000000000000000000000,  16.00000000000000000000000000000000 :   987.00000000000000000000000000000000,  17.00000000000000000000000000000000 :   1597.00000000000000000000000000000000,  18.00000000000000000000000000000000 :   2584.00000000000000000000000000000000,  19.00000000000000000000000000000000 :   4181.00000000000000000000000000000000,  20.00000000000000000000000000000000 :   6765.00000000000000000000000000000000,  21.00000000000000000000000000000000 :   10946.00000000000000000000000000000000,  22.00000000000000000000000000000000 :   17711.00000000000000000000000000000000,  23.00000000000000000000000000000000 :   28657.00000000000000000000000000000000,  24.00000000000000000000000000000000 :   46368.00000000000000000000000000000000,  25.00000000000000000000000000000000 :   75025.00000000000000000000000000000000,  26.00000000000000000000000000000000 :   121393.00000000000000000000000000000000,  27.00000000000000000000000000000000 :   196418.00000000000000000000000000000000,  28.00000000000000000000000000000000 :   317811.00000000000000000000000000000000,  29.00000000000000000000000000000000 :   514229.00000000000000000000000000000000,  30.00000000000000000000000000000000 :   832040.00000000000000000000000000000000,  31.00000000000000000000000000000000 :   1346269.00000000000000000000000000000000,  32.00000000000000000000000000000000 :   2178309.00000000000000000000000000000000,  33.00000000000000000000000000000000 :   3524578.00000000000000000000000000000000,  34.00000000000000000000000000000000 :   5702887.00000000000000000000000000000000,  35.00000000000000000000000000000000 :   9227465.00000000000000000000000000000000,  36.00000000000000000000000000000000 :   14930352.00000000000000000000000000000000,  37.00000000000000000000000000000000 :   24157817.00000000000000000000000000000000,  38.00000000000000000000000000000000 :   39088169.00000000000000000000000000000000,  39.00000000000000000000000000000000 :   63245986.00000000000000000000000000000000,  40.00000000000000000000000000000000 :   102334155.00000000000000000000000000000000,  41.00000000000000000000000000000000 :   165580141.00000000000000000000000000000000,  42.00000000000000000000000000000000 :   267914296.00000000000000000000000000000000,  43.00000000000000000000000000000000 :   433494437.00000000000000000000000000000000,  44.00000000000000000000000000000000 :   701408733.00000000000000000000000000000000,  45.00000000000000000000000000000000 :   1134903170.00000000000000000000000000000000,  46.00000000000000000000000000000000 :   1836311903.00000000000000000000000000000000,  47.00000000000000000000000000000000 :   2971215073.00000000000000000000000000000000,  48.00000000000000000000000000000000 :   4807526976.00000000000000000000000000000000,  49.00000000000000000000000000000000 :   7778742049.00000000000000000000000000000000,  50.00000000000000000000000000000000 :   12586269025.00000000000000000000000000000000,  51.00000000000000000000000000000000 :   20365011074.00000000000000000000000000000000,  52.00000000000000000000000000000000 :   32951280099.00000000000000000000000000000000,  53.00000000000000000000000000000000 :   53316291173.00000000000000000000000000000000,  54.00000000000000000000000000000000 :   86267571272.00000000000000000000000000000000,  55.00000000000000000000000000000000 :   139583862445.00000000000000000000000000000000,  56.00000000000000000000000000000000 :   225851433717.00000000000000000000000000000000,  57.00000000000000000000000000000000 :   365435296162.00000000000000000000000000000000,  58.00000000000000000000000000000000 :   591286729879.00000000000000000000000000000000,  59.00000000000000000000000000000000 :   956722026041.00000000000000000000000000000000,  60.00000000000000000000000000000000 :   1548008755920.00000000000000000000000000000000,  61.00000000000000000000000000000000 :   2504730781961.00000000000000000000000000000000,  62.00000000000000000000000000000000 :   4052739537881.00000000000000000000000000000000,  63.00000000000000000000000000000000 :   6557470319842.00000000000000000000000000000000,  64.00000000000000000000000000000000 :   10610209857723.00000000000000000000000000000000,  65.00000000000000000000000000000000 :   17167680177565.00000000000000000000000000000000,  66.00000000000000000000000000000000 :   27777890035288.00000000000000000000000000000000,  67.00000000000000000000000000000000 :   44945570212853.00000000000000000000000000000000,  68.00000000000000000000000000000000 :   72723460248141.00000000000000000000000000000000,  69.00000000000000000000000000000000 :   117669030460994.00000000000000000000000000000000,  70.00000000000000000000000000000000 :   190392490709135.00000000000000000000000000000000,  71.00000000000000000000000000000000 :   308061521170129.00000000000000000000000000000000,  72.00000000000000000000000000000000 :   498454011879264.00000000000000000000000000000000,  73.00000000000000000000000000000000 :   806515533049393.00000000000000000000000000000000,  74.00000000000000000000000000000000 :   1304969544928657.00000000000000000000000000000000,  75.00000000000000000000000000000000 :   2111485077978050.00000000000000000000000000000000,  76.00000000000000000000000000000000 :   3416454622906707.00000000000000000000000000000000,  77.00000000000000000000000000000000 :   5527939700884757.00000000000000000000000000000000,  78.00000000000000000000000000000000 :   8944394323791464.00000000000000000000000000000000,  79.00000000000000000000000000000000 :   14472334024676220.00000000000000000000000000000000,  80.00000000000000000000000000000000 :   23416728348467684.00000000000000000000000000000000,  81.00000000000000000000000000000000 :   37889062373143904.00000000000000000000000000000000,  82.00000000000000000000000000000000 :   61305790721611584.00000000000000000000000000000000,  83.00000000000000000000000000000000 :   99194853094755488.00000000000000000000000000000000,  84.00000000000000000000000000000000 :   160500643816367072.00000000000000000000000000000000,  85.00000000000000000000000000000000 :   259695496911122560.00000000000000000000000000000000,  86.00000000000000000000000000000000 :   420196140727489664.00000000000000000000000000000000,  87.00000000000000000000000000000000 :   679891637638612224.00000000000000000000000000000000,  88.00000000000000000000000000000000 :   1100087778366101888.00000000000000000000000000000000,  89.00000000000000000000000000000000 :   1779979416004713984.00000000000000000000000000000000,  90.00000000000000000000000000000000 :   2880067194370816000.00000000000000000000000000000000,  91.00000000000000000000000000000000 :   4660046610375530496.00000000000000000000000000000000,  92.00000000000000000000000000000000 :   7540113804746346496.00000000000000000000000000000000
  52.53799999999999670308170607313514  11.40999999999999836575170775176957
 51
 =============================
void.ctof <:> csl compiled word
SourceCode for void.ctof :> 
: ctof ( c ) c 18 *= c 10 /= c 32 += nl return ( c @ ) ; 
Source code file location of ctof : "namespaces/test/bigNum.csl" : 146.2 :: we are now at : namespaces/test/bigNum.csl : 147.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05521 -- code size = 99 bytes
TypeSignature : 
 -----------------------------
Word :: void.ctof : definition = 0x00007e8de8b05521 : disassembly at namespaces/test/bigNum.csl : 147.9 :
0x7e8de8b05521    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05525    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05529    4981c608000000          add r14, 0x8                                           
 ..                        : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05530    b912000000              mov ecx, 0x12                                          
 ..                          : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05535    498b47f8                mov rax, [r15-0x8]                                     
 ..                     : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05539    480fafc1                imul rax, rcx                                          
0x7e8de8b0553d    498947f8                mov [r15-0x8], rax                                     
 ..               : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05541    b90a000000              mov r9d, 0xa                                           
 ..                 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05546    498b47f8                mov rax, [r15-0x8]                                     
 ..            : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b0554a    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b05551    48f7f9                  idiv rcx                                               
0x7e8de8b05554    498947f8                mov [r15-0x8], rax                                     
 ..         : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05558    498347f820              add qword [r15-0x8], 0x20                              
 .. : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b0555d    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b05567    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b05571    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 : ctof ( c ) c 18 *=  c 10 /= c 32 += nl return ( c @ ) ;  .. 
0x7e8de8b05574    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b05578    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0557c    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  c 18 *=  c 10 /= c 32 += nl return ( c @ ) ; 
0x7e8de8b05580    498906                  mov [r14], rax                                         
 .. *=  c 10 /= c 32 += nl return ( c @ ) ; 
0x7e8de8b05583    c3                      ret                                                    
Word_Disassemble : word - 'ctof' :: codeSize = 99
Word : 0x00007e8de8d60cc7 :: Compiled at : 0x00007e8de8b05521
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 147.9 <::
 11
 =============================
void.ftoc <:> csl compiled word
SourceCode for void.ftoc :> 
: ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ; 
Source code file location of ftoc : "namespaces/test/bigNum.csl" : 148.2 :: we are now at : namespaces/test/bigNum.csl : 149.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05589 -- code size = 76 bytes
TypeSignature : 
 -----------------------------
Word :: void.ftoc : definition = 0x00007e8de8b05589 : disassembly at namespaces/test/bigNum.csl : 149.9 :
0x7e8de8b05589    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0558d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05591    4981c608000000          add r14, 0x8                                           
 ..                          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b05598    49836ff820              sub qword [r15-0x8], 0x20                              
 ..                : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b0559d    b90a000000              mov ecx, 0xa                                           
 ..                  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b055a2    498b47f8                mov rax, [r15-0x8]                                     
 ..             : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b055a6    480fafc1                imul rax, rcx                                          
0x7e8de8b055aa    498947f8                mov [r15-0x8], rax                                     
 ..        : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b055ae    b912000000              mov ecx, 0x12                                          
 ..          : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b055b3    498b47f8                mov rax, [r15-0x8]                                     
 ..     : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b055b7    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b055be    48f7f9                  idiv rcx                                               
0x7e8de8b055c1    498947f8                mov [r15-0x8], rax                                     
 ..  : ftoc ( f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ;  .. 
0x7e8de8b055c5    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b055c9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b055cd    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  f ) f 32 -= f 10 *= f 18 /= return ( f @ ) ; 
0x7e8de8b055d1    498906                  mov [r14], rax                                         
 ..  32 -= f 10 *= f 18 /= return ( f @ ) ; 
0x7e8de8b055d4    c3                      ret                                                    
Word_Disassemble : word - 'ftoc' :: codeSize = 76
Word : 0x00007e8de8d629e7 :: Compiled at : 0x00007e8de8b05589
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 149.9 <::
 fibc2

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :> 
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
Source code file location of fibc2 : "namespaces/test/bigNum.csl" : 156.100 :: we are now at : namespaces/test/bigNum.csl : 157.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b055da -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x00007e8de8b055da : disassembly at namespaces/test/bigNum.csl : 157.10 :
0x7e8de8b055da    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b055de    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b055e2    4981c608000000          add r14, 0x8                                           
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x7e8de8b055e9    49837ff802              cmp qword [r15-0x8], 0x2                               
  (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x7e8de8b055ee    7d14                    jge 0xe8b05604                < LispDefines.fibc2+42 >
0x7e8de8b055f0    0f1f4000                nop [rax]                                              
 .. e fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b055f4    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b055f8    4983c608                add r14, 0x8                                           
0x7e8de8b055fc    498906                  mov [r14], rax                                         
 .. bc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b055ff    e945000000              jmp 0x7e8de8b05649            < LispDefines.fibc2+111 >
 ..  ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b05604    498b47f8                mov rax, [r15-0x8]                                     
 ..  ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b05608    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b05611    83c608                  add esi, 0x8                                           
0x7e8de8b05614    498906                  mov [r14], rax                                         
 .. mbda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b05617    e8beffffff              call 0x7e8de8b055da           < LispDefines.fibc2 : 0x00007e8de8b055da >
 .. n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b0561c    498b47f8                mov rax, [r15-0x8]                                     
 .. ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b05620    b902000000              mov ecx, 0x2                                           
 .. ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b05625    482bc1                  sub rax, rcx                                           
0x7e8de8b05628    4983c608                add r14, 0x8                                           
0x7e8de8b0562c    498906                  mov [r14], rax                                         
 .. ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
0x7e8de8b0562f    e8a6ffffff              call 0x7e8de8b055da           < LispDefines.fibc2 : 0x00007e8de8b055da >
0x7e8de8b05634    498b0e                  mov rcx, [r14]                                         
0x7e8de8b05637    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0563b    4983ee10                sub r14, 0x10                                          
0x7e8de8b0563f    4803c1                  add rax, rcx                                           
0x7e8de8b05642    4983c608                add r14, 0x8                                           
0x7e8de8b05646    498906                  mov [r14], rax                                         
0x7e8de8b05649    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0564d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b05651    498906                  mov [r14], rax                                         
 ..        (define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) ) .. 
0x7e8de8b05654    c3                      ret                                                    
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x00007e8de8a02330 :: Compiled at : 0x00007e8de8b055da
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 157.10 <::
 6765
 fibbc
 6765
 x7

 ( 1 2 3 x7 )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 ( 7 8 9 45 ) )

 ( 1 2 3 7 8 9 45 )

 ( 1 2 3 7 8 9 45 )

 77
 77
 77
 alist
 ( 1 2 3 7 8 9 45 )
 yfac45
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 3628800.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac
 3628800.00000000000000000000000000000000

 yfacc
 3628800.00000000000000000000000000000000

 5040.00000000000000000000000000000000

 yfac

 =============================
LispDefines.yfac <:> variableyfac <:> lambdaCalculus defined word
SourceCode for LispDefines.yfac :> 
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1))))))
Source code file location of yfac : "namespaces/test/bigNum.csl" : 219.65 :: we are now at : namespaces/test/bigNum.csl : 220.21
Lambda Calculus word : interpreted not compiled
TypeSignature : 
 -----------------------------
Word :: LispDefines.yfac : definition = 0x0000000000000000 : disassembly at namespaces/test/bigNum.csl : 220.21 :
Word : 0x00007e8de8abb7e8 :: Compiled at : 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 220.21 <::
 3628800

 yfacc
 3628800

 5040

 yfac
 3628800

 yfacc
 3628800

 5040

 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ff
 ( ( /\ "let" 139147951266311 ) 6 )
 ( ( /\ "let" 139147951266311 ) ( ( /\ y 139147956218419 ) 4 ) )
 7

 h36
 ( n09 my6 n09 my6 n09 n09 my6 my6 )
 
 should show : ( n09 my6 n09 my6 n09 n09 my6 my6 )
 n09
 my6
 ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 
 should show : ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )
 id
 ( "the" "the" b b )
 id1
 ( 7 7 11 11 7 7 )
 swch
 ( 11 7 )
 swch2
 ( ( 7 11 ) ( 11 7 ) )
 id2
 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) )
 id3
 ( 7 7 11 7 11 11 7 7 )
 swch3
 id4
 ( 7 7 ( ( ( 11 7 ) ( 7 11 ) ) ( ( 7 11 ) ( 11 7 ) ) ) 11 11 7 7 )
 x
 ( ( 3 4 ) ( 4 3 ) )
 x
 7
 x
 11
 7
 7
 7
 7

 namespaces/test/bigNum.csl 286.9
'7'
'( ( lambda ( a b ) ( + a b ) ) 3 4 )'

'( ( lambda ( a b ) ( + a b ) ) 3 4 )'
'7'

'7'

 =============================
List.bexp3 <:> csl compiled word
SourceCode for List.bexp3 :> 
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 * } { 1 } ifElse ; 
Source code file location of bexp3 : "namespaces/test/bigNum.csl" : 290.2 :: we are now at : namespaces/test/bigNum.csl : 291.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05706 -- code size = 107 bytes
 -----------------------------
Word :: List.bexp3 : definition = 0x00007e8de8b05706 : disassembly at namespaces/test/bigNum.csl : 291.18 :
0x7e8de8b05706    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0570a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0570e    4981c608000000          add r14, 0x8                                           
0x7e8de8b05715    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b0571a    7e3d                    jle 0xe8b05759                < List.bexp3+83 >
0x7e8de8b0571c    0f1f4000                nop [rax]                                              
0x7e8de8b05720    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b05724    4983c608                add r14, 0x8                                           
0x7e8de8b05728    498906                  mov [r14], rax                                         
0x7e8de8b0572b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0572f    48ffc8                  dec rax                                                
0x7e8de8b05732    4983c608                add r14, 0x8                                           
0x7e8de8b05736    498906                  mov [r14], rax                                         
0x7e8de8b05739    e8c8ffffff              call 0x7e8de8b05706           < List.bexp3 : 0x00007e8de8b05706 >
0x7e8de8b0573e    498b0e                  mov rcx, [r14]                                         
0x7e8de8b05741    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b05745    4983ee10                sub r14, 0x10                                          
0x7e8de8b05749    480fafc1                imul rax, rcx                                          
0x7e8de8b0574d    4983c608                add r14, 0x8                                           
0x7e8de8b05751    498906                  mov [r14], rax                                         
0x7e8de8b05754    e90c000000              jmp 0x7e8de8b05765            < List.bexp3+95 >
0x7e8de8b05759    b801000000              mov eax, 0x1                                           
0x7e8de8b0575e    4983c608                add r14, 0x8                                           
0x7e8de8b05762    498906                  mov [r14], rax                                         
0x7e8de8b05765    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05769    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0576d    498906                  mov [r14], rax                                         
0x7e8de8b05770    c3                      ret                                                    
Word_Disassemble : word - 'bexp3' :: codeSize = 107
Word : 0x00007e8de8d76707 :: Compiled at : 0x00007e8de8b05706
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 291.18 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word, prefix
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; } 
Source code file location of fac5 : "namespaces/test/bigNum.csl" : 294.5 :: we are now at : namespaces/test/bigNum.csl : 307.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05785 -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x00007e8de8b05785 : disassembly at namespaces/test/bigNum.csl : 307.21 :
0x7e8de8b05785    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x7e8de8b05788    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x7e8de8b0578d    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b05791    7e11                    jle 0xe8b057a4                < C_Syntax.fac5+31 >
0x7e8de8b05793    0f1f4000                nop [rax]                                              
 ..   while ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x7e8de8b05797    480faff7                imul rsi, rdi                                          
 .. le ( n > 1 )      {         facc *= n -- ;     }     return facc ; } 
0x7e8de8b0579b    48ffcf                  dec rdi                                                
0x7e8de8b0579e    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b057a2    7ff3                    jg 0xe8b05797                 < C_Syntax.fac5+18 >
 ..       facc *= n -- ;     }     return facc ; } 
0x7e8de8b057a4    498936                  mov [r14], rsi                                         
 .. acc *= n -- ;     }     return facc ; } 
0x7e8de8b057a7    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 35
Word : 0x00007e8de8d78ae7 :: Compiled at : 0x00007e8de8b05785
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 307.21 <::
 5040
 =============================
C_Syntax.cpow <:> csl compiled word, prefix
SourceCode for C_Syntax.cpow :> 
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
Source code file location of cpow : "namespaces/test/bigNum.csl" : 313.9 :: we are now at : namespaces/test/bigNum.csl : 315.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b057ad -- code size = 88 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x00007e8de8b057ad : disassembly at namespaces/test/bigNum.csl : 315.9 :
0x7e8de8b057ad    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b057b1    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b057b5    4981c610000000          add r14, 0x10                                          
int cpow ( base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out }  .. 
0x7e8de8b057bc    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  base power | out ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057c4    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b057c8    4883f800                cmp rax, 0x0                                           
0x7e8de8b057cc    7423                    jz 0xe8b057f1                 < C_Syntax.cpow+68 >
0x7e8de8b057ce    0f1f4000                nop [rax]                                              
 .. ut = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057d2    498b4708                mov rax, [r15+0x8]                                     
 ..  ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057d6    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057da    480fafc1                imul rax, rcx                                          
 .. or ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057de    49894708                mov [r15+0x8], rax                                     
 ..  ) { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057e2    49836ff801              sub qword [r15-0x8], 0x1                               
 ..  { for ( out = 1 ; power ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057e7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b057eb    4883f800                cmp rax, 0x0                                           
0x7e8de8b057ef    75dd                    jnz 0xe8b057ce                < C_Syntax.cpow+33 >
 .. ; power -= 1 ) { out = out * base ; } return out } 
0x7e8de8b057f1    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b057f5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b057f9    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b057fd    4983ee08                sub r14, 0x8                                           
 ..  -= 1 ) { out = out * base ; } return out } 
0x7e8de8b05801    498906                  mov [r14], rax                                         
 .. 1 ) { out = out * base ; } return out } 
0x7e8de8b05804    c3                      ret                                                    
Word_Disassemble : word - 'cpow' :: codeSize = 88
Word : 0x00007e8de8d7b737 :: Compiled at : 0x00007e8de8b057ad
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 315.9 <::
 2 ^ 30 :  1073741824
 =============================
Root.pow0 <:> csl compiled word
SourceCode for Root.pow0 :> 
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
Source code file location of pow0 : "namespaces/test/bigNum.csl" : 319.2 :: we are now at : namespaces/test/bigNum.csl : 322.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0580a -- code size = 133 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.pow0 : definition = 0x00007e8de8b0580a : disassembly at namespaces/test/bigNum.csl : 322.9 :
0x7e8de8b0580a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0580e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05812    4981c610000000          add r14, 0x10                                          
 ..   : pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  .. 
0x7e8de8b05819    49c7470801000000        mov qword [r15+0x8], 0x1                               
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ;  .. 
0x7e8de8b05821    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. wer | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05826    7e53                    jle 0xe8b0587b                < Root.pow0+113 >
0x7e8de8b05828    0f1f4000                nop [rax]                                              
 .. wer @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0582c    498d4708                lea rax, [r15+0x8]                                     
 .. power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05830    4983c608                add r14, 0x8                                           
0x7e8de8b05834    498906                  mov [r14], rax                                         
 .. @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05837    498b4708                mov rax, [r15+0x8]                                     
 .. } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0583b    498b4ff0                mov rcx, [r15-0x10]                                    
0x7e8de8b0583f    480fafc1                imul rax, rcx                                          
 .. er power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05843    488bc8                  mov rcx, rax                                           
0x7e8de8b05846    498b06                  mov rax, [r14]                                         
0x7e8de8b05849    4983ee08                sub r14, 0x8                                           
 ..  power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0584d    488908                  mov [rax], rcx                                         
 .. | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05850    498d47f8                lea rax, [r15-0x8]                                     
0x7e8de8b05854    4983c608                add r14, 0x8                                           
0x7e8de8b05858    498906                  mov [r14], rax                                         
 .. ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0585b    498b47f8                mov rax, [r15-0x8]                                     
 .. 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0585f    b901000000              mov ecx, 0x1                                           
0x7e8de8b05864    482bc1                  sub rax, rcx                                           
 .. = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05867    488bc8                  mov rcx, rax                                           
0x7e8de8b0586a    498b06                  mov rax, [r14]                                         
0x7e8de8b0586d    4983ee08                sub r14, 0x8                                           
 .. } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05871    488908                  mov [rax], rcx                                         
 .. { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b05874    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b05879    7fad                    jg 0xe8b05828                 < Root.pow0+30 >
 ..  1 - = } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0587b    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0587f    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05883    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b05887    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b0588b    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b0588e    c3                      ret                                                    
Word_Disassemble : word - 'pow0' :: codeSize = 133
Word : 0x00007e8de8d7ea47 :: Compiled at : 0x00007e8de8b0580a
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 322.9 <::
 1073741824 1073741824 xyfac
 yfac
 
yfac : 10 factorial =  3628800.00000000000000000000000000000000
 yfacc
 3628800

 5040

 yfac
 3628800
 yfacc
 3628800

 5040

 fib
 fib2
 55
 55
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )

 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 380.2 :: we are now at : namespaces/test/bigNum.csl : 391.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05a1e -- code size = 135 bytes
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05a1e : disassembly at namespaces/test/bigNum.csl : 391.10 :
0x7e8de8b05a1e    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05a22    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05a26    4981c620000000          add r14, 0x20                                          
0x7e8de8b05a2d    49c7470800000000        mov qword [r15+0x8], 0x0                               
0x7e8de8b05a35    49c7471000000000        mov qword [r15+0x10], 0x0                              
0x7e8de8b05a3d    49c7471801000000        mov qword [r15+0x18], 0x1                              
0x7e8de8b05a45    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b05a4a    7e49                    jle 0xe8b05a95                < Root.fib01+119 >
0x7e8de8b05a4c    0f1f4000                nop [rax]                                              
0x7e8de8b05a50    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b05a54    498b4f18                mov rcx, [r15+0x18]                                    
0x7e8de8b05a58    488908                  mov [rax], rcx                                         
0x7e8de8b05a5b    498d4718                lea rax, [r15+0x18]                                    
0x7e8de8b05a5f    498b4f08                mov rcx, [r15+0x8]                                     
0x7e8de8b05a63    488908                  mov [rax], rcx                                         
0x7e8de8b05a66    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b05a6a    4983c608                add r14, 0x8                                           
0x7e8de8b05a6e    498906                  mov [r14], rax                                         
0x7e8de8b05a71    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b05a75    498b4f18                mov rcx, [r15+0x18]                                    
0x7e8de8b05a79    4803c1                  add rax, rcx                                           
0x7e8de8b05a7c    488bc8                  mov rcx, rax                                           
0x7e8de8b05a7f    498b06                  mov rax, [r14]                                         
0x7e8de8b05a82    4983ee08                sub r14, 0x8                                           
0x7e8de8b05a86    488908                  mov [rax], rcx                                         
0x7e8de8b05a89    49836ff801              sub qword [r15-0x8], 0x1                               
0x7e8de8b05a8e    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b05a93    7fb7                    jg 0xe8b05a4c                 < Root.fib01+46 >
0x7e8de8b05a95    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05a99    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05a9d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b05aa1    498906                  mov [r14], rax                                         
0x7e8de8b05aa4    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 135
Word : 0x00007e8de8d8d4f7 :: Compiled at : 0x00007e8de8b05a1e
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 391.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn REG fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 393.2 :: we are now at : namespaces/test/bigNum.csl : 404.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05aaa -- code size = 126 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05aaa : disassembly at namespaces/test/bigNum.csl : 404.10 :
0x7e8de8b05aaa    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05aae    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05ab2    4981c618000000          add r14, 0x18                                          
 .. 01 ( n | fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b05ab9    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn REG fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b05ac1    48c7c700000000          mov rdi, 0x0                                           
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b05ac8    49c7471001000000        mov qword [r15+0x10], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x7e8de8b05ad0    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b05ad5    7e41                    jle 0xe8b05b18                < Root.fib01+110 >
0x7e8de8b05ad7    0f1f4000                nop [rax]                                              
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05adb    498b4f10                mov rcx, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05adf    488bf9                  mov rdi, rcx                                           
0x7e8de8b05ae2    498d4710                lea rax, [r15+0x10]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05ae6    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05aea    488908                  mov [rax], rcx                                         
0x7e8de8b05aed    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b05af1    4983c608                add r14, 0x8                                           
0x7e8de8b05af5    498906                  mov [r14], rax                                         
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05af8    498b4f10                mov rcx, [r15+0x10]                                    
0x7e8de8b05afc    4803f9                  add rdi, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05aff    488bc8                  mov rcx, rax                                           
0x7e8de8b05b02    498b06                  mov rax, [r14]                                         
0x7e8de8b05b05    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b09    488938                  mov [rax], rdi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b05b0c    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b05b11    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b05b16    7fbf                    jg 0xe8b05ad7                 < Root.fib01+45 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b18    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05b1c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05b20    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b24    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b05b27    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 126
Word : 0x00007e8de8d92307 :: Compiled at : 0x00007e8de8b05aaa
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 404.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | fn, REG fn1, REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 406.2 :: we are now at : namespaces/test/bigNum.csl : 417.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05b2d -- code size = 111 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05b2d : disassembly at namespaces/test/bigNum.csl : 417.10 :
0x7e8de8b05b2d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05b31    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05b35    4981c610000000          add r14, 0x10                                          
 ..  | fn, REG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b05b3c    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. EG fn1, REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b05b44    48c7c700000000          mov rdi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b05b4b    be01000000              mov esi, 0x1                                           
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x7e8de8b05b50    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b05b55    7e35                    jle 0xe8b05b8c                < Root.fib01+95 >
0x7e8de8b05b57    0f1f4000                nop [r8]                                               
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b5b    488bfe                  mov rdi, rsi                                           
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b5e    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b62    488bf1                  mov rsi, rcx                                           
0x7e8de8b05b65    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b05b69    4983c608                add r14, 0x8                                           
0x7e8de8b05b6d    498906                  mov [r14], rax                                         
0x7e8de8b05b70    4803fe                  add rdi, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b73    488bc8                  mov rcx, rax                                           
0x7e8de8b05b76    498b06                  mov rax, [r14]                                         
0x7e8de8b05b79    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b7d    488938                  mov [rax], rdi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b05b80    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b05b85    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b05b8a    7fcb                    jg 0xe8b05b57                 < Root.fib01+42 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b8c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05b90    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05b94    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05b98    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b05b9b    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 111
Word : 0x00007e8de8d97117 :: Compiled at : 0x00007e8de8b05b2d
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 417.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( n | REG fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 420.2 :: we are now at : namespaces/test/bigNum.csl : 431.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05ba1 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05ba1 : disassembly at namespaces/test/bigNum.csl : 431.10 :
0x7e8de8b05ba1    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05ba5    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05ba9    4981c608000000          add r14, 0x8                                           
 ..  REG fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b05bb0    48c7c700000000          mov rdi, 0x0                                           
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b05bb7    48c7c600000000          mov rsi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b05bbe    ba01000000              mov edx, 0x1                                           
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x7e8de8b05bc3    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b05bc8    7e1c                    jle 0xe8b05be6                < Root.fib01+69 >
0x7e8de8b05bca    0f1f4000                nop [rax]                                              
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05bce    488bf2                  mov rsi, rdx                                           
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05bd1    488bd7                  mov rdx, rdi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05bd4    4803f2                  add rsi, rdx                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05bd7    488bfe                  mov rdi, rsi                                           
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b05bda    49836ff801              sub qword [r15-0x8], 0x1                               
0x7e8de8b05bdf    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b05be4    7fe4                    jg 0xe8b05bca                 < Root.fib01+41 >
0x7e8de8b05be6    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05bea    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05bee    49893e                  mov [r14], rdi                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b05bf1    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 81
Word : 0x00007e8de8d9bf27 :: Compiled at : 0x00007e8de8b05ba1
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 431.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 434.2 :: we are now at : namespaces/test/bigNum.csl : 445.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05bf7 -- code size = 121 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05bf7 : disassembly at namespaces/test/bigNum.csl : 445.10 :
0x7e8de8b05bf7    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05bfb    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05bff    4981c618000000          add r14, 0x18                                          
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            .. 
0x7e8de8b05c06    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b05c0a    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b05c12    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b05c1a    be01000000              mov esi, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x7e8de8b05c1f    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b05c23    7e3b                    jle 0xe8b05c60                < Root.fib01+105 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x7e8de8b05c25    0f1f4000                nop [r8]                                               
0x7e8de8b05c29    498d4710                lea rax, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c2d    488930                  mov [rax], rsi                                         
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c30    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c34    488bf1                  mov rsi, rcx                                           
0x7e8de8b05c37    498d4708                lea rax, [r15+0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for .. 
0x7e8de8b05c3b    4983c608                add r14, 0x8                                           
0x7e8de8b05c3f    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c42    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b05c46    4803c6                  add rax, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c49    488bc8                  mov rcx, rax                                           
0x7e8de8b05c4c    498b06                  mov rax, [r14]                                         
0x7e8de8b05c4f    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c53    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b05c56    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b05c5a    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b05c5e    7fc5                    jg 0xe8b05c25                 < Root.fib01+46 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c60    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05c64    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05c68    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05c6c    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b05c6f    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 121
Word : 0x00007e8de8da0d37 :: Compiled at : 0x00007e8de8b05bf7
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 445.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn REG fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 447.2 :: we are now at : namespaces/test/bigNum.csl : 458.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05c75 -- code size = 112 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05c75 : disassembly at namespaces/test/bigNum.csl : 458.10 :
0x7e8de8b05c75    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05c79    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05c7d    4981c610000000          add r14, 0x10                                          
 ..                               : fib01 ( REG n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {        .. 
0x7e8de8b05c84    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  n | fn REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b05c88    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. REG fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b05c90    48c7c600000000          mov rsi, 0x0                                           
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b05c97    ba010000004883ff00      mov rdx, 0xff834800000001                              
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b05ca0    7e33                    jle 0xe8b05cd5                < Root.fib01+96 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x7e8de8b05ca2    0f1f4000                nop [r8]                                               
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05ca6    488bf2                  mov rsi, rdx                                           
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05ca9    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05cad    488bd1                  mov rdx, rcx                                           
0x7e8de8b05cb0    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b05cb4    4983c608                add r14, 0x8                                           
 .. 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for .. 
0x7e8de8b05cb8    498906                  mov [r14], rax                                         
0x7e8de8b05cbb    4803f2                  add rsi, rdx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05cbe    488bc8                  mov rcx, rax                                           
0x7e8de8b05cc1    498b06                  mov rax, [r14]                                         
 .. = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for   .. 
0x7e8de8b05cc4    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05cc8    488930                  mov [rax], rsi                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b05ccb    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b05ccf    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b05cd3    7fcd                    jg 0xe8b05ca2                 < Root.fib01+45 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05cd5    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05cd9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05cdd    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05ce1    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b05ce4    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 112
Word : 0x00007e8de8da5b47 :: Compiled at : 0x00007e8de8b05c75
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 458.10 <::
 6765
 =============================
Root.fib01 <:> csl compiled word
SourceCode for Root.fib01 :> 
: fib01 ( REG n | fn fn1 REG fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fib01 : "namespaces/test/bigNum.csl" : 460.2 :: we are now at : namespaces/test/bigNum.csl : 471.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05cea -- code size = 126 bytes
TypeSignature : 
 -----------------------------
Word :: Root.fib01 : definition = 0x00007e8de8b05cea : disassembly at namespaces/test/bigNum.csl : 471.10 :
0x7e8de8b05cea    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05cee    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05cf2    4981c618000000          add r14, 0x18                                          
 ..                               : fib01 ( REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            .. 
0x7e8de8b05cf9    498b7ff8                mov rdi, [r15-0x8]                                     
 ..  REG n | fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b05cfd    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn fn1 REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b05d05    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. REG fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b05d0d    be01000000              mov esi, 0x1                                           
 ..    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      } .. 
0x7e8de8b05d12    4883ff00                cmp rdi, 0x0                                           
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b05d16    7e3b                    jle 0xe8b05d53                < Root.fib01+105 >
 .. fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ +  .. 
0x7e8de8b05d18    0f1f4000                nop [rax]                                              
0x7e8de8b05d1c    498d4710                lea rax, [r15+0x10]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d20    488930                  mov [rax], rsi                                         
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d23    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d27    488bf1                  mov rsi, rcx                                           
0x7e8de8b05d2a    498d4708                lea rax, [r15+0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for .. 
0x7e8de8b05d2e    4983c608                add r14, 0x8                                           
0x7e8de8b05d32    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d35    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b05d39    4803c6                  add rax, rsi                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d3c    488bc8                  mov rcx, rax                                           
0x7e8de8b05d3f    498b06                  mov rax, [r14]                                         
0x7e8de8b05d42    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d46    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b05d49    4883ef01                sub rdi, 0x1                                           
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b05d4d    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b05d51    7fc5                    jg 0xe8b05d18                 < Root.fib01+46 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d53    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b05d57    e900000000              jmp 0x7e8de8b05d5c            < Root.fib01+114 >
0x7e8de8b05d5c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05d60    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b05d64    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b05d67    c3                      ret                                                    
Word_Disassemble : word - 'fib01' :: codeSize = 126
Word : 0x00007e8de8daa957 :: Compiled at : 0x00007e8de8b05cea
 =============================
::> 'wdiss' was called at namespaces/test/bigNum.csl 471.10 <::
 6765
including namespaces/test/classTest.csl at namespaces/test/initTest.csl : 86.41 ...
 
classTest.csl
Using Namespaces :> C Root Class Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

Pointer.size =  8

Integer size =  8

Using Namespaces :> Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 34.18 : token = class : cloneFlag = 0
Using Namespaces :> Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

Buffer size =  256

_ClassTypedef : at namespaces/test/classTest.csl : 40.3 : token = class : cloneFlag = 0
Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

DLLNode size =  16

_ClassTypedef : at namespaces/test/classTest.csl : 47.3 : token = :{ : cloneFlag = 0
DLLNode size =  18

Using Namespaces :> DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 55.3 : token = :{ : cloneFlag = 0
DLLNode size =  16

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 61.22 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 65.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 16
Dump at : namespaces/test/classTest.csl : 66.51 :
Dump : Address = 0x00007e8de88fd668 : Number = 16 :: (little endian dump)
0x00007e8de88fd668 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/classTest.csl : 67.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

_ClassTypedef : at namespaces/test/classTest.csl : 71.3 : token = class : cloneFlag = 0
 =============================
DLList.init <:> csl compiled word
SourceCode for DLList.init :> 
: init ( this ) this.HeadNode.AfterReference this.TailNode.BeforeReference = this.TailNode.BeforeReference this.HeadNode.AfterReference = this.HeadNode.BeforeReference 1 = this.TailNode.AfterReference 2 = ; 
Source code file location of init : "namespaces/test/classTest.csl" : 77.2 :: we are now at : namespaces/test/classTest.csl : 83.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05d82 -- code size = 109 bytes
TypeSignature : 
 -----------------------------
Word :: DLList.init : definition = 0x00007e8de8b05d82 : disassembly at namespaces/test/classTest.csl : 83.18 :
0x7e8de8b05d82    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05d86    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05d8a    4981c608000000          add r14, 0x8                                           
 ..                   : init ( this )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this .. 
0x7e8de8b05d91    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b05d95    4881c000000000          add rax, 0x0                                           
 .. is )     this.HeadNode.AfterReference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =    .. 
0x7e8de8b05d9c    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b05da0    4881c118000000          add rcx, 0x18                                          
 .. ference this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReferenc .. 
0x7e8de8b05da7    488908                  mov [rax], rcx                                         
 .. e this.TailNode.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =  .. 
0x7e8de8b05daa    498b47f8                mov rax, [r15-0x8]                                     
 .. e.BeforeReference =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailN .. 
0x7e8de8b05dae    4881c018000000          add rax, 0x18                                          
 .. e =     this.TailNode.BeforeReference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReferen .. 
0x7e8de8b05db5    498b4ff8                mov rcx, [r15-0x8]                                     
 .. eference this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05db9    488908                  mov [rax], rcx                                         
 .. ce this.HeadNode.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05dbc    498b47f8                mov rax, [r15-0x8]                                     
 .. de.AfterReference =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05dc0    4881c008000000          add rax, 0x8                                           
0x7e8de8b05dc7    b901000000              mov ecx, 0x1                                           
 .. =     this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05dcc    488908                  mov [rax], rcx                                         
 .. this.HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05dcf    498b47f8                mov rax, [r15-0x8]                                     
 .. HeadNode.BeforeReference 1 =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05dd3    4881c010000000          add rax, 0x10                                          
0x7e8de8b05dda    b902000000              mov ecx, 0x2                                           
 .. =     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05ddf    488908                  mov [rax], rcx                                         
0x7e8de8b05de2    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b05de6    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b05dea    4983ee08                sub r14, 0x8                                           
 ..     this.TailNode.AfterReference  2 = ;  .. 
0x7e8de8b05dee    c3                      ret                                                    
Word_Disassemble : word - 'init' :: codeSize = 109
Word : 0x00007e8de8db2687 :: Compiled at : 0x00007e8de8b05d82
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 83.18 <::

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/classTest.csl : 85.21 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 32
Dump at : namespaces/test/classTest.csl : 86.36 :
Dump : Address = 0x00007e8de88fd678 : Number = 32 :: (little endian dump)
0x00007e8de88fd678 :  90 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd688 :  02 00 00 00 00 00 00 00  78 d6 8f e8 8d 7e 00 00  ........ x....~.. 
 class init test :   : ok

 15 15 15 15 15 
yada yada yada yada neti 
 below line should show several 15's
 15 15 15 15 15
 
 above line should show several 15's
Using Namespaces :> DLList DLLNode Buffer Class Root Integer Pointer C Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

_ClassTypedef : at namespaces/test/classTest.csl : 97.4 : token =  : cloneFlag = 1
 =============================
DLListClone.init <:> csl compiled word
SourceCode for DLListClone.init :> 
: init ( this ) this.Category 12 = this.Three 3 = this.Prototype this.Three @ = this.Prototype @ dup p 3 "init_assert1" assert this.Prototype @ p this.Sum 0 = this.Four 4 = this.Twelve 12 = this.Accum this.Sum @ = this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert this.Accum this.Three @ this.Four @ * this.Three @ / = this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * this.Category @ - = this.Sum @ dup hex p 24 "init_assert5" assert decimal nl this.Category @ dup p 12 "init_assert7" assert this.Prototype @ p this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert this.Sum this.Category @ this.Prototype @ - dup p = this.Sum this.Category @ this.Prototype @ && dup p = this.Sum this.Category @ this.Prototype @ & dup p = this.Accum this.Prototype @ = this.Sum this.Category @ this.Prototype @ | dup p = this.Sum this.Category @ this.Prototype @ || dup p = this.Sum this.Category @ this.Prototype @ / dup p = this.Category @ dup p 12 _assert this.Sum @ p this.Prototype @ p "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps hex "\nthis = " ps this p "\nthis @ = " ps this @ p "\nthis.size = " ps this.size @ p nl this dup p this.size @ dump this.Accum this.Prototype @ dup p = this this.size @ dump decimal this.Accum @ dup 3 "\nAccum should be 3 : assert9 =" assert p this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p; 
Source code file location of init : "namespaces/test/classTest.csl" : 107.2 :: we are now at : namespaces/test/classTest.csl : 162.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b05f92 -- code size = 2648 bytes
TypeSignature : 
 -----------------------------
Word :: DLListClone.init : definition = 0x00007e8de8b05f92 : disassembly at namespaces/test/classTest.csl : 162.18 :
0x7e8de8b05f92    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b05f96    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b05f9a    4981c608000000          add r14, 0x8                                           
 ..                   : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p  .. 
0x7e8de8b05fa1    498b47f8                mov rax, [r15-0x8]                                     
 ..              : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "in .. 
0x7e8de8b05fa5    4881c020000000          add rax, 0x20                                          
0x7e8de8b05fac    b90c000000              mov ecx, 0xc                                           
 ..  : init ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1"  .. 
0x7e8de8b05fb1    488908                  mov [rax], rcx                                         
 .. t ( this )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert .. 
0x7e8de8b05fb4    498b47f8                mov rax, [r15-0x8]                                     
 .. his )     this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      .. 
0x7e8de8b05fb8    4881c040000000          add rax, 0x40                                          
0x7e8de8b05fbf    b903000000              mov ecx, 0x3                                           
 ..   this.Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Pr .. 
0x7e8de8b05fc4    488908                  mov [rax], rcx                                         
 .. Category 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype .. 
0x7e8de8b05fc7    498b47f8                mov rax, [r15-0x8]                                     
 .. ory 12 =     this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p  .. 
0x7e8de8b05fcb    4881c028000000          add rax, 0x28                                          
 ..    this.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this. .. 
0x7e8de8b05fd2    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b05fd6    4881c140000000          add rcx, 0x40                                          
 .. is.Three 3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 .. 
0x7e8de8b05fdd    488b09                  mov rcx, [rcx]                                         
 ..  3 =      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     t .. 
0x7e8de8b05fe0    488908                  mov [rax], rcx                                         
 ..      this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.F .. 
0x7e8de8b05fe3    498b47f8                mov rax, [r15-0x8]                                     
 .. this.Prototype this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 .. 
0x7e8de8b05fe7    4881c028000000          add rax, 0x28                                          
0x7e8de8b05fee    488b00                  mov rax, [rax]                                         
0x7e8de8b05ff1    4983c610                add r14, 0x10                                          
0x7e8de8b05ff5    498906                  mov [r14], rax                                         
 .. pe this.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this .. 
0x7e8de8b05ff8    498946f8                mov [r14-0x8], rax                                     
 .. his.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twe .. 
0x7e8de8b05ffc    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06006    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. s.Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelv .. 
0x7e8de8b06009    b803000000              mov eax, 0x3                                           
0x7e8de8b0600e    4983c608                add r14, 0x8                                           
0x7e8de8b06012    498906                  mov [r14], rax                                         
 .. Three @ =    this.Prototype @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve  .. 
0x7e8de8b06015    48b8929480e88d7e0000    mov rax, 0x7e8de8809492       < string : 'init_assert1' >
0x7e8de8b0601f    4983c608                add r14, 0x8                                           
0x7e8de8b06023    498906                  mov [r14], rax                                         
0x7e8de8b06026    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b06030    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..  @ dup p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Su .. 
0x7e8de8b06033    498b47f8                mov rax, [r15-0x8]                                     
 .. p p 3 "init_assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ = .. 
0x7e8de8b06037    4881c028000000          add rax, 0x28                                          
0x7e8de8b0603e    488b00                  mov rax, [rax]                                         
0x7e8de8b06041    4983c608                add r14, 0x8                                           
0x7e8de8b06045    498906                  mov [r14], rax                                         
 .. assert1" assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this. .. 
0x7e8de8b06048    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06052    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. " assert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum thi .. 
0x7e8de8b06055    498b47f8                mov rax, [r15-0x8]                                     
 .. ert      this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Cat .. 
0x7e8de8b06059    4881c030000000          add rax, 0x30                                          
0x7e8de8b06060    48c7c100000000          mov rcx, 0x0                                           
 ..    this.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category  .. 
0x7e8de8b06067    488908                  mov [rax], rcx                                         
 .. s.Prototype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 +  .. 
0x7e8de8b0606a    498b47f8                mov rax, [r15-0x8]                                     
 .. totype @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this. .. 
0x7e8de8b0606e    4881c048000000          add rax, 0x48                                          
0x7e8de8b06075    b904000000              mov ecx, 0x4                                           
 .. @ p      this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototy .. 
0x7e8de8b0607a    488908                  mov [rax], rcx                                         
 ..   this.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ &  .. 
0x7e8de8b0607d    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Sum 0 =     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = thi .. 
0x7e8de8b06081    4881c038000000          add rax, 0x38                                          
0x7e8de8b06088    b90c000000              mov ecx, 0xc                                           
 ..     this.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3  .. 
0x7e8de8b0608d    488908                  mov [rax], rcx                                         
 .. is.Four 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_ .. 
0x7e8de8b06090    498b47f8                mov rax, [r15-0x8]                                     
 .. ur 4 =      this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_asser .. 
0x7e8de8b06094    4881c050000000          add rax, 0x50                                          
 ..       this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| .. 
0x7e8de8b0609b    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b0609f    4881c130000000          add rcx, 0x30                                          
 ..  this.Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| loca .. 
0x7e8de8b060a6    488b09                  mov rcx, [rcx]                                         
 .. Twelve 12 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPu .. 
0x7e8de8b060a9    488908                  mov [rax], rcx                                         
 .. 2 =     this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} lo .. 
0x7e8de8b060ac    498b47f8                mov rax, [r15-0x8]                                     
 ..    this.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locatio .. 
0x7e8de8b060b0    4881c030000000          add rax, 0x30                                          
0x7e8de8b060b7    4983c608                add r14, 0x8                                           
0x7e8de8b060bb    498906                  mov [r14], rax                                         
 .. his.Accum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPri .. 
0x7e8de8b060be    498b47f8                mov rax, [r15-0x8]                                     
 .. ccum this.Sum @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint as .. 
0x7e8de8b060c2    4881c020000000          add rax, 0x20                                          
0x7e8de8b060c9    488b00                  mov rax, [rax]                                         
 .. um @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     th .. 
0x7e8de8b060cc    b903000000              mov ecx, 0x3                                           
 ..  @ =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this .. 
0x7e8de8b060d1    4803c1                  add rax, rcx                                           
 ..  =       this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.A .. 
0x7e8de8b060d4    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b060d8    4881c128000000          add rcx, 0x28                                          
 ..     this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum  .. 
0x7e8de8b060df    488b09                  mov rcx, [rcx]                                         
0x7e8de8b060e2    4823c1                  and rax, rcx                                           
 ..  this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ .. 
0x7e8de8b060e5    488bc8                  mov rcx, rax                                           
0x7e8de8b060e8    498b06                  mov rax, [r14]                                         
0x7e8de8b060eb    4983ee08                sub r14, 0x8                                           
 .. his.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ t .. 
0x7e8de8b060ef    488908                  mov [rax], rcx                                         
 .. s.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ thi .. 
0x7e8de8b060f2    498b47f8                mov rax, [r15-0x8]                                     
 .. egory @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Fou .. 
0x7e8de8b060f6    4881c030000000          add rax, 0x30                                          
0x7e8de8b060fd    488b00                  mov rax, [rax]                                         
0x7e8de8b06100    4983c608                add r14, 0x8                                           
0x7e8de8b06104    498906                  mov [r14], rax                                         
 .. @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ *  .. 
0x7e8de8b06107    b803000000              mov eax, 0x3                                           
0x7e8de8b0610c    4983c608                add r14, 0x8                                           
0x7e8de8b06110    498906                  mov [r14], rax                                         
 .. 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * th .. 
0x7e8de8b06113    48b8ca9480e88d7e0000    mov rax, 0x7e8de88094ca       < string : 'init_assert2' >
0x7e8de8b0611d    4983c608                add r14, 0x8                                           
0x7e8de8b06121    498906                  mov [r14], rax                                         
 .. ype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =  .. 
0x7e8de8b06124    48b898d68fe88d7e0000    mov rax, 0x7e8de88fd698                                
0x7e8de8b0612e    4983c608                add r14, 0x8                                           
0x7e8de8b06132    498906                  mov [r14], rax                                         
 .. @ 3 "init_assert2" {| locationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 .. 
0x7e8de8b06135    49ba5007323f345b0000    mov r10, 0x5b343f320750                                
0x7e8de8b0613f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b06149    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0614c    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b06156    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. ationPush |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : t .. 
0x7e8de8b06159    498b47f8                mov rax, [r15-0x8]                                     
 .. Push |} locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.A .. 
0x7e8de8b0615d    4881c050000000          add rax, 0x50                                          
0x7e8de8b06164    4983c608                add r14, 0x8                                           
0x7e8de8b06168    498906                  mov [r14], rax                                         
 .. } locationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = .. 
0x7e8de8b0616b    498b47f8                mov rax, [r15-0x8]                                     
 .. ationPrint assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" p .. 
0x7e8de8b0616f    4881c040000000          add rax, 0x40                                          
0x7e8de8b06176    488b00                  mov rax, [rax]                                         
 .. nt assert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_ .. 
0x7e8de8b06179    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b0617d    4881c148000000          add rcx, 0x48                                          
 .. sert     this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_asser .. 
0x7e8de8b06184    488b09                  mov rcx, [rcx]                                         
 ..   this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" ass .. 
0x7e8de8b06187    480fafc1                imul rax, rcx                                          
 .. this.Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" asser .. 
0x7e8de8b0618b    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b0618f    4881c140000000          add rcx, 0x40                                          
 .. Accum this.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert     .. 
0x7e8de8b06196    488b09                  mov rcx, [rcx]                                         
0x7e8de8b06199    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b061a0    48f7f9                  idiv rcx                                               
 .. is.Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.P .. 
0x7e8de8b061a3    488bc8                  mov rcx, rax                                           
0x7e8de8b061a6    498b06                  mov rax, [r14]                                         
0x7e8de8b061a9    4983ee08                sub r14, 0x8                                           
 .. .Three @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Pro .. 
0x7e8de8b061ad    488908                  mov [rax], rcx                                         
 .. @ this.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype  .. 
0x7e8de8b061b0    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Four @ * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p   .. 
0x7e8de8b061b4    4881c050000000          add rax, 0x50                                          
0x7e8de8b061bb    488b00                  mov rax, [rax]                                         
0x7e8de8b061be    4983c608                add r14, 0x8                                           
0x7e8de8b061c2    498906                  mov [r14], rax                                         
 ..  * this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.S .. 
0x7e8de8b061c5    b804000000              mov eax, 0x4                                           
0x7e8de8b061ca    4983c608                add r14, 0x8                                           
0x7e8de8b061ce    498906                  mov [r14], rax                                         
 ..  this.Three @ / =      this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum .. 
0x7e8de8b061d1    48b8109580e88d7e0000    mov rax, 0x7e8de8809510                                
0x7e8de8b061db    4983c608                add r14, 0x8                                           
0x7e8de8b061df    498906                  mov [r14], rax                                         
 .. \n DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * thi .. 
0x7e8de8b061e2    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b061ec    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. DLListClone init : this.Accum = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.C .. 
0x7e8de8b061ef    48b8699580e88d7e0000    mov rax, 0x7e8de8809569       < string : 'init_assert3' >
0x7e8de8b061f9    4983c608                add r14, 0x8                                           
0x7e8de8b061fd    498906                  mov [r14], rax                                         
0x7e8de8b06200    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0620a    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. um = :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ .. 
0x7e8de8b0620d    498b47f8                mov rax, [r15-0x8]                                     
 .. :" ps "init_assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup  .. 
0x7e8de8b06211    4881c028000000          add rax, 0x28                                          
0x7e8de8b06218    488b00                  mov rax, [rax]                                         
0x7e8de8b0621b    4983c608                add r14, 0x8                                           
0x7e8de8b0621f    498906                  mov [r14], rax                                         
 .. assert3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "i .. 
0x7e8de8b06222    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0622c    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. t3" assert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_a .. 
0x7e8de8b0622f    498b47f8                mov rax, [r15-0x8]                                     
 .. ssert      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert .. 
0x7e8de8b06233    4881c030000000          add rax, 0x30                                          
0x7e8de8b0623a    4983c608                add r14, 0x8                                           
0x7e8de8b0623e    498906                  mov [r14], rax                                         
 .. t      this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" a .. 
0x7e8de8b06241    498b47f8                mov rax, [r15-0x8]                                     
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert .. 
0x7e8de8b06245    4881c020000000          add rax, 0x20                                          
0x7e8de8b0624c    488b00                  mov rax, [rax]                                         
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl .. 
0x7e8de8b0624f    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06253    4881c128000000          add rcx, 0x28                                          
 ..  @ p    this.Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl      .. 
0x7e8de8b0625a    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Categor .. 
0x7e8de8b0625d    480fafc1                imul rax, rcx                                          
 .. um this.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category  .. 
0x7e8de8b06261    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06265    4881c120000000          add rcx, 0x20                                          
 .. is.Category @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup .. 
0x7e8de8b0626c    488b09                  mov rcx, [rcx]                                         
0x7e8de8b0626f    482bc1                  sub rax, rcx                                           
 ..  @ this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "ini .. 
0x7e8de8b06272    488bc8                  mov rcx, rax                                           
0x7e8de8b06275    498b06                  mov rax, [r14]                                         
0x7e8de8b06278    4983ee08                sub r14, 0x8                                           
 ..  this.Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_ .. 
0x7e8de8b0627c    488908                  mov [rax], rcx                                         
 .. .Prototype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_asser .. 
0x7e8de8b0627f    498b47f8                mov rax, [r15-0x8]                                     
 .. otype @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" a .. 
0x7e8de8b06283    4881c030000000          add rax, 0x30                                          
0x7e8de8b0628a    488b00                  mov rax, [rax]                                         
0x7e8de8b0628d    4983c610                add r14, 0x10                                          
0x7e8de8b06291    498906                  mov [r14], rax                                         
 .. @ * this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert  .. 
0x7e8de8b06294    498946f8                mov [r14-0x8], rax                                     
 .. this.Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    t .. 
0x7e8de8b06298    49ba40fa313f345b0000    mov r10, 0x5b343f31fa40                                
0x7e8de8b062a2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b062ac    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. .Category @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this. .. 
0x7e8de8b062af    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b062b9    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. ategory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Pr .. 
0x7e8de8b062bc    b818000000              mov eax, 0x18                                          
0x7e8de8b062c1    4983c608                add r14, 0x8                                           
0x7e8de8b062c5    498906                  mov [r14], rax                                         
 .. ory @ - =    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Protot .. 
0x7e8de8b062c8    48b8979580e88d7e0000    mov rax, 0x7e8de8809597       < string : 'init_assert5' >
0x7e8de8b062d2    4983c608                add r14, 0x8                                           
0x7e8de8b062d6    498906                  mov [r14], rax                                         
0x7e8de8b062d9    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b062e3    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. @ dup hex p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum th .. 
0x7e8de8b062e6    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b062f0    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b062fa    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. x p 24  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Categ .. 
0x7e8de8b062fd    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b06307    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b06311    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  "init_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ t .. 
0x7e8de8b06314    498b47f8                mov rax, [r15-0x8]                                     
 .. t_assert5" assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.P .. 
0x7e8de8b06318    4881c020000000          add rax, 0x20                                          
0x7e8de8b0631f    488b00                  mov rax, [rax]                                         
0x7e8de8b06322    4983c610                add r14, 0x10                                          
0x7e8de8b06326    498906                  mov [r14], rax                                         
 .. assert decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @  .. 
0x7e8de8b06329    498946f8                mov [r14-0x8], rax                                     
 .. rt decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * =  .. 
0x7e8de8b0632d    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06337    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  decimal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = th .. 
0x7e8de8b0633a    b80c000000              mov eax, 0xc                                           
0x7e8de8b0633f    4983c608                add r14, 0x8                                           
0x7e8de8b06343    498906                  mov [r14], rax                                         
 .. imal nl     this.Category @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.S .. 
0x7e8de8b06346    48b8c59580e88d7e0000    mov rax, 0x7e8de88095c5       < string : 'init_assert7' >
0x7e8de8b06350    4983c608                add r14, 0x8                                           
0x7e8de8b06354    498906                  mov [r14], rax                                         
0x7e8de8b06357    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b06361    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..  @ dup p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" .. 
0x7e8de8b06364    498b47f8                mov rax, [r15-0x8]                                     
 .. p p 12  "init_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 3 .. 
0x7e8de8b06368    4881c028000000          add rax, 0x28                                          
0x7e8de8b0636f    488b00                  mov rax, [rax]                                         
0x7e8de8b06372    4983c608                add r14, 0x8                                           
0x7e8de8b06376    498906                  mov [r14], rax                                         
 .. t_assert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_asse .. 
0x7e8de8b06379    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06383    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. ert7" assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8"  .. 
0x7e8de8b06386    498b47f8                mov rax, [r15-0x8]                                     
 ..  assert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" asser .. 
0x7e8de8b0638a    4881c030000000          add rax, 0x30                                          
0x7e8de8b06391    4983c608                add r14, 0x8                                           
0x7e8de8b06395    498906                  mov [r14], rax                                         
 .. ert    this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    .. 
0x7e8de8b06398    498b47f8                mov rax, [r15-0x8]                                     
 ..   this.Prototype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this .. 
0x7e8de8b0639c    4881c020000000          add rax, 0x20                                          
0x7e8de8b063a3    488b00                  mov rax, [rax]                                         
 .. otype @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.C .. 
0x7e8de8b063a6    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b063aa    4881c128000000          add rcx, 0x28                                          
 ..  @ p    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Catego .. 
0x7e8de8b063b1    488b09                  mov rcx, [rcx]                                         
0x7e8de8b063b4    480fafc1                imul rax, rcx                                          
 .. .Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Pr .. 
0x7e8de8b063b8    488bc8                  mov rcx, rax                                           
0x7e8de8b063bb    498b06                  mov rax, [r14]                                         
0x7e8de8b063be    4983ee08                sub r14, 0x8                                           
 .. um this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prot .. 
0x7e8de8b063c2    488908                  mov [rax], rcx                                         
 ..  this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Protot .. 
0x7e8de8b063c5    498b47f8                mov rax, [r15-0x8]                                     
 .. .Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ .. 
0x7e8de8b063c9    4881c030000000          add rax, 0x30                                          
0x7e8de8b063d0    488b00                  mov rax, [rax]                                         
0x7e8de8b063d3    4983c610                add r14, 0x10                                          
0x7e8de8b063d7    498906                  mov [r14], rax                                         
 .. ory @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup .. 
0x7e8de8b063da    498946f8                mov [r14-0x8], rax                                     
 .. @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p = .. 
0x7e8de8b063de    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b063e8    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =   .. 
0x7e8de8b063eb    48b8f09580e88d7e0000    mov rax, 0x7e8de88095f0       < string : 'testing yada' >
0x7e8de8b063f5    4983c608                add r14, 0x8                                           
0x7e8de8b063f9    498906                  mov [r14], rax                                         
 .. @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this .. 
0x7e8de8b063fc    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b06406    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Ca .. 
0x7e8de8b06409    b824000000              mov eax, 0x24                                          
0x7e8de8b0640e    4983c608                add r14, 0x8                                           
0x7e8de8b06412    498906                  mov [r14], rax                                         
 .. this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Categ .. 
0x7e8de8b06415    48b81e9680e88d7e0000    mov rax, 0x7e8de880961e       < string : 'init_assert8' >
0x7e8de8b0641f    4983c608                add r14, 0x8                                           
0x7e8de8b06423    498906                  mov [r14], rax                                         
0x7e8de8b06426    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b06430    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..  yada" ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && .. 
0x7e8de8b06433    498b47f8                mov rax, [r15-0x8]                                     
 .. " ps 36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup  .. 
0x7e8de8b06437    4881c030000000          add rax, 0x30                                          
0x7e8de8b0643e    4983c608                add r14, 0x8                                           
0x7e8de8b06442    498906                  mov [r14], rax                                         
 ..  36 "init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =  .. 
0x7e8de8b06445    498b47f8                mov rax, [r15-0x8]                                     
 .. init_assert8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    th .. 
0x7e8de8b06449    4881c020000000          add rax, 0x20                                          
0x7e8de8b06450    488b00                  mov rax, [rax]                                         
 .. 8" assert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this .. 
0x7e8de8b06453    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06457    4881c128000000          add rcx, 0x28                                          
 .. sert    this.Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Cate .. 
0x7e8de8b0645e    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this. .. 
0x7e8de8b06461    482bc1                  sub rax, rcx                                           
0x7e8de8b06464    4983c610                add r14, 0x10                                          
0x7e8de8b06468    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Pr .. 
0x7e8de8b0646b    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Protot .. 
0x7e8de8b0646f    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06479    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0647c    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0647f    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b06483    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototyp .. 
0x7e8de8b06487    488908                  mov [rax], rcx                                         
 .. egory @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & .. 
0x7e8de8b0648a    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ this.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup  .. 
0x7e8de8b0648e    4881c030000000          add rax, 0x30                                          
0x7e8de8b06495    4983c608                add r14, 0x8                                           
0x7e8de8b06499    498906                  mov [r14], rax                                         
 .. his.Prototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =  .. 
0x7e8de8b0649c    498b47f8                mov rax, [r15-0x8]                                     
 .. rototype @ - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    th .. 
0x7e8de8b064a0    4881c020000000          add rax, 0x20                                          
0x7e8de8b064a7    488b00                  mov rax, [rax]                                         
0x7e8de8b064aa    4983c608                add r14, 0x8                                           
0x7e8de8b064ae    498906                  mov [r14], rax                                         
 .. - dup p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum th .. 
0x7e8de8b064b1    498b47f8                mov rax, [r15-0x8]                                     
 ..  p =    this.Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Pr .. 
0x7e8de8b064b5    4881c028000000          add rax, 0x28                                          
0x7e8de8b064bc    488b00                  mov rax, [rax]                                         
0x7e8de8b064bf    4983c608                add r14, 0x8                                           
0x7e8de8b064c3    498906                  mov [r14], rax                                         
 .. .Sum this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =  .. 
0x7e8de8b064c6    498bc6                  mov rax, r14                                           
0x7e8de8b064c9    4983ee08                sub r14, 0x8                                           
0x7e8de8b064cd    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b064d1    7410                    jz 0xe8b064e3                 < DLListClone.init+1361 >
0x7e8de8b064d3    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b064d8    7409                    jz 0xe8b064e3                 < DLListClone.init+1361 >
0x7e8de8b064da    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b064e1    eb07                    jmp 0x7e8de8b064ea            < DLListClone.init+1368 >
0x7e8de8b064e3    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b064ea    0f8400000000            jz 0x7e8de8b064f0             < DLListClone.init+1374 >
 .. m this.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     .. 
0x7e8de8b064f0    498b06                  mov rax, [r14]                                         
0x7e8de8b064f3    4983c608                add r14, 0x8                                           
0x7e8de8b064f7    498906                  mov [r14], rax                                         
 .. is.Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     thi .. 
0x7e8de8b064fa    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06504    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b06507    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0650a    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0650e    4983ee10                sub r14, 0x10                                          
 .. .Category @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this. .. 
0x7e8de8b06512    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum t .. 
0x7e8de8b06515    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.C .. 
0x7e8de8b06519    4881c030000000          add rax, 0x30                                          
0x7e8de8b06520    4983c608                add r14, 0x8                                           
0x7e8de8b06524    498906                  mov [r14], rax                                         
 .. is.Prototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Categ .. 
0x7e8de8b06527    498b47f8                mov rax, [r15-0x8]                                     
 .. ototype @ && dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ .. 
0x7e8de8b0652b    4881c020000000          add rax, 0x20                                          
0x7e8de8b06532    488b00                  mov rax, [rax]                                         
 .. & dup p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Proto .. 
0x7e8de8b06535    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06539    4881c128000000          add rcx, 0x28                                          
 ..  p =    this.Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype  .. 
0x7e8de8b06540    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =  .. 
0x7e8de8b06543    4823c1                  and rax, rcx                                           
0x7e8de8b06546    4983c610                add r14, 0x10                                          
0x7e8de8b0654a    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =    .. 
0x7e8de8b0654d    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     th .. 
0x7e8de8b06551    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0655b    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0655e    498b0e                  mov rcx, [r14]                                         
0x7e8de8b06561    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b06565    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this .. 
0x7e8de8b06569    488908                  mov [rax], rcx                                         
 .. egory @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum  .. 
0x7e8de8b0656c    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ this.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this. .. 
0x7e8de8b06570    4881c050000000          add rax, 0x50                                          
 .. s.Prototype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Catego .. 
0x7e8de8b06577    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b0657b    4881c128000000          add rcx, 0x28                                          
 .. totype @ & dup p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @  .. 
0x7e8de8b06582    488b09                  mov rcx, [rcx]                                         
 .. up p =    this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototy .. 
0x7e8de8b06585    488908                  mov [rax], rcx                                         
 ..     this.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ | .. 
0x7e8de8b06588    498b47f8                mov rax, [r15-0x8]                                     
 .. his.Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup .. 
0x7e8de8b0658c    4881c030000000          add rax, 0x30                                          
0x7e8de8b06593    4983c608                add r14, 0x8                                           
0x7e8de8b06597    498906                  mov [r14], rax                                         
 .. Accum this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p = .. 
0x7e8de8b0659a    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.Prototype @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =      .. 
0x7e8de8b0659e    4881c020000000          add rax, 0x20                                          
0x7e8de8b065a5    488b00                  mov rax, [rax]                                         
 .. type @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum th .. 
0x7e8de8b065a8    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b065ac    4881c128000000          add rcx, 0x28                                          
 .. @ =     this.Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Ca .. 
0x7e8de8b065b3    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ thi .. 
0x7e8de8b065b6    480bc1                  or rax, rcx                                            
0x7e8de8b065b9    4983c610                add r14, 0x10                                          
0x7e8de8b065bd    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this. .. 
0x7e8de8b065c0    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prot .. 
0x7e8de8b065c4    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b065ce    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b065d1    498b0e                  mov rcx, [r14]                                         
0x7e8de8b065d4    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b065d8    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Protot .. 
0x7e8de8b065dc    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @  .. 
0x7e8de8b065df    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup .. 
0x7e8de8b065e3    4881c030000000          add rax, 0x30                                          
0x7e8de8b065ea    4983c608                add r14, 0x8                                           
0x7e8de8b065ee    498906                  mov [r14], rax                                         
 .. is.Prototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p = .. 
0x7e8de8b065f1    498b47f8                mov rax, [r15-0x8]                                     
 .. ototype @ | dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =      .. 
0x7e8de8b065f5    4881c020000000          add rax, 0x20                                          
0x7e8de8b065fc    488b00                  mov rax, [rax]                                         
 ..  dup p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Catego .. 
0x7e8de8b065ff    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06603    4881c128000000          add rcx, 0x28                                          
 .. p =     this.Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @  .. 
0x7e8de8b0660a    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _as .. 
0x7e8de8b0660d    480bc1                  or rax, rcx                                            
0x7e8de8b06610    0f95c0                  setnz al                                               
0x7e8de8b06613    480fb6c0                movzx rax, al                                          
0x7e8de8b06617    4983c610                add r14, 0x10                                          
0x7e8de8b0661b    498906                  mov [r14], rax                                         
 .. m this.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _asser .. 
0x7e8de8b0661e    498946f8                mov [r14-0x8], rax                                     
 .. is.Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    .. 
0x7e8de8b06622    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0662c    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0662f    498b0e                  mov rcx, [r14]                                         
0x7e8de8b06632    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b06636    4983ee10                sub r14, 0x10                                          
 .. .Category @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    t .. 
0x7e8de8b0663a    488908                  mov [rax], rcx                                         
 .. ory @ this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Su .. 
0x7e8de8b0663d    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p .. 
0x7e8de8b06641    4881c030000000          add rax, 0x30                                          
0x7e8de8b06648    4983c608                add r14, 0x8                                           
0x7e8de8b0664c    498906                  mov [r14], rax                                         
 .. s.Prototype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p     .. 
0x7e8de8b0664f    498b47f8                mov rax, [r15-0x8]                                     
 .. totype @ || dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this. .. 
0x7e8de8b06653    4881c020000000          add rax, 0x20                                          
0x7e8de8b0665a    488b00                  mov rax, [rax]                                         
 ..  dup p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ .. 
0x7e8de8b0665d    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06661    4881c128000000          add rcx, 0x28                                          
 .. p =     this.Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    .. 
0x7e8de8b06668    488b09                  mov rcx, [rcx]                                         
 .. .Sum this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 .. 
0x7e8de8b0666b    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b06672    48f7f9                  idiv rcx                                               
0x7e8de8b06675    4983c610                add r14, 0x10                                          
0x7e8de8b06679    498906                  mov [r14], rax                                         
 .. um this.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 t .. 
0x7e8de8b0667c    498946f8                mov [r14-0x8], rax                                     
 .. his.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testi .. 
0x7e8de8b06680    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0668a    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0668d    498b0e                  mov rcx, [r14]                                         
0x7e8de8b06690    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b06694    4983ee10                sub r14, 0x10                                          
 .. s.Category @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing .. 
0x7e8de8b06698    488908                  mov [rax], rcx                                         
 .. gory @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada  .. 
0x7e8de8b0669b    498b47f8                mov rax, [r15-0x8]                                     
 .. @ this.Prototype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 .. 
0x7e8de8b0669f    4881c020000000          add rax, 0x20                                          
0x7e8de8b066a6    488b00                  mov rax, [rax]                                         
0x7e8de8b066a9    4983c610                add r14, 0x10                                          
0x7e8de8b066ad    498906                  mov [r14], rax                                         
 .. otype @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12  .. 
0x7e8de8b066b0    498946f8                mov [r14-0x8], rax                                     
 .. e @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3  .. 
0x7e8de8b066b4    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b066be    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. @ / dup p =     this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 :  .. 
0x7e8de8b066c1    b80c000000              mov eax, 0xc                                           
0x7e8de8b066c6    4983c608                add r14, 0x8                                           
0x7e8de8b066ca    498906                  mov [r14], rax                                         
0x7e8de8b066cd    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b066d7    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 ..   this.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above s .. 
0x7e8de8b066da    498b47f8                mov rax, [r15-0x8]                                     
 .. s.Category @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should .. 
0x7e8de8b066de    4881c030000000          add rax, 0x30                                          
0x7e8de8b066e5    488b00                  mov rax, [rax]                                         
0x7e8de8b066e8    4983c608                add r14, 0x8                                           
0x7e8de8b066ec    498906                  mov [r14], rax                                         
 .. gory @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (appr .. 
0x7e8de8b066ef    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b066f9    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. @ dup p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approxima .. 
0x7e8de8b066fc    498b47f8                mov rax, [r15-0x8]                                     
 ..  p 12 _assert    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) .. 
0x7e8de8b06700    4881c028000000          add rax, 0x28                                          
0x7e8de8b06707    488b00                  mov rax, [rax]                                         
0x7e8de8b0670a    4983c608                add r14, 0x8                                           
0x7e8de8b0670e    498906                  mov [r14], rax                                         
 .. t    this.Sum @ p    this.Prototype @ p    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps  .. 
0x7e8de8b06711    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0671b    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0671e    48b8959680e88d7e0000    mov rax, 0x7e8de8809695                                
0x7e8de8b06728    4983c608                add r14, 0x8                                           
0x7e8de8b0672c    498906                  mov [r14], rax                                         
 .. ut above should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.si .. 
0x7e8de8b0672f    49bba607b0e88d7e0000    mov r11, 0x7e8de8b007a6                                
0x7e8de8b06739    49ffd3                  call r11                      < System.ddps : 0x00007e8de8b007a6 >
 ..  should (approximately) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p n .. 
0x7e8de8b0673c    49ba40fa313f345b0000    mov r10, 0x5b343f31fa40                                
0x7e8de8b06746    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b06750    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b06753    48b84e9780e88d7e0000    mov rax, 0x7e8de880974e                                
0x7e8de8b0675d    4983c608                add r14, 0x8                                           
0x7e8de8b06761    498906                  mov [r14], rax                                         
 .. ly) read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p thi .. 
0x7e8de8b06764    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0676e    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  read" ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.s .. 
0x7e8de8b06771    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b06775    4881c000000000          add rax, 0x0                                           
0x7e8de8b0677c    4983c608                add r14, 0x8                                           
0x7e8de8b06780    498906                  mov [r14], rax                                         
 .. " ddps    hex     "\nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ .. 
0x7e8de8b06783    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0678d    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b06790    48b86f9780e88d7e0000    mov rax, 0x7e8de880976f                                
0x7e8de8b0679a    4983c608                add r14, 0x8                                           
0x7e8de8b0679e    498906                  mov [r14], rax                                         
 .. nthis = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum .. 
0x7e8de8b067a1    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b067ab    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. is = " ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum th .. 
0x7e8de8b067ae    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b067b2    488b00                  mov rax, [rax]                                         
0x7e8de8b067b5    4983c608                add r14, 0x8                                           
0x7e8de8b067b9    498906                  mov [r14], rax                                         
 .. ps this p     "\nthis @ = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prot .. 
0x7e8de8b067bc    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b067c6    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b067c9    48b8979780e88d7e0000    mov rax, 0x7e8de8809797                                
0x7e8de8b067d3    4983c608                add r14, 0x8                                           
0x7e8de8b067d7    498906                  mov [r14], rax                                         
 ..  = " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     thi .. 
0x7e8de8b067da    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b067e4    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. " ps this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this t .. 
0x7e8de8b067e7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b067eb    4881c000000000          add rax, 0x0                                           
0x7e8de8b067f2    4983c608                add r14, 0x8                                           
0x7e8de8b067f6    498906                  mov [r14], rax                                         
 .. this @ p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.s .. 
0x7e8de8b067f9    48b8f793dbe88d7e0000    mov rax, 0x7e8de8db93f7       < string : 'X' >
0x7e8de8b06803    488b00                  mov rax, [rax]                                         
0x7e8de8b06806    4983c608                add r14, 0x8                                           
0x7e8de8b0680a    498906                  mov [r14], rax                                         
 .. p     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ d .. 
0x7e8de8b0680d    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06817    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..     "\nthis.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dum .. 
0x7e8de8b0681a    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b06824    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0682e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. this.size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     d .. 
0x7e8de8b06831    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b06835    4881c000000000          add rax, 0x0                                           
0x7e8de8b0683c    4983c610                add r14, 0x10                                          
0x7e8de8b06840    498906                  mov [r14], rax                                         
 .. size = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decima .. 
0x7e8de8b06843    498946f8                mov [r14-0x8], rax                                     
 ..  = " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal    .. 
0x7e8de8b06847    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b06851    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  " ps this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal      .. 
0x7e8de8b06854    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b06858    4881c000000000          add rax, 0x0                                           
0x7e8de8b0685f    4983c608                add r14, 0x8                                           
0x7e8de8b06863    498906                  mov [r14], rax                                         
 ..  this.size @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this. .. 
0x7e8de8b06866    48b8f793dbe88d7e0000    mov rax, 0x7e8de8db93f7       < string : 'X' >
0x7e8de8b06870    488b00                  mov rax, [rax]                                         
0x7e8de8b06873    4983c608                add r14, 0x8                                           
0x7e8de8b06877    498906                  mov [r14], rax                                         
 .. ize @ p nl     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ .. 
0x7e8de8b0687a    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b06884    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0688e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. l     this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\ .. 
0x7e8de8b06891    498b47f8                mov rax, [r15-0x8]                                     
 ..  this dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccu .. 
0x7e8de8b06895    4881c050000000          add rax, 0x50                                          
0x7e8de8b0689c    4983c608                add r14, 0x8                                           
0x7e8de8b068a0    498906                  mov [r14], rax                                         
 .. dup p this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum shou .. 
0x7e8de8b068a3    498b47f8                mov rax, [r15-0x8]                                     
 ..  this.size @ dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be .. 
0x7e8de8b068a7    4881c028000000          add rax, 0x28                                          
0x7e8de8b068ae    488b00                  mov rax, [rax]                                         
0x7e8de8b068b1    4983c610                add r14, 0x10                                          
0x7e8de8b068b5    498906                  mov [r14], rax                                         
 ..  dump     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 .. 
0x7e8de8b068b8    498946f8                mov [r14-0x8], rax                                     
 .. p     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  .. 
0x7e8de8b068bc    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b068c6    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b068c9    498b0e                  mov rcx, [r14]                                         
0x7e8de8b068cc    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b068d0    4983ee10                sub r14, 0x10                                          
 ..     this.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  a .. 
0x7e8de8b068d4    488908                  mov [rax], rcx                                         
 .. is.Accum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert  .. 
0x7e8de8b068d7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b068db    4881c000000000          add rax, 0x0                                           
0x7e8de8b068e2    4983c608                add r14, 0x8                                           
0x7e8de8b068e6    498906                  mov [r14], rax                                         
 .. cum this.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p     .. 
0x7e8de8b068e9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b068ed    4881c000000000          add rax, 0x0                                           
0x7e8de8b068f4    4983c608                add r14, 0x8                                           
0x7e8de8b068f8    498906                  mov [r14], rax                                         
 .. his.Prototype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this. .. 
0x7e8de8b068fb    48b8f793dbe88d7e0000    mov rax, 0x7e8de8db93f7       < string : 'X' >
0x7e8de8b06905    488b00                  mov rax, [rax]                                         
0x7e8de8b06908    4983c608                add r14, 0x8                                           
0x7e8de8b0690c    498906                  mov [r14], rax                                         
 .. totype @ dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Categor .. 
0x7e8de8b0690f    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b06919    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b06923    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. dup p =     this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 1 .. 
0x7e8de8b06926    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b06930    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0693a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. this this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategor .. 
0x7e8de8b0693d    498b47f8                mov rax, [r15-0x8]                                     
 .. this.size @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory sho .. 
0x7e8de8b06941    4881c050000000          add rax, 0x50                                          
0x7e8de8b06948    488b00                  mov rax, [rax]                                         
0x7e8de8b0694b    4983c610                add r14, 0x10                                          
0x7e8de8b0694f    498906                  mov [r14], rax                                         
 .. e @ dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 1 .. 
0x7e8de8b06952    498946f8                mov [r14-0x8], rax                                     
 .. dump     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 :  .. 
0x7e8de8b06956    b803000000              mov eax, 0x3                                           
0x7e8de8b0695b    4983c608                add r14, 0x8                                           
0x7e8de8b0695f    498906                  mov [r14], rax                                         
 .. mp     decimal     this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : as .. 
0x7e8de8b06962    48b8d89780e88d7e0000    mov rax, 0x7e8de88097d8                                
0x7e8de8b0696c    4983c608                add r14, 0x8                                           
0x7e8de8b06970    498906                  mov [r14], rax                                         
0x7e8de8b06973    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0697d    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. ccum should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b06980    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0698a    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. should be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b0698d    498b47f8                mov rax, [r15-0x8]                                     
 .. d be 3 : assert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b06991    4881c020000000          add rax, 0x20                                          
0x7e8de8b06998    488b00                  mov rax, [rax]                                         
0x7e8de8b0699b    4983c610                add r14, 0x10                                          
0x7e8de8b0699f    498906                  mov [r14], rax                                         
 .. sert9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b069a2    498946f8                mov [r14-0x8], rax                                     
 .. 9 ="  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b069a6    b80c000000              mov eax, 0xc                                           
0x7e8de8b069ab    4983c608                add r14, 0x8                                           
0x7e8de8b069af    498906                  mov [r14], rax                                         
 .. "  assert p    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b069b2    48b8419880e88d7e0000    mov rax, 0x7e8de8809841                                
0x7e8de8b069bc    4983c608                add r14, 0x8                                           
0x7e8de8b069c0    498906                  mov [r14], rax                                         
0x7e8de8b069c3    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b069cd    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. ory should be 12 : assert10 =" assert p;  .. 
0x7e8de8b069d0    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b069da    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b069dd    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b069e1    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b069e5    4983ee08                sub r14, 0x8                                           
 .. ry should be 12 : assert10 =" assert p;  .. 
0x7e8de8b069e9    c3                      ret                                                    
Word_Disassemble : word - 'init' :: codeSize = 2648
Word : 0x00007e8de8dba297 :: Compiled at : 0x00007e8de8b05f92
 =============================
::> 'wdiss' was called at namespaces/test/classTest.csl 162.18 <::

DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 3 init_assert1  : ok

 3
Run Time Location : namespaces/test/classTest.csl 125.98 init_assert2  : ok

 
 DLListClone init : this.Accum = : init_assert3  : ok

 3 0x0000000000000018 init_assert5  : ok


 12 init_assert7  : ok

 3 36 testing yada init_assert8  : ok

 9 1 0 15 1 4 12 4 3 
 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read 
this =  0x00007e8de88fd6b8 
this @ =  0x00007e8de88fd6d0 
this.size =  0x0000000000000058
 0x00007e8de88fd6b8
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x00007e8de88fd6b8 : Number = 88 :: (little endian dump)
0x00007e8de88fd6b8 :  d0 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd6c8 :  02 00 00 00 00 00 00 00  b8 d6 8f e8 8d 7e 00 00  ........ .....~.. 
0x00007e8de88fd6d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000003
Dump at : namespaces/test/classTest.csl : 165.27 :
Dump : Address = 0x00007e8de88fd6b8 : Number = 88 :: (little endian dump)
0x00007e8de88fd6b8 :  d0 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd6c8 :  02 00 00 00 00 00 00 00  b8 d6 8f e8 8d 7e 00 00  ........ .....~.. 
0x00007e8de88fd6d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
Accum should be 3 : assert9 =  : ok

 3 
Category should be 12 : assert10 =  : ok

 12
DataStack at : namespaces/test/classTest.csl : 165.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 
this =  0x00007e8de8db95a7
Dump at : namespaces/test/classTest.csl : 169.27 :
Dump : Address = 0x00007e8de88fd6b8 : Number = 88 :: (little endian dump)
0x00007e8de88fd6b8 :  d0 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd6c8 :  02 00 00 00 00 00 00 00  b8 d6 8f e8 8d 7e 00 00  ........ .....~.. 
0x00007e8de88fd6d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/classTest.csl : 170.32 :
Dump : Address = 0x00007e8de88fd6b8 : Number = 88 :: (little endian dump)
0x00007e8de88fd6b8 :  d0 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd6c8 :  02 00 00 00 00 00 00 00  b8 d6 8f e8 8d 7e 00 00  ........ .....~.. 
0x00007e8de88fd6d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 


DataStack at : namespaces/test/classTest.csl : 171.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 DLListClone size = 88
 Clone size  : ok

 DLListClone init test :   : ok

 
this @ size @ p  88 
this.size =  88
Using Namespaces :> C Root DLListClone DLList DLLNode Buffer Class Integer Pointer Compiler Logic Int Shell int List void Combinators Bits Defines System User libc OpenVmTil Lexer Interpreter Debug int64 byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 
 
printf output = this.size = 88
 0x00007e8de88fd6b8 88
Dump at : namespaces/test/classTest.csl : 183.48 :
Dump : Address = 0x00007e8de88fd6b8 : Number = 88 :: (little endian dump)
0x00007e8de88fd6b8 :  d0 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd6c8 :  02 00 00 00 00 00 00 00  b8 d6 8f e8 8d 7e 00 00  ........ .....~.. 
0x00007e8de88fd6d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 


 -----------------------------
 'this' semantics have yet to be solidified namespaces/test/classTest.csl 185.53
 -----------------------------


Dump at : namespaces/test/classTest.csl : 186.32 :
Dump : Address = 0x00007e8de88fd6b8 : Number = 88 :: (little endian dump)
0x00007e8de88fd6b8 :  d0 d6 8f e8 8d 7e 00 00  01 00 00 00 00 00 00 00  .....~.. ........ 
0x00007e8de88fd6c8 :  02 00 00 00 00 00 00 00  b8 d6 8f e8 8d 7e 00 00  ........ .....~.. 
0x00007e8de88fd6d8 :  0c 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6e8 :  04 00 00 00 00 00 00 00  0c 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd6f8 :  03 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd708 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 DLListClone init test4 :   : ok


including namespaces/test/math.csl at namespaces/test/initTest.csl : 86.41 ...
 
math test

 =============================
C.t* <:> csl compiled word
SourceCode for C.t* :> 
: t* ( a b c d ) a @ b @ c @ d @ * * * return tos ; 
Source code file location of t* : "namespaces/test/math.csl" : 25.2 :: we are now at : namespaces/test/math.csl : 26.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b06cbe -- code size = 93 bytes
TypeSignature : 
 -----------------------------
Word :: C.t* : definition = 0x00007e8de8b06cbe : disassembly at namespaces/test/math.csl : 26.16 :
0x7e8de8b06cbe    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b06cc2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b06cc6    4981c608000000          add r14, 0x8                                           
 ..                      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06ccd    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b06cd1    4983c608                add r14, 0x8                                           
0x7e8de8b06cd5    498906                  mov [r14], rax                                         
 ..                  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06cd8    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b06cdc    4983c608                add r14, 0x8                                           
0x7e8de8b06ce0    498906                  mov [r14], rax                                         
 ..              : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06ce3    498b47f0                mov rax, [r15-0x10]                                    
 ..          : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06ce7    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b06ceb    480fafc1                imul rax, rcx                                          
 ..      : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06cef    488bc8                  mov rcx, rax                                           
0x7e8de8b06cf2    498b06                  mov rax, [r14]                                         
0x7e8de8b06cf5    4983ee08                sub r14, 0x8                                           
0x7e8de8b06cf9    480fafc1                imul rax, rcx                                          
 ..    : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06cfd    488bc8                  mov rcx, rax                                           
0x7e8de8b06d00    498b06                  mov rax, [r14]                                         
0x7e8de8b06d03    4983ee08                sub r14, 0x8                                           
 ..  : t* ( a b c d ) a @ b @ c @ d @ * * * return tos ;  .. 
0x7e8de8b06d07    480fafc1                imul rax, rcx                                          
0x7e8de8b06d0b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b06d0f    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b06d13    4983ee18                sub r14, 0x18                                          
0x7e8de8b06d17    498906                  mov [r14], rax                                         
 ..  d ) a @ b @ c @ d @ * * * return tos ; 
0x7e8de8b06d1a    c3                      ret                                                    
Word_Disassemble : word - 't*' :: codeSize = 93
Word : 0x00007e8de8dcc8a7 :: Compiled at : 0x00007e8de8b06cbe
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 26.16 <::

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ <<= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 44.2 :: we are now at : namespaces/test/math.csl : 45.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b06ec9 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x00007e8de8b06ec9 : disassembly at namespaces/test/math.csl : 45.17 :
0x7e8de8b06ec9    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b06ecd    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b06ed1    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x7e8de8b06ed8    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                   : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x7e8de8b06edc    49d367f0                shl qword [r15-0x10], cl                               
 ..               : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x7e8de8b06ee0    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b06ee4    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b06ee8    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b06eec    4983ee08                sub r14, 0x8                                           
0x7e8de8b06ef0    498906                  mov [r14], rax                                         
   : moe ( n m ) n m @ <<= n @ return tos ;  .. 
0x7e8de8b06ef3    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x00007e8de8dbde17 :: Compiled at : 0x00007e8de8b06ec9
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 45.17 <::
 moe_assert1  : ok

 moe_assert2  : ok

 moe_assert3  : ok

 moe_assert3  : ok



 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :> 
: moe ( n m ) n <<= m n return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 53.2 :: we are now at : namespaces/test/math.csl : 54.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b06f29 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: Infix.moe : definition = 0x00007e8de8b06f29 : disassembly at namespaces/test/math.csl : 54.17 :
0x7e8de8b06f29    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b06f2d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b06f31    4981c608000000          add r14, 0x8                                           
 ..                   : moe ( n m ) n <<= m n return tos ;  .. 
0x7e8de8b06f38    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                       : moe ( n m ) n <<= m n return tos ;  .. 
0x7e8de8b06f3c    49d367f0                shl qword [r15-0x10], cl                               
 ..                 : moe ( n m ) n <<= m n return tos ;  .. 
0x7e8de8b06f40    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b06f44    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b06f48    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b06f4c    4983ee08                sub r14, 0x8                                           
0x7e8de8b06f50    498906                  mov [r14], rax                                         
 ..    : moe ( n m ) n <<= m n return tos ;  .. 
0x7e8de8b06f53    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x00007e8de8dda9ef :: Compiled at : 0x00007e8de8b06f29
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 54.17 <::

 =============================
Infix.moe <:> csl compiled word
SourceCode for Infix.moe :> 
: moe ( n m ) n >>= m n return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 56.2 :: we are now at : namespaces/test/math.csl : 57.20
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b06f59 -- code size = 43 bytes
TypeSignature : 
 -----------------------------
Word :: Infix.moe : definition = 0x00007e8de8b06f59 : disassembly at namespaces/test/math.csl : 57.20 :
0x7e8de8b06f59    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b06f5d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b06f61    4981c608000000          add r14, 0x8                                           
 ..                   : moe ( n m ) n >>= m n return tos ;  .. 
0x7e8de8b06f68    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                       : moe ( n m ) n >>= m n return tos ;  .. 
0x7e8de8b06f6c    49d36ff0                shr qword [r15-0x10], cl                               
 ..                 : moe ( n m ) n >>= m n return tos ;  .. 
0x7e8de8b06f70    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b06f74    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b06f78    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b06f7c    4983ee08                sub r14, 0x8                                           
0x7e8de8b06f80    498906                  mov [r14], rax                                         
 ..    : moe ( n m ) n >>= m n return tos ;  .. 
0x7e8de8b06f83    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 43
Word : 0x00007e8de8ddbb3f :: Compiled at : 0x00007e8de8b06f59
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 57.20 <::
 128 65536 
should show 128 65536
 2 1 
should show 2 1

 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ *= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 67.2 :: we are now at : namespaces/test/math.csl : 68.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b07019 -- code size = 51 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x00007e8de8b07019 : disassembly at namespaces/test/math.csl : 68.17 :
0x7e8de8b07019    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0701d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b07021    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x7e8de8b07028    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                         : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x7e8de8b0702c    498b47f0                mov rax, [r15-0x10]                                    
 ..                   : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x7e8de8b07030    480fafc1                imul rax, rcx                                          
0x7e8de8b07034    498947f0                mov [r15-0x10], rax                                    
 ..                : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x7e8de8b07038    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0703c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b07040    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b07044    4983ee08                sub r14, 0x8                                           
0x7e8de8b07048    498906                  mov [r14], rax                                         
 .. : moe ( n m ) n m @ *= n @ return tos ;  .. 
0x7e8de8b0704b    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 51
Word : 0x00007e8de8ddf94f :: Compiled at : 0x00007e8de8b07019
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 68.17 <::


 =============================
C.moe <:> csl compiled word
SourceCode for C.moe :> 
: moe ( n m ) n m @ /= n @ return tos ; 
Source code file location of moe : "namespaces/test/math.csl" : 71.2 :: we are now at : namespaces/test/math.csl : 72.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b07051 -- code size = 57 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe : definition = 0x00007e8de8b07051 : disassembly at namespaces/test/math.csl : 72.17 :
0x7e8de8b07051    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b07055    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b07059    4981c608000000          add r14, 0x8                                           
 ..                       : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x7e8de8b07060    498b4ff8                mov rcx, [r15-0x8]                                     
 ..                         : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x7e8de8b07064    498b47f0                mov rax, [r15-0x10]                                    
 ..                   : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x7e8de8b07068    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0706f    48f7f9                  idiv rcx                                               
0x7e8de8b07072    498947f0                mov [r15-0x10], rax                                    
 ..                : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x7e8de8b07076    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0707a    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0707e    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b07082    4983ee08                sub r14, 0x8                                           
0x7e8de8b07086    498906                  mov [r14], rax                                         
 .. : moe ( n m ) n m @ /= n @ return tos ;  .. 
0x7e8de8b07089    c3                      ret                                                    
Word_Disassemble : word - 'moe' :: codeSize = 57
Word : 0x00007e8de8de0c4f :: Compiled at : 0x00007e8de8b07051
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 72.17 <::


 =============================
C.moe2 <:> csl compiled word
SourceCode for C.moe2 :> 
: moe2 ( n ) n 2 /= n @ return tos ; 
Source code file location of moe2 : "namespaces/test/math.csl" : 75.2 :: we are now at : namespaces/test/math.csl : 76.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0708f -- code size = 54 bytes
TypeSignature : 
 -----------------------------
Word :: C.moe2 : definition = 0x00007e8de8b0708f : disassembly at namespaces/test/math.csl : 76.18 :
0x7e8de8b0708f    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b07093    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b07097    4981c608000000          add r14, 0x8                                           
 ..                        : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x7e8de8b0709e    b902000000              mov ecx, 0x2                                           
 ..                          : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x7e8de8b070a3    498b47f8                mov rax, [r15-0x8]                                     
 ..                      : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x7e8de8b070a7    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b070ae    48f7f9                  idiv rcx                                               
0x7e8de8b070b1    498947f8                mov [r15-0x8], rax                                     
 ..                   : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x7e8de8b070b5    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b070b9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b070bd    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b070c1    498906                  mov [r14], rax                                         
 ..    : moe2 ( n ) n 2 /= n @ return tos ;  .. 
0x7e8de8b070c4    c3                      ret                                                    
Word_Disassemble : word - 'moe2' :: codeSize = 54
Word : 0x00007e8de8de1f4f :: Compiled at : 0x00007e8de8b0708f
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 76.18 <::


 moe3_assert1  : ok


 moe3_assert2  : ok



 =============================
C.t64bitAdd2 <:> csl compiled word
SourceCode for C.t64bitAdd2 :> 
: t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ; 
Source code file location of t64bitAdd2 : "namespaces/test/math.csl" : 83.2 :: we are now at : namespaces/test/math.csl : 84.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b07129 -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: C.t64bitAdd2 : definition = 0x00007e8de8b07129 : disassembly at namespaces/test/math.csl : 84.23 :
0x7e8de8b07129    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0712d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b07131    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x7e8de8b07138    48b80000000001000000    mov rax, 0x100000000                                   
 ..      : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x7e8de8b07142    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x7e8de8b07146    4803c1                  add rax, rcx                                           
   : t64bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ;  .. 
0x7e8de8b07149    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitAdd2 ( n m ) 0x100000000 n @ + m @ + return tos ; 
0x7e8de8b0714d    4803c1                  add rax, rcx                                           
0x7e8de8b07150    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b07154    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b07158    4983ee08                sub r14, 0x8                                           
0x7e8de8b0715c    498906                  mov [r14], rax                                         
 ..  ) 0x100000000 n @ + m @ + return tos ; 
0x7e8de8b0715f    c3                      ret                                                    
Word_Disassemble : word - 't64bitAdd2' :: codeSize = 55
Word : 0x00007e8de8de54ef :: Compiled at : 0x00007e8de8b07129
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 84.23 <::
 t64bitAdd2_assert  : ok


 0x0000000000000002
 =============================
C.t64bitSub2 <:> csl compiled word
SourceCode for C.t64bitSub2 :> 
: t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ; 
Source code file location of t64bitSub2 : "namespaces/test/math.csl" : 87.2 :: we are now at : namespaces/test/math.csl : 88.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b071af -- code size = 55 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: C.t64bitSub2 : definition = 0x00007e8de8b071af : disassembly at namespaces/test/math.csl : 88.23 :
0x7e8de8b071af    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b071b3    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b071b7    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x7e8de8b071be    48b80300000001000000    mov rax, 0x100000003                                   
 ..      : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x7e8de8b071c8    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x7e8de8b071cc    482bc1                  sub rax, rcx                                           
   : t64bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ;  .. 
0x7e8de8b071cf    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitSub2 ( n m ) 0x100000003 n @ - m @ - return tos ; 
0x7e8de8b071d3    482bc1                  sub rax, rcx                                           
0x7e8de8b071d6    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b071da    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b071de    4983ee08                sub r14, 0x8                                           
0x7e8de8b071e2    498906                  mov [r14], rax                                         
 ..  ) 0x100000003 n @ - m @ - return tos ; 
0x7e8de8b071e5    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub2' :: codeSize = 55
Word : 0x00007e8de8de7e4f :: Compiled at : 0x00007e8de8b071af
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 88.23 <::
 t64bitSub2_assert  : ok


 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :> 
: t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ; 
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 90.2 :: we are now at : namespaces/test/math.csl : 91.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b071eb -- code size = 55 bytes
TypeSignature : 
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x00007e8de8b071eb : disassembly at namespaces/test/math.csl : 91.23 :
0x7e8de8b071eb    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b071ef    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b071f3    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x7e8de8b071fa    48b80400000001000000    mov rax, 0x100000004                                   
 ..      : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x7e8de8b07204    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x7e8de8b07208    482bc1                  sub rax, rcx                                           
   : t64bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ;  .. 
0x7e8de8b0720b    498b4ff8                mov rcx, [r15-0x8]                                     
 .. bitSub3 ( n m ) 0x100000004 n @ - m @ - return tos ; 
0x7e8de8b0720f    482bc1                  sub rax, rcx                                           
0x7e8de8b07212    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b07216    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0721a    4983ee08                sub r14, 0x8                                           
0x7e8de8b0721e    498906                  mov [r14], rax                                         
 ..  ) 0x100000004 n @ - m @ - return tos ; 
0x7e8de8b07221    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub3' :: codeSize = 55
Word : 0x00007e8de8de92ff :: Compiled at : 0x00007e8de8b071eb
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 91.23 <::

 =============================
C.t64bitSub3 <:> csl compiled word
SourceCode for C.t64bitSub3 :> 
: t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
Source code file location of t64bitSub3 : "namespaces/test/math.csl" : 93.2 :: we are now at : namespaces/test/math.csl : 94.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b07227 -- code size = 63 bytes
TypeSignature : 
 -----------------------------
Word :: C.t64bitSub3 : definition = 0x00007e8de8b07227 : disassembly at namespaces/test/math.csl : 94.23 :
0x7e8de8b07227    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0722b    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0722f    4981c608000000          add r14, 0x8                                           
 ..                  : t64bitSub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ;  .. 
0x7e8de8b07236    b801000000              mov eax, 0x1                                           
 .. ub3 ( n m ) 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b0723b    48b90300000001000000    mov rcx, 0x100000003                                   
 .. 0x100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b07245    4803c1                  add rax, rcx                                           
 .. 100000003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b07248    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 00003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b0724c    482bc1                  sub rax, rcx                                           
 .. 003 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b0724f    498b4ff8                mov rcx, [r15-0x8]                                     
 .. 0x100000002 - 0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b07253    482bc1                  sub rax, rcx                                           
0x7e8de8b07256    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0725a    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0725e    4983ee08                sub r14, 0x8                                           
0x7e8de8b07262    498906                  mov [r14], rax                                         
 ..  0x100000003 + n @ - m @ - return tos ; 
0x7e8de8b07265    c3                      ret                                                    
Word_Disassemble : word - 't64bitSub3' :: codeSize = 63
Word : 0x00007e8de8dea7af :: Compiled at : 0x00007e8de8b07227
 =============================
::> 'wdiss' was called at namespaces/test/math.csl 94.23 <::

 7176105502331971041 
 0110 0011  1001 0110   1010 0101  1110 1111    0000 1001  0011 1001   0010 0101  1110 0001 
including namespaces/test/arrayTest.csl at namespaces/test/initTest.csl : 86.41 ...

_ClassTypedef : at namespaces/test/arrayTest.csl : 11.23 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 19.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
DLLNode size =  16
DLLNodeAlloc size =  512

Dump at : namespaces/test/arrayTest.csl : 24.15 :
Dump : Address = 0x00007e8de88fd710 : Number = 64 :: (little endian dump)
0x00007e8de88fd710 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd720 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd730 :  00 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fd740 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 27.25 : token = class : cloneFlag = 0DLLNodeAlloc4 size =  2048

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 29.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 
testna4 =  0x00007e8de88fd910
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :> 
: testna5 ( DLLNodeAlloc4 dlna4o ) "\ndlna4o = " ps dlna4o hp dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 = dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = dlna4o.nodes [ 1 ] [ 0 ] 32 dump dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 = dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps dlna4o.nodes [ 2 ] [ 1 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference 1 = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump dlna4o.nodes [ 3 ] [ 2 ].AfterReference dlna4o.nodes [ 3 ] [ 2 ].BeforeReference = dlna4o.nodes [ 3 ] [ 2 ].BeforeReference dlna4o.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps dlna4o.nodes [ 3 ] [ 2 ] 32 dump "dlna4o = " ps dlna4o hp ; 
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 34.2 :: we are now at : namespaces/test/arrayTest.csl : 53.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0803e -- code size = 616 bytes
TypeSignature : Object 
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x00007e8de8b0803e : disassembly at namespaces/test/arrayTest.csl : 53.21 :
0x7e8de8b0803e    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08042    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08046    4981c608000000          add r14, 0x8                                           
0x7e8de8b0804d    48b823bf80e88d7e0000    mov rax, 0x7e8de880bf23                                
0x7e8de8b08057    4983c608                add r14, 0x8                                           
0x7e8de8b0805b    498906                  mov [r14], rax                                         
 .. NodeAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRef .. 
0x7e8de8b0805e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08068    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. eAlloc4 dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeRefere .. 
0x7e8de8b0806b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0806f    4881c000000000          add rax, 0x0                                           
0x7e8de8b08076    4983c608                add r14, 0x8                                           
0x7e8de8b0807a    498906                  mov [r14], rax                                         
 ..  dlna4o )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 = .. 
0x7e8de8b0807d    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b08087    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..  )     "\ndlna4o = " ps dlna4o hp     dlna4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dl .. 
0x7e8de8b0808a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0808e    4881c000020000          add rax, 0x200                                         
0x7e8de8b08095    b901000000              mov ecx, 0x1                                           
 .. 4o.nodes [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o. .. 
0x7e8de8b0809a    488908                  mov [rax], rcx                                         
 .. es [ 1 ] [ 0 ].AfterReference 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes  .. 
0x7e8de8b0809d    498b47f8                mov rax, [r15-0x8]                                     
 .. ence 1 =     dlna4o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReferenc .. 
0x7e8de8b080a1    4881c008020000          add rax, 0x208                                         
0x7e8de8b080a8    b902000000              mov ecx, 0x2                                           
 .. o.nodes [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.n .. 
0x7e8de8b080ad    488908                  mov [rax], rcx                                         
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ .. 
0x7e8de8b080b0    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b080b4    4881c000020000          add rax, 0x200                                         
0x7e8de8b080bb    4983c608                add r14, 0x8                                           
0x7e8de8b080bf    498906                  mov [r14], rax                                         
 .. ence 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReferenc .. 
0x7e8de8b080c2    b820000000              mov eax, 0x20                                          
0x7e8de8b080c7    4983c608                add r14, 0x8                                           
0x7e8de8b080cb    498906                  mov [r14], rax                                         
 .. e 2 =     dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 .. 
0x7e8de8b080ce    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b080d8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b080e2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  dlna4o.nodes [ 1 ] [ 0 ] 32 dump     dlna4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\ .. 
0x7e8de8b080e5    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b080e9    4881c010040000          add rax, 0x410                                         
0x7e8de8b080f0    b901000000              mov ecx, 0x1                                           
 .. 4o.nodes [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 .. 
0x7e8de8b080f5    488908                  mov [rax], rcx                                         
 .. es [ 2 ] [ 1 ].AfterReference 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" .. 
0x7e8de8b080f8    498b47f8                mov rax, [r15-0x8]                                     
 .. ence 1 =     dlna4o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 .. 
0x7e8de8b080fc    4881c018040000          add rax, 0x418                                         
0x7e8de8b08103    b902000000              mov ecx, 0x2                                           
 .. o.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump   .. 
0x7e8de8b08108    488908                  mov [rax], rcx                                         
0x7e8de8b0810b    48b88cbf80e88d7e0000    mov rax, 0x7e8de880bf8c                                
0x7e8de8b08115    4983c608                add r14, 0x8                                           
0x7e8de8b08119    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4 .. 
0x7e8de8b0811c    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08126    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. 4o.nodes [ 2 ] [ 1 ] 32 dump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes  .. 
0x7e8de8b08129    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0812d    4881c010040000          add rax, 0x410                                         
0x7e8de8b08134    4983c608                add r14, 0x8                                           
0x7e8de8b08138    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReferen .. 
0x7e8de8b0813b    b820000000              mov eax, 0x20                                          
0x7e8de8b08140    4983c608                add r14, 0x8                                           
0x7e8de8b08144    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  .. 
0x7e8de8b08147    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b08151    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0815b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  dlna4o.nodes [ 2 ] [ 1 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =      .. 
0x7e8de8b0815e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08162    4881c020060000          add rax, 0x620                                         
0x7e8de8b08169    b901000000              mov ecx, 0x1                                           
 .. o.nodes [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 3 .. 
0x7e8de8b0816e    488908                  mov [rax], rcx                                         
 .. s [ 3 ] [ 2 ].AfterReference  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump .. 
0x7e8de8b08171    498b47f8                mov rax, [r15-0x8]                                     
 .. nce  1 =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [  .. 
0x7e8de8b08175    4881c028060000          add rax, 0x628                                         
0x7e8de8b0817c    b902000000              mov ecx, 0x2                                           
 .. .nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump   .. 
0x7e8de8b08181    488908                  mov [rax], rcx                                         
0x7e8de8b08184    48b833c080e88d7e0000    mov rax, 0x7e8de880c033                                
0x7e8de8b0818e    4983c608                add r14, 0x8                                           
0x7e8de8b08192    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes  .. 
0x7e8de8b08195    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0819f    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [  .. 
0x7e8de8b081a2    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b081a6    4881c020060000          add rax, 0x620                                         
0x7e8de8b081ad    4983c608                add r14, 0x8                                           
0x7e8de8b081b1    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     .. 
0x7e8de8b081b4    b820000000              mov eax, 0x20                                          
0x7e8de8b081b9    4983c608                add r14, 0x8                                           
0x7e8de8b081bd    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dl .. 
0x7e8de8b081c0    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b081ca    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b081d4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  dlna4o.nodes [ 3 ] [ 2 ] 32 dump     dlna4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.node .. 
0x7e8de8b081d7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b081db    4881c020060000          add rax, 0x620                                         
 .. a4o.nodes [ 3 ] [ 2 ].AfterReference  dlna4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nod .. 
0x7e8de8b081e2    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b081e6    4881c128060000          add rcx, 0x628                                         
 .. a4o.nodes [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\nju .. 
0x7e8de8b081ed    488908                  mov [rax], rcx                                         
 .. des [ 3 ] [ 2 ].BeforeReference =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust bef .. 
0x7e8de8b081f0    498b47f8                mov rax, [r15-0x8]                                     
 .. erence =     dlna4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ]  .. 
0x7e8de8b081f4    4881c028060000          add rax, 0x628                                         
 .. 4o.nodes [ 3 ] [ 2 ].BeforeReference  dlna4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps .. 
0x7e8de8b081fb    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b081ff    4881c120060000          add rcx, 0x620                                         
 .. na4o.nodes [ 3 ] [ 2 ].AfterReference =     "\njust before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump   .. 
0x7e8de8b08206    488908                  mov [rax], rcx                                         
0x7e8de8b08209    48b8dec080e88d7e0000    mov rax, 0x7e8de880c0de                                
0x7e8de8b08213    4983c608                add r14, 0x8                                           
0x7e8de8b08217    498906                  mov [r14], rax                                         
 .. e : dlna4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b0821a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08224    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. 4o.nodes [ 3 ] [ 2 ] 32 dump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b08227    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0822b    4881c020060000          add rax, 0x620                                         
0x7e8de8b08232    4983c608                add r14, 0x8                                           
0x7e8de8b08236    498906                  mov [r14], rax                                         
 .. ump" ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b08239    b820000000              mov eax, 0x20                                          
0x7e8de8b0823e    4983c608                add r14, 0x8                                           
0x7e8de8b08242    498906                  mov [r14], rax                                         
 .. " ps      dlna4o.nodes [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b08245    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b0824f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08259    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0825c    48b853c180e88d7e0000    mov rax, 0x7e8de880c153       < string : 'dlna4o = ' >
0x7e8de8b08266    4983c608                add r14, 0x8                                           
0x7e8de8b0826a    498906                  mov [r14], rax                                         
 .. s [ 3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b0826d    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08277    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  3 ] [ 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b0827a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0827e    4881c000000000          add rax, 0x0                                           
0x7e8de8b08285    4983c608                add r14, 0x8                                           
0x7e8de8b08289    498906                  mov [r14], rax                                         
 .. 2 ] 32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b0828c    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b08296    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
0x7e8de8b08299    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0829d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b082a1    4983ee08                sub r14, 0x8                                           
 ..  32 dump     "dlna4o = " ps dlna4o hp ;  .. 
0x7e8de8b082a5    c3                      ret                                                    
Word_Disassemble : word - 'testna5' :: codeSize = 616
Word : 0x00007e8de8e370fb :: Compiled at : 0x00007e8de8b0803e
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 53.21 <::
 
dlna4o =  0x00007e8de88fd910
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007e8de88fdb10 : Number = 32 :: (little endian dump)
0x00007e8de88fdb10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fdb20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007e8de88fdd20 : Number = 32 :: (little endian dump)
0x00007e8de88fdd20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fdd30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007e8de88fdf30 : Number = 32 :: (little endian dump)
0x00007e8de88fdf30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fdf40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : dlna4o.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 55.16 :
Dump : Address = 0x00007e8de88fdf30 : Number = 32 :: (little endian dump)
0x00007e8de88fdf30 :  38 df 8f e8 8d 7e 00 00  30 df 8f e8 8d 7e 00 00  8....~.. 0....~.. 
0x00007e8de88fdf40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 dlna4o =  0x00007e8de88fd910
 =============================
DLLNodeAlloc4.testna5 <:> csl compiled word
SourceCode for DLLNodeAlloc4.testna5 :> 
: testna5 "\ntestna4 = " ps testna4 hp testna4.nodes [ 1 ] [ 0 ].AfterReference 1 = testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 = testna4.nodes [ 1 ] [ 0 ] 32 dump testna4.nodes [ 2 ] [ 1 ].AfterReference 1 = testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 = "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps testna4.nodes [ 2 ] [ 1 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference 1 = testna4.nodes [ 3 ] [ 2 ].BeforeReference 2 = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump testna4.nodes [ 3 ] [ 2 ].AfterReference testna4.nodes [ 3 ] [ 2 ].BeforeReference = testna4.nodes [ 3 ] [ 2 ].BeforeReference testna4.nodes [ 3 ] [ 2 ].AfterReference = "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps testna4.nodes [ 3 ] [ 2 ] 32 dump "testna4 = " ps testna4 hp ; 
Source code file location of testna5 : "namespaces/test/arrayTest.csl" : 56.2 :: we are now at : namespaces/test/arrayTest.csl : 75.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b082ba -- code size = 685 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc4.testna5 : definition = 0x00007e8de8b082ba : disassembly at namespaces/test/arrayTest.csl : 75.21 :
0x7e8de8b082ba    48b8fbc480e88d7e0000    mov rax, 0x7e8de880c4fb                                
0x7e8de8b082c4    4983c608                add r14, 0x8                                           
0x7e8de8b082c8    498906                  mov [r14], rax                                         
 ..         : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].Before .. 
0x7e8de8b082cb    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b082d5    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..      : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeRef .. 
0x7e8de8b082d8    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
0x7e8de8b082e2    4881c000000000          add rax, 0x0                                           
0x7e8de8b082e9    4983c608                add r14, 0x8                                           
0x7e8de8b082ed    498906                  mov [r14], rax                                         
 : testna5      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 .. 
0x7e8de8b082f0    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b082fa    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..      "\ntestna4 = " ps testna4 hp     testna4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =      .. 
0x7e8de8b082fd    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
0x7e8de8b08307    4881c000020000          add rax, 0x200                                         
0x7e8de8b0830e    b901000000              mov ecx, 0x1                                           
 .. a4.nodes [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testn .. 
0x7e8de8b08313    488908                  mov [rax], rcx                                         
 .. es [ 1 ] [ 0 ].AfterReference 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nod .. 
0x7e8de8b08316    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
 .. nce 1 =     testna4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterRefere .. 
0x7e8de8b08320    4881c008020000          add rax, 0x208                                         
0x7e8de8b08327    b902000000              mov ecx, 0x2                                           
 .. 4.nodes [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna .. 
0x7e8de8b0832c    488908                  mov [rax], rcx                                         
 .. s [ 1 ] [ 0 ].BeforeReference 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.node .. 
0x7e8de8b0832f    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
0x7e8de8b08339    4881c000020000          add rax, 0x200                                         
0x7e8de8b08340    4983c608                add r14, 0x8                                           
0x7e8de8b08344    498906                  mov [r14], rax                                         
 .. nce 2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeRefere .. 
0x7e8de8b08347    b820000000              mov eax, 0x20                                          
0x7e8de8b0834c    4983c608                add r14, 0x8                                           
0x7e8de8b08350    498906                  mov [r14], rax                                         
 ..  2 =     testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference .. 
0x7e8de8b08353    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b0835d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08367    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. testna4.nodes [ 1 ] [ 0 ] 32 dump     testna4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =      .. 
0x7e8de8b0836a    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
0x7e8de8b08374    4881c010040000          add rax, 0x410                                         
0x7e8de8b0837b    b901000000              mov ecx, 0x1                                           
 .. a4.nodes [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ]  .. 
0x7e8de8b08380    488908                  mov [rax], rcx                                         
 .. es [ 2 ] [ 1 ].AfterReference 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dum .. 
0x7e8de8b08383    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
 .. nce 1 =     testna4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ .. 
0x7e8de8b0838d    4881c018040000          add rax, 0x418                                         
0x7e8de8b08394    b902000000              mov ecx, 0x2                                           
 .. 4.nodes [ 2 ] [ 1 ].BeforeReference 2 =     "\njust before : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump .. 
0x7e8de8b08399    488908                  mov [rax], rcx                                         
0x7e8de8b0839c    48b867c580e88d7e0000    mov rax, 0x7e8de880c567                                
0x7e8de8b083a6    4983c608                add r14, 0x8                                           
0x7e8de8b083aa    498906                  mov [r14], rax                                         
 ..  : testna4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     tes .. 
0x7e8de8b083ad    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b083b7    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. a4.nodes [ 2 ] [ 1 ] 32 dump" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nod .. 
0x7e8de8b083ba    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
0x7e8de8b083c4    4881c010040000          add rax, 0x410                                         
0x7e8de8b083cb    4983c608                add r14, 0x8                                           
0x7e8de8b083cf    498906                  mov [r14], rax                                         
 .. mp" ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeRefer .. 
0x7e8de8b083d2    b820000000              mov eax, 0x20                                          
0x7e8de8b083d7    4983c608                add r14, 0x8                                           
0x7e8de8b083db    498906                  mov [r14], rax                                         
 ..  ps      testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReferenc .. 
0x7e8de8b083de    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b083e8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b083f2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. testna4.nodes [ 2 ] [ 1 ] 32 dump     testna4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =    .. 
0x7e8de8b083f5    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
0x7e8de8b083ff    4881c020060000          add rax, 0x620                                         
0x7e8de8b08406    b901000000              mov ecx, 0x1                                           
 .. 4.nodes [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] .. 
0x7e8de8b0840b    488908                  mov [rax], rcx                                         
 .. s [ 3 ] [ 2 ].AfterReference  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 du .. 
0x7e8de8b0840e    48b810d98fe88d7e0000    mov rax, 0x7e8de88fd910                                
 .. ce  1 =     testna4.nodes [ 3 ] [ 2 ].BeforeReference  2 =     "\njust before : testna4.nodes [ 3 ] [ 2 ] 32 dump" ps      testna4.nodes  .. 
0x7e8de8b08418    4881c028060000          add rax, 0x628                                         
0x7e8de8b0841f    b90200000048890848      mov rcx, 0x4808894800000002                              
0x7e8de8b08428    b811c680e8              mov eax, 0xe880c611                                    
0x7e8de8b0842d    8d7e00                  lea edi, [rsi]                                         
0x7e8de8b08430    004983                  add [rcx-0x7d], cl                                     
0x7e8de8b08433    c608                    invalid                                                
Word_Disassemble : word - 'testna5' :: codeSize = 378
Word : 0x00007e8de8e45a4b :: Compiled at : 0x00007e8de8b082ba
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 75.21 <::
 
testna4 =  0x00007e8de88fd910
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007e8de88fdb10 : Number = 32 :: (little endian dump)
0x00007e8de88fdb10 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fdb20 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 2 ] [ 1 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007e8de88fdd20 : Number = 32 :: (little endian dump)
0x00007e8de88fdd20 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fdd30 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007e8de88fdf30 : Number = 32 :: (little endian dump)
0x00007e8de88fdf30 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fdf40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
just before : testna4.nodes [ 3 ] [ 2 ] 32 dump
Dump at : namespaces/test/arrayTest.csl : 77.8 :
Dump : Address = 0x00007e8de88fdf30 : Number = 32 :: (little endian dump)
0x00007e8de88fdf30 :  38 df 8f e8 8d 7e 00 00  30 df 8f e8 8d 7e 00 00  8....~.. 0....~.. 
0x00007e8de88fdf40 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 testna4 =  0x00007e8de88fd910 
testna4 =  0x00007e8de88fd910
DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 83.28 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna <:> csl compiled word
SourceCode for DLLNodeAlloc.tna :> 
: tna testnarr2.nodes [ 1 ] 32 dump testnarr2.nodes [ 1 ].AfterReference 1 = testnarr2.nodes [ 1 ].BeforeReference 2 = testnarr2.nodes [ 1 ] 32 dump ; 
Source code file location of tna : "namespaces/test/arrayTest.csl" : 84.2 :: we are now at : namespaces/test/arrayTest.csl : 90.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0857b -- code size = 169 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tna : definition = 0x00007e8de8b0857b : disassembly at namespaces/test/arrayTest.csl : 90.17 :
 ..                             : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [  .. 
0x7e8de8b0857b    48b810e18fe88d7e0000    mov rax, 0x7e8de88fe110                                
0x7e8de8b08585    4881c010000000          add rax, 0x10                                          
0x7e8de8b0858c    4983c608                add r14, 0x8                                           
0x7e8de8b08590    498906                  mov [r14], rax                                         
 ..       : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2  .. 
0x7e8de8b08593    b820000000              mov eax, 0x20                                          
0x7e8de8b08598    4983c608                add r14, 0x8                                           
0x7e8de8b0859c    498906                  mov [r14], rax                                         
 ..    : tna     testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =   .. 
0x7e8de8b0859f    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b085a9    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b085b3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..    testnarr2.nodes [ 1 ] 32 dump      testnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testna .. 
0x7e8de8b085b6    48b810e18fe88d7e0000    mov rax, 0x7e8de88fe110                                
0x7e8de8b085c0    4881c010000000          add rax, 0x10                                          
0x7e8de8b085c7    b901000000              mov ecx, 0x1                                           
 .. estnarr2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b085cc    488908                  mov [rax], rcx                                         
 .. 2.nodes [ 1 ].AfterReference 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b085cf    48b810e18fe88d7e0000    mov rax, 0x7e8de88fe110                                
 .. erence 1 =      testnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b085d9    4881c018000000          add rax, 0x18                                          
0x7e8de8b085e0    b902000000              mov ecx, 0x2                                           
 .. stnarr2.nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b085e5    488908                  mov [rax], rcx                                         
 .. .nodes [ 1 ].BeforeReference 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b085e8    48b810e18fe88d7e0000    mov rax, 0x7e8de88fe110                                
0x7e8de8b085f2    4881c010000000          add rax, 0x10                                          
0x7e8de8b085f9    4983c608                add r14, 0x8                                           
0x7e8de8b085fd    498906                  mov [r14], rax                                         
 .. erence 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b08600    b820000000              mov eax, 0x20                                          
0x7e8de8b08605    4983c608                add r14, 0x8                                           
0x7e8de8b08609    498906                  mov [r14], rax                                         
 .. nce 2 =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b0860c    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b08616    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08620    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. =      testnarr2.nodes [ 1 ] 32 dump  ;  .. 
0x7e8de8b08623    c3                      ret                                                    
Word_Disassemble : word - 'tna' :: codeSize = 169
Word : 0x00007e8de8e546c3 :: Compiled at : 0x00007e8de8b0857b
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 90.17 <::

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x00007e8de88fe120 : Number = 32 :: (little endian dump)
0x00007e8de88fe120 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe130 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/arrayTest.csl : 91.4 :
Dump : Address = 0x00007e8de88fe120 : Number = 32 :: (little endian dump)
0x00007e8de88fe120 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe130 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
DLLNodeAlloc.tnarr2a <:> csl compiled word
SourceCode for DLLNodeAlloc.tnarr2a :> 
: tnarr2a ( this ) "tnarr2a" ps nl this . nodes [ 2 ].AfterReference 1 = this . nodes [ 2 ].BeforeReference 2 = this this.size @ dump ; 
Source code file location of tnarr2a : "namespaces/test/arrayTest.csl" : 106.2 :: we are now at : namespaces/test/arrayTest.csl : 112.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0872f -- code size = 198 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tnarr2a : definition = 0x00007e8de8b0872f : disassembly at namespaces/test/arrayTest.csl : 112.21 :
0x7e8de8b0872f    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08733    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08737    4981c608000000          add r14, 0x8                                           
0x7e8de8b0873e    48b8cdcc80e88d7e0000    mov rax, 0x7e8de880cccd       < string : 'tnarr2a' >
0x7e8de8b08748    4983c608                add r14, 0x8                                           
0x7e8de8b0874c    498906                  mov [r14], rax                                         
 .. : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.siz .. 
0x7e8de8b0874f    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08759    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 : tnarr2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ .. 
0x7e8de8b0875c    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b08766    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08770    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. 2a ( this )          "tnarr2a" ps nl  this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08773    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08777    4881c020000000          add rax, 0x20                                          
0x7e8de8b0877e    b901000000              mov ecx, 0x1                                           
 ..   this . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08783    488908                  mov [rax], rcx                                         
 .. his . nodes [ 2 ].AfterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08786    498b47f8                mov rax, [r15-0x8]                                     
 .. fterReference 1 =  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b0878a    4881c028000000          add rax, 0x28                                          
0x7e8de8b08791    b902000000              mov ecx, 0x2                                           
 ..  this . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08796    488908                  mov [rax], rcx                                         
 .. is . nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08799    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0879d    4881c000000000          add rax, 0x0                                           
0x7e8de8b087a4    4983c608                add r14, 0x8                                           
0x7e8de8b087a8    498906                  mov [r14], rax                                         
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b087ab    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b087af    4881c000000000          add rax, 0x0                                           
0x7e8de8b087b6    4983c608                add r14, 0x8                                           
0x7e8de8b087ba    498906                  mov [r14], rax                                         
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b087bd    48b8cb55e3e88d7e0000    mov rax, 0x7e8de8e355cb                                
0x7e8de8b087c7    488b00                  mov rax, [rax]                                         
0x7e8de8b087ca    4983c608                add r14, 0x8                                           
0x7e8de8b087ce    498906                  mov [r14], rax                                         
 .. BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b087d1    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b087db    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b087e5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b087e8    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b087ec    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b087f0    4983ee08                sub r14, 0x8                                           
 .. eReference 2 =  this this.size @ dump ; 
0x7e8de8b087f4    c3                      ret                                                    
Word_Disassemble : word - 'tnarr2a' :: codeSize = 198
Word : 0x00007e8de8e5a403 :: Compiled at : 0x00007e8de8b0872f
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 112.21 <::

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 113.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 tnarr2a

Dump at : namespaces/test/arrayTest.csl : 115.15 :
Dump : Address = 0x00007e8de88fe310 : Number = 512 :: (little endian dump)
0x00007e8de88fe310 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe320 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe330 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe340 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe350 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe360 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe370 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe380 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe390 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe3a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe3b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe3c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe3d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe3e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe3f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe400 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe410 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe420 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe430 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe440 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe450 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe460 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe470 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe480 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe490 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe4a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe4b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe4c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe4d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe4e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe4f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe500 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 127.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
DLLNodeAlloc.tna3 <:> csl compiled word
SourceCode for DLLNodeAlloc.tna3 :> 
: tna3 ( this ) "tna3" ps this.nodes [ 2 ].AfterReference 1 = this.nodes [ 2 ].BeforeReference 2 = this this.size @ dump ; 
Source code file location of tna3 : "namespaces/test/arrayTest.csl" : 119.2 :: we are now at : namespaces/test/arrayTest.csl : 129.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b087fa -- code size = 175 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tna3 : definition = 0x00007e8de8b087fa : disassembly at namespaces/test/arrayTest.csl : 129.9 :
0x7e8de8b087fa    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b087fe    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08802    4981c608000000          add r14, 0x8                                           
0x7e8de8b08809    48b8becd80e88d7e0000    mov rax, 0x7e8de880cdbe       < string : 'tna3' >
0x7e8de8b08813    4983c608                add r14, 0x8                                           
0x7e8de8b08817    498906                  mov [r14], rax                                         
 ..        : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dum .. 
0x7e8de8b0881a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08824    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..    : tna3 ( this )         "tna3" ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ;  .. 
0x7e8de8b08827    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0882b    4881c020000000          add rax, 0x20                                          
0x7e8de8b08832    b901000000              mov ecx, 0x1                                           
 .. ps  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08837    488908                  mov [rax], rcx                                         
 ..  this.nodes [ 2 ].AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b0883a    498b47f8                mov rax, [r15-0x8]                                     
 .. .AfterReference 1 =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b0883e    4881c028000000          add rax, 0x28                                          
0x7e8de8b08845    b902000000              mov ecx, 0x2                                           
 .. =  this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b0884a    488908                  mov [rax], rcx                                         
 .. this.nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b0884d    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08851    4881c000000000          add rax, 0x0                                           
0x7e8de8b08858    4983c608                add r14, 0x8                                           
0x7e8de8b0885c    498906                  mov [r14], rax                                         
 .. nodes [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b0885f    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08863    4881c000000000          add rax, 0x0                                           
0x7e8de8b0886a    4983c608                add r14, 0x8                                           
0x7e8de8b0886e    498906                  mov [r14], rax                                         
 ..  [ 2 ].BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08871    48b8cb55e3e88d7e0000    mov rax, 0x7e8de8e355cb                                
0x7e8de8b0887b    488b00                  mov rax, [rax]                                         
0x7e8de8b0887e    4983c608                add r14, 0x8                                           
0x7e8de8b08882    498906                  mov [r14], rax                                         
 .. BeforeReference 2 =  this this.size @ dump ; 
0x7e8de8b08885    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b0888f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08899    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0889c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b088a0    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b088a4    4983ee08                sub r14, 0x8                                           
 .. eReference 2 =  this this.size @ dump ; 
0x7e8de8b088a8    c3                      ret                                                    
Word_Disassemble : word - 'tna3' :: codeSize = 175
Word : 0x00007e8de8e5d08b :: Compiled at : 0x00007e8de8b087fa
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 129.9 <::
 tna3
Dump at : namespaces/test/arrayTest.csl : 130.12 :
Dump : Address = 0x00007e8de88fe510 : Number = 512 :: (little endian dump)
0x00007e8de88fe510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe530 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe610 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe620 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe630 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe640 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe650 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe660 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe670 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe680 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe690 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe700 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x00007e8de88fe510 tnarr2

 0x00007e8de88fe510

Dump at : namespaces/test/arrayTest.csl : 133.14 :
Dump : Address = 0x00007e8de88fe510 : Number = 512 :: (little endian dump)
0x00007e8de88fe510 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe520 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe530 :  01 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe540 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe550 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe560 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe570 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe580 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe590 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe5f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe600 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe610 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe620 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe630 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe640 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe650 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe660 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe670 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe680 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe690 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6a0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6b0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6c0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6d0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6e0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe6f0 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe700 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
DLLNodeAlloc.tnax1 <:> csl compiled word
SourceCode for DLLNodeAlloc.tnax1 :> 
: tnax1 ( this ) this nl hp nl this.nodes[3].AfterReference 1 = this.nodes[4].BeforeReference 2 = this.nodes[3] hp this.nodes[3].AfterReference dup hp 16 dump this.nodes[4] hp this.nodes[4].BeforeReference dup hp 16 dump ; 
Source code file location of tnax1 : "namespaces/test/arrayTest.csl" : 135.2 :: we are now at : namespaces/test/arrayTest.csl : 144.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b088ae -- code size = 345 bytes
TypeSignature : 
 -----------------------------
Word :: DLLNodeAlloc.tnax1 : definition = 0x00007e8de8b088ae : disassembly at namespaces/test/arrayTest.csl : 144.19 :
0x7e8de8b088ae    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b088b2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b088b6    4981c608000000          add r14, 0x8                                           
0x7e8de8b088bd    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b088c1    4881c000000000          add rax, 0x0                                           
0x7e8de8b088c8    4983c608                add r14, 0x8                                           
0x7e8de8b088cc    498906                  mov [r14], rax                                         
 ..         : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   t .. 
0x7e8de8b088cf    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b088d9    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b088e3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..      : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this .. 
0x7e8de8b088e6    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b088f0    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..   : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.no .. 
0x7e8de8b088f3    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b088fd    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08907    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
  : tnax1 ( this )         this nl hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[ .. 
0x7e8de8b0890a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0890e    4881c030000000          add rax, 0x30                                          
0x7e8de8b08915    b901000000              mov ecx, 0x1                                           
 .. hp nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dum .. 
0x7e8de8b0891a    488908                  mov [rax], rcx                                         
 .. nl  this.nodes[3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump   .. 
0x7e8de8b0891d    498b47f8                mov rax, [r15-0x8]                                     
 .. [3].AfterReference 1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4]  .. 
0x7e8de8b08921    4881c048000000          add rax, 0x48                                          
0x7e8de8b08928    b902000000              mov ecx, 0x2                                           
 ..  1 =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4] .. 
0x7e8de8b0892d    488908                  mov [rax], rcx                                         
 .. =  this.nodes[4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].Be .. 
0x7e8de8b08930    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08934    4881c030000000          add rax, 0x30                                          
0x7e8de8b0893b    4983c608                add r14, 0x8                                           
0x7e8de8b0893f    498906                  mov [r14], rax                                         
 .. 4].BeforeReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference  .. 
0x7e8de8b08942    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b0894c    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. foreReference 2 =  this.nodes[3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup h .. 
0x7e8de8b0894f    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08953    4881c030000000          add rax, 0x30                                          
0x7e8de8b0895a    4983c610                add r14, 0x10                                          
0x7e8de8b0895e    498906                  mov [r14], rax                                         
 .. [3] hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b08961    498946f8                mov [r14-0x8], rax                                     
 .. hp   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b08965    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b0896f    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..   this.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b08972    b810000000              mov eax, 0x10                                          
0x7e8de8b08977    4983c608                add r14, 0x8                                           
0x7e8de8b0897b    498906                  mov [r14], rax                                         
 .. his.nodes[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b0897e    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b08988    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08992    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. des[3].AfterReference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b08995    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08999    4881c040000000          add rax, 0x40                                          
0x7e8de8b089a0    4983c608                add r14, 0x8                                           
0x7e8de8b089a4    498906                  mov [r14], rax                                         
 .. ference dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089a7    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b089b1    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. ce dup hp 16 dump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089b4    498b47f8                mov rax, [r15-0x8]                                     
 .. ump  this.nodes[4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089b8    4881c048000000          add rax, 0x48                                          
0x7e8de8b089bf    4983c610                add r14, 0x10                                          
0x7e8de8b089c3    498906                  mov [r14], rax                                         
 .. 4] hp   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089c6    498946f8                mov [r14-0x8], rax                                     
 .. p   this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089ca    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b089d4    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..  this.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089d7    b810000000              mov eax, 0x10                                          
0x7e8de8b089dc    4983c608                add r14, 0x8                                           
0x7e8de8b089e0    498906                  mov [r14], rax                                         
 .. is.nodes[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b089e3    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b089ed    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b089f7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b089fa    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b089fe    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b08a02    4983ee08                sub r14, 0x8                                           
 .. des[4].BeforeReference dup hp 16 dump ;  .. 
0x7e8de8b08a06    c3                      ret                                                    
Word_Disassemble : word - 'tnax1' :: codeSize = 345
Word : 0x00007e8de8e5f803 :: Compiled at : 0x00007e8de8b088ae
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 144.19 <::

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 145.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 0x00007e8de88fe710
 0x00007e8de88fe740 0x00007e8de88fe740
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x00007e8de88fe740 : Number = 16 :: (little endian dump)
0x00007e8de88fe740 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x00007e8de88fe750 0x00007e8de88fe758
Dump at : namespaces/test/arrayTest.csl : 148.13 :
Dump : Address = 0x00007e8de88fe758 : Number = 16 :: (little endian dump)
0x00007e8de88fe758 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 168.15 : token = class : cloneFlag = 0
 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :> 
: arr2 ( Ar1 a ) a.b1 0x23 = a.c1 0x4567 = a.d1 0x456789 = a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ; 
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 169.2 :: we are now at : namespaces/test/arrayTest.csl : 179.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b08a0c -- code size = 227 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr2 : definition = 0x00007e8de8b08a0c : disassembly at namespaces/test/arrayTest.csl : 179.18 :
0x7e8de8b08a0c    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08a10    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08a14    4981c608000000          add r14, 0x8                                           
0x7e8de8b08a1b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08a1f    4881c000000000          add rax, 0x0                                           
0x7e8de8b08a26    b923000000              mov ecx, 0x23                                          
 ..       : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar .. 
0x7e8de8b08a2b    488908                  mov [rax], rcx                                         
0x7e8de8b08a2e    498b47f8                mov rax, [r15-0x8]                                     
 : arr2 ( Ar1 a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup .. 
0x7e8de8b08a32    4881c001000000          add rax, 0x1                                           
0x7e8de8b08a39    b967450000              mov ecx, 0x4567                                        
 .. a )      a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p .. 
0x7e8de8b08a3e    488908                  mov [rax], rcx                                         
0x7e8de8b08a41    498b47f8                mov rax, [r15-0x8]                                     
 ..  a.b1 0x23 =      a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _a .. 
0x7e8de8b08a45    4881c003000000          add rax, 0x3                                           
0x7e8de8b08a4c    b989674500              mov ecx, 0x456789                                      
 ..       a.c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a51    488908                  mov [rax], rcx                                         
0x7e8de8b08a54    498b47f8                mov rax, [r15-0x8]                                     
 .. c1 0x4567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a58    4881c00f000000          add rax, 0xf                                           
 .. 567 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a5f    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b08a63    4881c11f000000          add rcx, 0x1f                                          
 .. 7 =     a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a6a    488b09                  mov rcx, [rcx]                                         
 .. a.d1 0x456789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a6d    488908                  mov [rax], rcx                                         
0x7e8de8b08a70    498b47f8                mov rax, [r15-0x8]                                     
 .. 6789 =     a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a74    4881c017000000          add rax, 0x17                                          
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a7b    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b08a7f    4881c11f000000          add rcx, 0x1f                                          
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a86    488b09                  mov rcx, [rcx]                                         
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a89    488908                  mov [rax], rcx                                         
0x7e8de8b08a8c    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a90    4881c00f000000          add rax, 0xf                                           
0x7e8de8b08a97    488b00                  mov rax, [rax]                                         
0x7e8de8b08a9a    4983c610                add r14, 0x10                                          
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08a9e    498906                  mov [r14], rax                                         
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08aa1    498946f8                mov [r14-0x8], rax                                     
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08aa5    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b08aaf    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08ab9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08abc    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b08ac6    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08ac9    b889000000              mov eax, 0x89                                          
0x7e8de8b08ace    4983c608                add r14, 0x8                                           
0x7e8de8b08ad2    498906                  mov [r14], rax                                         
0x7e8de8b08ad5    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08adf    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b08ae2    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b08ae6    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b08aea    4983ee08                sub r14, 0x8                                           
 .. a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08aee    c3                      ret                                                    
Word_Disassemble : word - 'arr2' :: codeSize = 227
Word : 0x00007e8de8e6633b :: Compiled at : 0x00007e8de8b08a0c
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 179.18 <::

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 180.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 arr1 :  namespaces/test/arrayTest.csl 181.22
Dump at : namespaces/test/arrayTest.csl : 181.39 :
Dump : Address = 0x00007e8de88fe910 : Number = 39 :: (little endian dump)
0x00007e8de88fe910 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe920 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 arr1 :  namespaces/test/arrayTest.csl 186.22
Dump at : namespaces/test/arrayTest.csl : 186.39 :
Dump : Address = 0x00007e8de88fe910 : Number = 39 :: (little endian dump)
0x00007e8de88fe910 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe920 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 89  ........ ........ 
0x00007e8de88fe930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 137
 =============================
Ar1.arr3 <:> csl compiled word
SourceCode for Ar1.arr3 :> 
: arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
Source code file location of arr3 : "namespaces/test/arrayTest.csl" : 191.2 :: we are now at : namespaces/test/arrayTest.csl : 191.99
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b08af4 -- code size = 167 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr3 : definition = 0x00007e8de8b08af4 : disassembly at namespaces/test/arrayTest.csl : 191.99 :
0x7e8de8b08af4    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08af8    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08afc    4981c608000000          add r14, 0x8                                           
 ..                      : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x7e8de8b08b03    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08b07    488b00                  mov rax, [rax]                                         
0x7e8de8b08b0a    4983c608                add r14, 0x8                                           
0x7e8de8b08b0e    480fb6c0                movzx rax, al                                          
0x7e8de8b08b12    498906                  mov [r14], rax                                         
 ..              : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x7e8de8b08b15    b823000000              mov eax, 0x23                                          
0x7e8de8b08b1a    4983c608                add r14, 0x8                                           
0x7e8de8b08b1e    498906                  mov [r14], rax                                         
0x7e8de8b08b21    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08b2b    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 .. : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x7e8de8b08b2e    498b47f8                mov rax, [r15-0x8]                                     
  : arr3 ( Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ;  .. 
0x7e8de8b08b32    4881c001000000          add rax, 0x1                                           
0x7e8de8b08b39    488b00                  mov rax, [rax]                                         
0x7e8de8b08b3c    4983c608                add r14, 0x8                                           
0x7e8de8b08b40    480fb7c0                movzx rax, ax                                          
0x7e8de8b08b44    498906                  mov [r14], rax                                         
 .. Ar1 a ) a.b1 8@ 0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x7e8de8b08b47    b867450000              mov eax, 0x4567                                        
0x7e8de8b08b4c    4983c608                add r14, 0x8                                           
0x7e8de8b08b50    498906                  mov [r14], rax                                         
0x7e8de8b08b53    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08b5d    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 ..  0x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x7e8de8b08b60    498b47f8                mov rax, [r15-0x8]                                     
 .. x23 _assert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x7e8de8b08b64    4881c003000000          add rax, 0x3                                           
0x7e8de8b08b6b    488b00                  mov rax, [rax]                                         
0x7e8de8b08b6e    4983c608                add r14, 0x8                                           
0x7e8de8b08b72    498906                  mov [r14], rax                                         
 .. sert a.c1 16@ 0x4567 _assert a.d1 32@ 0x456789 _assert ; 
0x7e8de8b08b75    b889674500              mov eax, 0x456789                                      
0x7e8de8b08b7a    4983c608                add r14, 0x8                                           
0x7e8de8b08b7e    498906                  mov [r14], rax                                         
0x7e8de8b08b81    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08b8b    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b08b8e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b08b92    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b08b96    4983ee08                sub r14, 0x8                                           
 .. 567 _assert a.d1 32@ 0x456789 _assert ; 
0x7e8de8b08b9a    c3                      ret                                                    
Word_Disassemble : word - 'arr3' :: codeSize = 167
Word : 0x00007e8de8e6b4e3 :: Compiled at : 0x00007e8de8b08af4
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 191.99 <::
 
arr1 :  namespaces/test/arrayTest.csl 192.24
Dump at : namespaces/test/arrayTest.csl : 192.41 :
Dump : Address = 0x00007e8de88fe910 : Number = 39 :: (little endian dump)
0x00007e8de88fe910 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........ 
0x00007e8de88fe920 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........ 
0x00007e8de88fe930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar1.arr2 <:> csl compiled word
SourceCode for Ar1.arr2 :> 
: arr2 ( Ar1 a ) a.ar[1] a.ar[3] @ = a.ar[2] a.ar[3] @ = a.ar[1] @ dup decimal p 0x89 _assert ; 
Source code file location of arr2 : "namespaces/test/arrayTest.csl" : 196.2 :: we are now at : namespaces/test/arrayTest.csl : 204.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b08ba0 -- code size = 170 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar1.arr2 : definition = 0x00007e8de8b08ba0 : disassembly at namespaces/test/arrayTest.csl : 204.18 :
0x7e8de8b08ba0    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08ba4    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08ba8    4981c608000000          add r14, 0x8                                           
0x7e8de8b08baf    498b47f8                mov rax, [r15-0x8]                                     
 ..         : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08bb3    4881c00f000000          add rax, 0xf                                           
 ..   : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08bba    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b08bbe    4881c11f000000          add rcx, 0x1f                                          
 .. : arr2 ( Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ;  .. 
0x7e8de8b08bc5    488b09                  mov rcx, [rcx]                                         
 ..  Ar1 a )            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08bc8    488908                  mov [rax], rcx                                         
0x7e8de8b08bcb    498b47f8                mov rax, [r15-0x8]                                     
 ..            a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08bcf    4881c017000000          add rax, 0x17                                          
 ..      a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08bd6    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b08bda    4881c11f000000          add rcx, 0x1f                                          
 ..    a.ar[1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08be1    488b09                  mov rcx, [rcx]                                         
 .. 1] a.ar[3] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08be4    488908                  mov [rax], rcx                                         
0x7e8de8b08be7    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08beb    4881c00f000000          add rax, 0xf                                           
0x7e8de8b08bf2    488b00                  mov rax, [rax]                                         
0x7e8de8b08bf5    4983c610                add r14, 0x10                                          
 .. @ =      a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08bf9    498906                  mov [r14], rax                                         
 ..    a.ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08bfc    498946f8                mov [r14-0x8], rax                                     
 .. .ar[2] a.ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08c00    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b08c0a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08c14    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. .ar[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08c17    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b08c21    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. r[3] @ =      a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08c24    b889000000              mov eax, 0x89                                          
0x7e8de8b08c29    4983c608                add r14, 0x8                                           
0x7e8de8b08c2d    498906                  mov [r14], rax                                         
0x7e8de8b08c30    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08c3a    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b08c3d    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b08c41    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b08c45    4983ee08                sub r14, 0x8                                           
 .. a.ar[1] @ dup decimal p 0x89 _assert  ; 
0x7e8de8b08c49    c3                      ret                                                    
Word_Disassemble : word - 'arr2' :: codeSize = 170
Word : 0x00007e8de8e6cb43 :: Compiled at : 0x00007e8de8b08ba0
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 204.18 <::
 137 
arr1 :  namespaces/test/arrayTest.csl 206.24
Dump at : namespaces/test/arrayTest.csl : 206.41 :
Dump : Address = 0x00007e8de88fe910 : Number = 39 :: (little endian dump)
0x00007e8de88fe910 :  23 67 45 89 67 45 00 00  00 00 00 00 00 00 00 89  #gE.gE.. ........ 
0x00007e8de88fe920 :  00 00 00 00 00 00 00 89  00 00 00 00 00 00 00 89  ........ ........ 
0x00007e8de88fe930 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/arrayTest.csl : 207.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Ar1.a3 <:> csl compiled word
SourceCode for Ar1.a3 :> 
: a3 ( n Ar1 a ) a.ar [n @ 1 +] a.ar[n @ 2 +] @ = a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal a.ar[2] @ dup hp 0x89 _assert decimal ; 
Source code file location of a3 : "namespaces/test/arrayTest.csl" : 208.2 :: we are now at : namespaces/test/arrayTest.csl : 213.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b08c4f -- code size = 340 bytes
TypeSignature : 
 -----------------------------
Word :: Ar1.a3 : definition = 0x00007e8de8b08c4f : disassembly at namespaces/test/arrayTest.csl : 213.16 :
0x7e8de8b08c4f    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08c53    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08c57    4981c608000000          add r14, 0x8                                           
0x7e8de8b08c5e    498b47f8                mov rax, [r15-0x8]                                     
 ..               : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup  .. 
0x7e8de8b08c62    4881c007000000          add rax, 0x7                                           
0x7e8de8b08c69    4983c608                add r14, 0x8                                           
0x7e8de8b08c6d    498906                  mov [r14], rax                                         
 ..           : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0 .. 
0x7e8de8b08c70    498b47f0                mov rax, [r15-0x10]                                    
 ..       : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89  .. 
0x7e8de8b08c74    b901000000              mov ecx, 0x1                                           
0x7e8de8b08c79    4803c1                  add rax, rcx                                           
0x7e8de8b08c7c    486bc008                imul rax, rax, 0x8                                     
 ..     : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _a .. 
0x7e8de8b08c80    490106                  add [r14], rax                                         
 ..  : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _asse .. 
0x7e8de8b08c83    498b47f8                mov rax, [r15-0x8]                                     
   : a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert .. 
0x7e8de8b08c87    4881c007000000          add rax, 0x7                                           
0x7e8de8b08c8e    4983c608                add r14, 0x8                                           
0x7e8de8b08c92    498906                  mov [r14], rax                                         
: a3 ( n Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert de .. 
0x7e8de8b08c95    498b47f0                mov rax, [r15-0x10]                                    
 ..  Ar1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08c99    b902000000              mov ecx, 0x2                                           
0x7e8de8b08c9e    4803c1                  add rax, rcx                                           
0x7e8de8b08ca1    486bc008                imul rax, rax, 0x8                                     
 .. r1 a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08ca5    490106                  add [r14], rax                                         
 .. a )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08ca8    498b06                  mov rax, [r14]                                         
0x7e8de8b08cab    488b00                  mov rax, [rax]                                         
0x7e8de8b08cae    498906                  mov [r14], rax                                         
 .. )      a.ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08cb1    498b0e                  mov rcx, [r14]                                         
0x7e8de8b08cb4    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b08cb8    488908                  mov [rax], rcx                                         
0x7e8de8b08cbb    4983ee10                sub r14, 0x10                                          
0x7e8de8b08cbf    498b47f8                mov rax, [r15-0x8]                                     
 .. ar [n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08cc3    4881c007000000          add rax, 0x7                                           
0x7e8de8b08cca    4983c608                add r14, 0x8                                           
0x7e8de8b08cce    498906                  mov [r14], rax                                         
 .. n @ 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08cd1    498b47f0                mov rax, [r15-0x10]                                    
 .. 1 +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08cd5    b901000000              mov ecx, 0x1                                           
0x7e8de8b08cda    4803c1                  add rax, rcx                                           
0x7e8de8b08cdd    486bc008                imul rax, rax, 0x8                                     
 .. +] a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08ce1    490106                  add [r14], rax                                         
 .. a.ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08ce4    498b06                  mov rax, [r14]                                         
0x7e8de8b08ce7    488b00                  mov rax, [rax]                                         
0x7e8de8b08cea    498906                  mov [r14], rax                                         
 .. ar[n @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08ced    498b06                  mov rax, [r14]                                         
0x7e8de8b08cf0    4983c608                add r14, 0x8                                           
0x7e8de8b08cf4    498906                  mov [r14], rax                                         
 ..  @ 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08cf7    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b08d01    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. 2 +] @ =      a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d04    b889000000              mov eax, 0x89                                          
0x7e8de8b08d09    4983c608                add r14, 0x8                                           
0x7e8de8b08d0d    498906                  mov [r14], rax                                         
0x7e8de8b08d10    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08d1a    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 ..  a.ar[ n @ 1 +] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d1d    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b08d27    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08d31    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b08d34    498b47f8                mov rax, [r15-0x8]                                     
 .. ] @ dup hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d38    4881c017000000          add rax, 0x17                                          
0x7e8de8b08d3f    4983c608                add r14, 0x8                                           
0x7e8de8b08d43    498906                  mov [r14], rax                                         
 .. p hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d46    498b06                  mov rax, [r14]                                         
0x7e8de8b08d49    488b00                  mov rax, [rax]                                         
0x7e8de8b08d4c    498906                  mov [r14], rax                                         
 .. hp 0x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d4f    498b06                  mov rax, [r14]                                         
0x7e8de8b08d52    4983c608                add r14, 0x8                                           
0x7e8de8b08d56    498906                  mov [r14], rax                                         
 .. x89 _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d59    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b08d63    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..  _assert decimal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d66    b889000000              mov eax, 0x89                                          
0x7e8de8b08d6b    4983c608                add r14, 0x8                                           
0x7e8de8b08d6f    498906                  mov [r14], rax                                         
0x7e8de8b08d72    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08d7c    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 .. mal     a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08d7f    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b08d89    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08d93    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b08d96    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b08d9a    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b08d9e    4983ee10                sub r14, 0x10                                          
 .. a.ar[2] @ dup hp 0x89 _assert decimal ; 
0x7e8de8b08da2    c3                      ret                                                    
Word_Disassemble : word - 'a3' :: codeSize = 340
Word : 0x00007e8de8e70873 :: Compiled at : 0x00007e8de8b08c4f
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 213.16 <::
 0x0000000000000089 0x0000000000000089
_ClassTypedef : at namespaces/test/arrayTest.csl : 217.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 218.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 219.20
Dump at : namespaces/test/arrayTest.csl : 219.35 :
Dump : Address = 0x00007e8de88fe937 : Number = 128 :: (little endian dump)
0x00007e8de88fe937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe987 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9a7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's a4 :  namespaces/test/arrayTest.csl 222.20
Dump at : namespaces/test/arrayTest.csl : 222.35 :
Dump : Address = 0x00007e8de88fe937 : Number = 128 :: (little endian dump)
0x00007e8de88fe937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe987 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's with one 0x89 - can you find it?
 =============================
Ar2.a5 <:> csl compiled word
SourceCode for Ar2.a5 :> 
: a5 ( n m Ar2 a ) a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ = nl "a4 : " ps location a a.size @ dump a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert ; 
Source code file location of a5 : "namespaces/test/arrayTest.csl" : 224.2 :: we are now at : namespaces/test/arrayTest.csl : 229.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b08da8 -- code size = 397 bytes
TypeSignature : 
 -----------------------------
Word :: Ar2.a5 : definition = 0x00007e8de8b08da8 : disassembly at namespaces/test/arrayTest.csl : 229.16 :
0x7e8de8b08da8    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08dac    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08db0    4981c608000000          add r14, 0x8                                           
0x7e8de8b08db7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08dbb    4881c000000000          add rax, 0x0                                           
0x7e8de8b08dc2    4983c608                add r14, 0x8                                           
0x7e8de8b08dc6    498906                  mov [r14], rax                                         
 ..          : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][ .. 
0x7e8de8b08dc9    498b47e8                mov rax, [r15-0x18]                                    
 ..      : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] .. 
0x7e8de8b08dcd    b901000000              mov ecx, 0x1                                           
0x7e8de8b08dd2    4803c1                  add rax, rcx                                           
0x7e8de8b08dd5    486bc020                imul rax, rax, 0x20                                    
 ..    : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ .. 
0x7e8de8b08dd9    490106                  add [r14], rax                                         
 .. : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ du .. 
0x7e8de8b08ddc    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b08de0    486bc008                imul rax, rax, 0x8                                     
  : a5 ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup  .. 
0x7e8de8b08de4    490106                  add [r14], rax                                         
 .. ( n m Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp  .. 
0x7e8de8b08de7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08deb    4881c000000000          add rax, 0x0                                           
0x7e8de8b08df2    4983c608                add r14, 0x8                                           
0x7e8de8b08df6    498906                  mov [r14], rax                                         
 ..  Ar2 a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89  .. 
0x7e8de8b08df9    498b47e8                mov rax, [r15-0x18]                                    
 ..  a )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _ass .. 
0x7e8de8b08dfd    b902000000              mov ecx, 0x2                                           
0x7e8de8b08e02    4803c1                  add rax, rcx                                           
0x7e8de8b08e05    486bc020                imul rax, rax, 0x20                                    
 ..  )      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _asser .. 
0x7e8de8b08e09    490106                  add [r14], rax                                         
 ..      a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert   .. 
0x7e8de8b08e0c    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b08e10    486bc008                imul rax, rax, 0x8                                     
 ..    a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e14    490106                  add [r14], rax                                         
 .. a.ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e17    498b06                  mov rax, [r14]                                         
0x7e8de8b08e1a    488b00                  mov rax, [rax]                                         
0x7e8de8b08e1d    498906                  mov [r14], rax                                         
 .. ar[n @ 1 +][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e20    498b0e                  mov rcx, [r14]                                         
0x7e8de8b08e23    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b08e27    488908                  mov [rax], rcx                                         
0x7e8de8b08e2a    4983ee10                sub r14, 0x10                                          
0x7e8de8b08e2e    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b08e38    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08e42    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ][m @] a.ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e45    48b8a3d480e88d7e0000    mov rax, 0x7e8de880d4a3       < string : 'a4 : ' >
0x7e8de8b08e4f    4983c608                add r14, 0x8                                           
0x7e8de8b08e53    498906                  mov [r14], rax                                         
 .. .ar[n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e56    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08e60    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. [n @ 2 +][m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e63    49bbddfeafe88d7e0000    mov r11, 0x7e8de8affedd                                
0x7e8de8b08e6d    49ffd3                  call r11                      < System.location : 0x00007e8de8affedd >
 .. [m @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e70    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08e74    4881c000000000          add rax, 0x0                                           
0x7e8de8b08e7b    4983c608                add r14, 0x8                                           
0x7e8de8b08e7f    498906                  mov [r14], rax                                         
 ..  @] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e82    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08e86    4881c000000000          add rax, 0x0                                           
0x7e8de8b08e8d    4983c608                add r14, 0x8                                           
0x7e8de8b08e91    498906                  mov [r14], rax                                         
 .. ] @ =      nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08e94    48b8cb49e7e88d7e0000    mov rax, 0x7e8de8e749cb                                
0x7e8de8b08e9e    488b00                  mov rax, [rax]                                         
0x7e8de8b08ea1    4983c608                add r14, 0x8                                           
0x7e8de8b08ea5    498906                  mov [r14], rax                                         
 ..     nl "a4 : " ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ea8    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b08eb2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08ebc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b08ebf    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08ec3    4881c000000000          add rax, 0x0                                           
0x7e8de8b08eca    4983c608                add r14, 0x8                                           
0x7e8de8b08ece    498906                  mov [r14], rax                                         
 ..  ps location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ed1    498b47e8                mov rax, [r15-0x18]                                    
 .. location a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ed5    b901000000              mov ecx, 0x1                                           
0x7e8de8b08eda    4803c1                  add rax, rcx                                           
0x7e8de8b08edd    486bc020                imul rax, rax, 0x20                                    
 .. cation a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ee1    490106                  add [r14], rax                                         
 .. ion a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ee4    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b08ee8    486bc008                imul rax, rax, 0x8                                     
 .. n a a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08eec    490106                  add [r14], rax                                         
 ..  a.size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08eef    498b06                  mov rax, [r14]                                         
0x7e8de8b08ef2    488b00                  mov rax, [rax]                                         
0x7e8de8b08ef5    498906                  mov [r14], rax                                         
 .. .size @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ef8    498b06                  mov rax, [r14]                                         
0x7e8de8b08efb    4983c608                add r14, 0x8                                           
0x7e8de8b08eff    498906                  mov [r14], rax                                         
 .. e @ dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08f02    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b08f0c    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..  dump     a.ar[n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08f0f    b889000000              mov eax, 0x89                                          
0x7e8de8b08f14    4983c608                add r14, 0x8                                           
0x7e8de8b08f18    498906                  mov [r14], rax                                         
0x7e8de8b08f1b    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b08f25    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b08f28    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b08f2c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b08f30    4983ee18                sub r14, 0x18                                          
 .. [n @ 1 +][m @] @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08f34    c3                      ret                                                    
Word_Disassemble : word - 'a5' :: codeSize = 397
Word : 0x00007e8de8e753a3 :: Compiled at : 0x00007e8de8b08da8
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 229.16 <::

 a4 :  namespaces/test/arrayTest.csl 231.10
Dump at : namespaces/test/arrayTest.csl : 231.10 :
Dump : Address = 0x00007e8de88fe937 : Number = 128 :: (little endian dump)
0x00007e8de88fe937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe987 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 231.12 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 a4 :  namespaces/test/arrayTest.csl 232.20
Dump at : namespaces/test/arrayTest.csl : 232.32 :
Dump : Address = 0x00007e8de88fe937 : Number = 128 :: (little endian dump)
0x00007e8de88fe937 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe947 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe957 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe967 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe977 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe987 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe997 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9a7 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 
should show all 0's with one 0x89 - can you find it?
_ClassTypedef : at namespaces/test/arrayTest.csl : 234.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 235.11 :
DataStack depth =   4 : Dsp (R14) = Top = 0x00007e8de7910ad8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad8 > = 0x00007e8de880d64a       < string : 'a6' >
  DataStack   [  -1 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 235.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 0x00007e8de88fea7f 0x00007e8de88fea7f 0x0000000000000089 0x00007e8de88fea7f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 243.20
Dump at : namespaces/test/arrayTest.csl : 243.38 :
Dump : Address = 0x00007e8de88fe9b7 : Number = 144 :: (little endian dump)
0x00007e8de88fe9b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea37 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 0x00007e8de88fea7f 0x00007e8de88fea7f 0x0000000000000089
 0x00007e8de88fea37
DataStack at : namespaces/test/arrayTest.csl : 247.42 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x00007e8de88fea7f
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x00007e8de88fea37
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 0x00007e8de88fea7f 0x00007e8de88fea7f 0x0000000000000089
 a6 :  namespaces/test/arrayTest.csl 250.23
Dump at : namespaces/test/arrayTest.csl : 250.38 :
Dump : Address = 0x00007e8de88fe9b7 : Number = 144 :: (little endian dump)
0x00007e8de88fe9b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 137 0x00007e8de88fea7f 0x0000000000000089 0x00007e8de88fea37 0x0000000000000089 0x00007e8de88fea37 0x0000000000000089 0x00007e8de88fea37 0x0000000000000000
 a6 :  namespaces/test/arrayTest.csl 258.23
Dump at : namespaces/test/arrayTest.csl : 258.43 :
Dump : Address = 0x00007e8de88fea2f : Number = 16 :: (little endian dump)
0x00007e8de88fea2f :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar3.a8 <:> csl compiled word
SourceCode for Ar3.a8 :> 
: a8 ( Ar3 a ) a.ar[1][2][1] a.ar[2][2][1] @ = nl "a8.a : " ps location a size @ dump a.ar[1][2][1] dup hp @ dup hp 0x89 _assert a.ar[2][2][1] dup hp @ dup hp 0x89 _assert ; 
Source code file location of a8 : "namespaces/test/arrayTest.csl" : 260.2 :: we are now at : namespaces/test/arrayTest.csl : 271.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b08f3a -- code size = 367 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar3.a8 : definition = 0x00007e8de8b08f3a : disassembly at namespaces/test/arrayTest.csl : 271.16 :
0x7e8de8b08f3a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b08f3e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b08f42    4981c608000000          add r14, 0x8                                           
0x7e8de8b08f49    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08f4d    4881c080000000          add rax, 0x80                                          
 ..     : a8 ( Ar3 a )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x8 .. 
0x7e8de8b08f54    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b08f58    4881c1c8000000          add rcx, 0xc8                                          
0x7e8de8b08f5f    488b09                  mov rcx, [rcx]                                         
 ..  )      a.ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a .. 
0x7e8de8b08f62    488908                  mov [rax], rcx                                         
0x7e8de8b08f65    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b08f6f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08f79    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ar[1][2][1] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][ .. 
0x7e8de8b08f7c    48b845d780e88d7e0000    mov rax, 0x7e8de880d745       < string : 'a8.a : ' >
0x7e8de8b08f86    4983c608                add r14, 0x8                                           
0x7e8de8b08f8a    498906                  mov [r14], rax                                         
 .. ] a.ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp  .. 
0x7e8de8b08f8d    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b08f97    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. .ar[2][2][1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ d .. 
0x7e8de8b08f9a    49bbddfeafe88d7e0000    mov r11, 0x7e8de8affedd                                
0x7e8de8b08fa4    49ffd3                  call r11                      < System.location : 0x00007e8de8affedd >
 .. [1] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x8 .. 
0x7e8de8b08fa7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08fab    4881c000000000          add rax, 0x0                                           
0x7e8de8b08fb2    4983c608                add r14, 0x8                                           
0x7e8de8b08fb6    498906                  mov [r14], rax                                         
 .. ] @ =      nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89  .. 
0x7e8de8b08fb9    48b86b9de7e88d7e0000    mov rax, 0x7e8de8e79d6b                                
0x7e8de8b08fc3    488b00                  mov rax, [rax]                                         
0x7e8de8b08fc6    4983c608                add r14, 0x8                                           
0x7e8de8b08fca    498906                  mov [r14], rax                                         
 ..     nl "a8.a : " ps location a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert .. 
0x7e8de8b08fcd    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b08fd7    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b08fe1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b08fe4    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b08fe8    4881c080000000          add rax, 0x80                                          
0x7e8de8b08fef    4983c610                add r14, 0x10                                          
0x7e8de8b08ff3    498906                  mov [r14], rax                                         
 .. ation a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ff6    498946f8                mov [r14-0x8], rax                                     
 .. n a size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b08ffa    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09004    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..  size @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09007    498b06                  mov rax, [r14]                                         
0x7e8de8b0900a    488b00                  mov rax, [rax]                                         
0x7e8de8b0900d    498906                  mov [r14], rax                                         
 .. ize @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09010    498b06                  mov rax, [r14]                                         
0x7e8de8b09013    4983c608                add r14, 0x8                                           
0x7e8de8b09017    498906                  mov [r14], rax                                         
 .. @ dump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b0901a    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09024    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. ump     a.ar[1][2][1] dup hp @ dup hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09027    b889000000              mov eax, 0x89                                          
0x7e8de8b0902c    4983c608                add r14, 0x8                                           
0x7e8de8b09030    498906                  mov [r14], rax                                         
0x7e8de8b09033    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b0903d    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b09040    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09044    4881c0c8000000          add rax, 0xc8                                          
0x7e8de8b0904b    4983c610                add r14, 0x10                                          
0x7e8de8b0904f    498906                  mov [r14], rax                                         
 .. up hp 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09052    498946f8                mov [r14-0x8], rax                                     
 .. p 0x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09056    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09060    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. x89 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09063    498b06                  mov rax, [r14]                                         
0x7e8de8b09066    488b00                  mov rax, [rax]                                         
0x7e8de8b09069    498906                  mov [r14], rax                                         
 .. 9 _assert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b0906c    498b06                  mov rax, [r14]                                         
0x7e8de8b0906f    4983c608                add r14, 0x8                                           
0x7e8de8b09073    498906                  mov [r14], rax                                         
 .. ssert      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09076    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09080    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. rt      a.ar[2][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b09083    b889000000              mov eax, 0x89                                          
0x7e8de8b09088    4983c608                add r14, 0x8                                           
0x7e8de8b0908c    498906                  mov [r14], rax                                         
0x7e8de8b0908f    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b09099    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b0909c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b090a0    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b090a4    4983ee08                sub r14, 0x8                                           
 .. ][2][1] dup hp @ dup hp 0x89 _assert  ;  .. 
0x7e8de8b090a8    c3                      ret                                                    
Word_Disassemble : word - 'a8' :: codeSize = 367
Word : 0x00007e8de8e7e5bb :: Compiled at : 0x00007e8de8b08f3a
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 271.16 <::
 0x00007e8de88fea7f 137 a6 :  namespaces/test/arrayTest.csl 274.20
Dump at : namespaces/test/arrayTest.csl : 274.43 :
Dump : Address = 0x00007e8de88fea7f : Number = 16 :: (little endian dump)
0x00007e8de88fea7f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 a8.a :  namespaces/test/arrayTest.csl 275.6
Dump at : namespaces/test/arrayTest.csl : 275.6 :
Dump : Address = 0x00007e8de88fe9b7 : Number = 144 :: (little endian dump)
0x00007e8de88fe9b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x00007e8de88fea37 0x0000000000000089 0x00007e8de88fea7f 0x0000000000000089 a6 :  namespaces/test/arrayTest.csl 276.20
Dump at : namespaces/test/arrayTest.csl : 276.43 :
Dump : Address = 0x00007e8de88fea7f : Number = 16 :: (little endian dump)
0x00007e8de88fea7f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 =============================
Ar3.a7 <:> csl compiled word, prefix
SourceCode for Ar3.a7 :> 
: a7 ( n, m, o, Ar3 a ) a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ = nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;; 
Source code file location of a7 : "namespaces/test/arrayTest.csl" : 277.2 :: we are now at : namespaces/test/arrayTest.csl : 283.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b090ae -- code size = 468 bytes
TypeSignature : 
 -----------------------------
Word :: Ar3.a7 : definition = 0x00007e8de8b090ae : disassembly at namespaces/test/arrayTest.csl : 283.16 :
0x7e8de8b090ae    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b090b2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b090b6    4981c608000000          add r14, 0x8                                           
0x7e8de8b090bd    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b090c1    4881c000000000          add rax, 0x0                                           
0x7e8de8b090c8    4983c608                add r14, 0x8                                           
0x7e8de8b090cc    498906                  mov [r14], rax                                         
 ..     : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @ .. 
0x7e8de8b090cf    498b47e0                mov rax, [r15-0x20]                                    
 .. : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 .. 
0x7e8de8b090d3    b901000000              mov ecx, 0x1                                           
0x7e8de8b090d8    4803c1                  add rax, rcx                                           
0x7e8de8b090db    486bc048                imul rax, rax, 0x48                                    
  : a7 ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 d .. 
0x7e8de8b090df    490106                  add [r14], rax                                         
 .. ( n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump .. 
0x7e8de8b090e2    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b090e6    486bc018                imul rax, rax, 0x18                                    
 .. n, m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump   .. 
0x7e8de8b090ea    490106                  add [r14], rax                                         
 .. m, o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump      .. 
0x7e8de8b090ed    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b090f1    486bc008                imul rax, rax, 0x8                                     
 ..  o, Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        .. 
0x7e8de8b090f5    490106                  add [r14], rax                                         
 ..  Ar3 a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a. .. 
0x7e8de8b090f8    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b090fc    4881c000000000          add rax, 0x0                                           
0x7e8de8b09103    4983c608                add r14, 0x8                                           
0x7e8de8b09107    498906                  mov [r14], rax                                         
 .. a )      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n  .. 
0x7e8de8b0910a    498b47e0                mov rax, [r15-0x20]                                    
 ..      a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1  .. 
0x7e8de8b0910e    b902000000              mov ecx, 0x2                                           
0x7e8de8b09113    4803c1                  add rax, rcx                                           
0x7e8de8b09116    486bc048                imul rax, rax, 0x48                                    
 ..    a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +] .. 
0x7e8de8b0911a    490106                  add [r14], rax                                         
 .. a.ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m  .. 
0x7e8de8b0911d    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b09121    486bc018                imul rax, rax, 0x18                                    
 .. ar[n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @] .. 
0x7e8de8b09125    490106                  add [r14], rax                                         
 .. n @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o  .. 
0x7e8de8b09128    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0912c    486bc008                imul rax, rax, 0x8                                     
 .. @ 1 +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] .. 
0x7e8de8b09130    490106                  add [r14], rax                                         
 ..  +][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @  .. 
0x7e8de8b09133    498b06                  mov rax, [r14]                                         
0x7e8de8b09136    488b00                  mov rax, [rax]                                         
0x7e8de8b09139    498906                  mov [r14], rax                                         
 .. ][m @][o @] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ du .. 
0x7e8de8b0913c    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0913f    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09143    488908                  mov [rax], rcx                                         
0x7e8de8b09146    4983ee10                sub r14, 0x10                                          
0x7e8de8b0914a    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b09154    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0915e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ] a.ar[n @ 2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89  .. 
0x7e8de8b09161    48b89dd880e88d7e0000    mov rax, 0x7e8de880d89d       < string : 'a7.a : ' >
0x7e8de8b0916b    4983c608                add r14, 0x8                                           
0x7e8de8b0916f    498906                  mov [r14], rax                                         
 ..  2 +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert; .. 
0x7e8de8b09172    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0917c    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. +][m @][o @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0917f    49bbddfeafe88d7e0000    mov r11, 0x7e8de8affedd                                
0x7e8de8b09189    49ffd3                  call r11                      < System.location : 0x00007e8de8affedd >
 ..  @] @ =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0918c    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09190    4881c000000000          add rax, 0x0                                           
0x7e8de8b09197    4983c608                add r14, 0x8                                           
0x7e8de8b0919b    498906                  mov [r14], rax                                         
 ..  =      nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0919e    498b47e0                mov rax, [r15-0x20]                                    
 ..     nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091a2    b901000000              mov ecx, 0x1                                           
0x7e8de8b091a7    4803c1                  add rax, rcx                                           
0x7e8de8b091aa    486bc048                imul rax, rax, 0x48                                    
 ..   nl "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091ae    490106                  add [r14], rax                                         
 .. l "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091b1    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b091b5    486bc018                imul rax, rax, 0x18                                    
 .. "a7.a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091b9    490106                  add [r14], rax                                         
 .. .a : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091bc    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b091c0    486bc008                imul rax, rax, 0x8                                     
 ..  : " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091c4    490106                  add [r14], rax                                         
 .. " ps location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091c7    b810000000              mov eax, 0x10                                          
0x7e8de8b091cc    4983c608                add r14, 0x8                                           
0x7e8de8b091d0    498906                  mov [r14], rax                                         
 .. s location a.ar[n @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091d3    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b091dd    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b091e7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b091ea    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b091ee    4881c000000000          add rax, 0x0                                           
0x7e8de8b091f5    4983c608                add r14, 0x8                                           
0x7e8de8b091f9    498906                  mov [r14], rax                                         
 ..  @ 1 +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b091fc    498b47e0                mov rax, [r15-0x20]                                    
 ..  +][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09200    b901000000              mov ecx, 0x1                                           
0x7e8de8b09205    4803c1                  add rax, rcx                                           
0x7e8de8b09208    486bc048                imul rax, rax, 0x48                                    
 .. ][m @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0920c    490106                  add [r14], rax                                         
 ..  @][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0920f    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b09213    486bc018                imul rax, rax, 0x18                                    
 .. ][o @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09217    490106                  add [r14], rax                                         
 ..  @] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0921a    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0921e    486bc008                imul rax, rax, 0x8                                     
 .. ] 16 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09222    490106                  add [r14], rax                                         
 .. 6 dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09225    498b06                  mov rax, [r14]                                         
0x7e8de8b09228    488b00                  mov rax, [rax]                                         
0x7e8de8b0922b    498906                  mov [r14], rax                                         
 .. dump        a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b0922e    498b06                  mov rax, [r14]                                         
0x7e8de8b09231    4983c608                add r14, 0x8                                           
0x7e8de8b09235    498906                  mov [r14], rax                                         
 ..         a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09238    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09242    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..      a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09245    b889000000              mov eax, 0x89                                          
0x7e8de8b0924a    4983c608                add r14, 0x8                                           
0x7e8de8b0924e    498906                  mov [r14], rax                                         
 .. a.ar[n @ 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09251    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0925b    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b09265    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b09268    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b09272    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b09275    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b09279    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0927d    4983ee20                sub r14, 0x20                                          
 .. 1 +][m @][o @] @ dup hp 0x89 s _assert;;  .. 
0x7e8de8b09281    c3                      ret                                                    
Word_Disassemble : word - 'a7' :: codeSize = 468
Word : 0x00007e8de8e849bb :: Compiled at : 0x00007e8de8b090ae
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 283.16 <::
 a6 :  namespaces/test/arrayTest.csl 285.20
Dump at : namespaces/test/arrayTest.csl : 285.43 :
Dump : Address = 0x00007e8de88fea7f : Number = 16 :: (little endian dump)
0x00007e8de88fea7f :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

 a7.a :  namespaces/test/arrayTest.csl 287.12
Dump at : namespaces/test/arrayTest.csl : 287.12 :
Dump : Address = 0x00007e8de88fea37 : Number = 16 :: (little endian dump)
0x00007e8de88fea37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000089
DataStack at : namespaces/test/arrayTest.csl : 287.12 :
DataStack depth =  10 : Dsp (R14) = Top = 0x00007e8de7910b08, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b08 > = 0x0000000000000089
  DataStack   [  -1 ] < 0x00007e8de7910b00 > = 0x0000000000000089
  DataStack   [  -2 ] < 0x00007e8de7910af8 > = 0x00005b343f36fc20
  DataStack   [  -3 ] < 0x00007e8de7910af0 > = 0x00007e8de88fe9b7
  DataStack   [  -4 ] < 0x00007e8de7910ae8 > = 0x0000000000000001
  DataStack   [  -5 ] < 0x00007e8de7910ae0 > = 0x0000000000000002
  DataStack   [  -6 ] < 0x00007e8de7910ad8 > = 0x0000000000000000
  DataStack   [  -7 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 a6 :  namespaces/test/arrayTest.csl 288.20
Dump at : namespaces/test/arrayTest.csl : 288.38 :
Dump : Address = 0x00007e8de88fe9b7 : Number = 144 :: (little endian dump)
0x00007e8de88fe9b7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9c7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9d7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9e7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fe9f7 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea07 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea17 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea27 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fea37 :  89 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 289.15 : token = class : cloneFlag = 0
_ClassTypedef : at namespaces/test/arrayTest.csl : 307.16 : token = class : cloneFlag = 0
 =============================
Ar9.a9 <:> csl compiled word
SourceCode for Ar9.a9 :> 
: a9 ( Ar9 ar9 | d x y z ) x 0 = y 0 = z 0 = d ar9.dimSize @ = { z @ d @ < } { { y @ d @ < } { { x @ d @ < } { ar9.ar [z @][y @][x @ ] x @ = x ++ } while x 0 = y ++ } while x 0 = y 0 = z ++ } while oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67]) a9dump ( 0 246 67 ar9 ) ; 
Source code file location of a9 : "namespaces/test/arrayTest.csl" : 324.2 :: we are now at : namespaces/test/arrayTest.csl : 355.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b09789 -- code size = 376 bytes
TypeSignature : Object 
 -----------------------------
Word :: Ar9.a9 : definition = 0x00007e8de8b09789 : disassembly at namespaces/test/arrayTest.csl : 355.16 :
0x7e8de8b09789    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0978d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b09791    4981c628000000          add r14, 0x28                                          
 ..   : a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             .. 
0x7e8de8b09798    49c7471000000000        mov qword [r15+0x10], 0x0                              
: a9 ( Ar9 ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ .. 
0x7e8de8b097a0    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..  ar9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < .. 
0x7e8de8b097a8    49c7472000000000        mov qword [r15+0x20], 0x0                              
 .. r9 | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < } .. 
0x7e8de8b097b0    498d4708                lea rax, [r15+0x8]                                     
 ..  | d x y z )      x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }   .. 
0x7e8de8b097b4    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b097b8    488b09                  mov rcx, [rcx]                                         
 ..     x 0 = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {   .. 
0x7e8de8b097bb    488908                  mov [rax], rcx                                         
 .. = y 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {           .. 
0x7e8de8b097be    498b4720                mov rax, [r15+0x20]                                    
 .. 0 = z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {               .. 
0x7e8de8b097c2    498b4f08                mov rcx, [r15+0x8]                                     
 .. z 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 a .. 
0x7e8de8b097c6    483bc1                  cmp rax, rcx                                           
 .. 0 = d ar9.dimSize @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9 .. 
0x7e8de8b097c9    0f8dae000000            jge 0x7e8de8b0987d            < Ar9.a9+244 >
 .. @ =     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ .. 
0x7e8de8b097cf    498b4718                mov rax, [r15+0x18]                                    
 ..     { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x .. 
0x7e8de8b097d3    498b4f08                mov rcx, [r15+0x8]                                     
 .. { z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ = .. 
0x7e8de8b097d7    483bc1                  cmp rax, rcx                                           
 .. z @ d @ < }     {         { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =   .. 
0x7e8de8b097da    0f8d84000000            jge 0x7e8de8b09864            < Ar9.a9+219 >
 .. { y @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++        .. 
0x7e8de8b097e0    498b4710                mov rax, [r15+0x10]                                    
 .. @ d @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++            .. 
0x7e8de8b097e4    498b4f08                mov rcx, [r15+0x8]                                     
 .. @ < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++                .. 
0x7e8de8b097e8    483bc1                  cmp rax, rcx                                           
 .. < }         {             { x @ d @ < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }  .. 
0x7e8de8b097eb    7d66                    jge 0xe8b09853                < Ar9.a9+202 >
0x7e8de8b097ed    0f1f4000                nop [rax]                                              
0x7e8de8b097f1    498b47f8                mov rax, [r15-0x8]                                     
 .. < }             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 = .. 
0x7e8de8b097f5    4881c008000000          add rax, 0x8                                           
0x7e8de8b097fc    4983c608                add r14, 0x8                                           
0x7e8de8b09800    498906                  mov [r14], rax                                         
 ..             {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =     .. 
0x7e8de8b09803    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b09807    4869c000000100          imul rax, rax, 0x10000                                 
 ..           {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =       .. 
0x7e8de8b0980e    490106                  add [r14], rax                                         
 ..        {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =          .. 
0x7e8de8b09811    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b09815    4869c000010000          imul rax, rax, 0x100                                   
 ..      {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =            .. 
0x7e8de8b0981c    490106                  add [r14], rax                                         
 ..   {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =               .. 
0x7e8de8b0981f    498b4710                mov rax, [r15+0x10]                                    
 .. {                 ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                 .. 
0x7e8de8b09823    490106                  add [r14], rax                                         
 ..               ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                     .. 
0x7e8de8b09826    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b0982a    488b00                  mov rax, [rax]                                         
0x7e8de8b0982d    4983c608                add r14, 0x8                                           
 ..             ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                       .. 
0x7e8de8b09831    498906                  mov [r14], rax                                         
 ..           ar9.ar [z @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                         .. 
0x7e8de8b09834    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09837    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0983b    488908                  mov [rax], rcx                                         
0x7e8de8b0983e    4983ee10                sub r14, 0x10                                          
 .. @][y @][x @ ] x @ =                 x ++               }             while              x 0 =                        y ++          }      .. 
0x7e8de8b09842    49ff4710                inc qword [r15+0x10]                                   
0x7e8de8b09846    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0984a    498b4f08                mov rcx, [r15+0x8]                                     
0x7e8de8b0984e    483bc1                  cmp rax, rcx                                           
0x7e8de8b09851    7c9e                    jl 0xe8b097f1                 < Ar9.a9+104 >
 ..  }             while              x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     .. 
0x7e8de8b09853    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..        x 0 =                        y ++          }         while         x 0 =         y 0 =         z ++     }     while     oPrintf (  .. 
0x7e8de8b0985b    49ff4718                inc qword [r15+0x18]                                   
0x7e8de8b0985f    e96bffffff              jmp 0x7e8de8b097cf            < Ar9.a9+70 >
 ..           }         while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][ .. 
0x7e8de8b09864    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..       while         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      .. 
0x7e8de8b0986c    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..         x 0 =         y 0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0  .. 
0x7e8de8b09874    49ff4720                inc qword [r15+0x20]                                   
0x7e8de8b09878    e941ffffff              jmp 0x7e8de8b097be            < Ar9.a9+53 >
 ..    z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b0987d    48b817af40e88d7e0000    mov rax, 0x7e8de840af17                                
0x7e8de8b09887    488bf8                  mov rdi, rax                                           
 .. rintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b0988a    498b47f8                mov rax, [r15-0x8]                                     
 .. f ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b0988e    4881c008003901          add rax, 0x1390008                                     
0x7e8de8b09895    488bc8                  mov rcx, rax                                           
 ..  0 =         z ++     }     while     oPrintf ( "\nar9.ar[0][246][67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b09898    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b098a2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b098ac    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. x", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b098af    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b098b6    4983c608                add r14, 0x8                                           
0x7e8de8b098ba    498906                  mov [r14], rax                                         
 .. , ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b098bd    b8f6000000              mov eax, 0xf6                                          
0x7e8de8b098c2    4983c608                add r14, 0x8                                           
0x7e8de8b098c6    498906                  mov [r14], rax                                         
 .. 9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b098c9    b843000000              mov eax, 0x43                                          
0x7e8de8b098ce    4983c608                add r14, 0x8                                           
0x7e8de8b098d2    498906                  mov [r14], rax                                         
 .. r[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b098d5    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b098d9    4881c000000000          add rax, 0x0                                           
0x7e8de8b098e0    4983c608                add r14, 0x8                                           
0x7e8de8b098e4    498906                  mov [r14], rax                                         
 .. [67] = %lx", ar9.ar[0][246][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b098e7    49bbd592b0e88d7e0000    mov r11, 0x7e8de8b092d5                                
0x7e8de8b098f1    49ffd3                  call r11                      < Ar9.a9dump : 0x00007e8de8b092d5 >
0x7e8de8b098f4    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b098f8    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b098fc    4983ee08                sub r14, 0x8                                           
 .. 46][67])      a9dump ( 0 246 67 ar9 ) ;  .. 
0x7e8de8b09900    c3                      ret                                                    
Word_Disassemble : word - 'a9' :: codeSize = 376
Word : 0x00007e8de8e97a2b :: Compiled at : 0x00007e8de8b09789
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 355.16 <::

DataStack at : namespaces/test/arrayTest.csl : 355.18 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 357.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 256
ar9.ar[0][246][67] = 0
 Ar9 :  namespaces/test/arrayTest.csl 360.8 : x = 0 y = 246 z = 67
 dimSize = 256
 a = 0x00007e8de62001a8 : a.ar = 0x00007e8de62001b0

Dump at : namespaces/test/arrayTest.csl : 360.8 :
Dump : Address = 0x00007e8de663f7b0 : Number = 256 :: (little endian dump)
0x00007e8de663f7b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x00007e8de663f7c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x00007e8de663f7d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x00007e8de663f7e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x00007e8de663f7f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x00007e8de663f800 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x00007e8de663f810 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x00007e8de663f820 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x00007e8de663f830 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x00007e8de663f840 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x00007e8de663f850 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x00007e8de663f860 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x00007e8de663f870 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x00007e8de663f880 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x00007e8de663f890 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x00007e8de663f8a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

 Ar9 :  namespaces/test/arrayTest.csl 361.25 : x = 0 y = 123 z = 234
 dimSize = 256
 a = 0x00007e8de62001a8 : a.ar = 0x00007e8de62001b0

Dump at : namespaces/test/arrayTest.csl : 361.25 :
Dump : Address = 0x00007e8de70a7cb0 : Number = 256 :: (little endian dump)
0x00007e8de70a7cb0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x00007e8de70a7cc0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x00007e8de70a7cd0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x00007e8de70a7ce0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x00007e8de70a7cf0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x00007e8de70a7d00 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x00007e8de70a7d10 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x00007e8de70a7d20 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x00007e8de70a7d30 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x00007e8de70a7d40 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x00007e8de70a7d50 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x00007e8de70a7d60 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x00007e8de70a7d70 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x00007e8de70a7d80 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x00007e8de70a7d90 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x00007e8de70a7da0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

_ClassTypedef : at namespaces/test/arrayTest.csl : 364.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 365.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 0x00007e8de88fea47 0x00007e8de88fea48 0x00007e8de88fea50 26 254
DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 384.13 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 0x00007e8de88fea85
 0x00007e8de88fea7d

 -----------------------------
 array out of bounds checking with variables?! namespaces/test/arrayTest.csl 386.9
 -----------------------------


Dump at : namespaces/test/arrayTest.csl : 386.9 :
Dump : Address = 0x00007e8de88fea62 : Number = 32 :: (little endian dump)
0x00007e8de88fea62 :  77 00 00 00 00 00 77 00  00 00 00 00 00 00 00 00  w.....w. ........ 
0x00007e8de88fea72 :  00 00 00 00 00 00 00 00  77 00 00 77 00 00 00 00  ........ w..w.... 

 =============================
ct0.tct <:> csl compiled word
SourceCode for ct0.tct :> 
: tct ( y ct0 a ) a.ar [0][0][0] 0x77 = a.ar [0][y @][0] a.ar [0][0][0] @ = a.ar [y @][y @][0] a.ar [0][0][0] @ = a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ = a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ = TODO ( "array out of bounds checking with variables?!" ) a.ar 32 dump a.ar [1][2][2] 7 = a.ar [1][2][2] @ 7 _assert ; 
Source code file location of tct : "namespaces/test/arrayTest.csl" : 373.2 :: we are now at : namespaces/test/arrayTest.csl : 387.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b09906 -- code size = 630 bytes
TypeSignature : 
 -----------------------------
Word :: ct0.tct : definition = 0x00007e8de8b09906 : disassembly at namespaces/test/arrayTest.csl : 387.16 :
0x7e8de8b09906    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0990a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0990e    4981c608000000          add r14, 0x8                                           
0x7e8de8b09915    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09919    4881c000000000          add rax, 0x0                                           
0x7e8de8b09920    b977000000              mov ecx, 0x77                                          
: tct ( y ct0 a )     a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @  .. 
0x7e8de8b09925    488908                  mov [rax], rcx                                         
0x7e8de8b09928    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0992c    4881c000000000          add rax, 0x0                                           
0x7e8de8b09933    4983c608                add r14, 0x8                                           
0x7e8de8b09937    498906                  mov [r14], rax                                         
 ..   a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] d .. 
0x7e8de8b0993a    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0993e    486bc003                imul rax, rax, 0x3                                     
 .. a.ar [0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup .. 
0x7e8de8b09942    490106                  add [r14], rax                                         
 .. 0][0][0] 0x77 =      a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp .. 
0x7e8de8b09945    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09949    4881c000000000          add rax, 0x0                                           
0x7e8de8b09950    4983c608                add r14, 0x8                                           
0x7e8de8b09954    498906                  mov [r14], rax                                         
 ..       a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] .. 
0x7e8de8b09957    498b06                  mov rax, [r14]                                         
0x7e8de8b0995a    488b00                  mov rax, [rax]                                         
0x7e8de8b0995d    498906                  mov [r14], rax                                         
 ..     a.ar [0][y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ .. 
0x7e8de8b09960    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09963    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09967    488908                  mov [rax], rcx                                         
0x7e8de8b0996a    4983ee10                sub r14, 0x10                                          
0x7e8de8b0996e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09972    4881c000000000          add rax, 0x0                                           
0x7e8de8b09979    4983c608                add r14, 0x8                                           
0x7e8de8b0997d    498906                  mov [r14], rax                                         
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [ .. 
0x7e8de8b09980    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09984    486bc009                imul rax, rax, 0x9                                     
 ..  @][0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y  .. 
0x7e8de8b09988    490106                  add [r14], rax                                         
 .. [0] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][ .. 
0x7e8de8b0998b    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0998f    486bc003                imul rax, rax, 0x3                                     
 .. ] a.ar [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y  .. 
0x7e8de8b09993    490106                  add [r14], rax                                         
 ..  [0][0][0] @ =     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ .. 
0x7e8de8b09996    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0999a    4881c000000000          add rax, 0x0                                           
0x7e8de8b099a1    4983c608                add r14, 0x8                                           
0x7e8de8b099a5    498906                  mov [r14], rax                                         
 ..     a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp .. 
0x7e8de8b099a8    498b06                  mov rax, [r14]                                         
0x7e8de8b099ab    488b00                  mov rax, [rax]                                         
0x7e8de8b099ae    498906                  mov [r14], rax                                         
 ..   a.ar [y @][y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a .. 
0x7e8de8b099b1    498b0e                  mov rcx, [r14]                                         
0x7e8de8b099b4    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b099b8    488908                  mov [rax], rcx                                         
0x7e8de8b099bb    4983ee10                sub r14, 0x10                                          
0x7e8de8b099bf    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b099c3    4881c000000000          add rax, 0x0                                           
0x7e8de8b099ca    4983c608                add r14, 0x8                                           
0x7e8de8b099ce    498906                  mov [r14], rax                                         
 .. [y @][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0 .. 
0x7e8de8b099d1    498b47f0                mov rax, [r15-0x10]                                    
 .. ][0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @  .. 
0x7e8de8b099d5    b901000000              mov ecx, 0x1                                           
0x7e8de8b099da    4803c1                  add rax, rcx                                           
0x7e8de8b099dd    486bc009                imul rax, rax, 0x9                                     
 .. 0] a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =  .. 
0x7e8de8b099e1    490106                  add [r14], rax                                         
 .. a.ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     .. 
0x7e8de8b099e4    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b099e8    486bc003                imul rax, rax, 0x3                                     
 .. ar [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     T .. 
0x7e8de8b099ec    490106                  add [r14], rax                                         
 .. [0][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO .. 
0x7e8de8b099ef    498b47f0                mov rax, [r15-0x10]                                    
 .. ][0][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( .. 
0x7e8de8b099f3    490106                  add [r14], rax                                         
 .. ][0] @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "a .. 
0x7e8de8b099f6    498b06                  mov rax, [r14]                                         
0x7e8de8b099f9    4983c608                add r14, 0x8                                           
0x7e8de8b099fd    498906                  mov [r14], rax                                         
 ..  @ =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array .. 
0x7e8de8b09a00    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b09a0a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b09a14    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. =     a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array ou .. 
0x7e8de8b09a17    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09a21    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..    a.ar [y @ 1 +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out o .. 
0x7e8de8b09a24    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09a28    4881c000000000          add rax, 0x0                                           
0x7e8de8b09a2f    4983c608                add r14, 0x8                                           
0x7e8de8b09a33    498906                  mov [r14], rax                                         
 .. +][y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checki .. 
0x7e8de8b09a36    498b06                  mov rax, [r14]                                         
0x7e8de8b09a39    488b00                  mov rax, [rax]                                         
0x7e8de8b09a3c    498906                  mov [r14], rax                                         
 .. [y @][y @] dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking .. 
0x7e8de8b09a3f    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09a42    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09a46    488908                  mov [rax], rcx                                         
0x7e8de8b09a49    4983ee10                sub r14, 0x10                                          
0x7e8de8b09a4d    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09a51    4881c000000000          add rax, 0x0                                           
0x7e8de8b09a58    4983c608                add r14, 0x8                                           
0x7e8de8b09a5c    498906                  mov [r14], rax                                         
 .. dup nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with varia .. 
0x7e8de8b09a5f    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09a63    486bc009                imul rax, rax, 0x9                                     
 .. p nl hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variabl .. 
0x7e8de8b09a67    490106                  add [r14], rax                                         
 .. l hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables? .. 
0x7e8de8b09a6a    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09a6e    486bc003                imul rax, rax, 0x3                                     
 .. hp a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" .. 
0x7e8de8b09a72    490106                  add [r14], rax                                         
 .. a.ar [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )  .. 
0x7e8de8b09a75    498b47f0                mov rax, [r15-0x10]                                    
 ..  [0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )      .. 
0x7e8de8b09a79    b901000000              mov ecx, 0x1                                           
0x7e8de8b09a7e    4803c1                  add rax, rcx                                           
 .. 0][0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a. .. 
0x7e8de8b09a81    490106                  add [r14], rax                                         
 .. 0][0] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar  .. 
0x7e8de8b09a84    498b06                  mov rax, [r14]                                         
0x7e8de8b09a87    4983c608                add r14, 0x8                                           
0x7e8de8b09a8b    498906                  mov [r14], rax                                         
 .. ] @ =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 d .. 
0x7e8de8b09a8e    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b09a98    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b09aa2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  =    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump .. 
0x7e8de8b09aa5    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09aaf    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..    a.ar [y @][y @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump    .. 
0x7e8de8b09ab2    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09ab6    4881c000000000          add rax, 0x0                                           
0x7e8de8b09abd    4983c608                add r14, 0x8                                           
0x7e8de8b09ac1    498906                  mov [r14], rax                                         
 ..  @][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2 .. 
0x7e8de8b09ac4    498b06                  mov rax, [r14]                                         
0x7e8de8b09ac7    488b00                  mov rax, [rax]                                         
0x7e8de8b09aca    498906                  mov [r14], rax                                         
 .. ][y @ 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2]  .. 
0x7e8de8b09acd    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09ad0    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09ad4    488908                  mov [rax], rcx                                         
0x7e8de8b09ad7    4983ee10                sub r14, 0x10                                          
 .. p nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar  .. 
0x7e8de8b09adb    48b87de180e88d7e0000    mov rax, 0x7e8de880e17d       < string : 'array out of bounds checking with variables?!' >
0x7e8de8b09ae5    4983c608                add r14, 0x8                                           
0x7e8de8b09ae9    498906                  mov [r14], rax                                         
 .. 1 +] dup nl hp a.ar [0][0][0] @ =     TODO ( "array out of bounds checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =    .. 
0x7e8de8b09aec    49bb9523b0e88d7e0000    mov r11, 0x7e8de8b02395                                
0x7e8de8b09af6    49ffd3                  call r11                      < Root.TODO : 0x00007e8de8b02395 >
0x7e8de8b09af9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09afd    4881c000000000          add rax, 0x0                                           
0x7e8de8b09b04    4983c608                add r14, 0x8                                           
0x7e8de8b09b08    498906                  mov [r14], rax                                         
 .. checking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x7e8de8b09b0b    b820000000              mov eax, 0x20                                          
0x7e8de8b09b10    4983c608                add r14, 0x8                                           
0x7e8de8b09b14    498906                  mov [r14], rax                                         
 .. cking with variables?!" )     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x7e8de8b09b17    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b09b21    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b09b2b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b09b2e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09b32    4881c011000000          add rax, 0x11                                          
0x7e8de8b09b39    b907000000              mov r9d, 0x7                                           
 ..     a.ar 32 dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x7e8de8b09b3e    488908                  mov [rax], rcx                                         
0x7e8de8b09b41    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09b45    4881c011000000          add rax, 0x11                                          
0x7e8de8b09b4c    488b00                  mov rax, [rax]                                         
0x7e8de8b09b4f    4983c608                add r14, 0x8                                           
 ..  dump     a.ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x7e8de8b09b53    498906                  mov [r14], rax                                         
 .. ar [1][2][2] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x7e8de8b09b56    b807000000              mov eax, 0x7                                           
0x7e8de8b09b5b    4983c608                add r14, 0x8                                           
0x7e8de8b09b5f    498906                  mov [r14], rax                                         
0x7e8de8b09b62    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b09b6c    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b09b6f    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b09b73    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b09b77    4983ee10                sub r14, 0x10                                          
 .. ] 7 =     a.ar [1][2][2] @ 7 _assert  ;  .. 
0x7e8de8b09b7b    c3                      ret                                                    
Word_Disassemble : word - 'tct' :: codeSize = 630
Word : 0x00007e8de8ea34fb :: Compiled at : 0x00007e8de8b09906
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 387.16 <::

_ClassTypedef : at namespaces/test/arrayTest.csl : 389.15 : token = class : cloneFlag = 0
DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 390.14 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 0x00007e8de88fea86
 0x00007e8de88fea98
 0x00007e8de88fea86
Dump at : namespaces/test/arrayTest.csl : 397.11 :
Dump : Address = 0x00007e8de88fea7d : Number = 32 :: (little endian dump)
0x00007e8de88fea7d :  77 00 00 00 00 00 77 00  77 4d 00 00 00 00 00 00  w.....w. wM...... 
0x00007e8de88fea8d :  00 00 00 00 00 00 00 00  00 00 00 4d 00 00 00 00  ........ ...M.... 

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 403.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
C_Syntax.ctcta <:> csl compiled word, prefix
SourceCode for C_Syntax.ctcta :> 
void ctcta ( y cta a ) { a.ar [0][y + 1][0] = 'M' ; a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ; a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ; a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ; hp ( a.ar [y ][y + 1][1] ) ; a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ; a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ; a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ; hp ( &a.ar ) ; cadump ( &a.ar 27 ) ; } 
Source code file location of ctcta : "namespaces/test/arrayTest.csl" : 407.6 :: we are now at : namespaces/test/arrayTest.csl : 421.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b09d60 -- code size = 1000 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.ctcta : definition = 0x00007e8de8b09d60 : disassembly at namespaces/test/arrayTest.csl : 421.10 :
0x7e8de8b09d60    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b09d64    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b09d68    4981c608000000          add r14, 0x8                                           
0x7e8de8b09d6f    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09d73    4881c000000000          add rax, 0x0                                           
0x7e8de8b09d7a    4983c608                add r14, 0x8                                           
0x7e8de8b09d7e    498906                  mov [r14], rax                                         
 .. void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar  .. 
0x7e8de8b09d81    498b47f0                mov rax, [r15-0x10]                                    
void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ] .. 
0x7e8de8b09d85    b901000000              mov ecx, 0x1                                           
0x7e8de8b09d8a    4803c1                  add rax, rcx                                           
0x7e8de8b09d8d    486bc003                imul rax, rax, 0x3                                     
  void ctcta ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y .. 
0x7e8de8b09d91    490106                  add [r14], rax                                         
 ..  y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][ .. 
0x7e8de8b09d94    b84d000000              mov eax, 0x4d                                          
0x7e8de8b09d99    4983c608                add r14, 0x8                                           
0x7e8de8b09d9d    498906                  mov [r14], rax                                         
 ..  ( y cta a ) {     a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1 .. 
0x7e8de8b09da0    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09da3    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09da7    488908                  mov [rax], rcx                                         
0x7e8de8b09daa    4983ee10                sub r14, 0x10                                          
0x7e8de8b09dae    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09db2    4881c000000000          add rax, 0x0                                           
0x7e8de8b09db9    4983c608                add r14, 0x8                                           
0x7e8de8b09dbd    498906                  mov [r14], rax                                         
0x7e8de8b09dc0    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09dc4    486bc009                imul rax, rax, 0x9                                     
 ..   a.ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar  .. 
0x7e8de8b09dc8    490106                  add [r14], rax                                         
 .. ar [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + .. 
0x7e8de8b09dcb    498b47f0                mov rax, [r15-0x10]                                    
 .. 0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][ .. 
0x7e8de8b09dcf    b901000000              mov ecx, 0x1                                           
0x7e8de8b09dd4    4803c1                  add rax, rcx                                           
0x7e8de8b09dd7    486bc003                imul rax, rax, 0x3                                     
 ..  [0][y + 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1 .. 
0x7e8de8b09ddb    490106                  add [r14], rax                                         
 .. [0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 .. 
0x7e8de8b09dde    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09de2    4881c000000000          add rax, 0x0                                           
0x7e8de8b09de9    4983c608                add r14, 0x8                                           
0x7e8de8b09ded    498906                  mov [r14], rax                                         
 ..  ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar .. 
0x7e8de8b09df0    498b47f0                mov rax, [r15-0x10]                                    
 ..   a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y  .. 
0x7e8de8b09df4    b901000000              mov ecx, 0x1                                           
0x7e8de8b09df9    4803c1                  add rax, rcx                                           
0x7e8de8b09dfc    486bc003                imul rax, rax, 0x3                                     
 ..     a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [ .. 
0x7e8de8b09e00    490106                  add [r14], rax                                         
 .. 1][0] = 'M' ;    a.ar [y ][y + 1][ 0] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ .. 
0x7e8de8b09e03    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09e06    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09e0a    488908                  mov [rax], rcx                                         
0x7e8de8b09e0d    4983ee10                sub r14, 0x10                                          
0x7e8de8b09e11    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09e15    4881c000000000          add rax, 0x0                                           
0x7e8de8b09e1c    4983c608                add r14, 0x8                                           
0x7e8de8b09e20    498906                  mov [r14], rax                                         
0x7e8de8b09e23    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09e27    486bc009                imul rax, rax, 0x9                                     
 .. ] = a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp .. 
0x7e8de8b09e2b    490106                  add [r14], rax                                         
 .. a.ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a .. 
0x7e8de8b09e2e    498b47f0                mov rax, [r15-0x10]                                    
 ..  [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar  .. 
0x7e8de8b09e32    b901000000              mov ecx, 0x1                                           
0x7e8de8b09e37    4803c1                  add rax, rcx                                           
0x7e8de8b09e3a    486bc003                imul rax, rax, 0x3                                     
 .. ar [0][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.a .. 
0x7e8de8b09e3e    490106                  add [r14], rax                                         
0x7e8de8b09e41    b801000000              mov eax, 0x1                                           
 .. ][y + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y  .. 
0x7e8de8b09e46    490106                  add [r14], rax                                         
 ..  1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + .. 
0x7e8de8b09e49    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09e4d    4881c000000000          add rax, 0x0                                           
0x7e8de8b09e54    4983c608                add r14, 0x8                                           
0x7e8de8b09e58    498906                  mov [r14], rax                                         
0x7e8de8b09e5b    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09e5f    486bc009                imul rax, rax, 0x9                                     
 ..  ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] .. 
0x7e8de8b09e63    490106                  add [r14], rax                                         
 ..       a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ; .. 
0x7e8de8b09e66    498b47f0                mov rax, [r15-0x10]                                    
 ..   a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;     .. 
0x7e8de8b09e6a    b901000000              mov ecx, 0x1                                           
0x7e8de8b09e6f    4803c1                  add rax, rcx                                           
0x7e8de8b09e72    486bc003                imul rax, rax, 0x3                                     
 ..     a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;   .. 
0x7e8de8b09e76    490106                  add [r14], rax                                         
 ..  + 1][ 0 ] ;      a.ar [y ][y + 1][1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y .. 
0x7e8de8b09e79    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09e7c    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09e80    488908                  mov [rax], rcx                                         
0x7e8de8b09e83    4983ee10                sub r14, 0x10                                          
0x7e8de8b09e87    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09e8b    4881c000000000          add rax, 0x0                                           
0x7e8de8b09e92    4983c608                add r14, 0x8                                           
0x7e8de8b09e96    498906                  mov [r14], rax                                         
 .. 1] = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1] .. 
0x7e8de8b09e99    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1]  .. 
0x7e8de8b09e9d    b901000000              mov ecx, 0x1                                           
0x7e8de8b09ea2    4803c1                  add rax, rcx                                           
0x7e8de8b09ea5    486bc009                imul rax, rax, 0x9                                     
 ..  = a.ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1 .. 
0x7e8de8b09ea9    490106                  add [r14], rax                                         
 .. ar [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a .. 
0x7e8de8b09eac    498b47f0                mov rax, [r15-0x10]                                    
 .. y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar  .. 
0x7e8de8b09eb0    b901000000              mov ecx, 0x1                                           
0x7e8de8b09eb5    4803c1                  add rax, rcx                                           
0x7e8de8b09eb8    486bc003                imul rax, rax, 0x3                                     
 ..  [y ][y + 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.a .. 
0x7e8de8b09ebc    490106                  add [r14], rax                                         
 .. [0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y  .. 
0x7e8de8b09ebf    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09ec3    4881c000000000          add rax, 0x0                                           
0x7e8de8b09eca    4983c608                add r14, 0x8                                           
0x7e8de8b09ece    498906                  mov [r14], rax                                         
0x7e8de8b09ed1    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09ed5    486bc009                imul rax, rax, 0x9                                     
 ..      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0 .. 
0x7e8de8b09ed9    490106                  add [r14], rax                                         
 ..  a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;  .. 
0x7e8de8b09edc    498b47f0                mov rax, [r15-0x10]                                    
 .. r [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      .. 
0x7e8de8b09ee0    b901000000              mov ecx, 0x1                                           
0x7e8de8b09ee5    4803c1                  add rax, rcx                                           
0x7e8de8b09ee8    486bc003                imul rax, rax, 0x3                                     
 .. .ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;    .. 
0x7e8de8b09eec    490106                  add [r14], rax                                         
0x7e8de8b09eef    b801000000              mov eax, 0x1                                           
 .. y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a. .. 
0x7e8de8b09ef4    490106                  add [r14], rax                                         
 .. 1][0] ;      a.ar [y + 1][y + 1][ 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][ .. 
0x7e8de8b09ef7    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09efa    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09efe    488908                  mov [rax], rcx                                         
0x7e8de8b09f01    4983ee10                sub r14, 0x10                                          
 .. 0 ] = a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y +  .. 
0x7e8de8b09f05    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09f09    4881c000000000          add rax, 0x0                                           
0x7e8de8b09f10    4983c608                add r14, 0x8                                           
0x7e8de8b09f14    498906                  mov [r14], rax                                         
0x7e8de8b09f17    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b09f1b    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y  .. 
0x7e8de8b09f1f    490106                  add [r14], rax                                         
 ..  [y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] =  .. 
0x7e8de8b09f22    498b47f0                mov rax, [r15-0x10]                                    
 .. ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar .. 
0x7e8de8b09f26    b901000000              mov ecx, 0x1                                           
0x7e8de8b09f2b    4803c1                  add rax, rcx                                           
0x7e8de8b09f2e    486bc003                imul rax, rax, 0x3                                     
 .. y ][y + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a. .. 
0x7e8de8b09f32    490106                  add [r14], rax                                         
0x7e8de8b09f35    b801000000              mov eax, 0x1                                           
 ..  + 1][1] ;      hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y .. 
0x7e8de8b09f3a    490106                  add [r14], rax                                         
0x7e8de8b09f3d    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b09f47    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
0x7e8de8b09f4a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09f4e    4881c000000000          add rax, 0x0                                           
0x7e8de8b09f55    4983c608                add r14, 0x8                                           
0x7e8de8b09f59    498906                  mov [r14], rax                                         
 .. hp ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1]  .. 
0x7e8de8b09f5c    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;    .. 
0x7e8de8b09f60    b901000000              mov ecx, 0x1                                           
0x7e8de8b09f65    4803c1                  add rax, rcx                                           
0x7e8de8b09f68    486bc009                imul rax, rax, 0x9                                     
 ..  ( a.ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;  .. 
0x7e8de8b09f6c    490106                  add [r14], rax                                         
 .. ar [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;       .. 
0x7e8de8b09f6f    498b47f0                mov rax, [r15-0x10]                                    
 .. y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar .. 
0x7e8de8b09f73    b901000000              mov ecx, 0x1                                           
0x7e8de8b09f78    4803c1                  add rax, rcx                                           
0x7e8de8b09f7b    486bc003                imul rax, rax, 0x3                                     
 ..  [y ][y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a. .. 
0x7e8de8b09f7f    490106                  add [r14], rax                                         
0x7e8de8b09f82    b801000000              mov eax, 0x1                                           
 .. [y + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y .. 
0x7e8de8b09f87    490106                  add [r14], rax                                         
 .. 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1] .. 
0x7e8de8b09f8a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09f8e    4881c000000000          add rax, 0x0                                           
0x7e8de8b09f95    4983c608                add r14, 0x8                                           
0x7e8de8b09f99    498906                  mov [r14], rax                                         
 .. ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1 .. 
0x7e8de8b09f9c    498b47f0                mov rax, [r15-0x10]                                    
 ..    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y  .. 
0x7e8de8b09fa0    b901000000              mov ecx, 0x1                                           
0x7e8de8b09fa5    4803c1                  add rax, rcx                                           
0x7e8de8b09fa8    486bc009                imul rax, rax, 0x9                                     
 .. ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][ .. 
0x7e8de8b09fac    490106                  add [r14], rax                                         
 .. a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1 .. 
0x7e8de8b09faf    498b47f0                mov rax, [r15-0x10]                                    
 ..  [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] =  .. 
0x7e8de8b09fb3    b901000000              mov ecx, 0x1                                           
0x7e8de8b09fb8    4803c1                  add rax, rcx                                           
0x7e8de8b09fbb    486bc003                imul rax, rax, 0x3                                     
 .. ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1]  .. 
0x7e8de8b09fbf    490106                  add [r14], rax                                         
 .. + 1][1] ) ;    a.ar [y + 1][y + 1][1] = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y +  .. 
0x7e8de8b09fc2    498b0e                  mov rcx, [r14]                                         
0x7e8de8b09fc5    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b09fc9    488908                  mov [rax], rcx                                         
0x7e8de8b09fcc    4983ee10                sub r14, 0x10                                          
0x7e8de8b09fd0    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b09fd4    4881c000000000          add rax, 0x0                                           
0x7e8de8b09fdb    4983c608                add r14, 0x8                                           
0x7e8de8b09fdf    498906                  mov [r14], rax                                         
 .. = a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1] .. 
0x7e8de8b09fe2    498b47f0                mov rax, [r15-0x10]                                    
 .. ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y]  .. 
0x7e8de8b09fe6    b901000000              mov ecx, 0x1                                           
0x7e8de8b09feb    4803c1                  add rax, rcx                                           
0x7e8de8b09fee    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y .. 
0x7e8de8b09ff2    490106                  add [r14], rax                                         
 .. [y + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;   .. 
0x7e8de8b09ff5    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;       .. 
0x7e8de8b09ff9    b9010000004803c148      mov r9, 0x48c1034800000001                              
0x7e8de8b0a002    6bc003                  imul r8d, eax, 0x3                                     
 ..  + 1][y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;     .. 
0x7e8de8b0a005    490106                  add [r14], rax                                         
0x7e8de8b0a008    498b47f0                mov rax, [r15-0x10]                                    
 .. y + 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( .. 
0x7e8de8b0a00c    490106                  add [r14], rax                                         
 .. [0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar .. 
0x7e8de8b0a00f    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0a013    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a01a    4983c608                add r14, 0x8                                           
0x7e8de8b0a01e    498906                  mov [r14], rax                                         
 ..      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;   .. 
0x7e8de8b0a021    498b47f0                mov rax, [r15-0x10]                                    
 ..  a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     c .. 
0x7e8de8b0a025    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a02a    4803c1                  add rax, rcx                                           
0x7e8de8b0a02d    486bc009                imul rax, rax, 0x9                                     
 ..    a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     .. 
0x7e8de8b0a031    490106                  add [r14], rax                                         
 .. ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadu .. 
0x7e8de8b0a034    498b47f0                mov rax, [r15-0x10]                                    
 .. y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( .. 
0x7e8de8b0a038    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a03d    4803c1                  add rax, rcx                                           
0x7e8de8b0a040    486bc003                imul rax, rax, 0x3                                     
 ..  [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump .. 
0x7e8de8b0a044    490106                  add [r14], rax                                         
0x7e8de8b0a047    b801000000              mov eax, 0x1                                           
 ..  1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a .. 
0x7e8de8b0a04c    490106                  add [r14], rax                                         
 .. 1][0] ;      a.ar [y + 1][y + 1][ y ] = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a. .. 
0x7e8de8b0a04f    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0a052    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0a056    488908                  mov [rax], rcx                                         
0x7e8de8b0a059    4983ee10                sub r14, 0x10                                          
0x7e8de8b0a05d    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0a061    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a068    4983c608                add r14, 0x8                                           
0x7e8de8b0a06c    498906                  mov [r14], rax                                         
 .. = a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a06f    498b47f0                mov rax, [r15-0x10]                                    
 .. ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a073    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a078    4803c1                  add rax, rcx                                           
0x7e8de8b0a07b    486bc009                imul rax, rax, 0x9                                     
 .. a.ar [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a07f    490106                  add [r14], rax                                         
 .. [y + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a082    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a086    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a08b    4803c1                  add rax, rcx                                           
0x7e8de8b0a08e    486bc003                imul rax, rax, 0x3                                     
 ..  + 1][y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a092    490106                  add [r14], rax                                         
 .. [y + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a095    498b47f0                mov rax, [r15-0x10]                                    
 ..  1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a099    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a09e    4803c1                  add rax, rcx                                           
 ..  + 1][1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0a1    490106                  add [r14], rax                                         
 .. ] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0a4    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0a0a8    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a0af    4983c608                add r14, 0x8                                           
0x7e8de8b0a0b3    498906                  mov [r14], rax                                         
 ..    a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0b6    498b47f0                mov rax, [r15-0x10]                                    
 .. .ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0ba    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a0bf    4803c1                  add rax, rcx                                           
0x7e8de8b0a0c2    486bc009                imul rax, rax, 0x9                                     
 ..  a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0c6    490106                  add [r14], rax                                         
 ..  [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0c9    498b47f0                mov rax, [r15-0x10]                                    
 .. + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0cd    b901000000              mov ecx, 0x1                                           
0x7e8de8b0a0d2    4803c1                  add rax, rcx                                           
0x7e8de8b0a0d5    486bc003                imul rax, rax, 0x3                                     
 .. y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0d9    490106                  add [r14], rax                                         
0x7e8de8b0a0dc    498b47f0                mov rax, [r15-0x10]                                    
 .. ][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0e0    490106                  add [r14], rax                                         
 .. [1] ;      a.ar [y + 1][y + 1][y + 1] = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0e3    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0a0e6    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0a0ea    488908                  mov [rax], rcx                                         
0x7e8de8b0a0ed    4983ee10                sub r14, 0x10                                          
 .. = a.ar [y + 1][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a0f1    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0a0f5    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a0fc    4983c608                add r14, 0x8                                           
0x7e8de8b0a100    498906                  mov [r14], rax                                         
0x7e8de8b0a103    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b0a10d    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. ] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a110    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0a114    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a11b    4983c608                add r14, 0x8                                           
0x7e8de8b0a11f    498906                  mov [r14], rax                                         
 ..     hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a122    b81b000000              mov eax, 0x1b                                          
0x7e8de8b0a127    4983c608                add r14, 0x8                                           
0x7e8de8b0a12b    498906                  mov [r14], rax                                         
 .. ][y + 1][y] ;      hp ( &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a12e    49bb129db0e88d7e0000    mov r11, 0x7e8de8b09d12                                
0x7e8de8b0a138    49ffd3                  call r11                      < cta.cadump : 0x00007e8de8b09d12 >
0x7e8de8b0a13b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0a13f    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0a143    4983ee10                sub r14, 0x10                                          
 ..  &a.ar ) ;     cadump ( &a.ar 27 ) ;  }  .. 
0x7e8de8b0a147    c3                      ret                                                    
Word_Disassemble : word - 'ctcta' :: codeSize = 1000
Word : 0x00007e8de8eb5e93 :: Compiled at : 0x00007e8de8b09d60
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 421.10 <::
 0x00007e8de88feaa8 0x00007e8de88fea98
Dump at : namespaces/test/arrayTest.csl : 422.16 :
Dump : Address = 0x00007e8de88fea98 : Number = 27 :: (little endian dump)
0x00007e8de88fea98 :  4d 00 00 00 00 00 4d 00  00 00 00 00 00 00 00 9e  M.....M. ........ 
0x00007e8de88feaa8 :  a7 ea 8f e8 8d 7e 00 00  a8 b1 b1 ea 8f e8 8d 7e  .....~.. .......~ 

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/arrayTest.csl : 431.16 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

arr10 = 7e8de50001a8 : arr10->dimSize = 256
Dump at : namespaces/test/arrayTest.csl : 434.17 :
Dump : Address = 0x00007e8de50001a8 : Number = 16 :: (little endian dump)
0x00007e8de50001a8 :  00 01 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
 0x00007e8de50001a8
 =============================
C_Syntax.CSL_a10 <:> csl compiled word
SourceCode for C_Syntax.CSL_a10 :> 
void CSL_a10 ( ) { Ar10 * a = arr10 ; int64 x, y, z, dSize = a->dimSize ; x = 0, y = 0, z = 0 ; while ( z < dSize ) { while ( y < dSize ) { while ( x < dSize ) { a->ar [z][y][x] = x ; x ++ ; } x = 0, y ++ ; } x = 0, y = 0, z ++ ; } oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ; a10dump ( 0 0 0 a ) ; a10dump ( 1 4 0 a ) ; oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; a10dump ( 67 246 0 a ) ; a10dump ( 1 34 0 a ) ; } 
Source code file location of CSL_a10 : "namespaces/test/arrayTest.csl" : 448.8 :: we are now at : namespaces/test/arrayTest.csl : 488.12
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0a1e0 -- code size = 655 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CSL_a10 : definition = 0x00007e8de8b0a1e0 : disassembly at namespaces/test/arrayTest.csl : 488.12 :
0x7e8de8b0a1e0    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0a1e4    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0a1e8    4981c630000000          add r14, 0x30                                          
 ..  void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize   .. 
0x7e8de8b0a1ef    48b8a80100e58d7e0000    mov rax, 0x7e8de50001a8                                
0x7e8de8b0a1f9    4881c000000000          add rax, 0x0                                           
 ..      void  CSL_a10 (  )  {     Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSi .. 
0x7e8de8b0a200    49894708                mov [r15+0x8], rax                                     
 ..  = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize ) .. 
0x7e8de8b0a204    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0a208    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a20f    488b00                  mov rax, [rax]                                         
 .. Ar10 * a = arr10 ;     int64 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < .. 
0x7e8de8b0a212    49894728                mov [r15+0x28], rax                                    
 .. 4 x, y, z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {          .. 
0x7e8de8b0a216    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..  z, dSize = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             whi .. 
0x7e8de8b0a21e    49c7471800000000        mov qword [r15+0x18], 0x0                              
 .. ze = a->dimSize ;     x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x  .. 
0x7e8de8b0a226    49c7472000000000        mov qword [r15+0x20], 0x0                              
 ..   x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )            .. 
0x7e8de8b0a22e    498b4720                mov rax, [r15+0x20]                                    
 .. = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {  .. 
0x7e8de8b0a232    498b4f28                mov rcx, [r15+0x28]                                    
 .. x = 0, y = 0, z = 0  ;     while  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )              .. 
0x7e8de8b0a236    483bc1                  cmp rax, rcx                                           
0x7e8de8b0a239    0f8dab000000            jge 0x7e8de8b0a2ea            < C_Syntax.CSL_a10+266 >
 ..  ( z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] .. 
0x7e8de8b0a23f    498b4718                mov rax, [r15+0x18]                                    
 ..  < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x .. 
0x7e8de8b0a243    498b4f28                mov rcx, [r15+0x28]                                    
 ..  z < dSize  )     {         while ( y < dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = .. 
0x7e8de8b0a247    483bc1                  cmp rax, rcx                                           
0x7e8de8b0a24a    0f8d81000000            jge 0x7e8de8b0a2d1            < C_Syntax.CSL_a10+241 >
 .. dSize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             .. 
0x7e8de8b0a250    498b4710                mov rax, [r15+0x10]                                    
 .. e )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }   .. 
0x7e8de8b0a254    498b4f28                mov rcx, [r15+0x28]                                    
 .. ize )         {             while ( x < dSize )             {                 a->ar [z][y][x] = x ;                 x ++  ;             } .. 
0x7e8de8b0a258    483bc1                  cmp rax, rcx                                           
0x7e8de8b0a25b    7d63                    jge 0xe8b0a2c0                < C_Syntax.CSL_a10+224 >
0x7e8de8b0a25d    0f1f4000                nop [rax]                                              
0x7e8de8b0a261    498b4708                mov rax, [r15+0x8]                                     
 .. ze )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }       .. 
0x7e8de8b0a265    4881c008000000          add rax, 0x8                                           
0x7e8de8b0a26c    4983c608                add r14, 0x8                                           
0x7e8de8b0a270    498906                  mov [r14], rax                                         
 .. )             {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }          .. 
0x7e8de8b0a273    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0a277    4869c000000100          imul rax, rax, 0x10000                                 
 ..              {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x .. 
0x7e8de8b0a27e    490106                  add [r14], rax                                         
0x7e8de8b0a281    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b0a285    4869c000010000          imul rax, rax, 0x100                                   
 ..           {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x =  .. 
0x7e8de8b0a28c    490106                  add [r14], rax                                         
0x7e8de8b0a28f    498b4710                mov rax, [r15+0x10]                                    
 ..        {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0,  .. 
0x7e8de8b0a293    490106                  add [r14], rax                                         
 ..   {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0 .. 
0x7e8de8b0a296    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0a29a    4983c608                add r14, 0x8                                           
0x7e8de8b0a29e    498906                  mov [r14], rax                                         
 ..     {                 a->ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = .. 
0x7e8de8b0a2a1    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0a2a4    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0a2a8    488908                  mov [rax], rcx                                         
0x7e8de8b0a2ab    4983ee10                sub r14, 0x10                                          
 .. >ar [z][y][x] = x ;                 x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        .. 
0x7e8de8b0a2af    49ff4710                inc qword [r15+0x10]                                   
0x7e8de8b0a2b3    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0a2b7    498b4f28                mov rcx, [r15+0x28]                                    
0x7e8de8b0a2bb    483bc1                  cmp rax, rcx                                           
0x7e8de8b0a2be    7ca1                    jl 0xe8b0a261                 < C_Syntax.CSL_a10+129 >
 ..   x ++  ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx .. 
0x7e8de8b0a2c0    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. ;             }             x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar .. 
0x7e8de8b0a2c8    49ff4718                inc qword [r15+0x18]                                   
0x7e8de8b0a2cc    e96effffff              jmp 0x7e8de8b0a23f            < C_Syntax.CSL_a10+95 >
 ..    x = 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump  .. 
0x7e8de8b0a2d1    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. 0,  y ++ ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 .. 
0x7e8de8b0a2d9    49c7471800000000        mov qword [r15+0x18], 0x0                              
 ..  ;         }         x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;   .. 
0x7e8de8b0a2e1    49ff4720                inc qword [r15+0x20]                                   
0x7e8de8b0a2e5    e944ffffff              jmp 0x7e8de8b0a22e            < C_Syntax.CSL_a10+78 >
 .. y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;    .. 
0x7e8de8b0a2ea    48b8826342e88d7e0000    mov rax, 0x7e8de8426382                                
0x7e8de8b0a2f4    488bf8                  mov rdi, rax                                           
 ..   oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][2 .. 
0x7e8de8b0a2f7    498b4708                mov rax, [r15+0x8]                                     
 .. Printf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246] .. 
0x7e8de8b0a2fb    4881c008000d00          add rax, 0xd0008                                       
0x7e8de8b0a302    488bc8                  mov rcx, rax                                           
 ..    x = 0, y = 0,  z ++ ;     }        oPrintf ( "\na->ar[0][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4  .. 
0x7e8de8b0a305    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b0a30f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0a319    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67 .. 
0x7e8de8b0a31c    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0a323    4983c608                add r14, 0x8                                           
0x7e8de8b0a327    498906                  mov [r14], rax                                         
 .. x", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) .. 
0x7e8de8b0a32a    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0a331    4983c608                add r14, 0x8                                           
0x7e8de8b0a335    498906                  mov [r14], rax                                         
 .. , a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ; .. 
0x7e8de8b0a338    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0a33f    4983c608                add r14, 0x8                                           
0x7e8de8b0a343    498906                  mov [r14], rax                                         
 .. a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;   .. 
0x7e8de8b0a346    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0a34a    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a351    4983c608                add r14, 0x8                                           
0x7e8de8b0a355    498906                  mov [r14], rax                                         
 .. ][6][7] = %lx", a->ar[0][6][7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[ .. 
0x7e8de8b0a358    49bb2f95b0e88d7e0000    mov r11, 0x7e8de8b0952f                                
0x7e8de8b0a362    49ffd3                  call r11                      < Ar10.a10dump : 0x00007e8de8b0952f >
 ..  a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 .. 
0x7e8de8b0a365    b801000000              mov eax, 0x1                                           
0x7e8de8b0a36a    4983c608                add r14, 0x8                                           
0x7e8de8b0a36e    498906                  mov [r14], rax                                         
 .. 10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a .. 
0x7e8de8b0a371    b804000000              mov eax, 0x4                                           
0x7e8de8b0a376    4983c608                add r14, 0x8                                           
0x7e8de8b0a37a    498906                  mov [r14], rax                                         
 .. dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) .. 
0x7e8de8b0a37d    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0a384    4983c608                add r14, 0x8                                           
0x7e8de8b0a388    498906                  mov [r14], rax                                         
 .. mp ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ; .. 
0x7e8de8b0a38b    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0a38f    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a396    4983c608                add r14, 0x8                                           
0x7e8de8b0a39a    498906                  mov [r14], rax                                         
 .. [7]) ;     a10dump ( 0 0 0 a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump  .. 
0x7e8de8b0a39d    49bb2f95b0e88d7e0000    mov r11, 0x7e8de8b0952f                                
0x7e8de8b0a3a7    49ffd3                  call r11                      < Ar10.a10dump : 0x00007e8de8b0952f >
 ..  a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34  .. 
0x7e8de8b0a3aa    48b8686542e88d7e0000    mov rax, 0x7e8de8426568                                
0x7e8de8b0a3b4    488bf8                  mov rdi, rax                                           
 .. Printf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a3b7    498b4708                mov rax, [r15+0x8]                                     
 .. ntf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a3bb    4881c008003901          add rax, 0x1390008                                     
0x7e8de8b0a3c2    488bc8                  mov rcx, rax                                           
 .. a ) ;      a10dump ( 1 4 0 a ) ;      oPrintf ( "\na->ar[0][246][67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10du .. 
0x7e8de8b0a3c5    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b0a3cf    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0a3d9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a3dc    b843000000              mov eax, 0x43                                          
0x7e8de8b0a3e1    4983c608                add r14, 0x8                                           
0x7e8de8b0a3e5    498906                  mov [r14], rax                                         
 .. a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a3e8    b8f6000000              mov eax, 0xf6                                          
0x7e8de8b0a3ed    4983c608                add r14, 0x8                                           
0x7e8de8b0a3f1    498906                  mov [r14], rax                                         
 .. r[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a3f4    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0a3fb    4983c608                add r14, 0x8                                           
0x7e8de8b0a3ff    498906                  mov [r14], rax                                         
 .. 0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a402    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0a406    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a40d    4983c608                add r14, 0x8                                           
0x7e8de8b0a411    498906                  mov [r14], rax                                         
 .. [67] = %lx", a->ar[0][246][67]) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a414    49bb2f95b0e88d7e0000    mov r11, 0x7e8de8b0952f                                
0x7e8de8b0a41e    49ffd3                  call r11                      < Ar10.a10dump : 0x00007e8de8b0952f >
 .. 0dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a421    b8010000004983c608      mov rax, 0x8c6834900000001                              
0x7e8de8b0a42a    498906                  mov [r14], rax                                         
 .. ump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a42d    b822000000              mov eax, 0x22                                          
0x7e8de8b0a432    4983c608                add r14, 0x8                                           
0x7e8de8b0a436    498906                  mov [r14], rax                                         
 ..  ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a439    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0a440    4983c608                add r14, 0x8                                           
0x7e8de8b0a444    498906                  mov [r14], rax                                         
 ..  67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a447    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0a44b    4881c000000000          add rax, 0x0                                           
0x7e8de8b0a452    4983c608                add r14, 0x8                                           
0x7e8de8b0a456    498906                  mov [r14], rax                                         
 .. ) ;     a10dump ( 67 246 0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a459    49bb2f95b0e88d7e0000    mov r11, 0x7e8de8b0952f                                
0x7e8de8b0a463    49ffd3                  call r11                      < Ar10.a10dump : 0x00007e8de8b0952f >
0x7e8de8b0a466    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0a46a    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  0 a ) ;      a10dump ( 1 34 0 a ) ;  }  .. 
0x7e8de8b0a46e    c3                      ret                                                    
Word_Disassemble : word - 'CSL_a10' :: codeSize = 655
Word : 0x00007e8de8ec6b8b :: Compiled at : 0x00007e8de8b0a1e0
 =============================
::> 'wdiss' was called at namespaces/test/arrayTest.csl 488.12 <::
 0x00007e8de50001a8
arr10->dimSize = 256
a->ar[0][6][7] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 0 y = 0 z = 0
 dimSize = 256
 a = 0x00007e8de50001a8 a.ar = 0x00007e8de50001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007e8de50001b0 : Number = 256 :: (little endian dump)
0x00007e8de50001b0 :  00 01 02 03 04 05 06 07  08 09 0a 0b 0c 0d 0e 0f  ........ ........ 
0x00007e8de50001c0 :  10 11 12 13 14 15 16 17  18 19 1a 1b 1c 1d 1e 1f  ........ ........ 
0x00007e8de50001d0 :  20 21 22 23 24 25 26 27  28 29 2a 2b 2c 2d 2e 2f   !"#$%&' ()*+,-./ 
0x00007e8de50001e0 :  30 31 32 33 34 35 36 37  38 39 3a 3b 3c 3d 3e 3f  01234567 89:;<=>? 
0x00007e8de50001f0 :  40 41 42 43 44 45 46 47  48 49 4a 4b 4c 4d 4e 4f  @ABCDEFG HIJKLMNO 
0x00007e8de5000200 :  50 51 52 53 54 55 56 57  58 59 5a 5b 5c 5d 5e 5f  PQRSTUVW XYZ[\]^_ 
0x00007e8de5000210 :  60 61 62 63 64 65 66 67  68 69 6a 6b 6c 6d 6e 6f  `abcdefg hijklmno 
0x00007e8de5000220 :  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  pqrstuvw xyz{|}~. 
0x00007e8de5000230 :  80 81 82 83 84 85 86 87  88 89 8a 8b 8c 8d 8e 8f  ........ ........ 
0x00007e8de5000240 :  90 91 92 93 94 95 96 97  98 99 9a 9b 9c 9d 9e 9f  ........ ........ 
0x00007e8de5000250 :  a0 a1 a2 a3 a4 a5 a6 a7  a8 a9 aa ab ac ad ae af  ........ ........ 
0x00007e8de5000260 :  b0 b1 b2 b3 b4 b5 b6 b7  b8 b9 ba bb bc bd be bf  ........ ........ 
0x00007e8de5000270 :  c0 c1 c2 c3 c4 c5 c6 c7  c8 c9 ca cb cc cd ce cf  ........ ........ 
0x00007e8de5000280 :  d0 d1 d2 d3 d4 d5 d6 d7  d8 d9 da db dc dd de df  ........ ........ 
0x00007e8de5000290 :  e0 e1 e2 e3 e4 e5 e6 e7  e8 e9 ea eb ec ed ee ef  ........ ........ 
0x00007e8de50002a0 :  f0 f1 f2 f3 f4 f5 f6 f7  f8 f9 fa fb fc fd fe ff  ........ ........ 

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 4 z = 0
 dimSize = 256
 a = 0x00007e8de50001a8 a.ar = 0x00007e8de50001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007e8de50005b1 : Number = 256 :: (little endian dump)
0x00007e8de50005b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........ 
0x00007e8de50005c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......  
0x00007e8de50005d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0 
0x00007e8de50005e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@ 
0x00007e8de50005f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 
0x00007e8de5000601 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_` 
0x00007e8de5000611 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop 
0x00007e8de5000621 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~.. 
0x00007e8de5000631 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........ 
0x00007e8de5000641 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........ 
0x00007e8de5000651 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........ 
0x00007e8de5000661 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........ 
0x00007e8de5000671 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........ 
0x00007e8de5000681 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........ 
0x00007e8de5000691 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........ 
0x00007e8de50006a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........ 

a->ar[0][246][67] = 0
 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 67 y = 246 z = 0
 dimSize = 256
 a = 0x00007e8de50001a8 a.ar = 0x00007e8de50001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007e8de500f7f3 : Number = 256 :: (little endian dump)
0x00007e8de500f7f3 :  43 44 45 46 47 48 49 4a  4b 4c 4d 4e 4f 50 51 52  CDEFGHIJ KLMNOPQR 
0x00007e8de500f803 :  53 54 55 56 57 58 59 5a  5b 5c 5d 5e 5f 60 61 62  STUVWXYZ [\]^_`ab 
0x00007e8de500f813 :  63 64 65 66 67 68 69 6a  6b 6c 6d 6e 6f 70 71 72  cdefghij klmnopqr 
0x00007e8de500f823 :  73 74 75 76 77 78 79 7a  7b 7c 7d 7e 7f 80 81 82  stuvwxyz {|}~.... 
0x00007e8de500f833 :  83 84 85 86 87 88 89 8a  8b 8c 8d 8e 8f 90 91 92  ........ ........ 
0x00007e8de500f843 :  93 94 95 96 97 98 99 9a  9b 9c 9d 9e 9f a0 a1 a2  ........ ........ 
0x00007e8de500f853 :  a3 a4 a5 a6 a7 a8 a9 aa  ab ac ad ae af b0 b1 b2  ........ ........ 
0x00007e8de500f863 :  b3 b4 b5 b6 b7 b8 b9 ba  bb bc bd be bf c0 c1 c2  ........ ........ 
0x00007e8de500f873 :  c3 c4 c5 c6 c7 c8 c9 ca  cb cc cd ce cf d0 d1 d2  ........ ........ 
0x00007e8de500f883 :  d3 d4 d5 d6 d7 d8 d9 da  db dc dd de df e0 e1 e2  ........ ........ 
0x00007e8de500f893 :  e3 e4 e5 e6 e7 e8 e9 ea  eb ec ed ee ef f0 f1 f2  ........ ........ 
0x00007e8de500f8a3 :  f3 f4 f5 f6 f7 f8 f9 fa  fb fc fd fe ff 00 01 02  ........ ........ 
0x00007e8de500f8b3 :  03 04 05 06 07 08 09 0a  0b 0c 0d 0e 0f 10 11 12  ........ ........ 
0x00007e8de500f8c3 :  13 14 15 16 17 18 19 1a  1b 1c 1d 1e 1f 20 21 22  ........ ..... !" 
0x00007e8de500f8d3 :  23 24 25 26 27 28 29 2a  2b 2c 2d 2e 2f 30 31 32  #$%&'()* +,-./012 
0x00007e8de500f8e3 :  33 34 35 36 37 38 39 3a  3b 3c 3d 3e 3f 40 41 42  3456789: ;<=>?@AB 

 Ar10 :  namespaces/test/arrayTest.csl 491.11 : x = 1 y = 34 z = 0
 dimSize = 256
 a = 0x00007e8de50001a8 a.ar = 0x00007e8de50001b0

Dump at : namespaces/test/arrayTest.csl : 491.11 :
Dump : Address = 0x00007e8de50023b1 : Number = 256 :: (little endian dump)
0x00007e8de50023b1 :  01 02 03 04 05 06 07 08  09 0a 0b 0c 0d 0e 0f 10  ........ ........ 
0x00007e8de50023c1 :  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  ........ .......  
0x00007e8de50023d1 :  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  !"#$%&'( )*+,-./0 
0x00007e8de50023e1 :  31 32 33 34 35 36 37 38  39 3a 3b 3c 3d 3e 3f 40  12345678 9:;<=>?@ 
0x00007e8de50023f1 :  41 42 43 44 45 46 47 48  49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 
0x00007e8de5002401 :  51 52 53 54 55 56 57 58  59 5a 5b 5c 5d 5e 5f 60  QRSTUVWX YZ[\]^_` 
0x00007e8de5002411 :  61 62 63 64 65 66 67 68  69 6a 6b 6c 6d 6e 6f 70  abcdefgh ijklmnop 
0x00007e8de5002421 :  71 72 73 74 75 76 77 78  79 7a 7b 7c 7d 7e 7f 80  qrstuvwx yz{|}~.. 
0x00007e8de5002431 :  81 82 83 84 85 86 87 88  89 8a 8b 8c 8d 8e 8f 90  ........ ........ 
0x00007e8de5002441 :  91 92 93 94 95 96 97 98  99 9a 9b 9c 9d 9e 9f a0  ........ ........ 
0x00007e8de5002451 :  a1 a2 a3 a4 a5 a6 a7 a8  a9 aa ab ac ad ae af b0  ........ ........ 
0x00007e8de5002461 :  b1 b2 b3 b4 b5 b6 b7 b8  b9 ba bb bc bd be bf c0  ........ ........ 
0x00007e8de5002471 :  c1 c2 c3 c4 c5 c6 c7 c8  c9 ca cb cc cd ce cf d0  ........ ........ 
0x00007e8de5002481 :  d1 d2 d3 d4 d5 d6 d7 d8  d9 da db dc dd de df e0  ........ ........ 
0x00007e8de5002491 :  e1 e2 e3 e4 e5 e6 e7 e8  e9 ea eb ec ed ee ef f0  ........ ........ 
0x00007e8de50024a1 :  f1 f2 f3 f4 f5 f6 f7 f8  f9 fa fb fc fd fe ff 00  ........ ........ 

including namespaces/test/localsTest.csl at namespaces/test/initTest.csl : 86.41 ...
 1 2 3 12

 =============================
C_Syntax.taa <:> csl compiled word
SourceCode for C_Syntax.taa :> 
int64 taa ( one two three ) { int64 four, five ; four = one + two + three ; five = one + two + three + four ; p ( one ) ; p ( two ) ; p ( three ) ; p ( five ) ; nl () ; } 
Source code file location of taa : "namespaces/test/localsTest.csl" : 10.4 :: we are now at : namespaces/test/localsTest.csl : 22.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0a543 -- code size = 198 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.taa : definition = 0x00007e8de8b0a543 : disassembly at namespaces/test/localsTest.csl : 22.16 :
0x7e8de8b0a543    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0a547    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0a54b    4981c618000000          add r14, 0x18                                          
 .. ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( t .. 
0x7e8de8b0a552    498b47e8                mov rax, [r15-0x18]                                    
 ..   int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) .. 
0x7e8de8b0a556    498b4ff0                mov rcx, [r15-0x10]                                    
 ..     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three .. 
0x7e8de8b0a55a    4803c1                  add rax, rcx                                           
 .. 4 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     .. 
0x7e8de8b0a55d    498b4ff8                mov rcx, [r15-0x8]                                     
 .. t64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;   .. 
0x7e8de8b0a561    4803c1                  add rax, rcx                                           
 ..  three ) {     int64 four, five ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;    .. 
0x7e8de8b0a564    49894708                mov [r15+0x8], rax                                     
 .. four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     n .. 
0x7e8de8b0a568    498b47e8                mov rax, [r15-0x18]                                    
 ..  one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; .. 
0x7e8de8b0a56c    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () .. 
0x7e8de8b0a570    4803c1                  add rax, rcx                                           
 ..  two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a573    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a577    4803c1                  add rax, rcx                                           
 .. hree ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a57a    498b4f08                mov rcx, [r15+0x8]                                     
 ..  three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a57e    4803c1                  add rax, rcx                                           
 ..  ;     four = one + two + three ;     five = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five )  .. 
0x7e8de8b0a581    49894710                mov [r15+0x10], rax                                    
 ..  = one + two + three + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a585    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b0a589    4983c608                add r14, 0x8                                           
0x7e8de8b0a58d    498906                  mov [r14], rax                                         
0x7e8de8b0a590    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0a59a    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. hree + four ;     p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a59d    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0a5a1    4983c608                add r14, 0x8                                           
0x7e8de8b0a5a5    498906                  mov [r14], rax                                         
0x7e8de8b0a5a8    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0a5b2    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..   p ( one ) ;     p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a5b5    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0a5b9    4983c608                add r14, 0x8                                           
0x7e8de8b0a5bd    498906                  mov [r14], rax                                         
0x7e8de8b0a5c0    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0a5ca    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. p ( two ) ;     p ( three ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a5cd    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0a5d1    4983c608                add r14, 0x8                                           
0x7e8de8b0a5d5    498906                  mov [r14], rax                                         
0x7e8de8b0a5d8    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0a5e2    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b0a5e5    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0a5ef    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0a5f9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0a5fc    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0a600    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0a604    4983ee18                sub r14, 0x18                                          
 .. hree ) ;     p ( five ) ;     nl () ; }  .. 
0x7e8de8b0a608    c3                      ret                                                    
Word_Disassemble : word - 'taa' :: codeSize = 198
Word : 0x00007e8de8ed223b :: Compiled at : 0x00007e8de8b0a543
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 22.16 <::
 1 2 3 12
 3 3 3
 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 1 2 3
 1 2 3 4 3 3 3 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 1 2 3
 1 2 3 4
 =============================
C.hey <:> csl compiled word
SourceCode for C.hey :> 
: hey ( n m | o q ) o m @ = m @ o @ "hey_1_assert" assert q n @ = n @ q @ "hey_2_assert" assert n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert ; 
Source code file location of hey : "namespaces/test/localsTest.csl" : 90.2 :: we are now at : namespaces/test/localsTest.csl : 98.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0ae41 -- code size = 386 bytes
TypeSignature : 
 -----------------------------
Word :: C.hey : definition = 0x00007e8de8b0ae41 : disassembly at namespaces/test/localsTest.csl : 98.17 :
0x7e8de8b0ae41    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0ae45    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0ae49    4981c618000000          add r14, 0x18                                          
 ..                  : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ +  .. 
0x7e8de8b0ae50    498d4708                lea rax, [r15+0x8]                                     
 ..                : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + +  .. 
0x7e8de8b0ae54    498b4ff8                mov rcx, [r15-0x8]                                     
 ..            : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1  .. 
0x7e8de8b0ae58    488908                  mov [rax], rcx                                         
 ..         : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + d .. 
0x7e8de8b0ae5b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0ae5f    4983c608                add r14, 0x8                                           
0x7e8de8b0ae63    498906                  mov [r14], rax                                         
 ..     : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p .. 
0x7e8de8b0ae66    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0ae6a    4983c608                add r14, 0x8                                           
0x7e8de8b0ae6e    498906                  mov [r14], rax                                         
 .. : hey ( n m | o q )  o m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 " .. 
0x7e8de8b0ae71    48b8cbf380e88d7e0000    mov rax, 0x7e8de880f3cb       < string : 'hey_1_assert' >
0x7e8de8b0ae7b    4983c608                add r14, 0x8                                           
0x7e8de8b0ae7f    498906                  mov [r14], rax                                         
0x7e8de8b0ae82    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0ae8c    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. m @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n .. 
0x7e8de8b0ae8f    498d4710                lea rax, [r15+0x10]                                    
 .. @ =  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ .. 
0x7e8de8b0ae93    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  m @ o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ .. 
0x7e8de8b0ae97    488908                  mov [rax], rcx                                         
 ..  o @ "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o .. 
0x7e8de8b0ae9a    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0ae9e    4983c608                add r14, 0x8                                           
0x7e8de8b0aea2    498906                  mov [r14], rax                                         
 ..  "hey_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + .. 
0x7e8de8b0aea5    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0aea9    4983c608                add r14, 0x8                                           
0x7e8de8b0aead    498906                  mov [r14], rax                                         
 .. y_1_assert" assert  q n @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ .. 
0x7e8de8b0aeb0    48b8f6f380e88d7e0000    mov rax, 0x7e8de880f3f6       < string : 'hey_2_assert' >
0x7e8de8b0aeba    4983c608                add r14, 0x8                                           
0x7e8de8b0aebe    498906                  mov [r14], rax                                         
0x7e8de8b0aec1    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0aecb    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..  @ =   n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_a .. 
0x7e8de8b0aece    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b0aed2    4983c608                add r14, 0x8                                           
0x7e8de8b0aed6    498906                  mov [r14], rax                                         
 ..    n @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_asser .. 
0x7e8de8b0aed9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0aedd    4983c608                add r14, 0x8                                           
0x7e8de8b0aee1    498906                  mov [r14], rax                                         
 ..  @ q @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" a .. 
0x7e8de8b0aee4    498b4708                mov rax, [r15+0x8]                                     
 ..  @ "hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" asser .. 
0x7e8de8b0aee8    498b4f10                mov rcx, [r15+0x10]                                    
0x7e8de8b0aeec    4803c1                  add rax, rcx                                           
 .. hey_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert    .. 
0x7e8de8b0aeef    488bc8                  mov rcx, rax                                           
0x7e8de8b0aef2    498b06                  mov rax, [r14]                                         
0x7e8de8b0aef5    4983ee08                sub r14, 0x8                                           
0x7e8de8b0aef9    4803c1                  add rax, rcx                                           
 .. y_2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert      .. 
0x7e8de8b0aefc    488bc8                  mov rcx, rax                                           
0x7e8de8b0aeff    498b06                  mov rax, [r14]                                         
0x7e8de8b0af02    4983ee08                sub r14, 0x8                                           
 .. 2_assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        .. 
0x7e8de8b0af06    4803c1                  add rax, rcx                                           
 .. assert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ; .. 
0x7e8de8b0af09    b901000000              mov ecx, 0x1                                           
 .. sert" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af0e    4803c1                  add rax, rcx                                           
0x7e8de8b0af11    4983c610                add r14, 0x10                                          
0x7e8de8b0af15    498906                  mov [r14], rax                                         
 .. rt" assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af18    498946f8                mov [r14-0x8], rax                                     
 .. assert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af1c    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0af26    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. sert  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af29    b807000000              mov eax, 0x7                                           
0x7e8de8b0af2e    4983c608                add r14, 0x8                                           
0x7e8de8b0af32    498906                  mov [r14], rax                                         
 .. rt  n @ m @ o @ q @ + + + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af35    48b825f480e88d7e0000    mov rax, 0x7e8de880f425       < string : 'hey_3_assert' >
0x7e8de8b0af3f    4983c608                add r14, 0x8                                           
0x7e8de8b0af43    498906                  mov [r14], rax                                         
0x7e8de8b0af46    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0af50    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..  + 1 + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af53    498b47f0                mov rax, [r15-0x10]                                    
 ..  + dup p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af57    498b4ff8                mov rcx, [r15-0x8]                                     
 .. up p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af5b    4803c1                  add rax, rcx                                           
 ..  p 7 "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af5e    498b4f08                mov rcx, [r15+0x8]                                     
 ..  "hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af62    4803c1                  add rax, rcx                                           
 .. hey_3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af65    498b4f10                mov rcx, [r15+0x10]                                    
 .. 3_assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af69    4803c1                  add rax, rcx                                           
 .. assert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af6c    b901000000              mov ecx, 0x1                                           
 .. sert" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af71    4803c1                  add rax, rcx                                           
0x7e8de8b0af74    4983c610                add r14, 0x10                                          
0x7e8de8b0af78    498906                  mov [r14], rax                                         
 .. rt" assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af7b    498946f8                mov [r14-0x8], rax                                     
 .. assert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af7f    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0af89    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. sert  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af8c    b807000000              mov eax, 0x7                                           
0x7e8de8b0af91    4983c608                add r14, 0x8                                           
0x7e8de8b0af95    498906                  mov [r14], rax                                         
 .. rt  n @ m @ + o @ + q @ + 1 + dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0af98    48b854f480e88d7e0000    mov rax, 0x7e8de880f454       < string : 'hey_4_assert' >
0x7e8de8b0afa2    4983c608                add r14, 0x8                                           
0x7e8de8b0afa6    498906                  mov [r14], rax                                         
0x7e8de8b0afa9    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0afb3    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0afb6    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0afba    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0afbe    4983ee10                sub r14, 0x10                                          
 ..  dup p 7 "hey_4_assert" assert        ;  .. 
0x7e8de8b0afc2    c3                      ret                                                    
Word_Disassemble : word - 'hey' :: codeSize = 386
Word : 0x00007e8de8eed42b :: Compiled at : 0x00007e8de8b0ae41
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 98.17 <::
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
beforeHeey
 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7 hey_1_assert  : ok

 hey_2_assert  : ok

 7 hey_3_assert  : ok

 7 hey_4_assert  : ok

 7
afterHeey
DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 142.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 143.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

testA1 =  0x00007e8de88feab3
 0x00007e8de88feab3 0x00007e8de7910ae8 0x00007e8de88feab3
 this =  0x00007e8de88feab3

 t1 @ =  0x00007e8de88feab3
 t1 =  0x00007e8de7910ae8
 done showing variables

Dump at : namespaces/test/localsTest.csl : 144.48 :
Dump : Address = 0x00007e8de88feab3 : Number = 128 :: (little endian dump)
0x00007e8de88feab3 :  ea 8f e8 8d 7e 00 00 00  00 00 00 00 00 00 00 00  ....~... ........ 
0x00007e8de88feac3 :  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88fead3 :  02 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feae3 :  00 00 00 00 00 00 00 00  03 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feaf3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feb03 :  00 00 00 00 00 00 00 00  05 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feb13 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feb23 :  00 00 00 00 00 00 00 00  07 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 149.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 150.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

Dump at : namespaces/test/localsTest.csl : 153.15 :
Dump : Address = 0x00007e8de88feeb3 : Number = 50 :: (little endian dump)
0x00007e8de88feeb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feec3 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feed3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feee3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 
 0x0000000000000003 0x0000000000000004
 before test

Using Namespaces :> DLLNodeAlloc DLLNode Buffer Class Root C User int64 arr10 Ar10 Ar9 Ar3 Ar2 Ar1 void Defines cta ct0 ar9 DLLNodeAlloc4 Int DLListClone DLList Integer Pointer Compiler Logic Shell int List Combinators Bits System libc OpenVmTil Lexer Interpreter Debug byte Dlsym Io Word Macro Namespace String StartupMacros Compiling Reserved DObject PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

 array test ok
 0x0000000000000001
Dump at : namespaces/test/localsTest.csl : 162.15 :
Dump : Address = 0x00007e8de88feeb3 : Number = 50 :: (little endian dump)
0x00007e8de88feeb3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feec3 :  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feed3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88feee3 :  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/test/localsTest.csl : 165.15 :
Dump : Address = 0x00007e8de88ff0b3 : Number = 50 :: (little endian dump)
0x00007e8de88ff0b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff0c3 :  05 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff0d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff0e3 :  00 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00  ........ ........ 

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/localsTest.csl : 166.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 0x0000000000000077 0x00007e8de7910ad8 0x0000000000000001 0x00007e8de7910ae8 0x00005b343f36fc20 0x0000000000000001 0x00007e8de7910af0 0x0000000000000001 0x00007e8de7910b00 0x00007e8de7910ae8 0x0000000000000001 0x00007e8de7910af0 0x0000000000000001 0x00007e8de7910b00 0x0000000000000001 0x0000000000000001 

testing nested locals

 =============================
User.goedel <:> csl compiled word
SourceCode for User.goedel :> 
: goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
Source code file location of goedel : "namespaces/test/localsTest.csl" : 201.2 :: we are now at : namespaces/test/localsTest.csl : 203.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0b745 -- code size = 162 bytes
TypeSignature : 
 -----------------------------
Word :: User.goedel : definition = 0x00007e8de8b0b745 : disassembly at namespaces/test/localsTest.csl : 203.19 :
0x7e8de8b0b745    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0b749    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0b74d    4981c618000000          add r14, 0x18                                          
 ..                 : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x7e8de8b0b754    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..               : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x7e8de8b0b75c    498b4708                mov rax, [r15+0x8]                                     
 ..           : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x7e8de8b0b760    b906000000              mov ecx, 0x6                                           
 ..         : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x7e8de8b0b765    4803c1                  add rax, rcx                                           
0x7e8de8b0b768    4983c610                add r14, 0x10                                          
0x7e8de8b0b76c    498906                  mov [r14], rax                                         
 ..       : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x7e8de8b0b76f    498946f8                mov [r14-0x8], rax                                     
 ..   : goedel { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ;  .. 
0x7e8de8b0b773    b807000000              mov eax, 0x7                                           
0x7e8de8b0b778    4983c608                add r14, 0x8                                           
0x7e8de8b0b77c    498906                  mov [r14], rax                                         
0x7e8de8b0b77f    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b0b789    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 ..  { (| n ) n 1 = n @ 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b78c    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b796    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 6 + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b799    49c7471003000000        mov qword [r15+0x10], 0x3                              
 .. + dup 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7a1    498b4710                mov rax, [r15+0x10]                                    
 .. p 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7a5    b904000000              mov ecx, 0x4                                           
 .. 7 _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7aa    4803c1                  add rax, rcx                                           
0x7e8de8b0b7ad    4983c610                add r14, 0x10                                          
0x7e8de8b0b7b1    498906                  mov [r14], rax                                         
 .. _assert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7b4    498946f8                mov [r14-0x8], rax                                     
 .. ert p } ix { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7b8    b807000000              mov eax, 0x7                                           
0x7e8de8b0b7bd    4983c608                add r14, 0x8                                           
0x7e8de8b0b7c1    498906                  mov [r14], rax                                         
0x7e8de8b0b7c4    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b0b7ce    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 ..  { (| m ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7d1    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b7db    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b0b7de    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0b7e2    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  ) m 3 = m @ 4 + dup 7 _assert p } ix ; 
0x7e8de8b0b7e6    c3                      ret                                                    
Word_Disassemble : word - 'goedel' :: codeSize = 162
Word : 0x00007e8de8f111bb :: Compiled at : 0x00007e8de8b0b745
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 203.19 <::

 goedel ::  7 7
 =============================
User.goedel2 <:> csl compiled word
SourceCode for User.goedel2 :> 
: goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
Source code file location of goedel2 : "namespaces/test/localsTest.csl" : 205.2 :: we are now at : namespaces/test/localsTest.csl : 206.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0b7ec -- code size = 220 bytes
TypeSignature : 
 -----------------------------
Word :: User.goedel2 : definition = 0x00007e8de8b0b7ec : disassembly at namespaces/test/localsTest.csl : 206.20 :
0x7e8de8b0b7ec    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0b7f0    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0b7f4    4981c618000000          add r14, 0x18                                          
 ..                : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_as .. 
0x7e8de8b0b7fb    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..              : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_asse .. 
0x7e8de8b0b803    498b4708                mov rax, [r15+0x8]                                     
 ..          : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert"  .. 
0x7e8de8b0b807    b905000000              mov ecx, 0x5                                           
0x7e8de8b0b80c    4803c1                  add rax, rcx                                           
0x7e8de8b0b80f    4983c610                add r14, 0x10                                          
0x7e8de8b0b813    498906                  mov [r14], rax                                         
 ..      : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" asse .. 
0x7e8de8b0b816    498946f8                mov [r14-0x8], rax                                     
 ..  : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } .. 
0x7e8de8b0b81a    b807000000              mov eax, 0x7                                           
0x7e8de8b0b81f    4983c608                add r14, 0x8                                           
0x7e8de8b0b823    498906                  mov [r14], rax                                         
   : goedel2 { (| n ) n 2 = n @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } i .. 
0x7e8de8b0b826    48b86afe80e88d7e0000    mov rax, 0x7e8de880fe6a       < string : 'goedel2_1_assert' >
0x7e8de8b0b830    4983c608                add r14, 0x8                                           
0x7e8de8b0b834    498906                  mov [r14], rax                                         
0x7e8de8b0b837    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0b841    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. @ 5 + dup 7 "goedel2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b844    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b84e    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. del2_1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b851    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0b855    4983c608                add r14, 0x8                                           
0x7e8de8b0b859    498906                  mov [r14], rax                                         
 .. _1_assert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b85c    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b866    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ert" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b869    49c7471003000000        mov qword [r15+0x10], 0x3                              
 .. t" assert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b871    498b4710                mov rax, [r15+0x10]                                    
 .. ssert p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b875    b904000000              mov ecx, 0x4                                           
0x7e8de8b0b87a    4803c1                  add rax, rcx                                           
0x7e8de8b0b87d    4983c610                add r14, 0x10                                          
0x7e8de8b0b881    498906                  mov [r14], rax                                         
 .. t p } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b884    498946f8                mov [r14-0x8], rax                                     
 .. } ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b888    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b892    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ix { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b895    b807000000              mov eax, 0x7                                           
0x7e8de8b0b89a    4983c608                add r14, 0x8                                           
0x7e8de8b0b89e    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b8a1    48b8b2fe80e88d7e0000    mov rax, 0x7e8de880feb2       < string : 'goedel2_2_assert' >
0x7e8de8b0b8ab    4983c608                add r14, 0x8                                           
0x7e8de8b0b8af    498906                  mov [r14], rax                                         
0x7e8de8b0b8b2    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0b8bc    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0b8bf    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0b8c3    4d8b7e08                mov r15, [r14+0x8]                                     
 .. up p 7 "goedel2_2_assert" assert } ix ; 
0x7e8de8b0b8c7    c3                      ret                                                    
Word_Disassemble : word - 'goedel2' :: codeSize = 220
Word : 0x00007e8de8f1489b :: Compiled at : 0x00007e8de8b0b7ec
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 206.20 <::

 goedel2 ::  goedel2_1_assert  : ok

 7 0 7 goedel2_2_assert  : ok


 =============================
User.goedel4 <:> csl compiled word
SourceCode for User.goedel4 :> 
: goedel4 (| n ) nl "goedel4 :: " ps nl n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix n @ 6 + 8 _assert } ix { (| n ) n @ p n 3 = n dup @ 4 + dup dup 7 "goedel4_3_assert" assert p = n @ p n @ 7 "goedel4_4_assert" assert } ix n @ dup p return tos ; 
Source code file location of goedel4 : "namespaces/test/localsTest.csl" : 209.2 :: we are now at : namespaces/test/localsTest.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0b8cd -- code size = 622 bytes
TypeSignature : -> Integer 
 -----------------------------
Word :: User.goedel4 : definition = 0x00007e8de8b0b8cd : disassembly at namespaces/test/localsTest.csl : 229.21 :
0x7e8de8b0b8cd    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0b8d1    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0b8d5    4981c628000000          add r14, 0x28                                          
0x7e8de8b0b8dc    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0b8e6    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0b8f0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..              : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" asse .. 
0x7e8de8b0b8f3    48b8aeff80e88d7e0000    mov rax, 0x7e8de880ffae       < string : 'goedel4 :: ' >
0x7e8de8b0b8fd    4983c608                add r14, 0x8                                           
0x7e8de8b0b901    498906                  mov [r14], rax                                         
   : goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| .. 
0x7e8de8b0b904    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0b90e    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
: goedel4 (| n )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n  .. 
0x7e8de8b0b911    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0b91b    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0b925    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. )      nl "goedel4 :: " ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 .. 
0x7e8de8b0b928    49c7470809000000        mov qword [r15+0x8], 0x9                               
 .. ps nl     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x7e8de8b0b930    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0b934    4983c608                add r14, 0x8                                           
0x7e8de8b0b938    498906                  mov [r14], rax                                         
 .. l     n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_ .. 
0x7e8de8b0b93b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b945    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. n 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_asse .. 
0x7e8de8b0b948    49c7471002000000        mov qword [r15+0x10], 0x2                              
 .. 9 =     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert .. 
0x7e8de8b0b950    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0b954    4983c610                add r14, 0x10                                          
0x7e8de8b0b958    498906                  mov [r14], rax                                         
 ..     {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" as .. 
0x7e8de8b0b95b    498946f8                mov [r14-0x8], rax                                     
 .. {          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert .. 
0x7e8de8b0b95f    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b969    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } .. 
0x7e8de8b0b96c    b802000000              mov eax, 0x2                                           
0x7e8de8b0b971    4983c608                add r14, 0x8                                           
0x7e8de8b0b975    498906                  mov [r14], rax                                         
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } i .. 
0x7e8de8b0b978    48b8ecff80e88d7e0000    mov rax, 0x7e8de880ffec       < string : 'goedel4_1_assert' >
0x7e8de8b0b982    4983c608                add r14, 0x8                                           
0x7e8de8b0b986    498906                  mov [r14], rax                                         
0x7e8de8b0b989    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0b993    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. del4_1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { .. 
0x7e8de8b0b996    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b0b99a    4983c608                add r14, 0x8                                           
0x7e8de8b0b99e    498906                  mov [r14], rax                                         
 .. _1_assert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (|  .. 
0x7e8de8b0b9a1    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b9ab    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ert" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )    .. 
0x7e8de8b0b9ae    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. t" assert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )      .. 
0x7e8de8b0b9b6    498b4718                mov rax, [r15+0x18]                                    
 .. ssert        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          .. 
0x7e8de8b0b9ba    b904000000              mov ecx, 0x4                                           
0x7e8de8b0b9bf    4803c1                  add rax, rcx                                           
0x7e8de8b0b9c2    4983c610                add r14, 0x10                                          
0x7e8de8b0b9c6    498906                  mov [r14], rax                                         
 .. t        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ .. 
0x7e8de8b0b9c9    498946f8                mov [r14-0x8], rax                                     
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p   .. 
0x7e8de8b0b9cd    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0b9d7    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p     .. 
0x7e8de8b0b9da    b807000000              mov eax, 0x7                                           
0x7e8de8b0b9df    4983c608                add r14, 0x8                                           
0x7e8de8b0b9e3    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p       .. 
0x7e8de8b0b9e6    48b8340081e88d7e0000    mov rax, 0x7e8de8810034       < string : 'goedel4_2_assert' >
0x7e8de8b0b9f0    4983c608                add r14, 0x8                                           
0x7e8de8b0b9f4    498906                  mov [r14], rax                                         
0x7e8de8b0b9f7    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0ba01    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0ba04    498b4710                mov rax, [r15+0x10]                                    
 .. del4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup d .. 
0x7e8de8b0ba08    b906000000              mov ecx, 0x6                                           
 .. l4_2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup .. 
0x7e8de8b0ba0d    4803c1                  add rax, rcx                                           
0x7e8de8b0ba10    4983c608                add r14, 0x8                                           
0x7e8de8b0ba14    498906                  mov [r14], rax                                         
 .. _2_assert" assert } ix        n @ 6 + 8 _assert      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 .. 
0x7e8de8b0ba17    b808000000              mov eax, 0x8                                           
0x7e8de8b0ba1c    4983c608                add r14, 0x8                                           
0x7e8de8b0ba20    498906                  mov [r14], rax                                         
0x7e8de8b0ba23    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b0ba2d    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b0ba30    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0ba34    4983c608                add r14, 0x8                                           
0x7e8de8b0ba38    498906                  mov [r14], rax                                         
 .. t      } ix     { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =  .. 
0x7e8de8b0ba3b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0ba45    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..  { (| n )          n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n  .. 
0x7e8de8b0ba48    49c7472003000000        mov qword [r15+0x20], 0x3                              
0x7e8de8b0ba50    498d4720                lea rax, [r15+0x20]                                    
0x7e8de8b0ba54    4983c610                add r14, 0x10                                          
0x7e8de8b0ba58    498906                  mov [r14], rax                                         
 ..        n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4 .. 
0x7e8de8b0ba5b    498946f8                mov [r14-0x8], rax                                     
 ..    n @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_a .. 
0x7e8de8b0ba5f    498b06                  mov rax, [r14]                                         
0x7e8de8b0ba62    488b00                  mov rax, [rax]                                         
0x7e8de8b0ba65    498906                  mov [r14], rax                                         
 ..  @ p          n 3 =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_asser .. 
0x7e8de8b0ba68    49830604                add qword [r14], 0x4                                   
0x7e8de8b0ba6c    498b06                  mov rax, [r14]                                         
0x7e8de8b0ba6f    4983c608                add r14, 0x8                                           
0x7e8de8b0ba73    4983c608                add r14, 0x8                                           
0x7e8de8b0ba77    498906                  mov [r14], rax                                         
 ..  =         n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix .. 
0x7e8de8b0ba7a    b807000000              mov eax, 0x7                                           
0x7e8de8b0ba7f    4983c608                add r14, 0x8                                           
0x7e8de8b0ba83    498906                  mov [r14], rax                                         
 ..          n dup @ 4 +        dup dup 7 "goedel4_3_assert" assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix   .. 
0x7e8de8b0ba86    48b8800081e88d7e0000    mov rax, 0x7e8de8810080       < string : 'goedel4_3_assert' >
0x7e8de8b0ba90    4983c608                add r14, 0x8                                           
0x7e8de8b0ba94    498906                  mov [r14], rax                                         
0x7e8de8b0ba97    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0baa1    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0baa4    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0baae    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b0bab1    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0bab4    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0bab8    4983ee10                sub r14, 0x10                                          
0x7e8de8b0babc    488908                  mov [rax], rcx                                         
0x7e8de8b0babf    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0bac3    4983c608                add r14, 0x8                                           
0x7e8de8b0bac7    498906                  mov [r14], rax                                         
 ..  assert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0baca    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0bad4    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ssert        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0bad7    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0badb    4983c608                add r14, 0x8                                           
0x7e8de8b0badf    498906                  mov [r14], rax                                         
 .. t        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0bae2    b807000000              mov eax, 0x7                                           
0x7e8de8b0bae7    4983c608                add r14, 0x8                                           
0x7e8de8b0baeb    498906                  mov [r14], rax                                         
 ..        p         =        n @ p n @ 7 "goedel4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0baee    48b8b90081e88d7e0000    mov rax, 0x7e8de88100b9       < string : 'goedel4_4_assert' >
0x7e8de8b0baf8    4983c608                add r14, 0x8                                           
0x7e8de8b0bafc    498906                  mov [r14], rax                                         
0x7e8de8b0baff    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0bb09    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0bb0c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0bb10    4983c610                add r14, 0x10                                          
0x7e8de8b0bb14    498906                  mov [r14], rax                                         
 .. el4_4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0bb17    498946f8                mov [r14-0x8], rax                                     
 .. 4_assert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0bb1b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0bb25    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ert" assert    } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0bb28    498b06                  mov rax, [r14]                                         
0x7e8de8b0bb2b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0bb2f    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0bb33    4983c608                add r14, 0x8                                           
0x7e8de8b0bb37    498906                  mov [r14], rax                                         
 ..     } ix      n @ dup p    return tos ;  .. 
0x7e8de8b0bb3a    c3                      ret                                                    
Word_Disassemble : word - 'goedel4' :: codeSize = 622
Word : 0x00007e8de8f187eb :: Compiled at : 0x00007e8de8b0b8cd
 =============================
::> 'wdiss' was called at namespaces/test/localsTest.csl 229.21 <::

 goedel4 :: 
 139147963631595 2 goedel4_1_assert  : ok

 139147940530912 7 goedel4_2_assert  : ok

 139147956187382 goedel4_3_assert  : ok

 139147940530912 7 goedel4_4_assert  : ok

 9 goedel4_0_assert  : ok

 
goedel4 :: output should have read : 
'junk' 2 'junk' 7 'junk' 7 7 9
 goedel5 :: 
 100279956995104 2 goedel5_1_assert  : ok

 139147956189287 7 goedel5_2_assert  : ok

 goedel5_3_assert  : ok

 7 7 goedel5_4_assert  : ok

 9 goedel5_0_assert  : ok

 
goedel5 :: output should read : junk' 2 'junk' 7 7 9
 goedel6 :: 
 100279956995104 2 goedel6_1_assert  : ok

 139147956189287 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 7 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok

 
goedel6 :: goedel6 output should read : 
'junk' 2 'junk' 7 7 'junk' 9
 goedel7 :: 

 goedel7 :: 
 0 2 goedel7_1_assert  : ok

 0 7 goedel7_2_assert  : ok

 18 goedel7_0_assert  : ok

 
goedel7 :: goedel7 output should read : 
'junk' 2 'junk' 7 18
including namespaces/test/file.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Lexer.ofile <:> csl compiled word, prefix
SourceCode for Lexer.ofile :> 
: ofile ( name | file input result ) input 0 = "open/read/print :: " ps name @ ps nl file name @ fopen = nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile file @ fclose ; 
Source code file location of ofile : "namespaces/test/file.csl" : 5.2 :: we are now at : namespaces/test/file.csl : 13.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0c179 -- code size = 356 bytes
TypeSignature : 
 -----------------------------
Word :: Lexer.ofile : definition = 0x00007e8de8b0c179 : disassembly at namespaces/test/file.csl : 13.19 :
0x7e8de8b0c179    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0c17d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0c181    4981c620000000          add r14, 0x20                                          
 .. ame | file input result )     input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1  .. 
0x7e8de8b0c188    49c7471000000000        mov qword [r15+0x10], 0x0                              
0x7e8de8b0c190    48b8390f81e88d7e0000    mov rax, 0x7e8de8810f39       < string : 'open/read/print :: ' >
0x7e8de8b0c19a    4983c608                add r14, 0x8                                           
0x7e8de8b0c19e    498906                  mov [r14], rax                                         
 ..   input 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { res .. 
0x7e8de8b0c1a1    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0c1ab    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. nput 0 =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result .. 
0x7e8de8b0c1ae    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0c1b2    4983c608                add r14, 0x8                                           
0x7e8de8b0c1b6    498906                  mov [r14], rax                                         
 .. =     "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == .. 
0x7e8de8b0c1b9    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0c1c3    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..    "open/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == }  .. 
0x7e8de8b0c1c6    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0c1d0    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c1da    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. n/read/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile .. 
0x7e8de8b0c1dd    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b0c1e1    4983c608                add r14, 0x8                                           
0x7e8de8b0c1e5    498906                  mov [r14], rax                                         
 .. d/print :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      .. 
0x7e8de8b0c1e8    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0c1ec    4983c608                add r14, 0x8                                           
0x7e8de8b0c1f0    498906                  mov [r14], rax                                         
 ..  :: " ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ .. 
0x7e8de8b0c1f3    49bad014323f345b0000    mov r10, 0x5b343f3214d0                                
0x7e8de8b0c1fd    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c207    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0c20a    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0c20d    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0c211    4983ee10                sub r14, 0x10                                          
 .. ps name @ ps nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclos .. 
0x7e8de8b0c215    488908                  mov [rax], rcx                                         
0x7e8de8b0c218    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0c222    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c22c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. s nl     file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c22f    498d4718                lea rax, [r15+0x18]                                    
0x7e8de8b0c233    4983c608                add r14, 0x8                                           
0x7e8de8b0c237    498906                  mov [r14], rax                                         
 ..   file name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c23a    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0c23e    4983c608                add r14, 0x8                                           
0x7e8de8b0c242    498906                  mov [r14], rax                                         
 .. name @ fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c245    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b0c249    4983c608                add r14, 0x8                                           
0x7e8de8b0c24d    498906                  mov [r14], rax                                         
 ..  fopen =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c250    b801000000              mov eax, 0x1                                           
0x7e8de8b0c255    4983c608                add r14, 0x8                                           
0x7e8de8b0c259    498906                  mov [r14], rax                                         
 .. open =     nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c25c    49ba2015323f345b0000    mov r10, 0x5b343f321520                                
0x7e8de8b0c266    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c270    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0c273    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0c276    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0c27a    4983ee10                sub r14, 0x10                                          
 ..      nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c27e    488908                  mov [rax], rcx                                         
 ..    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c281    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0c285    4983c608                add r14, 0x8                                           
0x7e8de8b0c289    498906                  mov [r14], rax                                         
 .. result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c28c    49ba70da313f345b0000    mov r10, 0x5b343f31da70                                
0x7e8de8b0c296    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c2a0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. le @ input 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c2a3    49837f1801              cmp qword [r15+0x18], 0x1                              
 .. read = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c2a8    7485                    jz 0xe8b0c22f                 < Lexer.ofile+182 >
0x7e8de8b0c2aa    0f1f4000                nop [rax]                                              
 .. emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c2ae    498b4708                mov rax, [r15+0x8]                                     
 .. 1 fread = input @ emit } { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c2b2    4983c608                add r14, 0x8                                           
0x7e8de8b0c2b6    498906                  mov [r14], rax                                         
 .. { result @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c2b9    49ba0015323f345b0000    mov r10, 0x5b343f321500                                
0x7e8de8b0c2c3    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c2cd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0c2d0    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0c2d4    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0c2d8    4983ee08                sub r14, 0x8                                           
 .. t @ 1 == } doWhile      file @ fclose ;  .. 
0x7e8de8b0c2dc    c3                      ret                                                    
Word_Disassemble : word - 'ofile' :: codeSize = 356
Word : 0x00007e8de8f3d80b :: Compiled at : 0x00007e8de8b0c179
 =============================
::> 'wdiss' was called at namespaces/test/file.csl 13.19 <::
 open/read/print ::  namespaces/test/file.csl

5
#if 1 // already added to .init.csl
C Compiler Int Lexer
jcc8_Off
: ofile ( name | file input result )
    input 0 =
    "open/read/print :: " ps name @ ps nl
    file name @ fopen =
    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile 
    file @ fclose
; prefix
#endif 
' ofile find wdiss //pause
ofile ( "namespaces/test/file.csl" )
//pause
: hi 1 2 + p ;
: hey hi hi ;
: heey hey hey ;
heey
2 + 7 assertStkChk // stack checking


 3 3 3 3
including namespaces/test/dobject.csl at namespaces/test/initTest.csl : 86.41 ...
 
dynamic object test
 object new slot test :   : ok

 object clone test :   : ok

 object clone test2 :   : ok

 object clone test3 :   : ok

 object clone test4 :   : ok

 object clone test5 :   : ok

 object compile test6 :   : ok

 object compile test7 :   : ok

 object compile test8 :   : ok


including namespaces/test/control.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
Control.abrkcon <:> csl compiled word
SourceCode for Control.abrkcon :> 
: abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
Source code file location of abrkcon : "namespaces/test/control.csl" : 14.2 :: we are now at : namespaces/test/control.csl : 15.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0c4af -- code size = 150 bytes
TypeSignature : 
 -----------------------------
Word :: Control.abrkcon : definition = 0x00007e8de8b0c4af : disassembly at namespaces/test/control.csl : 15.20 :
 ..                         : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4af    48b8fb81f4e88d7e0000    mov rax, 0x7e8de8f481fb                                
0x7e8de8b0c4b9    488b00                  mov rax, [rax]                                         
 ..                   : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4bc    4883f800                cmp rax, 0x0                                           
 ..                : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4c0    750e                    jnz 0xe8b0c4d0                < Control.abrkcon+33 >
0x7e8de8b0c4c2    0f1f4000                nop [rax]                                              
 ..            : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4c6    e979000000              jmp 0x7e8de8b0c544            < Control.abrkcon+149 >
 ..      : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4cb    e956000000              jmp 0x7e8de8b0c526            < Control.abrkcon+119 >
 ..  : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4d0    48b8fb81f4e88d7e0000    mov rax, 0x7e8de8f481fb                                
0x7e8de8b0c4da    488b00                  mov rax, [rax]                                         
0x7e8de8b0c4dd    4983c608                add r14, 0x8                                           
0x7e8de8b0c4e1    498906                  mov [r14], rax                                         
 : abrkcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c4e4    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c4ee    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. kcon { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c4f1    48b8fb81f4e88d7e0000    mov rax, 0x7e8de8f481fb                                
0x7e8de8b0c4fb    4983c610                add r14, 0x10                                          
0x7e8de8b0c4ff    498906                  mov [r14], rax                                         
 .. on { { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c502    498946f8                mov [r14-0x8], rax                                     
 ..  { x @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c506    498b06                  mov rax, [r14]                                         
0x7e8de8b0c509    488b00                  mov rax, [rax]                                         
0x7e8de8b0c50c    498906                  mov [r14], rax                                         
 ..  @ 0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c50f    49832e01                sub qword [r14], 0x1                                   
 .. reak } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c513    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0c516    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0c51a    4983ee10                sub r14, 0x10                                          
 ..  0 == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c51e    488908                  mov [rax], rcx                                         
 ..  == } { break } { x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c521    e989ffffff              jmp 0x7e8de8b0c4af            < Control.abrkcon : 0x00007e8de8b0c4af >
 .. x @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c526    b802000000              mov eax, 0x2                                           
0x7e8de8b0c52b    4983c608                add r14, 0x8                                           
0x7e8de8b0c52f    498906                  mov [r14], rax                                         
 .. @ p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c532    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c53c    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. p x dup @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c53f    e96bffffff              jmp 0x7e8de8b0c4af            < Control.abrkcon : 0x00007e8de8b0c4af >
 ..  @ 1 - = continue } ifElse 2 p } loop ; 
0x7e8de8b0c544    c3                      ret                                                    
Word_Disassemble : word - 'abrkcon' :: codeSize = 150
Word : 0x00007e8de8f4831b :: Compiled at : 0x00007e8de8b0c4af
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 15.20 <::
 10 9 8 7 6 5 4 3 2 1
 =============================
Control.abrk0 <:> csl compiled word
SourceCode for Control.abrk0 :> 
: abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
Source code file location of abrk0 : "namespaces/test/control.csl" : 17.2 :: we are now at : namespaces/test/control.csl : 18.10
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0c54a -- code size = 110 bytes
TypeSignature : 
 -----------------------------
Word :: Control.abrk0 : definition = 0x00007e8de8b0c54a : disassembly at namespaces/test/control.csl : 18.10 :
0x7e8de8b0c54a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0c54e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0c552    4981c608000000          add r14, 0x8                                           
 ..  ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c559    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..            : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c55e    750e                    jnz 0xe8b0c56e                < Control.abrk0+36 >
0x7e8de8b0c560    0f1f4000                nop [rax]                                              
 ..        : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c564    e942000000              jmp 0x7e8de8b0c5ab            < Control.abrk0+97 >
 ..  : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c569    e922000000              jmp 0x7e8de8b0c590            < Control.abrk0+70 >
 : abrk0 ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ;  .. 
0x7e8de8b0c56e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0c572    4983c608                add r14, 0x8                                           
0x7e8de8b0c576    498906                  mov [r14], rax                                         
 ..  ( x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c579    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c583    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  x ) { { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c586    49836ff801              sub qword [r15-0x8], 0x1                               
 .. { x @ 0 == } { break } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c58b    e9c9ffffff              jmp 0x7e8de8b0c559            < Control.abrk0+15 >
 .. ak } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c590    b802000000              mov eax, 0x2                                           
0x7e8de8b0c595    4983c608                add r14, 0x8                                           
0x7e8de8b0c599    498906                  mov [r14], rax                                         
 ..  } { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c59c    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c5a6    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  { x @ p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c5a9    ebae                    jmp 0x7e8de8b0c559            < Control.abrk0+15 >
0x7e8de8b0c5ab    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0c5af    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0c5b3    4983ee08                sub r14, 0x8                                           
 .. p x 1 -= continue } ifElse 2 p } loop ; 
0x7e8de8b0c5b7    c3                      ret                                                    
Word_Disassemble : word - 'abrk0' :: codeSize = 110
Word : 0x00007e8de8f4a9eb :: Compiled at : 0x00007e8de8b0c54a
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 18.10 <::

 10 9 8 7 6 5 4 3 2 1
 =============================
Control.ct00 <:> csl compiled word
SourceCode for Control.ct00 :> 
: ct00 ( n | j ) { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p } for ; 
Source code file location of ct00 : "namespaces/test/control.csl" : 34.2 :: we are now at : namespaces/test/control.csl : 41.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0c6ae -- code size = 118 bytes
TypeSignature : 
 -----------------------------
Word :: Control.ct00 : definition = 0x00007e8de8b0c6ae : disassembly at namespaces/test/control.csl : 41.17 :
0x7e8de8b0c6ae    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0c6b2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0c6b6    4981c610000000          add r14, 0x10                                          
 ..           : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x7e8de8b0c6bd    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..     : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x7e8de8b0c6c5    498b4708                mov rax, [r15+0x8]                                     
 .. : ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x7e8de8b0c6c9    498b4ff8                mov rcx, [r15-0x8]                                     
: ct00 ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ;  .. 
0x7e8de8b0c6cd    483bc1                  cmp rax, rcx                                           
 .. ( n | j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x7e8de8b0c6d0    7f45                    jg 0xe8b0c717                 < Control.ct00+105 >
0x7e8de8b0c6d2    0f1f4000                nop [rax]                                              
0x7e8de8b0c6d6    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0c6da    4983c608                add r14, 0x8                                           
0x7e8de8b0c6de    498906                  mov [r14], rax                                         
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x7e8de8b0c6e1    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c6eb    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x7e8de8b0c6ee    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0c6f2    4983c608                add r14, 0x8                                           
0x7e8de8b0c6f6    498906                  mov [r14], rax                                         
 ..  <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x7e8de8b0c6f9    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c703    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. j )      { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x7e8de8b0c706    49ff4708                inc qword [r15+0x8]                                    
 ..       { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p      }     for ; 
0x7e8de8b0c70a    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0c70e    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b0c712    483bc1                  cmp rax, rcx                                           
0x7e8de8b0c715    7ebb                    jle 0xe8b0c6d2                < Control.ct00+36 >
0x7e8de8b0c717    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0c71b    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0c71f    4983ee08                sub r14, 0x8                                           
 ..   {        n @ p j @ p      }     for ; 
0x7e8de8b0c723    c3                      ret                                                    
Word_Disassemble : word - 'ct00' :: codeSize = 118
Word : 0x00007e8de8f4f1ab :: Compiled at : 0x00007e8de8b0c6ae
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 41.17 <::
 17 1 17 2 17 3 17 4 17 5 17 6 17 7 17 8 17 9 17 10 17 11 17 12 17 13 17 14 17 15 17 16 17 17
 =============================
Control.ct0 <:> csl compiled word
SourceCode for Control.ct0 :> 
: ct0 ( n | j ) nl "ct0 : " ps nl { label: test1 "ct0 before goto/label works" ps nl goto: leave } _ { j 1 = } { j @ n @ <= } { j ++ } { n @ p j @ p { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse } for label: leave "ct0" n @ j @ leaving ; 
Source code file location of ct0 : "namespaces/test/control.csl" : 44.2 :: we are now at : namespaces/test/control.csl : 60.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0c729 -- code size = 412 bytes
TypeSignature : 
 -----------------------------
Word :: Control.ct0 : definition = 0x00007e8de8b0c729 : disassembly at namespaces/test/control.csl : 60.16 :
0x7e8de8b0c729    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0c72d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0c731    4981c610000000          add r14, 0x10                                          
0x7e8de8b0c738    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0c742    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c74c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..               : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          go .. 
0x7e8de8b0c74f    48b8501881e88d7e0000    mov rax, 0x7e8de8811850       < string : 'ct0 : ' >
0x7e8de8b0c759    4983c608                add r14, 0x8                                           
0x7e8de8b0c75d    498906                  mov [r14], rax                                         
 ..      : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave .. 
0x7e8de8b0c760    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0c76a    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..   : ct0 ( n | j )      nl "ct0 : " ps nl     {          label: test1          "ct0 before goto/label works" ps nl          goto: leave    .. 
0x7e8de8b0c76d    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0c777    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c781    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0c784    e93b000000              jmp 0x7e8de8b0c7c4            < Control.ct0+155 >
0x7e8de8b0c789    48b88f1881e88d7e0000    mov rax, 0x7e8de881188f       < string : 'ct0 before goto/label works' >
0x7e8de8b0c793    4983c608                add r14, 0x8                                           
0x7e8de8b0c797    498906                  mov [r14], rax                                         
 ..         "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p  .. 
0x7e8de8b0c79a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0c7a4    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..      "ct0 before goto/label works" ps nl          goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p     .. 
0x7e8de8b0c7a7    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0c7b1    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c7bb    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0c7be    e9c1000000              jmp 0x7e8de8b0c884            < Control.ct0+347 >
0x7e8de8b0c7c3    c3                      ret                                                    
 ..        goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : got .. 
0x7e8de8b0c7c4    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  goto: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/labe .. 
0x7e8de8b0c7cc    498b4708                mov rax, [r15+0x8]                                     
 .. o: leave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \' .. 
0x7e8de8b0c7d0    498b4ff8                mov rcx, [r15-0x8]                                     
 .. eave      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' .. 
0x7e8de8b0c7d4    483bc1                  cmp rax, rcx                                           
 .. e      } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' -> .. 
0x7e8de8b0c7d7    0f8fa7000000            jg 0x7e8de8b0c884             < Control.ct0+347 >
0x7e8de8b0c7dd    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0c7e1    4983c608                add r14, 0x8                                           
0x7e8de8b0c7e5    498906                  mov [r14], rax                                         
 ..  @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "contin .. 
0x7e8de8b0c7e8    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c7f2    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continui .. 
0x7e8de8b0c7f5    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0c7f9    4983c608                add r14, 0x8                                           
0x7e8de8b0c7fd    498906                  mov [r14], rax                                         
 ..  <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing c .. 
0x7e8de8b0c800    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0c80a    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifE .. 
0x7e8de8b0c80d    498b47f8                mov rax, [r15-0x8]                                     
 ..    {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse  .. 
0x7e8de8b0c811    498b4f08                mov rcx, [r15+0x8]                                     
 ..         n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse      .. 
0x7e8de8b0c815    483bc1                  cmp rax, rcx                                           
 ..      n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }   .. 
0x7e8de8b0c818    7543                    jnz 0xe8b0c85d                < Control.ct0+308 >
0x7e8de8b0c81a    0f1f4000                nop [rax]                                              
 ..  n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     f .. 
0x7e8de8b0c81e    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0c828    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0c832    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for  .. 
0x7e8de8b0c835    48b8ee1881e88d7e0000    mov rax, 0x7e8de88118ee       < string : 'testing ct0 : goto/label 'hi' ->' >
0x7e8de8b0c83f    4983c608                add r14, 0x8                                           
0x7e8de8b0c843    498906                  mov [r14], rax                                         
 ..  "testing ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ l .. 
0x7e8de8b0c846    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0c850    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. esting ct0 : goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leav .. 
0x7e8de8b0c853    e931ffffff              jmp 0x7e8de8b0c789            < Control.ct0+96 >
 ..  goto/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c858    e91e000000              jmp 0x7e8de8b0c87b            < Control.ct0+338 >
 .. o/label \'hi\' ->" ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c85d    48b8431981e88d7e0000    mov rax, 0x7e8de8811943       < string : 'continuing ct0' >
0x7e8de8b0c867    4983c608                add r14, 0x8                                           
0x7e8de8b0c86b    498906                  mov [r14], rax                                         
 .. " ps goto: test1 } { "continuing ct0" ps } ifElse     }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c86e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0c878    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  } _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps g .. 
0x7e8de8b0c87b    49ff4708                inc qword [r15+0x8]                                    
 .. _     { j 1 = } { j @ n @ <= } { j ++ }     {        n @ p j @ p         { n @ j @ == } { nl "testing ct0 : goto/label \'hi\' ->" ps goto .. 
0x7e8de8b0c87f    e948ffffff              jmp 0x7e8de8b0c7cc            < Control.ct0+163 >
0x7e8de8b0c884    48b86f1981e88d7e0000    mov rax, 0x7e8de881196f       < string : 'ct0' >
0x7e8de8b0c88e    4983c608                add r14, 0x8                                           
0x7e8de8b0c892    498906                  mov [r14], rax                                         
 .. }     for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c895    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0c899    4983c608                add r14, 0x8                                           
0x7e8de8b0c89d    498906                  mov [r14], rax                                         
 ..   for     label: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c8a0    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0c8a4    4983c608                add r14, 0x8                                           
0x7e8de8b0c8a8    498906                  mov [r14], rax                                         
 .. r     label: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c8ab    49bbbdc5b0e88d7e0000    mov r11, 0x7e8de8b0c5bd                                
0x7e8de8b0c8b5    49ffd3                  call r11                      < Control.leaving : 0x00007e8de8b0c5bd >
0x7e8de8b0c8b8    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0c8bc    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0c8c0    4983ee08                sub r14, 0x8                                           
 .. bel: leave      "ct0" n @ j @ leaving ;  .. 
0x7e8de8b0c8c4    c3                      ret                                                    
Word_Disassemble : word - 'ct0' :: codeSize = 412
Word : 0x00007e8de8f51fab :: Compiled at : 0x00007e8de8b0c729
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 60.16 <::

 ct0 : 
 17 1 continuing ct0 17 2 continuing ct0 17 3 continuing ct0 17 4 continuing ct0 17 5 continuing ct0 17 6 continuing ct0 17 7 continuing ct0 17 8 continuing ct0 17 9 continuing ct0 17 10 continuing ct0 17 11 continuing ct0 17 12 continuing ct0 17 13 continuing ct0 17 14 continuing ct0 17 15 continuing ct0 17 16 continuing ct0 17 17
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x00007e8de7910b08, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b08 > = 0x00007e8de7910ae0
  DataStack   [  -1 ] < 0x00007e8de7910b00 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x00007e8de7910af8 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x00007e8de7910af0 > = 0x00007e8de881196f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x00007e8de7910ae8 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -6 ] < 0x00007e8de7910ad8 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 leaving ct0 n = 17 j =  17
DataStack at : namespaces/test/control.csl : 61.7 :
DataStack depth =  10 : Dsp (R14) = Top = 0x00007e8de7910b08, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b08 > = 0x00007e8de7910ae0
  DataStack   [  -1 ] < 0x00007e8de7910b00 > = 0x0000000000000011
  DataStack   [  -2 ] < 0x00007e8de7910af8 > = 0x0000000000000011
  DataStack   [  -3 ] < 0x00007e8de7910af0 > = 0x00007e8de881196f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x00007e8de7910ae8 > = 0x0000000000000011
  DataStack   [  -5 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -6 ] < 0x00007e8de7910ad8 > = 0x0000000000000011
  DataStack   [  -7 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct1 : 
 17 1 continuing ct1 17 2 continuing ct1 17 3 continuing ct1 17 4 continuing ct1 17 5 continuing ct1 17 6 continuing ct1 17 7 continuing ct1 17 8 continuing ct1 17 9 continuing ct1 17 10 continuing ct1 17 11 continuing ct1 17 12 continuing ct1 17 13 continuing ct1 17 14 continuing ct1 17 15 continuing ct1 17 16 continuing ct1 17 17
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

 =============================
Control.hic2 <:> csl compiled word
SourceCode for Control.hic2 :> 
: hic2 ( n ) nl "hic2 : start " ps nl s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p nl "hic2 : done " ps nl ; 
Source code file location of hic2 : "namespaces/test/control.csl" : 83.2 :: we are now at : namespaces/test/control.csl : 88.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0cb19 -- code size = 438 bytes
TypeSignature : 
 -----------------------------
Word :: Control.hic2 : definition = 0x00007e8de8b0cb19 : disassembly at namespaces/test/control.csl : 88.17 :
0x7e8de8b0cb19    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0cb1d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0cb21    4981c608000000          add r14, 0x8                                           
0x7e8de8b0cb28    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0cb32    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cb3c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..                  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps .. 
0x7e8de8b0cb3f    48b8f31e81e88d7e0000    mov rax, 0x7e8de8811ef3       < string : 'hic2 : start ' >
0x7e8de8b0cb49    4983c608                add r14, 0x8                                           
0x7e8de8b0cb4d    498906                  mov [r14], rax                                         
 ..  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  .. 
0x7e8de8b0cb50    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0cb5a    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
  : hic2 ( n )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ;  .. 
0x7e8de8b0cb5d    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0cb67    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cb71    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0cb74    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0cb7e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cb88    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. )      nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cb8b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0cb8f    4983c608                add r14, 0x8                                           
0x7e8de8b0cb93    498906                  mov [r14], rax                                         
 ..    nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cb96    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0cba0    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  nl "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cba3    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0cba7    4983c608                add r14, 0x8                                           
0x7e8de8b0cbab    498906                  mov [r14], rax                                         
 .. "hic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cbae    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0cbb8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cbc2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ic2 : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cbc5    49bb29c7b0e88d7e0000    mov r11, 0x7e8de8b0c729                                
0x7e8de8b0cbcf    49ffd3                  call r11                      < Control.ct0 : 0x00007e8de8b0c729 >
 .. : start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cbd2    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0cbdc    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cbe6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. start " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cbe9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0cbed    4983c608                add r14, 0x8                                           
0x7e8de8b0cbf1    498906                  mov [r14], rax                                         
 .. t " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cbf4    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0cbfe    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cc08    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. " ps nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc0b    49bbcac8b0e88d7e0000    mov r11, 0x7e8de8b0c8ca                                
0x7e8de8b0cc15    49ffd3                  call r11                      < Control.ct1 : 0x00007e8de8b0c8ca >
 ..  nl     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc18    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0cc1c    4983c608                add r14, 0x8                                           
0x7e8de8b0cc20    498906                  mov [r14], rax                                         
 ..     s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc23    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0cc2d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cc37    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   s n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc3a    49bb52cab0e88d7e0000    mov r11, 0x7e8de8b0ca52                                
0x7e8de8b0cc44    49ffd3                  call r11                      < Control.ct2 : 0x00007e8de8b0ca52 >
 .. n @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc47    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b0cc51    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cc5b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. @ p n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc5e    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0cc62    4983c608                add r14, 0x8                                           
0x7e8de8b0cc66    498906                  mov [r14], rax                                         
 .. n @ s ct0 s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc69    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0cc73    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0cc76    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0cc80    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0cc8a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. s n @ s ct1 n @ s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc8d    48b8201f81e88d7e0000    mov rax, 0x7e8de8811f20       < string : 'hic2 : done ' >
0x7e8de8b0cc97    4983c608                add r14, 0x8                                           
0x7e8de8b0cc9b    498906                  mov [r14], rax                                         
 ..  s ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0cc9e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0cca8    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ct2 s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0ccab    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0ccb5    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0ccbf    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b0ccc2    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0ccc6    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0ccca    4983ee08                sub r14, 0x8                                           
 .. s n @ p      nl "hic2 : done " ps nl  ; 
0x7e8de8b0ccce    c3                      ret                                                    
Word_Disassemble : word - 'hic2' :: codeSize = 438
Word : 0x00007e8de8f60c6b :: Compiled at : 0x00007e8de8b0cb19
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 88.17 <::

 hic2 : start 

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct0 : 
 3 1 continuing ct0 3 2 continuing ct0 3 3
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x00007e8de7910b18, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b18 > = 0x00007e8de7910af0
  DataStack   [  -1 ] < 0x00007e8de7910b10 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x00007e8de7910b08 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x00007e8de7910b00 > = 0x00007e8de881196f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x00007e8de7910af8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x00007e8de7910af0 > = 0x00007e8de7910ae0
  DataStack   [  -6 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -8 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 leaving ct0 n = 3 j =  3
DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x00007e8de7910b18, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b18 > = 0x00007e8de7910af0
  DataStack   [  -1 ] < 0x00007e8de7910b10 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x00007e8de7910b08 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x00007e8de7910b00 > = 0x00007e8de881196f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x00007e8de7910af8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x00007e8de7910af0 > = 0x00007e8de7910ae0
  DataStack   [  -6 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -7 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -8 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -9 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct1 : 
 3 1 continuing ct1 3 2 continuing ct1 3 3
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 89.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 3
 hic2 : done 

 hic2 : start 

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct0 : 
 7 1 continuing ct0 7 2 continuing ct0 7 3 continuing ct0 7 4 continuing ct0 7 5 continuing ct0 7 6 continuing ct0 7 7
 testing ct0 : goto/label 'hi' -> ct0 before goto/label works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x00007e8de7910b18, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b18 > = 0x00007e8de7910af0
  DataStack   [  -1 ] < 0x00007e8de7910b10 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910b08 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910b00 > = 0x00007e8de881196f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x00007e8de7910af8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x00007e8de7910af0 > = 0x00007e8de7910ae0
  DataStack   [  -6 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -8 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 leaving ct0 n = 7 j =  7
DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =  12 : Dsp (R14) = Top = 0x00007e8de7910b18, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b18 > = 0x00007e8de7910af0
  DataStack   [  -1 ] < 0x00007e8de7910b10 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910b08 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910b00 > = 0x00007e8de881196f       < string : 'ct0' >
  DataStack   [  -4 ] < 0x00007e8de7910af8 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x00007e8de7910af0 > = 0x00007e8de7910ae0
  DataStack   [  -6 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -8 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -9 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [ -11 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct1 : 
 7 1 continuing ct1 7 2 continuing ct1 7 3 continuing ct1 7 4 continuing ct1 7 5 continuing ct1 7 6 continuing ct1 7 7
 testing ct1 : goto/label1 -> ct1 after nested goto/label1 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 ct2 : 

 testing ct2 : goto/label2 -> ct2 after goto/label2 works

DataStack at : namespaces/test/control.csl : 91.7 :
DataStack depth =   6 : Dsp (R14) = Top = 0x00007e8de7910ae8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -2 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -5 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 7
 hic2 : done 

 7
 3
 2
 '1
 1
 77
 7
 9
 9
 8

 7
 7
 3
 2
 1
 77
 3
 8
 9

 =============================
C_Syntax.csMatchExWithReturn <:> csl compiled word
SourceCode for C_Syntax.csMatchExWithReturn :> 
void csMatchExWithReturn ( n | x rtn ) { x = 1111 ; match ( n ) { case '1 { nl ; p (1) ; rtn = x ; } case '2 { nl ; p (2) ; rtn = n ; } case '3 { nl ; p (3) ; rtn = x ; } case 3 { nl ; p (3) ; rtn = n ; } case 77 { nl ; p (77) ; rtn = n ; } case 'seven { nl ; p (7) ; rtn = n ; } case 'eight { nl ; p (8) ; rtn = n ; } case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; } case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; } case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; } } p ( x - 103 ) ; return rtn ; } 
Source code file location of csMatchExWithReturn : "namespaces/test/control.csl" : 154.20 :: we are now at : namespaces/test/control.csl : 173.24
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0d16e -- code size = 934 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.csMatchExWithReturn : definition = 0x00007e8de8b0d16e : disassembly at namespaces/test/control.csl : 173.24 :
0x7e8de8b0d16e    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d172    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d176    4981c618000000          add r14, 0x18                                          
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p  .. 
0x7e8de8b0d17d    49c7470857040000        mov qword [r15+0x8], 0x457                              
 ..  x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }     .. 
0x7e8de8b0d185    498b47f8                mov rax, [r15-0x8]                                     
 .. tchExWithReturn ( n | x rtn ) {     x = 1111 ;     match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p  .. 
0x7e8de8b0d189    4983c608                add r14, 0x8                                           
0x7e8de8b0d18d    498906                  mov [r14], rax                                         
0x7e8de8b0d190    e927030000              jmp 0x7e8de8b0d4bc            < C_Syntax.csMatchExWithReturn+846 >
 ..      match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3 .. 
0x7e8de8b0d195    e939000000              jmp 0x7e8de8b0d1d3            < C_Syntax.csMatchExWithReturn+101 >
 ..    match ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3)  .. 
0x7e8de8b0d19a    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d1a4    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d1ae    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn =  .. 
0x7e8de8b0d1b1    b801000000              mov eax, 0x1                                           
0x7e8de8b0d1b6    4983c608                add r14, 0x8                                           
0x7e8de8b0d1ba    498906                  mov [r14], rax                                         
 .. tch ( n )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn .. 
0x7e8de8b0d1bd    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d1c7    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..          case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }       .. 
0x7e8de8b0d1ca    498b4708                mov rax, [r15+0x8]                                     
 .. )    {         case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; } .. 
0x7e8de8b0d1ce    49894710                mov [r15+0x10], rax                                    
 ..      case '1 { nl ; p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }           .. 
0x7e8de8b0d1d2    c3                      ret                                                    
 ..  p (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) .. 
0x7e8de8b0d1d3    e939000000              jmp 0x7e8de8b0d211            < C_Syntax.csMatchExWithReturn+163 >
 ..  (1) ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; .. 
0x7e8de8b0d1d8    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d1e2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d1ec    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. tn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n .. 
0x7e8de8b0d1ef    b802000000              mov eax, 0x2                                           
0x7e8de8b0d1f4    4983c608                add r14, 0x8                                           
0x7e8de8b0d1f8    498906                  mov [r14], rax                                         
 .. ; rtn = x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn  .. 
0x7e8de8b0d1fb    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d205    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }        .. 
0x7e8de8b0d208    498b47f8                mov rax, [r15-0x8]                                     
 .. x ; }          case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }  .. 
0x7e8de8b0d20c    49894710                mov [r15+0x10], rax                                    
 ..      case '2 { nl ; p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          c .. 
0x7e8de8b0d210    c3                      ret                                                    
 ..  p (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77 .. 
0x7e8de8b0d211    e939000000              jmp 0x7e8de8b0d24f            < C_Syntax.csMatchExWithReturn+225 >
 ..  (2) ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77)  .. 
0x7e8de8b0d216    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d220    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d22a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. tn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn =  .. 
0x7e8de8b0d22d    b803000000              mov eax, 0x3                                           
0x7e8de8b0d232    4983c608                add r14, 0x8                                           
0x7e8de8b0d236    498906                  mov [r14], rax                                         
 .. ; rtn = n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn .. 
0x7e8de8b0d239    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d243    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }       .. 
0x7e8de8b0d246    498b4708                mov rax, [r15+0x8]                                     
 .. n ; }          case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; } .. 
0x7e8de8b0d24a    49894710                mov [r15+0x10], rax                                    
 ..      case '3 { nl ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }           .. 
0x7e8de8b0d24e    c3                      ret                                                    
 .. l ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl .. 
0x7e8de8b0d24f    b803000000              mov eax, 0x3                                           
0x7e8de8b0d254    4983c608                add r14, 0x8                                           
0x7e8de8b0d258    498906                  mov [r14], rax                                         
 .. ; p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; .. 
0x7e8de8b0d25b    e939000000              jmp 0x7e8de8b0d299            < C_Syntax.csMatchExWithReturn+299 >
 .. p (3) ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p .. 
0x7e8de8b0d260    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d26a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d274    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; r .. 
0x7e8de8b0d277    b803000000              mov eax, 0x3                                           
0x7e8de8b0d27c    4983c608                add r14, 0x8                                           
0x7e8de8b0d280    498906                  mov [r14], rax                                         
 ..  ; rtn = x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7)  .. 
0x7e8de8b0d283    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d28d    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..           case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }  .. 
0x7e8de8b0d290    498b47f8                mov rax, [r15-0x8]                                     
 ..  x ; }          case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn =  .. 
0x7e8de8b0d294    49894710                mov [r15+0x10], rax                                    
 ..       case 3 { nl ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }      .. 
0x7e8de8b0d298    c3                      ret                                                    
 .. l ; p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight .. 
0x7e8de8b0d299    b84d000000              mov eax, 0x4d                                          
0x7e8de8b0d29e    4983c608                add r14, 0x8                                           
0x7e8de8b0d2a2    498906                  mov [r14], rax                                         
 ..  p (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight {  .. 
0x7e8de8b0d2a5    e939000000              jmp 0x7e8de8b0d2e3            < C_Syntax.csMatchExWithReturn+373 >
 ..  (3) ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl .. 
0x7e8de8b0d2aa    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d2b4    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d2be    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. tn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) .. 
0x7e8de8b0d2c1    b84d000000              mov eax, 0x4d                                          
0x7e8de8b0d2c6    4983c608                add r14, 0x8                                           
0x7e8de8b0d2ca    498906                  mov [r14], rax                                         
 .. ; rtn = n ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p  .. 
0x7e8de8b0d2cd    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d2d7    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..         case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; .. 
0x7e8de8b0d2da    498b47f8                mov rax, [r15-0x8]                                     
 ..  ; }          case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn .. 
0x7e8de8b0d2de    49894710                mov [r15+0x10], rax                                    
 ..     case 77 { nl ; p (77) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }   .. 
0x7e8de8b0d2e2    c3                      ret                                                    
 .. 7) ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine )  .. 
0x7e8de8b0d2e3    e939000000              jmp 0x7e8de8b0d321            < C_Syntax.csMatchExWithReturn+435 >
 ..  ; rtn = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) {  .. 
0x7e8de8b0d2e8    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d2f2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d2fc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps  .. 
0x7e8de8b0d2ff    b807000000              mov eax, 0x7                                           
0x7e8de8b0d304    4983c608                add r14, 0x8                                           
0x7e8de8b0d308    498906                  mov [r14], rax                                         
 .. n = n ; }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ;  .. 
0x7e8de8b0d30b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d315    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..      case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p ( .. 
0x7e8de8b0d318    498b47f8                mov rax, [r15-0x8]                                     
 .. }          case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) .. 
0x7e8de8b0d31c    49894710                mov [r15+0x10], rax                                    
 ..  case 'seven { nl ; p (7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; .. 
0x7e8de8b0d320    c3                      ret                                                    
 .. 7) ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" )  .. 
0x7e8de8b0d321    e939000000              jmp 0x7e8de8b0d35f            < C_Syntax.csMatchExWithReturn+497 >
 ..  ; rtn = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ;  .. 
0x7e8de8b0d326    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d330    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d33a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x  .. 
0x7e8de8b0d33d    b808000000              mov eax, 0x8                                           
0x7e8de8b0d342    4983c608                add r14, 0x8                                           
0x7e8de8b0d346    498906                  mov [r14], rax                                         
 .. n = n ; }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = .. 
0x7e8de8b0d349    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d353    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..      case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }         .. 
0x7e8de8b0d356    498b47f8                mov rax, [r15-0x8]                                     
 .. }          case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }   .. 
0x7e8de8b0d35a    49894710                mov [r15+0x10], rax                                    
 ..  case 'eight { nl ; p (8) ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          ca .. 
0x7e8de8b0d35e    c3                      ret                                                    
 .. ; rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; .. 
0x7e8de8b0d35f    e96f000000              jmp 0x7e8de8b0d3d3            < C_Syntax.csMatchExWithReturn+613 >
 .. rtn = n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p .. 
0x7e8de8b0d364    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d36e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d378    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps  .. 
0x7e8de8b0d37b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d37f    4983c608                add r14, 0x8                                           
0x7e8de8b0d383    498906                  mov [r14], rax                                         
 ..  n ; }          case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9)  .. 
0x7e8de8b0d386    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0d390    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..   case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "single .. 
0x7e8de8b0d393    b809000000              mov eax, 0x9                                           
0x7e8de8b0d398    4983c608                add r14, 0x8                                           
0x7e8de8b0d39c    498906                  mov [r14], rax                                         
 ..      case ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "sin .. 
0x7e8de8b0d39f    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d3a9    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" )  .. 
0x7e8de8b0d3ac    48b8e92381e88d7e0000    mov rax, 0x7e8de88123e9       < string : 'singleQuote1' >
0x7e8de8b0d3b6    4983c608                add r14, 0x8                                           
0x7e8de8b0d3ba    498906                  mov [r14], rax                                         
 .. e ( 'nine ) { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote .. 
0x7e8de8b0d3bd    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0d3c7    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          ca .. 
0x7e8de8b0d3ca    498b4708                mov rax, [r15+0x8]                                     
 .. n ) ; p (9) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }       .. 
0x7e8de8b0d3ce    49894710                mov [r15+0x10], rax                                    
 .. ) ; ps ( "singleQuote1" ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( .. 
0x7e8de8b0d3d2    c3                      ret                                                    
 .. " ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n .. 
0x7e8de8b0d3d3    e96f000000              jmp 0x7e8de8b0d447            < C_Syntax.csMatchExWithReturn+729 >
 .. ) ; rtn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n)  .. 
0x7e8de8b0d3d8    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d3e2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d3ec    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ;  .. 
0x7e8de8b0d3ef    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d3f3    4983c608                add r14, 0x8                                           
0x7e8de8b0d3f7    498906                  mov [r14], rax                                         
 .. tn = x ; }          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p ( .. 
0x7e8de8b0d3fa    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0d404    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..       case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "dou .. 
0x7e8de8b0d407    b809000000              mov eax, 0x9                                           
0x7e8de8b0d40c    4983c608                add r14, 0x8                                           
0x7e8de8b0d410    498906                  mov [r14], rax                                         
 ..          case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( " .. 
0x7e8de8b0d413    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d41d    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..  'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote"  .. 
0x7e8de8b0d420    48b81b2481e88d7e0000    mov rax, 0x7e8de881241b       < string : 'singleQuote2' >
0x7e8de8b0d42a    4983c608                add r14, 0x8                                           
0x7e8de8b0d42e    498906                  mov [r14], rax                                         
 ..  case 'nine { nl ; ps ( n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQu .. 
0x7e8de8b0d431    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0d43b    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }    .. 
0x7e8de8b0d43e    498b4708                mov rax, [r15+0x8]                                     
 .. n ) ; p (9) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }     .. 
0x7e8de8b0d442    49894710                mov [r15+0x10], rax                                    
 .. ) ; ps ( "singleQuote2" ) ; rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p .. 
0x7e8de8b0d446    c3                      ret                                                    
 ..  rtn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return r .. 
0x7e8de8b0d447    e96f000000              jmp 0x7e8de8b0d4bb            < C_Syntax.csMatchExWithReturn+845 >
 .. tn = x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn .. 
0x7e8de8b0d44c    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b0d456    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d460    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d463    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d467    4983c608                add r14, 0x8                                           
0x7e8de8b0d46b    498906                  mov [r14], rax                                         
 .. x ; }          case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d46e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0d478    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..    case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d47b    b809000000              mov eax, 0x9                                           
0x7e8de8b0d480    4983c608                add r14, 0x8                                           
0x7e8de8b0d484    498906                  mov [r14], rax                                         
 ..       case ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d487    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d491    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d494    48b85a2481e88d7e0000    mov rax, 0x7e8de881245a       < string : 'doubleQuote' >
0x7e8de8b0d49e    4983c608                add r14, 0x8                                           
0x7e8de8b0d4a2    498906                  mov [r14], rax                                         
 .. se ( "nine" ) { nl ; ps (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4a5    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0d4af    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4b2    498b4708                mov rax, [r15+0x8]                                     
 ..  (n) ; p (9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4b6    49894710                mov [r15+0x10], rax                                    
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4ba    c3                      ret                                                    
 .. 9) ; ps ( "doubleQuote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4bb    c3                      ret                                                    
0x7e8de8b0d4bc    48b87b75f7e88d7e0000    mov rax, 0x7e8de8f7757b                                
0x7e8de8b0d4c6    4983c608                add r14, 0x8                                           
0x7e8de8b0d4ca    498906                  mov [r14], rax                                         
0x7e8de8b0d4cd    49ba90ca2c3f345b0000    mov r10, 0x5b343f2cca90                                
0x7e8de8b0d4d7    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b0d4e1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. uote" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4e4    498b4708                mov rax, [r15+0x8]                                     
 .. " ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4e8    b967000000              mov ecx, 0x67                                          
 .. te" ) ; rtn = x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d4ed    482bc1                  sub rax, rcx                                           
0x7e8de8b0d4f0    4983c608                add r14, 0x8                                           
0x7e8de8b0d4f4    498906                  mov [r14], rax                                         
0x7e8de8b0d4f7    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0d501    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. x ; }      }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d504    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0d508    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0d50c    4d8b7e08                mov r15, [r14+0x8]                                     
 ..     }      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d510    498906                  mov [r14], rax                                         
 ..      p ( x - 103 ) ;     return rtn ; }  .. 
0x7e8de8b0d513    c3                      ret                                                    
Word_Disassemble : word - 'csMatchExWithReturn' :: codeSize = 934
Word : 0x00007e8de8f746c3 :: Compiled at : 0x00007e8de8b0d16e
 =============================
::> 'wdiss' was called at namespaces/test/control.csl 173.24 <::

 1 1008 1111
 7 1008 seven
 7 1008 seven
 3 1008 1111
 2 1008 2
 77 1008 77
 3 1008 3
 8 1008 eight
 8 1008 eight
 nine 9 singleQuote1 1008 1111
 nine 9 singleQuote1 1008 1111
 1008 1111
 1 2 2 2 
last line should show : 2 2 2
including namespaces/test/lisp.csl at namespaces/test/initTest.csl : 86.41 ...
 
starting lisp.csl
 7
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 above line should show :: 
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ) ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 ( 161 ( 162 ( 163 ) ) ) ( 17 ( 18 ) ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 777
 7
 f

 =============================
LispDefines.f <:> variablef <:> lambdaCalculus compiled word
SourceCode for LispDefines.f :> 
( define f ( lambda (a) ( + a 1 2 ) ) )
Source code file location of f : "namespaces/test/lisp.csl" : 31.38 :: we are now at : namespaces/test/lisp.csl : 33.6
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d640 -- code size = 47 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.f : definition = 0x00007e8de8b0d640 : disassembly at namespaces/test/lisp.csl : 33.6 :
0x7e8de8b0d640    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d644    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d648    4981c608000000          add r14, 0x8                                           
 ..           ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x7e8de8b0d64f    498b47f8                mov rax, [r15-0x8]                                     
 ..         ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x7e8de8b0d653    b901000000              mov ecx, 0x1                                           
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x7e8de8b0d658    4803c1                  add rax, rcx                                           
 ..       ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x7e8de8b0d65b    b902000000              mov ecx, 0x2                                           
0x7e8de8b0d660    4803c1                  add rax, rcx                                           
0x7e8de8b0d663    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0d667    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0d66b    498906                  mov [r14], rax                                         
 ..             ( define f ( lambda (a) ( + a 1 2 ) ) ) .. 
0x7e8de8b0d66e    c3                      ret                                                    
Word_Disassemble : word - 'f' :: codeSize = 47
Word : 0x00007e8de8a12040 :: Compiled at : 0x00007e8de8b0d640
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 33.6 <::
 7
 f1
 7
 f2
 7
 7
 7
 f
 7
 7
 777
 7
 77
 77
 77
 77
 77
 77
 77
 x
 7
 f1
 7
 7
 7
 f4
 zs1 abc
 zs1
 f3
 13
 f4
 77
 zs1
 7
 7
 7
 0
 0
 1
 
 if :: should show 7 7 7 0 0 1 
 7
 7
 7
 7
 7
 11
 
 cond :: should show 7 7 7 7 7 11
 g
 h
 7
 7
 7
 7
 7
 7
 7
 h1
 7
 7
 7
 7
 7
 7
 7
 7
 7
 77
 77
 pd
 7
 
starting BigNum
 g
 h
 1.00000000000000000000000000000000
 -1.00000000000000000000000000000000
 -2.00000000000000000000000000000000
 0.33333333333333331482961625624739
 3.00000000000000000000000000000000
 7.00000000000000000000000000000000
 7.00000000000000000000000000000000
 
ending BigNum
 a
 b
 ( 3 4 1 2 )
 ( a b 1 2 )
 x
 x
 ( x x x x )
 ( x x x 3 4 1 2 )
 y
 y
 ( y y y y )
 ( y y y x x x 3 4 1 2 )
 
lisp test
 namespaces/test/lisp.csl 169.30 a
 b
 y
 x
 y
 ( x x x 1 2 3 4 5 6 7 8 9 y )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) )
 ( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 9 10 11 ) 12 13 14 ) 15 ( 16 ( 17 18 ) ) )
 7
 7
 x
 ( 1 2 3 x )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 ( 7 8 9 47 ) )
 ( 1 2 3 7 8 9 47 )
 77
 q1x
 q2
 7
 q3
 q4
 q5
 77
 above line should show 77
DataStack at : namespaces/test/lisp.csl : 202.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 7
 yfac
 3628800
 5040
 fibc

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :> 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 209.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d806 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc : definition = 0x00007e8de8b0d806 : disassembly at namespaces/test/lisp.csl : 209.21 :
0x7e8de8b0d806    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d80a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d80e    4981c608000000          add r14, 0x8                                           
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d815    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d81a    7d14                    jge 0xe8b0d830                < LispDefines.fibc+42 >
0x7e8de8b0d81c    0f1f4000                nop [rax]                                              
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d820    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d824    4983c608                add r14, 0x8                                           
0x7e8de8b0d828    498906                  mov [r14], rax                                         
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d82b    e945000000              jmp 0x7e8de8b0d875            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d830    498b47f8                mov rax, [r15-0x8]                                     
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d834    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b0d83d    83c608                  add esi, 0x8                                           
0x7e8de8b0d840    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d843    e8beffffff              call 0x7e8de8b0d806           < LispDefines.fibc : 0x00007e8de8b0d806 >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d848    498b47f8                mov rax, [r15-0x8]                                     
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d84c    b902000000              mov ecx, 0x2                                           
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d851    482bc1                  sub rax, rcx                                           
0x7e8de8b0d854    4983c608                add r14, 0x8                                           
0x7e8de8b0d858    498906                  mov [r14], rax                                         
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d85b    e8a6ffffff              call 0x7e8de8b0d806           < LispDefines.fibc : 0x00007e8de8b0d806 >
0x7e8de8b0d860    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0d863    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0d867    4983ee10                sub r14, 0x10                                          
0x7e8de8b0d86b    4803c1                  add rax, rcx                                           
0x7e8de8b0d86e    4983c608                add r14, 0x8                                           
0x7e8de8b0d872    498906                  mov [r14], rax                                         
0x7e8de8b0d875    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0d879    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0d87d    498906                  mov [r14], rax                                         
 ..           (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d880    c3                      ret                                                    
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x00007e8de8a61338 :: Compiled at : 0x00007e8de8b0d806
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 209.21 <::
 fibc1
 fibc2

 =============================
LispDefines.fibc1 <:> variablefibc1 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc1 :> 
(define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
Source code file location of fibc1 : "namespaces/test/lisp.csl" : 213.83 :: we are now at : namespaces/test/lisp.csl : 215.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d886 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc1 : definition = 0x00007e8de8b0d886 : disassembly at namespaces/test/lisp.csl : 215.22 :
0x7e8de8b0d886    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d88a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d88e    4981c608000000          add r14, 0x8                                           
   (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x7e8de8b0d895    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x7e8de8b0d89a    7d14                    jge 0xe8b0d8b0                < LispDefines.fibc1+42 >
0x7e8de8b0d89c    0f1f4000                nop [rax]                                              
 (define fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2)))))) .. 
0x7e8de8b0d8a0    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d8a4    4983c608                add r14, 0x8                                           
0x7e8de8b0d8a8    498906                  mov [r14], rax                                         
 .. e fibc1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8ab    e945000000              jmp 0x7e8de8b0d8f5            < LispDefines.fibc1+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8b0    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8b4    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b0d8bd    83c608                  add esi, 0x8                                           
0x7e8de8b0d8c0    498906                  mov [r14], rax                                         
 .. 1 (lambda ( n ) (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8c3    e8beffffff              call 0x7e8de8b0d886           < LispDefines.fibc1 : 0x00007e8de8b0d886 >
 .. < n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8c8    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8cc    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8d1    482bc1                  sub rax, rcx                                           
0x7e8de8b0d8d4    4983c608                add r14, 0x8                                           
0x7e8de8b0d8d8    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibc1 (- n 1)) (fibc1 (- n 2))))))
0x7e8de8b0d8db    e8a6ffffff              call 0x7e8de8b0d886           < LispDefines.fibc1 : 0x00007e8de8b0d886 >
0x7e8de8b0d8e0    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0d8e3    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0d8e7    4983ee10                sub r14, 0x10                                          
0x7e8de8b0d8eb    4803c1                  add rax, rcx                                           
0x7e8de8b0d8ee    4983c608                add r14, 0x8                                           
0x7e8de8b0d8f2    498906                  mov [r14], rax                                         
0x7e8de8b0d8f5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0d8f9    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0d8fd    498906                  mov [r14], rax                                         
0x7e8de8b0d900    c3                      ret                                                    
Word_Disassemble : word - 'fibc1' :: codeSize = 123
Word : 0x00007e8de8a693e0 :: Compiled at : 0x00007e8de8b0d886
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 215.22 <::

 =============================
LispDefines.fibc <:> variablefibc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc :> 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
Source code file location of fibc : "namespaces/test/lisp.csl" : 208.80 :: we are now at : namespaces/test/lisp.csl : 216.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d806 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc : definition = 0x00007e8de8b0d806 : disassembly at namespaces/test/lisp.csl : 216.21 :
0x7e8de8b0d806    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d80a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d80e    4981c608000000          add r14, 0x8                                           
 .. (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d815    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..   (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d81a    7d14                    jge 0xe8b0d830                < LispDefines.fibc+42 >
0x7e8de8b0d81c    0f1f4000                nop [rax]                                              
  (define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2)))))) .. 
0x7e8de8b0d820    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d824    4983c608                add r14, 0x8                                           
0x7e8de8b0d828    498906                  mov [r14], rax                                         
 .. ne fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d82b    e945000000              jmp 0x7e8de8b0d875            < LispDefines.fibc+111 >
 .. a ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d830    498b47f8                mov rax, [r15-0x8]                                     
 .. ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d834    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b0d83d    83c608                  add esi, 0x8                                           
0x7e8de8b0d840    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d843    e8beffffff              call 0x7e8de8b0d806           < LispDefines.fibc : 0x00007e8de8b0d806 >
 ..  (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d848    498b47f8                mov rax, [r15-0x8]                                     
 .. < n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d84c    b902000000              mov ecx, 0x2                                           
 .. se (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d851    482bc1                  sub rax, rcx                                           
0x7e8de8b0d854    4983c608                add r14, 0x8                                           
0x7e8de8b0d858    498906                  mov [r14], rax                                         
 ..  (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
0x7e8de8b0d85b    e8a6ffffff              call 0x7e8de8b0d806           < LispDefines.fibc : 0x00007e8de8b0d806 >
0x7e8de8b0d860    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0d863    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0d867    4983ee10                sub r14, 0x10                                          
0x7e8de8b0d86b    4803c1                  add rax, rcx                                           
0x7e8de8b0d86e    4983c608                add r14, 0x8                                           
0x7e8de8b0d872    498906                  mov [r14], rax                                         
0x7e8de8b0d875    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0d879    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0d87d    498906                  mov [r14], rax                                         
0x7e8de8b0d880    c3                      ret                                                    
Word_Disassemble : word - 'fibc' :: codeSize = 123
Word : 0x00007e8de8a61338 :: Compiled at : 0x00007e8de8b0d806
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 216.21 <::

 =============================
LispDefines.fibc2 <:> variablefibc2 <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibc2 :> 
(definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
Source code file location of fibc2 : "namespaces/test/lisp.csl" : 214.75 :: we are now at : namespaces/test/lisp.csl : 217.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d906 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibc2 : definition = 0x00007e8de8b0d906 : disassembly at namespaces/test/lisp.csl : 217.22 :
0x7e8de8b0d906    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d90a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d90e    4981c608000000          add r14, 0x8                                           
 ..       (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x7e8de8b0d915    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..         (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x7e8de8b0d91a    7d14                    jge 0xe8b0d930                < LispDefines.fibc2+42 >
0x7e8de8b0d91c    0f1f4000                nop [rax]                                              
 ..     (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x7e8de8b0d920    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0d924    4983c608                add r14, 0x8                                           
0x7e8de8b0d928    498906                  mov [r14], rax                                         
 ..  (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x7e8de8b0d92b    e945000000              jmp 0x7e8de8b0d975            < LispDefines.fibc2+111 >
 .. c2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d930    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d934    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b0d93d    83c608                  add esi, 0x8                                           
0x7e8de8b0d940    498906                  mov [r14], rax                                         
 .. nec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d943    e8beffffff              call 0x7e8de8b0d906           < LispDefines.fibc2 : 0x00007e8de8b0d906 >
 .. < n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d948    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d94c    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d951    482bc1                  sub rax, rcx                                           
0x7e8de8b0d954    4983c608                add r14, 0x8                                           
0x7e8de8b0d958    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2)))))
0x7e8de8b0d95b    e8a6ffffff              call 0x7e8de8b0d906           < LispDefines.fibc2 : 0x00007e8de8b0d906 >
0x7e8de8b0d960    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0d963    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0d967    4983ee10                sub r14, 0x10                                          
0x7e8de8b0d96b    4803c1                  add rax, rcx                                           
0x7e8de8b0d96e    4983c608                add r14, 0x8                                           
0x7e8de8b0d972    498906                  mov [r14], rax                                         
0x7e8de8b0d975    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0d979    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0d97d    498906                  mov [r14], rax                                         
 ..                 (definec ( fibc2 n ) (ifElse (< n 2) n (+ (fibc2 (- n 1)) (fibc2 (- n 2))))) .. 
0x7e8de8b0d980    c3                      ret                                                    
Word_Disassemble : word - 'fibc2' :: codeSize = 123
Word : 0x00007e8de8a716e0 :: Compiled at : 0x00007e8de8b0d906
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 217.22 <::
 
fibc1 20 =  6765
 
fibc 20 =  6765
 
fibc2 20 =  6765

 11 7
DataStack at : namespaces/test/lisp.csl : 227.80 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 7 11 11 7
 =============================
Root.hioo <:> csl compiled word
SourceCode for Root.hioo :> 
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hioo : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 229.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d995 -- code size = 30 bytes
 -----------------------------
Word :: Root.hioo : definition = 0x00007e8de8b0d995 : disassembly at namespaces/test/lisp.csl : 229.21 :
 ..                           ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x7e8de8b0d995    b807000000              mov eax, 0x7                                           
0x7e8de8b0d99a    4983c610                add r14, 0x10                                          
0x7e8de8b0d99e    498906                  mov [r14], rax                                         
 ..                     ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x7e8de8b0d9a1    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b0d9a5    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0d9af    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..                 ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x7e8de8b0d9b2    c3                      ret                                                    
Word_Disassemble : word - 'hioo' :: codeSize = 30
Word : 0x00007e8de8f999bb :: Compiled at : 0x00007e8de8b0d995
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 229.21 <::

 =============================
Root.hio <:> csl compiled word
SourceCode for Root.hio :> 
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; )
Source code file location of hio : "namespaces/test/lisp.csl" : 227.46 :: we are now at : namespaces/test/lisp.csl : 230.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0d9c7 -- code size = 30 bytes
 -----------------------------
Word :: Root.hio : definition = 0x00007e8de8b0d9c7 : disassembly at namespaces/test/lisp.csl : 230.20 :
 ..       ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x7e8de8b0d9c7    b80b000000              mov eax, 0xb                                           
0x7e8de8b0d9cc    4983c610                add r14, 0x10                                          
0x7e8de8b0d9d0    498906                  mov [r14], rax                                         
 .. ( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x7e8de8b0d9d3    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b0d9d7    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0d9e1    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; ) .. 
0x7e8de8b0d9e4    c3                      ret                                                    
Word_Disassemble : word - 'hio' :: codeSize = 30
Word : 0x00007e8de8f9a58b :: Compiled at : 0x00007e8de8b0d9c7
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 230.20 <::

 =============================
C.bexp43 <:> csl compiled word
SourceCode for C.bexp43 :> 
: bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
Source code file location of bexp43 : "namespaces/test/lisp.csl" : 233.2 :: we are now at : namespaces/test/lisp.csl : 234.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0d9ea -- code size = 107 bytes
TypeSignature : 
 -----------------------------
Word :: C.bexp43 : definition = 0x00007e8de8b0d9ea : disassembly at namespaces/test/lisp.csl : 234.19 :
0x7e8de8b0d9ea    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0d9ee    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0d9f2    4981c608000000          add r14, 0x8                                           
 ..                      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x7e8de8b0d9f9    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..              : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x7e8de8b0d9fe    7e3d                    jle 0xe8b0da3d                < C.bexp43+83 >
0x7e8de8b0da00    0f1f4000                nop [rax]                                              
 ..          : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x7e8de8b0da04    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0da08    4983c608                add r14, 0x8                                           
0x7e8de8b0da0c    498906                  mov [r14], rax                                         
 ..      : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x7e8de8b0da0f    498b47f8                mov rax, [r15-0x8]                                     
 ..  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x7e8de8b0da13    48ffc8                  dec rax                                                
0x7e8de8b0da16    4983c608                add r14, 0x8                                           
0x7e8de8b0da1a    498906                  mov [r14], rax                                         
  : bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;  .. 
0x7e8de8b0da1d    e8c8ffffff              call 0x7e8de8b0d9ea           < C.bexp43 : 0x00007e8de8b0d9ea >
0x7e8de8b0da22    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0da25    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0da29    4983ee10                sub r14, 0x10                                          
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x7e8de8b0da2d    480fafc1                imul rax, rcx                                          
0x7e8de8b0da31    4983c608                add r14, 0x8                                           
0x7e8de8b0da35    498906                  mov [r14], rax                                         
 .. n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x7e8de8b0da38    e90c000000              jmp 0x7e8de8b0da49            < C.bexp43+95 >
 .. { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x7e8de8b0da3d    b801000000              mov eax, 0x1                                           
0x7e8de8b0da42    4983c608                add r14, 0x8                                           
0x7e8de8b0da46    498906                  mov [r14], rax                                         
0x7e8de8b0da49    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0da4d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0da51    498906                  mov [r14], rax                                         
 ..  { n @ n @ -- bexp43 * } { 1 } ifElse ; 
0x7e8de8b0da54    c3                      ret                                                    
Word_Disassemble : word - 'bexp43' :: codeSize = 107
Word : 0x00007e8de8f9b15b :: Compiled at : 0x00007e8de8b0d9ea
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 234.19 <::
 C : bexp43_assert  : ok

 5040

 =============================
C.bexp44 <:> csl compiled word
SourceCode for C.bexp44 :> 
( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
Source code file location of bexp44 : "namespaces/test/lisp.csl" : 239.73 :: we are now at : namespaces/test/lisp.csl : 240.23
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0da5a -- code size = 107 bytes
TypeSignature : 
 -----------------------------
Word :: C.bexp44 : definition = 0x00007e8de8b0da5a : disassembly at namespaces/test/lisp.csl : 240.23 :
0x7e8de8b0da5a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0da5e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0da62    4981c608000000          add r14, 0x8                                           
 ..               ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x7e8de8b0da69    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..       ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x7e8de8b0da6e    7e3d                    jle 0xe8b0daad                < C.bexp44+83 >
0x7e8de8b0da70    0f1f4000                nop [rax]                                              
 ..   ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x7e8de8b0da74    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b0da78    4983c608                add r14, 0x8                                           
0x7e8de8b0da7c    498906                  mov [r14], rax                                         
  ( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; ) .. 
0x7e8de8b0da7f    498b47f8                mov rax, [r15-0x8]                                     
 ..  : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x7e8de8b0da83    48ffc8                  dec rax                                                
0x7e8de8b0da86    4983c608                add r14, 0x8                                           
0x7e8de8b0da8a    498906                  mov [r14], rax                                         
 .. bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x7e8de8b0da8d    e8c8ffffff              call 0x7e8de8b0da5a           < C.bexp44 : 0x00007e8de8b0da5a >
0x7e8de8b0da92    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0da95    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0da99    4983ee10                sub r14, 0x10                                          
 .. ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x7e8de8b0da9d    480fafc1                imul rax, rcx                                          
0x7e8de8b0daa1    4983c608                add r14, 0x8                                           
0x7e8de8b0daa5    498906                  mov [r14], rax                                         
 .. n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x7e8de8b0daa8    e90c000000              jmp 0x7e8de8b0dab9            < C.bexp44+95 >
 .. { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x7e8de8b0daad    b801000000              mov eax, 0x1                                           
0x7e8de8b0dab2    4983c608                add r14, 0x8                                           
0x7e8de8b0dab6    498906                  mov [r14], rax                                         
0x7e8de8b0dab9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0dabd    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0dac1    498906                  mov [r14], rax                                         
 .. @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
0x7e8de8b0dac4    c3                      ret                                                    
Word_Disassemble : word - 'bexp44' :: codeSize = 107
Word : 0x00007e8de8f9d6eb :: Compiled at : 0x00007e8de8b0da5a
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 240.23 <::
 C : bexp43_assert  : ok

 5040 goedel3 ::  
 goedel3 ::  139147956278038 2 goedel3_assert1  : ok

 100279956995104 7 goedel3_assert2  : ok

 goedel3_assert4  : ok

 139147956189287 7 goedel3_assert5  : ok

 9 
goedel3 output should read (after ignoring _asserts) : 
'junk' 2 'junk' 7 'junk' 7 9
 =============================
Root.goedel6 <:> csl compiled word
SourceCode for Root.goedel6 :> 
( :: : goedel6 (| n ) "\n goedel6 :: " ps n 9 = { (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix n @ 6 + 8 "goedel6_3_assert" assert } ix { (| n ) n @ p n 3 = n dup @ 4 + = n @ dup p 7 "goedel6_4_assert" assert } ix n @ dup p return tos ; ".I" typeSignature ' goedel6 find wdiss 9 goedel6 "goedel6_0_assert" assert "\ngoedel6 output should read (after ignoring _asserts) : \n 'junk' 2 'junk' 7 'junk' 7 9" ps )
Source code file location of goedel6 : "namespaces/test/lisp.csl" : 290.0 :: we are now at : namespaces/test/lisp.csl : 290.1
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0dcd4 -- code size = 517 bytes
TypeSignature : -> Integer 
 -----------------------------
Word :: Root.goedel6 : definition = 0x00007e8de8b0dcd4 : disassembly at namespaces/test/lisp.csl : 290.1 :
0x7e8de8b0dcd4    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0dcd8    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0dcdc    4981c628000000          add r14, 0x28                                          
 ..   ( ::      : goedel6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1 .. 
0x7e8de8b0dce3    48b8335e81e88d7e0000    mov rax, 0x7e8de8815e33                                
0x7e8de8b0dced    4983c608                add r14, 0x8                                           
0x7e8de8b0dcf1    498906                  mov [r14], rax                                         
 .. del6 (| n )          "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert   .. 
0x7e8de8b0dcf4    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0dcfe    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..      "\n goedel6 :: " ps          n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n .. 
0x7e8de8b0dd01    49c7470809000000        mov qword [r15+0x8], 0x9                               
 ..   n 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 " .. 
0x7e8de8b0dd09    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0dd0d    4983c608                add r14, 0x8                                           
0x7e8de8b0dd11    498906                  mov [r14], rax                                         
 .. 9 =         {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x7e8de8b0dd14    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0dd1e    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..       {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_ .. 
0x7e8de8b0dd21    49c7471002000000        mov qword [r15+0x10], 0x2                              
 ..     {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_as .. 
0x7e8de8b0dd29    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0dd2d    4983c610                add r14, 0x10                                          
0x7e8de8b0dd31    498906                  mov [r14], rax                                         
 .. {              (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert .. 
0x7e8de8b0dd34    498946f8                mov [r14-0x8], rax                                     
 ..            (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" as .. 
0x7e8de8b0dd38    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0dd42    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..          (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" asse .. 
0x7e8de8b0dd45    b802000000              mov eax, 0x2                                           
0x7e8de8b0dd4a    4983c608                add r14, 0x8                                           
0x7e8de8b0dd4e    498906                  mov [r14], rax                                         
 ..        (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert .. 
0x7e8de8b0dd51    48b8625e81e88d7e0000    mov rax, 0x7e8de8815e62       < string : 'goedel6_1_assert' >
0x7e8de8b0dd5b    4983c608                add r14, 0x8                                           
0x7e8de8b0dd5f    498906                  mov [r14], rax                                         
0x7e8de8b0dd62    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0dd6c    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. _1_assert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert"  .. 
0x7e8de8b0dd6f    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b0dd73    4983c608                add r14, 0x8                                           
0x7e8de8b0dd77    498906                  mov [r14], rax                                         
 .. ssert" assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" asse .. 
0x7e8de8b0dd7a    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0dd84    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  assert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert     .. 
0x7e8de8b0dd87    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. ssert            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert       .. 
0x7e8de8b0dd8f    498b4718                mov rax, [r15+0x18]                                    
 .. t            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert           .. 
0x7e8de8b0dd93    b904000000              mov ecx, 0x4                                           
0x7e8de8b0dd98    4803c1                  add rax, rcx                                           
0x7e8de8b0dd9b    4983c610                add r14, 0x10                                          
0x7e8de8b0dd9f    498906                  mov [r14], rax                                         
 ..          { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix .. 
0x7e8de8b0dda2    498946f8                mov [r14-0x8], rax                                     
 ..      { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix     .. 
0x7e8de8b0dda6    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0ddb0    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..    { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix       .. 
0x7e8de8b0ddb3    b807000000              mov eax, 0x7                                           
0x7e8de8b0ddb8    4983c608                add r14, 0x8                                           
0x7e8de8b0ddbc    498906                  mov [r14], rax                                         
 ..  { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         .. 
0x7e8de8b0ddbf    48b8975e81e88d7e0000    mov rax, 0x7e8de8815e97       < string : 'goedel6_2_assert' >
0x7e8de8b0ddc9    4983c608                add r14, 0x8                                           
0x7e8de8b0ddcd    498906                  mov [r14], rax                                         
0x7e8de8b0ddd0    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0ddda    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0dddd    498b4710                mov rax, [r15+0x10]                                    
 .. _2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3  .. 
0x7e8de8b0dde1    b906000000              mov ecx, 0x6                                           
 .. _assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =  .. 
0x7e8de8b0dde6    4803c1                  add rax, rcx                                           
0x7e8de8b0dde9    4983c608                add r14, 0x8                                           
0x7e8de8b0dded    498906                  mov [r14], rax                                         
 .. ssert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =    .. 
0x7e8de8b0ddf0    b808000000              mov eax, 0x8                                           
0x7e8de8b0ddf5    4983c608                add r14, 0x8                                           
0x7e8de8b0ddf9    498906                  mov [r14], rax                                         
 .. ert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ p              n 3 =      .. 
0x7e8de8b0ddfc    48b8bf5e81e88d7e0000    mov rax, 0x7e8de8815ebf       < string : 'goedel6_3_assert' >
0x7e8de8b0de06    4983c608                add r14, 0x8                                           
0x7e8de8b0de0a    498906                  mov [r14], rax                                         
0x7e8de8b0de0d    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0de17    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0de1a    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0de1e    4983c608                add r14, 0x8                                           
0x7e8de8b0de22    498906                  mov [r14], rax                                         
 ..  ix         { (| n )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert  .. 
0x7e8de8b0de25    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0de2f    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. )              n @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix       .. 
0x7e8de8b0de32    49c7472003000000        mov qword [r15+0x20], 0x3                              
0x7e8de8b0de3a    498d4720                lea rax, [r15+0x20]                                    
0x7e8de8b0de3e    4983c610                add r14, 0x10                                          
0x7e8de8b0de42    498906                  mov [r14], rax                                         
 .. @ p              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p       .. 
0x7e8de8b0de45    498946f8                mov [r14-0x8], rax                                     
 ..              n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         r .. 
0x7e8de8b0de49    498b06                  mov rax, [r14]                                         
0x7e8de8b0de4c    488b00                  mov rax, [rax]                                         
0x7e8de8b0de4f    498906                  mov [r14], rax                                         
 ..          n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         retur .. 
0x7e8de8b0de52    49830604                add qword [r14], 0x4                                   
 .. 4 + dup p 7 "goedel6_2_assert" assert } ix            n @ 6 + 8 "goedel6_3_assert" assert          } ix         { (| n )              n @ .. 
0x7e8de8b0de56    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0de59    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0de5d    4983ee10                sub r14, 0x10                                          
 ..        n 3 =              n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return  .. 
0x7e8de8b0de61    488908                  mov [rax], rcx                                         
0x7e8de8b0de64    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0de68    4983c610                add r14, 0x10                                          
0x7e8de8b0de6c    498906                  mov [r14], rax                                         
 ..        n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" type .. 
0x7e8de8b0de6f    498946f8                mov [r14-0x8], rax                                     
 ..    n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSign .. 
0x7e8de8b0de73    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0de7d    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  n dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignat .. 
0x7e8de8b0de80    b807000000              mov eax, 0x7                                           
0x7e8de8b0de85    4983c608                add r14, 0x8                                           
0x7e8de8b0de89    498906                  mov [r14], rax                                         
 ..  dup @ 4 + =              n @ dup p 7 "goedel6_4_assert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignatur .. 
0x7e8de8b0de8c    48b8f45e81e88d7e0000    mov rax, 0x7e8de8815ef4       < string : 'goedel6_4_assert' >
0x7e8de8b0de96    4983c608                add r14, 0x8                                           
0x7e8de8b0de9a    498906                  mov [r14], rax                                         
0x7e8de8b0de9d    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0dea7    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0deaa    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0deae    4983c610                add r14, 0x10                                          
0x7e8de8b0deb2    498906                  mov [r14], rax                                         
 .. sert" assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_ .. 
0x7e8de8b0deb5    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b0deb9    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0dec3    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0dec6    498b06                  mov rax, [r14]                                         
0x7e8de8b0dec9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0decd    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0ded1    4983c608                add r14, 0x8                                           
0x7e8de8b0ded5    498906                  mov [r14], rax                                         
 .. " assert          } ix        n @ dup p         return tos     ; ".I" typeSignature     ' goedel6 find wdiss    9 goedel6 "goedel6_0_asse .. 
0x7e8de8b0ded8    c3                      ret                                                    
Word_Disassemble : word - 'goedel6' :: codeSize = 517
Word : 0x00007e8de8fa8dab :: Compiled at : 0x00007e8de8b0dcd4
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 290.1 <::
 
 goedel6 ::  139147964222891 2 goedel6_1_assert  : ok

 139147940530912 7 goedel6_2_assert  : ok

 goedel6_3_assert  : ok

 139147956187382 7 goedel6_4_assert  : ok

 9 goedel6_0_assert  : ok

 
goedel6 output should read (after ignoring _asserts) : 
 'junk' 2 'junk' 7 'junk' 7 9
 
goedel8 output :  0 2 goedel8_1_assert  : ok

 0 7 goedel8_3_assert  : ok

 goedel8_4_assert  : ok

 0 10 goedel8_5_assert  : ok

 9 goedel8_6_assert  : ok

 
goedel8 output should read : 
'junk' 2 'junk' 7 'junk' 10 9

 =============================
Root.goedel8 <:> csl compiled word
SourceCode for Root.goedel8 :> 
( :: "\ngoedel8 output : " ps : goedel8 (| n -t "V.I" ) n 1 = { 'n var n @ p n 2 = n @ dup p 2 "goedel8_1_assert" assert { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix n @ 6 + 8 "goedel8_4_assert" assert } ix { 'n var n @ p n 3 = n dup @ 7 + = n @ dup p 10 "goedel8_5_assert" assert } ix n @ 8 + dup p return tos ; goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read : \n'junk' 2 'junk' 7 'junk' 10 9" ps)
Source code file location of goedel8 : "namespaces/test/lisp.csl" : 313.0 :: we are now at : namespaces/test/lisp.csl : 314.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b0dede -- code size = 594 bytes
TypeSignature : 
 -----------------------------
Word :: Root.goedel8 : definition = 0x00007e8de8b0dede : disassembly at namespaces/test/lisp.csl : 314.24 :
0x7e8de8b0dede    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0dee2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0dee6    4981c628000000          add r14, 0x28                                          
 .. goedel8 (| n -t "V.I"  )          n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert      .. 
0x7e8de8b0deed    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   n 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @  .. 
0x7e8de8b0def5    48b8fb21fbe88d7e0000    mov rax, 0x7e8de8fb21fb                                
0x7e8de8b0deff    488b00                  mov rax, [rax]                                         
0x7e8de8b0df02    4983c608                add r14, 0x8                                           
0x7e8de8b0df06    498906                  mov [r14], rax                                         
 .. 1 =         {              'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n  .. 
0x7e8de8b0df09    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0df13    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0df16    48b8fb21fbe88d7e0000    mov rax, 0x7e8de8fb21fb                                
0x7e8de8b0df20    b902000000              mov ecx, 0x2                                           
 ..         'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 .. 
0x7e8de8b0df25    488908                  mov [rax], rcx                                         
 ..       'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 " .. 
0x7e8de8b0df28    48b8fb21fbe88d7e0000    mov rax, 0x7e8de8fb21fb                                
0x7e8de8b0df32    488b00                  mov rax, [rax]                                         
0x7e8de8b0df35    4983c610                add r14, 0x10                                          
0x7e8de8b0df39    498906                  mov [r14], rax                                         
 ..   'n var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goed .. 
0x7e8de8b0df3c    498946f8                mov [r14-0x8], rax                                     
 ..  var n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_ .. 
0x7e8de8b0df40    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0df4a    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 .. ar n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_ .. 
0x7e8de8b0df4d    b802000000              mov eax, 0x2                                           
0x7e8de8b0df52    4983c608                add r14, 0x8                                           
0x7e8de8b0df56    498906                  mov [r14], rax                                         
 ..  n @ p              n 2 = n @ dup p 2 "goedel8_1_assert" assert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_as .. 
0x7e8de8b0df59    48b8a66681e88d7e0000    mov rax, 0x7e8de88166a6       < string : 'goedel8_1_assert' >
0x7e8de8b0df63    4983c608                add r14, 0x8                                           
0x7e8de8b0df67    498906                  mov [r14], rax                                         
0x7e8de8b0df6a    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0df74    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. ssert                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert"  .. 
0x7e8de8b0df77    48b86b3dfbe88d7e0000    mov rax, 0x7e8de8fb3d6b                                
0x7e8de8b0df81    488b00                  mov rax, [rax]                                         
0x7e8de8b0df84    4983c608                add r14, 0x8                                           
0x7e8de8b0df88    498906                  mov [r14], rax                                         
 .. t                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" asse .. 
0x7e8de8b0df8b    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0df95    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..                        { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert .. 
0x7e8de8b0df98    48b86b3dfbe88d7e0000    mov rax, 0x7e8de8fb3d6b                                
0x7e8de8b0dfa2    b903000000              mov ecx, 0x3                                           
 ..                    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert     .. 
0x7e8de8b0dfa7    488908                  mov [rax], rcx                                         
 ..                  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert       .. 
0x7e8de8b0dfaa    48b86b3dfbe88d7e0000    mov rax, 0x7e8de8fb3d6b                                
0x7e8de8b0dfb4    488b00                  mov rax, [rax]                                         
 ..              { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert           .. 
0x7e8de8b0dfb7    b904000000              mov ecx, 0x4                                           
0x7e8de8b0dfbc    4803c1                  add rax, rcx                                           
0x7e8de8b0dfbf    4983c610                add r14, 0x10                                          
0x7e8de8b0dfc3    498906                  mov [r14], rax                                         
 ..          { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix .. 
0x7e8de8b0dfc6    498946f8                mov [r14-0x8], rax                                     
 ..      { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix     .. 
0x7e8de8b0dfca    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0dfd4    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..    { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix       .. 
0x7e8de8b0dfd7    b807000000              mov eax, 0x7                                           
0x7e8de8b0dfdc    4983c608                add r14, 0x8                                           
0x7e8de8b0dfe0    498906                  mov [r14], rax                                         
 ..  { 'n var n @ p n 3 = n @ 4 + dup p 7 "goedel8_3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         .. 
0x7e8de8b0dfe3    48b8dd6681e88d7e0000    mov rax, 0x7e8de88166dd       < string : 'goedel8_3_assert' >
0x7e8de8b0dfed    4983c608                add r14, 0x8                                           
0x7e8de8b0dff1    498906                  mov [r14], rax                                         
0x7e8de8b0dff4    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0dffe    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0e001    48b8fb21fbe88d7e0000    mov rax, 0x7e8de8fb21fb                                
0x7e8de8b0e00b    488b00                  mov rax, [rax]                                         
 .. _3_assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3  .. 
0x7e8de8b0e00e    b906000000              mov ecx, 0x6                                           
 .. _assert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =  .. 
0x7e8de8b0e013    4803c1                  add rax, rcx                                           
0x7e8de8b0e016    4983c608                add r14, 0x8                                           
0x7e8de8b0e01a    498906                  mov [r14], rax                                         
 .. ssert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =    .. 
0x7e8de8b0e01d    b808000000              mov eax, 0x8                                           
0x7e8de8b0e022    4983c608                add r14, 0x8                                           
0x7e8de8b0e026    498906                  mov [r14], rax                                         
 .. ert" assert } ix            n @ 6 + 8 "goedel8_4_assert" assert          } ix         {              'n var n @ p              n 3 =      .. 
0x7e8de8b0e029    48b8056781e88d7e0000    mov rax, 0x7e8de8816705       < string : 'goedel8_4_assert' >
0x7e8de8b0e033    4983c608                add r14, 0x8                                           
0x7e8de8b0e037    498906                  mov [r14], rax                                         
0x7e8de8b0e03a    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0e044    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..    } ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" as .. 
0x7e8de8b0e047    48b8cb6efbe88d7e0000    mov rax, 0x7e8de8fb6ecb                                
0x7e8de8b0e051    488b00                  mov rax, [rax]                                         
0x7e8de8b0e054    4983c608                add r14, 0x8                                           
0x7e8de8b0e058    498906                  mov [r14], rax                                         
 ..  ix         {              'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert .. 
0x7e8de8b0e05b    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0e065    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0e068    48b8cb6efbe88d7e0000    mov rax, 0x7e8de8fb6ecb                                
0x7e8de8b0e072    b903000000              mov ecx, 0x3                                           
 ..         'n var n @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix      .. 
0x7e8de8b0e077    488908                  mov [rax], rcx                                         
0x7e8de8b0e07a    48b8cb6efbe88d7e0000    mov rax, 0x7e8de8fb6ecb                                
0x7e8de8b0e084    4983c610                add r14, 0x10                                          
0x7e8de8b0e088    498906                  mov [r14], rax                                         
 .. @ p              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p  .. 
0x7e8de8b0e08b    498946f8                mov [r14-0x8], rax                                     
 ..              n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p      .. 
0x7e8de8b0e08f    498b06                  mov rax, [r14]                                         
0x7e8de8b0e092    488b00                  mov rax, [rax]                                         
0x7e8de8b0e095    498906                  mov [r14], rax                                         
 ..          n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p          .. 
0x7e8de8b0e098    49830607                add qword [r14], 0x7                                   
0x7e8de8b0e09c    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e09f    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e0a3    4983ee10                sub r14, 0x10                                          
 ..        n 3 =              n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         re .. 
0x7e8de8b0e0a7    488908                  mov [rax], rcx                                         
0x7e8de8b0e0aa    48b8cb6efbe88d7e0000    mov rax, 0x7e8de8fb6ecb                                
0x7e8de8b0e0b4    488b00                  mov rax, [rax]                                         
0x7e8de8b0e0b7    4983c610                add r14, 0x10                                          
0x7e8de8b0e0bb    498906                  mov [r14], rax                                         
 ..        n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     .. 
0x7e8de8b0e0be    498946f8                mov [r14-0x8], rax                                     
 ..    n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goe .. 
0x7e8de8b0e0c2    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0e0cc    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
 ..  n dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goede .. 
0x7e8de8b0e0cf    b80a000000              mov eax, 0xa                                           
0x7e8de8b0e0d4    4983c608                add r14, 0x8                                           
0x7e8de8b0e0d8    498906                  mov [r14], rax                                         
 .. dup @ 7 + =              n @ dup p 10 "goedel8_5_assert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8  .. 
0x7e8de8b0e0db    48b83d6781e88d7e0000    mov rax, 0x7e8de881673d       < string : 'goedel8_5_assert' >
0x7e8de8b0e0e5    4983c608                add r14, 0x8                                           
0x7e8de8b0e0e9    498906                  mov [r14], rax                                         
0x7e8de8b0e0ec    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b0e0f6    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
0x7e8de8b0e0f9    498b4708                mov rax, [r15+0x8]                                     
 .. sert" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output shou .. 
0x7e8de8b0e0fd    b908000000              mov ecx, 0x8                                           
 .. rt" assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should .. 
0x7e8de8b0e102    4803c1                  add rax, rcx                                           
0x7e8de8b0e105    4983c610                add r14, 0x10                                          
0x7e8de8b0e109    498906                  mov [r14], rax                                         
 .. " assert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should r .. 
0x7e8de8b0e10c    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b0e110    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b0e11a    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b0e11d    498b06                  mov rax, [r14]                                         
0x7e8de8b0e120    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e124    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e128    4983c608                add r14, 0x8                                           
0x7e8de8b0e12c    498906                  mov [r14], rax                                         
 .. sert          } ix        n @ 8 + dup p         return tos      ;     goedel8 9 "goedel8_6_assert" assert1 "\ngoedel8 output should read  .. 
0x7e8de8b0e12f    c3                      ret                                                    
Word_Disassemble : word - 'goedel8' :: codeSize = 594
Word : 0x00007e8de8fb115b :: Compiled at : 0x00007e8de8b0dede
 =============================
::> 'wdiss' was called at namespaces/test/lisp.csl 314.24 <::
 ( ( 1 2 ) )
 ( 1 2 )
 x
 a
 x1
 a1
 ( Its a beautiful day don't let it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x1 it get away )
 ( Its a beautiful day don't let it get away )
 ( Its a beautiful day don't x it get away )
 testing unquote above line should show : ( Its a beautiful day don't x it get away )
 ( Its a beautiful day don't x1 it get away )
 testing unquote above line should show : ( Its a beautiful day don't x1 it get away )
 ( Its "the" beautiful day don't "let" it get away )
 ( Its a beautiful day don't let it get away )
 
ending lisp.csl
total 44
drwxr-xr-x 11 root root 4096 Oct  3  2023 .
drwxr-xr-x 14 root root 4096 Aug  3 00:44 ..
drwxr-xr-x  2 root root 4096 Aug  3 02:37 bin
drwxr-xr-x  2 root root 4096 Oct  5  2023 etc
drwxr-xr-x  2 root root 4096 Sep 18  2023 games
drwxr-xr-x  3 root root 4096 Oct  5  2023 include
drwxr-xr-x  3 root root 4096 Aug  3 02:37 lib
drwxr-xr-x  2 root root 4096 Sep 18  2023 man
drwxr-xr-x  2 root root 4096 Sep 18  2023 sbin
drwxr-xr-x  3 root root 4096 Apr  7 16:24 share
drwxr-xr-x  2 root root 4096 Sep 18  2023 src

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.176
 7 7 7
version 0.940.176
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x42244400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x00007e2f42244400 : disassembly at etc/script : 35.8 :
0x7e2f42244400    4d897e08                mov [r14+0x8], r15                                     
0x7e2f42244404    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e2f42244408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7e2f4224440f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7e2f42244417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f4224441c    7e1f                    jle 0x4224443d                < Int.fac+61 >
0x7e2f4224441e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f42244422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f42244426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f4224442a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f4224442e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f42244432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f42244436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e2f4224443b    7fe5                    jg 0x42244422                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7e2f4224443d    498b4708                mov rax, [r15+0x8]                                     
0x7e2f42244441    e900000000              jmp 0x7e2f42244446            < Int.fac+70 >
0x7e2f42244446    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e2f4224444a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x7e2f4224444e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x7e2f42244451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x00007e2f41ebd437 :: Compiled at : 0x00007e2f42244400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.177
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21166 : Unused =   1027410 : Allocations =    1 : Largest =  1027410 : Smallest =  1027410 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    753727 : Unused =   3440577 : Allocations =    1 : Largest =  3440577 : Smallest =  3440577 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1895753 : Unused =  23289671
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    848016 : 1963  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x76f0237f -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x00007ecf76f0237f : disassembly at etc/lispScript : 28.17 :
0x7ecf76f0237f    4d897e08                mov [r14+0x8], r15                                     
0x7ecf76f02383    4d8d7e08                lea r15, [r14+0x8]                                     
0x7ecf76f02387    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7ecf76f0238e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x7ecf76f02396    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f0239b    7e1f                    jle 0x76f023bc                < Int.fac+61 >
0x7ecf76f0239d    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023a1    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023a5    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023a9    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023ad    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023b1    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023b5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7ecf76f023ba    7fe5                    jg 0x76f023a1                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023bc    498b4708                mov rax, [r15+0x8]                                     
0x7ecf76f023c0    e900000000              jmp 0x7ecf76f023c5            < Int.fac+70 >
0x7ecf76f023c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7ecf76f023c9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x7ecf76f023cd    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x7ecf76f023d0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x00007ecf770bc1a7 :: Compiled at : 0x00007ecf76f0237f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye
 3
total 168
drwxr-xr-x  8 dennisj dennisj  4096 Aug  3 02:45 .
drwx------ 46 dennisj dennisj 12288 Aug  3 02:45 ..
drwxr-xr-x  2 dennisj dennisj  4096 Aug  3 02:37 bin
drwxr-xr-x  2 dennisj dennisj  4096 Aug  3 02:43 etc
drwxr-xr-x  8 dennisj dennisj  4096 Aug  3 02:43 .git
-rw-r--r--  1 dennisj dennisj 21898 Aug  2 22:28 init.csl
-rw-r--r--  1 dennisj dennisj  1067 Jul 30 19:27 LICENSE
-rw-r--r--  1 dennisj dennisj 20368 Jul 30 19:27 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj   220 Jul 30 19:27 m
-rwxr-xr-x  1 dennisj dennisj   664 Jul 30 19:27 m0
-rwxr-xr-x  1 dennisj dennisj   224 Jul 30 19:27 ma
-rw-r--r--  1 dennisj dennisj  9051 Aug  3 02:20 Makefile
-rwxr-xr-x  1 dennisj dennisj   613 Jul 30 19:27 mir
-rwxr-xr-x  1 dennisj dennisj   504 Jul 30 19:27 mira
-rwxr-xr-x  1 dennisj dennisj   549 Jul 30 19:27 mirAll
-rwxr-xr-x  1 dennisj dennisj   518 Jul 30 19:27 mirs
drwxr-xr-x  4 dennisj dennisj  4096 Aug  1 17:33 namespaces
drwxr-xr-x  3 dennisj dennisj  4096 Aug  1 18:59 nbproject
-rw-r--r--  1 dennisj dennisj     5 Aug  3 02:43 node.txt
-rwxr-xr-x  1 dennisj dennisj   124 Jul 30 19:27 r
-rw-r--r--  1 dennisj dennisj 14382 Jul 30 19:27 README.md
-rw-r--r--  1 dennisj dennisj 14382 Jul 30 19:27 README.txt
drwxr-xr-x  5 dennisj dennisj  4096 Aug  3 02:06 src

3
 namespaces/test/lisp.csl 351.9
including namespaces/compiler/syntax.csl at namespaces/test/initTest.csl : 86.41 ...

 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :> 
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
Source code file location of yada : "namespaces/compiler/syntax.csl" : 7.10 :: we are now at : namespaces/compiler/syntax.csl : 7.83
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e1d2 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yada : definition = 0x00007e8de8b0e1d2 : disassembly at namespaces/compiler/syntax.csl : 7.83 :
0x7e8de8b0e1d2    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e1d6    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e1da    4981c620000000          add r14, 0x20                                          
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x7e8de8b0e1e1    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x7e8de8b0e1e9    49c747100c000000        mov qword [r15+0x10], 0xc                              
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e1f1    498b4708                mov rax, [r15+0x8]                                     
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e1f5    498b4f10                mov rcx, [r15+0x10]                                    
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e1f9    4803c1                  add rax, rcx                                           
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e1fc    b902000000              mov ecx, 0x2                                           
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e201    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e208    48f7f9                  idiv rcx                                               
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x7e8de8b0e20b    49894718                mov [r15+0x18], rax                                    
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e20f    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b0e213    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e217    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e21b    4983c608                add r14, 0x8                                           
 .. 12, x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e21f    498906                  mov [r14], rax                                         
 .. x ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e222    c3                      ret                                                    
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x00007e8de8fbba9b :: Compiled at : 0x00007e8de8b0e1d2
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 7.83 <::

DataStack at : namespaces/compiler/syntax.csl : 7.97 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/syntax.csl : 7.107 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :> 
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
Source code file location of yadaYada : "namespaces/compiler/syntax.csl" : 8.14 :: we are now at : namespaces/compiler/syntax.csl : 8.98
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e228 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x00007e8de8b0e228 : disassembly at namespaces/compiler/syntax.csl : 8.98 :
0x7e8de8b0e228    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e22c    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e230    4981c620000000          add r14, 0x20                                          
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x7e8de8b0e237    49c7470802000000        mov qword [r15+0x8], 0x2                               
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; }  .. 
0x7e8de8b0e23f    49c747100c000000        mov qword [r15+0x10], 0xc                              
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e247    498b4708                mov rax, [r15+0x8]                                     
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e24b    498b4f10                mov rcx, [r15+0x10]                                    
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e24f    4803c1                  add rax, rcx                                           
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e252    b902000000              mov ecx, 0x2                                           
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e257    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e25e    48f7f9                  idiv rcx                                               
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e261    49894718                mov [r15+0x18], rax                                    
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e265    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b0e269    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e26d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e271    4983c608                add r14, 0x8                                           
 ..  = 12 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e275    498906                  mov [r14], rax                                         
 .. 2 ; x = (( a + b ) / 2 ) ; return x ; } 
0x7e8de8b0e278    c3                      ret                                                    
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x00007e8de8fbe53b :: Compiled at : 0x00007e8de8b0e228
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 8.98 <::

DataStack at : namespaces/compiler/syntax.csl : 8.124 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Root.hi <:> csl compiled word
SourceCode for Root.hi :> 
: hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x 
Source code file location of hi : "namespaces/compiler/syntax.csl" : 14.2 :: we are now at : namespaces/compiler/syntax.csl : 15.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e2b7 -- code size = 101 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi : definition = 0x00007e8de8b0e2b7 : disassembly at namespaces/compiler/syntax.csl : 15.16 :
0x7e8de8b0e2b7    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e2bb    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e2bf    4981c610000000          add r14, 0x10                                          
 ..                    : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2c6    b802000000              mov eax, 0x2                                           
0x7e8de8b0e2cb    4983c608                add r14, 0x8                                           
0x7e8de8b0e2cf    498906                  mov [r14], rax                                         
 ..              : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2d2    b80c0000004983c608      mov rax, 0x8c683490000000c                              
0x7e8de8b0e2db    498906                  mov [r14], rax                                         
 ..          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2de    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e2e1    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e2e5    4983ee10                sub r14, 0x10                                          
 ..                  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2e9    4803c1                  add rax, rcx                                           
 ..                          : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2ec    49894708                mov [r15+0x8], rax                                     
 ..   : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2f0    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e2f4    4983c608                add r14, 0x8                                           
0x7e8de8b0e2f8    498906                  mov [r14], rax                                         
 .. : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e2fb    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0e305    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
  : hi ( | x ) x = ( 2 + ( 3 * 4 ) ), x p return x  .. 
0x7e8de8b0e308    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e30c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e310    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e314    4983c608                add r14, 0x8                                           
 .. x ) x = ( 2 + ( 3 * 4 ) ), x p return x 
0x7e8de8b0e318    498906                  mov [r14], rax                                         
0x7e8de8b0e31b    c3                      ret                                                    
Word_Disassemble : word - 'hi' :: codeSize = 101
Word : 0x00007e8de8fc1bab :: Compiled at : 0x00007e8de8b0e2b7
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 15.16 <::
 14
DataStack at : namespaces/compiler/syntax.csl : 16.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :> 
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 19.2 :: we are now at : namespaces/compiler/syntax.csl : 20.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e321 -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi1 : definition = 0x00007e8de8b0e321 : disassembly at namespaces/compiler/syntax.csl : 20.17 :
0x7e8de8b0e321    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e325    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e329    4981c610000000          add r14, 0x10                                          
 ..                 : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e330    b802000000              mov eax, 0x2                                           
0x7e8de8b0e335    4983c608                add r14, 0x8                                           
0x7e8de8b0e339    498906                  mov [r14], rax                                         
 ..         : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e33c    498b47f0                mov rax, [r15-0x10]                                    
 .. : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e340    498b4ff8                mov rcx, [r15-0x8]                                     
 ..     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e344    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e34b    48f7f9                  idiv rcx                                               
0x7e8de8b0e34e    4983c608                add r14, 0x8                                           
  : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e352    498906                  mov [r14], rax                                         
: hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e355    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e358    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e35c    4983ee10                sub r14, 0x10                                          
 ..               : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e360    4803c1                  add rax, rcx                                           
0x7e8de8b0e363    4983c608                add r14, 0x8                                           
0x7e8de8b0e367    498906                  mov [r14], rax                                         
 .. b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x7e8de8b0e36a    b80c000000              mov eax, 0xc                                           
0x7e8de8b0e36f    4983c608                add r14, 0x8                                           
0x7e8de8b0e373    498906                  mov [r14], rax                                         
 .. x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x7e8de8b0e376    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e379    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e37d    4983ee10                sub r14, 0x10                                          
 .. | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x7e8de8b0e381    480fafc1                imul rax, rcx                                          
 ..                     : hi1 ( a b | x ) x = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ;  .. 
0x7e8de8b0e385    49894708                mov [r15+0x8], rax                                     
 ..  = 2 + ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x7e8de8b0e389    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e38d    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e391    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e395    4983ee08                sub r14, 0x8                                           
 .. ( ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x7e8de8b0e399    498906                  mov [r14], rax                                         
 .. ( a ) / ( b ) ) * ( 3 * 4 ), return x ; 
0x7e8de8b0e39c    c3                      ret                                                    
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x00007e8de8fc3f8b :: Compiled at : 0x00007e8de8b0e321
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 20.17 <::
 48
 =============================
Root.hi1 <:> csl compiled word
SourceCode for Root.hi1 :> 
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
Source code file location of hi1 : "namespaces/compiler/syntax.csl" : 22.2 :: we are now at : namespaces/compiler/syntax.csl : 23.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e3a2 -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi1 : definition = 0x00007e8de8b0e3a2 : disassembly at namespaces/compiler/syntax.csl : 23.17 :
0x7e8de8b0e3a2    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e3a6    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e3aa    4981c610000000          add r14, 0x10                                          
 ..               : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3b1    b802000000              mov eax, 0x2                                           
0x7e8de8b0e3b6    4983c608                add r14, 0x8                                           
0x7e8de8b0e3ba    498906                  mov [r14], rax                                         
 ..         : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3bd    498b47f0                mov rax, [r15-0x10]                                    
 ..     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3c1    498b4ff8                mov rcx, [r15-0x8]                                     
 ..       : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3c5    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e3cc    48f7f9                  idiv rcx                                               
0x7e8de8b0e3cf    4983c608                add r14, 0x8                                           
0x7e8de8b0e3d3    498906                  mov [r14], rax                                         
 ..   : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3d6    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e3d9    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e3dd    4983ee10                sub r14, 0x10                                          
 ..             : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3e1    4803c1                  add rax, rcx                                           
0x7e8de8b0e3e4    4983c608                add r14, 0x8                                           
0x7e8de8b0e3e8    498906                  mov [r14], rax                                         
: hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e3eb    b80c000000              mov eax, 0xc                                           
0x7e8de8b0e3f0    4983c608                add r14, 0x8                                           
0x7e8de8b0e3f4    498906                  mov [r14], rax                                         
 .. a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x7e8de8b0e3f7    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e3fa    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e3fe    4983ee10                sub r14, 0x10                                          
 .. ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x7e8de8b0e402    480fafc1                imul rax, rcx                                          
 ..                     : hi1 ( a b | x ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ;  .. 
0x7e8de8b0e406    49894708                mov [r15+0x8], rax                                     
 ..  ) x = ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x7e8de8b0e40a    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e40e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e412    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e416    4983ee08                sub r14, 0x8                                           
 .. ( 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x7e8de8b0e41a    498906                  mov [r14], rax                                         
 .. 2 + ( a / b ) * ( 3 * 4 ) ), return x ; 
0x7e8de8b0e41d    c3                      ret                                                    
Word_Disassemble : word - 'hi1' :: codeSize = 124
Word : 0x00007e8de8fc6d8b :: Compiled at : 0x00007e8de8b0e3a2
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 23.17 <::
 48 48
DataStack at : namespaces/compiler/syntax.csl : 26.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Root.hi2 <:> csl compiled word
SourceCode for Root.hi2 :> 
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
Source code file location of hi2 : "namespaces/compiler/syntax.csl" : 27.2 :: we are now at : namespaces/compiler/syntax.csl : 28.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e423 -- code size = 124 bytes
TypeSignature : 
 -----------------------------
Word :: Root.hi2 : definition = 0x00007e8de8b0e423 : disassembly at namespaces/compiler/syntax.csl : 28.17 :
0x7e8de8b0e423    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e427    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e42b    4981c610000000          add r14, 0x10                                          
 ..       : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e432    b802000000              mov eax, 0x2                                           
0x7e8de8b0e437    4983c608                add r14, 0x8                                           
0x7e8de8b0e43b    498906                  mov [r14], rax                                         
 .. : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e43e    498b47f0                mov rax, [r15-0x10]                                    
: hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e442    498b4ff8                mov rcx, [r15-0x8]                                     
  : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e446    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e44d    48f7f9                  idiv rcx                                               
0x7e8de8b0e450    4983c608                add r14, 0x8                                           
0x7e8de8b0e454    498906                  mov [r14], rax                                         
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e457    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e45a    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e45e    4983ee10                sub r14, 0x10                                          
 ..     : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e462    4803c1                  add rax, rcx                                           
0x7e8de8b0e465    4983c608                add r14, 0x8                                           
0x7e8de8b0e469    498906                  mov [r14], rax                                         
 .. ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e46c    b80c000000              mov eax, 0xc                                           
0x7e8de8b0e471    4983c608                add r14, 0x8                                           
0x7e8de8b0e475    498906                  mov [r14], rax                                         
 .. x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e478    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e47b    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e47f    4983ee10                sub r14, 0x10                                          
 .. ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e483    480fafc1                imul rax, rcx                                          
 ..                   : hi2 ( a b | x ) ( x = ( ( ( ( 2 + ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e487    49894708                mov [r15+0x8], rax                                     
 ..  ( a / b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e48b    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e48f    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e493    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e497    4983ee08                sub r14, 0x8                                           
 .. b ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e49b    498906                  mov [r14], rax                                         
 .. ) ) * ( ( 3 * 4 ) ) ) ) ) ), return x ; 
0x7e8de8b0e49e    c3                      ret                                                    
Word_Disassemble : word - 'hi2' :: codeSize = 124
Word : 0x00007e8de8fc982b :: Compiled at : 0x00007e8de8b0e423
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 28.17 <::
 48
DataStack at : namespaces/compiler/syntax.csl : 29.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 48
DataStack at : namespaces/compiler/syntax.csl : 31.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Root.h3 <:> csl compiled word
SourceCode for Root.h3 :> 
: h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
Source code file location of h3 : "namespaces/compiler/syntax.csl" : 32.2 :: we are now at : namespaces/compiler/syntax.csl : 33.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e4a4 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Root.h3 : definition = 0x00007e8de8b0e4a4 : disassembly at namespaces/compiler/syntax.csl : 33.16 :
0x7e8de8b0e4a4    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e4a8    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e4ac    4981c610000000          add r14, 0x10                                          
 ..        : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e4b3    b802000000              mov eax, 0x2                                           
0x7e8de8b0e4b8    4983c608                add r14, 0x8                                           
0x7e8de8b0e4bc    498906                  mov [r14], rax                                         
   : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e4bf    b80c000000              mov eax, 0xc                                           
0x7e8de8b0e4c4    4983c608                add r14, 0x8                                           
0x7e8de8b0e4c8    498906                  mov [r14], rax                                         
 .. ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e4cb    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e4ce    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e4d2    4983ee10                sub r14, 0x10                                          
 ..      : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e4d6    4803c1                  add rax, rcx                                           
0x7e8de8b0e4d9    4983c608                add r14, 0x8                                           
0x7e8de8b0e4dd    498906                  mov [r14], rax                                         
 ..  ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e4e0    498b47f0                mov rax, [r15-0x10]                                    
 ..  ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e4e4    498b4ff8                mov rcx, [r15-0x8]                                     
 .. x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e4e8    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e4ef    48f7f9                  idiv rcx                                               
0x7e8de8b0e4f2    4983c608                add r14, 0x8                                           
 .. ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e4f6    498906                  mov [r14], rax                                         
 .. ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e4f9    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e4fc    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e500    4983ee10                sub r14, 0x10                                          
 .. | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e504    482bc1                  sub rax, rcx                                           
 ..                    : h3 ( a b | x ) ( x = ( ( ( ( 2 + ( ( 3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ;  .. 
0x7e8de8b0e507    49894708                mov [r15+0x8], rax                                     
 ..  3 * 4 ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e50b    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e50f    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e513    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e517    4983ee08                sub r14, 0x8                                           
 .. ) ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e51b    498906                  mov [r14], rax                                         
 .. ) - ( (a) / (b) ) ) ) ) ) ), return x ; 
0x7e8de8b0e51e    c3                      ret                                                    
Word_Disassemble : word - 'h3' :: codeSize = 123
Word : 0x00007e8de8fcd3ab :: Compiled at : 0x00007e8de8b0e4a4
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 33.16 <::
 12 6 3 h3_assert1  : ok

 12
DataStack at : namespaces/compiler/syntax.csl : 35.26 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Root.h4 <:> csl compiled word
SourceCode for Root.h4 :> 
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
Source code file location of h4 : "namespaces/compiler/syntax.csl" : 36.2 :: we are now at : namespaces/compiler/syntax.csl : 37.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e524 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Root.h4 : definition = 0x00007e8de8b0e524 : disassembly at namespaces/compiler/syntax.csl : 37.16 :
0x7e8de8b0e524    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e528    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e52c    4981c610000000          add r14, 0x10                                          
 ..                : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e533    b814000000              mov eax, 0x14                                          
0x7e8de8b0e538    4983c608                add r14, 0x8                                           
0x7e8de8b0e53c    498906                  mov [r14], rax                                         
 ..         : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e53f    b80c000000              mov eax, 0xc                                           
0x7e8de8b0e544    4983c608                add r14, 0x8                                           
0x7e8de8b0e548    498906                  mov [r14], rax                                         
 ..     : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e54b    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e54e    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e552    4983ee10                sub r14, 0x10                                          
 ..             : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e556    482bc1                  sub rax, rcx                                           
0x7e8de8b0e559    4983c608                add r14, 0x8                                           
0x7e8de8b0e55d    498906                  mov [r14], rax                                         
: h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e560    498b47f0                mov rax, [r15-0x10]                                    
 ..  b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x7e8de8b0e564    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x7e8de8b0e568    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b0e56f    48f7f9                  idiv rcx                                               
0x7e8de8b0e572    4983c608                add r14, 0x8                                           
0x7e8de8b0e576    498906                  mov [r14], rax                                         
 ..  | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x7e8de8b0e579    498b0e                  mov rcx, [r14]                                         
0x7e8de8b0e57c    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b0e580    4983ee10                sub r14, 0x10                                          
 .. : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e584    482bc1                  sub rax, rcx                                           
 ..                      : h4 ( a b | x ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ;  .. 
0x7e8de8b0e587    49894708                mov [r15+0x8], rax                                     
 .. ) x = ( 20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x7e8de8b0e58b    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0e58f    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e593    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e597    4983ee08                sub r14, 0x8                                           
 ..  20 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x7e8de8b0e59b    498906                  mov [r14], rax                                         
 .. 0 - ( 3 * 4 ) - ( a / b ) ), return x ; 
0x7e8de8b0e59e    c3                      ret                                                    
Word_Disassemble : word - 'h4' :: codeSize = 123
Word : 0x00007e8de8fd15eb :: Compiled at : 0x00007e8de8b0e524
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 37.16 <::
 6
DataStack at : namespaces/compiler/syntax.csl : 38.24 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 6
DataStack at : namespaces/compiler/syntax.csl : 39.25 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 
above lines should read 6
DataStack at : namespaces/compiler/syntax.csl : 42.40 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000003
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 3 
above line should read 3

  52.53799999999999670308170607313514
  52.53799999999999670308170607313514
  52.53799999999999670308170607313514 
above lines should show : 52.53799999999999670308170607313514
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :> 
void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 59.11 :: we are now at : namespaces/compiler/syntax.csl : 62.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e896 -- code size = 255 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x00007e8de8b0e896 : disassembly at namespaces/compiler/syntax.csl : 62.18 :
0x7e8de8b0e896    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e89a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e89e    4981c608000000          add r14, 0x8                                           
 ..                    void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } .. 
0x7e8de8b0e8a5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b0e8aa    0f8523000000            jnz 0x7e8de8b0e8d3            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x7e8de8b0e8b0    48b81b7781e88d7e0000    mov rax, 0x7e8de881771b       < string : 'hi1' >
0x7e8de8b0e8ba    4983c608                add r14, 0x8                                           
0x7e8de8b0e8be    498906                  mov [r14], rax                                         
 ..     void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x7e8de8b0e8c1    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e8cb    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0e8ce    e929000000              jmp 0x7e8de8b0e8fc            < C_Syntax.thi42+102 >
   void thi42 ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; }  .. 
0x7e8de8b0e8d3    49837ff802              cmp qword [r15-0x8], 0x2                               
0x7e8de8b0e8d8    0f8523000000            jnz 0x7e8de8b0e901            < C_Syntax.thi42+107 >
 ..  ( n ) { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e8de    48b82d7781e88d7e0000    mov rax, 0x7e8de881772d       < string : 'hi2' >
0x7e8de8b0e8e8    4983c608                add r14, 0x8                                           
0x7e8de8b0e8ec    498906                  mov [r14], rax                                         
 ..  { n == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e8ef    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e8f9    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0e8fc    e929000000              jmp 0x7e8de8b0e92a            < C_Syntax.thi42+148 >
 .. == 1 ? "hi1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e901    49837ff803              cmp qword [r15-0x8], 0x3                               
0x7e8de8b0e906    0f8523000000            jnz 0x7e8de8b0e92f            < C_Syntax.thi42+153 >
 .. i1" ps : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e90c    48b83f7781e88d7e0000    mov rax, 0x7e8de881773f       < string : 'hi3' >
0x7e8de8b0e916    4983c608                add r14, 0x8                                           
0x7e8de8b0e91a    498906                  mov [r14], rax                                         
 ..  : n == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e91d    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e927    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0e92a    e929000000              jmp 0x7e8de8b0e958            < C_Syntax.thi42+194 >
 .. == 2 ? "hi2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e92f    49837ff804              cmp qword [r15-0x8], 0x4                               
0x7e8de8b0e934    0f8523000000            jnz 0x7e8de8b0e95d            < C_Syntax.thi42+199 >
 .. i2" ps : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e93a    48b8527781e88d7e0000    mov rax, 0x7e8de8817752       < string : 'hi42' >
0x7e8de8b0e944    4983c608                add r14, 0x8                                           
0x7e8de8b0e948    498906                  mov [r14], rax                                         
 .. : n == 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e94b    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e955    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0e958    e92b000000              jmp 0x7e8de8b0e988            < C_Syntax.thi42+242 >
 .. = 3 ? "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e95d    48b8647781e88d7e0000    mov rax, 0x7e8de8817764       < string : 'err' >
0x7e8de8b0e967    4983c608                add r14, 0x8                                           
0x7e8de8b0e96b    498906                  mov [r14], rax                                         
 .. "hi3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e96e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e978    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. 3" ps : n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e97b    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0e985    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0e988    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0e98c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0e990    4983ee08                sub r14, 0x8                                           
 .. n == 4 ? "hi42" ps : "err" ps Error ; } 
0x7e8de8b0e994    c3                      ret                                                    
Word_Disassemble : word - 'thi42' :: codeSize = 255
Word : 0x00007e8de8fda78b :: Compiled at : 0x00007e8de8b0e896
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 62.18 <::

 hi1 hi2 hi3 hi42 
should show : hi1 hi2 hi3 hi42  hi42

 =============================
Interpreter.thi2 <:> csl compiled word
SourceCode for Interpreter.thi2 :> 
: thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
Source code file location of thi2 : "namespaces/compiler/syntax.csl" : 72.2 :: we are now at : namespaces/compiler/syntax.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0e99a -- code size = 150 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi2 : definition = 0x00007e8de8b0e99a : disassembly at namespaces/compiler/syntax.csl : 73.17 :
0x7e8de8b0e99a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0e99e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0e9a2    4981c608000000          add r14, 0x8                                           
 ..                          : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x7e8de8b0e9a9    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b0e9ae    0f8523000000            jnz 0x7e8de8b0e9d7            < Interpreter.thi2+61 >
 ..               : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x7e8de8b0e9b4    48b88b7881e88d7e0000    mov rax, 0x7e8de881788b       < string : 'hi1' >
0x7e8de8b0e9be    4983c608                add r14, 0x8                                           
0x7e8de8b0e9c2    498906                  mov [r14], rax                                         
 ..         : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x7e8de8b0e9c5    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e9cf    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0e9d2    e929000000              jmp 0x7e8de8b0ea00            < Interpreter.thi2+102 >
 ..    : thi2 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ;  .. 
0x7e8de8b0e9d7    49837ff802              cmp qword [r15-0x8], 0x2                               
0x7e8de8b0e9dc    0f8523000000            jnz 0x7e8de8b0ea05            < Interpreter.thi2+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x7e8de8b0e9e2    48b89d7881e88d7e0000    mov rax, 0x7e8de881789d       < string : 'hi2' >
0x7e8de8b0e9ec    4983c608                add r14, 0x8                                           
0x7e8de8b0e9f0    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x7e8de8b0e9f3    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0e9fd    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ea00    e91e000000              jmp 0x7e8de8b0ea23            < Interpreter.thi2+137 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x7e8de8b0ea05    48b8ad7881e88d7e0000    mov rax, 0x7e8de88178ad       < string : 'err' >
0x7e8de8b0ea0f    4983c608                add r14, 0x8                                           
0x7e8de8b0ea13    498906                  mov [r14], rax                                         
 .. hi1" ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x7e8de8b0ea16    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ea20    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ea23    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0ea27    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0ea2b    4983ee08                sub r14, 0x8                                           
 .. " ps : n @ 2 == ? "hi2" ps : "err" ps ; 
0x7e8de8b0ea2f    c3                      ret                                                    
Word_Disassemble : word - 'thi2' :: codeSize = 150
Word : 0x00007e8de8fdda9b :: Compiled at : 0x00007e8de8b0e99a
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 73.17 <::
 hi2
 =============================
Interpreter.thi3 <:> csl compiled word
SourceCode for Interpreter.thi3 :> 
: thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
Source code file location of thi3 : "namespaces/compiler/syntax.csl" : 75.2 :: we are now at : namespaces/compiler/syntax.csl : 76.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0ea35 -- code size = 179 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi3 : definition = 0x00007e8de8b0ea35 : disassembly at namespaces/compiler/syntax.csl : 76.17 :
0x7e8de8b0ea35    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0ea39    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0ea3d    4981c608000000          add r14, 0x8                                           
 ..                          : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x7e8de8b0ea44    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b0ea49    0f8523000000            jnz 0x7e8de8b0ea72            < Interpreter.thi3+61 >
 ..               : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x7e8de8b0ea4f    48b8167981e88d7e0000    mov rax, 0x7e8de8817916       < string : 'hi1' >
0x7e8de8b0ea59    4983c608                add r14, 0x8                                           
0x7e8de8b0ea5d    498906                  mov [r14], rax                                         
 ..         : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x7e8de8b0ea60    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ea6a    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ea6d    e929000000              jmp 0x7e8de8b0ea9b            < Interpreter.thi3+102 >
 ..    : thi3 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ;  .. 
0x7e8de8b0ea72    49837ff802              cmp qword [r15-0x8], 0x2                               
0x7e8de8b0ea77    0f8523000000            jnz 0x7e8de8b0eaa0            < Interpreter.thi3+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0ea7d    48b8287981e88d7e0000    mov rax, 0x7e8de8817928       < string : 'hi2' >
0x7e8de8b0ea87    4983c608                add r14, 0x8                                           
0x7e8de8b0ea8b    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0ea8e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ea98    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ea9b    e929000000              jmp 0x7e8de8b0eac9            < Interpreter.thi3+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0eaa0    49837ff803              cmp qword [r15-0x8], 0x3                               
0x7e8de8b0eaa5    0f8523000000            jnz 0x7e8de8b0eace            < Interpreter.thi3+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0eaab    48b83a7981e88d7e0000    mov rax, 0x7e8de881793a       < string : 'hi3' >
0x7e8de8b0eab5    4983c608                add r14, 0x8                                           
0x7e8de8b0eab9    498906                  mov [r14], rax                                         
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0eabc    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0eac6    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0eac9    e90d000000              jmp 0x7e8de8b0eadb            < Interpreter.thi3+166 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0eace    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ead8    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0eadb    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0eadf    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0eae3    4983ee08                sub r14, 0x8                                           
 .. hi2" ps : n @ 3 == ? "hi3" ps : Error ; 
0x7e8de8b0eae7    c3                      ret                                                    
Word_Disassemble : word - 'thi3' :: codeSize = 179
Word : 0x00007e8de8fdf96b :: Compiled at : 0x00007e8de8b0ea35
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 76.17 <::
 hi3
 =============================
Interpreter.thi43 <:> csl compiled word
SourceCode for Interpreter.thi43 :> 
: thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
Source code file location of thi43 : "namespaces/compiler/syntax.csl" : 79.2 :: we are now at : namespaces/compiler/syntax.csl : 80.18
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0eaed -- code size = 225 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.thi43 : definition = 0x00007e8de8b0eaed : disassembly at namespaces/compiler/syntax.csl : 80.18 :
0x7e8de8b0eaed    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0eaf1    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0eaf5    4981c608000000          add r14, 0x8                                           
 ..                         : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x7e8de8b0eafc    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b0eb01    0f8523000000            jnz 0x7e8de8b0eb2a            < Interpreter.thi43+61 >
 ..              : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x7e8de8b0eb07    48b8b77981e88d7e0000    mov rax, 0x7e8de88179b7       < string : 'hi1' >
0x7e8de8b0eb11    4983c608                add r14, 0x8                                           
0x7e8de8b0eb15    498906                  mov [r14], rax                                         
 ..        : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x7e8de8b0eb18    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0eb22    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0eb25    e929000000              jmp 0x7e8de8b0eb53            < Interpreter.thi43+102 >
 ..   : thi43 ( n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ;  .. 
0x7e8de8b0eb2a    49837ff802              cmp qword [r15-0x8], 0x2                               
0x7e8de8b0eb2f    0f8523000000            jnz 0x7e8de8b0eb58            < Interpreter.thi43+107 >
 ..  n ) n @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb35    48b8c97981e88d7e0000    mov rax, 0x7e8de88179c9       < string : 'hi2' >
0x7e8de8b0eb3f    4983c608                add r14, 0x8                                           
0x7e8de8b0eb43    498906                  mov [r14], rax                                         
 ..  @ 1 == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb46    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0eb50    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0eb53    e929000000              jmp 0x7e8de8b0eb81            < Interpreter.thi43+148 >
 .. == ? "hi1" ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb58    49837ff803              cmp qword [r15-0x8], 0x3                               
0x7e8de8b0eb5d    0f8523000000            jnz 0x7e8de8b0eb86            < Interpreter.thi43+153 >
 .. ps : n @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb63    48b8db7981e88d7e0000    mov rax, 0x7e8de88179db       < string : 'hi3' >
0x7e8de8b0eb6d    4983c608                add r14, 0x8                                           
0x7e8de8b0eb71    498906                  mov [r14], rax                                         
 ..  @ 2 == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb74    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0eb7e    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0eb81    e929000000              jmp 0x7e8de8b0ebaf            < Interpreter.thi43+194 >
 .. == ? "hi2" ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb86    49837ff804              cmp qword [r15-0x8], 0x4                               
0x7e8de8b0eb8b    0f8523000000            jnz 0x7e8de8b0ebb4            < Interpreter.thi43+199 >
 .. ps : n @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eb91    48b8ee7981e88d7e0000    mov rax, 0x7e8de88179ee       < string : 'hi42' >
0x7e8de8b0eb9b    4983c608                add r14, 0x8                                           
0x7e8de8b0eb9f    498906                  mov [r14], rax                                         
 .. @ 3 == ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0eba2    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ebac    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ebaf    e90d000000              jmp 0x7e8de8b0ebc1            < Interpreter.thi43+212 >
 .. = ? "hi3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0ebb4    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ebbe    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0ebc1    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0ebc5    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0ebc9    4983ee08                sub r14, 0x8                                           
 .. i3" ps : n @ 4 == ? "hi42" ps : Error ; 
0x7e8de8b0ebcd    c3                      ret                                                    
Word_Disassemble : word - 'thi43' :: codeSize = 225
Word : 0x00007e8de8fe225b :: Compiled at : 0x00007e8de8b0eaed
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 80.18 <::
 hi42
 hi1 hi2 hi3 hi42
n = 3 : m = 4 7 hi42

 =============================
C_Syntax.thi41 <:> csl compiled word
SourceCode for C_Syntax.thi41 :> 
void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
Source code file location of thi41 : "namespaces/compiler/syntax.csl" : 97.11 :: we are now at : namespaces/compiler/syntax.csl : 101.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0ec99 -- code size = 220 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi41 : definition = 0x00007e8de8b0ec99 : disassembly at namespaces/compiler/syntax.csl : 101.18 :
 ..                       void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x7e8de8b0ec99    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0eca0    4883f800                cmp rax, 0x0                                           
0x7e8de8b0eca4    0f8423000000            jz 0x7e8de8b0eccd             < C_Syntax.thi41+52 >
 ..                   void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x7e8de8b0ecaa    48b85f7b81e88d7e0000    mov rax, 0x7e8de8817b5f       < string : 'hi1' >
0x7e8de8b0ecb4    4983c608                add r14, 0x8                                           
0x7e8de8b0ecb8    498906                  mov [r14], rax                                         
 ..             void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x7e8de8b0ecbb    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ecc5    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0ecc8    e92f000000              jmp 0x7e8de8b0ecfc            < C_Syntax.thi41+99 >
 ..     void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x7e8de8b0eccd    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0ecd4    4883f800                cmp rax, 0x0                                           
0x7e8de8b0ecd8    0f8423000000            jz 0x7e8de8b0ed01             < C_Syntax.thi41+104 >
 .. void thi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; }  .. 
0x7e8de8b0ecde    48b8717b81e88d7e0000    mov rax, 0x7e8de8817b71       < string : 'hi2' >
0x7e8de8b0ece8    4983c608                add r14, 0x8                                           
0x7e8de8b0ecec    498906                  mov [r14], rax                                         
 .. hi41 () { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ecef    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ecf9    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0ecfc    e92f000000              jmp 0x7e8de8b0ed30            < C_Syntax.thi41+151 >
 .. { 0 ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed01    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0ed08    4883f800                cmp rax, 0x0                                           
0x7e8de8b0ed0c    0f8423000000            jz 0x7e8de8b0ed35             < C_Syntax.thi41+156 >
 .. ? "hi1" Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed12    48b8837b81e88d7e0000    mov rax, 0x7e8de8817b83       < string : 'hi3' >
0x7e8de8b0ed1c    4983c608                add r14, 0x8                                           
0x7e8de8b0ed20    498906                  mov [r14], rax                                         
 .. " Error : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed23    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ed2d    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0ed30    e92d000000              jmp 0x7e8de8b0ed62            < C_Syntax.thi41+201 >
 .. : 0 ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed35    b801000000              mov eax, 0x1                                           
0x7e8de8b0ed3a    4883f800                cmp rax, 0x0                                           
0x7e8de8b0ed3e    0f8423000000            jz 0x7e8de8b0ed67             < C_Syntax.thi41+206 >
 .. ? "hi2" Error : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed44    48b8977b81e88d7e0000    mov rax, 0x7e8de8817b97                                
0x7e8de8b0ed4e    4983c608                add r14, 0x8                                           
0x7e8de8b0ed52    498906                  mov [r14], rax                                         
 .. rror : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed55    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ed5f    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ed62    e90d000000              jmp 0x7e8de8b0ed74            < C_Syntax.thi41+219 >
 .. : 0 ? "hi3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed67    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ed71    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
 .. i3" Error : 1 ? "hi42\n" ps : Error ; } 
0x7e8de8b0ed74    c3                      ret                                                    
Word_Disassemble : word - 'thi41' :: codeSize = 220
Word : 0x00007e8de8fe743b :: Compiled at : 0x00007e8de8b0ec99
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 101.18 <::
 hi42
 
should show : 'hi42' 
 =============================
C_Syntax.thi42 <:> csl compiled word
SourceCode for C_Syntax.thi42 :> 
void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
Source code file location of thi42 : "namespaces/compiler/syntax.csl" : 107.11 :: we are now at : namespaces/compiler/syntax.csl : 109.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0ed7a -- code size = 225 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.thi42 : definition = 0x00007e8de8b0ed7a : disassembly at namespaces/compiler/syntax.csl : 109.18 :
0x7e8de8b0ed7a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0ed7e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0ed82    4981c608000000          add r14, 0x8                                           
 ..                    void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x7e8de8b0ed89    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b0ed8e    0f8523000000            jnz 0x7e8de8b0edb7            < C_Syntax.thi42+61 >
 ..           void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x7e8de8b0ed94    48b86c7c81e88d7e0000    mov rax, 0x7e8de8817c6c       < string : '1:hi1' >
0x7e8de8b0ed9e    4983c608                add r14, 0x8                                           
0x7e8de8b0eda2    498906                  mov [r14], rax                                         
 ..   void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x7e8de8b0eda5    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0edaf    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0edb2    e929000000              jmp 0x7e8de8b0ede0            < C_Syntax.thi42+102 >
 void thi42 ( n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; }  .. 
0x7e8de8b0edb7    49837ff802              cmp qword [r15-0x8], 0x2                               
0x7e8de8b0edbc    0f8523000000            jnz 0x7e8de8b0ede5            < C_Syntax.thi42+107 >
 ..  n ) { n == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0edc2    48b8847c81e88d7e0000    mov rax, 0x7e8de8817c84       < string : '2:hi2' >
0x7e8de8b0edcc    4983c608                add r14, 0x8                                           
0x7e8de8b0edd0    498906                  mov [r14], rax                                         
 ..  == 1 ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0edd3    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0eddd    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ede0    e929000000              jmp 0x7e8de8b0ee0e            < C_Syntax.thi42+148 >
 ..  ? "1:hi1" ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ede5    49837ff803              cmp qword [r15-0x8], 0x3                               
0x7e8de8b0edea    0f8523000000            jnz 0x7e8de8b0ee13            < C_Syntax.thi42+153 >
 .. " ps : n == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0edf0    48b89c7c81e88d7e0000    mov rax, 0x7e8de8817c9c       < string : '3:hi3' >
0x7e8de8b0edfa    4983c608                add r14, 0x8                                           
0x7e8de8b0edfe    498906                  mov [r14], rax                                         
 ..  == 2 ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ee01    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ee0b    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ee0e    e929000000              jmp 0x7e8de8b0ee3c            < C_Syntax.thi42+194 >
 ..  ? "2:hi2" ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ee13    49837ff804              cmp qword [r15-0x8], 0x4                               
0x7e8de8b0ee18    0f8523000000            jnz 0x7e8de8b0ee41            < C_Syntax.thi42+199 >
 .. " ps : n == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ee1e    48b8b57c81e88d7e0000    mov rax, 0x7e8de8817cb5       < string : '4:hi42' >
0x7e8de8b0ee28    4983c608                add r14, 0x8                                           
0x7e8de8b0ee2c    498906                  mov [r14], rax                                         
 .. == 3 ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ee2f    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ee39    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b0ee3c    e90d000000              jmp 0x7e8de8b0ee4e            < C_Syntax.thi42+212 >
 .. ? "3:hi3" ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ee41    49bb58e8b0e88d7e0000    mov r11, 0x7e8de8b0e858                                
0x7e8de8b0ee4b    49ffd3                  call r11                      < void.Error : 0x00007e8de8b0e858 >
0x7e8de8b0ee4e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b0ee52    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b0ee56    4983ee08                sub r14, 0x8                                           
 .. " ps : n == 4 ? "4:hi42" ps : Error ; } 
0x7e8de8b0ee5a    c3                      ret                                                    
Word_Disassemble : word - 'thi42' :: codeSize = 225
Word : 0x00007e8de8fe966b :: Compiled at : 0x00007e8de8b0ed7a
 =============================
::> 'wdiss' was called at namespaces/compiler/syntax.csl 109.18 <::
 4:hi42 
should show : '4:hi42'  ok ok
n = 3 : m = 4 7 
ok 
including namespaces/test/system.csl at namespaces/test/initTest.csl : 86.41 ...

hello world! - parse this!?
1234            and this! 
        also this!
Hello world! = 0x000004d2


Hello world! = 42


hello world! - parse this!?
         
        also this!
 7 7 7 7
DataStack at : namespaces/test/system.csl : 21.18 :
DataStack depth =   8 : Dsp (R14) = Top = 0x00007e8de7910af8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910af8 > = 0x00007e8de7910ae0
  DataStack   [  -1 ] < 0x00007e8de7910af0 > = 0x00007e8de8ca53b7       < word : User.s : value = 0x00005b343f2ed9f0 >
  DataStack   [  -2 ] < 0x00007e8de7910ae8 > = 0x0000000000000000
  DataStack   [  -3 ] < 0x00007e8de7910ae0 > = 0x00005b343f36fc20
  DataStack   [  -4 ] < 0x00007e8de7910ad8 > = 0x00007e8de8ca53b7       < word : User.s : value = 0x00005b343f2ed9f0 >
  DataStack   [  -5 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

Hello world! = 0x000004d2


hello world!
parse this!


 
 and this!

hello world! - parse this!?
                 and this!
Hello world! = 0x000004d2


Hello world! = 0x000004d2


yes, Hello world! = 0x000004d2
yes, Hello world! = 0x000004d2 : and more yet
e
i       e
line above should read... 
i       e
 =============================
Shell.hio <:> csl compiled word
SourceCode for Shell.hio :> 
: hio if 1 p else 0 p endif ; 
Source code file location of hio : "namespaces/test/system.csl" : 52.2 :: we are now at : namespaces/test/system.csl : 53.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0f57e -- code size = 75 bytes
 -----------------------------
Word :: Shell.hio : definition = 0x00007e8de8b0f57e : disassembly at namespaces/test/system.csl : 53.17 :
 ..                                : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f57e    498b06                  mov rax, [r14]                                         
0x7e8de8b0f581    4983ee08                sub r14, 0x8                                           
0x7e8de8b0f585    4883f800                cmp rax, 0x0                                           
0x7e8de8b0f589    0f841e000000            jz 0x7e8de8b0f5ad             < Shell.hio+47 >
 ..                             : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f58f    b801000000              mov eax, 0x1                                           
0x7e8de8b0f594    4983c608                add r14, 0x8                                           
0x7e8de8b0f598    498906                  mov [r14], rax                                         
 ..                           : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f59b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0f5a5    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..                         : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f5a8    e91b000000              jmp 0x7e8de8b0f5c8            < Shell.hio+74 >
 ..                    : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f5ad    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b0f5b4    4983c608                add r14, 0x8                                           
0x7e8de8b0f5b8    498906                  mov [r14], rax                                         
 ..                  : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f5bb    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0f5c5    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..          : hio  if 1 p else 0 p endif ;  .. 
0x7e8de8b0f5c8    c3                      ret                                                    
Word_Disassemble : word - 'hio' :: codeSize = 75
Word : 0x00007e8de8ffbb5b :: Compiled at : 0x00007e8de8b0f57e
 =============================
::> 'wdiss' was called at namespaces/test/system.csl 53.17 <::
 1 0
 876543

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.176
 7 7 7
version 0.940.176
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xc4b02400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000075a4c4b02400 : disassembly at etc/script : 35.8 :
0x75a4c4b02400    4d897e08                mov [r14+0x8], r15                                     
0x75a4c4b02404    4d8d7e08                lea r15, [r14+0x8]                                     
0x75a4c4b02408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x75a4c4b0240f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x75a4c4b02417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b0241c    7e1f                    jle 0xc4b0243d                < Int.fac+61 >
0x75a4c4b0241e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b02422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b02426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b0242a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b0242e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b02432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b02436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x75a4c4b0243b    7fe5                    jg 0xc4b02422                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b0243d    498b4708                mov rax, [r15+0x8]                                     
0x75a4c4b02441    e900000000              jmp 0x75a4c4b02446            < Int.fac+70 >
0x75a4c4b02446    4d8d77f8                lea r14, [r15-0x8]                                     
0x75a4c4b0244a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x75a4c4b0244e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x75a4c4b02451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x000075a4c4cbd437 :: Compiled at : 0x000075a4c4b02400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

including etc/lispScript at <command line> : 0.0 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/lispScript : 4.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.177
Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =     91033 : Unused =   2006119 : Allocations =    1 : Largest =  2006119 : Smallest =  2006119 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23185 : Unused =   1025391 : Allocations =    1 : Largest =  1025391 : Smallest =  1025391 : AllocSize =  1048576
WordRecylingSpace       InUse =    129360 : Unused =    919216 : Allocations =    1 : Largest =   919216 : Smallest =   919216 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    487200 : Unused =   3707104 : Allocations =    1 : Largest =  3707104 : Smallest =  3707104 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     51385 : Unused =   4142919 : Allocations =    1 : Largest =  4142919 : Smallest =  4142919 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21166 : Unused =   1027410 : Allocations =    1 : Largest =  1027410 : Smallest =  1027410 : AllocSize =  1048576ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =      7368 : Unused =   1041208 : Allocations =    1 : Largest =  1041208 : Smallest =  1041208 : AllocSize =  1048576
CodeSpace               InUse =     24815 : Unused =   1023761 : Allocations =    1 : Largest =  1023761 : Smallest =  1023761 : AllocSize =  1048576
DictionarySpace         InUse =    753727 : Unused =   3440577 : Allocations =    1 : Largest =  3440577 : Smallest =  3440577 : AllocSize =  4194304
InternalObjectSpace     InUse =     17774 : Unused =   1030802 : Allocations =    1 : Largest =  1030802 : Smallest =  1030802 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   1895753 : Unused =  23289671
Non-Static Mem Allocated      =  25185424
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =    848016 : 1963  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes

 7
 yfac
 3628800

 yfacc
 3628800

 5040

 fibc
 6765

 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/lispScript" : 23.2 :: we are now at : etc/lispScript : 28.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xc94af37f -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000077d2c94af37f : disassembly at etc/lispScript : 28.17 :
0x77d2c94af37f    4d897e08                mov [r14+0x8], r15                                     
0x77d2c94af383    4d8d7e08                lea r15, [r14+0x8]                                     
0x77d2c94af387    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x77d2c94af38e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x77d2c94af396    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af39b    7e1f                    jle 0xc94af3bc                < Int.fac+61 >
0x77d2c94af39d    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3a1    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3a5    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3a9    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3ad    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3b1    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3b5    49837ff801              cmp qword [r15-0x8], 0x1                               
0x77d2c94af3ba    7fe5                    jg 0xc94af3a1                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3bc    498b4708                mov rax, [r15+0x8]                                     
0x77d2c94af3c0    e900000000              jmp 0x77d2c94af3c5            < Int.fac+70 >
0x77d2c94af3c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x77d2c94af3c9    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x77d2c94af3cd    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x77d2c94af3d0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x000077d2c90bc1a7 :: Compiled at : 0x000077d2c94af37f
 =============================
::> 'wdiss' was called at etc/lispScript 28.17 <::
 5040
bye

including namespaces/compiler/interpreter.csl at namespaces/test/initTest.csl : 86.41 ...
 
xxhi :  
xhi =  7 7 
yhi :  7 
xxhi :  
xhi =  7 7 
zhi :  
yhi :  7 
xxhi :  
xhi =  7 7 7 
xxhi :  
xhi =  7 7
 =============================
C_Syntax.testc1 <:> csl compiled word, prefix
SourceCode for C_Syntax.testc1 :> 
void testc1 () { int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ; int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ; ps ( "\ntdbg =" ) ; p ( tdbg ) ; ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ; ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ; ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ; ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ; ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ; ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4) ; xhi1 p (1 + 2 + 4) ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1 p (1 + 2 + 4) ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ; } 
Source code file location of testc1 : "namespaces/compiler/interpreter.csl" : 37.7 :: we are now at : namespaces/compiler/interpreter.csl : 49.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b0fe71 -- code size = 1219 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.testc1 : definition = 0x00007e8de8b0fe71 : disassembly at namespaces/compiler/interpreter.csl : 49.19 :
0x7e8de8b0fe71    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b0fe75    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b0fe79    4981c638000000          add r14, 0x38                                          
 ..        void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( .. 
0x7e8de8b0fe80    49c7470801000000        mov qword [r15+0x8], 0x1                               
void testc1 ()  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;   .. 
0x7e8de8b0fe88    49c7471002000000        mov qword [r15+0x10], 0x2                              
 ..  {     int tdbg = 1, tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ .. 
0x7e8de8b0fe90    49c7471803000000        mov qword [r15+0x18], 0x3                              
 .. tdbg2 = 2, tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdb .. 
0x7e8de8b0fe98    49c7472004000000        mov qword [r15+0x20], 0x4                              
 .. tdbg3 = 3 ;      int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      .. 
0x7e8de8b0fea0    49c7472805000000        mov qword [r15+0x28], 0x5                              
 ..       int tdbg4 = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntd .. 
0x7e8de8b0fea8    49c7473006000000        mov qword [r15+0x30], 0x6                              
 .. = 4, tdbg5 = 5, tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( t .. 
0x7e8de8b0feb0    48b8b58e81e88d7e0000    mov rax, 0x7e8de8818eb5                                
0x7e8de8b0feba    4983c608                add r14, 0x8                                           
0x7e8de8b0febe    498906                  mov [r14], rax                                         
0x7e8de8b0fec1    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0fecb    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. g6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ .. 
0x7e8de8b0fece    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b0fed2    4983c608                add r14, 0x8                                           
0x7e8de8b0fed6    498906                  mov [r14], rax                                         
 ..  tdbg6 = 6 ;      ps ( "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps  .. 
0x7e8de8b0fed9    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0fee3    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. "\ntdbg =" ) ; p ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( t .. 
0x7e8de8b0fee6    48b8d28e81e88d7e0000    mov rax, 0x7e8de8818ed2                                
0x7e8de8b0fef0    4983c608                add r14, 0x8                                           
0x7e8de8b0fef4    498906                  mov [r14], rax                                         
0x7e8de8b0fef7    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ff01    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. dbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( " .. 
0x7e8de8b0ff04    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b0ff08    4983c608                add r14, 0x8                                           
0x7e8de8b0ff0c    498906                  mov [r14], rax                                         
 ..  ( tdbg ) ;      ps ( "\ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps .. 
0x7e8de8b0ff0f    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0ff19    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ntdbg2 =" ) ; p ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( t .. 
0x7e8de8b0ff1c    48b8f18e81e88d7e0000    mov rax, 0x7e8de8818ef1                                
0x7e8de8b0ff26    4983c608                add r14, 0x8                                           
0x7e8de8b0ff2a    498906                  mov [r14], rax                                         
0x7e8de8b0ff2d    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ff37    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. bg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( " .. 
0x7e8de8b0ff3a    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b0ff3e    4983c608                add r14, 0x8                                           
0x7e8de8b0ff42    498906                  mov [r14], rax                                         
 .. ( tdbg2 ) ;      ps ( "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps .. 
0x7e8de8b0ff45    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0ff4f    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. "\ntdbg3 =" ) ; p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( .. 
0x7e8de8b0ff52    48b8108f81e88d7e0000    mov rax, 0x7e8de8818f10                                
0x7e8de8b0ff5c    4983c608                add r14, 0x8                                           
0x7e8de8b0ff60    498906                  mov [r14], rax                                         
0x7e8de8b0ff63    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ff6d    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\ .. 
0x7e8de8b0ff70    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b0ff74    4983c608                add r14, 0x8                                           
0x7e8de8b0ff78    498906                  mov [r14], rax                                         
 .. p ( tdbg3 ) ;    ps ( "\ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps .. 
0x7e8de8b0ff7b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0ff85    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ntdbg4 =" ) ; p ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( " .. 
0x7e8de8b0ff88    48b82f8f81e88d7e0000    mov rax, 0x7e8de8818f2f                                
0x7e8de8b0ff92    4983c608                add r14, 0x8                                           
0x7e8de8b0ff96    498906                  mov [r14], rax                                         
0x7e8de8b0ff99    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ffa3    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. bg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii ( .. 
0x7e8de8b0ffa6    498b4728                mov rax, [r15+0x28]                                    
0x7e8de8b0ffaa    4983c608                add r14, 0x8                                           
0x7e8de8b0ffae    498906                  mov [r14], rax                                         
 .. ( tdbg4 ) ;      ps ( "\ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xh .. 
0x7e8de8b0ffb1    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0ffbb    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. ntdbg5 =" ) ; p ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi .. 
0x7e8de8b0ffbe    48b84e8f81e88d7e0000    mov rax, 0x7e8de8818f4e                                
0x7e8de8b0ffc8    4983c608                add r14, 0x8                                           
0x7e8de8b0ffcc    498906                  mov [r14], rax                                         
0x7e8de8b0ffcf    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b0ffd9    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. bg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; x .. 
0x7e8de8b0ffdc    498b4730                mov rax, [r15+0x30]                                    
0x7e8de8b0ffe0    4983c608                add r14, 0x8                                           
0x7e8de8b0ffe4    498906                  mov [r14], rax                                         
 .. ( tdbg5 ) ;      ps ( "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   .. 
0x7e8de8b0ffe7    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b0fff1    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..  "\ntdbg6 =" ) ; p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4) .. 
0x7e8de8b0fff4    48b86f8f81e88d7e0000    mov rax, 0x7e8de8818f6f                                
0x7e8de8b0fffe    4983c608                add r14, 0x8                                           
0x7e8de8b10002    498906                  mov [r14], rax                                         
0x7e8de8b10005    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1000f    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi0 .. 
0x7e8de8b10012    48b8918f81e88d7e0000    mov rax, 0x7e8de8818f91                                
0x7e8de8b1001c    4983c608                add r14, 0x8                                           
0x7e8de8b10020    498906                  mov [r14], rax                                         
 ..  p ( tdbg6 ) ;    ps ("\nlast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); .. 
0x7e8de8b10023    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1002d    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ast line"); ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2  .. 
0x7e8de8b10030    b804000000              mov eax, 0x4                                           
0x7e8de8b10035    4983c608                add r14, 0x8                                           
0x7e8de8b10039    498906                  mov [r14], rax                                         
0x7e8de8b1003c    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b10040    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10044    4981c608000000          add r14, 0x8                                           
0x7e8de8b1004b    b803000000              mov eax, 0x3                                           
0x7e8de8b10050    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b10054    4803c1                  add rax, rcx                                           
0x7e8de8b10057    4983c608                add r14, 0x8                                           
0x7e8de8b1005b    498906                  mov [r14], rax                                         
0x7e8de8b1005e    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10068    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b1006b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1006f    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b10073    4983ee08                sub r14, 0x8                                           
 ..  ps ( "\nxhii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      x .. 
0x7e8de8b10077    b804000000              mov eax, 0x4                                           
0x7e8de8b1007c    4983c608                add r14, 0x8                                           
0x7e8de8b10080    498906                  mov [r14], rax                                         
0x7e8de8b10083    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b10087    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1008b    4981c608000000          add r14, 0x8                                           
0x7e8de8b10092    48b8848c81e88d7e0000    mov rax, 0x7e8de8818c84                                
0x7e8de8b1009c    4983c608                add r14, 0x8                                           
0x7e8de8b100a0    498906                  mov [r14], rax                                         
0x7e8de8b100a3    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b100ad    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b100b0    b803000000              mov eax, 0x3                                           
0x7e8de8b100b5    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b100b9    4803c1                  add rax, rcx                                           
0x7e8de8b100bc    4983c608                add r14, 0x8                                           
0x7e8de8b100c0    498906                  mov [r14], rax                                         
0x7e8de8b100c3    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b100cd    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b100d0    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b100d4    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b100d8    4983ee08                sub r14, 0x8                                           
 ..  =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; x .. 
0x7e8de8b100dc    b803000000              mov eax, 0x3                                           
 .. xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 .. 
0x7e8de8b100e1    b904000000              mov ecx, 0x4                                           
 .. ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p  .. 
0x7e8de8b100e6    4803c1                  add rax, rcx                                           
0x7e8de8b100e9    4983c608                add r14, 0x8                                           
0x7e8de8b100ed    498906                  mov [r14], rax                                         
 .. hii =" ) ; xhii (4)) ; xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl     .. 
0x7e8de8b100f0    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b100fa    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..  (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; x .. 
0x7e8de8b100fd    b803000000              mov eax, 0x3                                           
 .. xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8))  .. 
0x7e8de8b10102    b904000000              mov ecx, 0x4                                           
 .. ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8) .. 
0x7e8de8b10107    4803c1                  add rax, rcx                                           
0x7e8de8b1010a    4983c608                add r14, 0x8                                           
0x7e8de8b1010e    498906                  mov [r14], rax                                         
 .. xhi (4)) ; xhi0p (1 + 2 + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)    .. 
0x7e8de8b10111    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b1011b    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. + 4)   ; xhi1 p (1 + 2 + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xh .. 
0x7e8de8b1011e    b804000000              mov eax, 0x4                                           
0x7e8de8b10123    4983c608                add r14, 0x8                                           
0x7e8de8b10127    498906                  mov [r14], rax                                         
0x7e8de8b1012a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1012e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10132    4981c608000000          add r14, 0x8                                           
0x7e8de8b10139    48b8848c81e88d7e0000    mov rax, 0x7e8de8818c84                                
0x7e8de8b10143    4983c608                add r14, 0x8                                           
0x7e8de8b10147    498906                  mov [r14], rax                                         
0x7e8de8b1014a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b10154    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b10157    b803000000              mov eax, 0x3                                           
0x7e8de8b1015c    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b10160    4803c1                  add rax, rcx                                           
0x7e8de8b10163    4983c608                add r14, 0x8                                           
0x7e8de8b10167    498906                  mov [r14], rax                                         
0x7e8de8b1016a    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10174    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b10177    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1017b    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1017f    4983ee08                sub r14, 0x8                                           
 .. 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b10183    b803000000              mov eax, 0x3                                           
 .. xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b10188    b904000000              mov ecx, 0x4                                           
 .. ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b1018d    4803c1                  add rax, rcx                                           
0x7e8de8b10190    4983c608                add r14, 0x8                                           
0x7e8de8b10194    498906                  mov [r14], rax                                         
 ..  + 4)    ; xhi( 4 )); xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b10197    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b101a1    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b101a4    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b101ae    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b101b8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b101bb    b803000000              mov eax, 0x3                                           
 ..  4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b101c0    b904000000              mov ecx, 0x4                                           
 ..  + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b101c5    4803c1                  add rax, rcx                                           
0x7e8de8b101c8    4983c608                add r14, 0x8                                           
0x7e8de8b101cc    498906                  mov [r14], rax                                         
 ..  p (1 + 2 + 4)      xhe1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b101cf    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b101d9    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 1 nl    ; xhi1 p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b101dc    b808000000              mov eax, 0x8                                           
0x7e8de8b101e1    4983c608                add r14, 0x8                                           
0x7e8de8b101e5    498906                  mov [r14], rax                                         
0x7e8de8b101e8    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b101ec    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b101f0    4981c608000000          add r14, 0x8                                           
0x7e8de8b101f7    48b8918a81e88d7e0000    mov rax, 0x7e8de8818a91       < string : 'xhi1' >
0x7e8de8b10201    4983c608                add r14, 0x8                                           
0x7e8de8b10205    498906                  mov [r14], rax                                         
0x7e8de8b10208    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1020c    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10210    4981c608000000          add r14, 0x8                                           
0x7e8de8b10217    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1021b    4983c608                add r14, 0x8                                           
0x7e8de8b1021f    498906                  mov [r14], rax                                         
0x7e8de8b10222    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1022c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10236    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b10239    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b10243    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b10246    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1024a    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1024e    4983ee08                sub r14, 0x8                                           
0x7e8de8b10252    b803000000              mov eax, 0x3                                           
0x7e8de8b10257    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b1025b    4803c1                  add rax, rcx                                           
0x7e8de8b1025e    4983c608                add r14, 0x8                                           
0x7e8de8b10262    498906                  mov [r14], rax                                         
0x7e8de8b10265    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b1026f    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b10272    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b10276    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1027a    4983ee08                sub r14, 0x8                                           
 ..  p (1 + 2 + 4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b1027e    48b8cd8f81e88d7e0000    mov rax, 0x7e8de8818fcd       < string : 'xhi2a =' >
0x7e8de8b10288    4983c608                add r14, 0x8                                           
0x7e8de8b1028c    498906                  mov [r14], rax                                         
 ..  4)   ; xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b1028f    b808000000              mov eax, 0x8                                           
0x7e8de8b10294    4983c608                add r14, 0x8                                           
0x7e8de8b10298    498906                  mov [r14], rax                                         
0x7e8de8b1029b    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1029f    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b102a3    4981c608000000          add r14, 0x8                                           
0x7e8de8b102aa    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b102ae    4983c608                add r14, 0x8                                           
0x7e8de8b102b2    498906                  mov [r14], rax                                         
0x7e8de8b102b5    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b102b9    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b102bd    4981c608000000          add r14, 0x8                                           
0x7e8de8b102c4    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b102c8    4983c608                add r14, 0x8                                           
0x7e8de8b102cc    498906                  mov [r14], rax                                         
0x7e8de8b102cf    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b102d9    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b102e3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b102e6    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b102f0    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b102f3    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b102f7    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b102fb    4983ee08                sub r14, 0x8                                           
0x7e8de8b102ff    b803000000              mov eax, 0x3                                           
0x7e8de8b10304    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b10308    4803c1                  add rax, rcx                                           
0x7e8de8b1030b    4983c608                add r14, 0x8                                           
0x7e8de8b1030f    498906                  mov [r14], rax                                         
0x7e8de8b10312    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b1031c    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b1031f    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b10323    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b10327    4983ee10                sub r14, 0x10                                          
0x7e8de8b1032b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1032f    4d8b7e08                mov r15, [r14+0x8]                                     
 .. xhi2(8)) ; xhi2a ( "xhi2a =", 8 )) ;  }  .. 
0x7e8de8b10333    c3                      ret                                                    
Word_Disassemble : word - 'testc1' :: codeSize = 1219
Word : 0x00007e8de440ae86 :: Compiled at : 0x00007e8de8b0fe71
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 49.19 <::
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
 =============================
C_Syntax.interpret <:> csl compiled word
SourceCode for C_Syntax.interpret :> 
void interpret ( | atoken aword ) { testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4) xhe1 nl ; xhi1p (1 + 2 + 4) ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ; nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ; while ( 1 ) { atoken = token () ; if ( ! atoken ) break ; oPrintf ( "\n\tinterpret : token = %s", atoken ) ; if ( StringEqual ( atoken, "ihalt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ; break ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } label: done ; } 
Source code file location of interpret : "namespaces/compiler/interpreter.csl" : 55.10 :: we are now at : namespaces/compiler/interpreter.csl : 90.14
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b10339 -- code size = 878 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret : definition = 0x00007e8de8b10339 : disassembly at namespaces/compiler/interpreter.csl : 90.14 :
0x7e8de8b10339    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1033d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10341    4981c618000000          add r14, 0x18                                          
 void interpret ( | atoken aword )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; .. 
0x7e8de8b10348    49bb71feb0e88d7e0000    mov r11, 0x7e8de8b0fe71                                
0x7e8de8b10352    49ffd3                  call r11                      < C_Syntax.testc1 : 0x00007e8de8b0fe71 >
 ..  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      .. 
0x7e8de8b10355    b803000000              mov eax, 0x3                                           
 .. estc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; .. 
0x7e8de8b1035a    b9040000004803c149      mov r9, 0x49c1034800000004                              
0x7e8de8b10363    83c608                  add esi, 0x8                                           
0x7e8de8b10366    498906                  mov [r14], rax                                         
 ..  )  {     testc1 () ; xhi01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;   .. 
0x7e8de8b10369    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10373    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. i01 xhe0 xhi1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps .. 
0x7e8de8b10376    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b10380    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1038a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret : .. 
0x7e8de8b1038d    b803000000              mov eax, 0x3                                           
 .. + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ;  .. 
0x7e8de8b10392    b904000000              mov ecx, 0x4                                           
 .. 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " )  .. 
0x7e8de8b10397    4803c1                  add rax, rcx                                           
0x7e8de8b1039a    4983c608                add r14, 0x8                                           
0x7e8de8b1039e    498906                  mov [r14], rax                                         
 .. 1 p (1 + 2 + 4)      xhe1 nl    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpre .. 
0x7e8de8b103a1    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b103ab    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..    ; xhi1p (1 + 2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while .. 
0x7e8de8b103ae    b808000000              mov eax, 0x8                                           
0x7e8de8b103b3    4983c608                add r14, 0x8                                           
0x7e8de8b103b7    498906                  mov [r14], rax                                         
0x7e8de8b103ba    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b103be    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b103c2    4981c608000000          add r14, 0x8                                           
0x7e8de8b103c9    48b8918a81e88d7e0000    mov rax, 0x7e8de8818a91       < string : 'xhi1' >
0x7e8de8b103d3    4983c608                add r14, 0x8                                           
0x7e8de8b103d7    498906                  mov [r14], rax                                         
0x7e8de8b103da    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b103de    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b103e2    4981c608000000          add r14, 0x8                                           
0x7e8de8b103e9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b103ed    4983c608                add r14, 0x8                                           
0x7e8de8b103f1    498906                  mov [r14], rax                                         
0x7e8de8b103f4    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b103fe    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10408    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b1040b    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b10415    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b10418    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1041c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b10420    4983ee08                sub r14, 0x8                                           
0x7e8de8b10424    b803000000              mov eax, 0x3                                           
0x7e8de8b10429    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b1042d    4803c1                  add rax, rcx                                           
0x7e8de8b10430    4983c608                add r14, 0x8                                           
0x7e8de8b10434    498906                  mov [r14], rax                                         
0x7e8de8b10437    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10441    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b10444    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b10448    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1044c    4983ee08                sub r14, 0x8                                           
 ..  2 + 4)   ( ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {    .. 
0x7e8de8b10450    48b86e9281e88d7e0000    mov rax, 0x7e8de881926e       < string : 'xhi2a =' >
0x7e8de8b1045a    4983c608                add r14, 0x8                                           
0x7e8de8b1045e    498906                  mov [r14], rax                                         
 ..  ) ; xhi2 ( 8 )) ; xhi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            at .. 
0x7e8de8b10461    b808000000              mov eax, 0x8                                           
0x7e8de8b10466    4983c608                add r14, 0x8                                           
0x7e8de8b1046a    498906                  mov [r14], rax                                         
0x7e8de8b1046d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b10471    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10475    4981c608000000          add r14, 0x8                                           
0x7e8de8b1047c    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b10480    4983c608                add r14, 0x8                                           
0x7e8de8b10484    498906                  mov [r14], rax                                         
0x7e8de8b10487    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1048b    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1048f    4981c608000000          add r14, 0x8                                           
0x7e8de8b10496    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1049a    4983c608                add r14, 0x8                                           
0x7e8de8b1049e    498906                  mov [r14], rax                                         
0x7e8de8b104a1    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b104ab    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b104b5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b104b8    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b104c2    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b104c5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b104c9    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b104cd    4983ee08                sub r14, 0x8                                           
0x7e8de8b104d1    b803000000              mov eax, 0x3                                           
0x7e8de8b104d6    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b104da    4803c1                  add rax, rcx                                           
0x7e8de8b104dd    4983c608                add r14, 0x8                                           
0x7e8de8b104e1    498906                  mov [r14], rax                                         
0x7e8de8b104e4    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b104ee    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
0x7e8de8b104f1    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b104f5    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b104f9    4983ee10                sub r14, 0x10                                          
0x7e8de8b104fd    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b10507    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10511    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. hi2a ( "xhi2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;    .. 
0x7e8de8b10514    49baf0d6313f345b0000    mov r10, 0x5b343f31d6f0                                
0x7e8de8b1051e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10528    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! a .. 
0x7e8de8b1052b    48b8929281e88d7e0000    mov rax, 0x7e8de8819292       < string : 'interpret :> ' >
0x7e8de8b10535    4983c608                add r14, 0x8                                           
0x7e8de8b10539    498906                  mov [r14], rax                                         
 .. i2a =", 8 )) ;      nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if  .. 
0x7e8de8b1053c    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b10546    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;      .. 
0x7e8de8b10549    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b10553    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1055d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. terpret :> " ) ; nl ( ) ;     while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\ti .. 
0x7e8de8b10560    b801000000              mov r8d, 0x1                                           
0x7e8de8b10565    4883f800                cmp rax, 0x0                                           
0x7e8de8b10569    0f842f010000            jz 0x7e8de8b1069e             < C_Syntax.interpret+869 >
0x7e8de8b1056f    49ba30dd313f345b0000    mov r10, 0x5b343f31dd30                                
0x7e8de8b10579    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10583    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atok .. 
0x7e8de8b10586    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b1058a    488bc8                  mov rcx, rax                                           
0x7e8de8b1058d    498b06                  mov rax, [r14]                                         
0x7e8de8b10590    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atok .. 
0x7e8de8b10594    488901                  mov [rcx], rax                                         
 ..   atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( S .. 
0x7e8de8b10597    498b4708                mov rax, [r15+0x8]                                     
 ..     atoken = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( .. 
0x7e8de8b1059b    4883f800                cmp rax, 0x0                                           
0x7e8de8b1059f    7509                    jnz 0xe8b105aa                < C_Syntax.interpret+625 >
0x7e8de8b105a1    0f1f4000                nop [rax]                                              
 .. = token () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqua .. 
0x7e8de8b105a5    e9f4000000              jmp 0x7e8de8b1069e            < C_Syntax.interpret+869 >
 .. ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )     .. 
0x7e8de8b105aa    48b8a23f4ce88d7e0000    mov rax, 0x7e8de84c3fa2                                
0x7e8de8b105b4    488bf8                  mov rdi, rax                                           
 .. rintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oP .. 
0x7e8de8b105b7    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b105bb    488bf0                  mov rsi, rax                                           
0x7e8de8b105be    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b105c8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b105d2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting .. 
0x7e8de8b105d5    498b4708                mov rax, [r15+0x8]                                     
 .. n () ;          if ( ! atoken ) break ;          oPrintf ( "\n\tinterpret : token = %s", atoken ) ;                 if ( StringEqual ( at .. 
0x7e8de8b105d9    4983c608                add r14, 0x8                                           
0x7e8de8b105dd    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", a .. 
0x7e8de8b105e0    48b8379381e88d7e0000    mov rax, 0x7e8de8819337       < string : 'ihalt' >
0x7e8de8b105ea    4983c608                add r14, 0x8                                           
0x7e8de8b105ee    498906                  mov [r14], rax                                         
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: int .. 
0x7e8de8b105f1    49bb7a14b0e88d7e0000    mov r11, 0x7e8de8b0147a                                
0x7e8de8b105fb    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x00007e8de8b0147a >
 ..  if ( StringEqual ( atoken, "ihalt" ) )                 {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;  .. 
0x7e8de8b105fe    498b06                  mov rax, [r14]                                         
0x7e8de8b10601    4983ee08                sub r14, 0x8                                           
0x7e8de8b10605    4883f800                cmp rax, 0x0                                           
0x7e8de8b10609    7439                    jz 0xe8b10644                 < C_Syntax.interpret+779 >
0x7e8de8b1060b    0f1f4000                nop [rax]                                              
 ..              {              oPrintf ( "\n\n\ttoken = %s :: interpret exiting ...", atoken ) ;              break ;                        .. 
0x7e8de8b1060f    48b8a9404ce88d7e0000    mov rax, 0x7e8de84c40a9                                
0x7e8de8b10619    488bf8                  mov rdi, rax                                           
 .. token = %s :: interpret exiting ...", atoken ) ;              break ;                              }                 else         {       .. 
0x7e8de8b1061c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b10620    488bf0                  mov rsi, rax                                           
0x7e8de8b10623    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b1062d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10637    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b1063a    e95f000000              jmp 0x7e8de8b1069e            < C_Syntax.interpret+869 >
0x7e8de8b1063f    e955000000              jmp 0x7e8de8b10699            < C_Syntax.interpret+864 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x7e8de8b10644    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b10648    4983c608                add r14, 0x8                                           
0x7e8de8b1064c    498906                  mov [r14], rax                                         
0x7e8de8b1064f    49bad0e5313f345b0000    mov r10, 0x5b343f31e5d0                                
0x7e8de8b10659    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10663    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x7e8de8b10666    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b1066a    488bc8                  mov rcx, rax                                           
0x7e8de8b1066d    498b06                  mov rax, [r14]                                         
0x7e8de8b10670    4983ee08                sub r14, 0x8                                           
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x7e8de8b10674    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }     label: done ; }  .. 
0x7e8de8b10677    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b1067b    4983c608                add r14, 0x8                                           
0x7e8de8b1067f    498906                  mov [r14], rax                                         
0x7e8de8b10682    49bac0e2313f345b0000    mov r10, 0x5b343f31e2c0                                
0x7e8de8b1068c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10696    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..            doWord ( aword ) ;         }     }     label: done ; }  .. 
0x7e8de8b10699    e9c2feffff              jmp 0x7e8de8b10560            < C_Syntax.interpret+551 >
0x7e8de8b1069e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b106a2    4d8b7e08                mov r15, [r14+0x8]                                     
 .. ) ;         }     }     label: done ; }  .. 
0x7e8de8b106a6    c3                      ret                                                    
Word_Disassemble : word - 'interpret' :: codeSize = 878
Word : 0x00007e8de4417e86 :: Compiled at : 0x00007e8de8b10339
 =============================
::> 'wdiss' was called at namespaces/compiler/interpreter.csl 90.14 <::
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :> 

        interpret : token = c_syntaxOff
        interpret : token = using
Using Namespaces :> libc void C Root Dlsym int Defines Interpreter System Shell String Compiler User Combinators Class Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

        interpret : token = //
        interpret : token = User
        interpret : token = :
        interpret : token = 1
        interpret : token = 2
        interpret : token = +
        interpret : token = p
        interpret : token = ;
        interpret : token = hi1 3
        interpret : token = :
        interpret : token = hi1
        interpret : token = hi1
        interpret : token = ;
        interpret : token = :
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = hey1
        interpret : token = ;
        interpret : token = nl

        interpret : token = heey1 3 3 3 3 3 3
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... hi
including namespaces/test/stack.csl at namespaces/test/initTest.csl : 86.41 ...

DataStack at : namespaces/test/stack.csl : 2.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.27 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.45 :
DataStack depth =   9 : Dsp (R14) = Top = 0x00007e8de7910b00, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b00 > = 0x0000000000000000
  DataStack   [  -1 ] < 0x00007e8de7910af8 > = 0x0000000000000001
  DataStack   [  -2 ] < 0x00007e8de7910af0 > = 0x0000000000000002
  DataStack   [  -3 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -4 ] < 0x00007e8de7910ae0 > = 0x0000000000000004
  DataStack   [  -5 ] < 0x00007e8de7910ad8 > = 0x0000000000000005
  DataStack   [  -6 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 2.53 :
DataStack depth =  10 : Dsp (R14) = Top = 0x00007e8de7910b08, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b08 > = 0x0000000000000003
  DataStack   [  -1 ] < 0x00007e8de7910b00 > = 0x0000000000000000
  DataStack   [  -2 ] < 0x00007e8de7910af8 > = 0x0000000000000001
  DataStack   [  -3 ] < 0x00007e8de7910af0 > = 0x0000000000000002
  DataStack   [  -4 ] < 0x00007e8de7910ae8 > = 0x0000000000000003
  DataStack   [  -5 ] < 0x00007e8de7910ae0 > = 0x0000000000000004
  DataStack   [  -6 ] < 0x00007e8de7910ad8 > = 0x0000000000000005
  DataStack   [  -7 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -8 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
3
DataStack at : namespaces/test/stack.csl : 2.81 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 1
DataStack at : namespaces/test/stack.csl : 4.9 :
DataStack depth =   4 : Dsp (R14) = Top = 0x00007e8de7910ad8, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad8 > = 0x0000000000000001
  DataStack   [  -1 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 
testpick : above line should read 1

including namespaces/compiler/c_syntax.csl at namespaces/test/initTest.csl : 86.41 ...
 namespaces/compiler/c_syntax.csl 7.9
hello 7

 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :> 
define xtc( a ) a @ ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 25.8 :: we are now at : namespaces/compiler/c_syntax.csl : 26.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1087a -- code size = 52 bytes
TypeSignature : 
 -----------------------------
Word :: Defines.xtc : definition = 0x00007e8de8b1087a : disassembly at namespaces/compiler/c_syntax.csl : 26.8 :
0x7e8de8b1087a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1087e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10882    4981c608000000          add r14, 0x8                                           
 ..                       define xtc( a ) a @ ps .. 
0x7e8de8b10889    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1088d    4983c608                add r14, 0x8                                           
0x7e8de8b10891    498906                  mov [r14], rax                                         
0x7e8de8b10894    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1089e    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b108a1    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b108a5    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b108a9    4983ee08                sub r14, 0x8                                           
 ..                   define xtc( a ) a @ ps .. 
0x7e8de8b108ad    c3                      ret                                                    
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x00007e8de4424ef6 :: Compiled at : 0x00007e8de8b1087a
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 26.8 <::
 
 xtc : hi
 =============================
Defines.xtc <:> csl compiled word, inline
SourceCode for Defines.xtc :> 
define xtc( a ) a ps
Source code file location of xtc : "namespaces/compiler/c_syntax.csl" : 31.8 :: we are now at : namespaces/compiler/c_syntax.csl : 32.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b108b3 -- code size = 52 bytes
TypeSignature : 
 -----------------------------
Word :: Defines.xtc : definition = 0x00007e8de8b108b3 : disassembly at namespaces/compiler/c_syntax.csl : 32.8 :
0x7e8de8b108b3    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b108b7    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b108bb    4981c608000000          add r14, 0x8                                           
 ..                       define xtc( a ) a ps .. 
0x7e8de8b108c2    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b108c6    4983c608                add r14, 0x8                                           
0x7e8de8b108ca    498906                  mov [r14], rax                                         
0x7e8de8b108cd    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b108d7    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b108da    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b108de    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b108e2    4983ee08                sub r14, 0x8                                           
 ..                     define xtc( a ) a ps .. 
0x7e8de8b108e6    c3                      ret                                                    
Word_Disassemble : word - 'xtc' :: codeSize = 52
Word : 0x00007e8de4424ef6 :: Compiled at : 0x00007e8de8b108b3
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 32.8 <::
 
 xtc : hi CObj size = 104
DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 49.15 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

Dump at : namespaces/compiler/c_syntax.csl : 52.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff593 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

        chey.hi = 1234 255
Dump at : namespaces/compiler/c_syntax.csl : 58.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff593 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

        chey.heey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 61.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff593 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5a3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

Dump at : namespaces/compiler/c_syntax.csl : 69.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff593 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

        chey.hey = 123456789abcdef
Dump at : namespaces/compiler/c_syntax.csl : 76.25 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  00 00 ff 00 00 00 00 00  ........ ........ 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 16 00 00 00 00 00  ........ ........ 
0x00007e8de88ff593 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

CObj.size = 104

chey = 7e8de88ff573

chey.hey = 123456789abcdef

&chey.hey = 7e8de88ff59b 0x0123456789abcdef 0x00007e8de88ff59b
        hoot
Dump at : namespaces/compiler/c_syntax.csl : 93.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well.... 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x00007e8de88ff593 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 96.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 00 00 00 00  ........ well.... 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x00007e8de88ff593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 98.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  68 6f 6f 74 00 00 00 00  ........ hoot.... 
0x00007e8de88ff583 :  00 00 00 00 00 00 00 00  00 00 0a 09 68 6f 6f 74  ........ ....hoot 
0x00007e8de88ff593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 100.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  6f 6b 21 20 64 6f 6e 27  ........ ok! don' 
0x00007e8de88ff583 :  74 20 68 6f 6f 74 00 00  00 00 0a 09 68 6f 6f 74  t hoot.. ....hoot 
0x00007e8de88ff593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

Dump at : namespaces/compiler/c_syntax.csl : 102.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x00007e8de88ff583 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x00007e8de88ff593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

        don't

        hoot

Dump at : namespaces/compiler/c_syntax.csl : 106.24 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x00007e8de88ff583 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x00007e8de88ff593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 

 =============================
C_Syntax.chi <:> csl compiled word, prefix
SourceCode for C_Syntax.chi :> 
void chi ( CObj * chey0 | a b c d ) { c = 1 + 2 ; b = c + 2 ; a = b + c ; nl p ( c ) ; c 3 "c should be 3" assert p ( b ) ; b 5 "b should be 5" assert p ( a ) ; a 8 "a should be 8" assert dump ( chey0, CObj.size ) ; d = chey0->hey ; hex p ( d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ; oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; d = chey0.hey ; oPrintf ( "\n%lx\n", d ) ; oPrintf ( "\n chi : d = %lx\n", d ) ; _assert ( d #x0123456789abcdef ) ; oPrintf ( "\n%x\n", CObj.chey0.hey ) ; sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ; dump ( chey0, CObj.size ) ; } 
Source code file location of chi : "namespaces/compiler/c_syntax.csl" : 114.4 :: we are now at : namespaces/compiler/c_syntax.csl : 141.8
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b10e48 -- code size = 1163 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.chi : definition = 0x00007e8de8b10e48 : disassembly at namespaces/compiler/c_syntax.csl : 141.8 :
0x7e8de8b10e48    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b10e4c    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b10e50    4981c628000000          add r14, 0x28                                          
 ..  ( CObj * chey0 | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b )  .. 
0x7e8de8b10e57    b803000000              mov eax, 0x3                                           
0x7e8de8b10e5c    49894718                mov [r15+0x18], rax                                    
 .. | a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should  .. 
0x7e8de8b10e60    498b4718                mov rax, [r15+0x18]                                    
 .. b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5 .. 
0x7e8de8b10e64    b902000000              mov ecx, 0x2                                           
 .. a b c d ) {     c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be .. 
0x7e8de8b10e69    4803c1                  add rax, rcx                                           
0x7e8de8b10e6c    49894710                mov [r15+0x10], rax                                    
 ..   c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert     .. 
0x7e8de8b10e70    498b4710                mov rax, [r15+0x10]                                    
 .. = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p (  .. 
0x7e8de8b10e74    498b4f18                mov rcx, [r15+0x18]                                    
 .. c = 1 + 2 ;     b = c + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p  .. 
0x7e8de8b10e78    4803c1                  add rax, rcx                                           
0x7e8de8b10e7b    49894708                mov [r15+0x8], rax                                     
0x7e8de8b10e7f    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b10e89    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10e93    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  + 2 ;     a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should .. 
0x7e8de8b10e96    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b10e9a    4983c608                add r14, 0x8                                           
0x7e8de8b10e9e    498906                  mov [r14], rax                                         
0x7e8de8b10ea1    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10eab    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..      a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" .. 
0x7e8de8b10eae    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b10eb2    4983c608                add r14, 0x8                                           
0x7e8de8b10eb6    498906                  mov [r14], rax                                         
 ..    a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" a .. 
0x7e8de8b10eb9    b803000000              mov eax, 0x3                                           
0x7e8de8b10ebe    4983c608                add r14, 0x8                                           
0x7e8de8b10ec2    498906                  mov [r14], rax                                         
 ..  a = b + c ;     nl     p ( c ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" ass .. 
0x7e8de8b10ec5    48b8aba081e88d7e0000    mov rax, 0x7e8de881a0ab       < string : 'c should be 3' >
0x7e8de8b10ecf    4983c608                add r14, 0x8                                           
0x7e8de8b10ed3    498906                  mov [r14], rax                                         
0x7e8de8b10ed6    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b10ee0    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. ) ; c 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size .. 
0x7e8de8b10ee3    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b10ee7    4983c608                add r14, 0x8                                           
0x7e8de8b10eeb    498906                  mov [r14], rax                                         
0x7e8de8b10eee    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10ef8    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 3 "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;   .. 
0x7e8de8b10efb    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b10eff    4983c608                add r14, 0x8                                           
0x7e8de8b10f03    498906                  mov [r14], rax                                         
 .. "c should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;     .. 
0x7e8de8b10f06    b805000000              mov eax, 0x5                                           
0x7e8de8b10f0b    4983c608                add r14, 0x8                                           
0x7e8de8b10f0f    498906                  mov [r14], rax                                         
 ..  should be 3" assert    p ( b ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;       .. 
0x7e8de8b10f12    48b8dba081e88d7e0000    mov rax, 0x7e8de881a0db       < string : 'b should be 5' >
0x7e8de8b10f1c    4983c608                add r14, 0x8                                           
0x7e8de8b10f20    498906                  mov [r14], rax                                         
0x7e8de8b10f23    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b10f2d    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 .. ) ; b 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d .. 
0x7e8de8b10f30    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b10f34    4983c608                add r14, 0x8                                           
0x7e8de8b10f38    498906                  mov [r14], rax                                         
0x7e8de8b10f3b    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10f45    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 5 "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;   .. 
0x7e8de8b10f48    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b10f4c    4983c608                add r14, 0x8                                           
0x7e8de8b10f50    498906                  mov [r14], rax                                         
 .. "b should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;     .. 
0x7e8de8b10f53    b808000000              mov eax, 0x8                                           
0x7e8de8b10f58    4983c608                add r14, 0x8                                           
0x7e8de8b10f5c    498906                  mov [r14], rax                                         
 ..  should be 5" assert    p ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oP .. 
0x7e8de8b10f5f    48b80ba181e88d7e0000    mov rax, 0x7e8de881a10b       < string : 'a should be 8' >
0x7e8de8b10f69    4983c608                add r14, 0x8                                           
0x7e8de8b10f6d    498906                  mov [r14], rax                                         
0x7e8de8b10f70    49bbf20ab0e88d7e0000    mov r11, 0x7e8de8b00af2                                
0x7e8de8b10f7a    49ffd3                  call r11                      < C._assert1 : 0x00007e8de8b00af2 >
 ..  a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) .. 
0x7e8de8b10f7d    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b10f81    4881c000000000          add rax, 0x0                                           
0x7e8de8b10f88    4983c608                add r14, 0x8                                           
0x7e8de8b10f8c    498906                  mov [r14], rax                                         
 .. ld be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprin .. 
0x7e8de8b10f8f    48b85e6d42e48d7e0000    mov rax, 0x7e8de4426d5e       < string : 'h' >
0x7e8de8b10f99    488b00                  mov rax, [rax]                                         
0x7e8de8b10f9c    4983c608                add r14, 0x8                                           
0x7e8de8b10fa0    498906                  mov [r14], rax                                         
 .. ( a ) ; a 8 "a should be 8" assert    dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\ .. 
0x7e8de8b10fa3    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b10fad    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10fb7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  dump ( chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, .. 
0x7e8de8b10fba    498b47f8                mov rax, [r15-0x8]                                     
 ..  chey0, CObj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\ .. 
0x7e8de8b10fbe    4881c028000000          add rax, 0x28                                          
0x7e8de8b10fc5    488b00                  mov rax, [rax]                                         
0x7e8de8b10fc8    49894720                mov [r15+0x20], rax                                    
 .. bj.size ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx .. 
0x7e8de8b10fcc    49ba40fa313f345b0000    mov r10, 0x5b343f31fa40                                
0x7e8de8b10fd6    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b10fe0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; .. 
0x7e8de8b10fe3    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b10fe7    4983c608                add r14, 0x8                                           
0x7e8de8b10feb    498906                  mov [r14], rax                                         
 .. ize ) ;      d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d .. 
0x7e8de8b10fee    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b10ff8    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. >hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n c .. 
0x7e8de8b10ffb    48b8a1f24ce88d7e0000    mov rax, 0x7e8de84cf2a1                                
0x7e8de8b11005    488bf8                  mov rdi, rax                                           
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ; .. 
0x7e8de8b11008    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b1100c    488bf0                  mov rsi, rax                                           
 .. d = chey0->hey ;     hex p ( d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrin .. 
0x7e8de8b1100f    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b11019    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11023    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0 .. 
0x7e8de8b11026    498b47f8                mov rax, [r15-0x8]                                     
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars .. 
0x7e8de8b1102a    4881c008000000          add rax, 0x8                                           
0x7e8de8b11031    488bf8                  mov rdi, rax                                           
 .. n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\ .. 
0x7e8de8b11034    48b8b2f24ce88d7e0000    mov rax, 0x7e8de84cf2b2                                
0x7e8de8b1103e    488bf0                  mov rsi, rax                                           
 .. tf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx",  .. 
0x7e8de8b11041    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b11045    488bd0                  mov rdx, rax                                           
0x7e8de8b11048    b803000000              mov eax, 0x3                                           
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprin .. 
0x7e8de8b1104d    49ba409e61e98d7e0000    mov r10, 0x7e8de9619e40                                
0x7e8de8b11057    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11061    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ; .. 
0x7e8de8b11064    48b8bff24ce88d7e0000    mov rax, 0x7e8de84cf2bf                                
0x7e8de8b1106e    488bf8                  mov rdi, rax                                           
 ..  ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n che .. 
0x7e8de8b11071    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b11075    488bf0                  mov rsi, rax                                           
 .. y0.chars, "\n\t\they = %lx", d ) ;    oPrintf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.che .. 
0x7e8de8b11078    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b11082    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1108c    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. hi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CO .. 
0x7e8de8b1108f    498b47f8                mov rax, [r15-0x8]                                     
 ..  = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.che .. 
0x7e8de8b11093    4881c038000000          add rax, 0x38                                          
0x7e8de8b1109a    488bf8                  mov rdi, rax                                           
 .. ", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars .. 
0x7e8de8b1109d    48b8d0f24ce88d7e0000    mov rax, 0x7e8de84cf2d0                                
0x7e8de8b110a7    488bf0                  mov rsi, rax                                           
 .. .chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0. .. 
0x7e8de8b110aa    498b47f8                mov rax, [r15-0x8]                                     
 .. 2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 .. 
0x7e8de8b110ae    4881c028000000          add rax, 0x28                                          
0x7e8de8b110b5    4983c608                add r14, 0x8                                           
0x7e8de8b110b9    498906                  mov [r14], rax                                         
0x7e8de8b110bc    488bd0                  mov rdx, rax                                           
0x7e8de8b110bf    b803000000              mov eax, 0x3                                           
 .. ntf ( "\n chi : d = %lx\n", d ) ;     sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = .. 
0x7e8de8b110c4    49ba409e61e98d7e0000    mov r10, 0x7e8de9619e40                                
0x7e8de8b110ce    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b110d8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. x", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0. .. 
0x7e8de8b110db    48b8e1f24ce88d7e0000    mov rax, 0x7e8de84cf2e1                                
0x7e8de8b110e5    488bf8                  mov rdi, rax                                           
 .. intf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n ch .. 
0x7e8de8b110e8    498b47f8                mov rax, [r15-0x8]                                     
 ..  "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d  .. 
0x7e8de8b110ec    4881c008000000          add rax, 0x8                                           
0x7e8de8b110f3    4983c608                add r14, 0x8                                           
0x7e8de8b110f7    498906                  mov [r14], rax                                         
0x7e8de8b110fa    488bf0                  mov rsi, rax                                           
 .. y hey = %lx", &CObj.chey0.hey ) ;     oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &C .. 
0x7e8de8b110fd    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b11107    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11111    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. , &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d =  .. 
0x7e8de8b11114    48b8f5f24ce88d7e0000    mov rax, 0x7e8de84cf2f5                                
0x7e8de8b1111e    488bf8                  mov rdi, rax                                           
 .. ntf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx .. 
0x7e8de8b11121    498b47f8                mov rax, [r15-0x8]                                     
 .. "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d .. 
0x7e8de8b11125    4881c038000000          add rax, 0x38                                          
0x7e8de8b1112c    4983c608                add r14, 0x8                                           
0x7e8de8b11130    498906                  mov [r14], rax                                         
0x7e8de8b11133    488bf0                  mov rsi, rax                                           
 .. rs = %s\n", &CObj.chey0.chars ) ;     oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d )  .. 
0x7e8de8b11136    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b11140    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1114a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n ch .. 
0x7e8de8b1114d    48b80af34ce88d7e0000    mov rax, 0x7e8de84cf30a                                
0x7e8de8b11157    488bf8                  mov rdi, rax                                           
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;  .. 
0x7e8de8b1115a    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b1115e    488bf0                  mov rsi, rax                                           
 .. 2 = %s\n", &CObj.chey0.chars2 ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrint .. 
0x7e8de8b11161    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b1116b    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11175    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ( "\n chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert (  .. 
0x7e8de8b11178    498b47f8                mov rax, [r15-0x8]                                     
 .. chi : d = %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x01 .. 
0x7e8de8b1117c    4881c028000000          add rax, 0x28                                          
0x7e8de8b11183    488b00                  mov rax, [rax]                                         
0x7e8de8b11186    49894720                mov [r15+0x20], rax                                    
 .. ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;   .. 
0x7e8de8b1118a    48b8ebf44ce88d7e0000    mov rax, 0x7e8de84cf4eb                                
0x7e8de8b11194    488bf8                  mov rdi, rax                                           
 ..  chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf .. 
0x7e8de8b11197    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b1119b    488bf0                  mov rsi, rax                                           
 .. %lx\n", d ) ;     d = chey0.hey ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789ab .. 
0x7e8de8b1119e    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b111a8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b111b2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. intf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.ch .. 
0x7e8de8b111b5    48b8f1f44ce88d7e0000    mov rax, 0x7e8de84cf4f1                                
0x7e8de8b111bf    488bf8                  mov rdi, rax                                           
 .. ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprint .. 
0x7e8de8b111c2    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b111c6    488bf0                  mov rsi, rax                                           
 ..  ;     oPrintf ( "\n%lx\n", d ) ;     oPrintf ( "\n chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n .. 
0x7e8de8b111c9    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b111d3    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b111dd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. chi : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 2 .. 
0x7e8de8b111e0    498b4720                mov rax, [r15+0x20]                                    
0x7e8de8b111e4    4983c608                add r14, 0x8                                           
0x7e8de8b111e8    498906                  mov [r14], rax                                         
 .. i : d = %lx\n", d ) ;     _assert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24  .. 
0x7e8de8b111eb    48b8efcdab8967452301    mov rax, 0x123456789abcdef                              
0x7e8de8b111f5    4983c608                add r14, 0x8                                           
0x7e8de8b111f9    498906                  mov [r14], rax                                         
0x7e8de8b111fc    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b11206    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
 .. #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0,  .. 
0x7e8de8b11209    48b802f54ce88d7e0000    mov rax, 0x7e8de84cf502                                
0x7e8de8b11213    488bf8                  mov rdi, rax                                           
 .. def ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;   .. 
0x7e8de8b11216    498b47f8                mov rax, [r15-0x8]                                     
 .. ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b1121a    4881c028000000          add rax, 0x28                                          
0x7e8de8b11221    4983c608                add r14, 0x8                                           
0x7e8de8b11225    498906                  mov [r14], rax                                         
0x7e8de8b11228    488b00                  mov rax, [rax]                                         
0x7e8de8b1122b    488bf0                  mov rsi, rax                                           
 .. ssert ( d #x0123456789abcdef ) ;      oPrintf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump .. 
0x7e8de8b1122e    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b11238    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11242    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b11245    498b47f8                mov rax, [r15-0x8]                                     
 .. bj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b11249    4881c020000000          add rax, 0x20                                          
0x7e8de8b11250    488bf8                  mov rdi, rax                                           
 ..  ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b11253    48b807f54ce88d7e0000    mov rax, 0x7e8de84cf507       < string : '%s' >
0x7e8de8b1125d    488bf0                  mov rsi, rax                                           
 ..  sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b11260    48b80af54ce88d7e0000    mov rax, 0x7e8de84cf50a       < string : 'hoot' >
0x7e8de8b1126a    488bd0                  mov rdx, rax                                           
0x7e8de8b1126d    b803000000              mov eax, 0x3                                           
 .. tf ( "\n%x\n", CObj.chey0.hey ) ;     sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b11272    49ba409e61e98d7e0000    mov r10, 0x7e8de9619e40                                
0x7e8de8b1127c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11286    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. s [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b11289    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1128d    4881c000000000          add rax, 0x0                                           
0x7e8de8b11294    4983c608                add r14, 0x8                                           
0x7e8de8b11298    498906                  mov [r14], rax                                         
 .. s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b1129b    48b85e6d42e48d7e0000    mov rax, 0x7e8de4426d5e       < string : 'h' >
0x7e8de8b112a5    488b00                  mov rax, [rax]                                         
0x7e8de8b112a8    4983c608                add r14, 0x8                                           
0x7e8de8b112ac    498906                  mov [r14], rax                                         
 .. y0.chars [ 24 ], "%s", "hoot" ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b112af    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b112b9    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b112c3    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b112c6    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b112ca    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b112ce    4983ee08                sub r14, 0x8                                           
 ..  ) ;     dump ( chey0, CObj.size ) ;  }  .. 
0x7e8de8b112d2    c3                      ret                                                    
Word_Disassemble : word - 'chi' :: codeSize = 1163
Word : 0x00007e8de442ab76 :: Compiled at : 0x00007e8de8b10e48
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 141.8 <::

 3 c should be 3  : ok

 5 b should be 5  : ok

 8 a should be 8  : ok


Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  77 65 6c 6c 2c 20 64 6f  ........ well, do 
0x00007e8de88ff583 :  20 6f 72 20 64 6f 6e 27  74 20 68 6f 6f 74 00 74   or don' t hoot.t 
0x00007e8de88ff593 :  64 6f 6e 27 74 00 00 00  ef cd ab 89 67 45 23 01  don't... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
0x00007e8de88ff5b3 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff5c3 :  00 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  ........ ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
 0x0123456789abcdef
 chi : d = 123456789abcdef

 chi : d = 123456789abcdef

 chey0.chars = 
                hey = 123456789abcdef

 chey0.chars2 = 
                hey hey = 7e8de88ff59b

 chi : d = 123456789abcdef

123456789abcdef

 chi : d = 123456789abcdef

89abcdef

Dump at : namespaces/compiler/c_syntax.csl : 142.12 :
Dump : Address = 0x00007e8de88ff573 : Number = 104 :: (little endian dump)
0x00007e8de88ff573 :  d2 04 00 00 00 00 00 00  0a 09 09 68 65 79 20 3d  ........ ...hey = 
0x00007e8de88ff583 :  20 31 32 33 34 35 36 37  38 39 61 62 63 64 65 66   1234567 89abcdef 
0x00007e8de88ff593 :  68 6f 6f 74 00 00 00 00  ef cd ab 89 67 45 23 01  hoot.... ....gE#. 
0x00007e8de88ff5a3 :  ef cd ab 89 67 45 23 01  0a 09 09 68 65 79 20 68  ....gE#. ...hey h 
0x00007e8de88ff5b3 :  65 79 20 3d 20 37 65 38  64 65 38 38 66 66 35 39  ey = 7e8 de88ff59 
0x00007e8de88ff5c3 :  62 00 00 00 00 00 00 00  ef cd ab 89 67 45 23 01  b....... ....gE#. 
0x00007e8de88ff5d3 :  ef cd ab 89 67 45 23 01  00 00 00 00 00 00 00 00  ....gE#. ........ 
 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11 7
 7
 xhi1 11
 xhi2a = 11
         interpret :> 

        interpret : token = ;
        interpret : token = //
        interpret : token = sp0
        interpret : token = #
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = while
        interpret : token = //
        interpret : token = //
        interpret : token = }
        interpret : token = void
        interpret : token = testc1
        interpret : token = ;
        interpret : token = //
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = tab
        interpret : token = ;
        interpret : token = ps
        interpret : token = ;
        interpret : token = nl
        interpret : token = (
        interpret : token = ;
        interpret : token = while
        interpret : token = //
        interpret : token = }
        interpret : token = #
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret2 <:> csl compiled word
SourceCode for C_Syntax.interpret2 :> 
void interpret2 ( | atoken aword ) { testc1 () ; nl tab () ; ps ( "interpret2 :> " ) ; nl while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i2halt" ) ) { oPrintf ( "\n\tinterpret2 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } } 
Source code file location of interpret2 : "namespaces/compiler/c_syntax.csl" : 149.11 :: we are now at : namespaces/compiler/c_syntax.csl : 205.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b112d8 -- code size = 428 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret2 : definition = 0x00007e8de8b112d8 : disassembly at namespaces/compiler/c_syntax.csl : 205.15 :
0x7e8de8b112d8    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b112dc    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b112e0    4981c618000000          add r14, 0x18                                          
void interpret2 ( | atoken aword )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = t .. 
0x7e8de8b112e7    49bb71feb0e88d7e0000    mov r11, 0x7e8de8b0fe71                                
0x7e8de8b112f1    49ffd3                  call r11                      < C_Syntax.testc1 : 0x00007e8de8b0fe71 >
0x7e8de8b112f4    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b112fe    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11308    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b1130b    49baf0d6313f345b0000    mov r10, 0x5b343f31d6f0                                
0x7e8de8b11315    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1131f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n .. 
0x7e8de8b11322    48b88fa881e88d7e0000    mov rax, 0x7e8de881a88f       < string : 'interpret2 :> ' >
0x7e8de8b1132c    4983c608                add r14, 0x8                                           
0x7e8de8b11330    498906                  mov [r14], rax                                         
 .. d )  {     testc1 () ;    nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf  .. 
0x7e8de8b11333    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1133d    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. nl tab () ; ps ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token  .. 
0x7e8de8b11340    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1134a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11354    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ( "interpret2 :> " ) ; nl     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) .. 
0x7e8de8b11357    b801000000              mov eax, 0x1                                           
0x7e8de8b1135c    4883f800                cmp rax, 0x0                                           
0x7e8de8b11360    0f8415010000            jz 0x7e8de8b1147b             < C_Syntax.interpret2+419 >
0x7e8de8b11366    49ba30dd313f345b0000    mov r10, 0x5b343f31dd30                                
0x7e8de8b11370    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1137a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( Stri .. 
0x7e8de8b1137d    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b11381    488bc8                  mov rcx, rax                                           
0x7e8de8b11384    498b06                  mov rax, [r14]                                         
0x7e8de8b11387    4983ee08                sub r14, 0x8                                           
0x7e8de8b1138b    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )   .. 
0x7e8de8b1138e    48b8c7934de88d7e0000    mov rax, 0x7e8de84d93c7                                
0x7e8de8b11398    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret2 : token = %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( .. 
0x7e8de8b1139b    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1139f    488bf0                  mov rsi, rax                                           
0x7e8de8b113a2    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b113ac    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b113b6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;               .. 
0x7e8de8b113b9    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b113bd    4983c608                add r14, 0x8                                           
0x7e8de8b113c1    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                       .. 
0x7e8de8b113c4    48b839a981e88d7e0000    mov rax, 0x7e8de881a939       < string : 'i2halt' >
0x7e8de8b113ce    4983c608                add r14, 0x8                                           
0x7e8de8b113d2    498906                  mov [r14], rax                                         
 ..  %s", atoken ) ;                 if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ; .. 
0x7e8de8b113d5    49bb7a14b0e88d7e0000    mov r11, 0x7e8de8b0147a                                
0x7e8de8b113df    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x00007e8de8b0147a >
 .. if ( StringEqual ( atoken, "i2halt" ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                  .. 
0x7e8de8b113e2    498b06                  mov rax, [r14]                                         
0x7e8de8b113e5    4983ee08                sub r14, 0x8                                           
0x7e8de8b113e9    4883f800                cmp rax, 0x0                                           
0x7e8de8b113ed    7432                    jz 0xe8b11421                 < C_Syntax.interpret2+329 >
0x7e8de8b113ef    0f1f4000                nop [rax]                                              
 ..  ) )         {              oPrintf ( "\n\tinterpret2 exiting..." ) ;                                    return ;         }         else  .. 
0x7e8de8b113f3    48b8d0944de88d7e0000    mov rax, 0x7e8de84d94d0                                
0x7e8de8b113fd    488bf8                  mov rdi, rax                                           
0x7e8de8b11400    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b1140a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11414    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b11417    e95f000000              jmp 0x7e8de8b1147b            < C_Syntax.interpret2+419 >
0x7e8de8b1141c    e955000000              jmp 0x7e8de8b11476            < C_Syntax.interpret2+414 >
 ..   {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x7e8de8b11421    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11425    4983c608                add r14, 0x8                                           
0x7e8de8b11429    498906                  mov [r14], rax                                         
0x7e8de8b1142c    49bad0e5313f345b0000    mov r10, 0x5b343f31e5d0                                
0x7e8de8b11436    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11440    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x7e8de8b11443    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b11447    488bc8                  mov rcx, rax                                           
0x7e8de8b1144a    498b06                  mov rax, [r14]                                         
0x7e8de8b1144d    4983ee08                sub r14, 0x8                                           
 ..      else         {             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x7e8de8b11451    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }     }   }  .. 
0x7e8de8b11454    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11458    4983c608                add r14, 0x8                                           
0x7e8de8b1145c    498906                  mov [r14], rax                                         
0x7e8de8b1145f    49bac0e2313f345b0000    mov r10, 0x5b343f31e2c0                                
0x7e8de8b11469    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11473    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..            doWord ( aword ) ;         }     }   }  .. 
0x7e8de8b11476    e9dcfeffff              jmp 0x7e8de8b11357            < C_Syntax.interpret2+127 >
0x7e8de8b1147b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1147f    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  doWord ( aword ) ;         }     }   }  .. 
0x7e8de8b11483    c3                      ret                                                    
Word_Disassemble : word - 'interpret2' :: codeSize = 428
Word : 0x00007e8de4439826 :: Compiled at : 0x00007e8de8b112d8
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 205.15 <::

        interpret : token = pwi
 =============================
C_Syntax.interpret3 <:> csl compiled word
SourceCode for C_Syntax.interpret3 :> 
void interpret3 ( | atoken aword ) { testc1 () ; nl () ; tab () ; ps ( "interpret3 :> " ) ; nl () ; while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ; if ( StringEqual ( atoken, "i3halt" ) ) { oPrintf ( "\n\tinterpret3 exiting..." ) ; return ; } else { aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } } } 
Source code file location of interpret3 : "namespaces/compiler/c_syntax.csl" : 176.11 :: we are now at : namespaces/compiler/c_syntax.csl : 206.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11489 -- code size = 428 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret3 : definition = 0x00007e8de8b11489 : disassembly at namespaces/compiler/c_syntax.csl : 206.15 :
0x7e8de8b11489    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1148d    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b11491    4981c618000000          add r14, 0x18                                          
void interpret3 ( | atoken aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {        .. 
0x7e8de8b11498    49bb71feb0e88d7e0000    mov r11, 0x7e8de8b0fe71                                
0x7e8de8b114a2    49ffd3                  call r11                      < C_Syntax.testc1 : 0x00007e8de8b0fe71 >
0x7e8de8b114a5    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b114af    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b114b9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. aword )  {     testc1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token ()  .. 
0x7e8de8b114bc    49baf0d6313f345b0000    mov r10, 0x5b343f31d6f0                                
0x7e8de8b114c6    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b114d0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. c1 () ;    nl () ; tab () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf  .. 
0x7e8de8b114d3    48b8f3ab81e88d7e0000    mov rax, 0x7e8de881abf3       < string : 'interpret3 :> ' >
0x7e8de8b114dd    4983c608                add r14, 0x8                                           
0x7e8de8b114e1    498906                  mov [r14], rax                                         
0x7e8de8b114e4    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b114ee    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. b () ;      ps ( "interpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : t .. 
0x7e8de8b114f1    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b114fb    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11505    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. terpret3 :> " ) ; nl () ;     while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) .. 
0x7e8de8b11508    b801000000              mov eax, 0x1                                           
0x7e8de8b1150d    4883f800                cmp rax, 0x0                                           
0x7e8de8b11511    0f8415010000            jz 0x7e8de8b1162c             < C_Syntax.interpret3+419 >
0x7e8de8b11517    49ba30dd313f345b0000    mov r10, 0x5b343f31dd30                                
0x7e8de8b11521    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1152b    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                           .. 
0x7e8de8b1152e    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b11532    488bc8                  mov rcx, rax                                           
0x7e8de8b11535    498b06                  mov rax, [r14]                                         
0x7e8de8b11538    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                           .. 
0x7e8de8b1153c    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken,  .. 
0x7e8de8b1153f    48b8a7a84de88d7e0000    mov rax, 0x7e8de84da8a7                                
0x7e8de8b11549    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret3 : token = %s", atoken ) ;                               if ( StringEqual ( atoken, "i3halt" ) )         {          .. 
0x7e8de8b1154c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11550    488bf0                  mov rsi, rax                                           
0x7e8de8b11553    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b1155d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11567    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..                    if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;               .. 
0x7e8de8b1156a    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1156e    4983c608                add r14, 0x8                                           
0x7e8de8b11572    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                       .. 
0x7e8de8b11575    48b89dac81e88d7e0000    mov rax, 0x7e8de881ac9d       < string : 'i3halt' >
0x7e8de8b1157f    4983c608                add r14, 0x8                                           
0x7e8de8b11583    498906                  mov [r14], rax                                         
 ..  ;                               if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ; .. 
0x7e8de8b11586    49bb7a14b0e88d7e0000    mov r11, 0x7e8de8b0147a                                
0x7e8de8b11590    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x00007e8de8b0147a >
 .. if ( StringEqual ( atoken, "i3halt" ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                  .. 
0x7e8de8b11593    498b06                  mov rax, [r14]                                         
0x7e8de8b11596    4983ee08                sub r14, 0x8                                           
0x7e8de8b1159a    4883f800                cmp rax, 0x0                                           
0x7e8de8b1159e    7432                    jz 0xe8b115d2                 < C_Syntax.interpret3+329 >
0x7e8de8b115a0    0f1f4000                nop [rax]                                              
 ..  ) )         {              oPrintf ( "\n\tinterpret3 exiting..." ) ;                                    return ;         }         else  .. 
0x7e8de8b115a4    48b8b0a94de88d7e0000    mov rax, 0x7e8de84da9b0                                
0x7e8de8b115ae    488bf8                  mov rdi, rax                                           
0x7e8de8b115b1    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b115bb    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b115c5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b115c8    e95f000000              jmp 0x7e8de8b1162c            < C_Syntax.interpret3+419 >
0x7e8de8b115cd    e955000000              jmp 0x7e8de8b11627            < C_Syntax.interpret3+414 >
 ..                 aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x7e8de8b115d2    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b115d6    4983c608                add r14, 0x8                                           
0x7e8de8b115da    498906                  mov [r14], rax                                         
0x7e8de8b115dd    49bad0e5313f345b0000    mov r10, 0x5b343f31e5d0                                
0x7e8de8b115e7    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b115f1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x7e8de8b115f4    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b115f8    488bc8                  mov rcx, rax                                           
0x7e8de8b115fb    498b06                  mov rax, [r14]                                         
0x7e8de8b115fe    4983ee08                sub r14, 0x8                                           
 .. e          {                    aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x7e8de8b11602    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }            }    }  .. 
0x7e8de8b11605    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11609    4983c608                add r14, 0x8                                           
0x7e8de8b1160d    498906                  mov [r14], rax                                         
0x7e8de8b11610    49bac0e2313f345b0000    mov r10, 0x5b343f31e2c0                                
0x7e8de8b1161a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11624    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..            doWord ( aword ) ;         }            }    }  .. 
0x7e8de8b11627    e9dcfeffff              jmp 0x7e8de8b11508            < C_Syntax.interpret3+127 >
0x7e8de8b1162c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b11630    4d8b7e08                mov r15, [r14+0x8]                                     
 .. ( aword ) ;         }            }    }  .. 
0x7e8de8b11634    c3                      ret                                                    
Word_Disassemble : word - 'interpret3' :: codeSize = 428
Word : 0x00007e8de443f056 :: Compiled at : 0x00007e8de8b11489
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 206.15 <::

        interpret : token = C
        interpret : token = sp0
        interpret : token = #
        interpret : token = //
        interpret : token = interpret2 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret2 :> 

        interpret2 : token = using
Using Namespaces :> C Root libc void C_Syntax Infix PrefixCombinators chey0 CObj Dlsym chey Class Defines User String Combinators Interpreter System int Shell Compiler Int Debug Ar9 Ar3 Ar2 Ar1 DLLNodeAlloc DLLNode Buffer Logic Control Bits DObject Lexer testD a112 int64 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil byte Io Word Macro Namespace StartupMacros Compiling Reserved PreProcessor Stack Memory Colors File Asm Array MemorySpace Locals Forth Experimental L9 

        interpret2 : token = sp0
        interpret2 : token = #
        interpret2 : token = int
        interpret2 : token = int
        interpret2 : token = ;
        interpret2 : token = #
        interpret2 : token = while
        interpret2 : token = #
        interpret2 : token = return
        interpret2 : token = ;
        interpret2 : token = }
        interpret2 : token = pwi
 =============================
C_Syntax.fac40 <:> csl compiled word
SourceCode for C_Syntax.fac40 :> 
int fac40 ( n | facc ) { int facc = 1 ; while ( n > 1 ) facc = n -- * facc ; return facc ; } 
Source code file location of fac40 : "namespaces/compiler/c_syntax.csl" : 216.6 :: we are now at : namespaces/compiler/c_syntax.csl : 226.10
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1163a -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac40 : definition = 0x00007e8de8b1163a : disassembly at namespaces/compiler/c_syntax.csl : 226.10 :
0x7e8de8b1163a    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1163e    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b11642    4981c618000000          add r14, 0x18                                          
 int fac40 ( n  | facc )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; }  .. 
0x7e8de8b11649    49c7471001000000        mov qword [r15+0x10], 0x1                              
 ..  )  {      int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11651    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b11656    7e1f                    jle 0xe8b11677                < C_Syntax.fac40+61 >
0x7e8de8b11658    0f1f4000                nop [rax]                                              
 .. facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b1165c    498b47f8                mov rax, [r15-0x8]                                     
 .. 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11660    498b4f10                mov rcx, [r15+0x10]                                    
 .. = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11664    480fafc1                imul rax, rcx                                          
 ..    int facc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11668    49894710                mov [r15+0x10], rax                                    
 .. cc = 1 ;     while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b1166c    49ff4ff8                dec qword [r15-0x8]                                    
 ..    while ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11670    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b11675    7fe5                    jg 0xe8b1165c                 < C_Syntax.fac40+34 >
 .. le ( n > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11677    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b1167b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1167f    4d8b7e08                mov r15, [r14+0x8]                                     
 .. > 1 ) facc = n -- * facc ;     return facc ; } 
0x7e8de8b11683    498906                  mov [r14], rax                                         
 .. acc = n -- * facc ;     return facc ; } 
0x7e8de8b11686    c3                      ret                                                    
Word_Disassemble : word - 'fac40' :: codeSize = 77
Word : 0x00007e8de4445456 :: Compiled at : 0x00007e8de8b1163a
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 226.10 <::

        interpret2 : token = //
        interpret2 : token = fac40
        interpret2 : token = dup
        interpret2 : token = p 5040
        interpret2 : token = 5040
        interpret2 : token = _assert
        interpret2 : token = i2halt
        interpret2 exiting...
        interpret : token = sp0
        interpret : token = //
        interpret : token = #
        interpret : token = interpret3 
tdbg = 1 
tdbg2 = 2 
tdbg3 = 3 
tdbg4 = 4 
tdbg5 = 5 
tdbg6 = 6 
last line 
xhii = 7 
xhi =  7 7 7 
xhi =  7 7
 7
 xhi1 11
 xhi2a = 11
         interpret3 :> 

        interpret3 : token = sp0
        interpret3 : token = c_syntaxOff
        interpret3 : token = User
        interpret3 : token = words
Words :
 - <namespace> ':>' <word list>
 - User :>  heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
 - Root :>  sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
 - C :>  x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 test1 t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test1 test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf
 - int :>  this size
 - libc :>  x xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
 - void :>  Error ftoc ctof ftoc ctof this size
 - CObj :>  this size
 - Dlsym :> 
 - chey :> 
 - Class :>  . clone new struct class :{ +:{ };
 - Defines :>  xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
 - String :>  hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
 - Combinators :>  ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
 - Interpreter :>  sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
 - System :>  ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwi pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackInit warmInit init reset _include
 - Shell :>  hio ppxe ppx epause apause test sh $ _sh endif else if
 - Compiler :>  vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
 - Int :>  mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / ^^ pow_03 pow ** * -= += - +
 - Debug :>  dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState dbg udis1x udis1 dsOn dsOff stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
 - Ar9 :>  arr9 a9 a9dump _adump ar dimSize this size
 - Ar3 :>  a7 a a8 a6x a6 ar this size
 - Ar2 :>  a a5 a4 ar this size
 - Ar1 :>  a a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
 - DLLNodeAlloc :>  testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
 - DLLNode :>  sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
 - Buffer :>  buf this size
 - Logic :>  l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
 - Control :>  maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
 - Bits :>  tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
 - DObject :>  new clone dobject
 - Lexer :>  sp heey hey hi ofile orpfile % "
 - testD :>  testC
 - a112 :>  c1138
 - int64 :>  this size
 - arr10 :> 
 - Ar10 :>  a10dump ar dimSize this size
 - cta :>  a caba cadump a tcta aba ar this size
 - ct0 :>  ac a tct ab ar this size
 - ar9 :> 
 - DLLNodeAlloc4 :>  testna5 dlna4o testna5 testna4 nodes this size
 - DLListClone :>  testClone init Accum Four Three Twelve Sum Prototype Category this size
 - DLList :>  hey hi hey hi testList init TailNode HeadNode this size
 - Integer :> 
 - Pointer :>  this size
 - List :>  bexp3 lcRestoreStack dupList printList eval _( _lisp
 - OpenVmTil :>  ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
 - byte :>  this size
 - Io :>  Error logWrite logAppend logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc space tab cr newline kbhit key emit printString
 - Word :>  code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
 - Macro :>  rdim rdi s _s tm: findAlias alias sm:
 - Namespace :>  usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
 - StartupMacros :>  namespaces Delimiters
 - Compiling :>  pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
 - Reserved :>  {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
 - PreProcessor :>  ifndef ifdef undef defined include define elif if else endif !
 - Stack :>  stackCheck setDsp dsp _swap stackDepth depth pick _ndrop dropN drop ndup tos dup _dup
 - Memory :>  recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
 - Colors :>  alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
 - File :>  freadToString fexists fsize ftell fseek fread fwrite fclose fopen
 - Asm :>  jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
 - Array :>  [ ]
 - MemorySpace :>  msDelete memspace
 - Locals :>  (| (
 - Forth :>  rpn n, 8, 4, , 2, 1, '
 - Experimental :>  <does <do does> do> locationPrint locationPush
 - L9 :>  l9
1221 words on the 'using' Namespaces List ::
        interpret3 : token = sp0
        interpret3 : token = :
        interpret3 : token = 1
        interpret3 : token = 2
        interpret3 : token = +
        interpret3 : token = p
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hi1
        interpret3 : token = hi1
        interpret3 : token = ;
        interpret3 : token = :
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = hey1
        interpret3 : token = ;
        interpret3 : token = nl

        interpret3 : token = heey1 3 3 3 3 3 3
        interpret3 : token = #
        interpret3 : token = c_syntaxOn
        interpret3 : token = int
        interpret3 : token = for
        interpret3 : token = return
        interpret3 : token = ;
        interpret3 : token = }
        interpret3 : token = pwi
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :> 
int faccs2 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs2 : "namespaces/compiler/c_syntax.csl" : 247.7 :: we are now at : namespaces/compiler/c_syntax.csl : 255.11
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11725 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x00007e8de8b11725 : disassembly at namespaces/compiler/c_syntax.csl : 255.11 :
0x7e8de8b11725    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b11729    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1172d    4981c610000000          add r14, 0x10                                          
  int faccs2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x7e8de8b11734    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s2 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1173c    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b11741    7e1f                    jle 0xe8b11762                < C_Syntax.faccs2+61 >
0x7e8de8b11743    0f1f4000                nop [rax]                                              
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b11747    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1174b    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1174f    480fafc1                imul rax, rcx                                          
0x7e8de8b11753    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b11757    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1175b    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b11760    7fe1                    jg 0xe8b11743                 < C_Syntax.faccs2+30 >
 ..           rec = rec * n ;      }      return rec ; } 
0x7e8de8b11762    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11766    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1176a    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x7e8de8b1176e    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x7e8de8b11771    c3                      ret                                                    
Word_Disassemble : word - 'faccs2' :: codeSize = 77
Word : 0x00007e8de4449d56 :: Compiled at : 0x00007e8de8b11725
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 255.11 <::

        interpret3 : token = //
        interpret3 : token = faccs2
        interpret3 : token = dup
        interpret3 : token = p 5040
        interpret3 : token = 5040
        interpret3 : token = _assert0
        interpret3 : token = sp0
        interpret3 : token = libc
        interpret3 : token = void
        interpret3 : token = //
        interpret3 : token = //
        interpret3 : token = while
        interpret3 : token = }
        interpret3 : token = //
        interpret3 : token = i3halt
        interpret3 exiting...
        interpret : token = //
        interpret : token = pwi
 =============================
C_Syntax.interpret4 <:> csl compiled word
SourceCode for C_Syntax.interpret4 :> 
void interpret4 ( | atoken aword ) { while ( 1 ) { atoken = token () ; oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ; if ( atoken ) { if ( StringEqual ( atoken, "i4halt" ) ) { oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ; return ; } aword = tokenToWord ( atoken ) ; doWord ( aword ) ; } else break ; } } 
Source code file location of interpret4 : "namespaces/compiler/c_syntax.csl" : 260.11 :: we are now at : namespaces/compiler/c_syntax.csl : 284.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11777 -- code size = 342 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.interpret4 : definition = 0x00007e8de8b11777 : disassembly at namespaces/compiler/c_syntax.csl : 284.15 :
0x7e8de8b11777    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1177b    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1177f    4981c618000000          add r14, 0x18                                          
 .. | atoken aword )  {           while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) .. 
0x7e8de8b11786    b801000000              mov r8d, 0x1                                           
0x7e8de8b1178b    4883f800                cmp rax, 0x0                                           
0x7e8de8b1178f    0f842f010000            jz 0x7e8de8b118c4             < C_Syntax.interpret4+333 >
0x7e8de8b11795    49ba30dd313f345b0000    mov r10, 0x5b343f31dd30                                
0x7e8de8b1179f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b117a9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )    .. 
0x7e8de8b117ac    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b117b0    488bc8                  mov rcx, rax                                           
0x7e8de8b117b3    498b06                  mov rax, [r14]                                         
0x7e8de8b117b6    4983ee08                sub r14, 0x8                                           
 ..   while ( 1 )     {            atoken = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )    .. 
0x7e8de8b117ba    488901                  mov [rcx], rax                                         
 .. token = token () ;          oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringE .. 
0x7e8de8b117bd    48b857d74ee88d7e0000    mov rax, 0x7e8de84ed757                                
0x7e8de8b117c7    488bf8                  mov rdi, rax                                           
 .. intf ( "\n\tinterpret4 : token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )     .. 
0x7e8de8b117ca    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b117ce    488bf0                  mov rsi, rax                                           
0x7e8de8b117d1    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b117db    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b117e5    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. token = %s", atoken ) ;          if ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                 .. 
0x7e8de8b117e8    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b117ec    4883f800                cmp rax, 0x0                                           
0x7e8de8b117f0    0f84c4000000            jz 0x7e8de8b118ba             < C_Syntax.interpret4+323 >
 ..      {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exitin .. 
0x7e8de8b117f6    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b117fa    4983c608                add r14, 0x8                                           
0x7e8de8b117fe    498906                  mov [r14], rax                                         
 ..            if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...",  .. 
0x7e8de8b11801    48b895b181e88d7e0000    mov rax, 0x7e8de881b195       < string : 'i4halt' >
0x7e8de8b1180b    4983c608                add r14, 0x8                                           
0x7e8de8b1180f    498906                  mov [r14], rax                                         
 .. ( atoken )         {             if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: int .. 
0x7e8de8b11812    49bb7a14b0e88d7e0000    mov r11, 0x7e8de8b0147a                                
0x7e8de8b1181c    49ffd3                  call r11                      < C_Syntax.StringEqual : 0x00007e8de8b0147a >
 .. if ( StringEqual ( atoken, "i4halt" ) )            {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;  .. 
0x7e8de8b1181f    498b06                  mov rax, [r14]                                         
0x7e8de8b11822    4983ee08                sub r14, 0x8                                           
0x7e8de8b11826    4883f800                cmp rax, 0x0                                           
0x7e8de8b1182a    7434                    jz 0xe8b11860                 < C_Syntax.interpret4+233 >
0x7e8de8b1182c    0f1f4000                nop [rax]                                              
 ..          {                  oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;   .. 
0x7e8de8b11830    48b8e8d94ee88d7e0000    mov rax, 0x7e8de84ed9e8                                
0x7e8de8b1183a    488bf8                  mov rdi, rax                                           
 .. oken = %s :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord  .. 
0x7e8de8b1183d    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11841    488bf0                  mov rsi, rax                                           
0x7e8de8b11844    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b1184e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11858    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  :: interpret4 exiting ...", atoken ) ;                                 return ;              }             aword = tokenToWord ( atoken  .. 
0x7e8de8b1185b    e964000000              jmp 0x7e8de8b118c4            < C_Syntax.interpret4+333 >
 ..   }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x7e8de8b11860    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11864    4983c608                add r14, 0x8                                           
0x7e8de8b11868    498906                  mov [r14], rax                                         
0x7e8de8b1186b    49bad0e5313f345b0000    mov r10, 0x5b343f31e5d0                                
0x7e8de8b11875    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1187f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x7e8de8b11882    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b11886    488bc8                  mov rcx, rax                                           
0x7e8de8b11889    498b06                  mov rax, [r14]                                         
0x7e8de8b1188c    4983ee08                sub r14, 0x8                                           
 .. rn ;              }             aword = tokenToWord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x7e8de8b11890    488901                  mov [rcx], rax                                         
 .. ord ( atoken ) ;             doWord ( aword ) ;         }         else break ;     } }  .. 
0x7e8de8b11893    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11897    4983c608                add r14, 0x8                                           
0x7e8de8b1189b    498906                  mov [r14], rax                                         
0x7e8de8b1189e    49bac0e2313f345b0000    mov r10, 0x5b343f31e2c0                                
0x7e8de8b118a8    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b118b2    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b118b5    e905000000              jmp 0x7e8de8b118bf            < C_Syntax.interpret4+328 >
 .. rd ( aword ) ;         }         else break ;     } }  .. 
0x7e8de8b118ba    e905000000              jmp 0x7e8de8b118c4            < C_Syntax.interpret4+333 >
0x7e8de8b118bf    e9c2feffff              jmp 0x7e8de8b11786            < C_Syntax.interpret4+15 >
0x7e8de8b118c4    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b118c8    4d8b7e08                mov r15, [r14+0x8]                                     
 ..          }         else break ;     } }  .. 
0x7e8de8b118cc    c3                      ret                                                    
Word_Disassemble : word - 'interpret4' :: codeSize = 342
Word : 0x00007e8de444d726 :: Compiled at : 0x00007e8de8b11777
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 284.15 <::

        interpret : token = sp0
        interpret : token = interpret4
        interpret4 : token = C
        interpret4 : token = int
        interpret4 : token = for
        interpret4 : token = return
        interpret4 : token = ;
        interpret4 : token = }
        interpret4 : token = '
        interpret4 : token = find
        interpret4 : token = wdiss
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :> 
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs3 : "namespaces/compiler/c_syntax.csl" : 288.7 :: we are now at : namespaces/compiler/c_syntax.csl : 296.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b118d2 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x00007e8de8b118d2 : disassembly at namespaces/compiler/c_syntax.csl : 296.20 :
0x7e8de8b118d2    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b118d6    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b118da    4981c610000000          add r14, 0x10                                          
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x7e8de8b118e1    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b118e9    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b118ee    7e1f                    jle 0xe8b1190f                < C_Syntax.faccs3+61 >
0x7e8de8b118f0    0f1f4000                nop [rax]                                              
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b118f4    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b118f8    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b118fc    480fafc1                imul rax, rcx                                          
0x7e8de8b11900    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b11904    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b11908    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b1190d    7fe1                    jg 0xe8b118f0                 < C_Syntax.faccs3+30 >
 ..           rec = rec * n ;      }      return rec ; } 
0x7e8de8b1190f    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11913    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b11917    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x7e8de8b1191b    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x7e8de8b1191e    c3                      ret                                                    
Word_Disassemble : word - 'faccs3' :: codeSize = 77
Word : 0x00007e8de4452896 :: Compiled at : 0x00007e8de8b118d2
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 296.20 <::

        interpret4 : token = faccs3
        interpret4 : token = dup
        interpret4 : token = p 5040
        interpret4 : token = 5040
        interpret4 : token = _assert0
        interpret4 : token = sp0
        interpret4 : token = i4halt

        token = i4halt :: interpret4 exiting ...
        interpret : token = sp0
        interpret : token = //
        interpret : token = c_syntaxOff
        interpret : token = //
        interpret : token = #
        interpret : token = //
        interpret : token = C
        interpret : token = sp0
        interpret : token = c_syntaxOn
        interpret : token = C
        interpret : token = String
        interpret : token = libc
        interpret : token = typedef
        interpret : token = void
        interpret : token = buffer
        interpret : token = =
        interpret : token = ;
        interpret : token = memset
        interpret : token = ;
        interpret : token = while
        interpret : token = }
        interpret : token = pwi
 =============================
C_Syntax.$ <:> csl compiled word
SourceCode for C_Syntax.$ :> 
void $ ( | atoken, buffer, CBuffer buffer0 ) { buffer = &buffer0.buf ; memset ( buffer, 0, CBuffer.size ) ; while ( atoken = token () ) { oPrintf ( "\n\ttoken = %s\n", atoken ) ; if ( ! strcmp ( atoken, ";" ) ) { oPrintf ( "\n\tbuffer = %s\n", buffer ) ; sh ( buffer ) ; break ; } else { if ( strcmp ( atoken, "." ) ) { strcat ( buffer, " " ) ; } strcat ( buffer, atoken ) ; } } } 
Source code file location of $ : "namespaces/compiler/c_syntax.csl" : 309.2 :: we are now at : namespaces/compiler/c_syntax.csl : 333.5
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11924 -- code size = 515 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.$ : definition = 0x00007e8de8b11924 : disassembly at namespaces/compiler/c_syntax.csl : 333.5 :
0x7e8de8b11924    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b11928    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1192c    4981c620000000          add r14, 0x20                                          
 .. er, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {     .. 
0x7e8de8b11933    48bf1e6445e48d7e0000    mov rdi, 0x7e8de445641e                                
0x7e8de8b1193d    498d7718                lea rsi, [r15+0x18]                                    
0x7e8de8b11941    ba00010000              mov edx, 0x100                                         
0x7e8de8b11946    49baa09a2c3f345b0000    mov r10, 0x5b343f2c9aa0                                
0x7e8de8b11950    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1195a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. r, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {      .. 
0x7e8de8b1195d    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b11961    4881c000000000          add rax, 0x0                                           
 .. ken, buffer, CBuffer buffer0 )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )   .. 
0x7e8de8b11968    49894710                mov [r15+0x10], rax                                    
 ..  buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken .. 
0x7e8de8b1196c    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11970    488bf8                  mov rdi, rax                                           
 .. = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n" .. 
0x7e8de8b11973    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b1197a    488bf0                  mov rsi, rax                                           
 .. buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken )  .. 
0x7e8de8b1197d    48b8966645e48d7e0000    mov rax, 0x7e8de4456696                                
0x7e8de8b11987    488b00                  mov rax, [rax]                                         
0x7e8de8b1198a    488bd0                  mov rdx, rax                                           
 ..  )  {     buffer = &buffer0.buf ;     memset ( buffer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( " .. 
0x7e8de8b1198d    49bad07e72e98d7e0000    mov r10, 0x7e8de9727ed0                                
0x7e8de8b11997    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b119a1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. fer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! .. 
0x7e8de8b119a4    49ba30dd313f345b0000    mov r10, 0x5b343f31dd30                                
0x7e8de8b119ae    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b119b8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp .. 
0x7e8de8b119bb    498d4708                lea rax, [r15+0x8]                                     
 .. fer, 0, CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! .. 
0x7e8de8b119bf    488bc8                  mov rcx, rax                                           
0x7e8de8b119c2    498b06                  mov rax, [r14]                                         
0x7e8de8b119c5    4983ee08                sub r14, 0x8                                           
 ..  CBuffer.size ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp .. 
0x7e8de8b119c9    488901                  mov [rcx], rax                                         
 .. ze ) ;      while ( atoken = token () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken,  .. 
0x7e8de8b119cc    498b06                  mov rax, [r14]                                         
0x7e8de8b119cf    4983ee08                sub r14, 0x8                                           
0x7e8de8b119d3    4883f800                cmp rax, 0x0                                           
0x7e8de8b119d7    0f8441010000            jz 0x7e8de8b11b1e             < C_Syntax.$+506 >
 .. oken () )      {            oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {             .. 
0x7e8de8b119dd    48b8404a4fe88d7e0000    mov rax, 0x7e8de84f4a40                                
0x7e8de8b119e7    488bf8                  mov rdi, rax                                           
 ..         oPrintf ( "\n\ttoken = %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuf .. 
0x7e8de8b119ea    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b119ee    488bf0                  mov rsi, rax                                           
0x7e8de8b119f1    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b119fb    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11a05    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( b .. 
0x7e8de8b11a08    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11a0c    488bf8                  mov rdi, rax                                           
 ..               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer )  .. 
0x7e8de8b11a0f    48b84e4a4fe88d7e0000    mov rax, 0x7e8de84f4a4e       < string : ';' >
0x7e8de8b11a19    488bf0                  mov rsi, rax                                           
 .. s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;          .. 
0x7e8de8b11a1c    49ba109b72e98d7e0000    mov r10, 0x7e8de9729b10                                
0x7e8de8b11a26    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11a30    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  %s\n", atoken ) ;               if ( ! strcmp ( atoken, ";" ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;        .. 
0x7e8de8b11a33    4883f800                cmp rax, 0x0                                           
0x7e8de8b11a37    755b                    jnz 0xe8b11a94                < C_Syntax.$+368 >
0x7e8de8b11a39    0f1f4000                nop [rax]                                              
 .. ) )          {              oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         e .. 
0x7e8de8b11a3d    48b8504a4fe88d7e0000    mov rax, 0x7e8de84f4a50                                
0x7e8de8b11a47    488bf8                  mov rdi, rax                                           
 ..        oPrintf ( "\n\tbuffer = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {        .. 
0x7e8de8b11a4a    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11a4e    488bf0                  mov rsi, rax                                           
0x7e8de8b11a51    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b11a5b    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11a65    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. r = %s\n", buffer ) ;            sh ( buffer ) ;             break ;          }         else          {              if ( strcmp ( atoken .. 
0x7e8de8b11a68    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11a6c    4983c608                add r14, 0x8                                           
0x7e8de8b11a70    498906                  mov [r14], rax                                         
0x7e8de8b11a73    49ba70f6313f345b0000    mov r10, 0x5b343f31f670                                
0x7e8de8b11a7d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11a87    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b11a8a    e98f000000              jmp 0x7e8de8b11b1e            < C_Syntax.$+506 >
0x7e8de8b11a8f    e985000000              jmp 0x7e8de8b11b19            < C_Syntax.$+501 >
 ..          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             str .. 
0x7e8de8b11a94    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11a98    488bf8                  mov rdi, rax                                           
 ..  {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }             strcat ( bu .. 
0x7e8de8b11a9b    48b8774b4fe88d7e0000    mov rax, 0x7e8de84f4b77       < string : '.' >
0x7e8de8b11aa5    488bf0                  mov rsi, rax                                           
 ..     else          {              if ( strcmp ( atoken, "." ) )             {                 strcat ( buffer, " " ) ;            }        .. 
0x7e8de8b11aa8    49ba109b72e98d7e0000    mov r10, 0x7e8de9729b10                                
0x7e8de8b11ab2    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11abc    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b11abf    4883f800                cmp rax, 0x0                                           
0x7e8de8b11ac3    742f                    jz 0xe8b11af4                 < C_Syntax.$+464 >
0x7e8de8b11ac5    0f1f4000                nop [rax]                                              
 ..            {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x7e8de8b11ac9    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11acd    488bf8                  mov rdi, rax                                           
 ..    {                 strcat ( buffer, " " ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x7e8de8b11ad0    48b8794b4fe88d7e0000    mov rax, 0x7e8de84f4b79       < string : ' ' >
0x7e8de8b11ada    488bf0                  mov rsi, rax                                           
0x7e8de8b11add    49bad09372e98d7e0000    mov r10, 0x7e8de97293d0                                
0x7e8de8b11ae7    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11af1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ) ;            }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x7e8de8b11af4    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b11af8    488bf8                  mov rdi, rax                                           
 ..        }             strcat ( buffer, atoken ) ;         }     } }  .. 
0x7e8de8b11afb    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b11aff    488bf0                  mov rsi, rax                                           
0x7e8de8b11b02    49bad09372e98d7e0000    mov r10, 0x7e8de97293d0                                
0x7e8de8b11b0c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b11b16    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   strcat ( buffer, atoken ) ;         }     } }  .. 
0x7e8de8b11b19    e986feffff              jmp 0x7e8de8b119a4            < C_Syntax.$+128 >
0x7e8de8b11b1e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b11b22    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  ( buffer, atoken ) ;         }     } }  .. 
0x7e8de8b11b26    c3                      ret                                                    
Word_Disassemble : word - '$' :: codeSize = 515
Word : 0x00007e8de4456966 :: Compiled at : 0x00007e8de8b11924
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 333.5 <::

        interpret : token = //
        interpret : token = sp0
        interpret : token = ihalt

        token = ihalt :: interpret exiting ... 

new $ test
total 168
drwxr-xr-x  8 dennisj dennisj  4096 Aug  3 02:45 .
drwx------ 46 dennisj dennisj 12288 Aug  3 02:45 ..
drwxr-xr-x  2 dennisj dennisj  4096 Aug  3 02:37 bin
drwxr-xr-x  2 dennisj dennisj  4096 Aug  3 02:43 etc
drwxr-xr-x  8 dennisj dennisj  4096 Aug  3 02:43 .git
-rw-r--r--  1 dennisj dennisj 21898 Aug  2 22:28 init.csl
-rw-r--r--  1 dennisj dennisj  1067 Jul 30 19:27 LICENSE
-rw-r--r--  1 dennisj dennisj 20368 Jul 30 19:27 ls9.ls9
-rwxr-xr-x  1 dennisj dennisj   220 Jul 30 19:27 m
-rwxr-xr-x  1 dennisj dennisj   664 Jul 30 19:27 m0
-rwxr-xr-x  1 dennisj dennisj   224 Jul 30 19:27 ma
-rw-r--r--  1 dennisj dennisj  9051 Aug  3 02:20 Makefile
-rwxr-xr-x  1 dennisj dennisj   613 Jul 30 19:27 mir
-rwxr-xr-x  1 dennisj dennisj   504 Jul 30 19:27 mira
-rwxr-xr-x  1 dennisj dennisj   549 Jul 30 19:27 mirAll
-rwxr-xr-x  1 dennisj dennisj   518 Jul 30 19:27 mirs
drwxr-xr-x  4 dennisj dennisj  4096 Aug  1 17:33 namespaces
drwxr-xr-x  3 dennisj dennisj  4096 Aug  1 18:59 nbproject
-rw-r--r--  1 dennisj dennisj     5 Aug  3 02:43 node.txt
-rwxr-xr-x  1 dennisj dennisj   124 Jul 30 19:27 r
-rw-r--r--  1 dennisj dennisj 14382 Jul 30 19:27 README.md
-rw-r--r--  1 dennisj dennisj 14382 Jul 30 19:27 README.txt
drwxr-xr-x  5 dennisj dennisj  4096 Aug  3 02:06 src

including etc/script at <command line> : 0.0 ...

Using Namespaces :> Shell Root libc OpenVmTil Lexer Int Compiler C Interpreter Debug User int64 byte void Dlsym Io System Word Macro Namespace String Class Defines StartupMacros Combinators Compiling Reserved DObject PreProcessor List Stack Memory Colors File Asm Bits Logic Array MemorySpace Locals Forth Experimental L9 

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at etc/script : 8.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 0 ; RestartCondition = Unknown Condition ; LastRestartCondtion = Unknown Condition

InNamespace = Root.Shell
version 0.940.176
 7 7 7
version 0.940.176
 yfac
 3628800

 yfacc
 3628800

 5040


Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =    111049 : Unused =   1986103 : Allocations =    1 : Largest =  1986103 : Smallest =  1986103 : AllocSize =  2097152
SessionObjectsSpace     InUse =     23511 : Unused =   1025065 : Allocations =    1 : Largest =  1025065 : Smallest =  1025065 : AllocSize =  1048576
WordRecylingSpace       InUse =    146608 : Unused =    901968 : Allocations =    1 : Largest =   901968 : Smallest =   901968 : AllocSize =  1048576
CompilerTempObjectSpace InUse =    504264 : Unused =   3690040 : Allocations =    1 : Largest =  3690040 : Smallest =  3690040 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =     52997 : Unused =   4141307 : Allocations =    1 : Largest =  4141307 : Smallest =  4141307 : AllocSize =  4194304
BufferSpace             InUse =     80388 : Unused =    968188 : Allocations =    1 : Largest =   968188 : Smallest =   968188 : AllocSize =  1048576
StringSpace             InUse =     21827 : Unused =   1026749 : Allocations =    1 : Largest =  1026749 : Smallest =  1026749 : AllocSize =  1048576
ObjectSpace             InUse =        32 : Unused =   1048544 : Allocations =    1 : Largest =  1048544 : Smallest =  1048544 : AllocSize =  1048576
LispSpace               InUse =    159208 : Unused =    889368 : Allocations =    1 : Largest =   889368 : Smallest =   889368 : AllocSize =  1048576
CodeSpace               InUse =     25348 : Unused =   1023228 : Allocations =    1 : Largest =  1023228 : Smallest =  1023228 : AllocSize =  1048576
DictionarySpace         InUse =    770367 : Unused =   3423937 : Allocations =    1 : Largest =  3423937 : Smallest =  3423937 : AllocSize =  4194304
InternalObjectSpace     InUse =     27124 : Unused =   1021452 : Allocations =    1 : Largest =  1021452 : Smallest =  1021452 : AllocSize =  1048576
CSLInternalSpace        InUse =    190656 : Unused =    857920 : Allocations =    1 : Largest =   857920 : Smallest =   857920 : AllocSize =  1048576
StaticSpace             InUse =       112 : Unused =      1936 : Allocations =    1 : Largest =     1936 : Smallest =     1936 : AllocSize =     2048
Data Stack              InUse =         0 : Unused =      8192
Total Accounted Mem     InUse =   2133163 : Unused =  23054381
Non-Static Mem Allocated      =  25187544
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         0
WordsAllocation               =   1173312 : 2716  x 432 bytes
Recycled-Bytes:WordCount      =      9504 : 22    x 432 bytes
InRecycling-Bytes:Words       =         0 : 0     x 432 bytes
 fibc
 6765
 5040
 =============================
Int.fac <:> csl compiled word
SourceCode for Int.fac :> 
: fac ( n | rec1 ) rec1 1 = { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while return rec1 @ ; 
Source code file location of fac : "etc/script" : 29.2 :: we are now at : etc/script : 35.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0x4f702400 -- code size = 82 bytes
TypeSignature : 
 -----------------------------
Word :: Int.fac : definition = 0x000079bc4f702400 : disassembly at etc/script : 35.8 :
0x79bc4f702400    4d897e08                mov [r14+0x8], r15                                     
0x79bc4f702404    4d8d7e08                lea r15, [r14+0x8]                                     
0x79bc4f702408    4981c610000000          add r14, 0x10                                          
 ..       : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x79bc4f70240f    49c7470801000000        mov qword [r15+0x8], 0x1                               
 : fac ( n  | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ;  .. 
0x79bc4f702417    49837ff801              cmp qword [r15-0x8], 0x1                               
 .. | rec1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f70241c    7e1f                    jle 0x4f70243d                < Int.fac+61 >
0x79bc4f70241e    0f1f4000                nop [rax]                                              
 .. c1 )      rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f702422    498b47f8                mov rax, [r15-0x8]                                     
 ..       rec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f702426    498b4f08                mov rcx, [r15+0x8]                                     
 .. ec1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f70242a    480fafc1                imul rax, rcx                                          
 .. 1 1 =      { n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f70242e    49894708                mov [r15+0x8], rax                                     
 .. n @ 1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f702432    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 > } { n @ rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f702436    49837ff801              cmp qword [r15-0x8], 0x1                               
0x79bc4f70243b    7fe5                    jg 0x4f702422                 < Int.fac+34 >
 .. rec1 @ * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f70243d    498b4708                mov rax, [r15+0x8]                                     
0x79bc4f702441    e900000000              jmp 0x79bc4f702446            < Int.fac+70 >
0x79bc4f702446    4d8d77f8                lea r14, [r15-0x8]                                     
0x79bc4f70244a    4d8b7e08                mov r15, [r14+0x8]                                     
 .. * rec1 store n -- } while      return rec1 @ ; 
0x79bc4f70244e    498906                  mov [r14], rax                                         
 .. store n -- } while      return rec1 @ ; 
0x79bc4f702451    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 82
Word : 0x000079bc4f8bd437 :: Compiled at : 0x000079bc4f702400
 =============================
::> 'wdiss' was called at etc/script 35.8 <::

bye

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 349.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.C
should read 3 : 3
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc *= n -- ; } return facc ; } 
Source code file location of fac5 : "namespaces/compiler/c_syntax.csl" : 355.5 :: we are now at : namespaces/compiler/c_syntax.csl : 365.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11baa -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x00007e8de8b11baa : disassembly at namespaces/compiler/c_syntax.csl : 365.9 :
0x7e8de8b11baa    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x7e8de8b11bad    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x7e8de8b11bb2    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b11bb6    7e11                    jle 0xe8b11bc9                < C_Syntax.fac5+31 >
0x7e8de8b11bb8    0f1f4000                nop [rax]                                              
 ..  ( n > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x7e8de8b11bbc    480faff7                imul rsi, rdi                                          
 .. > 1 )      {                facc *= n -- ;     }     return facc ; } 
0x7e8de8b11bc0    48ffcf                  dec rdi                                                
0x7e8de8b11bc3    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b11bc7    7ff3                    jg 0xe8b11bbc                 < C_Syntax.fac5+18 >
 ..       facc *= n -- ;     }     return facc ; } 
0x7e8de8b11bc9    498936                  mov [r14], rsi                                         
 .. acc *= n -- ;     }     return facc ; } 
0x7e8de8b11bcc    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 35
Word : 0x00007e8de445bad6 :: Compiled at : 0x00007e8de8b11baa
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 365.9 <::
 5040
0x7e8de8b11bd2    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b11bd6    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b11bda    4981c618000000          add r14, 0x18                                          
0x7e8de8b11be1    48b8267145e48d7e0000    mov rax, 0x7e8de4457126                                
0x7e8de8b11beb    b902000000              mov ecx, 0x2                                           
0x7e8de8b11bf0    488908                  mov [rax], rcx                                         
0x7e8de8b11bf3    48b826e045e48d7e0000    mov rax, 0x7e8de445e026                                
0x7e8de8b11bfd    b904000000              mov ecx, 0x4                                           
0x7e8de8b11c02    488908                  mov [rax], rcx                                         
0x7e8de8b11c05    48b8267145e48d7e0000    mov rax, 0x7e8de4457126                                
0x7e8de8b11c0f    488b00                  mov rax, [rax]                                         
0x7e8de8b11c12    48b926e045e48d7e0000    mov rcx, 0x7e8de445e026                                
0x7e8de8b11c1c    488b09                  mov rcx, [rcx]                                         
0x7e8de8b11c1f    4803c1                  add rax, rcx                                           
0x7e8de8b11c22    b902000000              mov ecx, 0x2                                           
0x7e8de8b11c27    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b11c2e    48f7f9                  idiv rcx                                               
0x7e8de8b11c31    4983c610                add r14, 0x10                                          
0x7e8de8b11c35    498906                  mov [r14], rax                                         
0x7e8de8b11c38    498946f8                mov [r14-0x8], rax                                     
0x7e8de8b11c3c    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b11c46    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b11c49    b803000000              mov eax, 0x3                                           
0x7e8de8b11c4e    4983c608                add r14, 0x8                                           
0x7e8de8b11c52    498906                  mov [r14], rax                                         
0x7e8de8b11c55    49bba60cb0e88d7e0000    mov r11, 0x7e8de8b00ca6                                
0x7e8de8b11c5f    49ffd3                  call r11                      < C._assert0 : 0x00007e8de8b00ca6 >
0x7e8de8b11c62    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b11c66    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b11c6a    c3                      ret                                                    
 3 3 
above line should show 3 3
 =============================
C_Syntax.yada <:> csl compiled word
SourceCode for C_Syntax.yada :> 
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
Source code file location of yada : "namespaces/compiler/c_syntax.csl" : 385.10 :: we are now at : namespaces/compiler/c_syntax.csl : 385.85
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11c70 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yada : definition = 0x00007e8de8b11c70 : disassembly at namespaces/compiler/c_syntax.csl : 385.85 :
0x7e8de8b11c70    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b11c74    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b11c78    4981c620000000          add r14, 0x20                                          
 ..                  void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x7e8de8b11c7f    49c7470802000000        mov qword [r15+0x8], 0x2                               
 ..           void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x7e8de8b11c87    49c747100c000000        mov qword [r15+0x10], 0xc                              
 .. da () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11c8f    498b4708                mov rax, [r15+0x8]                                     
 .. ) { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11c93    498b4f10                mov rcx, [r15+0x10]                                    
 ..  () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11c97    4803c1                  add rax, rcx                                           
 .. t a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11c9a    b902000000              mov ecx, 0x2                                           
 .. int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11c9f    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b11ca6    48f7f9                  idiv rcx                                               
 .. void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; }  .. 
0x7e8de8b11ca9    49894718                mov [r15+0x18], rax                                    
 .. 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11cad    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b11cb1    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b11cb5    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b11cb9    4983c608                add r14, 0x8                                           
 .. 2, x ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11cbd    498906                  mov [r14], rax                                         
 .. ; x = (( a + b ) / 2 ) ; return (x) ; } 
0x7e8de8b11cc0    c3                      ret                                                    
Word_Disassemble : word - 'yada' :: codeSize = 81
Word : 0x00007e8de445fa96 :: Compiled at : 0x00007e8de8b11c70
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 385.85 <::

DataStack at : namespaces/compiler/c_syntax.csl : 385.99 :
DataStack depth =   5 : Dsp (R14) = Top = 0x00007e8de7910ae0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ae0 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -3 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -4 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 385.109 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
C_Syntax.yadaYada <:> csl compiled word
SourceCode for C_Syntax.yadaYada :> 
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return ( x ) ; } 
Source code file location of yadaYada : "namespaces/compiler/c_syntax.csl" : 386.14 :: we are now at : namespaces/compiler/c_syntax.csl : 386.103
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11cc6 -- code size = 81 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.yadaYada : definition = 0x00007e8de8b11cc6 : disassembly at namespaces/compiler/c_syntax.csl : 386.103 :
0x7e8de8b11cc6    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b11cca    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b11cce    4981c620000000          add r14, 0x20                                          
 ..    void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  .. 
0x7e8de8b11cd5    49c7470802000000        mov qword [r15+0x8], 0x2                               
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; }  .. 
0x7e8de8b11cdd    49c747100c000000        mov qword [r15+0x10], 0xc                              
 ..  int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11ce5    498b4708                mov rax, [r15+0x8]                                     
 ..  a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11ce9    498b4f10                mov rcx, [r15+0x10]                                    
 .. nt a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11ced    4803c1                  add rax, rcx                                           
 ..  x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11cf0    b902000000              mov ecx, 0x2                                           
 .. b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11cf5    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b11cfc    48f7f9                  idiv rcx                                               
 .. da () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11cff    49894718                mov [r15+0x18], rax                                    
 ..  = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11d03    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b11d07    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b11d0b    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b11d0f    4983c608                add r14, 0x8                                           
 .. 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11d13    498906                  mov [r14], rax                                         
 ..  = (( a + b ) / 2 ) ; return  ( x ) ; } 
0x7e8de8b11d16    c3                      ret                                                    
Word_Disassemble : word - 'yadaYada' :: codeSize = 81
Word : 0x00007e8de44626e6 :: Compiled at : 0x00007e8de8b11cc6
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 386.103 <::

DataStack at : namespaces/compiler/c_syntax.csl : 386.129 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

including namespaces/types.csl at namespaces/compiler/c_syntax.csl : 400.11 ...

System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 401.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12296 : WordCreateCount = 13730 : WordsAdded = 5124 : FindWordCount = 147 : FindWordMaxCount = 150
RecycledWordCount : 483
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
 78024 653
 =============================
int.wtdInclude <:> csl compiled word
SourceCode for int.wtdInclude :> 
: wtdInclude "namespaces/types.csl" include ; 
Source code file location of wtdInclude : "namespaces/compiler/c_syntax.csl" : 399.2 :: we are now at : namespaces/compiler/c_syntax.csl : 403.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b11d2b -- code size = 31 bytes
 -----------------------------
Word :: int.wtdInclude : definition = 0x00007e8de8b11d2b : disassembly at namespaces/compiler/c_syntax.csl : 403.15 :
 ..                          : wtdInclude "namespaces/types.csl" include ;  .. 
0x7e8de8b11d2b    48b802bc81e88d7e0000    mov rax, 0x7e8de881bc02       < string : 'namespaces/types.csl' >
0x7e8de8b11d35    4983c608                add r14, 0x8                                           
0x7e8de8b11d39    498906                  mov [r14], rax                                         
 ..   : wtdInclude "namespaces/types.csl" include ;  .. 
0x7e8de8b11d3c    49bb6ef3afe88d7e0000    mov r11, 0x7e8de8aff36e                                
0x7e8de8b11d46    49ffd3                  call r11                      < Root.include : 0x00007e8de8aff36e >
 .. nclude "namespaces/types.csl" include ; 
0x7e8de8b11d49    c3                      ret                                                    
Word_Disassemble : word - 'wtdInclude' :: codeSize = 31
Word : 0x00007e8de4465d56 :: Compiled at : 0x00007e8de8b11d2b
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 403.15 <::
 0x00007e8de4465d56
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 404.69 : data = '7e8de4465d56' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x00007e8de4465d56
_Identifier

                  DLNode : S_Node : size = 88 : at 00007e8de4465d56
union

                 _DLNode : n_DLNode : size = 24 : at 00007e8de4465d56
union
0x00007e8de4465d56  dlnode           *   n_After                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d5e  dlnode           *   n_Before                 = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e

                  dlnode : n_Node : size = 16 : at 00007e8de4465d56
_node
union
0x00007e8de4465d56  _node            *   n_After                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  _node            *   n_Head                   = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56

union
0x00007e8de4465d5e  _node            *   n_Before                 = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e
0x00007e8de4465d5e  _node            *   n_Tail                   = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e


union
0x00007e8de4465d66  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x7e8de4465d66
0x00007e8de4465d6a  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x7e8de4465d6a
0x00007e8de4465d6c  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x7e8de4465d6c
0x00007e8de4465d6d  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x7e8de4465d6d
0x00007e8de4465d56  byte             *   n_unmap                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  byte             *   n_bData                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  int64            *   n_iData                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  int64                node                     = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  int64            *   n_CurrentNode            = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56


                 dobject : n_dobject : size = 32 : at 00007e8de4465d56
union
0x00007e8de4465d56  dlnode           *   do_After                 = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d5e  dlnode           *   do_Before                = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e

                  dlnode : do_Node : size = 16 : at 00007e8de4465d56
_node
union
0x00007e8de4465d56  _node            *   n_After                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  _node            *   n_Head                   = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56

union
0x00007e8de4465d5e  _node            *   n_Before                 = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e
0x00007e8de4465d5e  _node            *   n_Tail                   = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e


0x00007e8de4465d66  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x7e8de4465d66
0x00007e8de4465d6a  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x7e8de4465d6a
0x00007e8de4465d6c  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x7e8de4465d6c
0x00007e8de4465d6d  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x7e8de4465d6d
union
0x00007e8de4465d6e  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x7e8de4465d6e
0x00007e8de4465d6e  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x7e8de4465d6e
0x00007e8de4465d6e  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x7e8de4465d6e



           AttributeInfo : n_Attributes : size = 56 : at 00007e8de4465d76
union
union
0x00007e8de4465d76  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x7e8de4465d76
0x00007e8de4465d7e  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x7e8de4465d7e
0x00007e8de4465d86  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x7e8de4465d86
0x00007e8de4465d8e  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x7e8de4465d8e
0x00007e8de4465d96  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x7e8de4465d96
0x00007e8de4465d9a  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x7e8de4465d9a
0x00007e8de4465d9c  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x7e8de4465d9c

union
0x00007e8de4465d9e  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x7e8de4465d9e
0x00007e8de4465d9e  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x7e8de4465d9e

union
0x00007e8de4465da6  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x7e8de4465da6
0x00007e8de4465da6  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x7e8de4465da6

0x00007e8de4465d76  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x7e8de4465d76

0x00007e8de4465dae  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x7e8de4465dae
0x00007e8de4465db6  byte             *   S_Name                   = 0x00007e8de881bbe0          offset = 0x60 : dataPtr = 0x7e8de4465db6
        S_Name = 'wtdInclude'
0x00007e8de4465dbe  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x7e8de4465dbe
0x00007e8de4465dc6  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x7e8de4465dc6
0x00007e8de4465dce  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x7e8de4465dce
0x00007e8de4465dd6  uint64           *   S_PtrToValue             = 0x00007e8de4465de6          offset = 0x80 : dataPtr = 0x7e8de4465dd6
0x00007e8de4465dde  block                Definition               = 0x00007e8de8b11d2b          offset = 0x88 : dataPtr = 0x7e8de4465dde
union
0x00007e8de4465de6  uint64               S_Value                  = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6
0x00007e8de4465de6  byte             *   S_BytePtr                = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6
0x00007e8de4465de6  byte             *   S_Object                 = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6
0x00007e8de4465de6  _Identifier      *   S_ValueWord              = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6

union
0x00007e8de4465dee  _Identifier      *   S_ContainingNamespace    = 0x00007e8de8c5d7b4          offset = 0x98 : dataPtr = 0x7e8de4465dee
0x00007e8de4465dee  _Identifier      *   S_ContainingList         = 0x00007e8de8c5d7b4          offset = 0x98 : dataPtr = 0x7e8de4465dee
0x00007e8de4465dee  _Identifier      *   S_Prototype              = 0x00007e8de8c5d7b4          offset = 0x98 : dataPtr = 0x7e8de4465dee
 0x00007e8de4465d56
Dump at : namespaces/compiler/c_syntax.csl : 405.54 :
Dump : Address = 0x00007e8de4465d56 : Number = 184 :: (little endian dump)
0x00007e8de4465d56 :  a6 5b 46 e4 8d 7e 00 00  7c d9 c5 e8 8d 7e 00 00  .[F..~.. |....~.. 
0x00007e8de4465d66 :  00 00 00 00 b0 01 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de4465d76 :  02 00 00 00 00 00 04 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de4465d86 :  00 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  ........ @....... 
0x00007e8de4465d96 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de4465da6 :  00 00 00 00 00 00 00 00  1f 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de4465db6 :  e0 bb 81 e8 8d 7e 00 00  30 00 04 04 00 00 00 00  .....~.. 0....... 
0x00007e8de4465dc6 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de4465dd6 :  e6 5d 46 e4 8d 7e 00 00  2b 1d b1 e8 8d 7e 00 00  .]F..~.. +....~.. 
0x00007e8de4465de6 :  2b 1d b1 e8 8d 7e 00 00  b4 d7 c5 e8 8d 7e 00 00  +....~.. .....~.. 
0x00007e8de4465df6 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de4465e06 :  0e 5e 46 e4 8d 7e 00 00  00 00 00 00 00 00 00 00  .^F..~.. ........ 
 0x00007e8de4465c36 0x00007e8de4465d56 0x00007e8de4465d56 0x00007e8de4465dde wtdInclude
Identifier = 7e8de8514b22, Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


 =============================
C_Syntax.tfw1 <:> csl compiled word
SourceCode for C_Syntax.tfw1 :> 
void tfw1 ( Word * w ) { hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name ) ; hp ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_Filename W_WordData->Filename ) ; ps ( w->W_WordData->Filename ) ; } 
Source code file location of tfw1 : "namespaces/compiler/c_syntax.csl" : 414.10 :: we are now at : namespaces/compiler/c_syntax.csl : 419.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b12fff -- code size = 262 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.tfw1 : definition = 0x00007e8de8b12fff : disassembly at namespaces/compiler/c_syntax.csl : 419.9 :
0x7e8de8b12fff    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b13003    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b13007    4981c608000000          add r14, 0x8                                           
 ..   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filena .. 
0x7e8de8b1300e    498b47f8                mov rax, [r15-0x8]                                     
   void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  .. 
0x7e8de8b13012    4881c088000000          add rax, 0x88                                          
0x7e8de8b13019    488b00                  mov rax, [rax]                                         
0x7e8de8b1301c    4983c608                add r14, 0x8                                           
 ..  void tfw1 ( Word * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filenam .. 
0x7e8de8b13020    498906                  mov [r14], rax                                         
0x7e8de8b13023    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b1302d    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_ .. 
0x7e8de8b13030    498b47f8                mov rax, [r15-0x8]                                     
 .. {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Fil .. 
0x7e8de8b13034    4881c060000000          add rax, 0x60                                          
0x7e8de8b1303b    488b00                  mov rax, [rax]                                         
0x7e8de8b1303e    4983c608                add r14, 0x8                                           
 ..   {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_F .. 
0x7e8de8b13042    498906                  mov [r14], rax                                         
 ..  * w )  {      hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps (  .. 
0x7e8de8b13045    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1304f    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. efinition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData .. 
0x7e8de8b13052    498b47f8                mov rax, [r15-0x8]                                     
 .. n ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filena .. 
0x7e8de8b13056    4881c060000000          add rax, 0x60                                          
0x7e8de8b1305d    488b00                  mov rax, [rax]                                         
0x7e8de8b13060    4983c608                add r14, 0x8                                           
 .. finition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData- .. 
0x7e8de8b13064    498906                  mov [r14], rax                                         
 ..  w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_Wor .. 
0x7e8de8b13067    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13071    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ame ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W .. 
0x7e8de8b13074    498b47f8                mov rax, [r15-0x8]                                     
 .. ->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Fil .. 
0x7e8de8b13078    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b1307f    488b00                  mov rax, [rax]                                         
 .. e  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;   .. 
0x7e8de8b13082    4881c028000000          add rax, 0x28                                          
0x7e8de8b13089    488b00                  mov rax, [rax]                                         
0x7e8de8b1308c    4983c608                add r14, 0x8                                           
 .. ame  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ; .. 
0x7e8de8b13090    498906                  mov [r14], rax                                         
 .. ->S_Name ) ; ps ( w->Name S_Name  ) ; hp ( w->W_Filename W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( .. 
0x7e8de8b13093    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b1309d    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. e W_WordData->Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130a0    498b47f8                mov rax, [r15-0x8]                                     
 .. Filename  ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130a4    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b130ab    488b00                  mov rax, [rax]                                         
 .. ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130ae    4881c028000000          add rax, 0x28                                          
0x7e8de8b130b5    488b00                  mov rax, [rax]                                         
0x7e8de8b130b8    4983c608                add r14, 0x8                                           
 .. ) ;      ps ( w->W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130bc    498906                  mov [r14], rax                                         
0x7e8de8b130bf    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b130c9    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. lename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130cc    498b47f8                mov rax, [r15-0x8]                                     
 .. ame W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130d0    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b130d7    488b00                  mov rax, [rax]                                         
 .. ta->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130da    4881c028000000          add rax, 0x28                                          
0x7e8de8b130e1    488b00                  mov rax, [rax]                                         
0x7e8de8b130e4    4983c608                add r14, 0x8                                           
 .. Data->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130e8    498906                  mov [r14], rax                                         
 .. >W_Filename W_WordData->Filename  ) ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b130eb    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b130f5    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b130f8    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b130fc    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b13100    4983ee08                sub r14, 0x8                                           
 ..  ; ps ( w->W_WordData->Filename  ) ;  }  .. 
0x7e8de8b13104    c3                      ret                                                    
Word_Disassemble : word - 'tfw1' :: codeSize = 262
Word : 0x00007e8de4525a19 :: Compiled at : 0x00007e8de8b12fff
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 419.9 <::
 0x00007e8de8b12fff tfw1 0x00007e8de8b12fff tfw1 tfw1 0x00007e8de881986a namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
 -----------------------------
WordDisassemble : word = 0x0000000000000000
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 423.25 <::
 0x00007e8de8b11d2b wtdInclude
 0x00007e8de7856fa8 fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x00007e8de7856fa8 fw fw namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x00007e8de4465d56
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 434.69 : data = '7e8de4465d56' : typedef = 'Word'
             _Identifier :: size = 184 :: at : 0x00007e8de4465d56
_Identifier

                  DLNode : S_Node : size = 88 : at 00007e8de4465d56
union

                 _DLNode : n_DLNode : size = 24 : at 00007e8de4465d56
union
0x00007e8de4465d56  dlnode           *   n_After                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d5e  dlnode           *   n_Before                 = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e

                  dlnode : n_Node : size = 16 : at 00007e8de4465d56
_node
union
0x00007e8de4465d56  _node            *   n_After                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  _node            *   n_Head                   = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56

union
0x00007e8de4465d5e  _node            *   n_Before                 = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e
0x00007e8de4465d5e  _node            *   n_Tail                   = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e


union
0x00007e8de4465d66  int32                n_Type                   = 0x00000000          offset = 0x10 : dataPtr = 0x7e8de4465d66
0x00007e8de4465d6a  int16                n_Size                   = 0x01b0              offset = 0x14 : dataPtr = 0x7e8de4465d6a
0x00007e8de4465d6c  Boolean              n_Slots                  = '' : 0x00           offset = 0x16 : dataPtr = 0x7e8de4465d6c
0x00007e8de4465d6d  Boolean              n_InUseFlag              = '' : 0x00           offset = 0x17 : dataPtr = 0x7e8de4465d6d
0x00007e8de4465d56  byte             *   n_unmap                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  byte             *   n_bData                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  int64            *   n_iData                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  int64                node                     = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  int64            *   n_CurrentNode            = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56


                 dobject : n_dobject : size = 32 : at 00007e8de4465d56
union
0x00007e8de4465d56  dlnode           *   do_After                 = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d5e  dlnode           *   do_Before                = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e

                  dlnode : do_Node : size = 16 : at 00007e8de4465d56
_node
union
0x00007e8de4465d56  _node            *   n_After                  = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56
0x00007e8de4465d56  _node            *   n_Head                   = 0x00007e8de4465ba6          offset = 0x0 : dataPtr = 0x7e8de4465d56

union
0x00007e8de4465d5e  _node            *   n_Before                 = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e
0x00007e8de4465d5e  _node            *   n_Tail                   = 0x00007e8de8c5d97c          offset = 0x8 : dataPtr = 0x7e8de4465d5e


0x00007e8de4465d66  int32                do_Type                  = 0x00000000          offset = 0x10 : dataPtr = 0x7e8de4465d66
0x00007e8de4465d6a  int16                do_Size                  = 0x01b0              offset = 0x14 : dataPtr = 0x7e8de4465d6a
0x00007e8de4465d6c  int8                 do_Slots                 = '' : 0x00           offset = 0x16 : dataPtr = 0x7e8de4465d6c
0x00007e8de4465d6d  int8                 do_InUseFlag             = '' : 0x00           offset = 0x17 : dataPtr = 0x7e8de4465d6d
union
0x00007e8de4465d6e  byte             *   do_unmap                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x7e8de4465d6e
0x00007e8de4465d6e  byte             *   do_bData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x7e8de4465d6e
0x00007e8de4465d6e  int64            *   do_iData                 = 0x0000000000000000          offset = 0x18 : dataPtr = 0x7e8de4465d6e



           AttributeInfo : n_Attributes : size = 56 : at 00007e8de4465d76
union
union
0x00007e8de4465d76  uint64               T_MorphismAttributes     = 0x0004000000000002          offset = 0x0 : dataPtr = 0x7e8de4465d76
0x00007e8de4465d7e  uint64               T_ObjectAttributes       = 0x0000000000000000          offset = 0x8 : dataPtr = 0x7e8de4465d7e
0x00007e8de4465d86  uint64               T_LispAttributes         = 0x0000000000000000          offset = 0x10 : dataPtr = 0x7e8de4465d86
0x00007e8de4465d8e  uint64               T_WAllocationType        = 0x0000000000000040          offset = 0x18 : dataPtr = 0x7e8de4465d8e
0x00007e8de4465d96  uint32               T_WordAttributes         = 0x00000000          offset = 0x20 : dataPtr = 0x7e8de4465d96
0x00007e8de4465d9a  uint16               T_NumberOfPrefixedArgs   = 0x0000              offset = 0x24 : dataPtr = 0x7e8de4465d9a
0x00007e8de4465d9c  uint16               T_Unused                 = 0x0000              offset = 0x26 : dataPtr = 0x7e8de4465d9c

union
0x00007e8de4465d9e  int64                T_NumberOfSlots          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x7e8de4465d9e
0x00007e8de4465d9e  int64                T_NumberOfBytes          = 0x0000000000000000          offset = 0x28 : dataPtr = 0x7e8de4465d9e

union
0x00007e8de4465da6  int64                T_Size                   = 0x0000000000000000          offset = 0x30 : dataPtr = 0x7e8de4465da6
0x00007e8de4465da6  int64                T_ChunkSize              = 0x0000000000000000          offset = 0x30 : dataPtr = 0x7e8de4465da6

0x00007e8de4465d76  uint64               AttributeArray           = 0x0004000000000002          offset = 0x0 : dataPtr = 0x7e8de4465d76

0x00007e8de4465dae  int64                CodeSize                 = 0x000000000000001f          offset = 0x58 : dataPtr = 0x7e8de4465dae
0x00007e8de4465db6  byte             *   S_Name                   = 0x00007e8de881bbe0          offset = 0x60 : dataPtr = 0x7e8de4465db6
        S_Name = 'wtdInclude'
0x00007e8de4465dbe  uint64               State                    = 0x0000000004040030          offset = 0x68 : dataPtr = 0x7e8de4465dbe
0x00007e8de4465dc6  dllist           *   S_SymbolList             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x7e8de4465dc6
0x00007e8de4465dce  uint64               S_DObjectValue           = 0x0000000000000000          offset = 0x78 : dataPtr = 0x7e8de4465dce
0x00007e8de4465dd6  uint64           *   S_PtrToValue             = 0x00007e8de4465de6          offset = 0x80 : dataPtr = 0x7e8de4465dd6
0x00007e8de4465dde  block                Definition               = 0x00007e8de8b11d2b          offset = 0x88 : dataPtr = 0x7e8de4465dde
union
0x00007e8de4465de6  uint64               S_Value                  = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6
0x00007e8de4465de6  byte             *   S_BytePtr                = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6
0x00007e8de4465de6  byte             *   S_Object                 = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6
0x00007e8de4465de6  _Identifier      *   S_ValueWord              = 0x00007e8de8b11d2b          offset = 0x90 : dataPtr = 0x7e8de4465de6

union
0x00007e8de4465dee  _Identifier      *   S_ContainingNamespace    = 0x00007e8de8c5d7b4          offset = 0x98 : dataPtr = 0x7e8de4465dee
0x00007e8de4465dee  _Identifier      *   S_ContainingList         = 0x00007e8de8c5d7b4          offset = 0x98 : dataPtr = 0x7e8de4465dee
0x00007e8de4465dee  _Identifier      *   S_Prototype              = 0x00007e8de8c5d7b4          offset = 0x98 : dataPtr = 0x7e8de4465dee

Identifier.size = 184, WordData.size = 248, Stack.size = 40
TypeInfo.size = 56, DLNode.size = 88, dllist.size = 24, dlnode.size = 16


System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 16.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 441.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12369 : WordCreateCount = 13807 : WordsAdded = 5144 : FindWordCount = 152 : FindWordMaxCount = 156
RecycledWordCount : 484
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0
 =============================
Infix.tt <:> csl compiled word
SourceCode for Infix.tt :> 
: tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name ps w->W_Filename W_WordData->Filename ps w->W_Filename W_WordData->Filename ps w->W_WordData->Filename ps ; 
Source code file location of tt : "namespaces/compiler/c_syntax.csl" : 443.2 :: we are now at : namespaces/compiler/c_syntax.csl : 444.7
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13430 -- code size = 319 bytes
TypeSignature : Object 
 -----------------------------
Word :: Infix.tt : definition = 0x00007e8de8b13430 : disassembly at namespaces/compiler/c_syntax.csl : 444.7 :
0x7e8de8b13430    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b13434    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b13438    4981c608000000          add r14, 0x8                                           
 ..                     : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->File .. 
0x7e8de8b1343f    48b8210a83e88d7e0000    mov rax, 0x7e8de8830a21                                
0x7e8de8b13449    4983c608                add r14, 0x8                                           
0x7e8de8b1344d    498906                  mov [r14], rax                                         
 ..           : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w .. 
0x7e8de8b13450    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1345a    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..        : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W .. 
0x7e8de8b1345d    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13461    488b00                  mov rax, [rax]                                         
0x7e8de8b13464    4983c608                add r14, 0x8                                           
0x7e8de8b13468    498906                  mov [r14], rax                                         
 ..    : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Fil .. 
0x7e8de8b1346b    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b13475    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 .. : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filena .. 
0x7e8de8b13478    498b47f8                mov rax, [r15-0x8]                                     
 : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename  .. 
0x7e8de8b1347c    4881c088000000          add rax, 0x88                                          
0x7e8de8b13483    488b00                  mov rax, [rax]                                         
0x7e8de8b13486    4983c608                add r14, 0x8                                           
   : tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filenam .. 
0x7e8de8b1348a    498906                  mov [r14], rax                                         
 .. w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData- .. 
0x7e8de8b1348d    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b13497    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
 ..  "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fi .. 
0x7e8de8b1349a    498b47f8                mov rax, [r15-0x8]                                     
 .. ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filen .. 
0x7e8de8b1349e    4881c060000000          add rax, 0x60                                          
0x7e8de8b134a5    488b00                  mov rax, [rax]                                         
0x7e8de8b134a8    4983c608                add r14, 0x8                                           
 .. "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Fil .. 
0x7e8de8b134ac    498906                  mov [r14], rax                                         
 ..  ps w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps .. 
0x7e8de8b134af    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b134b9    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w- .. 
0x7e8de8b134bc    498b47f8                mov rax, [r15-0x8]                                     
 .. w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordD .. 
0x7e8de8b134c0    4881c060000000          add rax, 0x60                                          
0x7e8de8b134c7    488b00                  mov rax, [rax]                                         
0x7e8de8b134ca    4983c608                add r14, 0x8                                           
 .. w @ hp w->Definition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w-> .. 
0x7e8de8b134ce    498906                  mov [r14], rax                                         
 .. ition hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Fil .. 
0x7e8de8b134d1    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b134db    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. on hp w->S_Name ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filena .. 
0x7e8de8b134de    498b47f8                mov rax, [r15-0x8]                                     
 .. e ps w->Name S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b134e2    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b134e9    488b00                  mov rax, [rax]                                         
 ..  S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b134ec    4881c028000000          add rax, 0x28                                          
0x7e8de8b134f3    488b00                  mov rax, [rax]                                         
0x7e8de8b134f6    4983c608                add r14, 0x8                                           
 .. me S_Name  ps w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b134fa    498906                  mov [r14], rax                                         
 .. s w->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b134fd    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13507    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ->W_Filename W_WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b1350a    498b47f8                mov rax, [r15-0x8]                                     
 .. _WordData->Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b1350e    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b13515    488b00                  mov rax, [rax]                                         
 .. ilename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13518    4881c028000000          add rax, 0x28                                          
0x7e8de8b1351f    488b00                  mov rax, [rax]                                         
0x7e8de8b13522    4983c608                add r14, 0x8                                           
 .. >Filename  ps w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13526    498906                  mov [r14], rax                                         
 .. s w->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13529    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13533    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ->W_Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13536    498b47f8                mov rax, [r15-0x8]                                     
 .. _Filename W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b1353a    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b13541    488b00                  mov rax, [rax]                                         
 .. WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13544    4881c028000000          add rax, 0x28                                          
0x7e8de8b1354b    488b00                  mov rax, [rax]                                         
0x7e8de8b1354e    4983c608                add r14, 0x8                                           
 .. W_WordData->Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13552    498906                  mov [r14], rax                                         
 .. >Filename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b13555    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1355f    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b13562    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13566    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1356a    4983ee08                sub r14, 0x8                                           
 .. lename  ps w->W_WordData->Filename ps ;  .. 
0x7e8de8b1356e    c3                      ret                                                    
Word_Disassemble : word - 'tt' :: codeSize = 319
Word : 0x00007e8de452f1a1 :: Compiled at : 0x00007e8de8b13430
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 444.7 <::

 0x00007e8de4465d56 
tt :  0x00007e8de4465ba6 0x00007e8de8b11d2b wtdInclude wtdInclude namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 0x00007e8de45329c1 
tti 0x00007e8de8b13574 tti tti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 
ctti
ctti : word = 7e8de4535e81 : Definition = 7e8de8b1369d ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl
 =============================
C_Syntax.ctti <:> csl compiled word
SourceCode for C_Syntax.ctti :> 
void ctti ( Word * w | ptr l ) { ps ( "\nctti" ) ; l = w->Definition ; oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name ; ps(w->S_Name) ; ps ( ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps(ptr) ; ptr = w.W_Filename W_WordData->Filename ; ps (ptr) ; ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ; ptr = w->W_WordData ; } 
Source code file location of ctti : "namespaces/compiler/c_syntax.csl" : 451.10 :: we are now at : namespaces/compiler/c_syntax.csl : 463.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1369d -- code size = 469 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.ctti : definition = 0x00007e8de8b1369d : disassembly at namespaces/compiler/c_syntax.csl : 463.9 :
0x7e8de8b1369d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b136a1    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b136a5    4981c618000000          add r14, 0x18                                          
 .. tti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ;  .. 
0x7e8de8b136ac    48b80a0c83e88d7e0000    mov rax, 0x7e8de8830c0a                                
0x7e8de8b136b6    4983c608                add r14, 0x8                                           
0x7e8de8b136ba    498906                  mov [r14], rax                                         
0x7e8de8b136bd    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b136c7    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; .. 
0x7e8de8b136ca    498b47f8                mov rax, [r15-0x8]                                     
 ..  l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps .. 
0x7e8de8b136ce    4881c088000000          add rax, 0x88                                          
0x7e8de8b136d5    488b00                  mov rax, [rax]                                         
 .. w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Na .. 
0x7e8de8b136d8    49894710                mov [r15+0x10], rax                                    
 ..  ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name .. 
0x7e8de8b136dc    48b8c1f151e88d7e0000    mov rax, 0x7e8de851f1c1                                
0x7e8de8b136e6    488bf8                  mov rdi, rax                                           
 .. tti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = .. 
0x7e8de8b136e9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b136ed    4881c000000000          add rax, 0x0                                           
0x7e8de8b136f4    488bf0                  mov rsi, rax                                           
 ..  : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w. .. 
0x7e8de8b136f7    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b136fb    488bd0                  mov rdx, rax                                           
 .. "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->N .. 
0x7e8de8b136fe    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13708    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13712    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. x : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W .. 
0x7e8de8b13715    498b47f8                mov rax, [r15-0x8]                                     
 ..  Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_Wo .. 
0x7e8de8b13719    4881c060000000          add rax, 0x60                                          
0x7e8de8b13720    488b00                  mov rax, [rax]                                         
 .. d = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_File .. 
0x7e8de8b13723    49894708                mov [r15+0x8], rax                                     
 .. = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->File .. 
0x7e8de8b13727    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1372b    4983c608                add r14, 0x8                                           
0x7e8de8b1372f    498906                  mov [r14], rax                                         
 .. on = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->F .. 
0x7e8de8b13732    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1373c    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(p .. 
0x7e8de8b1373f    498b47f8                mov rax, [r15-0x8]                                     
 .. = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; pt .. 
0x7e8de8b13743    4881c060000000          add rax, 0x60                                          
0x7e8de8b1374a    488b00                  mov rax, [rax]                                         
 ..  w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ; .. 
0x7e8de8b1374d    49894708                mov [r15+0x8], rax                                     
 ..  ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filen .. 
0x7e8de8b13751    498b47f8                mov rax, [r15-0x8]                                     
 .. (ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename .. 
0x7e8de8b13755    4881c060000000          add rax, 0x60                                          
0x7e8de8b1375c    488b00                  mov rax, [rax]                                         
0x7e8de8b1375f    4983c608                add r14, 0x8                                           
 .. ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filena .. 
0x7e8de8b13763    498906                  mov [r14], rax                                         
 .. e ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Fi .. 
0x7e8de8b13766    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13770    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Fi .. 
0x7e8de8b13773    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b13777    4983c608                add r14, 0x8                                           
0x7e8de8b1377b    498906                  mov [r14], rax                                         
 .. r = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordDat .. 
0x7e8de8b1377e    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13788    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. s(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) .. 
0x7e8de8b1378b    498b47f8                mov rax, [r15-0x8]                                     
 .. ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = .. 
0x7e8de8b1378f    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b13796    488b00                  mov rax, [rax]                                         
 .. ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordDa .. 
0x7e8de8b13799    4881c028000000          add rax, 0x28                                          
0x7e8de8b137a0    488b00                  mov rax, [rax]                                         
0x7e8de8b137a3    49894708                mov [r15+0x8], rax                                     
 .. _Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; p .. 
0x7e8de8b137a7    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b137ab    4983c608                add r14, 0x8                                           
0x7e8de8b137af    498906                  mov [r14], rax                                         
 .. w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename  .. 
0x7e8de8b137b2    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b137bc    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps  .. 
0x7e8de8b137bf    498b47f8                mov rax, [r15-0x8]                                     
 .. name  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordDat .. 
0x7e8de8b137c3    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b137ca    488b00                  mov rax, [rax]                                         
 .. ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) .. 
0x7e8de8b137cd    4881c028000000          add rax, 0x28                                          
0x7e8de8b137d4    488b00                  mov rax, [rax]                                         
 .. me W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) .. 
0x7e8de8b137d7    49894708                mov [r15+0x8], rax                                     
 .. _Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w-> .. 
0x7e8de8b137db    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b137df    4983c608                add r14, 0x8                                           
0x7e8de8b137e3    498906                  mov [r14], rax                                         
 ..  w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = .. 
0x7e8de8b137e6    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b137f0    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ta->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b137f3    498b47f8                mov rax, [r15-0x8]                                     
 .. >Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b137f7    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b137fe    488b00                  mov rax, [rax]                                         
 ..  ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13801    4881c028000000          add rax, 0x28                                          
0x7e8de8b13808    488b00                  mov rax, [rax]                                         
0x7e8de8b1380b    49894708                mov [r15+0x8], rax                                     
 ..   ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b1380f    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b13813    4983c608                add r14, 0x8                                           
0x7e8de8b13817    498906                  mov [r14], rax                                         
 ..       ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b1381a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13824    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13827    498b47f8                mov rax, [r15-0x8]                                     
 .. ordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b1382b    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b13832    488b00                  mov rax, [rax]                                         
 .. ename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13835    4881c028000000          add rax, 0x28                                          
0x7e8de8b1383c    488b00                  mov rax, [rax]                                         
0x7e8de8b1383f    4983c608                add r14, 0x8                                           
 .. ilename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13843    498906                  mov [r14], rax                                         
 ..  w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13846    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b13850    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13853    498b47f8                mov rax, [r15-0x8]                                     
 .. >W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13857    4881c0b0000000          add rax, 0xb0                                          
0x7e8de8b1385e    488b00                  mov rax, [rax]                                         
 ..  ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13861    49894708                mov [r15+0x8], rax                                     
0x7e8de8b13865    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13869    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1386d    4983ee08                sub r14, 0x8                                           
 .. ename) ;     ptr = w->W_WordData ;    }  .. 
0x7e8de8b13871    c3                      ret                                                    
Word_Disassemble : word - 'ctti' :: codeSize = 469
Word : 0x00007e8de4535e81 :: Compiled at : 0x00007e8de8b1369d
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 463.9 <::
 
ctti
ctti : word = 7e8de4535e81 : Definition = 7e8de8b1369d ctti ctti ctti namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl namespaces/compiler/c_syntax.csl 0x00007e8de4535e81 0x00007e8de4535f39
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 465.89 : data = '7e8de4535f39' : typedef = 'WordData'
               _WordData :: size = 248 :: at : 0x00007e8de4535f39
_WordData
0x00007e8de4535f39  uint64               WD_RunType               = 0x0000000000000000          offset = 0x0 : dataPtr = 0x7e8de4535f39
0x00007e8de4535f41  Namespace        *   TypeNamespace            = 0x0000000000000000          offset = 0x8 : dataPtr = 0x7e8de4535f41
0x00007e8de4535f49  byte             *   TypeNamespaceName        = 0x00005b343f349cfa          offset = 0x10 : dataPtr = 0x7e8de4535f49
        TypeNamespaceName = 'Word'
0x00007e8de4535f51  byte             *   CodeStart                = 0x00007e8de8b1369d          offset = 0x18 : dataPtr = 0x7e8de4535f51
union
0x00007e8de4535f59  byte             *   WD_Coding                = 0x00007e8de8b13698          offset = 0x20 : dataPtr = 0x7e8de4535f59
0x00007e8de4535f59  byte             *   WD_LogicCodingAfter      = 0x00007e8de8b13698          offset = 0x20 : dataPtr = 0x7e8de4535f59

0x00007e8de4535f61  byte             *   Filename                 = 0x00007e8de881986a          offset = 0x28 : dataPtr = 0x7e8de4535f61
        Filename = 'namespaces/compiler/c_syntax.csl'
0x00007e8de4535f69  int64                LineNumber               = 0x00000000000001c3          offset = 0x30 : dataPtr = 0x7e8de4535f69
0x00007e8de4535f71  int64                TokenStart_LineIndex     = 0x000000000000000a          offset = 0x38 : dataPtr = 0x7e8de4535f71
0x00007e8de4535f79  int64                NumberOfNonRegisterArgs  = 0x0000000000000001          offset = 0x40 : dataPtr = 0x7e8de4535f79
0x00007e8de4535f81  int64                NumberOfNonRegisterLocals = 0x0000000000000002         offset = 0x48 : dataPtr = 0x7e8de4535f81
0x00007e8de4535f89  int64                NumberOfVariables        = 0x0000000000000003          offset = 0x50 : dataPtr = 0x7e8de4535f89
0x00007e8de4535f91  byte             *   ObjectCode               = 0x0000000000000000          offset = 0x58 : dataPtr = 0x7e8de4535f91
0x00007e8de4535f99  byte             *   StackPushRegisterCode    = 0x0000000000000000          offset = 0x60 : dataPtr = 0x7e8de4535f99
0x00007e8de4535fa1  Word             *   AliasOf                  = 0x0000000000000000          offset = 0x68 : dataPtr = 0x7e8de4535fa1
0x00007e8de4535fa9  Word             *   OriginalWord             = 0x0000000000000000          offset = 0x70 : dataPtr = 0x7e8de4535fa9
0x00007e8de4535fb1  int64                Offset                   = 0x0000000000000000          offset = 0x78 : dataPtr = 0x7e8de4535fb1
0x00007e8de4535fb9  uint8                RegToUse                 = '' : 0x00           offset = 0x80 : dataPtr = 0x7e8de4535fb9
0x00007e8de4535fba  uint8                Opt_Rm                   = '' : 0x00           offset = 0x81 : dataPtr = 0x7e8de4535fba
0x00007e8de4535fbb  uint8                Opt_Reg                  = '' : 0x00           offset = 0x82 : dataPtr = 0x7e8de4535fbb
0x00007e8de4535fbc  uint8                SrcReg                   = '' : 0x00           offset = 0x83 : dataPtr = 0x7e8de4535fbc
0x00007e8de4535fbd  uint8                DstReg                   = '' : 0x00           offset = 0x84 : dataPtr = 0x7e8de4535fbd
0x00007e8de4535fbe  uint8                RegFlags                 = '' : 0x00           offset = 0x85 : dataPtr = 0x7e8de4535fbe
0x00007e8de4535fbf  uint8                OpInsnGroup              = '' : 0x00           offset = 0x86 : dataPtr = 0x7e8de4535fbf
0x00007e8de4535fc0  uint8                OpInsnCode               = '' : 0x00           offset = 0x87 : dataPtr = 0x7e8de4535fc0
0x00007e8de4535fc1  byte                 TypeSignature            = 'O' : 0x4f          offset = 0x88 : dataPtr = 0x7e8de4535fc1
union
0x00007e8de4535fd1  dllist           *   LocalNamespaces          = 0x0000000000000000          offset = 0x98 : dataPtr = 0x7e8de4535fd1

                  dllist : Location : size = 24 : at 00007e8de4535fd1

                 _dllist : l_List : size = 16 : at 00007e8de4535fd1
_node
union
0x00007e8de4535fd1  _node            *   n_After                  = 0x0000000000000000          offset = 0x0 : dataPtr = 0x7e8de4535fd1
0x00007e8de4535fd1  _node            *   n_Head                   = 0x0000000000000000          offset = 0x0 : dataPtr = 0x7e8de4535fd1

union
0x00007e8de4535fd9  _node            *   n_Before                 = 0x00007e8de8830cc4          offset = 0x8 : dataPtr = 0x7e8de4535fd9
0x00007e8de4535fd9  _node            *   n_Tail                   = 0x00007e8de8830cc4          offset = 0x8 : dataPtr = 0x7e8de4535fd9


                 _dllist : node : size = 16 : at 00007e8de4535fe1
_node
union
0x00007e8de4535fe1  _node            *   n_After                  = 0x00007e8de7759530          offset = 0x0 : dataPtr = 0x7e8de4535fe1
0x00007e8de4535fe1  _node            *   n_Head                   = 0x00007e8de7759530          offset = 0x0 : dataPtr = 0x7e8de4535fe1

union
0x00007e8de4535fe9  _node            *   n_Before                 = 0x0000000000000000          offset = 0x8 : dataPtr = 0x7e8de4535fe9
0x00007e8de4535fe9  _node            *   n_Tail                   = 0x0000000000000000          offset = 0x8 : dataPtr = 0x7e8de4535fe9

0x00007e8de4535fe1  _dllist          *   l_CurrentNode            = 0x00007e8de7759530          offset = 0x10 : dataPtr = 0x7e8de4535fe1
0x00007e8de4535fd1  dllist           *   OurLocation              = 0x0000000000000000          offset = 0x98 : dataPtr = 0x7e8de4535fd1
0x00007e8de4535fd1  Word             *   CompiledAsPartOf         = 0x0000000000000000          offset = 0x98 : dataPtr = 0x7e8de4535fd1

union
0x00007e8de4535fd9  int64            *   WD_ArrayDimensions       = 0x00007e8de8830cc4          offset = 0xa0 : dataPtr = 0x7e8de4535fd9
0x00007e8de4535fd9  byte             *   WD_OriginalCodeText      = 0x00007e8de8830cc4          offset = 0xa0 : dataPtr = 0x7e8de4535fd9
        WD_OriginalCodeText = 'void ctti ( Word * w | ptr l )  {      ps ( "\nctti" ) ; l = w->Definition ;      oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name S_Name  ; ps(w->S_Name) ; ps ( ptr) ;      ptr = w.W_Filename W_WordData->Filename  ;  ps(ptr) ; ptr = w.W_Filename W_WordData->Filename  ; ps (ptr) ;      ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;     ptr = w->W_WordData ;    } '

0x00007e8de4535fe1  Stack            *   WD_NamespaceStack        = 0x00007e8de7759530          offset = 0xa8 : dataPtr = 0x7e8de4535fe1
union
0x00007e8de4535fe9  ListObject       *   LambdaBody               = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x7e8de4535fe9
0x00007e8de4535fe9  int64                AccumulatedOffset        = 0x0000000000000000          offset = 0xb0 : dataPtr = 0x7e8de4535fe9

union
0x00007e8de4535ff1  ListObject       *   LambdaArgs               = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x7e8de4535ff1
0x00007e8de4535ff1  int64                Index                    = 0x0000000000000000          offset = 0xb8 : dataPtr = 0x7e8de4535ff1
0x00007e8de4535ff1  int64                WD_ArrayNumberOfDimensions = 0x0000000000000000                offset = 0xb8 : dataPtr = 0x7e8de4535ff1

0x00007e8de4535ff9  dllist           *   SourceCodeWordList       = 0x00007e8de7757a10          offset = 0xc0 : dataPtr = 0x7e8de4535ff9
0x00007e8de4536001  int64                SourceCodeMemSpaceRandMarker = 0x0000000000000000              offset = 0xc8 : dataPtr = 0x7e8de4536001
0x00007e8de4536009  dllist           *   DebugWordList            = 0x0000000000000000          offset = 0xd0 : dataPtr = 0x7e8de4536009
0x00007e8de4536011  int64                StartCharRlIndex         = 0x0000000000000014          offset = 0xd8 : dataPtr = 0x7e8de4536011
0x00007e8de4536019  int64                SC_WordIndex             = 0x0000000000000015          offset = 0xe0 : dataPtr = 0x7e8de4536019
0x00007e8de4536021  Identifier       *   CSLWord                  = 0x0000000000000000          offset = 0xe8 : dataPtr = 0x7e8de4536021
0x00007e8de4536029  Identifier       *   BaseObject               = 0x0000000000000000          offset = 0xf0 : dataPtr = 0x7e8de4536029
DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 494.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Experimental3.byteTest <:> structure : size = 0byteTest alias for _byteTest, immediate
SourceCode for Experimental3._byteTest :> 
typedef struct _byteTest { byte a8_123 ; int64 a64_123 ; byte b8_123 ; byte c8_123 ; union { int64 u64_123 ; int32 u32_123 ; int8 u8_123 ; } ; int32 a32_123 ; byte d8_123 ; int16 a16_123 ; } byteTest, abyteTest ; 
Source code file location of byteTest : "namespaces/compiler/c_syntax.csl" : 493.2 :: we are now at : namespaces/compiler/c_syntax.csl : 495.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe7863724 -- code size = 34 bytes
 -----------------------------
Word :: Experimental3.byteTest : definition = 0x00007e8de7863724 : disassembly at namespaces/compiler/c_syntax.csl : 495.13 :
0x7e8de7863724    48bf59fc53e48d7e0000    mov rdi, 0x7e8de453fc59                                
0x7e8de786372e    49ba40b82c3f345b0000    mov r10, 0x5b343f2cb840                                
0x7e8de7863738    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de7863742    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de7863745    c3                      ret                                                    
Word_Disassemble : word - 'byteTest' :: codeSize = 34
Word : 0x00007e8de4541281 :: Compiled at : 0x00007e8de7863724
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 495.13 <::
 
bt.size = 26
DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 524.17 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
C_Syntax.bttt <:> csl compiled word
SourceCode for C_Syntax.bttt :> 
void bttt ( byteTest * xbt | btt byte bbtt) { oPrintf ( "\nbtt" ) ; dump ( &xbt, xbt.size ) ; xbt.a8_123 = 'a' ; bbtt = xbt.a8_123 ; oPrintf ( "\nbtt = %c", bbtt ) ; xbt.a64_123 = 0x123456789abcdef ; xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ; xbt.a32_123 = 0x12345678 ; xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ; xbt.d8_123 = 'd' ; oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ; oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ; oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ; oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ; oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ; oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ; oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ; oPrintf ( "\nbtt = %lx", btt ) ; dump ( &xbt, xbt.size ) ; hp ( &xbt.a8_123 ) ; } 
Source code file location of bttt : "namespaces/compiler/c_syntax.csl" : 499.5 :: we are now at : namespaces/compiler/c_syntax.csl : 525.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13877 -- code size = 903 bytes
TypeSignature : Object 
 -----------------------------
Word :: C_Syntax.bttt : definition = 0x00007e8de8b13877 : disassembly at namespaces/compiler/c_syntax.csl : 525.9 :
0x7e8de8b13877    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1387b    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1387f    4981c618000000          add r14, 0x18                                          
 .. bt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;       .. 
0x7e8de8b13886    48b81c7252e88d7e0000    mov rax, 0x7e8de852721c                                
0x7e8de8b13890    488bf8                  mov rdi, rax                                           
 .. teTest * xbt | btt byte bbtt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_1 .. 
0x7e8de8b13893    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b1389d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b138a7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..     oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c",  .. 
0x7e8de8b138aa    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b138ae    4881c000000000          add rax, 0x0                                           
0x7e8de8b138b5    4983c608                add r14, 0x8                                           
0x7e8de8b138b9    498906                  mov [r14], rax                                         
 .. Printf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt  .. 
0x7e8de8b138bc    48b8d1fe53e48d7e0000    mov rax, 0x7e8de453fed1                                
0x7e8de8b138c6    488b00                  mov rax, [rax]                                         
0x7e8de8b138c9    4983c608                add r14, 0x8                                           
0x7e8de8b138cd    498906                  mov [r14], rax                                         
 .. tt)  {      oPrintf ( "\nbtt" ) ;     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt .. 
0x7e8de8b138d0    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b138da    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b138e4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..     dump ( &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123  .. 
0x7e8de8b138e7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b138eb    4881c000000000          add rax, 0x0                                           
0x7e8de8b138f2    b161                    mov cl, 0x61                                           
 .. &xbt, xbt.size ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x1234567 .. 
0x7e8de8b138f4    488908                  mov [rax], rcx                                         
 ..        xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt. .. 
0x7e8de8b138f7    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b138fb    4881c000000000          add rax, 0x0                                           
0x7e8de8b13902    488b00                  mov rax, [rax]                                         
 .. e ) ;         xbt.a8_123 = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;    .. 
0x7e8de8b13905    49894710                mov [r15+0x10], rax                                    
 ..    bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 =  .. 
0x7e8de8b13909    48b8c17552e88d7e0000    mov rax, 0x7e8de85275c1                                
0x7e8de8b13913    488bf8                  mov rdi, rax                                           
 .. a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_ .. 
0x7e8de8b13916    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b1391a    488bf0                  mov rsi, rax                                           
 .. = 'a' ;      bbtt = xbt.a8_123 ;      oPrintf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt .. 
0x7e8de8b1391d    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13927    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13931    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b13934    498b47f8                mov rax, [r15-0x8]                                     
 .. ntf ( "\nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;     .. 
0x7e8de8b13938    4881c001000000          add rax, 0x1                                           
0x7e8de8b1393f    48b9efcdab8967452301    mov rcx, 0x123456789abcdef                              
 .. nbtt = %c", bbtt ) ;      xbt.a64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a3 .. 
0x7e8de8b13949    488908                  mov [rax], rcx                                         
0x7e8de8b1394c    498b47f8                mov rax, [r15-0x8]                                     
 .. 64_123 = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32 .. 
0x7e8de8b13950    4881c009000000          add rax, 0x9                                           
0x7e8de8b13957    b162                    mov cl, 0x62                                           
 .. = 0x123456789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 =  .. 
0x7e8de8b13959    488908                  mov [rax], rcx                                         
 .. 56789abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x123456 .. 
0x7e8de8b1395c    498b47f8                mov rax, [r15-0x8]                                     
 .. 9abcdef ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, b .. 
0x7e8de8b13960    4881c00a000000          add rax, 0xa                                           
0x7e8de8b13967    b163                    mov cl, 0x63                                           
 ..  ;      xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0x .. 
0x7e8de8b13969    488908                  mov [rax], rcx                                         
 .. xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba098 .. 
0x7e8de8b1396c    498b47f8                mov rax, [r15-0x8]                                     
 .. b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654 .. 
0x7e8de8b13970    4881c018000000          add rax, 0x18                                          
0x7e8de8b13977    66b93412                mov cx, 0x1234                                         
 ..  'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;    .. 
0x7e8de8b1397b    488908                  mov [rax], rcx                                         
0x7e8de8b1397e    498b47f8                mov rax, [r15-0x8]                                     
 .. 'c' ; xbt.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ; .. 
0x7e8de8b13982    4881c013000000          add rax, 0x13                                          
0x7e8de8b13989    b978563412              mov ecx, 0x12345678                                    
 .. t.a16_123 = 0x1234 ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPr .. 
0x7e8de8b1398e    488908                  mov [rax], rcx                                         
 ..  ;      xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_1 .. 
0x7e8de8b13991    498b47f8                mov rax, [r15-0x8]                                     
 ..     xbt.a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = .. 
0x7e8de8b13995    4881c00b000000          add rax, 0xb                                           
0x7e8de8b1399c    b967452301              mov ecx, 0x1234567                                     
 .. a32_123 = 0x12345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", .. 
0x7e8de8b139a1    488908                  mov [rax], rcx                                         
 .. 678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;  .. 
0x7e8de8b139a4    49bb2143658709badc0e    mov r11, 0xedcba0987654321                              
 .. 2345678 ;    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123  .. 
0x7e8de8b139ae    4d895f08                mov [r15+0x8], r11                                     
 .. 234567, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_1 .. 
0x7e8de8b139b2    498b47f8                mov rax, [r15-0x8]                                     
 .. 67, btt = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = .. 
0x7e8de8b139b6    4881c017000000          add rax, 0x17                                          
0x7e8de8b139bd    b164                    mov r9b, 0x64                                          
 ..  = 0xedcba0987654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx  .. 
0x7e8de8b139bf    488908                  mov [rax], rcx                                         
 ..      xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;     .. 
0x7e8de8b139c2    48b84b8452e88d7e0000    mov rax, 0x7e8de852844b                                
0x7e8de8b139cc    488bf8                  mov rdi, rax                                           
 ..     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_12 .. 
0x7e8de8b139cf    498b47f8                mov rax, [r15-0x8]                                     
 .. oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 =  .. 
0x7e8de8b139d3    4881c018000000          add rax, 0x18                                          
0x7e8de8b139da    488b00                  mov rax, [rax]                                         
0x7e8de8b139dd    488bf0                  mov rsi, rax                                           
 .. 87654321 ;     xbt.d8_123 = 'd' ;     oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_1 .. 
0x7e8de8b139e0    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b139ea    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b139f4    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;    .. 
0x7e8de8b139f7    48b85f8452e88d7e0000    mov rax, 0x7e8de852845f                                
0x7e8de8b13a01    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_12 .. 
0x7e8de8b13a04    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 =  .. 
0x7e8de8b13a08    4881c013000000          add rax, 0x13                                          
0x7e8de8b13a0f    488b00                  mov rax, [rax]                                         
0x7e8de8b13a12    488bf0                  mov rsi, rax                                           
 .. 16_123 = 0x%x ", xbt.a16_123 ) ;      oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_ .. 
0x7e8de8b13a15    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13a1f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13a29    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. %lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;    .. 
0x7e8de8b13a2c    48b8748452e88d7e0000    mov rax, 0x7e8de8528474                                
0x7e8de8b13a36    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 .. 
0x7e8de8b13a39    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = % .. 
0x7e8de8b13a3d    4881c001000000          add rax, 0x1                                           
0x7e8de8b13a44    488b00                  mov rax, [rax]                                         
0x7e8de8b13a47    488bf0                  mov rsi, rax                                           
 .. 2_123 = 0x%lx ", xbt.a32_123 ) ;      oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_ .. 
0x7e8de8b13a4a    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13a54    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13a5e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. %lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oP .. 
0x7e8de8b13a61    48b8898452e88d7e0000    mov rax, 0x7e8de8528489                                
0x7e8de8b13a6b    488bf8                  mov rdi, rax                                           
 ..    oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c .. 
0x7e8de8b13a6e    498b47f8                mov rax, [r15-0x8]                                     
 .. Printf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ",  .. 
0x7e8de8b13a72    4881c00b000000          add rax, 0xb                                           
0x7e8de8b13a79    488b00                  mov rax, [rax]                                         
0x7e8de8b13a7c    488bf0                  mov rsi, rax                                           
 .. 4_123 = 0x%lx ", xbt.a64_123 ) ;      oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) .. 
0x7e8de8b13a7f    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13a89    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13a93    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. %lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf .. 
0x7e8de8b13a96    48b89e8452e88d7e0000    mov rax, 0x7e8de852849e                                
0x7e8de8b13aa0    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c  .. 
0x7e8de8b13aa3    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13aa7    4881c000000000          add rax, 0x0                                           
0x7e8de8b13aae    488b00                  mov rax, [rax]                                         
0x7e8de8b13ab1    488bf0                  mov rsi, rax                                           
 .. 2_123 = 0x%lx ", xbt.u32_123 ) ;      oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;    .. 
0x7e8de8b13ab4    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13abe    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13ac8    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf .. 
0x7e8de8b13acb    48b8af8452e88d7e0000    mov rax, 0x7e8de85284af                                
0x7e8de8b13ad5    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c  .. 
0x7e8de8b13ad8    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", x .. 
0x7e8de8b13adc    4881c009000000          add rax, 0x9                                           
0x7e8de8b13ae3    488b00                  mov rax, [rax]                                         
0x7e8de8b13ae6    488bf0                  mov rsi, rax                                           
 .. bt.a8_123 = %c ", xbt.a8_123 ) ;      oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;    .. 
0x7e8de8b13ae9    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13af3    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13afd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf .. 
0x7e8de8b13b00    48b8c08452e88d7e0000    mov rax, 0x7e8de85284c0                                
0x7e8de8b13b0a    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt .. 
0x7e8de8b13b0d    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ; .. 
0x7e8de8b13b11    4881c00a000000          add rax, 0xa                                           
0x7e8de8b13b18    488b00                  mov rax, [rax]                                         
0x7e8de8b13b1b    488bf0                  mov rsi, rax                                           
 .. bt.b8_123 = %c ", xbt.b8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;    .. 
0x7e8de8b13b1e    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13b28    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13b32    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.siz .. 
0x7e8de8b13b35    48b8d18452e88d7e0000    mov rax, 0x7e8de85284d1                                
0x7e8de8b13b3f    488bf8                  mov rdi, rax                                           
 .. ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt. .. 
0x7e8de8b13b42    498b47f8                mov rax, [r15-0x8]                                     
 ..    oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_1 .. 
0x7e8de8b13b46    4881c017000000          add rax, 0x17                                          
0x7e8de8b13b4d    488b00                  mov rax, [rax]                                         
0x7e8de8b13b50    488bf0                  mov rsi, rax                                           
 .. bt.c8_123 = %c ", xbt.c8_123 ) ;      oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xb .. 
0x7e8de8b13b53    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13b5d    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13b67    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13b6a    48b8e28452e88d7e0000    mov rax, 0x7e8de85284e2                                
0x7e8de8b13b74    488bf8                  mov rdi, rax                                           
 .. 123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13b77    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b13b7b    488bf0                  mov rsi, rax                                           
 .. bt.c8_123 = %c ", xbt.d8_123 ) ;      oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13b7e    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b13b88    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13b92    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13b95    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13b99    4881c000000000          add rax, 0x0                                           
0x7e8de8b13ba0    4983c608                add r14, 0x8                                           
0x7e8de8b13ba4    498906                  mov [r14], rax                                         
 .. btt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13ba7    48b8d1fe53e48d7e0000    mov rax, 0x7e8de453fed1                                
0x7e8de8b13bb1    488b00                  mov rax, [rax]                                         
0x7e8de8b13bb4    4983c608                add r14, 0x8                                           
0x7e8de8b13bb8    498906                  mov [r14], rax                                         
 .. oPrintf ( "\nbtt = %lx", btt ) ;      dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13bbb    49baa0fa313f345b0000    mov r10, 0x5b343f31faa0                                
0x7e8de8b13bc5    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13bcf    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  dump ( &xbt, xbt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13bd2    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13bd6    4881c000000000          add rax, 0x0                                           
0x7e8de8b13bdd    4983c608                add r14, 0x8                                           
0x7e8de8b13be1    498906                  mov [r14], rax                                         
0x7e8de8b13be4    49bb28f5afe88d7e0000    mov r11, 0x7e8de8aff528                                
0x7e8de8b13bee    49ffd3                  call r11                      < Int.hp : 0x00007e8de8aff528 >
0x7e8de8b13bf1    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13bf5    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b13bf9    4983ee08                sub r14, 0x8                                           
 .. bt.size ) ;      hp ( &xbt.a8_123 ) ; }  .. 
0x7e8de8b13bfd    c3                      ret                                                    
Word_Disassemble : word - 'bttt' :: codeSize = 903
Word : 0x00007e8de4541839 :: Compiled at : 0x00007e8de8b13877
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 525.9 <::

btt
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x00007e8de88ff5f5 : Number = 26 :: (little endian dump)
0x00007e8de88ff5f5 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 
0x00007e8de88ff605 :  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ........ ........ 

btt = a
bt.a16_123 = 0x12345 
bt.a32_123 = 0x123456412345678 
bt.a64_123 = 0x123456789abcdef 
bt.u32_123 = 0x1234567 
bt.a8_123 = a 
bt.b8_123 = b 
bt.c8_123 = c 
bt.c8_123 = d 
btt = edcba0987654321
Dump at : namespaces/compiler/c_syntax.csl : 526.11 :
Dump : Address = 0x00007e8de88ff5f5 : Number = 26 :: (little endian dump)
0x00007e8de88ff5f5 :  61 ef cd ab 89 67 45 23  01 62 63 67 45 23 01 00  a....gE# .bcgE#.. 
0x00007e8de88ff605 :  00 00 00 78 56 34 12 64  45 23 01 00 00 00 00 01  ...xV4.d E#...... 
 0x00007e8de88ff5f5
wordStructPrint was called at namespaces/compiler/c_syntax.csl : 527.40 : data = '7e8de454eb99' : typedef = 'byteTest'
               _byteTest :: size = 26 :: at : 0x00007e8de454eb99
_byteTest
0x00007e8de454eb99  byte                 a8_123                   = 'Q' : 0x51          offset = 0x0 : dataPtr = 0x7e8de454eb99
0x00007e8de454eb9a  int64                a64_123                  = 0x2100007e8de45416          offset = 0x1 : dataPtr = 0x7e8de454eb9a
0x00007e8de454eba2  byte                 b8_123                   = '�' : 0xfffffffe            offset = 0x9 : dataPtr = 0x7e8de454eba2
0x00007e8de454eba3  byte                 c8_123                   = 'S' : 0x53          offset = 0xa : dataPtr = 0x7e8de454eba3
union
0x00007e8de454eba4  int64                u64_123                  = 0x00000000007e8de4          offset = 0xb : dataPtr = 0x7e8de454eba4
0x00007e8de454eba4  int32                u32_123                  = 0x007e8de4          offset = 0xb : dataPtr = 0x7e8de454eba4
0x00007e8de454eba4  int8                 u8_123                   = '�' : 0xffffffe4            offset = 0xb : dataPtr = 0x7e8de454eba4

0x00007e8de454ebac  int32                a32_123                  = 0x0001b000          offset = 0x13 : dataPtr = 0x7e8de454ebac
0x00007e8de454ebb0  byte                 d8_123                   = '' : 0x00           offset = 0x17 : dataPtr = 0x7e8de454ebb0
0x00007e8de454ebb1  int16                a16_123                  = 0x0000              offset = 0x18 : dataPtr = 0x7e8de454ebb1
 0x0000000012345678
 0x0000000001234567
System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/compiler/c_syntax.csl : 536.9
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = C.Experimental
dlnode size : 16 bytes, dllist size : 24 bytes, dobject size : 32 bytes, DLNode size : 88 bytes, AttributeInfo size : 56 bytes, 
Symbol size : 184 bytes, Word size : 184 bytes, ListObject size : 184 bytes, WordData size : 248 bytes, Context size : 600 bytes, 
System size : 168 bytes, Debugger size : 992 bytes, MemorySpace size : 344 bytes, ReadLiner size : 2304 bytes, Lexer size : 288 bytes, 
Interpreter size : 96 bytes, Finder size : 24 bytes, Compiler size : 496 bytes, ByteArray size : 424 bytes, NamedByteArray size : 520 bytes, 
MemChunk size : 184 bytes, CSL size : 3752 bytes, OpenVimTil size : 1208 bytes, OVT_Static size : 432 bytes, OVT_MemSystem size : 216 bytes, 
Stack size : 48 bytes
_CSL_SystemState_Print :: DObjectCreateCount = 12482 : WordCreateCount = 13926 : WordsAdded = 5186 : FindWordCount = 100 : FindWordMaxCount = 161
RecycledWordCount : 484
WordsInRecycling : 0
MPFR library: 4.2.1       
MPFR header:  4.2.1 (based on 4.2.1)
BigNum Internal Bit Precision = 53
BigNum :: Width = 0 : Precision = 0 
Word size =  184 
WordData size =  248 
DLNode size =  88 
dobject size =  32 
AttributeInfo size =  56
 =============================
Experimental.Word <:> structure : size = 0Word alias for _Identifier, immediate
SourceCode for Experimental._Identifier :> 
typedef struct _Identifier { DLNode S_Node ; int64 CodeSize ; byte * S_Name ; uint64 State ; dllist * S_SymbolList ; uint64 S_DObjectValue ; uint64 * S_PtrToValue ; block Definition ; union { uint64 S_Value ; byte * S_BytePtr ; byte * S_Object ; struct _Identifier * S_ValueWord ; } ; union { struct _Identifier * S_ContainingNamespace ; struct _Identifier * S_ContainingList ; struct _Identifier * S_Prototype ; } ;
Source code file location of Word : "namespaces/types.csl" : 304.18 :: we are now at : namespaces/compiler/c_syntax.csl : 542.9
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe7857f10 -- code size = 34 bytes
 -----------------------------
Word :: Experimental.Word : definition = 0x00007e8de7857f10 : disassembly at namespaces/compiler/c_syntax.csl : 542.9 :
0x7e8de7857f10    48bf543b47e48d7e0000    mov rdi, 0x7e8de4473b54                                
0x7e8de7857f1a    49ba40b82c3f345b0000    mov r10, 0x5b343f2cb840                                
0x7e8de7857f24    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de7857f2e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de7857f31    c3                      ret                                                    
Word_Disassemble : word - 'Word' :: codeSize = 34
Word : 0x00007e8de44778bc :: Compiled at : 0x00007e8de7857f10
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 542.9 <::

_ClassTypedef : at namespaces/compiler/c_syntax.csl : 555.17 : token = struct : cloneFlag = 0
DataStack at : namespaces/compiler/c_syntax.csl : 608.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/c_syntax.csl : 608.23 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 node -p " 1+1007 " > ./node.txt

 =============================
Buffer2048.node-p <:> csl compiled word
SourceCode for Buffer2048.node-p :> 
: node-p ( txt, poftxt, buffer ) sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt ) buffer @ ash ; 
Source code file location of node-p : "namespaces/compiler/c_syntax.csl" : 610.2 :: we are now at : namespaces/compiler/c_syntax.csl : 616.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13ce7 -- code size = 114 bytes
TypeSignature : 
 -----------------------------
Word :: Buffer2048.node-p : definition = 0x00007e8de8b13ce7 : disassembly at namespaces/compiler/c_syntax.csl : 616.11 :
0x7e8de8b13ce7    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b13ceb    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b13cef    4981c608000000          add r14, 0x8                                           
 ..  txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x7e8de8b13cf6    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13cfa    488bf8                  mov rdi, rax                                           
0x7e8de8b13cfd    48b8b62053e88d7e0000    mov rax, 0x7e8de85320b6       < string : 'node -p " %s " > %s' >
0x7e8de8b13d07    488bf0                  mov rsi, rax                                           
 .. tf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x7e8de8b13d0a    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b13d0e    488bd0                  mov rdx, rax                                           
 .. buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x7e8de8b13d11    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b13d15    488bc8                  mov rcx, rax                                           
0x7e8de8b13d18    b804000000              mov r8d, 0x4                                           
 .. : node-p ( txt, poftxt, buffer )      sprintf ( buffer, "node -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ;  .. 
0x7e8de8b13d1d    49ba409e61e98d7e0000    mov r10, 0x7e8de9619e40                                
0x7e8de8b13d27    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b13d31    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. -p \" %s \" > %s", txt, poftxt )      buffer @ ash    ; 
0x7e8de8b13d34    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13d38    4983c608                add r14, 0x8                                           
0x7e8de8b13d3c    498906                  mov [r14], rax                                         
 .. \" > %s", txt, poftxt )      buffer @ ash    ; 
0x7e8de8b13d3f    49bb753cb1e88d7e0000    mov r11, 0x7e8de8b13c75                                
0x7e8de8b13d49    49ffd3                  call r11                      < Buffer2048.ash : 0x00007e8de8b13c75 >
0x7e8de8b13d4c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13d50    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b13d54    4983ee18                sub r14, 0x18                                          
 .. ", txt, poftxt )      buffer @ ash    ; 
0x7e8de8b13d58    c3                      ret                                                    
Word_Disassemble : word - 'node-p' :: codeSize = 114
Word : 0x00007e8de4552001 :: Compiled at : 0x00007e8de8b13ce7
 =============================
::> 'wdiss' was called at namespaces/compiler/c_syntax.csl 616.11 <::
1008

including namespaces/test/dev0.csl at namespaces/test/initTest.csl : 86.41 ...

System State :
==================
typeChecking is on, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 17.7
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.User
 =============================
Experimental.tx <:> csl compiled word
SourceCode for Experimental.tx :> 
: tx 4 2 / 5 + ; 
Source code file location of tx : "namespaces/test/dev0.csl" : 24.2 :: we are now at : namespaces/test/dev0.csl : 25.7
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13d97 -- code size = 21 bytes
TypeSignature : 
 -----------------------------
Word :: Experimental.tx : definition = 0x00007e8de8b13d97 : disassembly at namespaces/test/dev0.csl : 25.7 :
 ..                                  : tx 4 2 / 5 + ;  .. 
0x7e8de8b13d97    b802000000              mov eax, 0x2                                           
 ..                            : tx 4 2 / 5 + ;  .. 
0x7e8de8b13d9c    b905000000              mov ecx, 0x5                                           
 ..                          : tx 4 2 / 5 + ;  .. 
0x7e8de8b13da1    4803c1                  add rax, rcx                                           
0x7e8de8b13da4    4983c608                add r14, 0x8                                           
0x7e8de8b13da8    498906                  mov [r14], rax                                         
 ..                        : tx 4 2 / 5 + ;  .. 
0x7e8de8b13dab    c3                      ret                                                    
Word_Disassemble : word - 'tx' :: codeSize = 21
Word : 0x00007e8de4553be1 :: Compiled at : 0x00007e8de8b13d97
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 25.7 <::

 =============================
Logic.tx1 <:> csl compiled word
SourceCode for Logic.tx1 :> 
: tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ; 
Source code file location of tx1 : "namespaces/test/dev0.csl" : 28.2 :: we are now at : namespaces/test/dev0.csl : 29.8
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13dc0 -- code size = 90 bytes
TypeSignature : 
 -----------------------------
Word :: Logic.tx1 : definition = 0x00007e8de8b13dc0 : disassembly at namespaces/test/dev0.csl : 29.8 :
 ..                                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dc0    48c7c000000000          mov rax, 0x0                                           
 ..                               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dc7    4883f800                cmp rax, 0x0                                           
0x7e8de8b13dcb    0f95c0                  setnz r8b                                              
0x7e8de8b13dce    480fb6c0                movzx rax, al                                          
 ..                             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dd2    4983c608                add r14, 0x8                                           
0x7e8de8b13dd6    498906                  mov [r14], rax                                         
 ..                           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dd9    b804000000              mov r8d, 0x4                                           
 ..                     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dde    b902000000              mov ecx, 0x2                                           
 ..                   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13de3    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b13dea    48f7f9                  idiv rcx                                               
 ..                 : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13ded    b903000000              mov ecx, 0x3                                           
 ..               : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13df2    4823c1                  and rax, rcx                                           
 ..             : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13df5    b904000000              mov ecx, 0x4                                           
 ..           : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dfa    480bc1                  or rax, rcx                                            
 ..         : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13dfd    b901000000              mov ecx, 0x1                                           
0x7e8de8b13e02    4803c1                  add rax, rcx                                           
 ..       : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13e05    488bc8                  mov rcx, rax                                           
0x7e8de8b13e08    498b06                  mov rax, [r14]                                         
0x7e8de8b13e0b    4983ee08                sub r14, 0x8                                           
 ..     : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13e0f    4803c1                  add rax, rcx                                           
0x7e8de8b13e12    4983c608                add r14, 0x8                                           
0x7e8de8b13e16    498906                  mov [r14], rax                                         
 ..   : tx1 0 ! ! 8 2 / 2 / 3 & 4 | 1 + + ;  .. 
0x7e8de8b13e19    c3                      ret                                                    
Word_Disassemble : word - 'tx1' :: codeSize = 90
Word : 0x00007e8de45547b1 :: Compiled at : 0x00007e8de8b13dc0
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 29.8 <::

 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :> 
int factoriali ( REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n-- ; res = res * (n--) ; } return res; } 
Source code file location of factoriali : "namespaces/test/dev0.csl" : 37.15 :: we are now at : namespaces/test/dev0.csl : 54.27
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13e2e -- code size = 42 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x00007e8de8b13e2e : disassembly at namespaces/test/dev0.csl : 54.27 :
0x7e8de8b13e2e    498b3e                  mov rdi, [r14]                                         
 .. toriali ( REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     re .. 
0x7e8de8b13e31    be01000000              mov esi, 0x1                                           
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e36    4883ff02                cmp rdi, 0x2                                           
0x7e8de8b13e3a    7c18                    jl 0xe8b13e54                 < C_Syntax.factoriali+38 >
0x7e8de8b13e3c    0f1f4000                nop [rax]                                              
 .. le ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e40    480faff7                imul rsi, rdi                                          
 .. ( n >= 2 )     {         res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e44    48ffcf                  dec rdi                                                
 ..  res = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e47    480faff7                imul rsi, rdi                                          
 ..  = res * n-- ;          res = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e4b    48ffcf                  dec rdi                                                
0x7e8de8b13e4e    4883ff02                cmp rdi, 0x2                                           
0x7e8de8b13e52    7dec                    jge 0xe8b13e40                < C_Syntax.factoriali+18 >
 ..  res = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e54    498936                  mov [r14], rsi                                         
 .. = res * (n--) ;     }     return res; }  .. 
0x7e8de8b13e57    c3                      ret                                                    
Word_Disassemble : word - 'factoriali' :: codeSize = 42
Word : 0x00007e8de4556461 :: Compiled at : 0x00007e8de8b13e2e
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 54.27 <::
 5040 5040
 =============================
C.fac <:> csl compiled word
SourceCode for C.fac :> 
: fac ( n | rec ) rec 1 = { n @ 1 > } { n @ rec @ * rec store n -- } while return rec @ ; 
Source code file location of fac : "namespaces/test/dev0.csl" : 68.2 :: we are now at : namespaces/test/dev0.csl : 73.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13e94 -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: C.fac : definition = 0x00007e8de8b13e94 : disassembly at namespaces/test/dev0.csl : 73.17 :
0x7e8de8b13e94    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b13e98    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b13e9c    4981c610000000          add r14, 0x10                                          
 ..         : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  .. 
0x7e8de8b13ea3    49c7470801000000        mov qword [r15+0x8], 0x1                               
   : fac ( n  | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ;  .. 
0x7e8de8b13eab    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..   | rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13eb0    7e1f                    jle 0xe8b13ed1                < C.fac+61 >
0x7e8de8b13eb2    0f1f4000                nop [rax]                                              
 .. rec )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13eb6    498b47f8                mov rax, [r15-0x8]                                     
 .. )      rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13eba    498b4f08                mov rcx, [r15+0x8]                                     
 ..  rec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13ebe    480fafc1                imul rax, rcx                                          
 .. ec 1 =      { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13ec2    49894708                mov [r15+0x8], rax                                     
 .. { n @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13ec6    49ff4ff8                dec qword [r15-0x8]                                    
 ..  @ 1 > } { n @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13eca    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b13ecf    7fe5                    jg 0xe8b13eb6                 < C.fac+34 >
 .. @ rec @ * rec store n -- } while      return rec @ ; 
0x7e8de8b13ed1    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b13ed5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13ed9    4d8b7e08                mov r15, [r14+0x8]                                     
 ..  * rec store n -- } while      return rec @ ; 
0x7e8de8b13edd    498906                  mov [r14], rax                                         
 ..  store n -- } while      return rec @ ; 
0x7e8de8b13ee0    c3                      ret                                                    
Word_Disassemble : word - 'fac' :: codeSize = 77
Word : 0x00007e8de455db61 :: Compiled at : 0x00007e8de8b13e94
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 73.17 <::
 5040
 =============================
C.factorial <:> csl compiled word
SourceCode for C.factorial :> 
: factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
Source code file location of factorial : "namespaces/test/dev0.csl" : 76.2 :: we are now at : namespaces/test/dev0.csl : 77.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b13ef5 -- code size = 35 bytes
TypeSignature : 
 -----------------------------
Word :: C.factorial : definition = 0x00007e8de8b13ef5 : disassembly at namespaces/test/dev0.csl : 77.14 :
 ..                           : factorial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;  .. 
0x7e8de8b13ef5    498b3e                  mov rdi, [r14]                                         
 .. torial ( int8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13ef8    be01000000              mov esi, 0x1                                           
 .. nt8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13efd    4883ff01                cmp rdi, 0x1                                           
 .. 8 REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13f01    7e11                    jle 0xe8b13f14                < C.factorial+31 >
0x7e8de8b13f03    0f1f4000                nop [rax]                                              
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13f07    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13f0b    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13f0e    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b13f12    7ff3                    jg 0xe8b13f07                 < C.factorial+18 >
 .. @ n @ * rec store n -- } while return rec ; 
0x7e8de8b13f14    498936                  mov [r14], rsi                                         
 .. @ * rec store n -- } while return rec ; 
0x7e8de8b13f17    c3                      ret                                                    
Word_Disassemble : word - 'factorial' :: codeSize = 35
Word : 0x00007e8de4560601 :: Compiled at : 0x00007e8de8b13ef5
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 77.14 <::
 5040 factorial  : ok


 namespaces/test/dev0.csl 79.12 
starting Lisp
 stack is ...
DataStack at : namespaces/test/dev0.csl : 79.52 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005
 g23
 7
 7
 q1x0
 7
 h01
 7
 7
 average

 =============================
LispDefines.average <:> variableaverage <:> lambdaCalculus compiled word
SourceCode for LispDefines.average :> 
(define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
Source code file location of average : "namespaces/test/dev0.csl" : 92.48 :: we are now at : namespaces/test/dev0.csl : 93.24
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b13f1d -- code size = 57 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.average : definition = 0x00007e8de8b13f1d : disassembly at namespaces/test/dev0.csl : 93.24 :
0x7e8de8b13f1d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b13f21    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b13f25    4981c608000000          add r14, 0x8                                           
 ..   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x7e8de8b13f2c    498b47f0                mov rax, [r15-0x10]                                    
   (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x7e8de8b13f30    498b4ff8                mov rcx, [r15-0x8]                                     
 ..     (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x7e8de8b13f34    4803c1                  add rax, rcx                                           
 .. e average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 )))
0x7e8de8b13f37    b902000000              mov ecx, 0x2                                           
0x7e8de8b13f3c    48c7c200000000          mov rdx, 0x0                                           
0x7e8de8b13f43    48f7f9                  idiv rcx                                               
0x7e8de8b13f46    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13f4a    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b13f4e    4983ee08                sub r14, 0x8                                           
0x7e8de8b13f52    498906                  mov [r14], rax                                         
 ..         (define average (/\ ( n0 n1 )(/ ( + n0 n1 ) 2 ))) .. 
0x7e8de8b13f55    c3                      ret                                                    
Word_Disassemble : word - 'average' :: codeSize = 57
Word : 0x00007e8de8a0e638 :: Compiled at : 0x00007e8de8b13f1d
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 93.24 <::
 77
  : should show 77 7
 fib

 =============================
LispDefines.fib <:> variablefib <:> lambdaCalculus compiled word
SourceCode for LispDefines.fib :> 
(define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
Source code file location of fib : "namespaces/test/dev0.csl" : 97.76 :: we are now at : namespaces/test/dev0.csl : 98.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b13f5b -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fib : definition = 0x00007e8de8b13f5b : disassembly at namespaces/test/dev0.csl : 98.20 :
0x7e8de8b13f5b    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b13f5f    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b13f63    4981c608000000          add r14, 0x8                                           
 ..   (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x7e8de8b13f6a    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..     (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x7e8de8b13f6f    7d14                    jge 0xe8b13f85                < LispDefines.fib+42 >
0x7e8de8b13f71    0f1f4000                nop [rax]                                              
 .. (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x7e8de8b13f75    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b13f79    4983c608                add r14, 0x8                                           
0x7e8de8b13f7d    498906                  mov [r14], rax                                         
 (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x7e8de8b13f80    e945000000              jmp 0x7e8de8b13fca            < LispDefines.fib+111 >
 .. bda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13f85    498b47f8                mov rax, [r15-0x8]                                     
 .. a (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13f89    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b13f92    83c608                  add esi, 0x8                                           
0x7e8de8b13f95    498906                  mov [r14], rax                                         
 .. ib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13f98    e8beffffff              call 0x7e8de8b13f5b           < LispDefines.fib : 0x00007e8de8b13f5b >
 .. se (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13f9d    498b47f8                mov rax, [r15-0x8]                                     
 ..  (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13fa1    b902000000              mov ecx, 0x2                                           
 .. Else (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13fa6    482bc1                  sub rax, rcx                                           
0x7e8de8b13fa9    4983c608                add r14, 0x8                                           
0x7e8de8b13fad    498906                  mov [r14], rax                                         
 ..  ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
0x7e8de8b13fb0    e8a6ffffff              call 0x7e8de8b13f5b           < LispDefines.fib : 0x00007e8de8b13f5b >
0x7e8de8b13fb5    498b0e                  mov rcx, [r14]                                         
0x7e8de8b13fb8    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b13fbc    4983ee10                sub r14, 0x10                                          
0x7e8de8b13fc0    4803c1                  add rax, rcx                                           
0x7e8de8b13fc3    4983c608                add r14, 0x8                                           
0x7e8de8b13fc7    498906                  mov [r14], rax                                         
0x7e8de8b13fca    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b13fce    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b13fd2    498906                  mov [r14], rax                                         
 ..             (define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))) .. 
0x7e8de8b13fd5    c3                      ret                                                    
Word_Disassemble : word - 'fib' :: codeSize = 123
Word : 0x00007e8de8a15a68 :: Compiled at : 0x00007e8de8b13f5b
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 98.20 <::
 6765
 fib2
 6765
 7
 7
 7
 g
 h
 g1
 g2
 7
 7
 j
 h
 k

 77
 777
 77
 77
 777
 
before fib
 =============================
Compiler._fib1 <:> csl compiled word
SourceCode for Compiler._fib1 :> 
: _fib1 ( n ) { n @ 2 < } { n @ } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
Source code file location of _fib1 : "namespaces/test/dev0.csl" : 128.2 :: we are now at : namespaces/test/dev0.csl : 129.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b140f6 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: Compiler._fib1 : definition = 0x00007e8de8b140f6 : disassembly at namespaces/test/dev0.csl : 129.19 :
0x7e8de8b140f6    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b140fa    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b140fe    4981c608000000          add r14, 0x8                                           
 ..                       : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x7e8de8b14105    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..               : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x7e8de8b1410a    7d14                    jge 0xe8b14120                < Compiler._fib1+42 >
0x7e8de8b1410c    0f1f4000                nop [rax]                                              
 ..           : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x7e8de8b14110    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b14114    4983c608                add r14, 0x8                                           
0x7e8de8b14118    498906                  mov [r14], rax                                         
 ..      : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x7e8de8b1411b    e945000000              jmp 0x7e8de8b14165            < Compiler._fib1+111 >
 ..  : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x7e8de8b14120    498b47f8                mov rax, [r15-0x8]                                     
 : _fib1 ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ;  .. 
0x7e8de8b14124    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b1412d    83c608                  add esi, 0x8                                           
0x7e8de8b14130    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b14133    e8beffffff              call 0x7e8de8b140f6           < Compiler._fib1 : 0x00007e8de8b140f6 >
 ..  { n @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b14138    498b47f8                mov rax, [r15-0x8]                                     
 ..  @ 2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b1413c    b902000000              mov ecx, 0x2                                           
 ..  2 < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b14141    482bc1                  sub rax, rcx                                           
0x7e8de8b14144    4983c608                add r14, 0x8                                           
0x7e8de8b14148    498906                  mov [r14], rax                                         
 ..  < } { n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b1414b    e8a6ffffff              call 0x7e8de8b140f6           < Compiler._fib1 : 0x00007e8de8b140f6 >
0x7e8de8b14150    498b0e                  mov rcx, [r14]                                         
0x7e8de8b14153    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b14157    4983ee10                sub r14, 0x10                                          
 ..  n @  } { n @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b1415b    4803c1                  add rax, rcx                                           
0x7e8de8b1415e    4983c608                add r14, 0x8                                           
0x7e8de8b14162    498906                  mov [r14], rax                                         
0x7e8de8b14165    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b14169    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1416d    498906                  mov [r14], rax                                         
 ..  @ 1 - _fib1 n @ 2 - _fib1 + } ifElse ; 
0x7e8de8b14170    c3                      ret                                                    
Word_Disassemble : word - '_fib1' :: codeSize = 123
Word : 0x00007e8de456a251 :: Compiled at : 0x00007e8de8b140f6
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 129.19 <::
 6765
System State :
==================
typeChecking is off, optimize is on, inlining is on, infixMode is off, 
prefixMode is off, c_syntax is off, postfixMode is on
Debug is off, Verbosity = 1, Console = 0, NumberBase = 10.
Debug Source Code on : BigNum off : Lisp off : Lisp Debug : off : jcc8 off
interpreting : at namespaces/test/dev0.csl : 132.6
SignalExceptionsHandled = 0 ; SigSegvs = 0 ; Restarts = 0
StartedTimes = 1 ; RestartCondition = Unknown Condition ; LastRestartCondtion = CSL_RUN_INIT

InNamespace = Root.Compiler fibbc

 =============================
LispDefines.fibbc <:> variablefibbc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibbc :> 
(define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
Source code file location of fibbc : "namespaces/test/dev0.csl" : 134.83 :: we are now at : namespaces/test/dev0.csl : 135.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b14176 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibbc : definition = 0x00007e8de8b14176 : disassembly at namespaces/test/dev0.csl : 135.22 :
0x7e8de8b14176    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1417a    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1417e    4981c608000000          add r14, 0x8                                           
   (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x7e8de8b14185    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x7e8de8b1418a    7d14                    jge 0xe8b141a0                < LispDefines.fibbc+42 >
0x7e8de8b1418c    0f1f4000                nop [rax]                                              
 (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x7e8de8b14190    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b14194    4983c608                add r14, 0x8                                           
0x7e8de8b14198    498906                  mov [r14], rax                                         
 .. e fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b1419b    e945000000              jmp 0x7e8de8b141e5            < LispDefines.fibbc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141a0    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141a4    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b141ad    83c608                  add esi, 0x8                                           
0x7e8de8b141b0    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141b3    e8beffffff              call 0x7e8de8b14176           < LispDefines.fibbc : 0x00007e8de8b14176 >
 .. < n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141b8    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141bc    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141c1    482bc1                  sub rax, rcx                                           
0x7e8de8b141c4    4983c608                add r14, 0x8                                           
0x7e8de8b141c8    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
0x7e8de8b141cb    e8a6ffffff              call 0x7e8de8b14176           < LispDefines.fibbc : 0x00007e8de8b14176 >
0x7e8de8b141d0    498b0e                  mov rcx, [r14]                                         
0x7e8de8b141d3    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b141d7    4983ee10                sub r14, 0x10                                          
0x7e8de8b141db    4803c1                  add rax, rcx                                           
0x7e8de8b141de    4983c608                add r14, 0x8                                           
0x7e8de8b141e2    498906                  mov [r14], rax                                         
0x7e8de8b141e5    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b141e9    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b141ed    498906                  mov [r14], rax                                         
 ..          (define fibbc (lambda ( n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2)))))) .. 
0x7e8de8b141f0    c3                      ret                                                    
Word_Disassemble : word - 'fibbc' :: codeSize = 123
Word : 0x00007e8de8a02330 :: Compiled at : 0x00007e8de8b14176
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 135.22 <::
 6765
 fibcc

 =============================
LispDefines.fibcc <:> variablefibcc <:> lambdaCalculus compiled word
SourceCode for LispDefines.fibcc :> 
(define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
Source code file location of fibcc : "namespaces/test/dev0.csl" : 138.83 :: we are now at : namespaces/test/dev0.csl : 139.22
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp on
starting at address : 0xe8b141f6 -- code size = 123 bytes
TypeSignature : 
 -----------------------------
Word :: LispDefines.fibcc : definition = 0x00007e8de8b141f6 : disassembly at namespaces/test/dev0.csl : 139.22 :
0x7e8de8b141f6    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b141fa    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b141fe    4981c608000000          add r14, 0x8                                           
   (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x7e8de8b14205    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..  (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x7e8de8b1420a    7d14                    jge 0xe8b14220                < LispDefines.fibcc+42 >
0x7e8de8b1420c    0f1f4000                nop [rax]                                              
 (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x7e8de8b14210    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b14214    4983c608                add r14, 0x8                                           
0x7e8de8b14218    498906                  mov [r14], rax                                         
 .. e fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b1421b    e945000000              jmp 0x7e8de8b14265            < LispDefines.fibcc+111 >
 ..  ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b14220    498b47f8                mov rax, [r15-0x8]                                     
 ..  n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b14224    b901000000482bc149      mov r9, 0x49c12b4800000001                              
0x7e8de8b1422d    83c608                  add esi, 0x8                                           
0x7e8de8b14230    498906                  mov [r14], rax                                         
 .. c (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b14233    e8beffffff              call 0x7e8de8b141f6           < LispDefines.fibcc : 0x00007e8de8b141f6 >
 .. < n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b14238    498b47f8                mov rax, [r15-0x8]                                     
 .. n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b1423c    b902000000              mov ecx, 0x2                                           
 ..  (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b14241    482bc1                  sub rax, rcx                                           
0x7e8de8b14244    4983c608                add r14, 0x8                                           
0x7e8de8b14248    498906                  mov [r14], rax                                         
 .. (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2))))))
0x7e8de8b1424b    e8a6ffffff              call 0x7e8de8b141f6           < LispDefines.fibcc : 0x00007e8de8b141f6 >
0x7e8de8b14250    498b0e                  mov rcx, [r14]                                         
0x7e8de8b14253    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b14257    4983ee10                sub r14, 0x10                                          
0x7e8de8b1425b    4803c1                  add rax, rcx                                           
0x7e8de8b1425e    4983c608                add r14, 0x8                                           
0x7e8de8b14262    498906                  mov [r14], rax                                         
0x7e8de8b14265    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b14269    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1426d    498906                  mov [r14], rax                                         
 ..          (define fibcc (lambda ( n ) (ifElse (< n 2) n (+ (fibcc (- n 1)) (fibcc (- n 2)))))) .. 
0x7e8de8b14270    c3                      ret                                                    
Word_Disassemble : word - 'fibcc' :: codeSize = 123
Word : 0x00007e8de8a0ac80 :: Compiled at : 0x00007e8de8b141f6
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 139.22 <::
 6765
 
after fib

 namespaces/test/dev0.csl 142.12 
ending Lisp

DataStack at : namespaces/test/dev0.csl : 142.35 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev0.csl : 148.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14285 -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x00007e8de8b14285 : disassembly at namespaces/test/dev0.csl : 148.19 :
0x7e8de8b14285    498b06                  mov rax, [r14]                                         
0x7e8de8b14288    4983c608                add r14, 0x8                                           
0x7e8de8b1428c    498906                  mov [r14], rax                                         
0x7e8de8b1428f    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b14294    488bc8                  mov rcx, rax                                           
0x7e8de8b14297    498b06                  mov rax, [r14]                                         
0x7e8de8b1429a    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b1429e    483bc1                  cmp rax, rcx                                           
0x7e8de8b142a1    0f8d05000000            jge 0x7e8de8b142ac            < C._fib2+39 >
0x7e8de8b142a7    e94c000000              jmp 0x7e8de8b142f8            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142ac    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142af    4983c608                add r14, 0x8                                           
0x7e8de8b142b3    498906                  mov [r14], rax                                         
0x7e8de8b142b6    498b06                  mov rax, [r14]                                         
0x7e8de8b142b9    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142bd    48ffc8                  dec rax                                                
0x7e8de8b142c0    4983c608                add r14, 0x8                                           
0x7e8de8b142c4    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142c7    e8b9ffffff              call 0x7e8de8b14285           < C._fib2 : 0x00007e8de8b14285 >
 ..      : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142cc    498b0e                  mov rcx, [r14]                                         
0x7e8de8b142cf    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b142d3    49894ef8                mov [r14-0x8], rcx                                     
0x7e8de8b142d7    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142da    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142de    e8a2ffffff              call 0x7e8de8b14285           < C._fib2 : 0x00007e8de8b14285 >
0x7e8de8b142e3    498b0e                  mov rcx, [r14]                                         
0x7e8de8b142e6    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b142ea    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x7e8de8b142ee    4803c1                  add rax, rcx                                           
0x7e8de8b142f1    4983c608                add r14, 0x8                                           
0x7e8de8b142f5    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x7e8de8b142f8    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x00007e8de456f141 :: Compiled at : 0x00007e8de8b14285
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 148.19 <::

 6765 6765 6765
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :> 
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev0.csl : 168.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b143f9 -- code size = 172 bytes
TypeSignature : 
 -----------------------------
Word :: C.fibPTC? : definition = 0x00007e8de8b143f9 : disassembly at namespaces/test/dev0.csl : 168.12 :
0x7e8de8b143f9    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b143fd    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b14401    4981c620000000          add r14, 0x20                                          
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =       .. 
0x7e8de8b14408    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn f .. 
0x7e8de8b14410    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 .. 
0x7e8de8b14418    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = .. 
0x7e8de8b14420    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b14424    4883f800                cmp rax, 0x0                                           
0x7e8de8b14428    746b                    jz 0xe8b14495                 < C.fibPTC?+156 >
0x7e8de8b1442a    0f1f4000                nop [rax]                                              
0x7e8de8b1442e    498d4710                lea rax, [r15+0x10]                                    
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14432    498b4f18                mov rcx, [r15+0x18]                                    
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14436    488908                  mov [rax], rcx                                         
0x7e8de8b14439    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b1443d    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14441    488908                  mov [rax], rcx                                         
0x7e8de8b14444    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b14448    4983c608                add r14, 0x8                                           
0x7e8de8b1444c    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b1444f    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14453    498b4f18                mov rcx, [r15+0x18]                                    
0x7e8de8b14457    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b1445a    488bc8                  mov rcx, rax                                           
0x7e8de8b1445d    498b06                  mov rax, [r14]                                         
0x7e8de8b14460    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14464    488908                  mov [rax], rcx                                         
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  .. 
0x7e8de8b14467    498d47f8                lea rax, [r15-0x8]                                     
0x7e8de8b1446b    4983c608                add r14, 0x8                                           
0x7e8de8b1446f    498906                  mov [r14], rax                                         
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    .. 
0x7e8de8b14472    498b47f8                mov rax, [r15-0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo .. 
0x7e8de8b14476    b901000000              mov ecx, 0x1                                           
0x7e8de8b1447b    482bc1                  sub rax, rcx                                           
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  .. 
0x7e8de8b1447e    488bc8                  mov rcx, rax                                           
0x7e8de8b14481    498b06                  mov rax, [r14]                                         
0x7e8de8b14484    4983ee08                sub r14, 0x8                                           
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    .. 
0x7e8de8b14488    488908                  mov [rax], rcx                                         
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b1448b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1448f    4883f800                cmp rax, 0x0                                           
0x7e8de8b14493    7595                    jnz 0xe8b1442a                < C.fibPTC?+49 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14495    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b14499    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1449d    4d8b7e08                mov r15, [r14+0x8]                                     
 .. @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b144a1    498906                  mov [r14], rax                                         
 ..  @ + =      }     for     return fn @ ;  .. 
0x7e8de8b144a4    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC?' :: codeSize = 172
Word : 0x00007e8de4575e21 :: Compiled at : 0x00007e8de8b143f9
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 168.12 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
infibPTC2? ( n ){ int fn, fn1, fn2 ; for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev0.csl" : 187.9 :: we are now at : namespaces/test/dev0.csl : 198.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b145cf -- code size = 114 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x00007e8de8b145cf : disassembly at namespaces/test/dev0.csl : 198.13 :
0x7e8de8b145cf    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b145d3    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b145d7    4981c620000000          add r14, 0x20                                          
 .. {     int fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x7e8de8b145de    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  fn, fn1, fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x7e8de8b145e6    49c7471000000000        mov qword [r15+0x10], 0x0                              
 ..  fn2 ;     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x7e8de8b145ee    49c7471801000000        mov qword [r15+0x18], 0x1                              
 ..      for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     ret .. 
0x7e8de8b145f6    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b145fa    4883f800                cmp rax, 0x0                                           
0x7e8de8b145fe    7431                    jz 0xe8b14631                 < C_Syntax.fibPTC2?+98 >
0x7e8de8b14600    0f1f4000                nop [r8]                                               
 ..  ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b14604    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b14608    49894710                mov [r15+0x10], rax                                    
 ..             fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b1460c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b14610    49894718                mov [r15+0x18], rax                                    
 .. fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b14614    498b4710                mov rax, [r15+0x10]                                    
 ..         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b14618    498b4f18                mov rcx, [r15+0x18]                                    
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b1461c    4803c1                  add rax, rcx                                           
0x7e8de8b1461f    49894708                mov [r15+0x8], rax                                     
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x7e8de8b14623    49ff4ff8                dec qword [r15-0x8]                                    
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b14627    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1462b    4883f800                cmp rax, 0x0                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b1462f    75cf                    jnz 0xe8b14600                < C_Syntax.fibPTC2?+49 >
 .. ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b14631    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b14635    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b14639    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b1463d    498906                  mov [r14], rax                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b14640    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 114
Word : 0x00007e8de4580cd1 :: Compiled at : 0x00007e8de8b145cf
 =============================
::> 'wdiss' was called at namespaces/test/dev0.csl 198.13 <::
 6765
including namespaces/compiler/x64.csl at namespaces/test/initTest.csl : 86.41 ...

including namespaces/compiler/asmConstants.csl at namespaces/compiler/x64.csl : 92.47 ...

 =============================
Root.;; <:> csl compiled word, immediate
SourceCode for Root.;; :> 
: ;; '; find compileWord prefixable ; 
Source code file location of ;; : "namespaces/compiler/x64.csl" : 114.2 :: we are now at : namespaces/compiler/x64.csl : 114.55
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1484d -- code size = 37 bytes
 -----------------------------
Word :: Root.;; : definition = 0x00007e8de8b1484d : disassembly at namespaces/compiler/x64.csl : 114.55 :
 ..                          : ;; '; find compileWord prefixable ;  .. 
0x7e8de8b1484d    49bbf0f8afe88d7e0000    mov r11, 0x7e8de8aff8f0                                
0x7e8de8b14857    49ffd3                  call r11                      < Interpreter.semi : 0x00007e8de8aff8f0 >
 ..              : ;; '; find compileWord prefixable ;  .. 
0x7e8de8b1485a    49bae00a323f345b0000    mov r10, 0x5b343f320ae0                                
0x7e8de8b14864    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1486e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   : ;; '; find compileWord prefixable ;  .. 
0x7e8de8b14871    c3                      ret                                                    
Word_Disassemble : word - ';;' :: codeSize = 37
Word : 0x00007e8de458ce15 :: Compiled at : 0x00007e8de8b1484d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 114.55 <::

 =============================
C_Syntax.Calculate_Rex <:> csl compiled word
SourceCode for C_Syntax.Calculate_Rex :> 
uint8 Calculate_Rex ( uint8 reg, uint8 rm, uint8 rex_w_flag, uint8 rex_b_flag ) { uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ; if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ; return rex ; } 
Source code file location of Calculate_Rex : "namespaces/compiler/x64.csl" : 143.14 :: we are now at : namespaces/compiler/x64.csl : 150.18
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14934 -- code size = 250 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Calculate_Rex : definition = 0x00007e8de8b14934 : disassembly at namespaces/compiler/x64.csl : 150.18 :
0x7e8de8b14934    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b14938    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1493c    4981c610000000          add r14, 0x10                                          
 .. t8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_f .. 
0x7e8de8b14943    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b14947    4883f800                cmp rax, 0x0                                           
0x7e8de8b1494b    0f8411000000            jz 0x7e8de8b14962             < C_Syntax.Calculate_Rex+46 >
 ..  ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_ .. 
0x7e8de8b14951    b808000000              mov eax, 0x8                                           
0x7e8de8b14956    4983c608                add r14, 0x8                                           
0x7e8de8b1495a    498906                  mov [r14], rax                                         
0x7e8de8b1495d    e90e000000              jmp 0x7e8de8b14970            < C_Syntax.Calculate_Rex+60 >
 ..      uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag .. 
0x7e8de8b14962    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b14969    4983c608                add r14, 0x8                                           
0x7e8de8b1496d    498906                  mov [r14], rax                                         
 ..  rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |=  .. 
0x7e8de8b14970    49837fe007              cmp qword [r15-0x20], 0x7                              
0x7e8de8b14975    0f8e11000000            jle 0x7e8de8b1498c            < C_Syntax.Calculate_Rex+88 >
 .. ex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     r .. 
0x7e8de8b1497b    b804000000              mov eax, 0x4                                           
0x7e8de8b14980    4983c608                add r14, 0x8                                           
0x7e8de8b14984    498906                  mov [r14], rax                                         
0x7e8de8b14987    e90e000000              jmp 0x7e8de8b1499a            < C_Syntax.Calculate_Rex+102 >
 .. _flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     retur .. 
0x7e8de8b1498c    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b14993    4983c608                add r14, 0x8                                           
0x7e8de8b14997    498906                  mov [r14], rax                                         
 .. lag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return  .. 
0x7e8de8b1499a    498b0e                  mov rcx, [r14]                                         
0x7e8de8b1499d    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b149a1    4983ee10                sub r14, 0x10                                          
 ..  uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) r .. 
0x7e8de8b149a5    480bc1                  or rax, rcx                                            
0x7e8de8b149a8    4983c608                add r14, 0x8                                           
0x7e8de8b149ac    498906                  mov [r14], rax                                         
 .. : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b149af    49837fe807              cmp qword [r15-0x18], 0x7                              
0x7e8de8b149b4    0f8e11000000            jle 0x7e8de8b149cb            < C_Syntax.Calculate_Rex+151 >
 ..  reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b149ba    b801000000              mov eax, 0x1                                           
0x7e8de8b149bf    4983c608                add r14, 0x8                                           
0x7e8de8b149c3    498906                  mov [r14], rax                                         
0x7e8de8b149c6    e90e000000              jmp 0x7e8de8b149d9            < C_Syntax.Calculate_Rex+165 >
 ..  > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b149cb    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b149d2    4983c608                add r14, 0x8                                           
0x7e8de8b149d6    498906                  mov [r14], rax                                         
 ..  7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b149d9    498b0e                  mov rcx, [r14]                                         
0x7e8de8b149dc    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b149e0    4983ee10                sub r14, 0x10                                          
 .. g ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return re .. 
0x7e8de8b149e4    480bc1                  or rax, rcx                                            
 .. _flag, uint8 rex_b_flag ) {     uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex  .. 
0x7e8de8b149e7    49894708                mov [r15+0x8], rax                                     
 .. | ( ( rm > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b149eb    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b149ef    4883f800                cmp rax, 0x0                                           
0x7e8de8b149f3    0f851c000000            jnz 0x7e8de8b14a15            < C_Syntax.Calculate_Rex+225 >
 .. m > 7 ) ? 1 : 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b149f9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b149fd    4883f800                cmp rax, 0x0                                           
0x7e8de8b14a01    0f850e000000            jnz 0x7e8de8b14a15            < C_Syntax.Calculate_Rex+225 >
 .. 0 ) ) ;     if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b14a07    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b14a0b    4883f800                cmp rax, 0x0                                           
0x7e8de8b14a0f    0f8405000000            jz 0x7e8de8b14a1a             < C_Syntax.Calculate_Rex+230 >
 ..  || rex_b_flag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b14a15    49834f0840              or qword [r15+0x8], 0x40                               
 .. lag || rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b14a1a    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b14a1e    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b14a22    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b14a26    4983ee18                sub r14, 0x18                                          
 .. rex_w_flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b14a2a    498906                  mov [r14], rax                                         
 .. flag ) rex |= 0x40 ;     return rex ; }  .. 
0x7e8de8b14a2d    c3                      ret                                                    
Word_Disassemble : word - 'Calculate_Rex' :: codeSize = 250
Word : 0x00007e8de4595665 :: Compiled at : 0x00007e8de8b14934
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 150.18 <::

 =============================
C_Syntax.CalculateModRegardingDisplacement <:> csl compiled word
SourceCode for C_Syntax.CalculateModRegardingDisplacement :> 
uint8 CalculateModRegardingDisplacement ( uint8 mod, int64 disp ) { if ( mod != REG ) { if ( disp == 0 ) mod = 0 ; else if ( disp <= 0x7f ) mod = 1 ; else mod = 2 ; } return mod ; } 
Source code file location of CalculateModRegardingDisplacement : "namespaces/compiler/x64.csl" : 163.34 :: we are now at : namespaces/compiler/x64.csl : 177.38
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14ae4 -- code size = 102 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CalculateModRegardingDisplacement : definition = 0x00007e8de8b14ae4 : disassembly at namespaces/compiler/x64.csl : 177.38 :
0x7e8de8b14ae4    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b14ae8    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b14aec    4981c608000000          add r14, 0x8                                           
 .. mod, int64 disp ) {              if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f )  .. 
0x7e8de8b14af3    49837ff003              cmp qword [r15-0x10], 0x3                              
0x7e8de8b14af8    743c                    jz 0xe8b14b36                 < C_Syntax.CalculateModRegardingDisplacement+82 >
0x7e8de8b14afa    0f1f4000                nop [rax]                                              
 ..  if ( mod != REG )     {         if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;  .. 
0x7e8de8b14afe    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b14b03    7511                    jnz 0xe8b14b16                < C_Syntax.CalculateModRegardingDisplacement+50 >
0x7e8de8b14b05    0f1f4000                nop [r8]                                               
 ..      if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b09    49c747f000000000        mov qword [r15-0x10], 0x0                              
 ..  if ( disp == 0 )             mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b11    e920000000              jmp 0x7e8de8b14b36            < C_Syntax.CalculateModRegardingDisplacement+82 >
 ..           mod = 0 ;         else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b16    49837ff87f              cmp qword [r15-0x8], 0x7f                              
0x7e8de8b14b1b    7f11                    jg 0xe8b14b2e                 < C_Syntax.CalculateModRegardingDisplacement+74 >
0x7e8de8b14b1d    0f1f4000                nop [rax]                                              
 ..          else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b21    49c747f001000000        mov qword [r15-0x10], 0x1                              
 ..      else if ( disp <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b29    e908000000              jmp 0x7e8de8b14b36            < C_Syntax.CalculateModRegardingDisplacement+82 >
 .. p <= 0x7f ) mod = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b2e    49c747f002000000        mov qword [r15-0x10], 0x2                              
 .. = 1 ;        else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b36    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b14b3a    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b14b3e    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b14b42    4983ee08                sub r14, 0x8                                           
 ..       else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b46    498906                  mov [r14], rax                                         
 .. else mod = 2 ;     }     return mod ; }  .. 
0x7e8de8b14b49    c3                      ret                                                    
Word_Disassemble : word - 'CalculateModRegardingDisplacement' :: codeSize = 102
Word : 0x00007e8de45a0365 :: Compiled at : 0x00007e8de8b14ae4
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 177.38 <::

 =============================
C_Syntax.CalculateModRmByte <:> csl compiled word
SourceCode for C_Syntax.CalculateModRmByte :> 
uint8 CalculateModRmByte ( uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp ) { uint8 modRm ; mod = CalculateModRegardingDisplacement ( mod, disp ) ; if ( ( mod < 3 ) && ( rm == 4 ) ) { alertColors ; ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ; ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ; defaultColors ; pause ; quit ; } if ( sib ) { rm = 4 ; reg = 0 ; } modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ; return modRm ; } 
Source code file location of CalculateModRmByte : "namespaces/compiler/x64.csl" : 222.19 :: we are now at : namespaces/compiler/x64.csl : 246.23
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14dbf -- code size = 427 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.CalculateModRmByte : definition = 0x00007e8de8b14dbf : disassembly at namespaces/compiler/x64.csl : 246.23 :
0x7e8de8b14dbf    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b14dc3    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b14dc7    4981c610000000          add r14, 0x10                                          
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps  .. 
0x7e8de8b14dce    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b14dd2    4983c608                add r14, 0x8                                           
0x7e8de8b14dd6    498906                  mov [r14], rax                                         
 .. culateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n .. 
0x7e8de8b14dd9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b14ddd    4983c608                add r14, 0x8                                           
0x7e8de8b14de1    498906                  mov [r14], rax                                         
0x7e8de8b14de4    49bbe44ab1e88d7e0000    mov r11, 0x7e8de8b14ae4                                
0x7e8de8b14dee    49ffd3                  call r11                      < C_Syntax.CalculateModRegardingDisplacement : 0x00007e8de8b14ae4 >
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {    .. 
0x7e8de8b14df1    498d47d8                lea rax, [r15-0x28]                                    
 .. = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps  .. 
0x7e8de8b14df5    488bc8                  mov rcx, rax                                           
0x7e8de8b14df8    498b06                  mov rax, [r14]                                         
0x7e8de8b14dfb    4983ee08                sub r14, 0x8                                           
 .. 64 disp ) {     uint8 modRm ;     mod = CalculateModRegardingDisplacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {    .. 
0x7e8de8b14dff    488901                  mov [rcx], rax                                         
 .. splacement ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte .. 
0x7e8de8b14e02    49837fd803              cmp qword [r15-0x28], 0x3                              
0x7e8de8b14e07    0f8dc3000000            jge 0x7e8de8b14ed0            < C_Syntax.CalculateModRmByte+273 >
 .. d, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE .. 
0x7e8de8b14e0d    49837fe804              cmp qword [r15-0x18], 0x4                              
0x7e8de8b14e12    0f85b8000000            jnz 0x7e8de8b14ed0            < C_Syntax.CalculateModRmByte+273 >
 ..  ( mod, disp ) ;     if ( ( mod < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE .. 
0x7e8de8b14e18    498bc6                  mov rax, r14                                           
0x7e8de8b14e1b    4983ee08                sub r14, 0x8                                           
0x7e8de8b14e1f    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b14e23    7410                    jz 0xe8b14e35                 < C_Syntax.CalculateModRmByte+118 >
0x7e8de8b14e25    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b14e2a    7409                    jz 0xe8b14e35                 < C_Syntax.CalculateModRmByte+118 >
0x7e8de8b14e2c    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b14e33    eb07                    jmp 0x7e8de8b14e3c            < C_Syntax.CalculateModRmByte+125 >
0x7e8de8b14e35    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b14e3c    0f848e000000            jz 0x7e8de8b14ed0             < C_Syntax.CalculateModRmByte+273 >
 .. < 3 ) && ( rm == 4 ) )      {         alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps (  .. 
0x7e8de8b14e42    49ba70cb2f3f345b0000    mov r10, 0x5b343f2fcb70                                
0x7e8de8b14e4c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b14e56    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..     alertColors ;                ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666. .. 
0x7e8de8b14e59    48b8f34783e88d7e0000    mov rax, 0x7e8de88347f3                                
0x7e8de8b14e63    4983c608                add r14, 0x8                                           
0x7e8de8b14e67    498906                  mov [r14], rax                                         
0x7e8de8b14e6a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b14e74    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ACHINE_CODE_ERROR\n" ) ;         ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;    .. 
0x7e8de8b14e77    48b87d4883e88d7e0000    mov rax, 0x7e8de883487d                                
0x7e8de8b14e81    4983c608                add r14, 0x8                                           
0x7e8de8b14e85    498906                  mov [r14], rax                                         
0x7e8de8b14e88    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b14e92    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. 253666.pdf Table 2-2\n\n" ) ;         defaultColors ;         pause ;                quit ;     }     if ( sib )     {         rm = 4 ;   .. 
0x7e8de8b14e95    49ba60cc2f3f345b0000    mov r10, 0x5b343f2fcc60                                
0x7e8de8b14e9f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b14ea9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b14eac    49bb4317b0e88d7e0000    mov r11, 0x7e8de8b01743                                
0x7e8de8b14eb6    49ffd3                  call r11                      < User.pause : 0x00007e8de8b01743 >
0x7e8de8b14eb9    49ba20e2303f345b0000    mov r10, 0x5b343f30e220                                
0x7e8de8b14ec3    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b14ecd    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..                 quit ;     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) .. 
0x7e8de8b14ed0    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b14ed4    4883f800                cmp rax, 0x0                                           
0x7e8de8b14ed8    7414                    jz 0xe8b14eee                 < C_Syntax.CalculateModRmByte+303 >
0x7e8de8b14eda    0f1f4000                nop [rax]                                              
 ..     }     if ( sib )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0 .. 
0x7e8de8b14ede    49c747e804000000        mov qword [r15-0x18], 0x4                              
 .. b )     {         rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return  .. 
0x7e8de8b14ee6    49c747e000000000        mov qword [r15-0x20], 0x0                              
 ..         reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14eee    498b47d8                mov rax, [r15-0x28]                                    
 ..  reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14ef2    b906000000              mov ecx, 0x6                                           
 ..     reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14ef7    48d3e0                  shl rax, cl                                            
0x7e8de8b14efa    4983c608                add r14, 0x8                                           
0x7e8de8b14efe    498906                  mov [r14], rax                                         
 ..      }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f01    498b47e0                mov rax, [r15-0x20]                                    
 .. modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f05    b907000000              mov ecx, 0x7                                           
 ..   modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f0a    4823c1                  and rax, rcx                                           
 ..  mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f0d    b903000000              mov ecx, 0x3                                           
 .. = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f12    48d3e0                  shl rax, cl                                            
0x7e8de8b14f15    4983c608                add r14, 0x8                                           
0x7e8de8b14f19    498906                  mov [r14], rax                                         
 .. od << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f1c    498b0e                  mov rcx, [r14]                                         
0x7e8de8b14f1f    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b14f23    4983ee10                sub r14, 0x10                                          
 ..  = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f27    4803c1                  add rax, rcx                                           
0x7e8de8b14f2a    4983c608                add r14, 0x8                                           
0x7e8de8b14f2e    498906                  mov [r14], rax                                         
 .. 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f31    498b47e8                mov rax, [r15-0x18]                                    
 .. reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f35    b907000000              mov ecx, 0x7                                           
 .. ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f3a    4823c1                  and rax, rcx                                           
0x7e8de8b14f3d    4983c608                add r14, 0x8                                           
0x7e8de8b14f41    498906                  mov [r14], rax                                         
 .. Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f44    498b0e                  mov rcx, [r14]                                         
0x7e8de8b14f47    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b14f4b    4983ee10                sub r14, 0x10                                          
 ..  << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f4f    4803c1                  add rax, rcx                                           
 ..   rm = 4 ;        reg = 0 ;     }     modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f52    49894708                mov [r15+0x8], rax                                     
 .. 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f56    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b14f5a    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b14f5e    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b14f62    4983ee20                sub r14, 0x20                                          
 .. < 3 ) + ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f66    498906                  mov [r14], rax                                         
 .. ( rm Bits.& 0x7 ) ;    return modRm ; }  .. 
0x7e8de8b14f69    c3                      ret                                                    
Word_Disassemble : word - 'CalculateModRmByte' :: codeSize = 427
Word : 0x00007e8de45b37d5 :: Compiled at : 0x00007e8de8b14dbf
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 246.23 <::

 =============================
C_Syntax._Compile_Write_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax._Compile_Write_Instruction_X64 :> 
void _Compile_Write_Instruction_X64 ( uint8 rex, uint8 opCode0, uint8 opCode1, uint8 modRm, int16 controlFlags, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { int64 nbytes, _here ; if ( DBI ) { _here = Here ; } if ( rex ) _Compile_Int8 ( rex ) ; if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ; if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ; if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ; if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ; if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ; if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ; if ( DBI ) { nbytes = Here - _here ; if ( nbytes ) { location ( ) ; alertColors ; oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; udis1x ( _here ) ; defaultColors ; } else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; } } 
Source code file location of _Compile_Write_Instruction_X64 : "namespaces/compiler/x64.csl" : 249.31 :: we are now at : namespaces/compiler/x64.csl : 280.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14f6f -- code size = 848 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_Write_Instruction_X64 : definition = 0x00007e8de8b14f6f : disassembly at namespaces/compiler/x64.csl : 280.35 :
0x7e8de8b14f6f    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b14f73    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b14f77    4981c618000000          add r14, 0x18                                          
 .. ) {    int64 nbytes, _here ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 )  .. 
0x7e8de8b14f7e    48b805b758e48d7e0000    mov rax, 0x7e8de458b705                                
0x7e8de8b14f88    488b00                  mov rax, [rax]                                         
0x7e8de8b14f8b    4883f800                cmp rax, 0x0                                           
0x7e8de8b14f8f    742c                    jz 0xe8b14fbd                 < C_Syntax._Compile_Write_Instruction_X64+78 >
0x7e8de8b14f91    0f1f4000                nop [rax]                                              
0x7e8de8b14f95    49ba40fc313f345b0000    mov r10, 0x5b343f31fc40                                
0x7e8de8b14f9f    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b14fa9    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) o .. 
0x7e8de8b14fac    498d4710                lea rax, [r15+0x10]                                    
0x7e8de8b14fb0    488bc8                  mov rcx, rax                                           
0x7e8de8b14fb3    498b06                  mov rax, [r14]                                         
0x7e8de8b14fb6    4983ee08                sub r14, 0x8                                           
 ..  ;     if ( DBI )     {         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) o .. 
0x7e8de8b14fba    488901                  mov [rcx], rax                                         
 ..         _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCo .. 
0x7e8de8b14fbd    498b47b0                mov rax, [r15-0x50]                                    
0x7e8de8b14fc1    4883f800                cmp rax, 0x0                                           
0x7e8de8b14fc5    7426                    jz 0xe8b14fed                 < C_Syntax._Compile_Write_Instruction_X64+126 >
0x7e8de8b14fc7    0f1f4000                nop [rax]                                              
 ..      }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 (  .. 
0x7e8de8b14fcb    498b47b0                mov rax, [r15-0x50]                                    
0x7e8de8b14fcf    4983c608                add r14, 0x8                                           
0x7e8de8b14fd3    498906                  mov [r14], rax                                         
 ..   _here = Here ;     }     if ( rex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 )  .. 
0x7e8de8b14fd6    49ba60fd313f345b0000    mov r10, 0x5b343f31fd60                                
0x7e8de8b14fe0    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b14fea    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. ex ) _Compile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1  .. 
0x7e8de8b14fed    498b47b8                mov rax, [r15-0x48]                                    
0x7e8de8b14ff1    4883f800                cmp rax, 0x0                                           
0x7e8de8b14ff5    7426                    jz 0xe8b1501d                 < C_Syntax._Compile_Write_Instruction_X64+174 >
0x7e8de8b14ff7    0f1f4000                nop [rax]                                              
 ..  ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.&  .. 
0x7e8de8b14ffb    498b47b8                mov rax, [r15-0x48]                                    
0x7e8de8b14fff    4983c608                add r14, 0x8                                           
0x7e8de8b15003    498906                  mov [r14], rax                                         
 .. ile_Int8 ( rex ) ;     if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if .. 
0x7e8de8b15006    49ba60fd313f345b0000    mov r10, 0x5b343f31fd60                                
0x7e8de8b15010    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1501a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. _Int8 ( ( byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_ .. 
0x7e8de8b1501d    498b47c0                mov rax, [r15-0x40]                                    
0x7e8de8b15021    4883f800                cmp rax, 0x0                                           
0x7e8de8b15025    7426                    jz 0xe8b1504d                 < C_Syntax._Compile_Write_Instruction_X64+222 >
0x7e8de8b15027    0f1f4000                nop [rax]                                              
 ..  ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && (  .. 
0x7e8de8b1502b    498b47c0                mov rax, [r15-0x40]                                    
0x7e8de8b1502f    4983c608                add r14, 0x8                                           
0x7e8de8b15033    498906                  mov [r14], rax                                         
 .. byte ) opCode0 ) ;     if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( mod .. 
0x7e8de8b15036    49ba60fd313f345b0000    mov r10, 0x5b343f31fd60                                
0x7e8de8b15040    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1504a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. nt8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB .. 
0x7e8de8b1504d    498b47d0                mov rax, [r15-0x30]                                    
 .. e1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 .. 
0x7e8de8b15051    b902000000              mov ecx, 0x2                                           
 .. ode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_In .. 
0x7e8de8b15056    4823c1                  and rax, rcx                                           
0x7e8de8b15059    4883f800                cmp rax, 0x0                                           
 .. ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compi .. 
0x7e8de8b1505d    7426                    jz 0xe8b15085                 < C_Syntax._Compile_Write_Instruction_X64+278 >
0x7e8de8b1505f    0f1f4000                nop [rax]                                              
 .. gs Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp ||  .. 
0x7e8de8b15063    498b47c8                mov rax, [r15-0x38]                                    
0x7e8de8b15067    4983c608                add r14, 0x8                                           
0x7e8de8b1506b    498906                  mov [r14], rax                                         
 .. f ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;   .. 
0x7e8de8b1506e    49ba60fd313f345b0000    mov r10, 0x5b343f31fd60                                
0x7e8de8b15078    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b15082    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits .. 
0x7e8de8b15085    498b47d8                mov rax, [r15-0x28]                                    
 ..  ) _Compile_Int8 ( ( byte ) opCode1 ) ;     if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFla .. 
0x7e8de8b15089    4883f800                cmp rax, 0x0                                           
0x7e8de8b1508d    7463                    jz 0xe8b150f2                 < C_Syntax._Compile_Write_Instruction_X64+387 >
0x7e8de8b1508f    0f1f4000                nop [rax]                                              
 .. le_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B .. 
0x7e8de8b15093    498b47d0                mov rax, [r15-0x30]                                    
 ..     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDis .. 
0x7e8de8b15097    b904000000              mov ecx, 0x4                                           
 .. ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmD .. 
0x7e8de8b1509c    4823c1                  and rax, rcx                                           
0x7e8de8b1509f    4983c608                add r14, 0x8                                           
 .. Rm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile .. 
0x7e8de8b150a3    498906                  mov [r14], rax                                         
 .. Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& D .. 
0x7e8de8b150a6    498bc6                  mov rax, r14                                           
0x7e8de8b150a9    4983ee08                sub r14, 0x8                                           
0x7e8de8b150ad    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b150b1    7410                    jz 0xe8b150c3                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x7e8de8b150b3    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b150b8    7409                    jz 0xe8b150c3                 < C_Syntax._Compile_Write_Instruction_X64+340 >
0x7e8de8b150ba    49c70601000000          mov qword [r14], 0x1                                   
 .. & MODRM_B ) ) _Compile_Int8 ( modRm ) ;     if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( contro .. 
0x7e8de8b150c1    eb07                    jmp 0x7e8de8b150ca            < C_Syntax._Compile_Write_Instruction_X64+347 >
0x7e8de8b150c3    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b150ca    7426                    jz 0xe8b150f2                 < C_Syntax._Compile_Write_Instruction_X64+387 >
0x7e8de8b150cc    0f1f4000                nop [rax]                                              
 .. lags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0  .. 
0x7e8de8b150d0    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b150d4    4983c608                add r14, 0x8                                           
0x7e8de8b150d8    498906                  mov [r14], rax                                         
 .. ib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( di .. 
0x7e8de8b150db    49ba60fd313f345b0000    mov r10, 0x5b343f31fd60                                
0x7e8de8b150e5    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b150ef    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  ) ) _Compile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm  .. 
0x7e8de8b150f2    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b150f6    4883f800                cmp rax, 0x0                                           
0x7e8de8b150fa    0f8513000000            jnz 0x7e8de8b15113            < C_Syntax._Compile_Write_Instruction_X64+420 >
 .. ile_Int8 ( sib ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( contr .. 
0x7e8de8b15100    498b47d0                mov rax, [r15-0x30]                                    
 ..    if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B .. 
0x7e8de8b15104    b908000000              mov ecx, 0x8                                           
 ..      if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM .. 
0x7e8de8b15109    4823c1                  and rax, rcx                                           
0x7e8de8b1510c    4983c608                add r14, 0x8                                           
 .. b ) ;     if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits. .. 
0x7e8de8b15110    498906                  mov [r14], rax                                         
 .. s.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, i .. 
0x7e8de8b15113    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b15117    4983c608                add r14, 0x8                                           
0x7e8de8b1511b    498906                  mov [r14], rax                                         
 .. SP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize .. 
0x7e8de8b1511e    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b15122    4983c608                add r14, 0x8                                           
0x7e8de8b15126    498906                  mov [r14], rax                                         
 .. Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( contro .. 
0x7e8de8b15129    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15130    4983c608                add r14, 0x8                                           
0x7e8de8b15134    498906                  mov [r14], rax                                         
 .. p || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compi .. 
0x7e8de8b15137    49bbdf4bb1e88d7e0000    mov r11, 0x7e8de8b14bdf                                
0x7e8de8b15141    49ffd3                  call r11                      < C_Syntax._Compile_ImmDispData : 0x00007e8de8b14bdf >
 .. Data ( disp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& I .. 
0x7e8de8b15144    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b15148    4883f800                cmp rax, 0x0                                           
0x7e8de8b1514c    0f8513000000            jnz 0x7e8de8b15165            < C_Syntax._Compile_Write_Instruction_X64+502 >
 .. sp, dispSize, 0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) )  .. 
0x7e8de8b15152    498b47d0                mov rax, [r15-0x30]                                    
 ..     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     .. 
0x7e8de8b15156    b910000000              mov ecx, 0x10                                          
 .. ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )   .. 
0x7e8de8b1515b    4823c1                  and rax, rcx                                           
0x7e8de8b1515e    4983c608                add r14, 0x8                                           
 ..  0 ) ;     if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DB .. 
0x7e8de8b15162    498906                  mov [r14], rax                                         
 .. ts.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here  .. 
0x7e8de8b15165    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b15169    4983c608                add r14, 0x8                                           
0x7e8de8b1516d    498906                  mov [r14], rax                                         
 .. IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;     .. 
0x7e8de8b15170    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15174    4983c608                add r14, 0x8                                           
0x7e8de8b15178    498906                  mov [r14], rax                                         
 .. Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( n .. 
0x7e8de8b1517b    498b47d0                mov rax, [r15-0x30]                                    
 .. ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {    .. 
0x7e8de8b1517f    b910000000              mov ecx, 0x10                                          
 .. a ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {  .. 
0x7e8de8b15184    4823c1                  and rax, rcx                                           
0x7e8de8b15187    4983c608                add r14, 0x8                                           
0x7e8de8b1518b    498906                  mov [r14], rax                                         
 .. mm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         .. 
0x7e8de8b1518e    49bbdf4bb1e88d7e0000    mov r11, 0x7e8de8b14bdf                                
0x7e8de8b15198    49ffd3                  call r11                      < C_Syntax._Compile_ImmDispData : 0x00007e8de8b14bdf >
 .. trolFlags Bits.& IMM_B ) ) ;     if ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location (  .. 
0x7e8de8b1519b    48b805b758e48d7e0000    mov rax, 0x7e8de458b705                                
0x7e8de8b151a5    488b00                  mov rax, [rax]                                         
0x7e8de8b151a8    4883f800                cmp rax, 0x0                                           
0x7e8de8b151ac    0f8400010000            jz 0x7e8de8b152b2             < C_Syntax._Compile_Write_Instruction_X64+835 >
0x7e8de8b151b2    49ba40fc313f345b0000    mov r10, 0x5b343f31fc40                                
0x7e8de8b151bc    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b151c6    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b151c9    498b4710                mov rax, [r15+0x10]                                    
 .. ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;        .. 
0x7e8de8b151cd    488bc8                  mov rcx, rax                                           
0x7e8de8b151d0    498b06                  mov rax, [r14]                                         
0x7e8de8b151d3    4983ee08                sub r14, 0x8                                           
 .. f ( DBI )     {         nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;      .. 
0x7e8de8b151d7    482bc1                  sub rax, rcx                                           
0x7e8de8b151da    49894708                mov [r15+0x8], rax                                     
 ..  nbytes = Here - _here ;         if ( nbytes )         {             location ( ) ;             alertColors ;             oPrintf ( "\n_C .. 
0x7e8de8b151de    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b151e2    4883f800                cmp rax, 0x0                                           
0x7e8de8b151e6    0f8494000000            jz 0x7e8de8b15280             < C_Syntax._Compile_Write_Instruction_X64+785 >
0x7e8de8b151ec    49bbddfeafe88d7e0000    mov r11, 0x7e8de8affedd                                
0x7e8de8b151f6    49ffd3                  call r11                      < System.location : 0x00007e8de8affedd >
 ..            location ( ) ;             alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _her .. 
0x7e8de8b151f9    49ba70cb2f3f345b0000    mov r10, 0x5b343f2fcb70                                
0x7e8de8b15203    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1520d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..   alertColors ;             oPrintf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _ .. 
0x7e8de8b15210    48b86e8e56e88d7e0000    mov rax, 0x7e8de8568e6e                                
0x7e8de8b1521a    488bf8                  mov rdi, rax                                           
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else .. 
0x7e8de8b1521d    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b15221    488bf0                  mov rsi, rax                                           
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrint .. 
0x7e8de8b15224    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b15228    488bd0                  mov rdx, rax                                           
0x7e8de8b1522b    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b15235    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1523f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. here, nbytes ) ;             udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_In .. 
0x7e8de8b15242    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b15246    4983c608                add r14, 0x8                                           
0x7e8de8b1524a    498906                  mov [r14], rax                                         
0x7e8de8b1524d    49babe88303f345b0000    mov r10, 0x5b343f3088be                                
0x7e8de8b15257    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b15261    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..        udis1x ( _here ) ;             defaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx :  .. 
0x7e8de8b15264    49ba60cc2f3f345b0000    mov r10, 0x5b343f2fcc60                                
0x7e8de8b1526e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b15278    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x7e8de8b1527b    e932000000              jmp 0x7e8de8b152b2            < C_Syntax._Compile_Write_Instruction_X64+835 >
 .. rs ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x7e8de8b15280    48b8a58e56e88d7e0000    mov rax, 0x7e8de8568ea5                                
0x7e8de8b1528a    488bf8                  mov rdi, rax                                           
 .. truction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x7e8de8b1528d    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b15291    488bf0                  mov rsi, rax                                           
 .. n_X64 : %lx : %d bytes : ...", _here, nbytes ) ;     } }  .. 
0x7e8de8b15294    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b15298    488bd0                  mov rdx, rax                                           
 .. efaultColors ;         }         else oPrintf ( "\nError : _Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ;      .. 
0x7e8de8b1529b    49bae0342d3f345b0000    mov r10, 0x5b343f2d34e0                                
0x7e8de8b152a5    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b152af    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b152b2    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b152b6    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b152ba    4983ee50                sub r14, 0x50                                          
 .. bytes : ...", _here, nbytes ) ;     } }  .. 
0x7e8de8b152be    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Write_Instruction_X64' :: codeSize = 848
Word : 0x00007e8de45bce75 :: Compiled at : 0x00007e8de8b14f6f
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 280.35 <::

 =============================
C_Syntax.Compile_CalculateWrite_Instruction_X64 <:> csl compiled word
SourceCode for C_Syntax.Compile_CalculateWrite_Instruction_X64 :> 
void Compile_CalculateWrite_Instruction_X64 ( uint8 opCode0, uint8 opCode1, uint8 mod, uint8 reg, uint8 rm, uint16 controlFlags, uint8 sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize ) { uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ; uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ; _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; } 
Source code file location of Compile_CalculateWrite_Instruction_X64 : "namespaces/compiler/x64.csl" : 319.39 :: we are now at : namespaces/compiler/x64.csl : 327.43
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b152c4 -- code size = 373 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_CalculateWrite_Instruction_X64 : definition = 0x00007e8de8b152c4 : disassembly at namespaces/compiler/x64.csl : 327.43 :
0x7e8de8b152c4    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b152c8    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b152cc    4981c618000000          add r14, 0x18                                          
 .. e ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     u .. 
0x7e8de8b152d3    498b47c0                mov rax, [r15-0x40]                                    
0x7e8de8b152d7    4983c608                add r14, 0x8                                           
0x7e8de8b152db    498906                  mov [r14], rax                                         
 ..      uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8  .. 
0x7e8de8b152de    498b47c8                mov rax, [r15-0x38]                                    
0x7e8de8b152e2    4983c608                add r14, 0x8                                           
0x7e8de8b152e6    498906                  mov [r14], rax                                         
 .. int8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm  .. 
0x7e8de8b152e9    49837ff808              cmp qword [r15-0x8], 0x8                               
0x7e8de8b152ee    0f94c0                  setz r8b                                               
0x7e8de8b152f1    480fb6c0                movzx rax, al                                          
0x7e8de8b152f5    4983c608                add r14, 0x8                                           
0x7e8de8b152f9    498906                  mov [r14], rax                                         
 .. _Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte .. 
0x7e8de8b152fc    498b47d0                mov rax, [r15-0x30]                                    
 .. mSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib .. 
0x7e8de8b15300    b920000000              mov ecx, 0x20                                          
 .. immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, s .. 
0x7e8de8b15305    4823c1                  and rax, rcx                                           
0x7e8de8b15308    4983c608                add r14, 0x8                                           
0x7e8de8b1530c    498906                  mov [r14], rax                                         
 .. == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp .. 
0x7e8de8b1530f    498b0e                  mov rcx, [r14]                                         
0x7e8de8b15312    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b15316    4983ee10                sub r14, 0x10                                          
 .. ulate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModR .. 
0x7e8de8b1531a    480bc1                  or rax, rcx                                            
0x7e8de8b1531d    0f95c0                  setnz al                                               
0x7e8de8b15320    480fb6c0                movzx rax, al                                          
0x7e8de8b15324    4983c608                add r14, 0x8                                           
0x7e8de8b15328    498906                  mov [r14], rax                                         
 .. ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;  .. 
0x7e8de8b1532b    498b47d0                mov rax, [r15-0x30]                                    
 .. Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_I .. 
0x7e8de8b1532f    b901000000              mov ecx, 0x1                                           
 .. s Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write .. 
0x7e8de8b15334    4823c1                  and rax, rcx                                           
0x7e8de8b15337    4983c608                add r14, 0x8                                           
0x7e8de8b1533b    498906                  mov [r14], rax                                         
 ..  REX_W ), ( controlFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruc .. 
0x7e8de8b1533e    49bb3449b1e88d7e0000    mov r11, 0x7e8de8b14934                                
0x7e8de8b15348    49ffd3                  call r11                      < C_Syntax.Calculate_Rex : 0x00007e8de8b14934 >
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& .. 
0x7e8de8b1534b    498d4708                lea rax, [r15+0x8]                                     
 .. nt64 imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bi .. 
0x7e8de8b1534f    488bc8                  mov rcx, rax                                           
0x7e8de8b15352    498b06                  mov rax, [r14]                                         
0x7e8de8b15355    4983ee08                sub r14, 0x8                                           
 ..  imm, uint8 immSize ) {     uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& .. 
0x7e8de8b15359    488901                  mov [rcx], rax                                         
 ..    uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, cont .. 
0x7e8de8b1535c    498b47b8                mov rax, [r15-0x48]                                    
0x7e8de8b15360    4983c608                add r14, 0x8                                           
0x7e8de8b15364    498906                  mov [r14], rax                                         
 .. nt8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFl .. 
0x7e8de8b15367    498b47c0                mov rax, [r15-0x40]                                    
0x7e8de8b1536b    4983c608                add r14, 0x8                                           
0x7e8de8b1536f    498906                  mov [r14], rax                                         
 .. odRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags,  .. 
0x7e8de8b15372    498b47c8                mov rax, [r15-0x38]                                    
0x7e8de8b15376    4983c608                add r14, 0x8                                           
0x7e8de8b1537a    498906                  mov [r14], rax                                         
 ..  = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, .. 
0x7e8de8b1537d    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b15381    4983c608                add r14, 0x8                                           
0x7e8de8b15385    498906                  mov [r14], rax                                         
 .. lculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp .. 
0x7e8de8b15388    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b1538c    4983c608                add r14, 0x8                                           
0x7e8de8b15390    498906                  mov [r14], rax                                         
0x7e8de8b15393    49bbbf4db1e88d7e0000    mov r11, 0x7e8de8b14dbf                                
0x7e8de8b1539d    49ffd3                  call r11                      < C_Syntax.CalculateModRmByte : 0x00007e8de8b14dbf >
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode .. 
0x7e8de8b153a0    498d4710                lea rax, [r15+0x10]                                    
 .. rolFlags Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex,  .. 
0x7e8de8b153a4    488bc8                  mov rcx, rax                                           
0x7e8de8b153a7    498b06                  mov rax, [r14]                                         
0x7e8de8b153aa    4983ee08                sub r14, 0x8                                           
 .. gs Bits.& REX_B ) ) ;     uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode .. 
0x7e8de8b153ae    488901                  mov [rcx], rax                                         
 ..      _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153b1    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b153b5    4983c608                add r14, 0x8                                           
0x7e8de8b153b9    498906                  mov [r14], rax                                         
 .. _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153bc    498b47a8                mov rax, [r15-0x58]                                    
0x7e8de8b153c0    4983c608                add r14, 0x8                                           
0x7e8de8b153c4    498906                  mov [r14], rax                                         
 .. Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153c7    498b47b0                mov rax, [r15-0x50]                                    
0x7e8de8b153cb    4983c608                add r14, 0x8                                           
0x7e8de8b153cf    498906                  mov [r14], rax                                         
 .. truction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153d2    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b153d6    4983c608                add r14, 0x8                                           
0x7e8de8b153da    498906                  mov [r14], rax                                         
 .. n_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153dd    498b47d0                mov rax, [r15-0x30]                                    
0x7e8de8b153e1    4983c608                add r14, 0x8                                           
0x7e8de8b153e5    498906                  mov [r14], rax                                         
 .. pCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153e8    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b153ec    4983c608                add r14, 0x8                                           
0x7e8de8b153f0    498906                  mov [r14], rax                                         
 .. 0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153f3    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b153f7    4983c608                add r14, 0x8                                           
0x7e8de8b153fb    498906                  mov [r14], rax                                         
 .. ode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b153fe    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b15402    4983c608                add r14, 0x8                                           
0x7e8de8b15406    498906                  mov [r14], rax                                         
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b15409    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b1540d    4983c608                add r14, 0x8                                           
0x7e8de8b15411    498906                  mov [r14], rax                                         
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b15414    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15418    4983c608                add r14, 0x8                                           
0x7e8de8b1541c    498906                  mov [r14], rax                                         
 .. yte ( mod, reg, rm, sib, disp ) ;     _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, i .. 
0x7e8de8b1541f    49bb6f4fb1e88d7e0000    mov r11, 0x7e8de8b14f6f                                
0x7e8de8b15429    49ffd3                  call r11                      < C_Syntax._Compile_Write_Instruction_X64 : 0x00007e8de8b14f6f >
0x7e8de8b1542c    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b15430    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b15434    4983ee58                sub r14, 0x58                                          
 .. sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b15438    c3                      ret                                                    
Word_Disassemble : word - 'Compile_CalculateWrite_Instruction_X64' :: codeSize = 373
Word : 0x00007e8de45cbcd5 :: Compiled at : 0x00007e8de8b152c4
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 327.43 <::

 =============================
C_Syntax.Compile_Move <:> csl compiled word
SourceCode for C_Syntax.Compile_Move :> 
void Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize ) { uint8 opCode0 = 0, opCode ; uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ; if ( ! operandSize ) operandSize = 8 ; if ( imm || immSize ) { reg = 0 ; controlFlags |= IMM_B ; if ( immSize >= 8 ) { controlFlags |= ( REX_W ) ; if ( imm <= 0xffffffff ) { opCode = 0xc7 ; immSize = 4 ; controlFlags |= ( MODRM_B ) ; } else { if ( direction == TO_MEM ) { alertColors ; ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ; pause ( ) ; quit ( ) ; } opCode = 0xb8 + ( rm Bits.& 7 ) ; } } else { if ( immSize == 1 ) opCode = 0xb0 + rm ; else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ; else if ( immSize == 4 ) opCode = 0xb8 | rm ; } } else { controlFlags |= ( MODRM_B ) ; opCode = 0x88 ; if ( operandSize > 1 ) opCode |= 1 ; if ( direction == TO_REG ) opCode |= 2 ; if ( operandSize == 2 ) opCode0 = 0x66 ; if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ; } Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; } 
Source code file location of Compile_Move : "namespaces/compiler/x64.csl" : 346.13 :: we are now at : namespaces/compiler/x64.csl : 396.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1543e -- code size = 743 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_Move : definition = 0x00007e8de8b1543e : disassembly at namespaces/compiler/x64.csl : 396.17 :
0x7e8de8b1543e    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b15442    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b15446    4981c620000000          add r14, 0x20                                          
 .. , uint8 immSize ) {     uint8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! op .. 
0x7e8de8b1544d    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm .. 
0x7e8de8b15455    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b15459    4883f800                cmp rax, 0x0                                           
0x7e8de8b1545d    0f8411000000            jz 0x7e8de8b15474             < C_Syntax.Compile_Move+54 >
 ..  ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || imm .. 
0x7e8de8b15463    b808000000              mov eax, 0x8                                           
0x7e8de8b15468    4983c608                add r14, 0x8                                           
0x7e8de8b1546c    498906                  mov [r14], rax                                         
0x7e8de8b1546f    e90e000000              jmp 0x7e8de8b15482            < C_Syntax.Compile_Move+68 >
 .. nt64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )    .. 
0x7e8de8b15474    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b1547b    4983c608                add r14, 0x8                                           
0x7e8de8b1547f    498906                  mov [r14], rax                                         
 .. trolFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {      .. 
0x7e8de8b15482    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b15486    4883f800                cmp rax, 0x0                                           
0x7e8de8b1548a    0f8411000000            jz 0x7e8de8b154a1             < C_Syntax.Compile_Move+99 >
 .. ags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         re .. 
0x7e8de8b15490    b804000000              mov eax, 0x4                                           
0x7e8de8b15495    4983c608                add r14, 0x8                                           
0x7e8de8b15499    498906                  mov [r14], rax                                         
0x7e8de8b1549c    e90e000000              jmp 0x7e8de8b154af            < C_Syntax.Compile_Move+113 >
 .. disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;  .. 
0x7e8de8b154a1    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b154a8    4983c608                add r14, 0x8                                           
0x7e8de8b154ac    498906                  mov [r14], rax                                         
 .. sp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;    .. 
0x7e8de8b154af    498b0e                  mov rcx, [r14]                                         
0x7e8de8b154b2    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b154b6    4983ee10                sub r14, 0x10                                          
 ..  controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {  .. 
0x7e8de8b154ba    480bc1                  or rax, rcx                                            
 .. int8 opCode0 = 0, opCode ;     uint64 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = .. 
0x7e8de8b154bd    49894718                mov [r15+0x18], rax                                    
 ..  ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFla .. 
0x7e8de8b154c1    498b47d0                mov rax, [r15-0x30]                                    
 ..  0 ) | ( sib ? SIB_B : 0 ) ;     if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlF .. 
0x7e8de8b154c5    4883f800                cmp rax, 0x0                                           
0x7e8de8b154c9    750c                    jnz 0xe8b154d7                < C_Syntax.Compile_Move+153 >
0x7e8de8b154cb    0f1f4000                nop [rax]                                              
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( .. 
0x7e8de8b154cf    49c747d008000000        mov qword [r15-0x30], 0x8                              
 .. randSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 ) .. 
0x7e8de8b154d7    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b154db    4883f800                cmp rax, 0x0                                           
0x7e8de8b154df    0f850e000000            jnz 0x7e8de8b154f3            < C_Syntax.Compile_Move+181 >
 .. f ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, o .. 
0x7e8de8b154e5    498b47f8                mov rax, [r15-0x8]                                     
 ..      if ( ! operandSize ) operandSize = 8 ;     if ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( .. 
0x7e8de8b154e9    4883f800                cmp rax, 0x0                                           
0x7e8de8b154ed    0f8444010000            jz 0x7e8de8b15637             < C_Syntax.Compile_Move+505 >
 ..  ( imm || immSize )     {         reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags .. 
0x7e8de8b154f3    49c747c000000000        mov qword [r15-0x40], 0x0                              
 ..      reg = 0 ;        controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             i .. 
0x7e8de8b154fb    49834f1810              or qword [r15+0x18], 0x10                              
 ..  controlFlags |= IMM_B ;         if ( immSize >= 8 )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff .. 
0x7e8de8b15500    49837ff808              cmp qword [r15-0x8], 0x8                               
 ..  | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;     .. 
0x7e8de8b15505    0f8cc4000000            jl 0x7e8de8b155cf             < C_Syntax.Compile_Move+401 >
 ..       {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;         .. 
0x7e8de8b1550b    49834f1820              or qword [r15+0x18], 0x20                              
 .. Flags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;                 immSize = 4 ;      .. 
0x7e8de8b15510    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x7e8de8b15515    7f1e                    jg 0xe8b15535                 < C_Syntax.Compile_Move+247 >
 ..  )         {             controlFlags |= ( REX_W ) ;             if ( imm <= 0xffffffff )            {                 opCode = 0xc7 ;    .. 
0x7e8de8b15517    0f1f4000                nop [rax]                                              
 .. )            {                 opCode = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }  .. 
0x7e8de8b1551b    49c74710c7000000        mov qword [r15+0x10], 0xc7                              
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {    .. 
0x7e8de8b15523    49c747f804000000        mov qword [r15-0x8], 0x4                               
 .. 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {                 if ( direction == TO_MEM ) .. 
0x7e8de8b1552b    49834f1802              or qword [r15+0x18], 0x2                               
0x7e8de8b15530    e995000000              jmp 0x7e8de8b155ca            < C_Syntax.Compile_Move+396 >
 .. se             {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( .. 
0x7e8de8b15535    49837fb002              cmp qword [r15-0x50], 0x2                              
 .. Code = 0xc7 ;                 immSize = 4 ;                 controlFlags |= ( MODRM_B ) ;             }             else             {    .. 
0x7e8de8b1553a    755d                    jnz 0xe8b15599                < C_Syntax.Compile_Move+347 >
0x7e8de8b1553c    0f1f4000                nop [rax]                                              
0x7e8de8b15540    49ba70cb2f3f345b0000    mov r10, 0x5b343f2fcb70                                
 ..      {                 if ( direction == TO_MEM )                  {                     alertColors ;                     ps ( "\n Compi .. 
0x7e8de8b1554a    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b15554    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. lertColors ;                     ps ( "\n Compile_Move : MACHINE_CODE_ERROR\n" ) ;                     pause ( ) ;                     qu .. 
0x7e8de8b15557    48b8d45683e88d7e0000    mov rax, 0x7e8de88356d4                                
0x7e8de8b15561    4983c608                add r14, 0x8                                           
0x7e8de8b15565    498906                  mov [r14], rax                                         
0x7e8de8b15568    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b15572    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
0x7e8de8b15575    49bb4317b0e88d7e0000    mov r11, 0x7e8de8b01743                                
0x7e8de8b1557f    49ffd3                  call r11                      < User.pause : 0x00007e8de8b01743 >
0x7e8de8b15582    49ba20e2303f345b0000    mov r10, 0x5b343f30e220                                
0x7e8de8b1558c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b15596    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..            }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == .. 
0x7e8de8b15599    b8b8000000              mov eax, 0xb8                                          
0x7e8de8b1559e    4983c608                add r14, 0x8                                           
0x7e8de8b155a2    498906                  mov [r14], rax                                         
 ..   }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCo .. 
0x7e8de8b155a5    498b47c8                mov rax, [r15-0x38]                                    
 ..           opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0  .. 
0x7e8de8b155a9    b907000000              mov ecx, 0x7                                           
 ..             opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb .. 
0x7e8de8b155ae    4823c1                  and rax, rcx                                           
0x7e8de8b155b1    4983c608                add r14, 0x8                                           
0x7e8de8b155b5    498906                  mov [r14], rax                                         
 ..         opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 +  .. 
0x7e8de8b155b8    498b0e                  mov rcx, [r14]                                         
0x7e8de8b155bb    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b155bf    4983ee10                sub r14, 0x10                                          
 ..       }                 opCode = 0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 )  .. 
0x7e8de8b155c3    4803c1                  add rax, rcx                                           
0x7e8de8b155c6    49894710                mov [r15+0x10], rax                                    
 ..  0xb8 + ( rm Bits.& 7 ) ;             }         }         else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             .. 
0x7e8de8b155ca    e963000000              jmp 0x7e8de8b15632            < C_Syntax.Compile_Move+500 >
 ..       else         {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0 .. 
0x7e8de8b155cf    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b155d4    7519                    jnz 0xe8b155ef                < C_Syntax.Compile_Move+433 >
0x7e8de8b155d6    0f1f4000                nop [r8]                                               
 ..          if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             e .. 
0x7e8de8b155da    b8b0000000498b4fc8      mov r8, 0xc84f8b49000000b0                              
 ..     if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else i .. 
0x7e8de8b155e3    4803c1                  add rax, rcx                                           
 ..     {             if ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;      .. 
0x7e8de8b155e6    49894710                mov [r15+0x10], rax                                    
 .. f ( immSize == 1 ) opCode = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( i .. 
0x7e8de8b155ea    e943000000              jmp 0x7e8de8b15632            < C_Syntax.Compile_Move+500 >
 .. e = 0xb0 + rm ;             else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0 .. 
0x7e8de8b155ef    49837ff802              cmp qword [r15-0x8], 0x2                               
0x7e8de8b155f4    7521                    jnz 0xe8b15617                < C_Syntax.Compile_Move+473 >
0x7e8de8b155f6    0f1f4000                nop [rax]                                              
 ..      else if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }    .. 
0x7e8de8b155fa    49c7470866000000        mov qword [r15+0x8], 0x66                              
 .. mSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    { .. 
0x7e8de8b15602    b8b8000000              mov eax, 0xb8                                          
 .. = 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {        .. 
0x7e8de8b15607    498b4fc8                mov rcx, [r15-0x38]                                    
 ..  == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {      .. 
0x7e8de8b1560b    480bc1                  or rax, rcx                                            
 .. e if ( immSize == 2 ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }      .. 
0x7e8de8b1560e    49894710                mov [r15+0x10], rax                                    
 ..  ) opCode0 = 0x66, opCode = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         c .. 
0x7e8de8b15612    e91b000000              jmp 0x7e8de8b15632            < C_Syntax.Compile_Move+500 >
 .. e = 0xb8 | rm ;             else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B .. 
0x7e8de8b15617    49837ff804              cmp qword [r15-0x8], 0x4                               
0x7e8de8b1561c    7514                    jnz 0xe8b15632                < C_Syntax.Compile_Move+500 >
0x7e8de8b1561e    0f1f4000                nop [rax]                                              
 ..     else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x .. 
0x7e8de8b15622    b8b8000000              mov eax, 0xb8                                          
 .. e if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;    .. 
0x7e8de8b15627    498b4fc8                mov rcx, [r15-0x38]                                    
 .. lse if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;  .. 
0x7e8de8b1562b    480bc1                  or rax, rcx                                            
 ..              else if ( immSize == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         op .. 
0x7e8de8b1562e    49894710                mov [r15+0x10], rax                                    
 .. e == 4 ) opCode = 0xb8 | rm ;         }     }     else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( op .. 
0x7e8de8b15632    e95b000000              jmp 0x7e8de8b15692            < C_Syntax.Compile_Move+596 >
 ..   else    {         controlFlags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direct .. 
0x7e8de8b15637    49834f1802              or qword [r15+0x18], 0x2                               
 .. Flags |= ( MODRM_B ) ;         opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 .. 
0x7e8de8b1563c    49c7471088000000        mov qword [r15+0x10], 0x88                              
 ..          opCode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operand .. 
0x7e8de8b15644    49837fd001              cmp qword [r15-0x30], 0x1                              
0x7e8de8b15649    7e09                    jle 0xe8b15654                < C_Syntax.Compile_Move+534 >
0x7e8de8b1564b    0f1f4000                nop [rax]                                              
 ..      if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ; .. 
0x7e8de8b1564f    49834f1001              or qword [r15+0x10], 0x1                               
 .. dSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( o .. 
0x7e8de8b15654    49837fb003              cmp qword [r15-0x50], 0x3                              
 .. ode = 0x88 ;         if ( operandSize > 1 ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 )  .. 
0x7e8de8b15659    7509                    jnz 0xe8b15664                < C_Syntax.Compile_Move+550 >
0x7e8de8b1565b    0f1f4000                nop [rax]                                              
 ..  if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize > .. 
0x7e8de8b1565f    49834f1002              or qword [r15+0x10], 0x2                               
 .. == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlF .. 
0x7e8de8b15664    49837fd002              cmp qword [r15-0x30], 0x2                              
 .. ) opCode |= 1 ;        if ( direction == TO_REG ) opCode |= 2 ;        if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize .. 
0x7e8de8b15669    750c                    jnz 0xe8b15677                < C_Syntax.Compile_Move+569 >
0x7e8de8b1566b    0f1f4000                nop [rax]                                              
 ..       if ( operandSize == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }  .. 
0x7e8de8b1566f    49c7470866000000        mov qword [r15+0x8], 0x66                              
 .. == 2 ) opCode0 = 0x66 ;        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWr .. 
0x7e8de8b15677    49837fd008              cmp qword [r15-0x30], 0x8                              
0x7e8de8b1567c    7d0f                    jge 0xe8b1568d                < C_Syntax.Compile_Move+591 >
0x7e8de8b1567e    0f1f4000                nop [rax]                                              
 ..        if ( ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( op .. 
0x7e8de8b15682    49837ff808              cmp qword [r15-0x8], 0x8                               
0x7e8de8b15687    7c09                    jl 0xe8b15692                 < C_Syntax.Compile_Move+596 >
0x7e8de8b15689    0f1f4000                nop [rax]                                              
 ..  ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, contro .. 
0x7e8de8b1568d    49834f1820              or qword [r15+0x18], 0x20                              
 .. pile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b15692    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b15696    4983c608                add r14, 0x8                                           
0x7e8de8b1569a    498906                  mov [r14], rax                                         
 .. ulateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b1569d    498b4710                mov rax, [r15+0x10]                                    
 ..  ( operandSize >= 8 ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCo .. 
0x7e8de8b156a1    4983c608                add r14, 0x8                                           
0x7e8de8b156a5    498906                  mov [r14], rax                                         
 .. te_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156a8    498b47b8                mov rax, [r15-0x48]                                    
0x7e8de8b156ac    4983c608                add r14, 0x8                                           
 ..  ) || ( immSize >= 8 ) ) controlFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, c .. 
0x7e8de8b156b0    498906                  mov [r14], rax                                         
 .. struction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156b3    498b47c0                mov rax, [r15-0x40]                                    
0x7e8de8b156b7    4983c608                add r14, 0x8                                           
0x7e8de8b156bb    498906                  mov [r14], rax                                         
 .. tion_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156be    498b47c8                mov rax, [r15-0x38]                                    
0x7e8de8b156c2    4983c608                add r14, 0x8                                           
0x7e8de8b156c6    498906                  mov [r14], rax                                         
 .. _X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156c9    498b4718                mov rax, [r15+0x18]                                    
0x7e8de8b156cd    4983c608                add r14, 0x8                                           
0x7e8de8b156d1    498906                  mov [r14], rax                                         
 .. , opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156d4    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b156d8    4983c608                add r14, 0x8                                           
0x7e8de8b156dc    498906                  mov [r14], rax                                         
 .. ode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156df    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b156e3    4983c608                add r14, 0x8                                           
0x7e8de8b156e7    498906                  mov [r14], rax                                         
 .. od, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156ea    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b156ee    4983c608                add r14, 0x8                                           
0x7e8de8b156f2    498906                  mov [r14], rax                                         
 .. m, controlFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b156f5    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b156f9    4983c608                add r14, 0x8                                           
0x7e8de8b156fd    498906                  mov [r14], rax                                         
 .. ntrolFlags, sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b15700    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15704    4983c608                add r14, 0x8                                           
0x7e8de8b15708    498906                  mov [r14], rax                                         
 .. ontrolFlags |= ( REX_W ) ;      }     Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, di .. 
0x7e8de8b1570b    49bbc452b1e88d7e0000    mov r11, 0x7e8de8b152c4                                
0x7e8de8b15715    49ffd3                  call r11                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x00007e8de8b152c4 >
0x7e8de8b15718    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1571c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b15720    4983ee50                sub r14, 0x50                                          
 .. sib, disp, dispSize, imm, immSize ) ; }  .. 
0x7e8de8b15724    c3                      ret                                                    
Word_Disassemble : word - 'Compile_Move' :: codeSize = 743
Word : 0x00007e8de45d0c95 :: Compiled at : 0x00007e8de8b1543e
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 396.17 <::

 =============================
C_Syntax.Compile_MoveImm <:> csl compiled word
SourceCode for C_Syntax.Compile_MoveImm :> 
void Compile_MoveImm ( Boolean mod, Boolean rm, int64 disp, int64 imm, byte immSize ) { if ( ! immSize ) immSize = 8 ; if ( mod == MEM ) { if ( disp && ( imm <= 0xffffffff ) ) { Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ; } else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) { Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ; Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ; } } else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;} 
Source code file location of Compile_MoveImm : "namespaces/compiler/x64.csl" : 430.16 :: we are now at : namespaces/compiler/x64.csl : 450.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b15a0e -- code size = 631 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.Compile_MoveImm : definition = 0x00007e8de8b15a0e : disassembly at namespaces/compiler/x64.csl : 450.20 :
0x7e8de8b15a0e    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b15a12    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b15a16    4981c608000000          add r14, 0x8                                           
 .. nt64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff .. 
0x7e8de8b15a1d    498b47f8                mov rax, [r15-0x8]                                     
 ..  int64 imm, byte immSize ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffff .. 
0x7e8de8b15a21    4883f800                cmp rax, 0x0                                           
0x7e8de8b15a25    750c                    jnz 0xe8b15a33                < C_Syntax.Compile_MoveImm+37 >
0x7e8de8b15a27    0f1f4000                nop [rax]                                              
 .. Size ) {     if ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {     .. 
0x7e8de8b15a2b    49c747f808000000        mov qword [r15-0x8], 0x8                               
 ..  ( ! immSize ) immSize = 8 ;     if ( mod == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compil .. 
0x7e8de8b15a33    49837fd800              cmp qword [r15-0x28], 0x0                              
0x7e8de8b15a38    0f85b2010000            jnz 0x7e8de8b15bf0            < C_Syntax.Compile_MoveImm+482 >
 .. od == MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp .. 
0x7e8de8b15a3e    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b15a42    4883f800                cmp rax, 0x0                                           
0x7e8de8b15a46    0f84c2000000            jz 0x7e8de8b15b0e             < C_Syntax.Compile_MoveImm+256 >
 .. )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm,  .. 
0x7e8de8b15a4c    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x7e8de8b15a51    0f8fb7000000            jg 0x7e8de8b15b0e             < C_Syntax.Compile_MoveImm+256 >
 ..  MEM )     {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0,  .. 
0x7e8de8b15a57    498bc6                  mov rax, r14                                           
 ..                 if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize .. 
0x7e8de8b15a5a    4983ee08                sub r14, 0x8                                           
0x7e8de8b15a5e    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b15a62    7410                    jz 0xe8b15a74                 < C_Syntax.Compile_MoveImm+102 >
0x7e8de8b15a64    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b15a69    7409                    jz 0xe8b15a74                 < C_Syntax.Compile_MoveImm+102 >
 ..   {                if ( disp && ( imm <= 0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immS .. 
0x7e8de8b15a6b    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b15a72    eb07                    jmp 0x7e8de8b15a7b            < C_Syntax.Compile_MoveImm+109 >
0x7e8de8b15a74    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b15a7b    0f8e8d000000            jle 0x7e8de8b15b0e            < C_Syntax.Compile_MoveImm+256 >
 ..          {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || .. 
0x7e8de8b15a81    b802000000              mov eax, 0x2                                           
0x7e8de8b15a86    4983c608                add r14, 0x8                                           
0x7e8de8b15a8a    498906                  mov [r14], rax                                         
 ..  {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > .. 
0x7e8de8b15a8d    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b15a91    4983c608                add r14, 0x8                                           
0x7e8de8b15a95    498906                  mov [r14], rax                                         
 ..           Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xff .. 
0x7e8de8b15a98    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15a9f    4983c608                add r14, 0x8                                           
0x7e8de8b15aa3    498906                  mov [r14], rax                                         
 ..        Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xfffff .. 
0x7e8de8b15aa6    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b15aaa    4983c608                add r14, 0x8                                           
0x7e8de8b15aae    498906                  mov [r14], rax                                         
 ..    Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff  .. 
0x7e8de8b15ab1    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15ab8    4983c608                add r14, 0x8                                           
0x7e8de8b15abc    498906                  mov [r14], rax                                         
 .. Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) .. 
0x7e8de8b15abf    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15ac6    4983c608                add r14, 0x8                                           
0x7e8de8b15aca    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )    .. 
0x7e8de8b15acd    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b15ad1    4983c608                add r14, 0x8                                           
0x7e8de8b15ad5    498906                  mov [r14], rax                                         
 .. ove ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )          .. 
0x7e8de8b15ad8    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15adf    4983c608                add r14, 0x8                                           
0x7e8de8b15ae3    498906                  mov [r14], rax                                         
 ..  ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {   .. 
0x7e8de8b15ae6    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b15aea    4983c608                add r14, 0x8                                           
0x7e8de8b15aee    498906                  mov [r14], rax                                         
 .. _MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {        .. 
0x7e8de8b15af1    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15af5    4983c608                add r14, 0x8                                           
0x7e8de8b15af9    498906                  mov [r14], rax                                         
 ..  0xffffffff ) )         {             Compile_Move ( TO_MEM, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;         }         else if ( ( im .. 
0x7e8de8b15afc    49bb3e54b1e88d7e0000    mov r11, 0x7e8de8b1543e                                
0x7e8de8b15b06    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x00007e8de8b1543e >
0x7e8de8b15b09    e9dd000000              jmp 0x7e8de8b15beb            < C_Syntax.Compile_MoveImm+477 >
 .. ize ) ;         }         else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, RE .. 
0x7e8de8b15b0e    49837ff808              cmp qword [r15-0x8], 0x8                               
0x7e8de8b15b13    7d0f                    jge 0xe8b15b24                < C_Syntax.Compile_MoveImm+278 >
0x7e8de8b15b15    0f1f4000                nop [rax]                                              
 ..       else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0 .. 
0x7e8de8b15b19    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x7e8de8b15b1e    0f8ec7000000            jle 0x7e8de8b15beb            < C_Syntax.Compile_MoveImm+477 >
 ..                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THR .. 
0x7e8de8b15b24    b803000000              mov eax, 0x3                                           
0x7e8de8b15b29    4983c608                add r14, 0x8                                           
0x7e8de8b15b2d    498906                  mov [r14], rax                                         
 ..                Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, d .. 
0x7e8de8b15b30    b803000000              mov eax, 0x3                                           
0x7e8de8b15b35    4983c608                add r14, 0x8                                           
 ..   else if ( ( immSize >= 8 ) || ( imm > 0xffffffff ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, .. 
0x7e8de8b15b39    498906                  mov [r14], rax                                         
 ..           Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp,  .. 
0x7e8de8b15b3c    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15b43    4983c608                add r14, 0x8                                           
0x7e8de8b15b47    498906                  mov [r14], rax                                         
 ..        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, imm .. 
0x7e8de8b15b4a    b809000000              mov eax, 0x9                                           
0x7e8de8b15b4f    4983c608                add r14, 0x8                                           
0x7e8de8b15b53    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;   .. 
0x7e8de8b15b56    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15b5d    4983c608                add r14, 0x8                                           
0x7e8de8b15b61    498906                  mov [r14], rax                                         
 .. e_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;      .. 
0x7e8de8b15b64    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15b6b    4983c608                add r14, 0x8                                           
0x7e8de8b15b6f    498906                  mov [r14], rax                                         
 .. ove ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         .. 
0x7e8de8b15b72    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15b79    4983c608                add r14, 0x8                                           
0x7e8de8b15b7d    498906                  mov [r14], rax                                         
 ..  ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }  .. 
0x7e8de8b15b80    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15b87    4983c608                add r14, 0x8                                           
0x7e8de8b15b8b    498906                  mov [r14], rax                                         
 .. TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     .. 
0x7e8de8b15b8e    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b15b92    4983c608                add r14, 0x8                                           
0x7e8de8b15b96    498906                  mov [r14], rax                                         
 .. G, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }    .. 
0x7e8de8b15b99    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15b9d    4983c608                add r14, 0x8                                           
0x7e8de8b15ba1    498906                  mov [r14], rax                                         
 ..  ) )         {                        Compile_Move ( TO_REG, REG, 0, THRU_REG, 0, 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_ .. 
0x7e8de8b15ba4    49bb3e54b1e88d7e0000    mov r11, 0x7e8de8b1543e                                
0x7e8de8b15bae    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x00007e8de8b1543e >
 ..              Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, d .. 
0x7e8de8b15bb1    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b15bb5    4983c608                add r14, 0x8                                           
0x7e8de8b15bb9    498906                  mov [r14], rax                                         
 ..          Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, .. 
0x7e8de8b15bbc    b809000000              mov eax, 0x9                                           
0x7e8de8b15bc1    4983c608                add r14, 0x8                                           
0x7e8de8b15bc5    498906                  mov [r14], rax                                         
 .. ompile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, i .. 
0x7e8de8b15bc8    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b15bcc    4983c608                add r14, 0x8                                           
0x7e8de8b15bd0    498906                  mov [r14], rax                                         
 .. _Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize .. 
0x7e8de8b15bd3    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15bd7    4983c608                add r14, 0x8                                           
0x7e8de8b15bdb    498906                  mov [r14], rax                                         
 .. 0, 0, 0, imm, immSize ) ;             Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO .. 
0x7e8de8b15bde    49bbf657b1e88d7e0000    mov r11, 0x7e8de8b157f6                                
0x7e8de8b15be8    49ffd3                  call r11                      < C_Syntax.Compile_Move_Reg_To_Rm : 0x00007e8de8b157f6 >
 .. , THRU_REG, disp, immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15beb    e988000000              jmp 0x7e8de8b15c78            < C_Syntax.Compile_MoveImm+618 >
 ..       }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15bf0    b803000000              mov eax, 0x3                                           
0x7e8de8b15bf5    4983c608                add r14, 0x8                                           
0x7e8de8b15bf9    498906                  mov [r14], rax                                         
 ..     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15bfc    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b15c00    4983c608                add r14, 0x8                                           
0x7e8de8b15c04    498906                  mov [r14], rax                                         
 ..      else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c07    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15c0e    4983c608                add r14, 0x8                                           
0x7e8de8b15c12    498906                  mov [r14], rax                                         
 ..   else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c15    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b15c19    4983c608                add r14, 0x8                                           
0x7e8de8b15c1d    498906                  mov [r14], rax                                         
 .. se Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c20    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15c27    4983c608                add r14, 0x8                                           
0x7e8de8b15c2b    498906                  mov [r14], rax                                         
 .. Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c2e    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15c35    4983c608                add r14, 0x8                                           
0x7e8de8b15c39    498906                  mov [r14], rax                                         
 .. pile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c3c    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b15c40    4983c608                add r14, 0x8                                           
0x7e8de8b15c44    498906                  mov [r14], rax                                         
 .. ove ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c47    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b15c4e    4983c608                add r14, 0x8                                           
0x7e8de8b15c52    498906                  mov [r14], rax                                         
 ..  ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c55    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b15c59    4983c608                add r14, 0x8                                           
0x7e8de8b15c5d    498906                  mov [r14], rax                                         
 .. _REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c60    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b15c64    4983c608                add r14, 0x8                                           
0x7e8de8b15c68    498906                  mov [r14], rax                                         
 ..  immSize ) ;         }     }     else Compile_Move ( TO_REG, mod, 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c6b    49bb3e54b1e88d7e0000    mov r11, 0x7e8de8b1543e                                
0x7e8de8b15c75    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x00007e8de8b1543e >
0x7e8de8b15c78    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b15c7c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b15c80    4983ee28                sub r14, 0x28                                          
 .. 0, rm, 0, 0, disp, 0, imm, immSize ) ;}  .. 
0x7e8de8b15c84    c3                      ret                                                    
Word_Disassemble : word - 'Compile_MoveImm' :: codeSize = 631
Word : 0x00007e8de45f2ac5 :: Compiled at : 0x00007e8de8b15a0e
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 450.20 <::

 =============================
C_Syntax._Compile_X_Group1_Immediate <:> csl compiled word
SourceCode for C_Syntax._Compile_X_Group1_Immediate :> 
void _Compile_X_Group1_Immediate ( Boolean code, Boolean mod, Boolean rm, int64 disp, uint64 imm, Boolean iSize ) { byte opCode = 0x80 ; int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ; if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) ) { Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ; _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ; } else { rm &= 0xff, controlFlags |= REX_W ; if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ; else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ; Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ; } } 
Source code file location of _Compile_X_Group1_Immediate : "namespaces/compiler/x64.csl" : 562.28 :: we are now at : namespaces/compiler/x64.csl : 587.32
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16242 -- code size = 642 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_X_Group1_Immediate : definition = 0x00007e8de8b16242 : disassembly at namespaces/compiler/x64.csl : 587.32 :
0x7e8de8b16242    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b16246    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1624a    4981c618000000          add r14, 0x18                                          
 .. an iSize ) {              byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == M .. 
0x7e8de8b16251    49c7470880000000        mov qword [r15+0x8], 0x80                              
 .. e = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0 .. 
0x7e8de8b16259    b812000000              mov eax, 0x12                                          
0x7e8de8b1625e    4983c608                add r14, 0x8                                           
0x7e8de8b16262    498906                  mov [r14], rax                                         
 ..  controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )      .. 
0x7e8de8b16265    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b16269    4883f800                cmp rax, 0x0                                           
0x7e8de8b1626d    0f8411000000            jz 0x7e8de8b16284             < C_Syntax._Compile_X_Group1_Immediate+66 >
 .. lFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {       .. 
0x7e8de8b16273    b808000000              mov eax, 0x8                                           
0x7e8de8b16278    4983c608                add r14, 0x8                                           
0x7e8de8b1627c    498906                  mov [r14], rax                                         
0x7e8de8b1627f    e90e000000              jmp 0x7e8de8b16292            < C_Syntax._Compile_X_Group1_Immediate+80 >
 .. ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                .. 
0x7e8de8b16284    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b1628b    4983c608                add r14, 0x8                                           
0x7e8de8b1628f    498906                  mov [r14], rax                                         
 .. IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                  .. 
0x7e8de8b16292    498b0e                  mov rcx, [r14]                                         
0x7e8de8b16295    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b16299    4983ee10                sub r14, 0x10                                          
 .. nt64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )  .. 
0x7e8de8b1629d    480bc1                  or rax, rcx                                            
 ..        byte opCode = 0x80 ;     int64 controlFlags = ( IMM_B | MODRM_B | ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > .. 
0x7e8de8b162a0    49894710                mov [r15+0x10], rax                                    
 ..  ( disp ? DISP_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_Mov .. 
0x7e8de8b162a4    49837fd800              cmp qword [r15-0x28], 0x0                              
0x7e8de8b162a9    0f85e2000000            jnz 0x7e8de8b16391            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..  ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_R .. 
0x7e8de8b162af    49837ff804              cmp qword [r15-0x8], 0x4                               
0x7e8de8b162b4    0f8f35000000            jg 0x7e8de8b162ef             < C_Syntax._Compile_X_Group1_Immediate+173 >
 ..  mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize )  .. 
0x7e8de8b162ba    49837ff0ff              cmp qword [r15-0x10], 0xffffffffffffffff                              
0x7e8de8b162bf    0f8ecc000000            jle 0x7e8de8b16391            < C_Syntax._Compile_X_Group1_Immediate+335 >
 .. P_B : 0 ) ) ;     if ( ( mod == MEM ) && ( ( iSize > 4 ) || ( imm > 0xffffffff ) ) )     {                       Compile_MoveImm_To_Reg ( .. 
0x7e8de8b162c5    498bc6                  mov rax, r14                                           
0x7e8de8b162c8    4983ee08                sub r14, 0x8                                           
0x7e8de8b162cc    48833800                cmp qword [rax], 0x0                                   
0x7e8de8b162d0    7410                    jz 0xe8b162e2                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x7e8de8b162d2    488378f800              cmp qword [rax-0x8], 0x0                               
0x7e8de8b162d7    7409                    jz 0xe8b162e2                 < C_Syntax._Compile_X_Group1_Immediate+160 >
0x7e8de8b162d9    49c70601000000          mov qword [r14], 0x1                                   
0x7e8de8b162e0    eb07                    jmp 0x7e8de8b162e9            < C_Syntax._Compile_X_Group1_Immediate+167 >
0x7e8de8b162e2    49c70600000000          mov qword [r14], 0x0                                   
0x7e8de8b162e9    0f8ea2000000            jle 0x7e8de8b16391            < C_Syntax._Compile_X_Group1_Immediate+335 >
 ..              Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL )  .. 
0x7e8de8b162ef    b809000000              mov eax, 0x9                                           
0x7e8de8b162f4    4983c608                add r14, 0x8                                           
0x7e8de8b162f8    498906                  mov [r14], rax                                         
 ..    Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }    .. 
0x7e8de8b162fb    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b162ff    4983c608                add r14, 0x8                                           
0x7e8de8b16303    498906                  mov [r14], rax                                         
 .. mpile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     els .. 
0x7e8de8b16306    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1630a    4983c608                add r14, 0x8                                           
0x7e8de8b1630e    498906                  mov [r14], rax                                         
 .. fff ) ) )     {                       Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_ .. 
0x7e8de8b16311    49bb8a5cb1e88d7e0000    mov r11, 0x7e8de8b15c8a                                
0x7e8de8b1631b    49ffd3                  call r11                      < C_Syntax.Compile_MoveImm_To_Reg : 0x00007e8de8b15c8a >
 .. iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFla .. 
0x7e8de8b1631e    498b47d0                mov rax, [r15-0x30]                                    
0x7e8de8b16322    4983c608                add r14, 0x8                                           
0x7e8de8b16326    498906                  mov [r14], rax                                         
 .. ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |=  .. 
0x7e8de8b16329    b803000000              mov eax, 0x3                                           
0x7e8de8b1632e    4983c608                add r14, 0x8                                           
0x7e8de8b16332    498906                  mov [r14], rax                                         
 ..        _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W .. 
0x7e8de8b16335    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b1633c    4983c608                add r14, 0x8                                           
0x7e8de8b16340    498906                  mov [r14], rax                                         
 ..   _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;    .. 
0x7e8de8b16343    b809000000              mov eax, 0x9                                           
0x7e8de8b16348    4983c608                add r14, 0x8                                           
0x7e8de8b1634c    498906                  mov [r14], rax                                         
 .. _X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if (  .. 
0x7e8de8b1634f    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b16353    4983c608                add r14, 0x8                                           
0x7e8de8b16357    498906                  mov [r14], rax                                         
 .. roup1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iS .. 
0x7e8de8b1635a    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16361    4983c608                add r14, 0x8                                           
0x7e8de8b16365    498906                  mov [r14], rax                                         
 .. p1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize .. 
0x7e8de8b16368    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b1636c    4983c608                add r14, 0x8                                           
0x7e8de8b16370    498906                  mov [r14], rax                                         
 .. ode, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYT .. 
0x7e8de8b16373    b808000000              mov eax, 0x8                                           
0x7e8de8b16378    4983c608                add r14, 0x8                                           
0x7e8de8b1637c    498906                  mov [r14], rax                                         
 .. eg ( THRU_REG, imm, iSize ) ;         _Compile_X_Group1 ( code, REG, MEM, THRU_REG, rm, 0, disp, CELL ) ;     }     else     {         rm .. 
0x7e8de8b1637f    49bbe35fb1e88d7e0000    mov r11, 0x7e8de8b15fe3                                
0x7e8de8b16389    49ffd3                  call r11                      < C_Syntax._Compile_X_Group1 : 0x00007e8de8b15fe3 >
0x7e8de8b1638c    e926010000              jmp 0x7e8de8b164b7            < C_Syntax._Compile_X_Group1_Immediate+629 >
 ..  ;     }     else     {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |=  .. 
0x7e8de8b16391    498367e0ff              and qword [r15-0x20], 0xffffffffffffffff                              
 .. {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if (  .. 
0x7e8de8b16396    49834f1020              or qword [r15+0x10], 0x20                              
 .. controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( .. 
0x7e8de8b1639b    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b163a0    7f34                    jg 0xe8b163d6                 < C_Syntax._Compile_X_Group1_Immediate+404 >
0x7e8de8b163a2    0f1f4000                nop [rax]                                              
 ..      if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) o .. 
0x7e8de8b163a6    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b163aa    4983c608                add r14, 0x8                                           
 ..    {         rm &= 0xff, controlFlags |= REX_W ;        if ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if .. 
0x7e8de8b163ae    498906                  mov [r14], rax                                         
0x7e8de8b163b1    49bb7748b1e88d7e0000    mov r11, 0x7e8de8b14877                                
0x7e8de8b163bb    49ffd3                  call r11                      < C_Syntax.Abs : 0x00007e8de8b14877 >
0x7e8de8b163be    b800010000              mov eax, 0x100                                         
 ..  ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |=  .. 
0x7e8de8b163c3    488bc8                  mov rcx, rax                                           
0x7e8de8b163c6    498b06                  mov rax, [r14]                                         
0x7e8de8b163c9    4983ee08                sub r14, 0x8                                           
 .. f ( ( iSize > BYTE ) || ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode  .. 
0x7e8de8b163cd    483bc1                  cmp rax, rcx                                           
0x7e8de8b163d0    7c0e                    jl 0xe8b163e0                 < C_Syntax._Compile_X_Group1_Immediate+414 >
0x7e8de8b163d2    0f1f4000                nop [rax]                                              
 ..  ( Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;       .. 
0x7e8de8b163d6    49834f0801              or qword [r15+0x8], 0x1                                
 ..  Abs ( imm ) >= 0x100 ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;         .. 
0x7e8de8b163db    e948000000              jmp 0x7e8de8b16428            < C_Syntax._Compile_X_Group1_Immediate+486 >
 .. ) ) opCode |= 1 ;         else if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               .. 
0x7e8de8b163e0    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b163e5    7e34                    jle 0xe8b1641b                < C_Syntax._Compile_X_Group1_Immediate+473 >
0x7e8de8b163e7    0f1f4000                nop [rax]                                              
 .. lse if ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Ins .. 
0x7e8de8b163eb    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b163ef    4983c608                add r14, 0x8                                           
0x7e8de8b163f3    498906                  mov [r14], rax                                         
0x7e8de8b163f6    49bb7748b1e88d7e0000    mov r11, 0x7e8de8b14877                                
0x7e8de8b16400    49ffd3                  call r11                      < C_Syntax.Abs : 0x00007e8de8b14877 >
0x7e8de8b16403    b800010000              mov eax, 0x100                                         
 ..  ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction .. 
0x7e8de8b16408    488bc8                  mov rcx, rax                                           
0x7e8de8b1640b    498b06                  mov rax, [r14]                                         
0x7e8de8b1640e    4983ee08                sub r14, 0x8                                           
 ..  ( ( iSize <= BYTE ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instructi .. 
0x7e8de8b16412    483bc1                  cmp rax, rcx                                           
0x7e8de8b16415    7d11                    jge 0xe8b16428                < C_Syntax._Compile_X_Group1_Immediate+486 >
0x7e8de8b16417    0f1f4000                nop [rax]                                              
 .. | ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mo .. 
0x7e8de8b1641b    49834f0803              or qword [r15+0x8], 0x3                                
 ..  imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code,  .. 
0x7e8de8b16420    49c747f801000000        mov qword [r15-0x8], 0x1                               
 .. pile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16428    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b1642f    4983c608                add r14, 0x8                                           
0x7e8de8b16433    498906                  mov [r14], rax                                         
 .. e_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16436    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1643a    4983c608                add r14, 0x8                                           
 .. ) || ( Abs ( imm ) < 0x100 ) ) opCode |= 3, iSize = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, .. 
0x7e8de8b1643e    498906                  mov [r14], rax                                         
 .. ateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16441    498b47d8                mov rax, [r15-0x28]                                    
0x7e8de8b16445    4983c608                add r14, 0x8                                           
0x7e8de8b16449    498906                  mov [r14], rax                                         
 .. ite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b1644c    498b47d0                mov rax, [r15-0x30]                                    
0x7e8de8b16450    4983c608                add r14, 0x8                                           
0x7e8de8b16454    498906                  mov [r14], rax                                         
 .. struction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16457    498b47e0                mov rax, [r15-0x20]                                    
0x7e8de8b1645b    4983c608                add r14, 0x8                                           
0x7e8de8b1645f    498906                  mov [r14], rax                                         
 .. ction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16462    498b4710                mov rax, [r15+0x10]                                    
0x7e8de8b16466    4983c608                add r14, 0x8                                           
0x7e8de8b1646a    498906                  mov [r14], rax                                         
 ..  opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b1646d    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16474    4983c608                add r14, 0x8                                           
0x7e8de8b16478    498906                  mov [r14], rax                                         
 .. Code, mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b1647b    498b47e8                mov rax, [r15-0x18]                                    
0x7e8de8b1647f    4983c608                add r14, 0x8                                           
0x7e8de8b16483    498906                  mov [r14], rax                                         
 .. mod, code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16486    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b1648d    4983c608                add r14, 0x8                                           
0x7e8de8b16491    498906                  mov [r14], rax                                         
 .. , code, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b16494    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b16498    4983c608                add r14, 0x8                                           
0x7e8de8b1649c    498906                  mov [r14], rax                                         
 .. e, rm, controlFlags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b1649f    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b164a3    4983c608                add r14, 0x8                                           
0x7e8de8b164a7    498906                  mov [r14], rax                                         
 .. e = 1 ;                               Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, controlFlags, 0, disp, 0, imm, i .. 
0x7e8de8b164aa    49bbc452b1e88d7e0000    mov r11, 0x7e8de8b152c4                                
0x7e8de8b164b4    49ffd3                  call r11                      < C_Syntax.Compile_CalculateWrite_Instruction_X64 : 0x00007e8de8b152c4 >
0x7e8de8b164b7    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b164bb    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b164bf    4983ee30                sub r14, 0x30                                          
 .. ags, 0, disp, 0, imm, iSize ) ;     } }  .. 
0x7e8de8b164c3    c3                      ret                                                    
Word_Disassemble : word - '_Compile_X_Group1_Immediate' :: codeSize = 642
Word : 0x00007e8de4613e15 :: Compiled at : 0x00007e8de8b16242
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 587.32 <::

 =============================
C_Syntax._Compile_Move_DataStackN_ToReg <:> csl compiled word
SourceCode for C_Syntax._Compile_Move_DataStackN_ToReg :> 
void _Compile_Move_DataStackN_ToReg ( reg, n ) { Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
Source code file location of _Compile_Move_DataStackN_ToReg : "namespaces/compiler/x64.csl" : 640.31 :: we are now at : namespaces/compiler/x64.csl : 645.35
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16a4c -- code size = 178 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax._Compile_Move_DataStackN_ToReg : definition = 0x00007e8de8b16a4c : disassembly at namespaces/compiler/x64.csl : 645.35 :
0x7e8de8b16a4c    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b16a50    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b16a54    4981c608000000          add r14, 0x8                                           
 .. eg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16a5b    b803000000              mov eax, 0x3                                           
0x7e8de8b16a60    4983c608                add r14, 0x8                                           
0x7e8de8b16a64    498906                  mov [r14], rax                                         
 .. reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16a67    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16a6e    4983c608                add r14, 0x8                                           
0x7e8de8b16a72    498906                  mov [r14], rax                                         
 .. n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16a75    498b47f0                mov rax, [r15-0x10]                                    
0x7e8de8b16a79    4983c608                add r14, 0x8                                           
0x7e8de8b16a7d    498906                  mov [r14], rax                                         
 ..         Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16a80    b80e000000              mov eax, 0xe                                           
0x7e8de8b16a85    4983c608                add r14, 0x8                                           
0x7e8de8b16a89    498906                  mov [r14], rax                                         
 ..    Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16a8c    b808000000              mov eax, 0x8                                           
0x7e8de8b16a91    4983c608                add r14, 0x8                                           
0x7e8de8b16a95    498906                  mov [r14], rax                                         
 .. Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16a98    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16a9f    4983c608                add r14, 0x8                                           
0x7e8de8b16aa3    498906                  mov [r14], rax                                         
 .. pile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16aa6    498b47f8                mov rax, [r15-0x8]                                     
 .. _Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16aaa    b908000000              mov ecx, 0x8                                           
 .. le_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16aaf    480fafc1                imul rax, rcx                                          
0x7e8de8b16ab3    4983c608                add r14, 0x8                                           
0x7e8de8b16ab7    498906                  mov [r14], rax                                         
 .. ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16aba    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16ac1    4983c608                add r14, 0x8                                           
0x7e8de8b16ac5    498906                  mov [r14], rax                                         
 .. EG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16ac8    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16acf    4983c608                add r14, 0x8                                           
0x7e8de8b16ad3    498906                  mov [r14], rax                                         
 ..  MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16ad6    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16add    4983c608                add r14, 0x8                                           
0x7e8de8b16ae1    498906                  mov [r14], rax                                         
 .. _DataStackN_ToReg ( reg, n ) {        Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16ae4    49bb3e54b1e88d7e0000    mov r11, 0x7e8de8b1543e                                
0x7e8de8b16aee    49ffd3                  call r11                      < C_Syntax.Compile_Move : 0x00007e8de8b1543e >
0x7e8de8b16af1    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b16af5    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b16af9    4983ee10                sub r14, 0x10                                          
 .. reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; } 
0x7e8de8b16afd    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Move_DataStackN_ToReg' :: codeSize = 178
Word : 0x00007e8de462f0c5 :: Compiled at : 0x00007e8de8b16a4c
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 645.35 <::

 =============================
Interpreter._Compile_Stack_PopToReg <:> csl compiled word
SourceCode for Interpreter._Compile_Stack_PopToReg :> 
: _Compile_Stack_PopToReg ( reg ) _Compile_Move_DataStackN_ToReg ( reg, 0 ) _Compile_SUBI_DSP ( CELL ) ; 
Source code file location of _Compile_Stack_PopToReg : "namespaces/compiler/x64.csl" : 655.2 :: we are now at : namespaces/compiler/x64.csl : 660.28
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16b03 -- code size = 91 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._Compile_Stack_PopToReg : definition = 0x00007e8de8b16b03 : disassembly at namespaces/compiler/x64.csl : 660.28 :
0x7e8de8b16b03    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b16b07    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b16b0b    4981c608000000          add r14, 0x8                                           
 ..      _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x7e8de8b16b12    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b16b16    4983c608                add r14, 0x8                                           
0x7e8de8b16b1a    498906                  mov [r14], rax                                         
 .. _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x7e8de8b16b1d    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16b24    4983c608                add r14, 0x8                                           
0x7e8de8b16b28    498906                  mov [r14], rax                                         
 .. : _Compile_Stack_PopToReg ( reg )     _Compile_Move_DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; .. 
0x7e8de8b16b2b    49bb4c6ab1e88d7e0000    mov r11, 0x7e8de8b16a4c                                
0x7e8de8b16b35    49ffd3                  call r11                      < C_Syntax._Compile_Move_DataStackN_ToReg : 0x00007e8de8b16a4c >
 .. reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x7e8de8b16b38    b808000000              mov eax, 0x8                                           
0x7e8de8b16b3d    4983c608                add r14, 0x8                                           
0x7e8de8b16b41    498906                  mov [r14], rax                                         
 .. _DataStackN_ToReg ( reg, 0 )          _Compile_SUBI_DSP ( CELL )                     ; 
0x7e8de8b16b44    49bb5667b1e88d7e0000    mov r11, 0x7e8de8b16756                                
0x7e8de8b16b4e    49ffd3                  call r11                      < C_Syntax._Compile_SUBI_DSP : 0x00007e8de8b16756 >
0x7e8de8b16b51    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b16b55    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b16b59    4983ee08                sub r14, 0x8                                           
 .. SUBI_DSP ( CELL )                     ; 
0x7e8de8b16b5d    c3                      ret                                                    
Word_Disassemble : word - '_Compile_Stack_PopToReg' :: codeSize = 91
Word : 0x00007e8de46308d5 :: Compiled at : 0x00007e8de8b16b03
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 660.28 <::

 =============================
Combinators.iax <:> csl compiled word
SourceCode for Combinators.iax :> 
asm: iax _Compile_Stack_PopToReg ( R8D ) _Compile_CallThruReg ( R8D ) ;asm 
Source code file location of iax : "namespaces/compiler/x64.csl" : 665.5 :: we are now at : namespaces/compiler/x64.csl : 672.17
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16b72 -- code size = 11 bytes
 -----------------------------
Word :: Combinators.iax : definition = 0x00007e8de8b16b72 : disassembly at namespaces/compiler/x64.csl : 672.17 :
 ..                         asm: iax      _Compile_Stack_PopToReg ( R8D )                                       _Compile_CallThruReg ( R8D )  .. 
0x7e8de8b16b72    4d8b06                  mov r8, [r14]                                          
0x7e8de8b16b75    4983ee08                sub r14, 0x8                                           
 ..                                       _Compile_CallThruReg ( R8D )                                       ;asm  .. 
0x7e8de8b16b79    49ffd0                  call r8                                                
 ..                                       ;asm  .. 
0x7e8de8b16b7c    c3                      ret                                                    
Word_Disassemble : word - 'iax' :: codeSize = 11
Word : 0x00007e8de4631a25 :: Compiled at : 0x00007e8de8b16b72
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 672.17 <::

 =============================
Combinators.Compile_Stack_Push_R8D <:> csl compiled word
SourceCode for Combinators.Compile_Stack_Push_R8D :> 
: Compile_Stack_Push_R8D ( ) _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
Source code file location of Compile_Stack_Push_R8D : "namespaces/compiler/x64.csl" : 695.2 :: we are now at : namespaces/compiler/x64.csl : 700.27
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16ddd -- code size = 77 bytes
TypeSignature : 
 -----------------------------
Word :: Combinators.Compile_Stack_Push_R8D : definition = 0x00007e8de8b16ddd : disassembly at namespaces/compiler/x64.csl : 700.27 :
 .. _Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x7e8de8b16ddd    b8080000004983c608      mov r8, 0x8c6834900000008                              
0x7e8de8b16de6    498906                  mov [r14], rax                                         
 ..      : Compile_Stack_Push_R8D ( )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ;  .. 
0x7e8de8b16de9    49bbe06cb1e88d7e0000    mov r11, 0x7e8de8b16ce0                                
0x7e8de8b16df3    49ffd3                  call r11                      < Combinators._Compile_ADDI_DSP : 0x00007e8de8b16ce0 >
 .. LL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x7e8de8b16df6    b80e000000              mov eax, 0xe                                           
0x7e8de8b16dfb    4983c608                add r14, 0x8                                           
0x7e8de8b16dff    498906                  mov [r14], rax                                         
 ..     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x7e8de8b16e02    48c7c000000000          mov rax, 0x0                                           
0x7e8de8b16e09    4983c608                add r14, 0x8                                           
0x7e8de8b16e0d    498906                  mov [r14], rax                                         
 ..  _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x7e8de8b16e10    b808000000              mov eax, 0x8                                           
0x7e8de8b16e15    4983c608                add r14, 0x8                                           
0x7e8de8b16e19    498906                  mov [r14], rax                                         
 ..  )     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x7e8de8b16e1c    49bb3869b1e88d7e0000    mov r11, 0x7e8de8b16938                                
0x7e8de8b16e26    49ffd3                  call r11                      < C_Syntax._Compile_MoveReg_To_StackN : 0x00007e8de8b16938 >
 .. ile_MoveReg_To_StackN ( DSP, 0, R8D ) ; 
0x7e8de8b16e29    c3                      ret                                                    
Word_Disassemble : word - 'Compile_Stack_Push_R8D' :: codeSize = 77
Word : 0x00007e8de4638855 :: Compiled at : 0x00007e8de8b16ddd
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 700.27 <::

 =============================
User.qeval <:> csl compiled word
SourceCode for User.qeval :> 
: qeval s iax ; 
Source code file location of qeval : "namespaces/compiler/x64.csl" : 703.2 :: we are now at : namespaces/compiler/x64.csl : 704.19
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16e3e -- code size = 37 bytes
 -----------------------------
Word :: User.qeval : definition = 0x00007e8de8b16e3e : disassembly at namespaces/compiler/x64.csl : 704.19 :
 ..                               : qeval s iax ;  .. 
0x7e8de8b16e3e    49baf0d92e3f345b0000    mov r10, 0x5b343f2ed9f0                                
0x7e8de8b16e48    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b16e52    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..                             : qeval s iax ;  .. 
0x7e8de8b16e55    49bb726bb1e88d7e0000    mov r11, 0x7e8de8b16b72                                
0x7e8de8b16e5f    49ffd3                  call r11                      < Combinators.iax : 0x00007e8de8b16b72 >
 ..                         : qeval s iax ;  .. 
0x7e8de8b16e62    c3                      ret                                                    
Word_Disassemble : word - 'qeval' :: codeSize = 37
Word : 0x00007e8de4639495 :: Compiled at : 0x00007e8de8b16e3e
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 704.19 <::

 =============================
User.stest <:> csl compiled word
SourceCode for User.stest :> 
asm: stest _Compile_MoveTOS_To_R8D ( ) _Compile_Move_DataStackN_ToReg ( R8D, 0 ) Compile_Stack_Push_R8D ( ) _Compile_SUBI_DSP ( CELL ) ;asm 
Source code file location of stest : "namespaces/compiler/x64.csl" : 707.5 :: we are now at : namespaces/compiler/x64.csl : 713.10
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16e77 -- code size = 18 bytes
 -----------------------------
Word :: User.stest : definition = 0x00007e8de8b16e77 : disassembly at namespaces/compiler/x64.csl : 713.10 :
 ..                        asm: stest     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8 .. 
0x7e8de8b16e77    4d8b06                  mov r8, [r14]                                          
 .. t     _Compile_MoveTOS_To_R8D ( )     _Compile_Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CE .. 
0x7e8de8b16e7a    4d8b06                  mov r8, [r14]                                          
 .. _Move_DataStackN_ToReg ( R8D, 0 )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x7e8de8b16e7d    4983c608                add r14, 0x8                                           
0x7e8de8b16e81    4d8906                  mov [r14], r8                                          
 ..  )     Compile_Stack_Push_R8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x7e8de8b16e84    4983ee08                sub r14, 0x8                                           
 .. 8D ( )     _Compile_SUBI_DSP ( CELL ) ;asm  .. 
0x7e8de8b16e88    c3                      ret                                                    
Word_Disassemble : word - 'stest' :: codeSize = 18
Word : 0x00007e8de46399a5 :: Compiled at : 0x00007e8de8b16e77
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 713.10 <::
 
this is some purposefully funky code for testing

DataStack at : namespaces/compiler/x64.csl : 717.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 717.10 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 x64 test ok
 =============================
Stack.ndup <:> csl compiled word
SourceCode for Stack.ndup :> 
asm: ndup _Compile_MoveTOS_To_R8D ( ) _Compile_SUBI_DSP ( CELL ) _Compile_Move_DataStackN_ToReg ( R9D, 0 ) "start" label _Compile_TESTreg_Toreg ( R8D, R8D ) "end" 0 EQ jcc _Compile_ADDI_DSP ( CELL ) _Compile_MoveReg_To_StackN ( DSP, 0, R9D ) _Compile_IncDecreg ( DEC, R8D ) "start" goto "end" label;asm 
Source code file location of ndup : "namespaces/compiler/x64.csl" : 721.5 :: we are now at : namespaces/compiler/x64.csl : 735.22
Compiled with : optimizeOn, inlineOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b16e9d -- code size = 35 bytes
 -----------------------------
Word :: Stack.ndup : definition = 0x00007e8de8b16e9d : disassembly at namespaces/compiler/x64.csl : 735.22 :
 ..                         asm: ndup     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D .. 
0x7e8de8b16e9d    4d8b06                  mov r8, [r14]                                          
 .. p     _Compile_MoveTOS_To_R8D ( )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Com .. 
0x7e8de8b16ea0    4983ee08                sub r14, 0x8                                           
 ..  )     _Compile_SUBI_DSP ( CELL )     _Compile_Move_DataStackN_ToReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D ) .. 
0x7e8de8b16ea4    4d8b0e                  mov r9, [r14]                                          
 .. oReg ( R9D, 0 )     "start" label     _Compile_TESTreg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_ .. 
0x7e8de8b16ea7    4585c0                  test r8d, r8d                                          
 .. reg_Toreg ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncD .. 
0x7e8de8b16eaa    0f840f000000            jz 0x7e8de8b16ebf             < Stack.ndup+34 >
 .. g ( R8D, R8D )     "end" 0 EQ jcc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg (  .. 
0x7e8de8b16eb0    4983c608                add r14, 0x8                                           
 .. cc     _Compile_ADDI_DSP ( CELL )     _Compile_MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     .. 
0x7e8de8b16eb4    4d890e                  mov [r14], r9                                          
 .. MoveReg_To_StackN ( DSP, 0, R9D )     _Compile_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  .. 
0x7e8de8b16eb7    41ffc8                  dec r8d                                                
 .. le_IncDecreg ( DEC, R8D )     "start" goto     "end" label;asm  .. 
0x7e8de8b16eba    e9e8ffffff              jmp 0x7e8de8b16ea7            < Stack.ndup+10 >
 .. R8D )     "start" goto     "end" label;asm  .. 
0x7e8de8b16ebf    c3                      ret                                                    
Word_Disassemble : word - 'ndup' :: codeSize = 35
Word : 0x00007e8de463a575 :: Compiled at : 0x00007e8de8b16e9d
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 735.22 <::

DataStack at : namespaces/compiler/x64.csl : 736.2 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 736.27 :
DataStack depth =  11 : Dsp (R14) = Top = 0x00007e8de7910b10, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910b10 > = 0x0000000000000007
  DataStack   [  -1 ] < 0x00007e8de7910b08 > = 0x0000000000000007
  DataStack   [  -2 ] < 0x00007e8de7910b00 > = 0x0000000000000007
  DataStack   [  -3 ] < 0x00007e8de7910af8 > = 0x0000000000000007
  DataStack   [  -4 ] < 0x00007e8de7910af0 > = 0x0000000000000007
  DataStack   [  -5 ] < 0x00007e8de7910ae8 > = 0x0000000000000007
  DataStack   [  -6 ] < 0x00007e8de7910ae0 > = 0x0000000000000007
  DataStack   [  -7 ] < 0x00007e8de7910ad8 > = 0x0000000000000007
  DataStack   [  -8 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -9 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [ -10 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

DataStack at : namespaces/compiler/x64.csl : 736.37 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Asm.testAsm <:> csl compiled word
SourceCode for Asm.testAsm :> 
asm: testAsm MOVrr RDX, RAX MOVrr RAX, RBX MOVrr RBX, RAX MOVrr RAX, RDX ;asm 
Source code file location of testAsm : "namespaces/compiler/x64.csl" : 785.5 :: we are now at : namespaces/compiler/x64.csl : 791.12
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b17122 -- code size = 13 bytes
 -----------------------------
Word :: Asm.testAsm : definition = 0x00007e8de8b17122 : disassembly at namespaces/compiler/x64.csl : 791.12 :
 ..                      asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  .. 
0x7e8de8b17122    488bd0                  mov rdx, rax                                           
 ..   asm: testAsm     MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm  .. 
0x7e8de8b17125    488bc3                  mov rax, rbx                                           
 .. MOVrr RDX, RAX     MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x7e8de8b17128    488bd8                  mov rbx, rax                                           
 .. MOVrr RAX, RBX     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x7e8de8b1712b    488bc2                  mov rax, rdx                                           
 ..     MOVrr RBX, RAX     MOVrr RAX, RDX ;asm 
0x7e8de8b1712e    c3                      ret                                                    
Word_Disassemble : word - 'testAsm' :: codeSize = 13
Word : 0x00007e8de4642855 :: Compiled at : 0x00007e8de8b17122
 =============================
::> 'wdiss' was called at namespaces/compiler/x64.csl 791.12 <::

 _TestDone_ = 1

including namespaces/test/dev.csl at namespaces/ninit.csl : 13.22 ...
 5040 5040
 =============================
C_Syntax.factoriali <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali :> 
int factoriali ( int8 REG n | REG res ) { res = 1; while ( n >= 2 ) { res = res * n ; n = n - 1 ; res = res * (n--) ; } return res; } 
Source code file location of factoriali : "namespaces/test/dev.csl" : 22.15 :: we are now at : namespaces/test/dev.csl : 45.15
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b171c3 -- code size = 39 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali : definition = 0x00007e8de8b171c3 : disassembly at namespaces/test/dev.csl : 45.15 :
0x7e8de8b171c3    498b3e                  mov rdi, [r14]                                         
 .. li ( int8 REG n | REG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;    .. 
0x7e8de8b171c6    be01000000              mov esi, 0x1                                           
 .. EG res ) {     res = 1;     while ( n >= 2 )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return r .. 
0x7e8de8b171cb    4883ff02                cmp rdi, 0x2                                           
0x7e8de8b171cf    7c15                    jl 0xe8b171e6                 < C_Syntax.factoriali+35 >
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x7e8de8b171d1    480faff7                imul rsi, rdi                                          
 .. )     {         res = res * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x7e8de8b171d5    4883ef01                sub rdi, 0x1                                           
 ..  * n ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x7e8de8b171d9    480faff7                imul rsi, rdi                                          
 ..  ; n = n - 1  ;         res = res * (n--) ;     }        return res; }  .. 
0x7e8de8b171dd    48ffcf                  dec rdi                                                
0x7e8de8b171e0    4883ff02                cmp rdi, 0x2                                           
0x7e8de8b171e4    7deb                    jge 0xe8b171d1                < C_Syntax.factoriali+14 >
 .. s = res * (n--) ;     }        return res; }  .. 
0x7e8de8b171e6    498936                  mov [r14], rsi                                         
 .. es * (n--) ;     }        return res; }  .. 
0x7e8de8b171e9    c3                      ret                                                    
Word_Disassemble : word - 'factoriali' :: codeSize = 39
Word : 0x00007e8de4644d79 :: Compiled at : 0x00007e8de8b171c3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 45.15 <::

 =============================
C_Syntax.factoriali2 <:> csl compiled word, prefix
SourceCode for C_Syntax.factoriali2 :> 
int factoriali2 ( int8 REG n | REG res ) { res = 1; do { res = res * n ; n = n - 1 ; } while ( n >= 2 ) ; return res; } 
Source code file location of factoriali2 : "namespaces/test/dev.csl" : 49.16 :: we are now at : namespaces/test/dev.csl : 59.16
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b171fe -- code size = 26 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.factoriali2 : definition = 0x00007e8de8b171fe : disassembly at namespaces/test/dev.csl : 59.16 :
0x7e8de8b171fe    498b3e                  mov rdi, [r14]                                         
 .. i2 ( int8 REG n | REG res ) {     res = 1;     do      {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x7e8de8b17201    be01000000              mov esi, 0x1                                           
 ..  ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x7e8de8b17206    480faff7                imul rsi, rdi                                          
 ..       {         res = res * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x7e8de8b1720a    4883ef01                sub rdi, 0x1                                           
 .. * n ; n = n - 1 ;     }     while ( n >= 2 ) ;     return res; } 
0x7e8de8b1720e    4883ff02                cmp rdi, 0x2                                           
0x7e8de8b17212    7df2                    jge 0xe8b17206                < C_Syntax.factoriali2+8 >
 ..   }     while ( n >= 2 ) ;     return res; } 
0x7e8de8b17214    498936                  mov [r14], rsi                                         
 ..    while ( n >= 2 ) ;     return res; } 
0x7e8de8b17217    c3                      ret                                                    
Word_Disassemble : word - 'factoriali2' :: codeSize = 26
Word : 0x00007e8de464a099 :: Compiled at : 0x00007e8de8b171fe
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 59.16 <::
 5040 5040 5040
 =============================
User.factorial006 <:> csl compiled word
SourceCode for User.factorial006 :> 
: factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
Source code file location of factorial006 : "namespaces/test/dev.csl" : 70.2 :: we are now at : namespaces/test/dev.csl : 72.25
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1727a -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial006 : definition = 0x00007e8de8b1727a : disassembly at namespaces/test/dev.csl : 72.25 :
 ..                        : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x7e8de8b1727a    498b3e                  mov rdi, [r14]                                         
 : factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;  .. 
0x7e8de8b1727d    be01000000              mov esi, 0x1                                           
 .. 6 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b17282    4883ff01                cmp rdi, 0x1                                           
 .. ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b17286    7e0d                    jle 0xe8b17295                < User.factorial006+27 >
 .. rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b17288    480faff7                imul rsi, rdi                                          
 .. { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b1728c    48ffcf                  dec rdi                                                
 ..  @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b1728f    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b17293    7ff3                    jg 0xe8b17288                 < User.factorial006+14 >
 .. n @ * rec store n -- } while return ( rec @ ) ; 
0x7e8de8b17295    498936                  mov [r14], rsi                                         
 .. c store n -- } while return ( rec @ ) ; 
0x7e8de8b17298    c3                      ret                                                    
Word_Disassemble : word - 'factorial006' :: codeSize = 31
Word : 0x00007e8de4650869 :: Compiled at : 0x00007e8de8b1727a
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 72.25 <::
 5040 factorial006  : ok


 =============================
User.qexp <:> csl compiled word
SourceCode for User.qexp :> 
: qexp dup 1 <= if{ }else{ dup -- qexp * }fi ; 
Source code file location of qexp : "namespaces/test/dev.csl" : 74.2 :: we are now at : namespaces/test/dev.csl : 74.64
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b172ad -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: User.qexp : definition = 0x00007e8de8b172ad : disassembly at namespaces/test/dev.csl : 74.64 :
0x7e8de8b172ad    498b06                  mov rax, [r14]                                         
0x7e8de8b172b0    4983c608                add r14, 0x8                                           
0x7e8de8b172b4    498906                  mov [r14], rax                                         
0x7e8de8b172b7    b801000000              mov eax, 0x1                                           
 ..                            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172bc    488bc8                  mov rcx, rax                                           
0x7e8de8b172bf    498b06                  mov rax, [r14]                                         
0x7e8de8b172c2    4983ee08                sub r14, 0x8                                           
 ..                          : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172c6    483bc1                  cmp rax, rcx                                           
0x7e8de8b172c9    0f8f05000000            jg 0x7e8de8b172d4             < User.qexp+39 >
 ..                   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172cf    e936000000              jmp 0x7e8de8b1730a            < User.qexp+93 >
 ..            : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172d4    498b06                  mov rax, [r14]                                         
 ..                       : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172d7    4983c608                add r14, 0x8                                           
0x7e8de8b172db    498906                  mov [r14], rax                                         
0x7e8de8b172de    498b06                  mov rax, [r14]                                         
0x7e8de8b172e1    4983ee08                sub r14, 0x8                                           
 ..        : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172e5    48ffc8                  dec rax                                                
0x7e8de8b172e8    4983c608                add r14, 0x8                                           
0x7e8de8b172ec    498906                  mov [r14], rax                                         
 ..     : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172ef    e8b9ffffff              call 0x7e8de8b172ad           < User.qexp : 0x00007e8de8b172ad >
0x7e8de8b172f4    498b0e                  mov rcx, [r14]                                         
0x7e8de8b172f7    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b172fb    4983ee10                sub r14, 0x10                                          
   : qexp dup 1 <= if{ }else{ dup -- qexp * }fi ;  .. 
0x7e8de8b172ff    480fafc1                imul rax, rcx                                          
0x7e8de8b17303    4983c608                add r14, 0x8                                           
0x7e8de8b17307    498906                  mov [r14], rax                                         
 .. dup 1 <= if{ }else{ dup -- qexp * }fi ; 
0x7e8de8b1730a    c3                      ret                                                    
Word_Disassemble : word - 'qexp' :: codeSize = 94
Word : 0x00007e8de46534b9 :: Compiled at : 0x00007e8de8b172ad
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 74.64 <::
 5040 5040 5040 5040
 5040
 =============================
C_Syntax.faccs3 <:> csl compiled word
SourceCode for C_Syntax.faccs3 :> 
int faccs3 ( n | rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs3 : "namespaces/test/dev.csl" : 84.7 :: we are now at : namespaces/test/dev.csl : 92.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b174e0 -- code size = 73 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs3 : definition = 0x00007e8de8b174e0 : disassembly at namespaces/test/dev.csl : 92.20 :
0x7e8de8b174e0    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b174e4    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b174e8    4981c610000000          add r14, 0x10                                          
  int faccs3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; }  .. 
0x7e8de8b174ef    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. s3 ( n | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b174f7    49837ff801              cmp qword [r15-0x8], 0x1                               
 ..  | rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b174fc    7e1b                    jle 0xe8b17519                < C_Syntax.faccs3+57 >
 ..  ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b174fe    498b4708                mov rax, [r15+0x8]                                     
 ..  1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b17502    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b17506    480fafc1                imul rax, rcx                                          
0x7e8de8b1750a    49894708                mov [r15+0x8], rax                                     
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1750e    49ff4ff8                dec qword [r15-0x8]                                    
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b17512    49837ff801              cmp qword [r15-0x8], 0x1                               
0x7e8de8b17517    7fe5                    jg 0xe8b174fe                 < C_Syntax.faccs3+30 >
 ..           rec = rec * n ;      }      return rec ; } 
0x7e8de8b17519    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1751d    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b17521    4d8b7e08                mov r15, [r14+0x8]                                     
 ..    rec = rec * n ;      }      return rec ; } 
0x7e8de8b17525    498906                  mov [r14], rax                                         
 ..  = rec * n ;      }      return rec ; } 
0x7e8de8b17528    c3                      ret                                                    
Word_Disassemble : word - 'faccs3' :: codeSize = 73
Word : 0x00007e8de465b139 :: Compiled at : 0x00007e8de8b174e0
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 92.20 <::
 5040
 =============================
C_Syntax.fac5 <:> csl compiled word
SourceCode for C_Syntax.fac5 :> 
int fac5 ( REG n | REG facc ) { facc = 1 ; while ( n > 1 ) { facc = facc * ( n -- ) ; } return facc ; } 
Source code file location of fac5 : "namespaces/test/dev.csl" : 98.5 :: we are now at : namespaces/test/dev.csl : 108.21
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1753d -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fac5 : definition = 0x00007e8de8b1753d : disassembly at namespaces/test/dev.csl : 108.21 :
0x7e8de8b1753d    498b3e                  mov rdi, [r14]                                         
 .. c5 ( REG n  | REG facc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x7e8de8b17540    be01000000              mov esi, 0x1                                           
 .. cc )  {      facc = 1 ;     while ( n > 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x7e8de8b17545    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b17549    7e0d                    jle 0xe8b17558                < C_Syntax.fac5+27 >
 .. 1 )      {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x7e8de8b1754b    480faff7                imul rsi, rdi                                          
 ..    {                facc = facc * ( n -- ) ;    }     return facc ; } 
0x7e8de8b1754f    48ffcf                  dec rdi                                                
0x7e8de8b17552    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b17556    7ff3                    jg 0xe8b1754b                 < C_Syntax.fac5+14 >
 .. c = facc * ( n -- ) ;    }     return facc ; } 
0x7e8de8b17558    498936                  mov [r14], rsi                                         
 .. c * ( n -- ) ;    }     return facc ; } 
0x7e8de8b1755b    c3                      ret                                                    
Word_Disassemble : word - 'fac5' :: codeSize = 31
Word : 0x00007e8de465eb09 :: Compiled at : 0x00007e8de8b1753d
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 108.21 <::
 5040
 =============================
C_Syntax.faccs <:> csl compiled word
SourceCode for C_Syntax.faccs :> 
int faccs ( REG n | REG rec ) { rec = 1 ; while ( n > 1 ) { rec = rec * n ; n-- ; } return rec ; } 
Source code file location of faccs : "namespaces/test/dev.csl" : 112.6 :: we are now at : namespaces/test/dev.csl : 121.19
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b17570 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs : definition = 0x00007e8de8b17570 : disassembly at namespaces/test/dev.csl : 121.19 :
0x7e8de8b17570    498b3e                  mov rdi, [r14]                                         
 int faccs ( REG n | REG rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; }  .. 
0x7e8de8b17573    be01000000              mov esi, 0x1                                           
 .. rec )  {     rec = 1 ;      while ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x7e8de8b17578    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b1757c    7e0d                    jle 0xe8b1758b                < C_Syntax.faccs+27 >
 .. le ( n > 1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x7e8de8b1757e    480faff7                imul rsi, rdi                                          
 ..  1 )     {          rec = rec * n ;  n-- ;      }      return rec ; } 
0x7e8de8b17582    48ffcf                  dec rdi                                                
0x7e8de8b17585    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b17589    7ff3                    jg 0xe8b1757e                 < C_Syntax.faccs+14 >
 .. = rec * n ;  n-- ;      }      return rec ; } 
0x7e8de8b1758b    498936                  mov [r14], rsi                                         
 .. * n ;  n-- ;      }      return rec ; } 
0x7e8de8b1758e    c3                      ret                                                    
Word_Disassemble : word - 'faccs' :: codeSize = 31
Word : 0x00007e8de46624d9 :: Compiled at : 0x00007e8de8b17570
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 121.19 <::
 5040
 =============================
C_Syntax.faccs1 <:> csl compiled word
SourceCode for C_Syntax.faccs1 :> 
int faccs1 ( REG n | REG rec ) { rec = 1 ; if ( n > 1 ) { do { rec = rec * n ; n-- ; } while ( n > 1 ) ; } return rec ; } 
Source code file location of faccs1 : "namespaces/test/dev.csl" : 125.7 :: we are now at : namespaces/test/dev.csl : 138.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b175a3 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs1 : definition = 0x00007e8de8b175a3 : disassembly at namespaces/test/dev.csl : 138.20 :
0x7e8de8b175a3    498b3e                  mov rdi, [r14]                                         
int faccs1 ( REG n | REG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }    .. 
0x7e8de8b175a6    be01000000              mov esi, 0x1                                           
 .. EG rec )  {     rec = 1 ;      if ( n > 1 )    {         do         {              rec = rec * n ;  n-- ;          }          while ( n > .. 
0x7e8de8b175ab    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b175af    7f00                    jg 0xe8b175b1                 < C_Syntax.faccs1+14 >
 .. n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x7e8de8b175b1    480faff7                imul rsi, rdi                                          
 ..      {              rec = rec * n ;  n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x7e8de8b175b5    48ffcf                  dec rdi                                                
 ..   n-- ;          }          while ( n > 1 ) ;     }     return rec ; }  .. 
0x7e8de8b175b8    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b175bc    7ff3                    jg 0xe8b175b1                 < C_Syntax.faccs1+14 >
 ..    while ( n > 1 ) ;     }     return rec ; }  .. 
0x7e8de8b175be    498936                  mov [r14], rsi                                         
 .. le ( n > 1 ) ;     }     return rec ; }  .. 
0x7e8de8b175c1    c3                      ret                                                    
Word_Disassemble : word - 'faccs1' :: codeSize = 31
Word : 0x00007e8de4665b49 :: Compiled at : 0x00007e8de8b175a3
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 138.20 <::
 5040 5040
 =============================
C_Syntax.faccs2 <:> csl compiled word
SourceCode for C_Syntax.faccs2 :> 
int faccs2 ( REG n | REG rec ) { for ( rec = 1 ; n > 1 ; n-- ) { rec = rec * n ; } return rec ; } 
Source code file location of faccs2 : "namespaces/test/dev.csl" : 167.7 :: we are now at : namespaces/test/dev.csl : 175.20
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b17657 -- code size = 31 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.faccs2 : definition = 0x00007e8de8b17657 : disassembly at namespaces/test/dev.csl : 175.20 :
0x7e8de8b17657    498b3e                  mov rdi, [r14]                                         
 ..  ( REG n | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1765a    be01000000              mov esi, 0x1                                           
 ..  | REG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1765f    4883ff01                cmp rdi, 0x1                                           
 .. EG rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b17663    7e0d                    jle 0xe8b17672                < C_Syntax.faccs2+27 >
 ..  > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b17665    480faff7                imul rsi, rdi                                          
 .. rec )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b17669    48ffcf                  dec rdi                                                
 ..  )  {     for ( rec = 1 ; n > 1 ; n-- )     {          rec = rec * n ;      }      return rec ; } 
0x7e8de8b1766c    4883ff01                cmp rdi, 0x1                                           
0x7e8de8b17670    7ff3                    jg 0xe8b17665                 < C_Syntax.faccs2+14 >
 ..    rec = rec * n ;      }      return rec ; } 
0x7e8de8b17672    498936                  mov [r14], rsi                                         
 ..  = rec * n ;      }      return rec ; } 
0x7e8de8b17675    c3                      ret                                                    
Word_Disassemble : word - 'faccs2' :: codeSize = 31
Word : 0x00007e8de466fe99 :: Compiled at : 0x00007e8de8b17657
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 175.20 <::
 5040 5040
 =============================
User.factorial2 <:> csl compiled word
SourceCode for User.factorial2 :> 
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
Source code file location of factorial2 : "namespaces/test/dev.csl" : 195.2 :: we are now at : namespaces/test/dev.csl : 196.15
Compiled with : optimizeOn, inlineOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b178a5 -- code size = 25 bytes
TypeSignature : 
 -----------------------------
Word :: User.factorial2 : definition = 0x00007e8de8b178a5 : disassembly at namespaces/test/dev.csl : 196.15 :
 ..                          : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x7e8de8b178a5    498b3e                  mov rdi, [r14]                                         
   : factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;  .. 
0x7e8de8b178a8    be01000000              mov esi, 0x1                                           
 .. REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x7e8de8b178ad    480faff7                imul rsi, rdi                                          
 .. c ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x7e8de8b178b1    48ffcf                  dec rdi                                                
 ..  rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x7e8de8b178b4    4883ff01                cmp rdi, 0x1                                           
 .. ec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ; 
0x7e8de8b178b8    7ff3                    jg 0xe8b178ad                 < User.factorial2+8 >
 .. ore n -- } { n @ 1 > } doWhile return rec ; 
0x7e8de8b178ba    498936                  mov [r14], rsi                                         
 .. n -- } { n @ 1 > } doWhile return rec ; 
0x7e8de8b178bd    c3                      ret                                                    
Word_Disassemble : word - 'factorial2' :: codeSize = 25
Word : 0x00007e8de467c5c9 :: Compiled at : 0x00007e8de8b178a5
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 196.15 <::

 =============================
User.ifx <:> csl compiled word
SourceCode for User.ifx :> 
: ifx ( n w | k ) { k 1 = } { k @ n @ <= } { k ++ } { w @ _ifx } for ; 
Source code file location of ifx : "namespaces/test/dev.csl" : 220.2 :: we are now at : namespaces/test/dev.csl : 224.16
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b179e8 -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: User.ifx : definition = 0x00007e8de8b179e8 : disassembly at namespaces/test/dev.csl : 224.16 :
0x7e8de8b179e8    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b179ec    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b179f0    4981c610000000          add r14, 0x10                                          
 ..          : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x7e8de8b179f7    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..    : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x7e8de8b179ff    498b4708                mov rax, [r15+0x8]                                     
   : ifx ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ;  .. 
0x7e8de8b17a03    498b4ff0                mov rcx, [r15-0x10]                                    
 ..  ( n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a07    483bc1                  cmp rax, rcx                                           
 .. n w | k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a0a    7f2d                    jg 0xe8b17a39                 < User.ifx+81 >
0x7e8de8b17a0c    0f1f4000                nop [rax]                                              
 ..  1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a10    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b17a14    4983c608                add r14, 0x8                                           
0x7e8de8b17a18    498906                  mov [r14], rax                                         
 ..  } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a1b    49bbc378b1e88d7e0000    mov r11, 0x7e8de8b178c3                                
0x7e8de8b17a25    49ffd3                  call r11                      < User._ifx : 0x00007e8de8b178c3 >
 .. k )      { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a28    49ff4708                inc qword [r15+0x8]                                    
 ..       { k 1 = } { k @ n @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a2c    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b17a30    498b4ff0                mov rcx, [r15-0x10]                                    
0x7e8de8b17a34    483bc1                  cmp rax, rcx                                           
0x7e8de8b17a37    7ed3                    jle 0xe8b17a0c                < User.ifx+36 >
0x7e8de8b17a39    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b17a3d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b17a41    4983ee10                sub r14, 0x10                                          
 .. @ <= } { k ++ }      { w @ _ifx } for ; 
0x7e8de8b17a45    c3                      ret                                                    
Word_Disassemble : word - 'ifx' :: codeSize = 94
Word : 0x00007e8de46859e9 :: Compiled at : 0x00007e8de8b179e8
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 224.16 <::

 =============================
User._ffx <:> csl compiled word
SourceCode for User._ffx :> 
: _ffx ( n w | t ) nl 7 w @ wordRun decimal p nl { t 0 = } { t @ n @ < } { t ++ } { reps @ w @ ifx } for ; 
Source code file location of _ffx : "namespaces/test/dev.csl" : 227.2 :: we are now at : namespaces/test/dev.csl : 232.17
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b17aae -- code size = 242 bytes
TypeSignature : 
 -----------------------------
Word :: User._ffx : definition = 0x00007e8de8b17aae : disassembly at namespaces/test/dev.csl : 232.17 :
0x7e8de8b17aae    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b17ab2    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b17ab6    4981c610000000          add r14, 0x10                                          
0x7e8de8b17abd    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b17ac7    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b17ad1    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..            : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x7e8de8b17ad4    b807000000              mov eax, 0x7                                           
0x7e8de8b17ad9    4983c608                add r14, 0x8                                           
0x7e8de8b17add    498906                  mov [r14], rax                                         
 ..          : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x7e8de8b17ae0    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b17ae4    4983c608                add r14, 0x8                                           
0x7e8de8b17ae8    498906                  mov [r14], rax                                         
 ..      : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x7e8de8b17aeb    49baf004323f345b0000    mov r10, 0x5b343f3204f0                                
0x7e8de8b17af5    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b17aff    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 : _ffx ( n w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ;  .. 
0x7e8de8b17b02    49ba80fa313f345b0000    mov r10, 0x5b343f31fa80                                
0x7e8de8b17b0c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b17b16    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. w | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b19    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b17b23    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. | t )      nl 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b26    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b17b30    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b17b3a    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. l 7 w @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b3d    49c7470800000000        mov qword [r15+0x8], 0x0                               
 .. @ wordRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b45    498b4708                mov rax, [r15+0x8]                                     
 .. rdRun decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b49    498b4ff0                mov rcx, [r15-0x10]                                    
 .. n decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b4d    483bc1                  cmp rax, rcx                                           
 .. decimal p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b50    7d41                    jge 0xe8b17b93                < User._ffx+229 >
0x7e8de8b17b52    0f1f4000                nop [rax]                                              
 .. t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b56    48b859ac68e48d7e0000    mov rax, 0x7e8de468ac59                                
0x7e8de8b17b60    488b00                  mov rax, [rax]                                         
0x7e8de8b17b63    4983c608                add r14, 0x8                                           
0x7e8de8b17b67    498906                  mov [r14], rax                                         
 ..  { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b6a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b17b6e    4983c608                add r14, 0x8                                           
0x7e8de8b17b72    498906                  mov [r14], rax                                         
 ..  @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b75    49bbe879b1e88d7e0000    mov r11, 0x7e8de8b179e8                                
0x7e8de8b17b7f    49ffd3                  call r11                      < User.ifx : 0x00007e8de8b179e8 >
 .. l p nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b82    49ff4708                inc qword [r15+0x8]                                    
 ..  nl    { t 0 = } { t @ n @ < } { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b86    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b17b8a    498b4ff0                mov rcx, [r15-0x10]                                    
0x7e8de8b17b8e    483bc1                  cmp rax, rcx                                           
0x7e8de8b17b91    7cbf                    jl 0xe8b17b52                 < User._ffx+164 >
0x7e8de8b17b93    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b17b97    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b17b9b    4983ee10                sub r14, 0x10                                          
 .. { t ++ }      { reps @ w @ ifx } for  ; 
0x7e8de8b17b9f    c3                      ret                                                    
Word_Disassemble : word - '_ffx' :: codeSize = 242
Word : 0x00007e8de468ad79 :: Compiled at : 0x00007e8de8b17aae
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 232.17 <::

 ffx ... 

 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 246.9 :: we are now at : namespaces/test/dev.csl : 259.22
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 on : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b17fcd -- code size = 49 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x00007e8de8b17fcd : disassembly at namespaces/test/dev.csl : 259.22 :
0x7e8de8b17fcd    498b3e                  mov rdi, [r14]                                         
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x7e8de8b17fd0    48c7c600000000          mov rsi, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x7e8de8b17fd7    48c7c200000000          mov rdx, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x7e8de8b17fde    b901000000              mov ecx, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x7e8de8b17fe3    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b17fe7    7411                    jz 0xe8b17ffa                 < C_Syntax.fibPTC2?+45 >
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b17fe9    488bd1                  mov rdx, rcx                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b17fec    488bce                  mov rcx, rsi                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b17fef    4803d1                  add rdx, rcx                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b17ff2    488bf2                  mov rsi, rdx                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x7e8de8b17ff5    48ffcf                  dec rdi                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x7e8de8b17ff8    75ef                    jnz 0xe8b17fe9                < C_Syntax.fibPTC2?+28 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b17ffa    498936                  mov [r14], rsi                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b17ffd    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 49
Word : 0x00007e8de46980e9 :: Compiled at : 0x00007e8de8b17fcd
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 259.22 <::
 6765
 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000421616 seconds
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000833614 seconds
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000432076 seconds
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000433358 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000432226 seconds
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002790182 seconds
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003251672 seconds
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003109207 seconds
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 qexp :
Timer [ 1 ] : elapsed time = 0.002926425 seconds
 :: function : qexp : called on args : 1 - 23 : 1000 reps

 5040

 qexp2 :
Timer [ 1 ] : elapsed time = 0.003305713 seconds
 :: function : qexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp :
Timer [ 1 ] : elapsed time = 0.003881526 seconds
 :: function : bexp : called on args : 1 - 23 : 1000 reps

 5040

 bexp2 :
Timer [ 1 ] : elapsed time = 0.003679339 seconds
 :: function : bexp2 : called on args : 1 - 23 : 1000 reps

 5040

 bexp3 :
Timer [ 1 ] : elapsed time = 0.003054695 seconds
 :: function : bexp3 : called on args : 1 - 23 : 1000 reps

 5040

 fac :
Timer [ 1 ] : elapsed time = 0.000805011 seconds
 :: function : fac : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000644552 seconds
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 factorial :
Timer [ 1 ] : elapsed time = 0.000607111 seconds
 :: function : factorial : called on args : 1 - 23 : 1000 reps

 5040

 factorial2 :
Timer [ 1 ] : elapsed time = 0.000557099 seconds
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 5040

 factorial006 :
Timer [ 1 ] : elapsed time = 0.000526010 seconds
 :: function : factorial006 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali :
Timer [ 1 ] : elapsed time = 0.000471529 seconds
 :: function : factoriali : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000473503 seconds
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 factoriali2 :
Timer [ 1 ] : elapsed time = 0.000465057 seconds
 :: function : factoriali2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000437846 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial :
Timer [ 1 ] : elapsed time = 0.000860053 seconds
 :: function : cfactorial : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2 :
Timer [ 1 ] : elapsed time = 0.000432016 seconds
 :: function : cfactorial2 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3 :
Timer [ 1 ] : elapsed time = 0.000423580 seconds
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial_O3 :
Timer [ 1 ] : elapsed time = 0.000965329 seconds
 :: function : cfactorial_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial2_O3 :
Timer [ 1 ] : elapsed time = 0.000437496 seconds
 :: function : cfactorial2_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial3_O3 :
Timer [ 1 ] : elapsed time = 0.000442295 seconds
 :: function : cfactorial3_O3 : called on args : 1 - 23 : 1000 reps

 5040

 cfactorial4_O3 :
Timer [ 1 ] : elapsed time = 0.000381651 seconds
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

Using Namespaces :> User Root C int Locals Int Logic Compiler Interpreter Shell Defines Stack Asm void Combinators X64 int64 byte uint64 uint8 Bits Compiling a Ar1 DLLNodeAlloc DLLNode Buffer Class Experimental Buffer2048 typedef byteTest Experimental3 xbt _byteTest w Experimental libc CBuffer Dlsym String chey0 CObj chey System Debug Ar9 Ar3 Ar2 Control DObject Lexer testD a112 arr10 Ar10 cta ct0 ar9 DLLNodeAlloc4 DLListClone DLList Integer Pointer List OpenVmTil Io Word Macro Namespace StartupMacros Reserved PreProcessor Memory Colors File Array MemorySpace Forth L9 

 5040

 faccs :
Timer [ 1 ] : elapsed time = 0.000601501 seconds
 :: function : faccs : called on args : 1 - 23 : 1000 reps

 5040

 faccs1 :
Timer [ 1 ] : elapsed time = 0.000490094 seconds
 :: function : faccs1 : called on args : 1 - 23 : 1000 reps

 5040

 faccs2 :
Timer [ 1 ] : elapsed time = 0.000444559 seconds
 :: function : faccs2 : called on args : 1 - 23 : 1000 reps

 5040

 fac5 :
Timer [ 1 ] : elapsed time = 0.000458715 seconds
 :: function : fac5 : called on args : 1 - 23 : 1000 reps

 5040

 fac40 :
Timer [ 1 ] : elapsed time = 0.000749688 seconds
 :: function : fac40 : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.cpow <:> csl compiled word
SourceCode for C_Syntax.cpow :> 
int cpow ( base power | out ) { for ( out = 1 ; power ; power -- ) { out = out * base ; } return out ; } 
Source code file location of cpow : "namespaces/test/dev.csl" : 315.9 :: we are now at : namespaces/test/dev.csl : 317.17
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b18003 -- code size = 87 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.cpow : definition = 0x00007e8de8b18003 : disassembly at namespaces/test/dev.csl : 317.17 :
0x7e8de8b18003    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b18007    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1800b    4981c610000000          add r14, 0x10                                          
int cpow ( base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }  .. 
0x7e8de8b18012    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b1801a    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1801e    4883f800                cmp rax, 0x0                                           
0x7e8de8b18022    7422                    jz 0xe8b18046                 < C_Syntax.cpow+67 >
0x7e8de8b18024    0f1f4000                nop [rax]                                              
 .. out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b18028    498b4708                mov rax, [r15+0x8]                                     
 .. 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b1802c    498b4ff0                mov rcx, [r15-0x10]                                    
 .. = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b18030    480fafc1                imul rax, rcx                                          
 .. for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b18034    49894708                mov [r15+0x8], rax                                     
 .. out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b18038    49ff4ff8                dec qword [r15-0x8]                                    
 .. ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b1803c    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b18040    4883f800                cmp rax, 0x0                                           
0x7e8de8b18044    75de                    jnz 0xe8b18024                < C_Syntax.cpow+33 >
 ..  ; power --  ) { out = out * base ; } return out ; } 
0x7e8de8b18046    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1804a    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1804e    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b18052    4983ee08                sub r14, 0x8                                           
 .. r --  ) { out = out * base ; } return out ; } 
0x7e8de8b18056    498906                  mov [r14], rax                                         
 .. ) { out = out * base ; } return out ; } 
0x7e8de8b18059    c3                      ret                                                    
Word_Disassemble : word - 'cpow' :: codeSize = 87
Word : 0x00007e8de469dc79 :: Compiled at : 0x00007e8de8b18003
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 317.17 <::
 1073741824 1073741824
 =============================
Root.pow <:> csl compiled word
SourceCode for Root.pow :> 
: pow ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of pow : "namespaces/test/dev.csl" : 322.2 :: we are now at : namespaces/test/dev.csl : 325.11
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1805f -- code size = 101 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.pow : definition = 0x00007e8de8b1805f : disassembly at namespaces/test/dev.csl : 325.11 :
0x7e8de8b1805f    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b18063    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b18067    4981c610000000          add r14, 0x10                                          
 ..  ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1806e    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18076    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1807b    7e33                    jle 0xe8b180b0                < Root.pow+81 >
0x7e8de8b1807d    0f1f4000                nop [r8]                                               
 .. 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18081    498d4708                lea rax, [r15+0x8]                                     
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18085    4983c608                add r14, 0x8                                           
0x7e8de8b18089    498906                  mov [r14], rax                                         
 .. } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1808c    498b4708                mov rax, [r15+0x8]                                     
 .. wer @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18090    498b4ff0                mov rcx, [r15-0x10]                                    
0x7e8de8b18094    480fafc1                imul rax, rcx                                          
 ..  > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18098    488bc8                  mov rcx, rax                                           
0x7e8de8b1809b    498b06                  mov rax, [r14]                                         
0x7e8de8b1809e    4983ee08                sub r14, 0x8                                           
 ..  } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180a2    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180a5    49ff4ff8                dec qword [r15-0x8]                                    
 .. out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180a9    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b180ae    7fcd                    jg 0xe8b1807d                 < Root.pow+30 >
 .. er --  } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180b0    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b180b4    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b180b8    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b180bc    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180c0    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b180c3    c3                      ret                                                    
Word_Disassemble : word - 'pow' :: codeSize = 101
Word : 0x00007e8de46a12e9 :: Compiled at : 0x00007e8de8b1805f
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 325.11 <::

 65536

Timer [ 1 ] : elapsed time = 0.001010965 seconds

 1073741824
 =============================
Root.powReg <:> csl compiled word
SourceCode for Root.powReg :> 
: powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg : "namespaces/test/dev.csl" : 326.2 :: we are now at : namespaces/test/dev.csl : 328.14
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b180d8 -- code size = 43 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg : definition = 0x00007e8de8b180d8 : disassembly at namespaces/test/dev.csl : 328.14 :
 ..                              : powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base  .. 
0x7e8de8b180d8    498b36                  mov rsi, [r14]                                         
0x7e8de8b180db    498b7ef8                mov rdi, [r14-0x8]                                     
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180df    ba01000000              mov edx, 0x1                                           
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180e4    4883fe00                cmp rsi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180e8    7e11                    jle 0xe8b180fb                < Root.powReg+35 >
 .. power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180ea    0f1f4000                nop [rax]                                              
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180ee    480fafd7                imul rdx, rdi                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180f2    48ffce                  dec rsi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180f5    4883fe00                cmp rsi, 0x0                                           
0x7e8de8b180f9    7fef                    jg 0xe8b180ea                 < Root.powReg+18 >
0x7e8de8b180fb    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b180ff    498916                  mov [r14], rdx                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b18102    c3                      ret                                                    
Word_Disassemble : word - 'powReg' :: codeSize = 43
Word : 0x00007e8de46a45f9 :: Compiled at : 0x00007e8de8b180d8
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 328.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.000806463 seconds

 1073741824
 =============================
Root.powReg2 <:> csl compiled word
SourceCode for Root.powReg2 :> 
: powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg2 : "namespaces/test/dev.csl" : 329.2 :: we are now at : namespaces/test/dev.csl : 331.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b18108 -- code size = 67 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg2 : definition = 0x00007e8de8b18108 : disassembly at namespaces/test/dev.csl : 331.15 :
0x7e8de8b18108    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1810c    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b18110    4981c608000000          add r14, 0x8                                           
 ..                             : powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x7e8de8b18117    498b7ff8                mov rdi, [r15-0x8]                                     
 .. REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1811b    be01000000              mov esi, 0x1                                           
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18120    4883ff00                cmp rdi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18124    7e15                    jle 0xe8b1813b                < Root.powReg2+51 >
 .. power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18126    0f1f4000                nop [rax]                                              
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1812a    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1812e    480faff1                imul rsi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18132    48ffcf                  dec rdi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18135    4883ff00                cmp rdi, 0x0                                           
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18139    7feb                    jg 0xe8b18126                 < Root.powReg2+30 >
0x7e8de8b1813b    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1813f    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b18143    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18147    498936                  mov [r14], rsi                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b1814a    c3                      ret                                                    
Word_Disassemble : word - 'powReg2' :: codeSize = 67
Word : 0x00007e8de46a7909 :: Compiled at : 0x00007e8de8b18108
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 331.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000894067 seconds

 1073741824
 =============================
Root.powReg3 <:> csl compiled word
SourceCode for Root.powReg3 :> 
: powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg3 : "namespaces/test/dev.csl" : 332.2 :: we are now at : namespaces/test/dev.csl : 335.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b18150 -- code size = 66 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg3 : definition = 0x00007e8de8b18150 : disassembly at namespaces/test/dev.csl : 335.15 :
0x7e8de8b18150    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b18154    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b18158    4981c608000000          add r14, 0x8                                           
 ..                             : powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x7e8de8b1815f    498b7ff0                mov rdi, [r15-0x10]                                    
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18163    be01000000              mov esi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18168    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1816d    7e13                    jle 0xe8b18182                < Root.powReg3+50 >
0x7e8de8b1816f    0f1f4000                nop [rax]                                              
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18173    480faff7                imul rsi, rdi                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18177    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1817b    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b18180    7fed                    jg 0xe8b1816f                 < Root.powReg3+31 >
0x7e8de8b18182    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b18186    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1818a    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1818e    498936                  mov [r14], rsi                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b18191    c3                      ret                                                    
Word_Disassemble : word - 'powReg3' :: codeSize = 66
Word : 0x00007e8de46aac19 :: Compiled at : 0x00007e8de8b18150
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 335.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000834516 seconds

 1073741824
 =============================
Root.powReg4 <:> csl compiled word
SourceCode for Root.powReg4 :> 
: powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg4 : "namespaces/test/dev.csl" : 336.2 :: we are now at : namespaces/test/dev.csl : 339.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b18197 -- code size = 102 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg4 : definition = 0x00007e8de8b18197 : disassembly at namespaces/test/dev.csl : 339.15 :
0x7e8de8b18197    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1819b    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1819f    4981c610000000          add r14, 0x10                                          
 ..                             : powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ *  .. 
0x7e8de8b181a6    498b77f8                mov rsi, [r15-0x8]                                     
0x7e8de8b181aa    498b7ff0                mov rdi, [r15-0x10]                                    
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181ae    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181b6    4883fe00                cmp rsi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181ba    7e2d                    jle 0xe8b181e9                < Root.powReg4+82 >
 .. REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181bc    0f1f4000                nop [r8]                                               
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181c0    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b181c4    4983c608                add r14, 0x8                                           
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181c8    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181cb    498b4708                mov rax, [r15+0x8]                                     
 .. ut 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181cf    480fafc7                imul rax, rdi                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181d3    488bc8                  mov rcx, rax                                           
0x7e8de8b181d6    498b06                  mov rax, [r14]                                         
0x7e8de8b181d9    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181dd    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181e0    48ffce                  dec rsi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181e3    4883fe00                cmp rsi, 0x0                                           
0x7e8de8b181e7    7fd3                    jg 0xe8b181bc                 < Root.powReg4+37 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181e9    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b181ed    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b181f1    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b181f5    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b181f9    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b181fc    c3                      ret                                                    
Word_Disassemble : word - 'powReg4' :: codeSize = 102
Word : 0x00007e8de46adf29 :: Compiled at : 0x00007e8de8b18197
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 339.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.001057442 seconds

 1073741824
 =============================
Root.powReg5 <:> csl compiled word
SourceCode for Root.powReg5 :> 
: powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg5 : "namespaces/test/dev.csl" : 340.2 :: we are now at : namespaces/test/dev.csl : 343.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b18202 -- code size = 102 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg5 : definition = 0x00007e8de8b18202 : disassembly at namespaces/test/dev.csl : 343.15 :
0x7e8de8b18202    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b18206    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1820a    4981c610000000          add r14, 0x10                                          
 ..                             : powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = }  .. 
0x7e8de8b18211    498b7ff8                mov rdi, [r15-0x8]                                     
 .. ase REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18215    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1821d    4883ff00                cmp rdi, 0x0                                           
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18221    7e31                    jle 0xe8b18254                < Root.powReg5+82 >
 .. REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18223    0f1f4000                nop [r8]                                               
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18227    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b1822b    4983c608                add r14, 0x8                                           
 .. | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1822f    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18232    498b4708                mov rax, [r15+0x8]                                     
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18236    498b4ff0                mov rcx, [r15-0x10]                                    
0x7e8de8b1823a    480fafc1                imul rax, rcx                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1823e    488bc8                  mov rcx, rax                                           
0x7e8de8b18241    498b06                  mov rax, [r14]                                         
0x7e8de8b18244    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18248    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1824b    48ffcf                  dec rdi                                                
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1824e    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b18252    7fcf                    jg 0xe8b18223                 < Root.powReg5+33 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18254    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b18258    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1825c    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b18260    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18264    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b18267    c3                      ret                                                    
Word_Disassemble : word - 'powReg5' :: codeSize = 102
Word : 0x00007e8de46b1239 :: Compiled at : 0x00007e8de8b18202
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 343.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000984435 seconds

 1073741824
 =============================
Root.powReg6 <:> csl compiled word
SourceCode for Root.powReg6 :> 
: powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg6 : "namespaces/test/dev.csl" : 344.2 :: we are now at : namespaces/test/dev.csl : 346.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1826d -- code size = 101 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg6 : definition = 0x00007e8de8b1826d : disassembly at namespaces/test/dev.csl : 346.15 :
0x7e8de8b1826d    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b18271    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b18275    4981c610000000          add r14, 0x10                                          
 ..                             : powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = }  .. 
0x7e8de8b1827c    498b7ff0                mov rdi, [r15-0x10]                                    
 .. EG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18280    49c7470801000000        mov qword [r15+0x8], 0x1                               
 .. e power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18288    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1828d    7e2f                    jle 0xe8b182be                < Root.powReg6+81 >
0x7e8de8b1828f    0f1f4000                nop [r8]                                               
 ..  1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18293    498d4708                lea rax, [r15+0x8]                                     
 .. out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18297    4983c608                add r14, 0x8                                           
0x7e8de8b1829b    498906                  mov [r14], rax                                         
 ..  } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b1829e    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b182a2    480fafc7                imul rax, rdi                                          
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182a6    488bc8                  mov rcx, rax                                           
0x7e8de8b182a9    498b06                  mov rax, [r14]                                         
0x7e8de8b182ac    4983ee08                sub r14, 0x8                                           
 .. > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182b0    488908                  mov [rax], rcx                                         
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182b3    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182b7    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b182bc    7fd1                    jg 0xe8b1828f                 < Root.powReg6+34 >
 .. wer -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182be    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b182c2    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b182c6    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b182ca    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182ce    498906                  mov [r14], rax                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b182d1    c3                      ret                                                    
Word_Disassemble : word - 'powReg6' :: codeSize = 101
Word : 0x00007e8de46b4549 :: Compiled at : 0x00007e8de8b1826d
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 346.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.001794245 seconds

 1073741824
 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :> 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg7 : "namespaces/test/dev.csl" : 347.2 :: we are now at : namespaces/test/dev.csl : 349.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b182d7 -- code size = 66 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg7 : definition = 0x00007e8de8b182d7 : disassembly at namespaces/test/dev.csl : 349.20 :
0x7e8de8b182d7    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b182db    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b182df    4981c608000000          add r14, 0x8                                           
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182e6    bf01000000              mov edi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182eb    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182f0    7e17                    jle 0xe8b18309                < Root.powReg7+50 >
0x7e8de8b182f2    0f1f4000                nop [rax]                                              
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182f6    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182fa    480faff9                imul rdi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182fe    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18302    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b18307    7fe9                    jg 0xe8b182f2                 < Root.powReg7+27 >
0x7e8de8b18309    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1830d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b18311    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18315    49893e                  mov [r14], rdi                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b18318    c3                      ret                                                    
Word_Disassemble : word - 'powReg7' :: codeSize = 66
Word : 0x00007e8de46b7859 :: Compiled at : 0x00007e8de8b182d7
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 349.20 <::

 =============================
Root.powReg7 <:> csl compiled word
SourceCode for Root.powReg7 :> 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
Source code file location of powReg7 : "namespaces/test/dev.csl" : 347.2 :: we are now at : namespaces/test/dev.csl : 350.15
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b182d7 -- code size = 66 bytes
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Root.powReg7 : definition = 0x00007e8de8b182d7 : disassembly at namespaces/test/dev.csl : 350.15 :
0x7e8de8b182d7    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b182db    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b182df    4981c608000000          add r14, 0x8                                           
 .. ase power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182e6    bf01000000              mov edi, 0x1                                           
 .. wer | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182eb    49837ff800              cmp qword [r15-0x8], 0x0                               
 .. t -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182f0    7e17                    jle 0xe8b18309                < Root.powReg7+50 >
0x7e8de8b182f2    0f1f4000                nop [rax]                                              
 .. ower @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182f6    498b4ff0                mov rcx, [r15-0x10]                                    
 .. 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182fa    480faff9                imul rdi, rcx                                          
 .. ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b182fe    49ff4ff8                dec qword [r15-0x8]                                    
 ..  out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18302    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b18307    7fe9                    jg 0xe8b182f2                 < Root.powReg7+27 >
0x7e8de8b18309    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1830d    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b18311    4983ee08                sub r14, 0x8                                           
 .. } { out out @ base @ * = } for return out @ ; 
0x7e8de8b18315    49893e                  mov [r14], rdi                                         
 .. t out @ base @ * = } for return out @ ; 
0x7e8de8b18318    c3                      ret                                                    
Word_Disassemble : word - 'powReg7' :: codeSize = 66
Word : 0x00007e8de46b7859 :: Compiled at : 0x00007e8de8b182d7
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 350.15 <::

 65536

Timer [ 1 ] : elapsed time = 0.000921979 seconds


 =============================
Int.** <:> C compiled primitive, infixable
SourceCode for Int.** :> 
C Primitive
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Int.** : definition = 0x00005b343f323d10 : disassembly at namespaces/test/dev.csl : 352.10 :
0x5b343f323d10    498b3e                  mov rdi, [r14]                                         
0x5b343f323d13    498b4ef8                mov rcx, [r14-0x8]                                     
0x5b343f323d17    4c89f6                  mov rsi, r14                                           
0x5b343f323d1a    4889fa                  mov rdx, rdi                                           
0x5b343f323d1d    4889c8                  mov rax, rcx                                           
0x5b343f323d20    4883ea01                sub rdx, 0x1                                           
0x5b343f323d24    7428                    jz 0x3f323d4e                 < C compiler code >        
0x5b343f323d26    f6c201                  test dl, 0x1                                           
0x5b343f323d29    7415                    jz 0x3f323d40                 < C compiler code >        
0x5b343f323d2b    480fafc1                imul rax, rcx                                          
0x5b343f323d2f    4883ef02                sub rdi, 0x2                                           
0x5b343f323d33    4889fa                  mov rdx, rdi                                           
0x5b343f323d36    7416                    jz 0x3f323d4e                 < C compiler code >        
0x5b343f323d38    0f1f840000000000        nop [rax+rax]                                          
0x5b343f323d40    480fafc1                imul rax, rcx                                          
0x5b343f323d44    480fafc1                imul rax, rcx                                          
0x5b343f323d48    4883ea02                sub rdx, 0x2                                           
0x5b343f323d4c    75f2                    jnz 0x3f323d40                < C compiler code >        
0x5b343f323d4e    488946f8                mov [rsi-0x8], rax                                     
0x5b343f323d52    e9a99bfcff              jmp 0x5b343f2ed900            < C compiler code >        
0x5b343f323d57    660f1f840000000000      o16 nop [rax+rax]                                      
0x5b343f323d60    498b16                  mov rdx, [r14]                                         
0x5b343f323d63    4c89f1                  mov rcx, r14                                           
0x5b343f323d66    b801000000              mov eax, 0x1                                           
0x5b343f323d6b    4883fa01                cmp rdx, 0x1                                           
0x5b343f323d6f    7f07                    jg 0x3f323d78                 < C compiler code >        
0x5b343f323d71    488901                  mov [rcx], rax                                         
0x5b343f323d74    c3                      ret                                                    
Word_Disassemble : word - '**' :: codeSize = 102
Word : 0x00007e8de8c18468 :: Compiled at : 0x00005b343f323d10
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 352.10 <::

 65536

Timer [ 1 ] : elapsed time = 0.001207291 seconds


 =============================
Int.pow_03 <:> C compiled primitive, infixable
SourceCode for Int.pow_03 :> 
C Primitive
TypeSignature : Integer . Integer -> Integer 
 -----------------------------
Word :: Int.pow_03 : definition = 0x00005b343f323520 : disassembly at namespaces/test/dev.csl : 353.14 :
0x5b343f323520    498b3e                  mov rdi, [r14]                                         
0x5b343f323523    498b4ef8                mov rcx, [r14-0x8]                                     
0x5b343f323527    4c89f6                  mov rsi, r14                                           
0x5b343f32352a    4889fa                  mov rdx, rdi                                           
0x5b343f32352d    4889c8                  mov rax, rcx                                           
0x5b343f323530    4883ea01                sub rdx, 0x1                                           
0x5b343f323534    7428                    jz 0x3f32355e                 < C compiler code >        
0x5b343f323536    f6c201                  test dl, 0x1                                           
0x5b343f323539    7415                    jz 0x3f323550                 < C compiler code >        
0x5b343f32353b    480fafc1                imul rax, rcx                                          
0x5b343f32353f    4883ef02                sub rdi, 0x2                                           
0x5b343f323543    4889fa                  mov rdx, rdi                                           
0x5b343f323546    7416                    jz 0x3f32355e                 < C compiler code >        
0x5b343f323548    0f1f840000000000        nop [rax+rax]                                          
0x5b343f323550    480fafc1                imul rax, rcx                                          
0x5b343f323554    480fafc1                imul rax, rcx                                          
0x5b343f323558    4883ea02                sub rdx, 0x2                                           
0x5b343f32355c    75f2                    jnz 0x3f323550                < C compiler code >        
0x5b343f32355e    488946f8                mov [rsi-0x8], rax                                     
0x5b343f323562    e999a3fcff              jmp 0x5b343f2ed900            < C compiler code >        
0x5b343f323567    660f1f840000000000      o16 nop [rax+rax]                                      
0x5b343f323570    4155                    push r13                                               
0x5b343f323572    4989fd                  mov r13, rdi                                           
0x5b343f323575    4154                    push r12                                               
0x5b343f323577    55                      push rbp                                               
0x5b343f323578    53                      push rbx                                               
0x5b343f323579    4881ecc8000000          sub rsp, 0xc8                                          
0x5b343f323580    4883ff01                cmp rdi, 0x1                                           
0x5b343f323584    0f8ee6030000            jle 0x5b343f323970            < C compiler code >        
0x5b343f32358a    488d57ff                lea rdx, [rdi-0x1]                                     
0x5b343f32358e    4889fd                  mov rbp, rdi                                           
0x5b343f323591    4531e4                  xor r12d, r12d                                         
0x5b343f323594    4889d0                  mov rax, rdx                                           
0x5b343f323597    4889d1                  mov rcx, rdx                                           
0x5b343f32359a    4883e0fe                and rax, 0xfffffffffffffffe                              
0x5b343f32359e    4829                    invalid                                                
Word_Disassemble : word - 'pow_03' :: codeSize = 127
Word : 0x00007e8de8c187c8 :: Compiled at : 0x00005b343f323520
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 353.14 <::

 65536

Timer [ 1 ] : elapsed time = 0.001107615 seconds



Word :: C.tt : definition = 0x00007e8de8b1831e : disassembly at namespaces/test/dev.csl : 359.22 :
0x7e8de8b1831e    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b18322    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b18326    4981c610000000          add r14, 0x10                                          
 ..                      : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x7e8de8b1832d    49c7470806000000        mov qword [r15+0x8], 0x6                               
 ..                  : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x7e8de8b18335    49ff4708                inc qword [r15+0x8]                                    
 ..               : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x7e8de8b18339    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1833d    4983c608                add r14, 0x8                                           
0x7e8de8b18341    498906                  mov [r14], rax                                         
 ..           : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x7e8de8b18344    49bbe5f4afe88d7e0000    mov r11, 0x7e8de8aff4e5                                
0x7e8de8b1834e    49ffd3                  call r11                      < Int.p : 0x00007e8de8aff4e5 >
0x7e8de8b18351    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b18355    4d8b7e08                mov r15, [r14+0x8]                                     
 ..         : tt ( | t ) t 6 = t ++ t @ p ;  .. 
0x7e8de8b18359    c3                      ret                                                    
Word_Disassemble : word - 'tt' :: codeSize = 60 7 
should show 7
 =============================
C.fibPTC? <:> csl compiled word
SourceCode for C.fibPTC? :> 
: fibPTC? ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibPTC? : "namespaces/test/dev0.csl" : 158.2 :: we are now at : namespaces/test/dev.csl : 386.21
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b143f9 -- code size = 172 bytes
TypeSignature : 
 -----------------------------
Word :: C.fibPTC? : definition = 0x00007e8de8b143f9 : disassembly at namespaces/test/dev.csl : 386.21 :
0x7e8de8b143f9    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b143fd    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b14401    4981c620000000          add r14, 0x20                                          
 : fibPTC? ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =       .. 
0x7e8de8b14408    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn f .. 
0x7e8de8b14410    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 .. 
0x7e8de8b14418    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + = .. 
0x7e8de8b14420    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b14424    4883f800                cmp rax, 0x0                                           
0x7e8de8b14428    746b                    jz 0xe8b14495                 < C.fibPTC?+156 >
0x7e8de8b1442a    0f1f4000                nop [rax]                                              
0x7e8de8b1442e    498d4710                lea rax, [r15+0x10]                                    
 .. { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14432    498b4f18                mov rcx, [r15+0x18]                                    
 .. @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14436    488908                  mov [rax], rcx                                         
0x7e8de8b14439    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b1443d    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14441    488908                  mov [rax], rcx                                         
0x7e8de8b14444    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b14448    4983c608                add r14, 0x8                                           
0x7e8de8b1444c    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b1444f    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14453    498b4f18                mov rcx, [r15+0x18]                                    
0x7e8de8b14457    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b1445a    488bc8                  mov rcx, rax                                           
0x7e8de8b1445d    498b06                  mov rax, [r14]                                         
0x7e8de8b14460    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14464    488908                  mov [rax], rcx                                         
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }  .. 
0x7e8de8b14467    498d47f8                lea rax, [r15-0x8]                                     
0x7e8de8b1446b    4983c608                add r14, 0x8                                           
0x7e8de8b1446f    498906                  mov [r14], rax                                         
 ..  fn 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }    .. 
0x7e8de8b14472    498b47f8                mov rax, [r15-0x8]                                     
 .. 0 = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     fo .. 
0x7e8de8b14476    b901000000              mov ecx, 0x1                                           
0x7e8de8b1447b    482bc1                  sub rax, rcx                                           
 .. = fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for  .. 
0x7e8de8b1447e    488bc8                  mov rcx, rax                                           
0x7e8de8b14481    498b06                  mov rax, [r14]                                         
0x7e8de8b14484    4983ee08                sub r14, 0x8                                           
 .. fn1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for    .. 
0x7e8de8b14488    488908                  mov [rax], rcx                                         
 .. 1 0 = fn2 1 = } { n @ } { n n @ 1 - = }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b1448b    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1448f    4883f800                cmp rax, 0x0                                           
0x7e8de8b14493    7595                    jnz 0xe8b1442a                < C.fibPTC?+49 >
 .. fn fn1 @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b14495    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b14499    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1449d    4d8b7e08                mov r15, [r14+0x8]                                     
 .. @ fn2 @ + =      }     for     return fn @ ;  .. 
0x7e8de8b144a1    498906                  mov [r14], rax                                         
 ..  @ + =      }     for     return fn @ ;  .. 
0x7e8de8b144a4    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC?' :: codeSize = 172
Word : 0x00007e8de4575e21 :: Compiled at : 0x00007e8de8b143f9
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 386.21 <::
 6765
 =============================
C_Syntax.fibPTC2? <:> csl compiled word
SourceCode for C_Syntax.fibPTC2? :> 
int fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 ) { for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; } return fn ; } 
Source code file location of fibPTC2? : "namespaces/test/dev.csl" : 390.9 :: we are now at : namespaces/test/dev.csl : 400.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1845e -- code size = 53 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC2? : definition = 0x00007e8de8b1845e : disassembly at namespaces/test/dev.csl : 400.13 :
0x7e8de8b1845e    498b3e                  mov rdi, [r14]                                         
 .. fn, REG fn1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn .. 
0x7e8de8b18461    48c7c600000000          mov rsi, 0x0                                           
 .. n1, REG fn2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ; .. 
0x7e8de8b18468    48c7c200000000          mov rdx, 0x0                                           
 .. n2 ) {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }   .. 
0x7e8de8b1846f    b901000000              mov ecx, 0x1                                           
 ..  {     for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     r .. 
0x7e8de8b18474    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b18478    7415                    jz 0xe8b1848f                 < C_Syntax.fibPTC2?+49 >
0x7e8de8b1847a    0f1f4000                nop [rax]                                              
 ..  1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b1847e    488bd1                  mov rdx, rcx                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b18481    488bce                  mov rcx, rsi                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b18484    4803d1                  add rdx, rcx                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b18487    488bf2                  mov rsi, rdx                                           
 .. or ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn .. 
0x7e8de8b1848a    48ffcf                  dec rdi                                                
 .. ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- )      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;      }     return fn ;  .. 
0x7e8de8b1848d    75ef                    jnz 0xe8b1847e                < C_Syntax.fibPTC2?+32 >
 ..    fn = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b1848f    498936                  mov [r14], rsi                                         
 ..  = fn1 + fn2 ;      }     return fn ; }  .. 
0x7e8de8b18492    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC2?' :: codeSize = 53
Word : 0x00007e8de46c5219 :: Compiled at : 0x00007e8de8b1845e
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 400.13 <::
 6765
 13

 fibPTC? :
Timer [ 1 ] : elapsed time = 0.002458873 seconds
 :: function : fibPTC? : called on args : 1 - 23 : 1000 reps

 13

 fibPTC2? :
Timer [ 1 ] : elapsed time = 0.000612942 seconds
 :: function : fibPTC2? : called on args : 1 - 23 : 1000 reps

 =============================
C_Syntax.fibPTC4? <:> csl compiled word
SourceCode for C_Syntax.fibPTC4? :> 
int fibPTC4? ( REG n | REG fn, REG fn1, REG fn2 ) { fn = 0, fn1 = 0, fn2 = 1 ; do { fn1 = fn2 ; fn2 = fn ; fn = fn1 + fn2 ; n -- ; } while ( n > 0 ) ; return fn ; } 
Source code file location of fibPTC4? : "namespaces/test/dev.csl" : 405.9 :: we are now at : namespaces/test/dev.csl : 418.13
Compiled with : optimizeOn, inlineOn, c_syntaxOn, infixOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b184a7 -- code size = 51 bytes
TypeSignature : 
 -----------------------------
Word :: C_Syntax.fibPTC4? : definition = 0x00007e8de8b184a7 : disassembly at namespaces/test/dev.csl : 418.13 :
0x7e8de8b184a7    498b3e                  mov rdi, [r14]                                         
 .. | REG fn, REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + .. 
0x7e8de8b184aa    48c7c600000000          mov rsi, 0x0                                           
 ..  REG fn1, REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;    .. 
0x7e8de8b184b1    48c7c200000000          mov rdx, 0x0                                           
 ..  REG fn2 ) {     fn = 0, fn1 = 0, fn2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n  .. 
0x7e8de8b184b8    b901000000              mov ecx, 0x1                                           
 .. 2 = 1 ;      do      {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     .. 
0x7e8de8b184bd    488bd1                  mov rdx, rcx                                           
 ..  {            fn1 = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184c0    488bce                  mov rcx, rsi                                           
 .. ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184c3    4803d1                  add rdx, rcx                                           
 .. = fn2 ;         fn2 = fn ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184c6    488bf2                  mov rsi, rdx                                           
 .. ;         fn = fn1 + fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184c9    48ffcf                  dec rdi                                                
 .. ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184cc    4883ff00                cmp rdi, 0x0                                           
0x7e8de8b184d0    7feb                    jg 0xe8b184bd                 < C_Syntax.fibPTC4?+22 >
 .. fn2 ;          n -- ;     }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184d2    0f1f4000                nop [rax]                                              
 ..    }     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184d6    498936                  mov [r14], rsi                                         
 ..     while ( n > 0 ) ;     return fn ; }  .. 
0x7e8de8b184d9    c3                      ret                                                    
Word_Disassemble : word - 'fibPTC4?' :: codeSize = 51
Word : 0x00007e8de46cada9 :: Compiled at : 0x00007e8de8b184a7
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 418.13 <::

 13

 fibPTC4? :
Timer [ 1 ] : elapsed time = 0.000646094 seconds
 :: function : fibPTC4? : called on args : 1 - 23 : 1000 reps
 6765
 13

 cfib2_O3 :
Timer [ 1 ] : elapsed time = 0.000431835 seconds
 :: function : cfib2_O3 : called on args : 1 - 23 : 1000 reps

 =============================
User._fibn1 <:> csl compiled word
SourceCode for User._fibn1 :> 
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @ _fibn1 + } ifElse return tos ; 
Source code file location of _fibn1 : "namespaces/test/dev.csl" : 427.2 :: we are now at : namespaces/test/dev.csl : 428.20
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b184df -- code size = 115 bytes
TypeSignature : 
 -----------------------------
Word :: User._fibn1 : definition = 0x00007e8de8b184df : disassembly at namespaces/test/dev.csl : 428.20 :
0x7e8de8b184df    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b184e3    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b184e7    4981c608000000          add r14, 0x8                                           
 ..                      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x7e8de8b184ee    49837ff802              cmp qword [r15-0x8], 0x2                               
 ..              : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x7e8de8b184f3    7d14                    jge 0xe8b18509                < User._fibn1+42 >
0x7e8de8b184f5    0f1f4000                nop [rax]                                              
 ..          : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x7e8de8b184f9    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b184fd    4983c608                add r14, 0x8                                           
0x7e8de8b18501    498906                  mov [r14], rax                                         
 ..      : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x7e8de8b18504    e93d000000              jmp 0x7e8de8b18546            < User._fibn1+103 >
   : _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x7e8de8b18509    49ff4ff8                dec qword [r15-0x8]                                    
: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;  .. 
0x7e8de8b1850d    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b18511    4983c608                add r14, 0x8                                           
0x7e8de8b18515    498906                  mov [r14], rax                                         
 ..  ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x7e8de8b18518    e8c2ffffff              call 0x7e8de8b184df           < User._fibn1 : 0x00007e8de8b184df >
 .. n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x7e8de8b1851d    49ff4ff8                dec qword [r15-0x8]                                    
 ..  2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x7e8de8b18521    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b18525    4983c608                add r14, 0x8                                           
0x7e8de8b18529    498906                  mov [r14], rax                                         
 .. } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x7e8de8b1852c    e8aeffffff              call 0x7e8de8b184df           < User._fibn1 : 0x00007e8de8b184df >
0x7e8de8b18531    498b0e                  mov rcx, [r14]                                         
0x7e8de8b18534    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b18538    4983ee10                sub r14, 0x10                                          
 ..  } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ; 
0x7e8de8b1853c    4803c1                  add rax, rcx                                           
0x7e8de8b1853f    4983c608                add r14, 0x8                                           
0x7e8de8b18543    498906                  mov [r14], rax                                         
0x7e8de8b18546    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1854a    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1854e    498906                  mov [r14], rax                                         
 ..  -- n @  _fibn1 + } ifElse return tos ; 
0x7e8de8b18551    c3                      ret                                                    
Word_Disassemble : word - '_fibn1' :: codeSize = 115
Word : 0x00007e8de46d0e49 :: Compiled at : 0x00007e8de8b184df
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 428.20 <::
 6765
 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 439.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14285 -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x00007e8de8b14285 : disassembly at namespaces/test/dev.csl : 439.19 :
0x7e8de8b14285    498b06                  mov rax, [r14]                                         
0x7e8de8b14288    4983c608                add r14, 0x8                                           
0x7e8de8b1428c    498906                  mov [r14], rax                                         
0x7e8de8b1428f    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b14294    488bc8                  mov rcx, rax                                           
0x7e8de8b14297    498b06                  mov rax, [r14]                                         
0x7e8de8b1429a    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b1429e    483bc1                  cmp rax, rcx                                           
0x7e8de8b142a1    0f8d05000000            jge 0x7e8de8b142ac            < C._fib2+39 >
0x7e8de8b142a7    e94c000000              jmp 0x7e8de8b142f8            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142ac    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142af    4983c608                add r14, 0x8                                           
0x7e8de8b142b3    498906                  mov [r14], rax                                         
0x7e8de8b142b6    498b06                  mov rax, [r14]                                         
0x7e8de8b142b9    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142bd    48ffc8                  dec rax                                                
0x7e8de8b142c0    4983c608                add r14, 0x8                                           
0x7e8de8b142c4    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142c7    e8b9ffffff              call 0x7e8de8b14285           < C._fib2 : 0x00007e8de8b14285 >
0x7e8de8b142cc    498b0e                  mov rcx, [r14]                                         
0x7e8de8b142cf    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b142d3    49894ef8                mov [r14-0x8], rcx                                     
0x7e8de8b142d7    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142da    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142de    e8a2ffffff              call 0x7e8de8b14285           < C._fib2 : 0x00007e8de8b14285 >
0x7e8de8b142e3    498b0e                  mov rcx, [r14]                                         
0x7e8de8b142e6    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b142ea    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x7e8de8b142ee    4803c1                  add rax, rcx                                           
0x7e8de8b142f1    4983c608                add r14, 0x8                                           
0x7e8de8b142f5    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x7e8de8b142f8    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x00007e8de456f141 :: Compiled at : 0x00007e8de8b14285
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 439.19 <::
 6765
 6765
 =============================
User._fib3 <:> csl compiled word
SourceCode for User._fib3 :> 
: _fib3 dup 2 < ?< >:< dup -- _fib3 swap 2 - _fib3 + >; ; 
Source code file location of _fib3 : "namespaces/test/dev.csl" : 443.2 :: we are now at : namespaces/test/dev.csl : 449.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b186f1 -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: User._fib3 : definition = 0x00007e8de8b186f1 : disassembly at namespaces/test/dev.csl : 449.19 :
0x7e8de8b186f1    498b06                  mov rax, [r14]                                         
0x7e8de8b186f4    4983c608                add r14, 0x8                                           
0x7e8de8b186f8    498906                  mov [r14], rax                                         
0x7e8de8b186fb    b802000000              mov eax, 0x2                                           
 ..                      : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x7e8de8b18700    488bc8                  mov rcx, rax                                           
0x7e8de8b18703    498b06                  mov rax, [r14]                                         
0x7e8de8b18706    4983ee08                sub r14, 0x8                                           
 ..                    : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x7e8de8b1870a    483bc1                  cmp rax, rcx                                           
0x7e8de8b1870d    0f8d05000000            jge 0x7e8de8b18718            < User._fib3+39 >
 ..          : _fib3      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ;  .. 
0x7e8de8b18713    e94c000000              jmp 0x7e8de8b18764            < User._fib3+115 >
0x7e8de8b18718    498b06                  mov rax, [r14]                                         
0x7e8de8b1871b    4983c608                add r14, 0x8                                           
0x7e8de8b1871f    498906                  mov [r14], rax                                         
0x7e8de8b18722    498b06                  mov rax, [r14]                                         
0x7e8de8b18725    4983ee08                sub r14, 0x8                                           
 ..      dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b18729    48ffc8                  dec rax                                                
0x7e8de8b1872c    4983c608                add r14, 0x8                                           
0x7e8de8b18730    498906                  mov [r14], rax                                         
 ..   dup 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b18733    e8b9ffffff              call 0x7e8de8b186f1           < User._fib3 : 0x00007e8de8b186f1 >
 .. 2 <      ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b18738    498b0e                  mov rcx, [r14]                                         
0x7e8de8b1873b    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b1873f    49894ef8                mov [r14-0x8], rcx                                     
0x7e8de8b18743    498906                  mov [r14], rax                                         
 ..   ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b18746    49832e02                sub qword [r14], 0x2                                   
 .. ?< >:<          dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b1874a    e8a2ffffff              call 0x7e8de8b186f1           < User._fib3 : 0x00007e8de8b186f1 >
0x7e8de8b1874f    498b0e                  mov rcx, [r14]                                         
0x7e8de8b18752    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b18756    4983ee10                sub r14, 0x10                                          
 ..           dup -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b1875a    4803c1                  add rax, rcx                                           
0x7e8de8b1875d    4983c608                add r14, 0x8                                           
0x7e8de8b18761    498906                  mov [r14], rax                                         
 .. up -- _fib3 swap 2 - _fib3 +      >;  ; 
0x7e8de8b18764    c3                      ret                                                    
Word_Disassemble : word - '_fib3' :: codeSize = 116
Word : 0x00007e8de46d9119 :: Compiled at : 0x00007e8de8b186f1
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 449.19 <::
 6765
 =============================
User._fib4 <:> csl compiled word
SourceCode for User._fib4 :> 
: _fib4 { dup 2 >= } { dup -- _fib4 swap 2 - _fib4 + } if2 ; 
Source code file location of _fib4 : "namespaces/test/dev.csl" : 451.2 :: we are now at : namespaces/test/dev.csl : 457.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b18779 -- code size = 105 bytes
TypeSignature : 
 -----------------------------
Word :: User._fib4 : definition = 0x00007e8de8b18779 : disassembly at namespaces/test/dev.csl : 457.19 :
 ..  dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b18779    498b06                  mov rax, [r14]                                         
0x7e8de8b1877c    4983c608                add r14, 0x8                                           
0x7e8de8b18780    498906                  mov [r14], rax                                         
0x7e8de8b18783    b802000000              mov eax, 0x2                                           
 ..                    : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x7e8de8b18788    488bc8                  mov rcx, rax                                           
0x7e8de8b1878b    498b06                  mov rax, [r14]                                         
0x7e8de8b1878e    4983ee08                sub r14, 0x8                                           
 ..                  : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x7e8de8b18792    483bc1                  cmp rax, rcx                                           
 ..               : _fib4      { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ;  .. 
0x7e8de8b18795    7c4a                    jl 0xe8b187e1                 < User._fib4+104 >
0x7e8de8b18797    0f1f4000                nop [r8]                                               
0x7e8de8b1879b    498b06                  mov rax, [r14]                                         
0x7e8de8b1879e    4983c608                add r14, 0x8                                           
0x7e8de8b187a2    4983ee08                sub r14, 0x8                                           
 ..       { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187a6    48ffc8                  dec rax                                                
0x7e8de8b187a9    4983c608                add r14, 0x8                                           
0x7e8de8b187ad    498906                  mov [r14], rax                                         
 ..    { dup 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187b0    e8c4ffffff              call 0x7e8de8b18779           < User._fib4 : 0x00007e8de8b18779 >
 .. up 2 >= }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187b5    498b0e                  mov rcx, [r14]                                         
0x7e8de8b187b8    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b187bc    49894ef8                mov [r14-0x8], rcx                                     
0x7e8de8b187c0    498906                  mov [r14], rax                                         
 ..  }     {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187c3    49832e02                sub qword [r14], 0x2                                   
 ..      {          dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187c7    e8adffffff              call 0x7e8de8b18779           < User._fib4 : 0x00007e8de8b18779 >
0x7e8de8b187cc    498b0e                  mov rcx, [r14]                                         
0x7e8de8b187cf    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b187d3    4983ee10                sub r14, 0x10                                          
 ..           dup -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187d7    4803c1                  add rax, rcx                                           
0x7e8de8b187da    4983c608                add r14, 0x8                                           
0x7e8de8b187de    498906                  mov [r14], rax                                         
 .. -- _fib4 swap 2 - _fib4 +      } if2  ; 
0x7e8de8b187e1    c3                      ret                                                    
Word_Disassemble : word - '_fib4' :: codeSize = 105
Word : 0x00007e8de46da559 :: Compiled at : 0x00007e8de8b18779
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 457.19 <::
 6765
 =============================
C.cfib2_O3 <:> C compiled primitive
SourceCode for C.cfib2_O3 :> 
C Primitive
 -----------------------------
Word :: C.cfib2_O3 : definition = 0x00005b343f323a60 : disassembly at namespaces/test/dev.csl : 467.21 :
0x5b343f323a60    498b06                  mov rax, [r14]                                         
0x5b343f323a63    4c89f7                  mov rdi, r14                                           
0x5b343f323a66    4885c0                  test rax, rax                                          
0x5b343f323a69    742d                    jz 0x3f323a98                 < C compiler code >        
0x5b343f323a6b    b901000000              mov ecx, 0x1                                           
0x5b343f323a70    31d2                    xor edx, edx                                           
0x5b343f323a72    eb0f                    jmp 0x5b343f323a83            < C compiler code >        
0x5b343f323a74    66662e0f1f840000000000  o16 nop [cs:rax+rax]                                   
0x5b343f323a7f    90                      nop                                                    
0x5b343f323a80    4889f2                  mov rdx, rsi                                           
0x5b343f323a83    488d340a                lea rsi, [rdx+rcx]                                     
0x5b343f323a87    4889d1                  mov rcx, rdx                                           
0x5b343f323a8a    4883e801                sub rax, 0x1                                           
0x5b343f323a8e    75f0                    jnz 0x3f323a80                < C compiler code >        
0x5b343f323a90    488937                  mov [rdi], rsi                                         
0x5b343f323a93    c3                      ret                                                    
Word_Disassemble : word - 'cfib2_O3' :: codeSize = 53
Word : 0x00007e8de8c09788 :: Compiled at : 0x00005b343f323a60
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 467.21 <::

 0x00007e8de7910ae0
 The fibonacci sequence 15 :
 C -O3 :  610
Timer [ 1 ] : elapsed time = 0.000007464 seconds

 no locals fib  :  610
Timer [ 1 ] : elapsed time = 0.000010550 seconds

 locals fib1    :  610
Timer [ 1 ] : elapsed time = 0.000010770 seconds

 no locals fib2 :  610
Timer [ 1 ] : elapsed time = 0.000010539 seconds

 no locals fib3 :  610
Timer [ 1 ] : elapsed time = 0.000008646 seconds

 fibPTC?        :  610
Timer [ 1 ] : elapsed time = 0.000005951 seconds

 fibPTC2?       :  610
Timer [ 1 ] : elapsed time = 0.000004598 seconds


 0x00007e8de7910ae0
 The fibonacci sequence 30 :
 C -O3 :  832040
Timer [ 1 ] : elapsed time = 0.001319971 seconds

 no locals fib  :  832040
Timer [ 1 ] : elapsed time = 0.005315130 seconds

 locals fib1    :  832040
Timer [ 1 ] : elapsed time = 0.005988825 seconds

 no locals fib2 :  832040
Timer [ 1 ] : elapsed time = 0.005360935 seconds

 no locals fib3 :  832040
Timer [ 1 ] : elapsed time = 0.005340176 seconds

 fibPTC?        :  832040
Timer [ 1 ] : elapsed time = 0.000006252 seconds

 fibPTC2?       :  832040
Timer [ 1 ] : elapsed time = 0.000006822 seconds


DataStack at : namespaces/test/dev.csl : 492.6 :
DataStack depth =   3 : Dsp (R14) = Top = 0x00007e8de7910ad0, InitialTos = 0x00007e8de7910ab8, Size = 0x0000000000002000
  DataStack   [   0 ] < 0x00007e8de7910ad0 > = 0x0000000000000005
  DataStack   [  -1 ] < 0x00007e8de7910ac8 > = 0x0000000000000005
  DataStack   [  -2 ] < 0x00007e8de7910ac0 > = 0x0000000000000005

 =============================
Interpreter.tfib3 <:> csl compiled word
SourceCode for Interpreter.tfib3 :> 
: tfib3 ( n | m ) "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl "Cfib2_O3 : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ; 
Source code file location of tfib3 : "namespaces/test/dev.csl" : 515.2 :: we are now at : namespaces/test/dev.csl : 521.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b19e92 -- code size = 908 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.tfib3 : definition = 0x00007e8de8b19e92 : disassembly at namespaces/test/dev.csl : 521.19 :
0x7e8de8b19e92    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b19e96    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b19e9a    4981c610000000          add r14, 0x10                                          
0x7e8de8b19ea1    48b8a7c183e88d7e0000    mov rax, 0x7e8de883c1a7       < string : 'Cfib2_O3       : ' >
0x7e8de8b19eab    4983c608                add r14, 0x8                                           
0x7e8de8b19eaf    498906                  mov [r14], rax                                         
 .. 3 ( n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps  .. 
0x7e8de8b19eb2    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b19ebc    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 ..  n | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 t .. 
0x7e8de8b19ebf    b801000000              mov eax, 0x1                                           
0x7e8de8b19ec4    4983c608                add r14, 0x8                                           
0x7e8de8b19ec8    498906                  mov [r14], rax                                         
 ..  | m )       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti  .. 
0x7e8de8b19ecb    49bb0e05b0e88d7e0000    mov r11, 0x7e8de8b0050e                                
0x7e8de8b19ed5    49ffd3                  call r11                      < System.ti : 0x00007e8de8b0050e >
 ..       "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { .. 
0x7e8de8b19ed8    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ .. 
0x7e8de8b19ee0    498b4708                mov rax, [r15+0x8]                                     
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ .. 
0x7e8de8b19ee4    498b4ff8                mov rcx, [r15-0x8]                                     
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x7e8de8b19ee8    483bc1                  cmp rax, rcx                                           
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x7e8de8b19eeb    7f44                    jg 0xe8b19f31                 < Interpreter.tfib3+159 >
0x7e8de8b19eed    0f1f4000                nop [rax]                                              
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x7e8de8b19ef1    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b19ef5    4983c608                add r14, 0x8                                           
0x7e8de8b19ef9    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fib .. 
0x7e8de8b19efc    49ba603a323f345b0000    mov r10, 0x5b343f323a60                                
0x7e8de8b19f06    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b19f10    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m  .. 
0x7e8de8b19f13    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b19f1d    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } .. 
0x7e8de8b19f20    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } wh .. 
0x7e8de8b19f24    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b19f28    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b19f2c    483bc1                  cmp rax, rcx                                           
0x7e8de8b19f2f    7ec0                    jle 0xe8b19ef1                < Interpreter.tfib3+95 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 ti .. 
0x7e8de8b19f31    b801000000              mov eax, 0x1                                           
0x7e8de8b19f36    4983c608                add r14, 0x8                                           
0x7e8de8b19f3a    498906                  mov [r14], rax                                         
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time .. 
0x7e8de8b19f3d    49bab0f3313f345b0000    mov r10, 0x5b343f31f3b0                                
0x7e8de8b19f47    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b19f51    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl n .. 
0x7e8de8b19f54    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b19f5e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b19f68    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl   .. 
0x7e8de8b19f6b    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b19f75    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b19f7f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b19f82    48b8e7c183e88d7e0000    mov rax, 0x7e8de883c1e7       < string : 'locals fibPTC? : ' >
0x7e8de8b19f8c    4983c608                add r14, 0x8                                           
0x7e8de8b19f90    498906                  mov [r14], rax                                         
 ..  1 time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps  .. 
0x7e8de8b19f93    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b19f9d    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. time nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 t .. 
0x7e8de8b19fa0    b801000000              mov eax, 0x1                                           
0x7e8de8b19fa5    4983c608                add r14, 0x8                                           
0x7e8de8b19fa9    498906                  mov [r14], rax                                         
 .. me nl nl     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti  .. 
0x7e8de8b19fac    49bb0e05b0e88d7e0000    mov r11, 0x7e8de8b0050e                                
0x7e8de8b19fb6    49ffd3                  call r11                      < System.ti : 0x00007e8de8b0050e >
 .. l     "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { .. 
0x7e8de8b19fb9    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ .. 
0x7e8de8b19fc1    498b4708                mov rax, [r15+0x8]                                     
 .. ocals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ .. 
0x7e8de8b19fc5    498b4ff8                mov rcx, [r15-0x8]                                     
 .. s fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x7e8de8b19fc9    483bc1                  cmp rax, rcx                                           
 .. ibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x7e8de8b19fcc    7f3a                    jg 0xe8b1a008                 < Interpreter.tfib3+374 >
0x7e8de8b19fce    0f1f4000                nop [rax]                                              
 .. C? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x7e8de8b19fd2    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b19fd6    4983c608                add r14, 0x8                                           
0x7e8de8b19fda    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fib .. 
0x7e8de8b19fdd    49bbf943b1e88d7e0000    mov r11, 0x7e8de8b143f9                                
0x7e8de8b19fe7    49ffd3                  call r11                      < C.fibPTC? : 0x00007e8de8b143f9 >
 .. ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p  .. 
0x7e8de8b19fea    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b19ff4    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 ..  1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ .. 
0x7e8de8b19ff7    49ff4708                inc qword [r15+0x8]                                    
 .. = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ }  .. 
0x7e8de8b19ffb    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b19fff    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b1a003    483bc1                  cmp rax, rcx                                           
0x7e8de8b1a006    7eca                    jle 0xe8b19fd2                < Interpreter.tfib3+320 >
 .. n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1  .. 
0x7e8de8b1a008    b801000000              mov eax, 0x1                                           
0x7e8de8b1a00d    4983c608                add r14, 0x8                                           
0x7e8de8b1a011    498906                  mov [r14], rax                                         
 .. @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 ti .. 
0x7e8de8b1a014    49bab0f3313f345b0000    mov r10, 0x5b343f31f3b0                                
0x7e8de8b1a01e    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a028    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. } { m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl .. 
0x7e8de8b1a02b    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1a035    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a03f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  m @ fibPTC? p m ++ } while 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl .. 
0x7e8de8b1a042    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1a04c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a056    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b1a059    48b828c283e88d7e0000    mov rax, 0x7e8de883c228       < string : 'locals fibPTC2? : ' >
0x7e8de8b1a063    4983c608                add r14, 0x8                                           
0x7e8de8b1a067    498906                  mov [r14], rax                                         
 .. 1 time nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps  .. 
0x7e8de8b1a06a    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1a074    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. ime nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 t .. 
0x7e8de8b1a077    b801000000              mov eax, 0x1                                           
0x7e8de8b1a07c    4983c608                add r14, 0x8                                           
0x7e8de8b1a080    498906                  mov [r14], rax                                         
 .. e nl nl     "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti  .. 
0x7e8de8b1a083    49bb0e05b0e88d7e0000    mov r11, 0x7e8de8b0050e                                
0x7e8de8b1a08d    49ffd3                  call r11                      < System.ti : 0x00007e8de8b0050e >
 ..      "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { .. 
0x7e8de8b1a090    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..  "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ .. 
0x7e8de8b1a098    498b4708                mov rax, [r15+0x8]                                     
 .. cals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ .. 
0x7e8de8b1a09c    498b4ff8                mov rcx, [r15-0x8]                                     
 ..  fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <=  .. 
0x7e8de8b1a0a0    483bc1                  cmp rax, rcx                                           
 .. bPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { .. 
0x7e8de8b1a0a3    7f3a                    jg 0xe8b1a0df                 < Interpreter.tfib3+589 >
0x7e8de8b1a0a5    0f1f4000                nop [rax]                                              
 .. 2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ .. 
0x7e8de8b1a0a9    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a0ad    4983c608                add r14, 0x8                                           
0x7e8de8b1a0b1    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfi .. 
0x7e8de8b1a0b4    49bb5e84b1e88d7e0000    mov r11, 0x7e8de8b1845e                                
0x7e8de8b1a0be    49ffd3                  call r11                      < C_Syntax.fibPTC2? : 0x00007e8de8b1845e >
 .. i m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m .. 
0x7e8de8b1a0c1    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b1a0cb    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++  .. 
0x7e8de8b1a0ce    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } w .. 
0x7e8de8b1a0d2    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a0d6    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b1a0da    483bc1                  cmp rax, rcx                                           
0x7e8de8b1a0dd    7eca                    jle 0xe8b1a0a9                < Interpreter.tfib3+535 >
 ..  @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 t .. 
0x7e8de8b1a0df    b801000000              mov eax, 0x1                                           
0x7e8de8b1a0e4    4983c608                add r14, 0x8                                           
0x7e8de8b1a0e8    498906                  mov [r14], rax                                         
 ..  <= } { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 tim .. 
0x7e8de8b1a0eb    49bab0f3313f345b0000    mov r10, 0x5b343f31f3b0                                
0x7e8de8b1a0f5    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a0ff    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  { m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl  .. 
0x7e8de8b1a102    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1a10c    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a116    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. m @ fibPTC2? p m ++ } while 1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl  .. 
0x7e8de8b1a119    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1a123    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a12d    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b1a130    48b86ac283e88d7e0000    mov rax, 0x7e8de883c26a       < string : 'Cfib2_O3       : ' >
0x7e8de8b1a13a    4983c608                add r14, 0x8                                           
0x7e8de8b1a13e    498906                  mov [r14], rax                                         
 ..  1 time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a141    49bb1ef4afe88d7e0000    mov r11, 0x7e8de8aff41e                                
0x7e8de8b1a14b    49ffd3                  call r11                      < Int.ps : 0x00007e8de8aff41e >
 .. time nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a14e    b801000000              mov eax, 0x1                                           
0x7e8de8b1a153    4983c608                add r14, 0x8                                           
0x7e8de8b1a157    498906                  mov [r14], rax                                         
 .. me nl nl     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a15a    49bb0e05b0e88d7e0000    mov r11, 0x7e8de8b0050e                                
0x7e8de8b1a164    49ffd3                  call r11                      < System.ti : 0x00007e8de8b0050e >
 .. l     "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a167    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..   "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a16f    498b4708                mov rax, [r15+0x8]                                     
 .. fib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a173    498b4ff8                mov rcx, [r15-0x8]                                     
 .. _O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a177    483bc1                  cmp rax, rcx                                           
 ..        : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a17a    7f44                    jg 0xe8b1a1c0                 < Interpreter.tfib3+814 >
0x7e8de8b1a17c    0f1f4000                nop [rax]                                              
 ..    : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a180    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a184    4983c608                add r14, 0x8                                           
0x7e8de8b1a188    498906                  mov [r14], rax                                         
 ..  " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a18b    49ba603a323f345b0000    mov r10, 0x5b343f323a60                                
0x7e8de8b1a195    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a19f    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. i m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1a2    49bbd0f6afe88d7e0000    mov r11, 0x7e8de8aff6d0                                
0x7e8de8b1a1ac    49ffd3                  call r11                      < User.p : 0x00007e8de8aff6d0 >
 .. 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1af    49ff4708                inc qword [r15+0x8]                                    
 ..  { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1b3    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a1b7    498b4ff8                mov rcx, [r15-0x8]                                     
0x7e8de8b1a1bb    483bc1                  cmp rax, rcx                                           
0x7e8de8b1a1be    7ec0                    jle 0xe8b1a180                < Interpreter.tfib3+750 >
 ..  @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1c0    b801000000              mov eax, 0x1                                           
0x7e8de8b1a1c5    4983c608                add r14, 0x8                                           
0x7e8de8b1a1c9    498906                  mov [r14], rax                                         
 ..  <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1cc    49bab0f3313f345b0000    mov r10, 0x5b343f31f3b0                                
0x7e8de8b1a1d6    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a1e0    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 ..  { m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1e3    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1a1ed    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a1f7    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
 .. m @ cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a1fa    49bac0d6313f345b0000    mov r10, 0x5b343f31d6c0                                
0x7e8de8b1a204    49bb32c77fe78d7e0000    mov r11, 0x7e8de77fc732                                
0x7e8de8b1a20e    49ffd3                  call r11                      < System.call_ToAddressThruSREG_TestAlignRSP : 0x00007e8de77fc732 >
0x7e8de8b1a211    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1a215    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1a219    4983ee08                sub r14, 0x8                                           
 ..  cfib2_O3 p m ++ } while 1 time nl nl ;  .. 
0x7e8de8b1a21d    c3                      ret                                                    
Word_Disassemble : word - 'tfib3' :: codeSize = 908
Word : 0x00007e8de471b219 :: Compiled at : 0x00007e8de8b19e92
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 521.19 <::

 The fibonacci sequence:: first : 30 ...
 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002286873 seconds


 Cfib            :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002279430 seconds


 Cfib_O3         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002302694 seconds


 no locals _fib  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008832627 seconds


 locals   _fibn0 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009918833 seconds


 locals   _fibn1 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009759385 seconds


 locals   _fib1  :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.011472158 seconds


 no locals _fib2 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008873304 seconds


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008850180 seconds


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.007699354 seconds


 fibPTC?         :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000160790 seconds


 fibPTC2?        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.000144029 seconds


 Cfib_O3        :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.002272276 seconds


 no locals _fib4 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.007682373 seconds


 locals _fibn1   :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.009780924 seconds


 no locals _fib3 :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229
Timer [ 1 ] : elapsed time = 0.008828741 seconds


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000518676 seconds


 locals fibPTC? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000531511 seconds


 locals fibPTC2? :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000524368 seconds


 Cfib2_O3       :  1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429
Timer [ 1 ] : elapsed time = 0.000528355 seconds



 =============================
C._fib2 <:> csl compiled word
SourceCode for C._fib2 :> 
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
Source code file location of _fib2 : "namespaces/test/dev0.csl" : 147.2 :: we are now at : namespaces/test/dev.csl : 531.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b14285 -- code size = 116 bytes
TypeSignature : 
 -----------------------------
Word :: C._fib2 : definition = 0x00007e8de8b14285 : disassembly at namespaces/test/dev.csl : 531.19 :
0x7e8de8b14285    498b06                  mov rax, [r14]                                         
0x7e8de8b14288    4983c608                add r14, 0x8                                           
0x7e8de8b1428c    498906                  mov [r14], rax                                         
0x7e8de8b1428f    b802000000              mov eax, 0x2                                           
 ..                           : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b14294    488bc8                  mov rcx, rax                                           
0x7e8de8b14297    498b06                  mov rax, [r14]                                         
0x7e8de8b1429a    4983ee08                sub r14, 0x8                                           
 ..                         : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b1429e    483bc1                  cmp rax, rcx                                           
0x7e8de8b142a1    0f8d05000000            jge 0x7e8de8b142ac            < C._fib2+39 >
0x7e8de8b142a7    e94c000000              jmp 0x7e8de8b142f8            < C._fib2+115 >
 ..                   : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142ac    498b06                  mov rax, [r14]                                         
 ..                       : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142af    4983c608                add r14, 0x8                                           
0x7e8de8b142b3    498906                  mov [r14], rax                                         
0x7e8de8b142b6    498b06                  mov rax, [r14]                                         
0x7e8de8b142b9    4983ee08                sub r14, 0x8                                           
 ..               : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142bd    48ffc8                  dec rax                                                
0x7e8de8b142c0    4983c608                add r14, 0x8                                           
0x7e8de8b142c4    498906                  mov [r14], rax                                         
 ..            : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142c7    e8b9ffffff              call 0x7e8de8b14285           < C._fib2 : 0x00007e8de8b14285 >
0x7e8de8b142cc    498b0e                  mov rcx, [r14]                                         
0x7e8de8b142cf    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b142d3    49894ef8                mov [r14-0x8], rcx                                     
0x7e8de8b142d7    498906                  mov [r14], rax                                         
  : _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142da    49832e02                sub qword [r14], 0x2                                   
: _fib2 dup 2 < ? : dup -- _fib2 swap 2 - _fib2 + ;  .. 
0x7e8de8b142de    e8a2ffffff              call 0x7e8de8b14285           < C._fib2 : 0x00007e8de8b14285 >
0x7e8de8b142e3    498b0e                  mov rcx, [r14]                                         
0x7e8de8b142e6    498b46f8                mov rax, [r14-0x8]                                     
0x7e8de8b142ea    4983ee10                sub r14, 0x10                                          
 .. p 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x7e8de8b142ee    4803c1                  add rax, rcx                                           
0x7e8de8b142f1    4983c608                add r14, 0x8                                           
0x7e8de8b142f5    498906                  mov [r14], rax                                         
 .. 2 < ? : dup -- _fib2 swap 2 - _fib2 + ; 
0x7e8de8b142f8    c3                      ret                                                    
Word_Disassemble : word - '_fib2' :: codeSize = 116
Word : 0x00007e8de456f141 :: Compiled at : 0x00007e8de8b14285
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 531.19 <::
 9
 should be 9
 =============================
Interpreter.fibBN <:> csl compiled word
SourceCode for Interpreter.fibBN :> 
: fibBN ( n | fn fn1 fn2 ) { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } { fn1 fn2 @ = fn2 fn @ = fn fn1 @ fn2 @ + = } for return fn @ ; 
Source code file location of fibBN : "namespaces/test/dev.csl" : 538.2 :: we are now at : namespaces/test/dev.csl : 549.19
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1a280 -- code size = 135 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter.fibBN : definition = 0x00007e8de8b1a280 : disassembly at namespaces/test/dev.csl : 549.19 :
0x7e8de8b1a280    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1a284    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1a288    4981c620000000          add r14, 0x20                                          
   : fibBN ( n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =        .. 
0x7e8de8b1a28f    49c7470800000000        mov qword [r15+0x8], 0x0                               
 ..  n | fn fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn .. 
0x7e8de8b1a297    49c7471000000000        mov qword [r15+0x10], 0x0                              
 .. fn1 fn2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2  .. 
0x7e8de8b1a29f    49c7471801000000        mov qword [r15+0x18], 0x1                              
 .. 2 )      { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =  .. 
0x7e8de8b1a2a7    49837ff800              cmp qword [r15-0x8], 0x0                               
 ..  { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }   .. 
0x7e8de8b1a2ac    7e49                    jle 0xe8b1a2f7                < Interpreter.fibBN+119 >
0x7e8de8b1a2ae    0f1f4000                nop [rax]                                              
0x7e8de8b1a2b2    498d4710                lea rax, [r15+0x10]                                    
 ..  > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2b6    498b4f18                mov rcx, [r15+0x18]                                    
 ..  n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2ba    488908                  mov [rax], rcx                                         
0x7e8de8b1a2bd    498d4718                lea rax, [r15+0x18]                                    
 .. {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2c1    498b4f08                mov rcx, [r15+0x8]                                     
 ..         fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2c5    488908                  mov [rax], rcx                                         
0x7e8de8b1a2c8    498d4708                lea rax, [r15+0x8]                                     
0x7e8de8b1a2cc    4983c608                add r14, 0x8                                           
0x7e8de8b1a2d0    498906                  mov [r14], rax                                         
 .. 2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2d3    498b4710                mov rax, [r15+0x10]                                    
 ..          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2d7    498b4f18                mov rcx, [r15+0x18]                                    
0x7e8de8b1a2db    4803c1                  add rax, rcx                                           
 ..    fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2de    488bc8                  mov rcx, rax                                           
0x7e8de8b1a2e1    498b06                  mov rax, [r14]                                         
0x7e8de8b1a2e4    4983ee08                sub r14, 0x8                                           
 ..  fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2e8    488908                  mov [rax], rcx                                         
 .. n 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     f .. 
0x7e8de8b1a2eb    49836ff801              sub qword [r15-0x8], 0x1                               
 .. n1 0 = fn2 1 = } { n @ 0 > } { n 1 -= }      {            fn1 fn2 @ =          fn2 fn @ =          fn fn1 @ fn2 @ + =      }     for      .. 
0x7e8de8b1a2f0    49837ff800              cmp qword [r15-0x8], 0x0                               
0x7e8de8b1a2f5    7fb7                    jg 0xe8b1a2ae                 < Interpreter.fibBN+46 >
 .. fn1 @ fn2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a2f7    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a2fb    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1a2ff    4d8b7e08                mov r15, [r14+0x8]                                     
 .. n2 @ + =      }     for        return fn @ ;  .. 
0x7e8de8b1a303    498906                  mov [r14], rax                                         
 .. + =      }     for        return fn @ ;  .. 
0x7e8de8b1a306    c3                      ret                                                    
Word_Disassemble : word - 'fibBN' :: codeSize = 135
Word : 0x00007e8de47291b9 :: Compiled at : 0x00007e8de8b1a280
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 549.19 <::
 6765

 locals fibBN :  1 :  1, 2 :  1, 3 :  2, 4 :  3, 5 :  5, 6 :  8, 7 :  13, 8 :  21, 9 :  34, 10 :  55, 11 :  89, 12 :  144, 13 :  233, 14 :  377, 15 :  610, 16 :  987, 17 :  1597, 18 :  2584, 19 :  4181, 20 :  6765, 21 :  10946, 22 :  17711, 23 :  28657, 24 :  46368, 25 :  75025, 26 :  121393, 27 :  196418, 28 :  317811, 29 :  514229, 30 :  832040, 31 :  1346269, 32 :  2178309, 33 :  3524578, 34 :  5702887, 35 :  9227465, 36 :  14930352, 37 :  24157817, 38 :  39088169, 39 :  63245986, 40 :  102334155, 41 :  165580141, 42 :  267914296, 43 :  433494437, 44 :  701408733, 45 :  1134903170, 46 :  1836311903, 47 :  2971215073, 48 :  4807526976, 49 :  7778742049, 50 :  12586269025, 51 :  20365011074, 52 :  32951280099, 53 :  53316291173, 54 :  86267571272, 55 :  139583862445, 56 :  225851433717, 57 :  365435296162, 58 :  591286729879, 59 :  956722026041, 60 :  1548008755920, 61 :  2504730781961, 62 :  4052739537881, 63 :  6557470319842, 64 :  10610209857723, 65 :  17167680177565, 66 :  27777890035288, 67 :  44945570212853, 68 :  72723460248141, 69 :  117669030460994, 70 :  190392490709135, 71 :  308061521170129, 72 :  498454011879264, 73 :  806515533049393, 74 :  1304969544928657, 75 :  2111485077978050, 76 :  3416454622906707, 77 :  5527939700884757, 78 :  8944394323791464, 79 :  14472334024676221, 80 :  23416728348467685, 81 :  37889062373143906, 82 :  61305790721611591, 83 :  99194853094755497, 84 :  160500643816367088, 85 :  259695496911122585, 86 :  420196140727489673, 87 :  679891637638612258, 88 :  1100087778366101931, 89 :  1779979416004714189, 90 :  2880067194370816120, 91 :  4660046610375530309, 92 :  7540113804746346429
 92 7540113804746346429 6765 ok
 =============================
Interpreter._ifx <:> csl compiled word
SourceCode for Interpreter._ifx :> 
: _ifx ( w | j ) { j 1 = } { j @ reps0 @ <= } { j ++ } { j @ w @ wrun drop } for ; 
Source code file location of _ifx : "namespaces/test/dev.csl" : 564.2 :: we are now at : namespaces/test/dev.csl : 575.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1a491 -- code size = 127 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._ifx : definition = 0x00007e8de8b1a491 : disassembly at namespaces/test/dev.csl : 575.9 :
0x7e8de8b1a491    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1a495    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1a499    4981c610000000          add r14, 0x10                                          
 ..            : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     fo .. 
0x7e8de8b1a4a0    49c7470801000000        mov qword [r15+0x8], 0x1                               
 ..      : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  .. 
0x7e8de8b1a4a8    498b4708                mov rax, [r15+0x8]                                     
 ..  : _ifx ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ;  .. 
0x7e8de8b1a4ac    48b949ef67e48d7e0000    mov rcx, 0x7e8de467ef49                                
0x7e8de8b1a4b6    488b09                  mov rcx, [rcx]                                         
 .. ( w | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4b9    483bc1                  cmp rax, rcx                                           
 ..  | j )     { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4bc    7f45                    jg 0xe8b1a503                 < Interpreter._ifx+114 >
0x7e8de8b1a4be    0f1f4000                nop [rax]                                              
0x7e8de8b1a4c2    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a4c6    4983c608                add r14, 0x8                                           
0x7e8de8b1a4ca    498906                  mov [r14], rax                                         
 .. }      {                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4cd    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1a4d1    4983c608                add r14, 0x8                                           
0x7e8de8b1a4d5    498906                  mov [r14], rax                                         
 ..    {                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4d8    49bb47cd7fe78d7e0000    mov r11, 0x7e8de77fcd47                                
0x7e8de8b1a4e2    49ffd3                  call r11                      < System.wrun : 0x00007e8de77fcd47 >
 ..                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4e5    4983ee08                sub r14, 0x8                                           
 ..      { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4e9    49ff4708                inc qword [r15+0x8]                                    
 ..   { j 1 = } { j @ reps0 @ <= } { j ++ }      {                          j @ w @ wrun drop          }     for ; 
0x7e8de8b1a4ed    498b4708                mov rax, [r15+0x8]                                     
0x7e8de8b1a4f1    48b949ef67e48d7e0000    mov rcx, 0x7e8de467ef49                                
0x7e8de8b1a4fb    488b09                  mov rcx, [rcx]                                         
0x7e8de8b1a4fe    483bc1                  cmp rax, rcx                                           
0x7e8de8b1a501    7ebb                    jle 0xe8b1a4be                < Interpreter._ifx+45 >
0x7e8de8b1a503    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1a507    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1a50b    4983ee08                sub r14, 0x8                                           
 ..  j @ w @ wrun drop          }     for ; 
0x7e8de8b1a50f    c3                      ret                                                    
Word_Disassemble : word - '_ifx' :: codeSize = 127
Word : 0x00007e8de47337f9 :: Compiled at : 0x00007e8de8b1a491
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 575.9 <::

 =============================
Interpreter._ffx <:> csl compiled word
SourceCode for Interpreter._ffx :> 
: _ffx ( n w ) { n @ 0 > } { reps @ w @ ifx n -- } while ; 
Source code file location of _ffx : "namespaces/test/dev.csl" : 580.2 :: we are now at : namespaces/test/dev.csl : 585.9
Compiled with : optimizeOn, inlineOn, Jcc8 off : Word Source Code on
Debug Source Code on : BigNum off : Lisp off
starting at address : 0xe8b1a578 -- code size = 94 bytes
TypeSignature : 
 -----------------------------
Word :: Interpreter._ffx : definition = 0x00007e8de8b1a578 : disassembly at namespaces/test/dev.csl : 585.9 :
0x7e8de8b1a578    4d897e08                mov [r14+0x8], r15                                     
0x7e8de8b1a57c    4d8d7e08                lea r15, [r14+0x8]                                     
0x7e8de8b1a580    4981c608000000          add r14, 0x8                                           
 ..                 : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x7e8de8b1a587    49837ff000              cmp qword [r15-0x10], 0x0                              
 ..         : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x7e8de8b1a58c    7e3b                    jle 0xe8b1a5c9                < Interpreter._ffx+81 >
0x7e8de8b1a58e    0f1f4000                nop [rax]                                              
   : _ffx ( n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ;  .. 
0x7e8de8b1a592    48b859ac68e48d7e0000    mov rax, 0x7e8de468ac59                                
0x7e8de8b1a59c    488b00                  mov rax, [rax]                                         
0x7e8de8b1a59f    4983c608                add r14, 0x8                                           
0x7e8de8b1a5a3    498906                  mov [r14], rax                                         
 ..  n w )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x7e8de8b1a5a6    498b47f8                mov rax, [r15-0x8]                                     
0x7e8de8b1a5aa    4983c608                add r14, 0x8                                           
0x7e8de8b1a5ae    498906                  mov [r14], rax                                         
 ..  )      { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x7e8de8b1a5b1    49bb15a5b1e88d7e0000    mov r11, 0x7e8de8b1a515                                
0x7e8de8b1a5bb    49ffd3                  call r11                      < Interpreter.ifx : 0x00007e8de8b1a515 >
 ..   { n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x7e8de8b1a5be    49ff4ff0                dec qword [r15-0x10]                                   
 ..  n @ 0 > }      { reps @ w @ ifx n -- }       while ; 
0x7e8de8b1a5c2    49837ff000              cmp qword [r15-0x10], 0x0                              
0x7e8de8b1a5c7    7fc9                    jg 0xe8b1a592                 < Interpreter._ffx+26 >
0x7e8de8b1a5c9    4d8d77f8                lea r14, [r15-0x8]                                     
0x7e8de8b1a5cd    4d8b7e08                mov r15, [r14+0x8]                                     
0x7e8de8b1a5d1    4983ee10                sub r14, 0x10                                          
 ..   { reps @ w @ ifx n -- }       while ; 
0x7e8de8b1a5d5    c3                      ret                                                    
Word_Disassemble : word - '_ffx' :: codeSize = 94
Word : 0x00007e8de47395a9 :: Compiled at : 0x00007e8de8b1a578
 =============================
::> 'wdiss' was called at namespaces/test/dev.csl 585.9 <::
 

fib_shootout begin ...

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.046053682 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.034192918 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.047703147 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033749122 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.047806610 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033758058 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.047569426 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033669984 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.045563989 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033658893 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.046790655 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033964833 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.046770248 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033865487 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.046776269 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033829331 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 fibPTC2?
Timer [ 3 ] : elapsed time = 0.046681663 seconds
 fibPTC2? 92  =  7540113804746346429
 :: function : fibPTC2? : called on args : 1 - 92 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfib2_O3
Timer [ 3 ] : elapsed time = 0.033708586 seconds
 cfib2_O3 92  =  7540113804746346429
 :: function : cfib2_O3 : called on args : 1 - 92 : 1000 reps
 
fib_shootout end ...
 

fac_shootout begin ...

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002465536 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002201865 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002387682 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002216012 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002387872 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002808225 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002433226 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002198469 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002431253 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002200803 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002438046 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002477018 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002409181 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002204500 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002454377 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial4_O3
Timer [ 3 ] : elapsed time = 0.002203738 seconds
 cfactorial4_O3 23  =  8128291617894825984
 :: function : cfactorial4_O3 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 factorial2
Timer [ 3 ] : elapsed time = 0.002375900 seconds
 factorial2 23  =  8128291617894825984
 :: function : factorial2 : called on args : 1 - 23 : 1000 reps

 m =  3
 m =  2
 m =  1
 cfactorial3
Timer [ 3 ] : elapsed time = 0.002458514 seconds
 cfactorial3 23  =  8128291617894825984
 :: function : cfactorial3 : called on args : 1 - 23 : 1000 reps
 

fac_shootout end ...


NamespaceTree - All Namespaces : using : not using :: with : words
         - Root powReg7 powReg6 powReg5 powReg4 powReg3 powReg2 powReg pow ;; sp sp0 testpick sp0 sp0 x1 get set h4 h3 hi2 hi1 hi1 hi _assert1 goedel8 goedel6 goedel3 hio hioo up sp1 sp sp1 _ClassTest_ sp1 fib01 fib01 fib01 fib01 fib01 fib01 fib01 pow pow0 sp0 hi sp mct lisp lispInitNamespace doBigNum doLispTest _doTest _doDemo forStarters doScript2 doScript doTX64 doX64 todo bT bigNumTest ppT preprocessorTest loT mem2 mrm TODO bx x64 tc tCSL atoi rtw license purgeAll purge ri fr Is_DebugOn dbgOff dbgOn dbOn dbgOnVar log cOff cOn _cOn C_Off C_On c_syntaxOn forth ndrop ' tick findAny find include sp0 sp1 OptimizeOn
                 - Interpreter fac_shootout fib_shootout _shootout WDISS_ON comment _ffx ifx _ifx dbg tfib3 fibBN tbn tfib3 tfib2 tfib1 tfib fibPTC2 fibPTC Cfib_O3 Cfib fibn0 sp _Compile_Stack_PopToReg sp $ streol thi43 thi3 thi2 _defined ;; : word ; semi _semi xt@ } end { # defined _lx_ l: interpretFile _interpret interpreterDone interpreterIsDone interpreterStop interpreterInit interpreterRun interpretNextToken interpretString tokenToWord doWord eval /* */ #! // compileModeOff asmModeOff asmModeOn compileModeOn finishDebugInfo compileMode
                 - C fib4 fib3 fib2 fib tt fibPTC3? fibPTC? _fib1 _fib2 factorial fac hi x7 heey1 heey chars2 heey2 hey chars hi sp hip hi bexp44 bexp43 heeeey2 heeey2 heey2 heey hey2 hey1 hey a1234 a123 heey hey hi hey hi a1234 a123 heey hey hi t64bitSub3 t64bitSub3 t64bitSub2 t64bitSub t64bitAdd2 t64bitAdd moe3 moe2 moe moe moe moe hi hi hi hi t4+ t* t2+ t* sp factorial factorial factorial doTest tcd tL2 tL aTest aoTest test0 tdemo demo odemo demo! dtestAll testIt testAll testBasic _basicT basicT sp include1 allot assertStkChk _assertStkChk _assert assert1 assert1 assert assert0 assert1s _assert _assert0 ctloc _assert1 _assert1dbg debugTest debugTest1 debugTest2 debugTest3 logAppend logWrite ;; ptrStructNamePrint wordStructPrint wordNameStructPrint , rax_return void_return c_prefix countChangec cfactorial4_O3 cfactorial3_O3 cfactorial2_O3 cfactorial_O3 cfib2_O3 cfib_O3 cfactorial3 cfactorial2 cfactorial cfib -> -- ++ ?< :: >:< >? switch case }fi }else{ if{ (| ( sprintf oPrintf iPrintf
                         - C_Syntax fibPTC4? fibPTC2? fibPTC? _fibn0 cpow fibPTC2? faccs2 fac5 fac40 faccs1 faccs fac5 faccs3 factoriali2 factoriali MOVrr MOVmr MOV32rm MOV8rm _Compile_Move _Compile_Move_DataStackN_ToReg _Compile_TESTreg_Toreg _Compile_MoveReg_To_StackN _Compile_MoveReg_To_Rm _Compile_Test _Compile_SUBI_DSP _Compile_CallThruReg _Compile_Group5 _Compile_X_Group1_Immediate _Compile_X_Group1_Reg_To_Reg _Compile_X_Group1 _Compile_SetAtAddress_WithReg _Compile_Move_Literal_Immediate_To_Reg Compile_MoveReg_ToAddress_ThruReg Compile_MoveMemValue_ToReg_ThruReg Compile_MoveMemValue_To_Reg Compile_MoveImm_To_Mem Compile_MoveImm_To_Reg Compile_MoveImm Compile_Move_Reg_To_Reg Compile_Move_Rm_To_Reg Compile_Move_Reg_To_Rm Compile_Move_WithSib Compile_Move Compile_CalculateWrite_Instruction_X64 _Compile_Write_Instruction_X64 CalculateModRmByte _Compile_ImmDispData CalculateSib CalculateModRegardingDisplacement Calculate_Mod Calculate_Rex _CalculateRex Abs fibPTC2? _fib1c factorial factoriali ash bttt ctti tfw1 tfw yadaYada yada fac5 $ faccs3 interpret4 faccs2 fac40 interpret3 interpret2 chi interpret testc1 thi42 thi41 thi42 ctof1 ctof yadaYada yada csMatchExWithReturn csMatchEx taa CSL_a10 ctcta cmoe cmoe cpow fac5 ctof1 ctof0 factorial tl l0030 l0061 l0052 l0060 l0051 l0050 l0041 l0040 l0020 l002 l0010 l001 ctof ctof pbAssert StringEqual rpn match & typedef type c_class ? ! , ; } {
                         - int wtdInclude fw this size
                         - void Error ftoc ctof ftoc ctof this size
                         - int64 this size
                         - byte this size
                         - uint64 this size
                         - uint8 this size
                         - typedef buf this size
                                 - Buffer2048 node-p ash buffer this size
                         - Experimental3 abyteTest
                                 - byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                                 - _byteTest bt bt a16_123 d8_123 a32_123 u8_123 u32_123 u64_123 c8_123 b8_123 a64_123 a8_123 this size
                         - Dlsym
                                 - libc buf xc tprintf2 tprintf1 tprintf atoi sscanf memset strcat sprintf strcmp printf
                                         - CBuffer this size
                         - CObj this size
                                 - chey
                         - block this size
                         - Pointer this size
                         - Boolean this size
                         - quad this size
                         - long this size
                         - char this size
                         - uint32 this size
                         - int32 this size
                         - uint16 this size
                         - int16 this size
                         - int8 this size
                         - Experimental OMS RemainingAllocated Freed Allocated OvtMemChunkList OVT_MemChunk OSMS RemainingAllocated Freed Allocated HistorySpace_MemChunkStringList OVT_StaticMemList StaticMemSpace OS_MemChunk TSI TypeStatusInfo Ppibs PreProcessorIfBlockStatus SuperNamespace NameSpace i32_FunctionArg Function blk_CallHook ui64_ObjectAttributes ui64_MorphismAttributes ccp_Name SuperNamespace const NameSpace const ui64_LispAttributes ui64_ObjectAttributes ui64_MorphismAttributes blk_Definition OpInsnCode OpInsnCodeGroup uint64_TypeSignature TypeSignature pb_TypeSignature ccp_Name ] 8 [ Pbf8 Pblc JmpBuf0 sigjmp_buf PrintBufferConcatCopy PrintBufferCopy PrintBuffer Thrown StringSpaceSize BufferSpaceSize CSLSize OpenVmTilSize DataStackSize SessionObjectsSize WordRecylingSize CompilerTempObjectsSize TempObjectsSize ContextSize LispSpaceSize InternalObjectsSize ObjectSpaceSize MachineCodeSize LispTempSize LispCopySize DictionarySize Dbi ReAllocations SigSegvs Restarts StartedTimes StartIncludeTries Verbosity CSL_InternalSpace OpenVmTilSpace InternalObjectSpace HistorySpace RecycledOptInfoList RecycledWordList BufferList NBAs MemorySpaceList MemorySpace0 TotalMemSizeTarget TotalNbaAccountedMemAllocated TotalNbaAccountedMemRemaining TotalRemainingAccounted Notice Alert Default Current SigLocation SigAddress Argv Argc ExceptionWord ExceptionToken ExceptionSpecialMessage ExceptionMessage VersionString ErrorFilename StartupFilename StartupString InitString Console ExceptionCode Signal RestartCondition LastRestartCondition SignalExceptionsHandled DebugOutputFlag LogFlag CodeByteArray OVT_LC OVT_Interpreter OVT_Context OVT_CSL State OVT_MemChunk ics_IntColors rgbcs_RgbColors Bg Fg rgbc_Bg rgbc_Fg Blue Green Red SavedCslNamespaces InNamespace Namespaces WordsAllocated WordsInRecycling RecycledWordCount NBAs StringSpace DictionarySpace LispSpace ObjectSpace CodeSpace BufferSpace LispCopySpace LispTempSpace WordRecylingSpace ContextSpace CompilerTempObjectSpace TempObjectSpace SessionObjectsSpace MS_MemChunk ContextSensitiveLanguage StrTokInfo StringTokenInfo CharInfo 16 CharType CharType 16 CharFunctionTableIndex CharFunctionTableIndex LambdaCalculus CombinatorInfo LexerFunction cntx ContextFunction arg cntx ContextFunction_1 arg2 arg1 cntx ContextFunction_2 arg3 arg2 arg1 cntx ContextFunction_3 JmpBuf0 sigjmp_buf ContextNba PreprocessorStackList CurrentlyRunningWordDefinition TypeCastNamespace QidInNamespace BaseObject SC_CurrentCombinator ArrayBaseFieldObject CurrentWordBeingCompiled LastCompiledWord CurrentDisassemblyWord SourceCodeWord CurrentCombinator NlsWord LastEvalWord CurrentEvalWord TokenDebugSetupWord CurrentTokenWord LastRanWord CurrentlyRunningWord SpecialDelimiterOrDotCharSet SpecialDelimiterCharSet SpecialTokenDelimiters DefaultDelimiterOrDotCharSet DefaultDelimiterCharSet DefaultTokenDelimiters CurrentToken Location ContextDataStack System0 Compiler0 Interpreter0 Finder0 Lexer0 ReadLiner0 WordCount NsCount State C_Node Timers IncludeFileStackNumber ExceptionFlag BigNum_Printf_Width BigNum_Printf_Precision NumberBase State Debugger struct DebuggerFunction Interpreter TDI_StructUnionStack CurrentTopBlockInfo OptimizeInfoList InfixOperatorStack InternalNamespacesStack CombinatorStack BlockStack CombinatorBlockInfoStack LocalsCompilingNamespacesStack PointerToJmpInsnStack PostfixLists OptInfo JccAdressOffsetList RegisterParameterList CurrentMatchList SetccMovedList GotoList NonCompilingNs LocalsNamespace Qid_BackgroundNamespace C_FunctionBackgroundNamespace C_BackgroundNamespace PrefixWord LHS_Word Current_Word_Create Current_Word_New ReturnLParenOperandWord ReturnVariableWord ReturnWord RspRestoreOffset RspSaveOffset BlocksBegun FrameSizeCellOffset AccumulatedOffsetPointer BeginBlockFlag TakesLParenAsBlock SemicolonEndsThisBlock InLParenBlock AccumulatedOptimizeOffsetPointer InitHere ArrayEnds OptimizeForcedReturn CombinatorLevel BlockLevel GlobalParenLevel ParenLevel SaveOptimizeState SaveCompileMode LocalsFrameSize NumberOfArgs NumberOfRegisterArgs NumberOfNonRegisterArgs NumberOfVariables NumberOfRegisterVariables NumberOfNonRegisterVariables NumberOfLocals NumberOfRegisterLocals NumberOfNonRegisterLocals CombinatorEndsAt CombinatorStartsAt StartPoint BreakPoint ContinuePoint IfZElseOffset State JON OffsetPointer JmpToAddress JON_Node TDSCI COI wordArg2_Op wordArg1_Op wordArg2_literal wordArg1_literal wordArg2_rvalue wordArg1_rvalue rvalue wordArg1Node wordArg2Node nextNode wordNode nodem node lparen2 lparen1 wordArg0_ForOpEqual xBetweenArg1AndArg2 wordArg2 wordArg1 wordm wordn opWord rparenPrevOp ControlFlags NumberOfArgs rtrn COIW coiw_seven coiw_six coiw_five coiw_four coiw_three coiw_two coiw_one coiw_zero UseReg CO_DstReg CO_SrcReg CO_ImmSize CO_Imm CO_Disp CO_Rm CO_Reg CO_Mod CO_Dest_RegOrMem OptimizeFlag State_OREG2 State_OREG State_ACC State S_Node Lexer QualifyingNamespace FoundWord State ReadLineFunction struct ReadLiner_KeyFunction TabCompletionInfo Registers Rip RFlags R15d R14d R13d R12d R11d R10d R9d R8d Rdi Rsi Rbp Rsp Rbx Rdx Rcx Rax State Disp OffsetSize InsnSize Insn InsnType InsnAddress IiFlags BI_LocalsNamespace BI_Rllafl BI_Gi RegisterVariableControlWord OurCombinator LogicCodeWord ResetFlag N SetccNegFlag Ttt SetccTtt JmpToAddress ActualCopiedToJccCode CopiedToLogicJccCode CopiedToEnd MovzxCode SetccCode BI_StackPushRegisterCode CopiedToStart OriginalActualCodeStart AfterCmpCode CmpCode TestCode JccAddedCode JccCode TttnCode CompiledAtAddress PtrToJmpInsn PtrToJumpOffset bp_Last bp_First AfterLocalFrame LocalFrameStart ParenLevel JccType CopiedSize State BI_Symbol andOrCount la_code pparenlvl mparenlvl oparenlvl rtrn j i orAfterAnd andAfterOr orAfter2rparen andAfter2rparen Ncll Ncul ncp ncm nc PtrToJmpInsn pb_JmpOffsetPointer LabeledAddress OriginalAddress CompiledAtAddress pb_LabelName GI_BlockInfo CombinatorLevel BlockLevel Combinator GI_Word AddressSet GI_Symbol NBA BA_Data bp_Last EndIndex StartIndex MemRemaining BA_DataSize OurNBA NamedByteArray BA_Symbol BA_MemChunk TypeNamespace TypeSignatureCodes StackMapFunction4 StackMapFunction2 StackMapFunction1 StackMapFunction0 symbol VMapSymbol2 MapNodeFunction MapSymbolFunction2 VMapNodeFunction MapSymbolFunction MapFunction_2 MapFunction_Word MapFunction_1 MapFunction MapFunction_Word_PtrInt ListFunction4 ListFunction3 ListFunction2 ListFunction ListFunction0 cMapFunction_1 HistoryStringNode MemChunk CaseNode Buffer Symbol ListObject DObject DynamicObject Class Vocabulary Namespace Combinator ID BoolMapFunction_1 MapFunction5 MapFunction4 MapFunction4wReturn MapFunction3 MapFunction2_64 MapFunction2 MapFunction1 MapFunction0 List DLList ListNode Node n_Attributes n_dobject n_DLNode _DLList _ListNode _Node n_CurrentNode n_iData n_bData n_unmap n_InUseFlag n_Slots n_Size n_Type n_Node n_Before n_After do_iData do_bData do_unmap do_InUseFlag do_Slots do_Size do_Type do_Node do_Before do_After l_CurrentNode l_List _dllist node TI AttributeArray T_ChunkSize T_Size T_NumberOfBytes T_NumberOfSlots T_Unused T_NumberOfPrefixedArgs T_WordAttributes T_WAllocationType T_LispAttributes T_ObjectAttributes T_MorphismAttributes slot object function StackData InitialTosPointer StackMax StackMin StackPointer StackSize cFunction_2_Arg cFunction_1_Arg cFunction_0_Arg vFunction_2_Arg vFunction_1_UArg vFunction_1_Arg VoidFunction
                                 - dlnode n_Tail n_Before n_Head n_After this size
                                 - dllist this size
                                 - TypeInfo this size
                                 - Stack this size
                                 - Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - OpenVmTil this size
                                 - CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - OVT_MemSystem this size
                                 - OVT_StaticMemSystem this size
                                 - typeStatusInfo OpWordReturnSignatureLetterCode OpWord_ReturnsACodedValue_Flag TypeErrorStatus ] 128 [ ActualTypeStackRecordingBuffer ] 32 [ ExpandedTypeCodeBuffer OpWordTypeSignature OpWordFunctionTypeSignatureLength TypeStackDepth StackWord1 StackWord0 WordBeingCompiled OpWord TypeWordStack this size
                                 - ppibs LineNumber Filename 1 SvIfCond SvIfCond 1 ElifCond ElifCond 1 IfCond IfCond 1 Status Status 1 AccumStatus AccumStatus int64_Ppibs this size
                                 - MachineCodePrimitive this size
                                 - CPrimitive this size
                                 - Colors this size
                                 - IntColors this size
                                 - RgbColors this size
                                 - RgbColor this size
                                 - MemorySpace this size
                                 - _CSL JmpBuf0 sigjmp_buf SCI CSL_N_M_Node_WordList Sti FormatRemoval Preprocessor DebuggerEscape TabCompletion StringMacroB ScratchB5 ScratchB4 ScratchB3 ScratchB2 ScratchB1 DebugB4 DebugB3 DebugB2 DebugB1 DebugB LC_DefineB LC_PrintB LC_OutB TabCompletionBuf InputLine StrCatBuffer StringInsertB7 StringInsertB6 StringInsertB5 StringInsertB4 StringInsertB3 StringInsertB2 StringInsertB SourceCodeBuffer svLineB InputLineB OriginalInputLineB TokenB StringB LexerCharacterFunctionTable LexerFunction LexerCharacterTypeTable ReadLine_FunctionTable ReadLineFunction TokenBuffer OriginalInputLine ReadLine_CharacterTable InfixNamespace BeginBlockWord EndBlockWord DebugWordListWord RightBracket PokeWord StoreWord LastFinished_Word LastFinished_DObject PeekPokeByteArray Call_ToAddressThruSREG_TestAlignRSP CallReg_TestRSP PopDspToR8AndCall Set_DataStackPointer_FromDspReg Set_DspReg_FromDataStackPointer RestoreCpu2State RestoreCpuState SaveCpu2State SaveCpuState WordRun CurrentBlock cs_Cpu2 cs_Cpu LogFILE FILE LC Debugger0 TypeWordStack ContextStack Context0 C_Preprocessor_IncludedList C_Preprocessor_IncludeDirectory_SearchList RawStringNamespace StringNamespace IntegerNamespace BigNumNamespace InNamespace Namespaces DataStack ReturnStack DebugLevel DObjectCreateCount WordCreateCount TerminalLineWidth FindWordMaxCount FindWordCount WordsAdded InitSessionCoreTimes SaveDsp SavedState State this size
                                 - _StringTokenInfo CharSet0 CharSet SMNamespace Delimiters Out In EndIndex StartIndex State this size
                                 - CharacterType this size
                                 - _LambdaCalculus LC_JmpBuf sigjmp_buf OurCSL _CSL IndentDbgPrint SavedTypeCheckState LetFlag ApplyFlag Lambda_SC_WordList Code outBuffer buffer PrintBuffer OutBuffer BaseObject ArrayBaseObject Sc_Word LC_Here LC_SourceCode SaveStackPointer CombinatorInfoStack QuoteStateStack QuoteState ItemQuoteState SavedCodeSpace LastInterpretedWord FunctionArgs FunctionParameters True Nil Largs1 Largs Largs0 Locals Lvalue Lfunction Lfunction0 Lfirst L1 L0 Lread BackgroundNamespace LispTempNamespace LispDefinesNamespace LispNamespace ParenLevel Loop DontCopyFlag DebuggerSetupFlag DebuggerState State this size
                                 - _CombinatorInfo 16 ParenLevel ParenLevel 16 BlockLevel BlockLevel CI_i32_Info this size
                                 - Context this size
                                 - System this size
                                 - _Debugger DebugWordList Udis ud_t CharacterFunctionTable DebuggerFunction CharacterTable StepInstructionBA cs_Cpu LocalsCompilingNamespacesStack BreakReturnStack ReturnStack RestoreCpuState SaveCpuState Filename ShowLine LastDisStart StartHere SpecialPreHere PreHere LastSourceCodeAddress CopyRBP CopyRSP ReturnAddress DebugAddress Token Menu SubstitutedWord LastSourceCodeWord CurrentlyRunningWord SteppedWord LastPreSetupWord LocalsNamespace NextEvalWord LastShowEffectsWord LastShowInfoWord EntryWord w_AliasOf w_Alias w_Word InsnSize Edi Esi LastScwi SaveKey Key SaveStackDepth SaveTOS RL_ReadIndex Insn LevelBitNamespaceMap LastRsp DebugRDI DebugRSI DebugRBP DebugRSP WordDsp SaveRsp SaveEdi AddressModeSaveDsp RaDsp InitDsp SaveDsp State this size
                                 - _Interpreter InterpList WordType ThisNamespace CurrentObjectNamespace LastWord w_Word Token Compiler0 Lexer0 Finder0 ReadLiner0 State this size
                                 - Compiler this size
                                 - JccOffsetNode this size
                                 - TypeDefStructCompileInfo StructureUnionName FieldName TdsciToken DataPtr NextChar Tdsci_Field_Object Tdsci_Field_Type_Namespace Tdsci_StructureUnion_Namespace Tdsci_InNamespace Tdsci_ArrayNumberOfDimensions Tdsci_ArrayDimensions Token_StartIndex Token_EndIndex LineNumber Tdsci_Field_Size Tdsci_Union_Size Tdsci_Structure_Size Tdsci_StructureUnion_Size Tdsci_Offset State this size
                                 - CompileOptimizeInfo this size
                                 - _Lexer TokenList SCI ReadLiner0 NextPeekListItem TokenWord LiteralString Literal CurrentChar TokenBuffer lexer struct NextChar LastToken Filename DelimiterOrDotCharSet DelimiterCharSet TokenDelimiters CurrentTokenDelimiter LastLexedChar TokenInputByte ParsedToken OriginalToken LineNumber TokenWriteIndex CurrentReadIndex SC_Index Token_Length TokenEnd_FileIndex TokenStart_FileIndex TokenEnd_ReadLineIndex TokenStart_ReadLineIndex Token_CompiledDataFieldByteSize L_ObjectAttributes L_MorphismAttributes State this size
                                 - SourceCodeInfo SciBuffer SciWord SciFileIndexScEnd SciFileIndexScStart SciQuoteMode SciIndex this size
                                 - Finder this size
                                 - ReadLiner TciNamespaceStack TabCompletionInfo0 HistoryNode OutputFile InputFile FILE Key ReadLiner_KeyFunction svLine InputStringCurrent InputStringOriginal InputLineString InputLine Prompt AltPrompt NormalPrompt DebugAltPrompt DebugPrompt LastCheckedInputKeyedCharacter Filename LineStartFileIndex InputStringLength InputStringIndex EscapeModeFlag CursorPosition MaxEndPosition EndPosition svReadIndex ReadIndex OutputLineCharacterNumber LineNumber FileCharacterNumber InputKeyedCharacter svState State this size
                                 - TCI MarkNamespace OriginalContainingNamespace LastFoundWord ObjectExtWord NextWord OriginalRunWord RunWord OriginalWord TrialWord Identifier PreviousIdentifier SearchToken ShownWrap StartFlag FoundMarker LastWordWrapCount WordWrapCount WordCount FoundWrapCount MaxFoundCount FoundCount TokenLength DotSeparator EndDottedPos TokenLastChar TokenFirstChar State this size
                                 - Cpu this size
                                 - BlockInfo this size
                                 - Rllafl this size
                                 - GotoInfo this size
                                 - NamedByteArray NBA_ML_TailNode NBA_ML_HeadNode NBA_BaList InitFreedRandMarker Allocations NumberOfByteArrays SmallestRemaining LargestRemaining MemRemaining MemAllocated MemInitial TotalAllocSize NBA_DataSize OriginalSize ba_CurrentByteArray NBA_Symbol NBA_MemChunk this size
                                 - ByteArray this size
                                 - _WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - TypeSignatureInfo this size
                                 - location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - _Identifier wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                                 - _DLNode this size
                                 - _node n_Tail n_Before n_Head n_After this size
                                 - int64 this size
                                 - Location LocationAddress LocationWord CursorPosition LineNumber Filename this size
                                 - block this size
                                 - Pointer this size
                                 - AttributeInfo this size
                                 - dobject this size
                                 - DLNode this size
                                 - WordData BaseObject CSLWord SC_WordIndex StartCharRlIndex DebugWordList SourceCodeMemSpaceRandMarker SourceCodeWordList WD_ArrayNumberOfDimensions Index LambdaArgs AccumulatedOffset LambdaBody WD_NamespaceStack WD_OriginalCodeText WD_ArrayDimensions CompiledAsPartOf OurLocation LocalNamespaces TypeSignature OpInsnCode OpInsnGroup RegFlags DstReg SrcReg Opt_Reg Opt_Rm RegToUse Offset OriginalWord AliasOf StackPushRegisterCode ObjectCode NumberOfVariables NumberOfNonRegisterLocals NumberOfNonRegisterArgs TokenStart_LineIndex LineNumber Filename WD_LogicCodingAfter WD_Coding CodeStart TypeNamespaceName TypeNamespace WD_RunType this size
                                 - Word wrd w w w w w W_WordData JccCode TextMacroValue S_pb_Data3 S_Node3 S_Value3 NotUsed32 BitFieldOffset BitFieldSize NotUsed16 Ttt N StringMacroValue S_pb_Data2 S_Node2 S_Value2 S_Prototype S_ContainingList S_ContainingNamespace S_ValueWord S_Object S_BytePtr S_Value Definition S_PtrToValue S_DObjectValue S_SymbolList State S_Name CodeSize S_Node this size
                         - PrefixCombinators loop for do while if
                         - Infix tti tt ftfw2 ftfw1 moe moe =
                 - User fib1 _fib4 _fib3 _fib2 _fib _fib1 _fibn1 ffx2 ffx comment _ffx2 _ffx reps ifx2 ifx _ifx2 _ifx reps0 factorial2 factorial s fac bexp3 bexp2 bexp qexp2 qexp factorial006 factorial005 stest qeval sp heey1 hey1 hi1 heey1 hey1 hi1 patoi patoi t3 t1 t0 caseSwitchExample goedel7 goedel6 goedel5 goedel4 goedel2 goedel localsT _localsT hey hi tbb demo0 sp def istring s opOn vck opOn1 opOff pause _SMN_ streol p s ts wdis _var var _const const
                         - Experimental tx
                         - StartupMacros namespaces Delimiters
                 - Locals (| (
                 - Int mt5 mt5v mt4 mt3 mt2 mt1a mta mt1 mt _logAppend _logWrite nl print dp hp _hp p _p pn prints ps _ps hexIntPrint intPrint /= *= % modulo / ^^ pow_03 pow ** * -= += - +
                 - Logic tx1 l0031 nt >= <= != equal == > < ^^ xor or || and && ! not
                         - Bits tcmp tNotAnd tAnd tnot3 tnot2 tnot lt10 lt9 lt8 lt7b lt7 lnt5 lnt5 lnt5 lnt5 lnt5 lnt2 lnt lnt2 lnt lnt4 lnt3 lnt2 lnt lt2 lt sp |= &= >>= <<= neg ~ ^ | & >> <<
                 - Compiler _fib1 vckf1 vckf >; compilable swap compileCall compileWord immediate ' initRegs optRegs ) sourceCodeOn sourceCodeInit getStringToEndOfLine ftoken tokenQID Abs token _tick quote store set poke _set _poke = ! @= get _peek peek load 32@ 16@ 8@ 64@ @ debugWord prefixOff prefixOn infixOff infixOn nprefix prefixable prefix _prefix typeSignature inline ?immediate _immediate code Here begin _end _literal literal constant _constant variable _variable macro noop break return continue goto postfixOn rpn c_syntaxOff _c_syntaxOn
                         - Compiling pokeRegAtAddress pokeRegWithValue peekReg _compileWord _compileCall compileInt64 compileInt32 compileInt16 compileByte
                         - Reserved {| |} swap keyword dlsym: syntactic immediateOff immediate end { } ; semi : word
                 - Shell hio ppxe ppx epause apause test sh $ _sh endif else if
                 - Defines _DEV_H_ Compile_DEC Compile_INC _X64_CSL_ TSE_SIZE_MISMATCH TSE_ERROR SC_Index SC_QuoteMode SC_Buffer SC_Word STI_INITIALIZED TDI_POST_STRUCT TDI_UNION_PRINTED TDI_POINTER TDI_PRINT TDI_UNION TDI_STRUCT TDI_CLONE_FLAG OP_RESULT ARG2_R ARG2_L ARG1_R ARG1_L STACK_ARGS_TO_STANDARD_REGS OP_RESULT_OREG2 OP_RESULT_OREG OP_RESULT_ACC OREG2_2R OREG2_2L OREG2_1R OREG2_1L OREG_2R OREG_2L OREG_1R OREG_1L ACC_2R ACC_2L ACC_1R ACC_1L REG_LOCK_BIT LOC_OREG LOC_ACC LOC_STACK_1 LOC_STACK_0 IDEAL_LOC_OREG2 IDEAL_LOC_OREG IDEAL_LOC_ACC IDEAL_STACK_3 IDEAL_STACK_2 IDEAL_STACK_1 IDEAL_STACK_0 IDEAL_LOC_LITERAL ASSUMED_LOC_OREG2 ASSUMED_LOC_OREG ASSUMED_LOC_ACC ASSUMED_STACK_3 ASSUMED_STACK_2 ASSUMED_STACK_1 ASSUMED_STACK_0 ASSUMED_LOC_LITERAL LOGIC_FLAG SHOULD_BE_32 COULD_BE_16 COULD_BE_8 PRESERVE_INSN_SIZE GI_CAttribute CN_CaseUint64Value CN_CaseBytePtrValue CN_CaseBlock NBA_Name NBA_Chunk_Size NBA_AAttribute BA_AAttribute BA_AllocSize mc_TotalAllocSize mc_Data mc_Name mc_AllocType mc_ChunkSize mc_unmap mc_Type mc_Node B_Data B_Size B_CAttribute W_DObjectValue W_PtrToValue W_BytePtr W_Value3 W_Value2 W_Object W_Value W_List Lo_LambdaBody Lo_LambdaParameters Lo_String Lo_Integer Lo_UInteger Lo_Object Lo_PtrToValue Lo_Value Lo_List Lo_NumberOfSlots Lo_Tail Lo_Head Lo_Size Lo_Name Lo_LProp Lo_CProp Lo_LAttribute Lo_CAttribute InUseFlag Data WProp LProp CProp2 CProp W_LineNumber W_Filename W_AllocType W_NumberOfPrefixedArgs W_TypeAttributes W_LispAttributes W_ObjectAttributes W_MorphismAttributes Name S_MacroLength S_CodeSize S_unmap S_String S_Pointer S_NumberOfSlots S_ChunkSize ObjectByteSize CompiledDataFieldByteSize Size S_Size S_NumberOfPrefixedArgs S_LispAttributes S_WAllocType S_WordAttributes S_ObjectAttributes S_MorphismAttributes S_CurrentNode S_Before S_After S_Cdr S_Car n_Cdr n_Car Tail Head ENUM BITFIELDS xtc zhi yhi xxhi xhi xhii xhi0 xhi1 xhi01 xhi2a xhi2 xhe12 xhe1 xhe0 _ARRAY_H _PP_H_ LIBC DEBUG_ON
                 - Stack ndup stackCheck setDsp dsp _swap stackDepth depth pick _ndrop dropN drop ndup tos dup _dup
                 - Asm testAsm ;asm asm: asmEnd asmBegin svDsp jmp goto: label: goto label jcc Jcc jmpHere Jmp if_ _else_ _fi ,
                         - X64 _Compile_Int64 _Compile_Int32 _Compile_Int16 _Compile_Int8 fa dbiOff dbiOn DBI x64_dbg REX_W IMM_B DISP_B SIB_B MODRM_B REX_B DEC INC N TO_MEM TO_REG INT32_SIZE CELL_SIZE CELL BYTE CALL CMP SUB ADD NG LE LESS NA BE Z ZERO EQ EQUAL BELOW SREG THRU_REG ACC FP DSP R15D R14D R13D R12D R11D R10D R9D R8D RDI RSI RBP RSP RBX RDX RCX RAX MEM MEM0 MEM32 MEM8 REG off on false true sp
                 - Combinators Compile_Stack_Push_R8D _Compile_CMPreg_IMM _Compile_ADDI_DSP _Compile_MoveTOS_To_R8D _Compile_IncDecreg _Compile_Test_Imm iax ok shellOff lT cST oT cntT cT aT locT stT oldL lispTest sysT nT sT fT mT dT2 dT dT3 dT2 dT0 test syntaxTest c_SyntaxTest objectTest controlTest stackTest localsTest arrayTest classTest itest interpT iinc _TestDone_ startupMacros ifElse ifte qEval ix ? for loop _ _run _call run call doWhileDo doWhile while if3 if2 if if1 tf3 tf2
                 - Class . clone new struct class :{ +:{ };
                         - Buffer buf this size
                                 - DLLNode sp0 testNode BeforeReference AfterReference BeforeReference someJunkForTesting AfterReference BeforeReference AfterReference this size
                                         - DLLNodeAlloc testB2 testA2 testB1 testA1 tna2x testnx tnax1 testn5 tna3 testn4 tnarr2a tnarr2 tna testnarr2 testna sp nodes this size
                                                 - Ar1 a3 a arr2 a arr3 arr1 a arr2 ar d1 c1 b1 this size
                                                         - a
                                                         - Ar2 a5 a4 ar this size
                                                                 - Ar3 a7 a8 a6x a6 ar this size
                                                                         - Ar9 arr9 a9 a9dump _adump ar dimSize this size
                                                                                 - Ar10 a10dump ar dimSize this size
                                                                                         - arr10
                                                                                 - ct0 ac a tct ab ar this size
                                                                                         - cta a caba cadump a tcta aba ar this size
                                                                                 - ar9
                                                 - testD testC
                                                         - a112 c1138
                                                 - DLLNodeAlloc4 testna5 dlna4o testna5 testna4 nodes this size
                                         - DLList hey hi hey hi testList init TailNode HeadNode this size
                                                 - DLListClone testClone init Accum Four Three Twelve Sum Prototype Category this size
                         - Pointer this size
                                 - Integer
                         - BigNum ctof2 ftoc ctof tfib3 fibBN tbn bexpl !! ! bexp0 bexp aexp x ! qexp ftoc ctof _bassert eprint p fprint _bfprint _beprint ** ^^ pow sqrt != == > >= < <= / * -- ++ /= -= *= += - +
                 - Experimental xyxz <does <do does> do> locationPrint locationPush
                 - String hi hi mod Zenfone2 doLisp COMBINATOR_TOOKIT doLisp doTest doDemo doInit1 streamLine classTestRead DebugFlag var: stricmp strcpy strcat strcmp Strlen
                 - System ddps adps ahOff ahOn sOn sOff vb0 vb1 vb2 vb3 vb4 vb5 vb ahalt ti stk aw sys fload pwi pwdiss wi wdissl wdiss _wdiss _source pel pdl location F T false true Default White Cyan Magenta Blue Yellow Green Red Black bnOff bnOn wrun saveCpu2State restoreCpu2State saveCpuState restoreCpuState call_ToAddressThruSREG_TestAlignRSP bnState internalBitPrecision pPrecision pWidth _bnInit bnInit bigNumOff bigNumOn lcOff lcOn registers _pause pause location showTypeWordStack cpuStateShow console ok frc fr fullRestart ri restartInit restart exit systemBreak quit abort bye resetAll freeSessionMem allocateMem returnFromFile system3 system2 system1 system0 shell time timerInit timeInit echo jcc8_Off jcc8_On echoOff echoOn echoOff variables stateAll state binary hex decimal version charNumber lineNumber throw filename stackInit warmInit init reset _include
                         - Colors alertColors userColors defaultColors noticeColors debugColors setNoticeColors setDebugColors setAlertColors setDefaultColors setUserColors setNoticeRGB setUserRGB setDebugRGB setAlertRGB setDefaultRGB
                         - File freadToString fexists fsize ftell fseek fread fwrite fclose fopen
                 - Debug dbiOff DbiOn dbiOn DebugFlag v1 v4 tcOnv scOff scOn dscOff dscOn nt tcOff tcOn ;t t: regs locals dbrk d2: d1: d: d2 d1 d0 _startDirectory_ <d2:dbg> <d1:dbg> <d:dbg> <dso> <dbg> saveCpuState restoreCpuState dbg udis1x udis1 dsOn dsOff stop localsShow info _info xtDbg ;d _dbgOff _dbgOn scOn scOff dbgTypecheckOff dbgTypecheckOn dbgSourceCodeOff dbgSourceCodeOn ndstack dstack nrstack rstack stackDepthPrint stack setSourceCodeWord sourceDontAdd source sourceAdd wordDisassemble bdis dis dump
                 - Control maybePause hic2 ct2 ct1 ct0 ct00 leaving abrk0 abrkcon
                 - DObject new clone dobject
                         - DO_Experimental o12
                                 - o1
                                         - o2 ay
                                                 - o3 ott o4
                 - Lexer sp heey hey hi ofile orpfile % "
                 - List bexp3 lcRestoreStack dupList printList eval _( _lisp
                 - OpenVmTil ;ld ld: lispOn lispOff openvmtil _openvmtil ukseOff ukseOn includesOnlyOff includesOnlyOn addToHistoryOff addToHistoryOn historyDelete addToHistory dataStackSize dictionarySize sessionObjectsSize compilerTempObjectsSize objectsSize codeSize dbi verbosity debugLevel debugOn debugOff inlineOn inlineOff stringMacrosOff stringMacrosOn optimizeOff optimizeOn t{ }t typecheckOff typecheckOn inlining optimize
                         - Memory recycleDebugInfo mem freeAllTempMem freeSessionMem freeLispSpace freeLispSpace_All freeLispTempMem freeCompilerTempMem freeTemporayMem
                 - Io Error logWrite logAppend logOff logOn dpbOff dpbOn cpbOff cpbOn pbclr pbc space tab cr newline kbhit key emit printString
                 - Word code word_SC_WordList_Show wordNsListPrint purgeWordIfContainsName purgeWordName addrToWord codeSize codeStart wordAdd wordFinish xt= xt value= valueEqual value definition run wordRun wordEval wNamespace wordNew name
                 - Macro rdim rdi s _s tm: findAlias alias sm:
                 - Namespace usingLast: notUsing: using: _findAny _findUsing _find namespace namespaceWords _namespaceWords allWords words namespaceTreeWithWords namespaceTree namespaces setStateUsing setStateNotUsing notUsing usingLast usingFirst usingWAddress using in
                 - PreProcessor ifndef ifdef undef defined include define elif if else endif !
                 - Array [ ]
                 - MemorySpace msDelete memspace
                 - Forth rpn n, 8, 4, , 2, 1, '
                 - L9 l9
                 - Test hey2 hey
                         - test2 hi
                         - test hi
                 - Lisp /| /. /\ lambda sp oPrintf lcDbOff lcDbOn ;;; lcShowLisp lcShowLispDefines lcClearDefines lcReset = :: ,@ unquoteSplicing , unquote ` quasiquote @ ' load list eval quote cdr car if* cond if condc ifc macro let set begin lambda _lambda definec define _Printf ) print _( (
         - LispTemp
         - LispDefines
Total namespaces = 160 :: Total words = 3205

Increase the verbosity setting to 2 or more for more info here. ( Eg. : verbosity 2 = )
ContextSpace            InUse =   3078120 : Unused =   1116184 : Allocations =    2 : Largest =  1109699 : Smallest =     6485 : AllocSize =  2097152
SessionObjectsSpace     InUse =   1255182 : Unused =    841970 : Allocations =    2 : Largest =   841800 : Smallest =      170 : AllocSize =  1048576
WordRecylingSpace       InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CompilerTempObjectSpace InUse =   7181088 : Unused =   1207520 : Allocations =    2 : Largest =  1207376 : Smallest =      144 : AllocSize =  4194304
LispTempSpace           InUse =         0 : Unused =   1048576 : Allocations =    1 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
TempObjectSpace         InUse =       105 : Unused =   4194199 : Allocations =    2 : Largest =  4194199 : Smallest =  4194199 : AllocSize =  4194304
BufferSpace             InUse =    341962 : Unused =    706614 : Allocations =    1 : Largest =   706614 : Smallest =   706614 : AllocSize =  1048576
StringSpace             InUse =    266598 : Unused =    781978 : Allocations =    1 : Largest =   781978 : Smallest =   781978 : AllocSize =  1048576
ObjectSpace             InUse =         0 : Unused =   1048576 : Allocations =    3 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576LispSpace               InUse =         0 : Unused =   1048576 : Allocations =    2 : Largest =  1048576 : Smallest =  1048576 : AllocSize =  1048576
CodeSpace               InUse =    240245 : Unused =    808331 : Allocations =    1 : Largest =   808331 : Smallest =   808331 : AllocSize =  1048576
DictionarySpace         InUse =   7714067 : Unused =    674541 : Allocations =    2 : Largest =   674175 : Smallest =      366 : AllocSize =  4194304
InternalObjectSpace     InUse =    502342 : Unused =    546234 : Allocations =    1 : Largest =   546234 : Smallest =   546234 : AllocSize =  1048576
CSLInternalSpace        InUse =    826688 : Unused =    221888 : Allocations =    1 : Largest =   221888 : Smallest =   221888 : AllocSize =  1048576
StaticSpace             InUse =       115 : Unused =      1933 : Allocations =    1 : Largest =     1933 : Smallest =     1933 : AllocSize =     2048
Data Stack              InUse =        24 : Unused =      8168
Total Accounted Mem     InUse =  21648784 : Unused =  15295696
Non-Static Mem Allocated      =  36944480
Total Accounting errors       =         0
Total Actual leaks            =         0
NBA ReAllocations             =         9
WordsAllocation               =  15323904 : 35472 x 432 bytes
Recycled-Bytes:WordCount      =    233280 : 540   x 432 bytes
InRecycling-Bytes:Words       =   4803840 : 11120 x 432 bytes

Timer [ 1 ] : elapsed time = 1.049340866 seconds

Timer [ 2 ] : elapsed time = 2.349413264 seconds

System Startup [ 0 ] : elapsed time = 3.431704150 seconds
OVT Startup : elapsed time = 3.431699422 seconds
version 0.940.177
<: 
