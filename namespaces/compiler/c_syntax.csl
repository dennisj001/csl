
5 
User
C
Root
: sp0 ; //stack pause ;
location
//dbgOn 
//verbosity 4 =

// maybe we're shooting for a "smart syntactic language" that will parse "poetic" syntactic arrangements
#if 1 
optimizeOn inlineOn 
System Interpreter Combinators PrefixCombinators
C String
libc
#if 1 //Zenfone2 @ not
libc.printf ("\nhello %d\n", 7) //pause
#endif
C
User
Class
//verbosity 3 =

#define xtc( a ) a @ ps //pause
pwi xtc 
xtc ( "\n xtc : hi" )

cOn
#undef xtc
#define xtc( a ) a ps //pause
pwi xtc 
xtc ( "\n xtc : hi" )
sp0

libc C
sp0
typedef struct
{
    int64 hi ;
    char chars [ 32 ] ;
    int64 hey ;
    int64 heey2 ;
    char chars2 [ 32 ] ;
    int64 heey ;
    int64 heey1 ;
} CObj ;
"CObj size =" ps CObj size dup 104 _assert p 
CObj 'chey new ; 
chey.hi = 1234 ;
_assert0 ( chey.hi 1234 ) ; sp0
dump ( chey, chey.size ) ; sp0
oPrintf ( "\n\tchey.hi = %d", chey.hi ) ; sp0
chey.chars [2] = 255 ;
chey.chars [2] @ dup p 255 _assert //pause
sp0 
chey.heey = #x0123456789abcdef ; 
dump ( chey, chey.size ) ;
oPrintf ( "\n\tchey.heey = %lx", chey.heey ) ; sp0
chey.heey #x0123456789abcdef _assert0
dump ( chey, chey.size ) ;
sp0
chey.heey1 = chey.heey ;
chey.heey = chey.heey1 ; // #x0123456789abcdef ;
chey.heey2 = chey.heey1 ; // #x0123456789abcdef ; 
chey.heey2 = chey.heey1 ; // #x0123456789abcdef ;
chey.hey = chey.heey1 ; // #x0123456789abcdef ;
chey.hey chey.heey1 _assert0
dump ( chey, chey.size ) ;
oPrintf ( "\n\tchey.hey = %lx", chey.hey ) ; 

sp0
chey.chars [23] = 255 ;
chey.chars [18] = #b10110 ; // #x16
//chey.hey = #x12345678 ;
dump ( &chey, CObj.size ) ; 
sp0
oPrintf ( "\nCObj.size = %d",CObj.size ) ; 
oPrintf ( "\n%s%lx", "\nchey = ", chey ) ;
oPrintf ( "\n%s%lx", "\nchey.hey = ", chey.hey ) ; sp0 
oPrintf ( "\n%s%lx", "\n&chey.hey = ", &chey.hey ) ; sp0
hp ( chey.hey ) ; 
hp ( &chey.hey ) ;
sp0
C
decimal
var ( "x7" ) ;
x7 = &chey.chars [ 18 ] ;
sprintf ( x7, "%s", "\n\thoot" ) ;
oPrintf ( "%s", x7 ) ;
//pause
sprintf ( &chey.chars, "%s", "well" ) ;
dump ( chey, CObj.size ) ; 
//sprintf ( &chey.chars [ 24 ], "%s", "do or don't" ) ;
sprintf ( &chey.chars [ 24 ], "%s", "don't" ) ;
dump ( chey, CObj.size ) ; 
sprintf ( &chey.chars, "%s", "hoot" ) ;
dump ( chey, CObj.size ) ; 
sprintf ( &chey.chars, "%s", "ok! don't hoot" ) ;
dump ( chey, CObj.size ) ; 
sprintf ( &chey.chars, "%s", "well, do or don't hoot" ) ;
dump ( chey, CObj.size ) ; 

oPrintf ( "\n\t%s\n", &chey.chars [ 24 ] ) ;
oPrintf ( "\n\t%s\n", "hoot" ) ; //&chey.chars [ 24 ] ) ;
dump ( chey, CObj.size ) ; // add '&' within parentheses for lvalue
//pause
scOn
libc
sp0
decimal
//s pause 
void
chi ( CObj * chey0 | a b c d )
{
    c = 1 + 2 ;
    b = c + 2 ;
    a = b + c ;
    nl
    p ( c ) ; c 3 "c should be 3" assert // 3
    p ( b ) ; b 5 "b should be 5" assert // 5
    p ( a ) ; a 8 "a should be 8" assert // 8
    dump ( chey0, CObj.size ) ; 
    d = chey0->hey ;
    hex p ( d ) ; //pause () ;
    oPrintf ( "\n chi : d = %lx\n", d ) ;
    sprintf ( &chey0.chars, "\n\t\they = %lx", d ) ; // add '&' within parentheses for lvalue
    oPrintf ( "\n chi : d = %lx\n", d ) ;
    sprintf ( &chey0.chars2, "\n\t\they hey = %lx", &CObj.chey0.hey ) ;
    oPrintf ( "\n chey0.chars = %s\n", &CObj.chey0.chars ) ;
    oPrintf ( "\n chey0.chars2 = %s\n", &CObj.chey0.chars2 ) ;
    oPrintf ( "\n chi : d = %lx\n", d ) ;
    d = chey0.hey ;
    oPrintf ( "\n%lx\n", d ) ;
    oPrintf ( "\n chi : d = %lx\n", d ) ;
    _assert ( d #x0123456789abcdef ) ; 
    oPrintf ( "\n%x\n", CObj.chey0.hey ) ;
    sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;
    dump ( chey0, CObj.size ) ; 
} prefix
pwi chi
chi ( chey ) ;
sp0
decimal
interpret () ; // from interpreter.csl
sp0
#if 1
void
interpret2 ( | atoken aword ) 
{
    testc1 () ; //pause () ;
    nl tab () ; ps ( "interpret2 :> " ) ; nl
    while ( 1 )
    {   
        atoken = token () ; 
        oPrintf ( "\n\tinterpret2 : token = %s", atoken ) ; 
        //if ( ! ( strcmp ( atoken, "i2halt" ) ) ) 
        if ( StringEqual ( atoken, "i2halt" ) )
        { 
            oPrintf ( "\n\tinterpret2 exiting..." ) ; 
            //break ; 
            //goto: done ;
            return ;
        }
        else
        {
            aword = tokenToWord ( atoken ) ;
            doWord ( aword ) ;
        }
    }
    //label: done ;
//<dbg>
}

void
interpret3 ( | atoken aword ) 
{
    testc1 () ; //pause () ;
    nl () ; tab () ; 
    ps ( "interpret3 :> " ) ; nl () ;
    while ( 1 )
    {   
        atoken = token () ; 
        oPrintf ( "\n\tinterpret3 : token = %s", atoken ) ; 
        //if ( ! ( strcmp ( atoken, "i3halt" ) ) ) 
        //if ( ! libc.strcmp ( atoken, "i3halt" ) )
        //<dbg> 
        if ( StringEqual ( atoken, "i3halt" ) )
        { 
            oPrintf ( "\n\tinterpret3 exiting..." ) ; 
            //break ; 
            //goto: done ;
            return ;
        }
        else 
        {       
            aword = tokenToWord ( atoken ) ;
            doWord ( aword ) ;
        }       
    }
    //label: done ;
}
#endif // <~ l.137

pwi interpret2
pwi interpret3 
C
sp0

#if 1
//verbosity = 3 ;
interpret2 
using sp0
#if 1
int
fac40 ( n  | facc ) 
{ 
    int facc = 1 ;
#if 1
    while ( n > 1 ) facc = n -- * facc ;
#else
    while ( n > 1 ) facc *= n -- ;
#endif
    return facc ;
} 
pwi fac40  //pause
fac40 (7) dup p 5040 _assert  
i2halt sp0
//pause
#endif 

interpret3 sp0
c_syntaxOff

User
words  
sp0 

: hi1 1 2 + p ;  
: hey1 hi1 hi1 ; 
: heey1 hey1 hey1 hey1 ;
nl heey1 

#if 1 
c_syntaxOn
int
faccs2 ( n | rec ) 
{
    for ( rec = 1 ; n > 1 ; n-- )
    { 
        rec = rec * n ; 
    } 
    return rec ;
} 
pwi faccs2 // why not in c syntax here and in next line ??
faccs2 (7) dup p 5040 _assert0 
sp0 
libc
void
interpret4 ( | atoken aword ) 
{
    //testc1 () ; xhi01 ; xhi1( ) ; xhi2 ( 8 ) ; xhi2a ( "xhi2a =", 8 ) ; 
    //nl( ) ; tab ( ) ; ps ( "interpret :> " ) ; nl ( ) ;
    while ( 1 )
    {   
        atoken = token () ; 
        oPrintf ( "\n\tinterpret4 : token = %s", atoken ) ; 
        if ( atoken )
        {
            if ( StringEqual ( atoken, "i4halt" ) ) //if ( ! libc.strcmp ( atoken, "i4halt" ) )
            { 
                oPrintf ( "\n\n\ttoken = %s :: interpret4 exiting ...", atoken ) ; 
                //pause ();
                return ; 
            }
            aword = tokenToWord ( atoken ) ;
            doWord ( aword ) ;
        }
        else break ;
    }
}
//pause
i3halt  // code to exit interpret3
pwi interpret4 sp0
interpret4
C
int
faccs3 ( n | rec ) 
{
    for ( rec = 1 ; n > 1 ; n-- )
    { 
        rec = rec * n ; 
    } 
    return rec ;
} 
' faccs3 find wdiss
faccs3 (7) dup p 5040 _assert0 sp0
i4halt sp0 // code to exit interpret4
c_syntaxOff
//pause
#endif 
//ihalt //interpret from interpreter.csl
C
sp0
c_syntaxOn
C String libc
typedef struct { byte buf [ 256 ] ; } CBuffer ;
void
$ ( | atoken, buffer, CBuffer buffer0 ) 
{
    buffer = &buffer0.buf ;
    memset ( buffer, 0, CBuffer.size ) ; 
    while ( atoken = token () ) 
    {   
        oPrintf ( "\n\ttoken = %s\n", atoken ) ; //pause () ;
        //<dbg>
        if ( ! strcmp ( atoken, ";" ) ) 
        { 
            oPrintf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
            sh ( buffer ) ;
            break ; 
        }
        else 
        { 
            if ( strcmp ( atoken, "." ) )
            {
                strcat ( buffer, " " ) ; // for shell '.' which means current directory - needs the space after
            }
            strcat ( buffer, atoken ) ;
        }
    }
} 
pwi $ //'void.$ find wdiss 
sp0

ihalt

c_syntaxOff 
"\n\nnew $ test\n" ps
$ls -al . ;
$ etc/script ; 
//$$ etc/lispScript ; ls -al /usr/local ; ls -al . ;
//s pause 

C
sp0
verbosity 1 =
infixOff
1 opOn
: hi ( a b | c ) c a @ b @ + = oPrintf ("\nshould read 3 : %d", c ) ; 1 2 hi 
sp0
c_syntaxOn
sp0
int
fac5 ( REG n  | REG facc ) 
{ 
    facc = 1 ;
    while ( n > 1 ) 
    {
        //facc *= (n --) ; // parenthesis a must for now ??
        facc *= n -- ;
    }
    return facc ;
}
pwi fac5
fac5 ( 7 ) dup p 5040 _assert 
cOff
#if 1
infixOff
Int Root.Experimental 
'xyxz var
{
    'a var 'b var
    a 2 = 
    b 4 =
    a @ b @ + 2 / dup p 3 _assert0
} xyxz store
xyxz @ bdis
nl
xyxz @ ix 
xyxz @ ix 
"\nabove line should show 3 3" ps
cOn
infixOn
void yada () { int a = 2, b = 12, x ; x = (( a + b ) / 2 ) ; return (x) ; } pwi yada yada () ; 7 s _assert s
void yadaYada () { int a, b, x ; a = 2, b = 12 ; x = (( a + b ) / 2 ) ; return  ( x ) ; } pwi yadaYada yadaYada () ; 7 _assert s
cOff
//forStarters 1 =
#endif
sp0

//ihalt

#if 1

cOff
'fw var
//: wtdInclude "namespaces/wordTypeDef.csl" include ;
: wtdInclude "namespaces/types.csl" include ;
wtdInclude
stateAll
nl CSL size @ p OpenVmTil size @ p //pause
pwi wtdInclude
'wtdInclude find dup hex p 'C.Experimental.Word find wordStructPrint //pause
'wtdInclude find dup dup fw store hp Word size @ dump fw hp fw @ hp
fw @ hp fw @ ->Definition hp fw @ ->S_Name @ ps sp0 //pause
cOn
///#define W_Filename W_WordData->Filename 
//#define Name S_Name
C.Experimental 
oPrintf ( "\nIdentifier = %lx, Identifier.size = %d, WordData.size = %d, Stack.size = %d", Identifier, Identifier.size, WordData.size, Experimental.Stack.size ) ;
oPrintf ( "\nTypeInfo.size = %d, DLNode.size = %d, dllist.size = %d, dlnode.size = %d\n\n", TypeInfo.size, DLNode.size, dllist.size, dlnode.size ) ; 
void tfw ( Word * w ) { hp ( w->Definition ) ; ps ( w->S_Name ) ; } 
void tfw1 ( Word * w ) 
{ 
    hp ( w->Definition ) ; ps ( w->S_Name ) ; ps ( w->Name ) ; hp ( w->W_Filename ) ; 
    ps ( w->W_Filename ) ; ps ( w->W_WordData->Filename  ) ; 
} 
pwi tfw1
//wdiss ( 'tfw1 find ) 
tfw ('tfw1 find) ; tfw1 ( 'tfw1 find ) ; sp0 //pause
cOff
'C_Syntax.tfw find wdiss 
fw @ C_Syntax.tfw
infixOn
: ftfw1 ( Word * w ) nl w->Definition hp w->S_Name ps w->Name ps w->W_Filename ps w->W_Filename ps w->W_WordData->Filename ps ;
//pwi ftfw1
: ftfw2 ( Word * w ) nl w . Definition hp w . S_Name ps w . Name ps w . W_Filename ps w . W_Filename ps w . W_WordData . Filename ps ; 
fw @ ftfw2
fw @ ->W_Filename ps sp0 
fw @ W_Filename ps sp0 
fw @ ftfw1
sp0
'wtdInclude find dup hex p 'C.Experimental.Word find wordStructPrint 
//pause
cOn
//oPrintf ( "\n_Identifier.CodeSize = %lx, _Identifier.CodeSize = %d", _Identifier.CodeSize, _Identifier.CodeSize ) ;
oPrintf ( "\nIdentifier.size = %d, WordData.size = %d, Stack.size = %d", Identifier.size, WordData.size, Experimental.Stack.size ) ;
oPrintf ( "\nTypeInfo.size = %d, DLNode.size = %d, dllist.size = %d, dlnode.size = %d\n\n", TypeInfo.size, DLNode.size, dllist.size, dlnode.size ) ;
cOff
stateAll sp0
infixOn
: tt ( Word * w ) "\ntt : " ps w @ hp w->Definition hp w->S_Name ps w->Name ps w->W_Filename ps w->W_Filename ps w->W_WordData->Filename ps ;
pwi tt
nl 'wtdInclude find dup hp tt sp0 //pause
: tti ( Word * wrd ) "\ntti" ps wrd->Definition hp wrd->S_Name  ps wrd->Name ps wrd->W_Filename ps wrd->W_Filename ps wrd->W_WordData->Filename ps ;
nl 'tti find dup hp tti sp0
infixOff
cOn
C.Experimental
void ctti ( Word * w | ptr l ) 
{ 
    ps ( "\nctti" ) ; l = w->Definition ; 
    oPrintf ( "\nctti : word = %lx : Definition = %lx", w, l ) ; ptr = w->S_Name ; ps(ptr) ; ptr = w->Name ; ps(w->S_Name) ; ps ( ptr) ; 
    ptr = w.W_Filename ;  ps(ptr) ; ptr = w.W_Filename ; ps (ptr) ; 
    ptr = w->W_WordData->Filename ; ps (ptr) ; ps (w->W_WordData->Filename) ;
    ptr = w->W_WordData ;
    //ptrStructNamePrint ( ptr, "WordData" ) ;
}
cOff
C_Syntax
'ctti find ctti //pause
pwi ctti
'ctti find fw store ctti (fw @ ) //pause
'ctti find dup hex p ->W_WordData @ dup hp 'C.Experimental.WordData find wordStructPrint 
//'ctti find dup dup hex p ->W_WordData @ dup hp d: wordStructPrint 
'C.Experimental notUsing
sp0

#endif
//pause
#if 1
cOn
typecheckOn
C
'Experimental3 namespace
C.Experimental3 
typedef struct _byteTest 
{
    byte a8_123 ; 
    int64 a64_123 ;
    byte b8_123 ;
    byte c8_123 ; // test comment
    union // offset 11
    {
        int64 u64_123 ;
        int32 u32_123 ;
        int8 u8_123 ;
    } ; //size = 8 
    int32 a32_123 ; // offset 19
    byte d8_123 ;
    int16 a16_123 ; 
} byteTest, abyteTest ; // size = 26 + (26 % 4) = 28 
byteTest 'bt new ;
pwi byteTest 
ps ( "\nbt.size =" ) ; p ( bt.size ) ;
sp0
void 
bttt ( byteTest * xbt | btt byte bbtt) 
{ 
    oPrintf ( "\nbtt" ) ;
    dump ( &xbt, xbt.size ) ; 
    //d: xbt.a8_123 = 598 ; // check typechecking
    xbt.a8_123 = 'a' ; 
    bbtt = xbt.a8_123 ; 
    oPrintf ( "\nbtt = %c", bbtt ) ; 
    xbt.a64_123 = 0x123456789abcdef ; 
    xbt.b8_123 = 'b' ; xbt.c8_123 = 'c' ; xbt.a16_123 = 0x1234 ; 
    xbt.a32_123 = 0x12345678 ; //pause
    xbt.u32_123 = 0x1234567, btt = 0xedcba0987654321 ;
    xbt.d8_123 = 'd' ;
    oPrintf ( "\nbt.a16_123 = 0x%x ", xbt.a16_123 ) ; 
    oPrintf ( "\nbt.a32_123 = 0x%lx ", xbt.a32_123 ) ; 
    oPrintf ( "\nbt.a64_123 = 0x%lx ", xbt.a64_123 ) ; 
    oPrintf ( "\nbt.u32_123 = 0x%lx ", xbt.u32_123 ) ; 
    oPrintf ( "\nbt.a8_123 = %c ", xbt.a8_123 ) ; 
    oPrintf ( "\nbt.b8_123 = %c ", xbt.b8_123 ) ; 
    oPrintf ( "\nbt.c8_123 = %c ", xbt.c8_123 ) ; 
    oPrintf ( "\nbt.c8_123 = %c ", xbt.d8_123 ) ; 
    oPrintf ( "\nbtt = %lx", btt ) ; 
    dump ( &xbt, xbt.size ) ; 
    hp ( &xbt.a8_123 ) ;
} 
byteTest 'bt new ;
pwi bttt 
bttt ( bt ) ; sp0 
'bt find 'byteTest find wordStructPrint 
cOff
nl bt.a32_123 32@ hp    
nl bt.u32_123 32@ hp //pause    
#endif
sp0

#if 1
C.Experimental
stateAll    
"\nWord size = " ps Word size @ p
"\nWordData size = " ps WordData size @ p
"\nDLNode size = " ps DLNode size @ p
"\ndobject size = " ps C.Experimental dobject size @ p
"\nAttributeInfo size = " ps AttributeInfo size @ p
pwi Word
'C.Experimental notUsing 
//pause
#endif    
c_syntaxOff 
sp0

bnOff
infixOn
(1 + 5 + 6) / (3 + 2 + 1) 2 _assert
infixOff
sp0

typedef struct { byte buf [ 2048 ] ; } Buffer2048 ;
Buffer2048 'buffer new 
cOn
void ash ( str ) { ps ( str ) ; nl (); _sh ( str ) ; }
// four slightly different ways ...
void node-p ( txt, poftxt ) 
{
    sprintf ( &buffer.buf, "node -p \" %s \" > %s", txt, poftxt ) ;
    ash ( buffer ) ;
}
node-p ( "1+33", "./node.txt") ; //, abuf ) ;
cOff
pwi node-p 
$cat node.txt
cOn
void node-p1 ( txt, poftxt )
{
    byte * buffer1 = &buffer.buf ;
    sprintf ( buffer1, "node -p \" %s \" > %s", txt, poftxt ) ;
    ash ( buffer1 ) ;
}
node-p1 ( "1+392", "./node.txt") ; //, abuf ) ;
cOff
pwi node-p1 
$cat node.txt
cOn
void node-p2 ( txt, poftxt )
{
    byte * buffer1 = &buffer.buf ;
    sprintf ( buffer1, "node -p \" %s \" > %s", txt, poftxt ) ;
    ash ( buffer1 ) ;
}
node-p2 ( "1+10", "./node.txt" ) ; 
cOff
pwi node-p2 
$cat node.txt
//verbosity 2 = 
cOn
void node-p3 ( txt, poftxt ) 
{
    byte * buffer1 = &buffer.buf ;
    sprintf ( buffer1, "node -p \" %s \" > %s", txt, poftxt ) ;
    ash ( buffer1 ) ;
    printf ( "\n buffer.buf[5] = %s\n", buffer.buf [5] ) ;
}
node-p3 ( "1+1007", "./node.txt" ) ; 
cOff
$cat node.txt
pwi node-p3  
//pause
: ash ( str ) str @ ps nl str @ _sh ; 
: node-p4 ( txt, poftxt ) 
    sprintf ( &buffer.buf, "node -p \" %s \" > %s", txt, poftxt ) 
    buffer ash
;;
"1+107" "./node.txt" node-p4 
pwi node-p4  
$cat node.txt
: node-p5 ( txt, poftxt ) 
    sprintf ( &buffer.buf, "node -p \" %s \" > %s", txt, poftxt ) 
    buffer ash
;;
pwi node-p5  
"1+1007" "./node.txt" node-p5
node-p5 ( "1+1007" "./node.txt" ) 
$cat node.txt 
"1+107" "./node.txt" node-p4
node-p4 ( "1+107" "./node.txt" ) 
$cat node.txt 
2 + 7 assertStkChk // stack checking
sp0
//pause

