#ifndef _LIST_CSL_
#define _LIST_CSL_
5

cOff
: listNamespaces PreProcessor Root Locals MemorySpace Array Asm File System Colors Memory OpenVmTil Stack Reserved Compiler Compiling 
    StartupMacros User Namespace Macro Word Io Lexer List Pointer C DObject Debug Shell Interpreter String Dlsym libc Experimental 
    Defines Forth void byte Bits Logic int64 Combinators Class int Int Lib ;
listNamespaces 
//using
//d: pause
'List namespace
cOn
C
List

#if 0
#define TEMPORARY ( (uint64) 1 << 3 )
#define SESSION ( (uint64) 1 << 5 )
#define DICTIONARY ( (uint64) 1 << 6 )
#endif

typedef struct _node
{
    struct
    {
        union
        {
            struct _node * n_After ;
            struct _node * n_Head ;
        } ;
        union
        {
            struct _node * n_Before ;
            struct _node * n_Tail ;
        } ;
    } ;
} dlnode, anode, _dllist ;

typedef struct
{
    _dllist l_List ;
    anode * l_CurrentNode ;
} dllist ;

//#define n_Head l_List.n_Head
//#define n_Tail l_List.n_Tail

void
_dlnode_Init ( dlnode * node )
{
    node->n_After = 0 ;
    node->n_Before = 0 ;
}

#if 0
dlnode *
_dlnode_New ( uint64 allocType )
{
    dlnode * node = ( dlnode* ) Mem_Allocate ( sizeof (dlnode ), allocType ) ;
    return node ;
}
#endif

inline dlnode *
_dlnode_Before ( dlnode * anode )
{
    return anode->n_Before ;
}

inline dlnode *
_dlnode_After ( dlnode * anode )
{
    return anode->n_After ;
}

inline dlnode *
Is_NotHeadOrTailNode ( dlnode * anode )
{
    if ( anode && _dlnode_After ( anode ) && _dlnode_Before ( anode ) ) return anode ;
    else return 0 ;
}
// with error checking anode

inline dlnode *
Is_NotAHeadNode ( dlnode * anode )
{
    if ( anode && _dlnode_Before ( anode ) ) return anode ;
    else return 0 ;
}

// with error checking anode

inline dlnode *
Is_NotATailNode ( dlnode * anode )
{
    if ( anode && _dlnode_After ( anode ) ) return anode ;
    return 0 ;
}

// toward the TailNode

dlnode *
dlnode_Next ( dlnode * node )
{
    // don't return TailNode, return 0
    if ( node )
    {
        dlnode * nextNode = node->n_After ;
        if ( nextNode && nextNode->n_After ) return nextNode ;
    }
    return 0 ;
}

// toward the HeadNode

dlnode *
dlnode_Previous ( dlnode * node )
{
    // don't return HeadNode return 0
    if ( node )
    {
        dlnode * prevNode = node->n_Before ;
        if ( prevNode && prevNode->n_Before ) return prevNode ;
    }
    return 0 ;
}

void
dlnode_InsertThisAfterANode ( dlnode * thisNode, dlnode * aNode ) // Insert thisNode After aNode : toward the tail of the list - "after" the n_Head
{
    if ( thisNode && Is_NotATailNode ( aNode ) )
    {
        //if ( aNode->afterNode ) 
        aNode->n_After->n_Before = thisNode ; // don't overwrite a n_Head or n_Tail node 
        thisNode->n_After = aNode->n_After ;
        aNode->n_After = thisNode ; // necessarily after the above statement ! 
        thisNode->n_Before = aNode ;
    }
}

void
dlnode_InsertThisBeforeANode ( dlnode * thisNode, dlnode * aNode ) // Insert thisNode Before aNode : toward the head of the list - "before" the n_Tail
{
    if ( thisNode && Is_NotAHeadNode ( aNode ) )
    {
        //if ( aNode->beforeNode ) 
        aNode->n_Before->n_After = thisNode ; // don't overwrite a n_Head or n_Tail node
        thisNode->n_Before = aNode->n_Before ;
        aNode->n_Before = thisNode ; // necessarily after the above statement ! 
        thisNode->n_After = aNode ;
    }
}

void
dlnode_Remove ( dlnode * node )
{
    if ( Is_NotHeadOrTailNode ( node ) )
    {
        node->n_Before->n_After = node->n_After ;
        node->n_After->n_Before = node->n_Before ;
        node->n_After = 0 ;
        node->n_Before = 0 ;
    }
}

void
dlnode_ReplaceNodeWithANode ( dlnode * node, dlnode * anode )
{
    if ( node && anode )
    {
        dlnode * n_After = node->n_After ;
        dlnode_Remove ( node ) ;
        dlnode_InsertThisBeforeANode ( anode, n_After ) ;
    }
}

void
dlnode_Replace ( dlnode * replacedNode, dlnode * replacingNode )
{
    if ( replacedNode && replacingNode )
    {
        if ( replacedNode->n_Before ) replacedNode->n_Before->n_After = replacingNode ;
        if ( replacedNode->n_After ) replacedNode->n_After->n_Before = replacingNode ;
    }
}

#if 0
d2: void
_dllist_Init ( dllist * list )
{
    if ( list && list->n_Head && list->n_Tail )
    {
        list->n_Head->n_After = ( dlnode * ) list->n_Tail ;
        list->n_Head->n_Before = ( dlnode * ) 0 ;
        list->n_Tail->n_After = ( dlnode * ) 0 ;
        list->n_Tail->n_Before = ( dlnode * ) list->n_Head ;
        list->l_CurrentNode = 0 ;
    }
}

void
dllist_Init ( dllist * list, dlnode * ahead, dlnode * atail )
{
    list->n_Head = ahead ;
    list->n_Tail = atail ;
    _dllist_Init ( list ) ;
}

dllist *
_dllist_New ( uint64 allocType )
{
    dllist * list = ( dllist* ) Mem_Allocate ( sizeof ( dllist ), allocType ) ;
    list->n_Head = _dlnode_New ( allocType ) ;
    list->n_Tail = _dlnode_New ( allocType ) ;
    _dllist_Init ( list ) ;
    return list ;
}

dllist *
dllist_New ( )
{
    return _dllist_New ( DICTIONARY ) ;
}
#endif

int64
dllist_Depth ( dllist * list )
{
    int64 length ;
    dlnode * node, * nextNode ;
    for ( length = 0, node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ;
        length ++ ;
    }
    return length ;
}

void
_dllist_AddNodeToHead ( dllist *list, dlnode * node )
{
    if ( list && node ) dlnode_InsertThisAfterANode ( node, list->n_Head ) ; // after n_Head toward n_Tail
}

void
dllist_AddNodeToHead ( dllist *list, dlnode * node )
{
    if ( list && node )
    {
        dlnode_Remove ( node ) ; // if the node is already on a list it will be first removed
        _dllist_AddNodeToHead ( list, node ) ;
        list->l_CurrentNode = 0 ;
    }
}

void
_dllist_AddNodeToTail ( dllist *list, dlnode * node )
{
    if ( list && node ) dlnode_InsertThisBeforeANode ( node, list->n_Tail ) ; // before n_Tail toward n_Head
}

void
dllist_AddNodeToTail ( dllist *list, dlnode * node )
{
    if ( list && node )
    {
        dlnode_Remove ( node ) ;
        _dllist_AddNodeToTail ( list, node ) ;
        list->l_CurrentNode = node ;
    }
}

inline dlnode *
_dllist_Head ( dllist * list )
{
    return list->n_Head ;
}

inline dlnode *
_dllist_Tail ( dllist * list )
{
    return list->n_Tail ;
}

dlnode *
dllist_Head ( dllist * list )
{
    //if ( ! list ) return 0 ;
    //return ( dlnode * ) list->head ;
    dlnode * ahead = 0 ;
    if ( list ) ahead = _dllist_Head ( list ) ;
    return ahead ;
}

dlnode *
dllist_Tail ( dllist * list )
{
    dlnode * atail ;
    if ( list ) atail = _dllist_Tail ( list ) ;
    else return 0 ;
    return atail ;
}

inline Boolean
Is_NotTheHeadNode ( dlnode * anode )
{
    if ( anode->n_Before ) return true ;
    else return false ;
}

inline Boolean
Is_NotTheTailNode ( dlnode * anode )
{
    if ( anode->n_After ) return true ;
    else return false ;
}

// 'after' is toward the tail

dlnode *
_dllist_First ( dllist * list )
{
    dlnode * head = _dllist_Head ( list ), * headAfter ;
    if ( head && ( headAfter = _dlnode_After ( head ) ) )
        if ( headAfter->n_After ) return headAfter ; //Is_NotTheTailNode
    return 0 ;
}

// 'before' is toward the head

dlnode *
_dllist_Last ( dllist * list )
{
    dlnode *tail = _dllist_Tail ( list ), * tailBefore ;
    if ( tail && ( tailBefore = _dlnode_Before ( tail ) ) )
        if ( tailBefore->n_Before ) return tailBefore ; // Is_NotTheHeadNode
    return 0 ;
}

dlnode *
dllist_First ( dllist * list )
{
    dlnode * first ;
    if ( list && ( first = _dllist_First ( list ) ) ) return first ;
    else return 0 ;
}

dlnode *
dllist_Last ( dllist * list )
{
    dlnode * last ;
    if ( list && ( last = _dllist_Last ( list ) ) ) return last ;
    else return 0 ;
}

dlnode *
dllist_NodePrevious ( dllist * list, dlnode * node )
{
    if ( node )
    {
        node = _dlnode_Before ( node ) ;
    }
    if ( ! node ) node = dllist_Head ( list ) ;
    return node ;
}

// toward the HeadNode

dlnode *
_dllist_Before ( dllist * list )
{
    return dlnode_Previous ( list->l_CurrentNode ) ;
}

dlnode *
dllist_SetCurrentNode_Before ( dllist * list )
{
    list->l_CurrentNode = _dllist_Before ( list ) ;
    if ( list->l_CurrentNode == 0 )
    {
        list->l_CurrentNode = dllist_Head ( list ) ;
        return 0 ;
    }
    return list->l_CurrentNode ;
}
// toward the TailNode

dlnode *
_dllist_CurrentNodeAfter ( dllist * list )
{
    return dlnode_Next ( list->l_CurrentNode ) ;
}
// toward the TailNode

dlnode *
dllist_SetCurrentNode_After ( dllist * list )
{
    list->l_CurrentNode = _dllist_CurrentNodeAfter ( list ) ;
    if ( list->l_CurrentNode == 0 )
    {
        list->l_CurrentNode = dllist_Tail ( list ) ;
        return 0 ;
    }
    return ( dlnode* ) list->l_CurrentNode ;
}

void
_dllist_AddNamedValue ( dllist * list, byte * name, int64 value, uint64 allocType )
{
    Symbol * sym = _Symbol_New ( name, allocType ) ;
    sym->W_Value = value ;
    _dllist_AddNodeToHead ( list, ( dlnode* ) sym ) ;
}

void
_dllist_PushNode ( dllist* list, dlnode * node )
{
    _dllist_AddNodeToHead ( list, node ) ;
}

// use list like a endless stack

dlnode *
_dllist_PopNode ( dllist * list )
{
    dlnode *node = dllist_First ( ( dllist* ) list ) ;
    if ( node )
    {
        dlnode_Remove ( node ) ;
        return node ;
    }
    else return 0 ; // LIST_EMPTY
}

void
_dllist_DropN ( dllist * list, int64 n )
{
    dlnode * node, *nextNode ;
    for ( node = dllist_First ( ( dllist* ) list ) ; node && ( -- n >= 0 ) ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ; // before Remove
        dlnode_Remove ( node ) ;
    }
}

//_dllist_RemoveNodes including 'last'

void
_dllist_RemoveNodes ( dlnode *first, dlnode * last )
{
    dlnode * node, *nextNode ;
    for ( node = first ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ; // before Remove
        dlnode_Remove ( node ) ;
        if ( node == last ) break ;
    }
}

void
_dllist_MapNodes_UntilWord ( dlnode *first, VMapNodeFunction mf, Word * word )
{
    dlnode * node, *nextNode ;
    for ( node = first ; node ; node = nextNode )
    {
        Word * word1 = ( Word* ) dobject_Get_M_Slot ( ( dobject* ) node, SCN_T_WORD ) ;
        if ( word1 == word ) break ;
        nextNode = dlnode_Next ( node ) ; // before Remove
        mf ( node ) ;
    }
}

void
dllist_Map4_FromFirstFlag_Indexed ( dllist * list, Boolean fromFirst, MapFunction4 mf, int64 one, int64 two, int64 three )
{
    dlnode * node, *nextNode, *prevNode ;
    int64 index ;
    if ( fromFirst )
    {
        for ( index = 0, node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode, index ++ )
        {
            // get nextNode before map function (mf) in case mf changes list by a Remove of current node
            // problems could arise if mf removes Next node
            nextNode = dlnode_Next ( node ) ;
            mf ( node, index, one, two, three ) ;
        }
    }
    else
    {
        for ( index = dllist_Depth ( list ), node = dllist_Last ( ( dllist* ) list ) ; node ; node = prevNode, index -- )
        {
            prevNode = dlnode_Previous ( node ) ;
            mf ( node, index, one, two, three ) ;
        }
    }
}

void
dllist_Map2_FromFirstFlag ( dllist * list, MapFunction2 mf, int64 one, int64 two, int64 fromFirstFlag )
{
    dlnode * node, *nextNode, *prevNode ;
    if ( fromFirstFlag )
    {
        for ( node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
        {
            // get nextNode before map function (mf) in case mf changes list by a Remove of current node
            // problem could arise if mf removes Next node
            nextNode = dlnode_Next ( node ) ;
            mf ( node, one, two ) ;
        }
    }
    else
    {
        for ( node = dllist_Last ( ( dllist* ) list ) ; node ; node = prevNode )
        {
            prevNode = dlnode_Previous ( node ) ;
            mf ( node, one, two ) ;
        }
    }
}

void
dllist_Map ( dllist * list, MapFunction0 mf )
{
    dlnode * node, *nextNode ;
    for ( node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
    {
        // get nextNode before map function (mf) in case mf changes list by a Remove of current node
        // problem could arise if mf removes Next node
        nextNode = dlnode_Next ( node ) ;
        mf ( node ) ;
    }
}

void
dllist_Map1_FromEnd ( dllist * list, MapFunction1 mf, int64 one )
{
    dlnode *last, * node, *previousNode ;
    for ( last = dllist_Last ( ( dllist* ) list ), node = last ; node ; node = previousNode )
    {
        previousNode = dlnode_Previous ( node ) ;
        mf ( node, one ) ;
    }
}

void
dllist_Map1 ( dllist * list, MapFunction1 mf, int64 one )
{
    dlnode * node, *nextNode ;
    for ( node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ;
        mf ( node, one ) ;
    }
}

void
dllist_Map1_Break ( dllist * list, MapFunction1 mf, int64 one )
{
    dlnode * node, *nextNode ;
    for ( node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ;
        if ( mf ( node, one ) ) break ;
    }
}

void
dllist_Map1_FromNode ( dlnode * node0, MapFunction1 mf, int64 one )
{
    dlnode *node, *nextNode, *previousNode ;
    CSL_NewLine ( ) ;
    for ( node = node0 ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ;
        mf ( node, one ) ;
    }
    CSL_NewLine ( ) ;
    for ( node = node0 ; node ; node = previousNode )
    {
        previousNode = dlnode_Previous ( node ) ;
        mf ( node, one ) ;
    }
}

int64
dllist_Map1_WReturn ( dllist * list, MapFunction1 mf, int64 one )
{
    int64 rtrn = 0 ;
    dlnode * node, *nextNode ;
    for ( node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ;
        if ( rtrn = mf ( node, one ) ) break ;
    }
    return rtrn ;
}

void
dllist_Map2_FromEnd ( dllist * list, MapFunction2 mf, int64 one, int64 two )
{
    dlnode * node, *previousNode ;
    for ( node = dllist_Last ( ( dllist* ) list ) ; node ; node = previousNode )
    {
        previousNode = dlnode_Previous ( node ) ;
        mf ( node, one, two ) ;
    }
}

void
dllist_Map2 ( dllist * list, MapFunction2 mf, int64 one, int64 two )
{
    dlnode * node, *nextNode ;
    for ( node = dllist_First ( ( dllist* ) list ) ; node ; node = nextNode )
    {
        nextNode = dlnode_Next ( node ) ;
        mf ( node, one, two ) ;
    }
}

2 + 7 assertStkChk // stack checking
#endif