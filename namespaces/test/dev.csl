
5
#ifndef _DEV_H_
#define _DEV_H_
Interpreter
: sp0 ; //stack pause ; sp0
Root  
C 
optimizeOn inlineOn 
//typecheckOn 
scOn
lispOff
bnOff 
// optimizeOff inlineOff
// verbosity 2 = 
Compiler Logic Int C User 

// tail recursion : http://c2.com/cgi/wiki?TailCallOptimization
jcc8_On
c_syntaxOn 
#if 1
int factoriali ( int8 REG n | REG res )
{
    res = 1;
    while ( n >= 2 )
    {
#if 1
        res *= n-- ; 
#elif 0
        res *= (n--) ; 
#elif 0
        res = res * n-- ;
#elif 0
        res = res * n ; n = n - 1  ;
#else
        res = res * (n--) ;
#endif
    }
    //while ( n >= 2 ) ;
    return res;
} prefix

factoriali ( 7 ) ; p () ;
factoriali (7) ; dup p 5040 _assert //pause //sp0
pwi factoriali //pause
#endif
//vb (3) ;
jcc8_On
int factoriali2 ( int8 REG n | REG res )
{
    res = 1;
    do 
    {
        res = res * n ; n = n - 1 ;
    }
    while ( n >= 2 ) ;
    return res;
} prefix
pwi factoriali2 sp0 //pause
factoriali2 ( 7 ) ; p () ;
factoriali2 (7) ; dup p 5040 _assert sp0 
cOff
: factorial005 ( n  | fac ) 
    fac 1 = 
    { n @ 1 > } { n @ fac @ * fac store n -- } while 
    return fac @
;
7 factorial005 dup p 5040 _assert

: factorial006 ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
jcc8_Off
'factorial006 find wdiss 
7 factorial006 dup p 5040 "factorial006" _assert1 //pause
: qexp dup 1 <= if{ }else{ dup -- qexp * }fi ; 'qexp find wdiss 7 qexp dup p 5040 _assert 
: qexp2 dup 1 <= ?< >:< dup -- qexp2 * >? ; 7 qexp2 dup p 5040 _assert
: bexp ( n ) n @ 1 > if{ n @ dup -- bexp * }else{ 1 }fi ; 7 bexp dup p 5040 _assert
: bexp2 ( n ) { n @ 1 > } { n @ dup -- bexp2 * } { 1 } ifElse ; 7 bexp2 dup p 5040 _assert
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 *  } { 1 } ifElse ;
7 bexp3 dup nl p 5040 _assert //sp0
//pwi bexp3 //pause
c_syntaxOn
jcc8_On
int
faccs3 ( n | rec ) 
{
    for ( rec = 1 ; n > 1 ; n-- )
    { 
        rec = rec * n ; 
    } 
    return rec ;
}
' faccs3 find wdiss
faccs3 ( 7 ) dup p 5040 _assert 

sp0

int
fac5 ( REG n  | REG facc ) 
{ 
    facc = 1 ;
    while ( n > 1 ) 
    {
        //facc = facc * n -- ; 
        facc = facc * ( n -- ) ; // parenthesis a must for now ??
    }
    return facc ;
}
wdiss ( ' fac5 find ) ; 
fac5 ( 7 ) dup p 5040 _assert 
sp0
int
faccs ( REG n | REG rec ) 
{
    rec = 1 ; 
    while ( n > 1 )
    { 
        rec = rec * n ;  n-- ; 
    } 
    return rec ;
}
' faccs find wdiss
faccs ( 7 ) dup p 5040 _assert 
sp0
int
faccs1 ( REG n | REG rec ) 
{
    rec = 1 ; 
    if ( n > 1 )
   {
        do
        { 
            rec = rec * n ;  n-- ; 
        } 
        while ( n > 1 ) ;
    }
    return rec ;
}
' faccs1 find wdiss
faccs1 ( 7 ) dup p 5040 _assert 
sp0
int
fac40 ( n  | facc ) 
{ 
    facc = 1 ;
#if 0
    while ( n > 1 ) facc = n -- * facc ;
#else
    while ( n > 1 ) facc *= n -- ;
#endif
    return facc ;
} 
//pwi fac40 //pause
int
fac5 ( REG n  | REG facc ) 
{ 
    facc = 1 ;
    while ( n > 1 ) 
    {
        facc = facc * n -- ; 
    }
    return facc ;
}
//wdiss ( ' fac5 find ) 
fac5 ( 7 ) dup p 5040 _assert //pause
sp0
int
faccs2 ( REG n | REG rec ) 
{
    for ( rec = 1 ; n > 1 ; n-- )
    { 
        rec = rec * n ; 
    } 
    return rec ;
}
' faccs2 find wdiss
faccs2 ( 7 ) dup p 5040 _assert 
sp0
c_syntaxOff
Locals User
: fac ( n  | res ) 
    res 1 = 
    { n @ 1 > } { res n @ res @ * = n -- } while 
    return res @
;
7 fac dup p 5040 _assert 
// : bexp2 ( n | res ) { n @ 1 <= } { 1 } { n @ dup -- bexp2 * } ifElse ;
jcc8_Off

: s1 ( j ) { stackDepth 20 > } { state regs nl "stackDepth = " ps stackDepth p nl hex { j stackDepth = } { j @ 0 > } { j -- } { p } for quit } if2 decimal ;
sp0
User
//'dn 'dfnba find alias  
jcc8_On optRegs
: factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
: factorial2 ( REG n | REG rec ) rec 1 = { rec @ n @ * rec store n -- } { n @ 1 > } doWhile return rec ;
pwi factorial2 
7 factorial2 5040 _assert //pause
jcc8_Off //initRegs
'reps0 var 
'reps1 var
: _ifx ( w | j ) 
    { j 1 = } { j @ reps0 @ <= } { j ++ } 
    {
       //j @ w @ wordRun j @ p "." ps p ";" ps dn
       //j @ w @ wordRun drop // j @ p "." ps p ";" ps
       j @ w @ wrun drop // j @ p "." ps p ";" ps
       //j @ w @ wordRun j @ p "." ps p ";" ps //pause
    }
    for
;

: _ifx2 ( w | j k ) 
    { k 2 = j 1 = } { j @ reps0 @ <= } { j ++ } 
    {
       //k @ j @ w @ wordRun j @ p "." ps p ";" ps
       j @ k @ w @ wordRun drop //3 ndrop pause // j @ p "." ps p ";" ps
    }
    for
;

: ifx ( n w | k ) 
    { k 1 = } { k @ n @ <= } { k ++ } 
    { w @ _ifx } for
; 
'ifx find wdiss //pause
: ifx2 ( n w | k ) { k 1 = } { k @ n @ <= } { k ++ } { w @ _ifx2 } for ; 
'reps var
: _ffx ( n w | t ) 
    nl 7 w @ wordRun decimal p nl // test output
    { t 0 = } { t @ n @ < } { t ++ } 
    { reps @ w @ ifx } for 
;
'_ffx find wdiss //pause
: _ffx2 ( w n | t ) nl 2 16 w @ wordRun decimal p nl { t 0 = } { t @ n @ < } { t ++ } { reps @ w @ ifx2 } for ;

nl "ffx ... " ps nl

: comment ( wn ) ":: function :" ps wn @ ps ": called on args : 1 -" ps reps0 @ p ":" ps reps @ p "reps" ps ;
//: ffx ( wn | w ) 1 ti w wn @ _findAny = w @ wdiss 3 w @ _ffx nl wn @ ps ":" ps 1 time wn @ comment nl ;
: ffx ( wn | w ) 1 ti w wn @ _findAny = 3 w @ _ffx nl wn @ ps ":" ps 1 time wn @ comment nl ;
//: ffx ( wn | w ) 1 ti w wn @ _findAny = w @ wdiss 3 w @ _ffx nl wn @ ps ":" ps 1 time nl ;
: ffx2 ( wn | w ) 1 ti w wn @ _findAny = w @ wdiss w @ 3 _ffx2 1 time nl ;
c_syntaxOn
jcc8_On
User
int
fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 )
{
    for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) 
    {   
        fn1 = fn2 ;
        fn2 = fn ;
        fn = fn1 + fn2 ; 
    }
    return fn ;
}
jcc8_Off
c_syntaxOff
C_Syntax User 
' fibPTC2? find wdiss
fibPTC2? (20) dup p 6765 _assert sp0
cOff
//pause
User

reps0 23 =
reps 1000 =
//verbosity 2 =
"factorial" ffx
"cfactorial" ffx
"cfactorial2" ffx
"cfactorial3" ffx
"factoriali" ffx 

User "qexp" ffx
C "bexp" ffx
"bexp2" ffx
C "qexp" ffx
C "qexp2" ffx
"bexp" ffx
"bexp2" ffx
"bexp3" ffx

"fac" ffx
"fac5" ffx 
User
"factorial" ffx
"factorial2" ffx //pause
"factorial006" ffx
"factoriali" ffx 
"factoriali2" ffx 
"factoriali2" ffx //pause
"cfactorial3" ffx
"cfactorial" ffx
"cfactorial2" ffx
"cfactorial3" ffx
"cfactorial_O3" ffx
"cfactorial2_O3" ffx
"cfactorial3_O3" ffx
"cfactorial4_O3" ffx
//pause
using 
"faccs" ffx
"faccs1" ffx
"faccs2" ffx
"fac5" ffx
"fac40" ffx
sp0
//pause

jcc8_Off initRegs
//verbosity 3 =
c_syntaxOn
Root
//int cpow ( base power | out ) s{ for ( out = 1 ; power ; ( power -= 1 ) ) { out = out * base ; } return out ; }s 
int cpow ( base power | out ) { for ( out = 1 ; power ; power --  ) { out = out * base ; } return out ; }
//verbosity 3 =
'cpow find wdiss
cpow ( 2 30 ) dup p  1073741824 _assert //pause
c_syntaxOff
 //stack pause ;
//: pow ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; //"II.I" typeSignature
: pow ( base power | out -t II.I ) { out 1 = } { power @ 0 > } { power --  } { out out @ base @ * = } for return out @ ; //"II.I" typeSignature
//'pow find wdiss
2 30 pow dup p  1073741824 _assert 
"pow" ffx2 
: powReg ( REG base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
2 30 powReg dup p  1073741824 _assert 
"powReg" ffx2 
: powReg2 ( base REG power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
2 30 powReg2 dup p  1073741824 _assert 
"powReg2" ffx2 
: powReg3 ( REG base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
//'powReg3 find wdiss
2 30 powReg3 dup p  1073741824 _assert 
"powReg3" ffx2 
: powReg4 ( REG base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
2 30 powReg4 dup p  1073741824 _assert 
//'powReg4 find wdiss
"powReg4" ffx2 
: powReg5 ( base REG power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
2 30 powReg5 dup p  1073741824 _assert 
//'powReg5 find wdiss
"powReg5" ffx2 
: powReg6 ( REG base power | out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
2 30 powReg6 dup p  1073741824 _assert 
"powReg6" ffx2 
: powReg7 ( base power | REG out -t II.I ) { out 1 = } { power @ 0 > } { power -- } { out out @ base @ * = } for return out @ ;
2 30 powReg7 dup p  1073741824 _assert 
'powReg7 find wdiss //pause
"powReg7" ffx2 
Int
"**" ffx2
"pow_03" ffx2
sp0
 
optRegs
C
: tt ( | t ) t 6 = t ++ t @ p ;
nl ' tt find dup wdis definition call "\nshould show 7" ps //pause
User

c_syntaxOn
int 
_fibn0 ( n | fib ) 
{
    fib = n ;
    if ( n > 1 ) 
    {
        fib =  _fibn0 ( n - 1 ) + _fibn0 ( n - 2 ) ;
    }
    return fib ;
}
//' _fibn0 find d: wdiss sp0 
_fibn0 ( 20 ) dup p 6765 _assert //sp0
int
fibPTC? ( n ) 
{
    int fn, fn1, fn2 ;
    for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) 
    {   
        fn1 = fn2 ;
        fn2 = fn ;
        fn = fn1 + fn2 ; 
    }
    return fn ;
} prefix
' fibPTC? find wdiss
fibPTC? (20) dup p 6765 _assert sp0
//pause
int
fibPTC2? ( REG n | REG fn, REG fn1, REG fn2 )
{
    for ( fn = 0, fn1 = 0, fn2 = 1 ; n ; n -- ) 
    {   
        fn1 = fn2 ;
        fn2 = fn ;
        fn = fn1 + fn2 ; 
    }
    return fn ;
}
pwi fibPTC2? 
fibPTC2? ( 20) dup p 6765 _assert sp0 //pause
"fibPTC?" ffx 
"fibPTC2?" ffx 
int
fibPTC4? ( REG n | REG fn, REG fn1, REG fn2 )
{
    fn = 0, fn1 = 0, fn2 = 1 ; 
    do 
    {   
        fn1 = fn2 ;
        fn2 = fn ;
        fn = fn1 + fn2 ; 
        n -- ;
    }
    while ( n > 0 ) ;
    return fn ;
}
pwi fibPTC4? 
fibPTC4? (20) ; 
c_syntaxOff
"fibPTC4?" ffx 
dup p 6765 _assert sp0 //pause
//"cfib_O3" ffx 
"cfib2_O3" ffx 
sp0

: _fibn1 ( n ) { n @ 2 < } { n @ } { n -- n @ _fibn1 n -- n @  _fibn1 + } ifElse return tos ;
' _fibn1 find wdiss 20 _fibn1 p // sp0
: _fib1 ( n ) { n @ 2 < } { n @ } { n @ -- _fib1 n @ 2 - _fib1 + } ifElse ;
sp0

: _fib 
    dup 2 <  
    if{ 
    }else{ 
        dup -- _fib swap 2 - _fib + 
    }fi 
;
' _fib2 find wdiss 
20 _fib dup p 6765 assert0 //pause
: _fib2 dup 2 < ?< >:< dup -- _fib2 swap 2 - _fib2 + >; ; 
20 _fib2 nl dup p 6765 assert0 //pause
: _fib3 
    dup 2 < 
    ?< >:< 
        dup -- _fib3 swap 2 - _fib3 + 
    >; 
;
' _fib3 find wdiss 
20 _fib3 dup p 6765 assert0 
: _fib4 
    { dup 2 >= }
    { 
        dup -- _fib4 swap 2 - _fib4 + 
    } if2 
;
' _fib4 find wdiss
20 _fib4 dup p 6765 assert0 
sp0

Locals
User
"fib1" ( n ) { 1 ti n @ _fib1 p 1 time } word 
C 

jcc8_Off
'cfib2_O3 find wdiss //sp0
: fib  ( n ) 1 ti n @ _fib  p 1 time ;
: fib2 ( n ) 1 ti n @ _fib2 p 1 time ;
: fib3 ( n ) 1 ti n @ _fib3 p 1 time ;
: fib4 ( n ) 1 ti n @ _fib4 p 1 time ;
C_Syntax C Interpreter

: fibn0 ( n ) 1 ti n @ _fibn0 p 1 time ;
: Cfib ( n ) 1 ti n @ cfib  p 1 time ;
: Cfib_O3 ( n ) 1 ti n @ cfib_O3  p 1 time ;
: fibPTC ( n ) 1 ti n @ fibPTC?  p 1 time ;
: fibPTC2 ( n ) 1 ti n @ User.fibPTC2? p 1 time ;
: tfib ( n )  
    nl hex dsp p decimal nl "The fibonacci sequence" ps n @ p ":" ps nl 
    "C -O3 : " ps n @ Cfib_O3 nl 
    "no locals fib  : " ps n @ fib nl 
    //"locals fibn0 : " ps n @ fibn0 nl 
    "locals fib1    : " ps n @ Locals.fib1 nl 
    "no locals fib2 : " ps n @ fib2 nl
    "no locals fib3 : " ps n @ fib3 nl
    "fibPTC?        : " ps n @ fibPTC nl
    "fibPTC2?       : " ps n @ fibPTC2 nl
;
sp0
15 tfib 30 tfib //40 tfib //45 tfib 
stack //pause
: tfib1 ( n | m )  
    nl "The fibonacci sequence:: first :" ps n @ p "..." ps nl 
    "Cfib_O3         : " ps 1 ti m 1 = { m @ n @ < } { m @ cfib_O3 p m ++ } while 1 time nl nl
    "Cfib            : " ps 1 ti m 1 = { m @ n @ < } { m @ cfib    p m ++ } while 1 time nl nl
    "Cfib_O3         : " ps 1 ti m 1 = { m @ n @ < } { m @ cfib_O3 p m ++ } while 1 time nl nl
    "no locals _fib  : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib    p m ++ } while 1 time nl nl 
    "locals   _fibn0 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fibn0  p m ++ } while 1 time nl nl
    "locals   _fibn1 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fibn1  p m ++ } while 1 time nl nl
    "locals   _fib1  : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib1   p m ++ } while 1 time nl nl
    "no locals _fib2 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib2   p m ++ } while 1 time nl nl
    "no locals _fib3 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib3   p m ++ } while 1 time nl nl
    "no locals _fib4 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib4   p m ++ } while 1 time nl nl
    "fibPTC?         : " ps 1 ti m 1 = { m @ n @ < } { m @ fibPTC? p m ++ } while 1 time nl nl
    "fibPTC2?        : " ps 1 ti m 1 = { m @ n @ < } { m @ User.fibPTC2? p m ++ } while 1 time nl nl
;

: tfib2 ( n | m )  
    "Cfib_O3        : " ps 1 ti m 1 = { m @ n @ < } { m @ cfib_O3 p m ++ } while 1 time nl nl
    "no locals _fib4 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib4 p m ++ } while 1 time nl nl
    "locals _fibn1   : " ps 1 ti m 1 = { m @ n @ < } { m @ _fibn1 p m ++ } while 1 time nl nl
    "no locals _fib3 : " ps 1 ti m 1 = { m @ n @ < } { m @ _fib3 p m ++ } while 1 time nl nl
;
: tfib3 ( n | m )  
    "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl
    "locals fibPTC? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC? p m ++ } while 1 time nl nl
    "locals fibPTC2? : " ps 1 ti m 1 = { m @ n @ <= } { m @ fibPTC2? p m ++ } while 1 time nl nl
    "Cfib2_O3       : " ps 1 ti m 1 = { m @ n @ <= } { m @ cfib2_O3 p m ++ } while 1 time nl nl
;
' tfib3 find wdiss //pause
//' tfib1 find d: wdiss sp0 pause
30 tfib1
30 tfib2
92 tfib3 //sp0
//: fibx ( n ) { n @ 0 >= } { n @ _fib p n -- } while ;
//: fibx2 ( n | m ) "fibonacci" ps n @ p ":" ps m 0 = { m @ n @ < n @ <= } { m @ n @ < _fib2 p m ++ } while ;
// : fibx3 ( n | m ) "fibonacci" ps n @ p ":" ps m 0 = { m @ n @ < n @ <= } { m @ n @ < _fib3 p m ++ } while ;
//: fibx3 ( n ) "fibonacci" ps n @ p ":" ps { n @  } { n @ _fib3 p n -- } while ;
// ' _fib find wdiss
' _fib2 find wdiss
// 40 fibx3 
sp0
//bnOn

sp0
: tbn ( | n m ) n 0 = m 3 = n m @ += n m @ += n m @ += n @ p ; tbn nl "should be 9" ps
: fibBN ( n | fn fn1 fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // nl svn @ fprint ":" ps fn @ fprint 
    return fn @
;
' fibBN find wdiss
20 fibBN dup 6765 _assert p 
sp0
: tfib3 ( n | m )  
    "locals fibBN : " ps 
    { m 1 = } { m @ n @ <= } { m 1 +=  } 
    { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } 
    for
;
//nl nl 47 tfib3 //sp0 pause
nl nl 92 tfib3 //sp0 pause
nl 92 dup p fibBN p 
20 fibBN dup p 6765 == { "ok" ps } { "error" ps } tf2 drop sp0
//pause
: dbg _dbg ;
//cOff
: _ifx ( w | j )
    { j 1 = } { j @ reps0 @ <= } { j ++ } 
    {
       //j @ w @ wordRun j @ p "." ps p ";" ps dn
       //j @ w @ wordRun drop // j @ p "." ps p ";" ps
       //j @ w @ wrun drop // j @ p "." ps p ";" ps
       j @ w @ wrun drop //j @ p "." ps p ";" ps pause
       //j @ w @ <dbg> wordRun j @ p "." ps p ";" ps //pause
    }
    for
;
pwi _ifx //pause
: ifx ( n w | k ) 
    { k 1 = } { k @ n @ <= } { k ++ } 
    { w @ _ifx } for
; 
: _ffx ( n w ) 
    { n @ 0 > } 
    { reps @ w @ ifx n -- }  
    while
;
pwi _ffx //pause
: comment ( wn ) ":: function :" ps wn @ ps ": called on args : 1 -" ps reps0 @ p ":" ps reps @ p "reps" ps ;

'WDISS_ON var 
WDISS_ON 1 =

: _shootout ( wn n | m w t ) 
    //<dbg>
    w wn @ _findUsing = { WDISS_ON @ 0 > } { w @ wdiss } if2
    4 ti 
    { m n @ = t n @ = } { m @ 0 > } { m -- } 
    {
        { n t @ = nl "m = " ps m @ p } { n @ 0 > } { n -- } { n @ w @ _ffx } for
    } for
    nl wn @ ps 
    4 time 
    wn @ ps reps0 @ p " = "ps reps0 @ w @ wordRun decimal p nl // test output 
    wn @ comment nl
;
//pwi _shootout //pause
//sp 
//logOn
: fib_shootout ( m | n )
    { "\n\nfib_shootout begin ...\n" ps  n m @ = } { m @ 0 > } { m -- } 
    {
#if 0 //DEBUG_ON 
        "fibPTC2?" n @ _shootout 
#else
        "fibPTC2?" n @ _shootout 
        "cfib2_O3" n @ _shootout
        "fibPTC2?" n @ _shootout
        "cfib2_O3" n @ _shootout
        "fibPTC2?" n @ _shootout
        "cfib2_O3" n @ _shootout 
#endif
    } for
    "\nfib_shootout end ...\n" ps 
//<dbg>
;
//pwi fib_shootout //pause
reps0 92 =
reps1 3 = 
#if DEBUG_ON 
reps 2 = 
reps0 2 = 
1 fib_shootout 
//stack pause
#else
reps 1000 =
reps0 92 =
reps1 @ fib_shootout // pause
#endif
//logOff pause
: fac_shootout ( m | n ) 
    { "\n\nfac_shootout begin ...\n" ps n m @ = } { m @ 0 > } { m -- } 
    {
#if DEBUG_ON
        "factorial2" n @ _shootout //pause
#else
        "factorial2" n @ _shootout //pause
        "cfactorial4_O3" n @ _shootout
        "factorial2" n @ _shootout //pause
        "cfactorial4_O3" n @ _shootout
        "factorial2" n @ _shootout //pause
        "cfactorial3" n @ _shootout
#endif
    } for
    "\n\nfac_shootout end ...\n" ps
//<dbg>
;
// pwi fac_shootout
// verbosity 4 =
#if DEBUG_ON 
reps 2 = 
reps0 2 = 
1 fac_shootout 
//stack pause
#else
reps 1000 =
reps0 23 =
reps1 @ fac_shootout //pause
#endif
//sp 
bnOff 
nl
// verbosity 1 =
namespaceTreeWithWords 
Interpreter
sp0

bnOn cOn 
void ctof0 ( c ) { c = c * 1.8 ; c = c + 32 ; nl ; p (c) ; } //ctof0 ( 11.41) ;
void ctof1 ( c ) { c *= 1.8 ; c += 32 ; nl ; p (c) ; } //ctof1 ( 11.41) ;
cOff 
: ctof ( c ) c 1.8 *=  c 32 += nl c @ p ; //11.41 ctof 
: ftoc ( f ) f 32 -= f 1.8 /= f @ p ; //60 ftoc 
bnOff
: ctof ( c ) c 18 *=  c 10 /= c 32 += nl c @ p ; 
: ftoc ( f ) f 32 -= f 10 *= f 18 /= f @ p ; //60 ftoc 
sp0


//tc demo lisp

#if 0
addToHistoryOn
d: : hi 1 2 + p ; hi
//"d: : hi 1 2 + p ; hi" addToHistory
#endif

//stringMacrosOff
//mem
//scOn d: : hipt ( a b | c ) a @ b @ + c ! c @ p return ( c @ ) ; pwi hipt 2 3 hipt 5 _assert 

#if 0 //DEBUG_ON //0 // this works
C scOn cOn 

int64
fd ( int64 koc ) //| REG rtrn )
{
   int64 rtrn ;
   if ( koc == 1) rtrn = 1 ;
   else if ( koc == 2) rtrn = 5 ;
   else if ( koc == 3) rtrn = 10 ;
   else if ( koc == 4) rtrn = 25 ;
   else if ( koc == 5) rtrn = 50 ;
   return rtrn ;
}

int64
//cc1 ( REG amount, REG koc | REG one REG two REG rtrn ) 
cc1 ( amount, koc | one two rtrn ) 
{
    if (amount == 0) rtrn = 1  ;
    else if ( ( amount < 0) || ( koc == 0) ) rtrn = 0 ;
    else
    {
        one = cc1 ( amount, koc - 1) ;
        two = cc1 (amount - fd (koc), koc) ;
        rtrn = one + two ;
    }   
    return rtrn ;
}

pwi cc1 //pause

int64 
countChange ( int amount)
{
  int64 rtrn = cc1 ( amount, 5)  ;
  return rtrn ;
}
void
CountChange ( int64 amount )
{
    int64 value0 ;
    value0 = countChange ( amount ) ;
    oPrintf ( "\n%ld", value0 ) ;
}
//logOn
countChange (100) ; p 
countChangec (100 ) ; drop
ti(4) ; countChangec (1000 ) ; drop time(4) ;
ti(4) ; CountChange (1000) ; time(4) ;
pause
//logOff
cOff
//'fd findAny wdiss  

//pwi countchange

#endif //DEBUG_ON

#endif // ifdef _DEV_H_

rdim 
using
2 + 7 assertStkChk // stack checking
//pause

#if 0
int64
//cc1 ( int64 amount, int64 koc | rtrn, one, two )
cc1 ( REG amount, REG koc | REG rtrn ) // doesn't work ??
//cc1 ( REG amount, REG koc ) // doesn't work ??
//cc1 ( REG amount, REG koc) // doesn't work ??
{
    //int64 rtrn, one, two ;
    if (amount == 0) rtrn = 1  ;
    else if ( ( amount < 0) || ( koc == 0) ) rtrn = 0 ;
    else 
    {
#if 1
        rtrn = cc1 ( amount, koc - 1) d: + cc1 (amount - fd (koc), koc) ; // compiles but give wrong result
#else // this works
        one = cc1 ( amount, koc - 1) ;
        two = cc1 (amount - fd (koc), koc) ;
        rtrn = one + two ;
#endif
    }
    //oPrintf ( "\nId %ld :: amount = %ld : koc = %ld :: one = %ld : two = %ld : rtrn = %ld", callerId, amount, koc, one, two, rtrn ) ;
    //oPrintf ( "\namount = %ld : koc = %ld :: one = %ld : two = %ld : rtrn = %ld", amount, koc, one, two, rtrn ) ;
    return rtrn ;
}
#endif
//vb(1) ;
