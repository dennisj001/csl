5 
: sp ; //stack pause ; 
c_syntaxOff
'true 1 const
'false 0 const
'on true const
'off false const
// asm constants
// mod values
decimal
"REG" 3 const  
"MEM8" 1 const
"MEM32" 2 const
"MEM0" 0 const
"MEM" MEM0 const
// registers
"RAX" 0 const 
"RCX" 1 const 
"RDX" 2 const 
"RBX" 3 const 
"RSP" 4 const 
"RBP" 5 const 
"RSI" 6 const
"RDI" 7 const 
"R8D" 8 const 
"R9D" 9 const 
"R10D" 10 const 
"R11D" 11 const 
"R12D" 12 const 
"R13D" 13 const 
"R14D" 14 const 
"R15D" 15 const 

"DSP" R14D const 
"FP" R15D const 
'ACC RAX const
'THRU_REG R9D const                     
'SREG RDX const 

// ttt codes
"BELOW" 1 const 
"EQUAL" 2 const
"EQ" 2 const
"ZERO" 2 const
"Z" 2 const
"BE" 3 const
"NA" 3 const
"LESS" 6 const
"LE" 7 const
"NG" 7 const

"ADD" 0 const
"SUB" 5 const
"CMP" 7 const
"CALL" 2 const
"BYTE" 1 const
"CELL" 8 const
"CELL_SIZE" 8 const
'INT32_SIZE 4 const
'TO_REG 3 const
'TO_MEM 2 const
"N" 1 const // used with JCC n/ttt notation

// opCodes
//"INC" 0x40 const
//"DEC" 0x48 const
'INC 0 const
'DEC 1 const
sp
#if 0 // #define is not yet setting these word attributes to CONSTANT|LITERAL
c_syntaxOn
#define REX_B           ( 1 << 0 ) // 1
#define MODRM_B         ( 1 << 1 ) // 2 backwards compatibility
#define SIB_B           ( 1 << 2 ) // 4
#define DISP_B          ( 1 << 3 ) // 8
#define IMM_B           ( 1 << 4 ) // 16
#define REX_W           ( 1 << 5 ) // 32 //REX_B //( 1 << 0 ) // 2
#define MOD_DISP_0 0
#define MOD_DISP_8 1
#define MOD_DISP_32 2
#define MOD_REG 3
#define TO_REG 3
#define TO_MEM MOD_DISP_32
// mod field values
#define REG MOD_REG
#define MEM 0 // 0 - 2 based on displacement, calculated at compile time
#define RM_IS_ADDR MEM // based on displacement, calculated at compile time
#define ADDR MEM // based on displacement, calculated at compile time
#define RM_IS_VALUE REG
#define RM_IS_REG_VALUE REG
#define RM_SIB 0x4
#define VALUE REG
c_syntaxOff
#else
'REX_B      1  const 
'MODRM_B    2  const 
'SIB_B      4  const //  ( 1 << 2 ) 
'DISP_B     8  const // ( 1 << 3 ) 
'IMM_B      16 const // ( 1 << 4 ) 
'REX_W      32 const //REX_B const
#endif
sp
2 + 7 assertStkChk // stack checking
