/* test comment */ 5  // for stack checking see last lines
Root : sp1 ;
"\nclassTest.csl" ps sp1 //pause
#ifndef  _ClassTest_  // prevent including this file twice
"_ClassTest_" /* testing comment ...
testing comment */ var
#ifdef _ClassTest_
sp1 
scOn
Int Logic C
Compiler
hex
Class C

using
Class // "class" works like "namespace" so here we switch back to namespace 'Class' else following words would be in class 'Pointer'
"Pointer" class Pointer.size 8 = // 'size' must be set else it remains 0; whenever a :{ ... }; class declaration doesn't immediately follow the class declaration
"Integer" namespace // Integer.size 4 = doesn't work because a namespace doesn't have 'size' and 'this' variables automatically created
// prevent clash with C types : byte, etc.
//"int16" class int16 size 2 = // 'size' must be declared else it remains 0; ( see above note )
//Integer "int32" class int32.size 4 = // 'size' must be declared else it remains 0; ( see above note )
//Integer "int64" class int64 size 8 = // 'size' must be declared else it remains 0; ( see above note )
//Integer "byte" class byte.size 1 = 
//byte.size @ nl "Integer.byte.size = " prints print nl
decimal
Integer sp1 
Pointer size @ nl "Pointer.size = " prints print nl sp1 
Integer size @ nl "Integer size = " prints print nl
//int16.size @ nl "Integer.int16.size = " prints print nl sp1 
sp1 
Class
using
sp1 
"Buffer" class :{ byte buf [ 256 ] ; };
sp1 
using 
Buffer.size @ dup 256 _assert nl "Buffer size = " prints p nl // for classes with structure size does not need to be set
sp1 
'DLLNode class 
:{
	Pointer AfterReference ; // semicolon is optional and ignored when parsing class code
	Pointer BeforeReference ;
};
sp1 
using
DLLNode size @ dup 16 _assert nl "DLLNode size = " prints p nl
:{ 
	Pointer AfterReference  ; 
        int16   someJunkForTesting ; // u can reset the structure representing the class
	Pointer BeforeReference ;
};
sp1 
DLLNode.size @ dup 18 _assert nl "DLLNode size = " prints p nl
using
:{ // again reset the structure representing the class
	Pointer AfterReference ;  
	Pointer BeforeReference ;
};
DLLNode.size @ dup 16 _assert nl "DLLNode size = " prints p nl
sp1 
DLLNode 'testNode new 
//DLLNode "testNode" new 
testNode.AfterReference 1 =
testNode.BeforeReference 2 =
s    
testNode testNode.size @ dup p dup 16 _assert dump sp1 
s //pause
DLLNode
sp1 
"DLList" class
:{
    DLLNode HeadNode ;
    DLLNode TailNode ;
};
sp1 

: init ( this )
    this.HeadNode.AfterReference this.TailNode.BeforeReference =
    this.TailNode.BeforeReference this.HeadNode.AfterReference =
    this.HeadNode.BeforeReference 1 =
    this.TailNode.AfterReference  2 =
;
' init find wdiss //pause
sp1 
DLList 'testList new 
testList testList.size @ dup p dump 
sp1 
#if 1 //Is_DebugOn // test for debugger showing a long line of code
testList.HeadNode.AfterReference @ testList.TailNode.BeforeReference  "class init test : "  assert : hi 1 2 3 4 5 + + + + p ; : hey hi hi hi hi hi ; hey "\nyada yada yada yada neti" ps "\n below line should show several 15's" ps  : hi 1 2 3 4 5 + + + + p ; : hey hi hi hi hi hi ; nl hey nl "\n above line should show several 15's" ps // debugger test
#else
testList.HeadNode.AfterReference testList.TailNode.BeforeReference  "class init test : " assert 
#endif
sp1 
DLList
using
'DLListClone clone // clones DLList class
+:{ // adds to the DLList class structure
    int64 Category ;
    Pointer Prototype ;
    int64 Sum ;
    int64 Twelve ;
    int64 Three ;
    int64 Four ;
    int64 Accum ;
}; // add seven elements
//s pause
: init ( this ) 
//<dbg>
    this.Category 12 =
    this.Three 3 = 
    this.Prototype this.Three @ =
//dbgOn
#if 0 //Is_DebugOn
    this.Prototype @ dup p 3 "init_assert1" _assert1dbg 
#else
    this.Prototype @ dup p 3 "init_assert1" assert 
#endif
    this.Prototype @ p 
    this.Sum 0 =
    this.Four 4 = 
    this.Twelve 12 =
    this.Accum this.Sum @ = 

#if 1 // two ways to do this       
    this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" {| locationPush |} locationPrint assert //pause
#elif 1        
    this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" do> locationPush <do does> locationPrint <does assert //pause
#else
    this.Sum this.Category @ 3 + this.Prototype @ & = this.Sum @ 3 "init_assert2" assert 
#endif

    this.Accum this.Three @ this.Four @ * this.Three @ / = 
    this.Accum @ 4 "\n DLListClone init : this.Accum = :" ps "init_assert3" assert 
    this.Prototype @ p //pause
    this.Sum this.Category @ this.Prototype @ * this.Category @ - = // dup 24  "init_assert4" assert = 
    this.Sum @ dup hex p 24  "init_assert5" assert decimal nl
    this.Category @ dup p 12  "init_assert7" assert // 12
    this.Prototype @ p // 3
    this.Sum this.Category @ this.Prototype @ * = this.Sum @ dup p "testing yada" ps 36 "init_assert8" assert // 36
    this.Sum this.Category @ this.Prototype @ - dup p = // 9
    this.Sum this.Category @ this.Prototype @ && dup p = // 12 && 3 = 1
    this.Sum this.Category @ this.Prototype @ & dup p = // 12 & 3 = 0
    this.Accum this.Prototype @ =
    this.Sum this.Category @ this.Prototype @ | dup p =
    this.Sum this.Category @ this.Prototype @ || dup p =
    this.Sum this.Category @ this.Prototype @ / dup p =
    this.Category @ dup p 12 _assert // _pause // 12
    this.Sum @ p // 4
    this.Prototype @ p // 3
    "\n 12 3 36 testing yada 9 1 0 15 1 4 12 4 3 : output above should (approximately) read" ddps //_pause
    hex
    "\nthis = " ps this p
    "\nthis @ = " ps this @ p
    "\nthis.size = " ps this.size @ p nl
    this dup p this.size @ dump
    this.Accum this.Prototype @ dup p =
    this this.size @ dump
    decimal
    this.Accum @ dup 3 "\nAccum should be 3 : assert9 ="  assert p // 3
    this.Category @ dup 12 "\nCategory should be 12 : assert10 =" assert p //_pause // 12
;
' init find wdiss 
//s pause        
sp1 
DLListClone 'testClone new 
"\nthis = " ps this hex p //pause
sp0 
C
sp1  testClone size @ dump sp1 
testClone testClone.size @ dump
decimal nl s "DLListClone size =" ps DLListClone.size @ dup p nl 88 "Clone size" assert sp1 
testClone.TailNode.BeforeReference @ testClone "DLListClone init test : " assert sp1 
// test 'this' to refer to 'this' in current namespace
// d: this.TailNode.BeforeReference @ this "DLListClone init test2 : " assert
"\nthis @ size @ p " ps this.size @ p // sp1 // pause // for now we have to drop the 'this' pointer. TODO :: 'this' semantics have yet to be solidified
"\nthis.size = " ps this.size @ p 
C
sp1 //pause

using "\nprintf output = " ps oPrintf ( "this.size = %d\n", this.size )  //pause
//using "\nprintf output = " ps d1: oPrintf ( "this.size = %d\n", this.size )  //pause
sp1 
this @ dup hex p this.size @ dup decimal p dump //pause // 'this' is a pointer to a pointer 
sp1 
TODO ( "'this' semantics have yet to be solidified" ) 
testClone testClone.size @ dump
sp1 
nl testClone.Category @ 12 "DLListClone init test4 : " assert //pause
//nl this.Category @ 12 "DLListClone init test3 : " assert //pause
sp1 
#endif
2 + 7 assertStkChk // stack checking
sp1 
Root : sp1 stack pause ;
//pause
