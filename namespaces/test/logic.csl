5 
Root.Int C
// logic test
Logic Bits
: sp ; //stack pause ;
//verbosity 1 ( 1 4 << ) + =
sp
: lt 1 2 < dup p ; lt 1 _assert sp
: lt2 1 2 > dup p ; lt2 0 _assert sp
// ' lt2 find wdiss

: lnt ( n ) n @ 7 < dup p return tos ; 
' lnt find wdiss 
1 lnt 1 _assert sp 7 lnt 0 _assert 8 sp lnt 0 _assert sp
: lnt2 ( n m ) n @ m @ < dup p return tos ; 
1 2 lnt2 1 _assert sp 2 2 lnt2 0 _assert sp 2 1 lnt2 0 _assert sp
// ' lnt find wdiss
sp
: lnt3 ( n ) n @ 2 == dup p return tos ; 1 lnt3 0 _assert 2 lnt3 1 _assert
: lnt4 ( n m ) n @ m @ != dup p return tos ; 1 1 lnt4 0 _assert 2 1 lnt4 1 _assert

: lnt ( n ) n @ 7 <= dup p return tos ; 1 lnt 1 _assert  7 lnt 1 _assert 8 lnt 0 _assert
: lnt2 ( n m ) n @ m @ <= dup p return tos ; 1 2 lnt2 1 _assert 2 2 lnt2 1 _assert 2 1 lnt2 0 _assert
: lnt ( n ) n @ 7 >= dup p return tos ; 1 lnt 0 _assert  7 lnt 1 _assert 8 lnt 1 _assert
: lnt2 ( n m ) n @ m @ >= dup p return tos ; 3 2 lnt2 1 _assert 2 2 lnt2 1 _assert 2 3 lnt2 0 _assert
' lnt2 find wdiss
sp
nl
: lnt5 ( n | m ) m 1 = n m == p ; 1 lnt5 2 lnt5
: lnt5 ( n | m ) m 1 = n m <= p ; 1 lnt5 2 lnt5
: lnt5 ( n | m ) m 1 = n m > p ; 2 lnt5 1 lnt5
: lnt5 ( n | m ) m 1 = n m >= p ; 2 lnt5 1 lnt5
: lnt5 ( n | m ) m 1 = m n != p ; 2 lnt5 1 lnt5
// ' lnt6 find wdiss
sp
nl
//: lt7 1 1 - not dup p ; lt7 1 _assert sp
: lt7 ( n m ) n @ m @ - not dup p return tos ; //pwi lt7 sp0 1 1 lt7 1 _assert sp
: lt7b ( ) 1 1 + not 0 _assert ; //pwi lt7b sp0 lt7b sp
: lt8 ( ) 1 not 0 _assert ; lt8
sp
: lt9 0 not p ; lt9
: lt10 ( n ) n not p ;
sp  
1 lt10 0 lt10
: tnot ( n ) n @ not dup n store n @ dup p return tos ; "I.I" typeSignature
' tnot find wdiss //pause
1 not 0 "tnot1_assert" assert
0 not 1 "tnot2_assert" assert
0 tnot 1 "tnot3_assert" assert
1 tnot 0 "tnot4_assert" assert 
sp
: tnot2 ( n m | v ) n @ m @ | not dup v store p return ( v @ ) ;  
' tnot2 find wdiss 
0 0 tnot2 1 _assert 
1 1 tnot2 0 _assert
: tnot3 ( n ) n @ not dup p return tos ; 
' tnot3 find wdiss
1 tnot3 0 _assert 
sp
: tAnd ( n m ) n @ m @ && dup p return tos ; "II.I" typeSignature
' tAnd find wdiss
1 0 tAnd 0 "1 0" assert 
1 1 tAnd 1 "1 1" assert 
0 0 tAnd 0 "0 0" assert 
0 1 tAnd 0 "0 1" assert 
sp
: tNotAnd ( n m ) n @ m @ not && dup p return tos ; "II.I" typeSignature
' tNotAnd find wdiss //pause
1 0 tNotAnd 1 "tNotAnd1 1 0" assert 
1 1 tNotAnd 0 "tNotAnd2 1 1" assert 
0 0 tNotAnd 0 "tNotAnd3 0 0" assert 
0 1 tNotAnd 0 "tNotAnd4 0 1" assert 
// test 64 bit cmp
hex 
: tcmp ( n m ) n @ p " > " ps m @ p n @ m @ > dup decimal p return tos ; nl 0x100000000 0xffffffff tcmp 1 _assert 
s hex nl 0xffffffff 0x100000000 tcmp 0 _assert 
decimal
Logic 
: nt ( n ) n @ ! ! ! return tos ;  
1 nt 0 _assert 
0 nt 1 _assert
'nt find wdiss
//verbosity 1 4 << 1 | = //code for ReadLiner_LookAroundFor_Logic debug with 1 for standard debug
true p 
true not p
true not not p
true not not not p 
false p 
false not p
false not not p
false not not not p 
"\n 1 0 1 0 0 1 0 1 : above line should show" ps sp0
nl
{ true p } ix 
{ true not p } ix
{ true not not p } ix
{ true not not not p } ix 
{ false p } ix 
{ false not p } ix
{ false not not p } ix
{ false not not not p } ix 
"\n 1 0 1 0 0 1 0 1 : above line should show" ps sp0
//logOn
scOn
cOn
void l001 ( a b c d ) 
{
    if ( a || b || c || d ) return 1  ; 
    else return 0 ; 
}
pwi l001 sp0 //pause
l001 ( 1 0 0 0 ) ; 1 _assert 
l001 ( 0 1 0 0 ) ; 1 _assert
l001 ( 0 0 1 0 ) ; 1 _assert
l001 ( 0 0 0 1 ) ; 1 _assert
l001 ( 0 0 0 0 ) ; 0 _assert
l001 ( 0 1 1 0 ) ; 1 _assert
l001 ( 1 0 1 0 ) ; 1 _assert
l001 ( 1 0 0 1 ) ; 1 _assert
l001 ( 1 1 1 1 ) ; 1 _assert
l001 ( 0 1 0 0 ) ; 1 _assert
void l0010 ( a b c d ) 
{
    if ( a && b && c && d ) return 1  ; 
    else return 0 ; 
}
pwi l0010
l0010 ( 1 0 0 0 ) ; 0 _assert 
l0010 ( 0 1 0 0 ) ; 0 _assert
l0010 ( 0 0 1 0 ) ; 0 _assert
l0010 ( 0 0 0 1 ) ; 0 _assert
l0010 ( 0 0 0 0 ) ; 0 _assert
l0010 ( 0 1 1 0 ) ; 0 _assert
l0010 ( 1 0 1 0 ) ; 0 _assert
l0010 ( 1 0 0 1 ) ; 0 _assert
l0010 ( 1 1 1 1 ) ; 1 _assert
l0010 ( 0 1 0 0 ) ; 0 _assert
void l002 ( a b c d ) 
{
    if ( ( a == 1 ) || ( b == 1 ) || ( c == 1 ) || ( d == 1 ) ) return 1 ; 
    else return 0 ; 
}
//pwi l002 
l002 ( 1 0 0 0 ) ; 1 _assert 
l002 ( 0 1 0 0 ) ; 1 _assert
l002 ( 0 0 1 0 ) ; 1 _assert
l002 ( 0 0 0 1 ) ; 1 _assert
l002 ( 0 1 1 0 ) ; 1 _assert
l002 ( 1 0 1 0 ) ; 1 _assert
l002 ( 1 0 0 1 ) ; 1 _assert
l002 ( 0 1 0 0 ) ; 1 _assert
l002 ( 1 1 1 1 ) ; 1 _assert
l002 ( 0 0 0 0 ) ; 0 _assert
void l0020 ( a b c d ) 
{
    if ( ( a == 1 ) && ( b == 1 ) && ( c == 1 ) && ( d == 1 ) ) return 1  ; 
    else return 0 ; 
}
//pwi l0020
l0020 ( 1 0 0 0 ) ; 0 _assert 
l0020 ( 0 1 0 0 ) ; 0 _assert
l0020 ( 0 0 1 0 ) ; 0 _assert
l0020 ( 0 0 0 1 ) ; 0 _assert
l0020 ( 0 0 0 0 ) ; 0 _assert
l0020 ( 0 1 1 0 ) ; 0 _assert
l0020 ( 1 0 1 0 ) ; 0 _assert
l0020 ( 1 0 0 1 ) ; 0 _assert
l0020 ( 1 1 1 1 ) ; 1 _assert
l0020 ( 0 1 0 0 ) ; 0 _assert

void l0040 ( a b c ) 
{
    if ( ( a == 1 ) && ( ( b == 1 ) || ( c == 1 ) ) ) return 1  ; 
    else return 0 ; 
}
//pwi l0040 sp1
l0040 ( 0 0 0 ) ; 0 _assert
l0040 ( 1 0 0 ) ; 0 _assert 
l0040 ( 0 1 0 ) ; 0 _assert
l0040 ( 0 0 1 ) ; 0 _assert //
l0040 ( 0 1 1 ) ; 0 _assert //
l0040 ( 1 0 1 ) ; 1 _assert
l0040 ( 1 1 0 ) ; 1 _assert
l0040 ( 1 1 1 ) ; 1 _assert

void l0041 ( a b c ) 
{
    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) ) return 1  ; 
    else return 0 ; 
}
pwi l0041
l0041 ( 0 0 0 ) ; 0 _assert
l0041 ( 1 0 0 ) ; 0 _assert 
l0041 ( 0 1 0 ) ; 0 _assert
l0041 ( 0 0 1 ) ; 1 _assert //
l0041 ( 0 1 1 ) ; 1 _assert //
l0041 ( 1 0 1 ) ; 1 _assert
l0041 ( 1 1 0 ) ; 1 _assert
l0041 ( 1 1 1 ) ; 1 _assert

void l0050 ( a b c ) 
{
    if ( ( a == 1 ) || ( ( b == 1 ) && ( c == 1 ) ) )return 1  ; 
    else return 0 ; 
}
//pwi l0050 sp1
l0050 ( 0 0 0 ) ; 0 _assert
l0050 ( 1 0 0 ) ; 1 _assert 
l0050 ( 0 1 0 ) ; 0 _assert
l0050 ( 0 0 1 ) ; 0 _assert
l0050 ( 0 1 1 ) ; 1 _assert 
l0050 ( 1 0 1 ) ; 1 _assert
l0050 ( 1 1 0 ) ; 1 _assert
l0050 ( 1 1 1 ) ; 1 _assert

void l0051 ( a b c ) 
{
    if ( ( a == 1 ) || ( b == 1 ) && ( c == 1 ) )return 1  ; 
    else return 0 ; 
}
//pwi l0051 pause sp0
//sp1
l0051 ( 0 0 0 ) ; 0 _assert
l0051 ( 1 0 0 ) ; 0 _assert 
l0051 ( 0 1 0 ) ; 0 _assert
l0051 ( 0 0 1 ) ; 0 _assert
l0051 ( 0 1 1 ) ; 1 _assert 
l0051 ( 1 0 1 ) ; 1 _assert
l0051 ( 1 1 0 ) ; 0 _assert
l0051 ( 1 1 1 ) ; 1 _assert

void l0060 ( a b c ) 
{
    if ( ( ( a == 1 ) && ( b == 1 ) ) || ( c == 1 ) ) return 1  ; 
    else return 0 ; 
}
//pwi l0060 sp0
l0060 ( 0 0 0 ) ; 0 _assert
l0060 ( 1 0 0 ) ; 0 _assert 
l0060 ( 0 1 0 ) ; 0 _assert
l0060 ( 0 0 1 ) ; 1 _assert 
l0060 ( 0 1 1 ) ; 1 _assert 
l0060 ( 1 0 1 ) ; 1 _assert
l0060 ( 1 1 0 ) ; 1 _assert
l0060 ( 1 1 1 ) ; 1 _assert

void l0052 ( a b c d ) 
{
    if ( ( ( a == 1 ) && ( b == 1 ) ) || ( ( c == 1 ) && ( d == 1 ) ) )return 1  ; 
    //if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) )return 1  ; 
    else return 0 ; 
}
//pwi l0052 sp0
l0052 ( 1 0 0 0 ) ; 0 _assert 
l0052 ( 0 1 0 0 ) ; 0 _assert
l0052 ( 0 0 1 0 ) ; 0 _assert
l0052 ( 0 0 0 1 ) ; 0 _assert
l0052 ( 0 1 1 0 ) ; 0 _assert
l0052 ( 1 0 1 0 ) ; 0 _assert
l0052 ( 1 0 0 1 ) ; 0 _assert
l0052 ( 0 1 0 0 ) ; 0 _assert
l0052 ( 1 1 1 1 ) ; 1 _assert
l0052 ( 1 1 0 0 ) ; 1 _assert
l0052 ( 0 0 1 1 ) ; 1 _assert
l0052 ( 0 0 0 0 ) ; 0 _assert

void l0061 ( a b c d ) 
{
    if ( ( ( a == 1 ) || ( b == 1 ) ) && ( ( c == 1 ) || ( d == 1 ) ) )return 1  ; 
    else return 0 ; 
}
//pwi l0061 sp0
l0061 ( 1 0 1 0 ) ; 1 _assert 
l0061 ( 0 1 0 1 ) ; 1 _assert
l0061 ( 0 0 1 0 ) ; 0 _assert
l0061 ( 0 0 0 1 ) ; 0 _assert
l0061 ( 0 1 1 0 ) ; 1 _assert
l0061 ( 1 0 1 0 ) ; 1 _assert
l0061 ( 1 0 0 1 ) ; 1 _assert
l0061 ( 0 1 0 0 ) ; 0 _assert
l0061 ( 1 1 1 1 ) ; 1 _assert
l0061 ( 1 1 0 0 ) ; 0 _assert
l0061 ( 0 0 1 1 ) ; 0 _assert
l0061 ( 0 0 0 0 ) ; 0 _assert

void l0030 ( a b c d ) 
{
    if ( ( a == 1 ) && ( b == 1 ) || ( c == 1 ) && ( d == 1 ) ) return 1 ; 
    else return 0 ; 
}
pwi l0030 sp0 //pause
l0030 ( 1 0 0 0 ) ; 0 _assert 
l0030 ( 0 1 0 0 ) ; 0 _assert
l0030 ( 0 0 1 0 ) ; 0 _assert
l0030 ( 0 0 0 1 ) ; 0 _assert
l0030 ( 0 0 0 0 ) ; 0 _assert
l0030 ( 0 1 1 0 ) ; 0 _assert
l0030 ( 1 0 1 0 ) ; 0 _assert
l0030 ( 1 0 0 1 ) ; 0 _assert
l0030 ( 1 1 1 1 ) ; 1 _assert
l0030 ( 0 1 0 0 ) ; 0 _assert
l0030 ( 0 1 1 1 ) ; 1 _assert
l0030 ( 0 0 1 1 ) ; 1 _assert
l0030 ( 1 1 0 0 ) ; 0 _assert
l0030 ( 1 1 0 1 ) ; 1 _assert
cOff
//pwi l0031 sp0
#if 1 
: l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { return 1  } { return 0  } ifElse ; prefixable
pwi l0031 //pause
l0031 ( 1 0 0 0 )  0 _assert 
l0031 ( 0 1 0 0 )  0 _assert
l0031 ( 0 0 1 0 )  0 _assert
l0031 ( 0 0 0 1 )  0 _assert
l0031 ( 0 0 0 0 )  0 _assert
l0031 ( 0 1 1 0 )  0 _assert
l0031 ( 1 0 1 0 )  0 _assert
l0031 ( 1 0 0 1 )  0 _assert
l0031 ( 1 1 1 1 )  1 _assert
l0031 ( 0 1 0 0 )  0 _assert
l0031 ( 0 1 1 1 )  1 _assert
l0031 ( 0 0 1 1 )  1 _assert
l0031 ( 1 1 0 0 )  0 _assert
l0031 ( 1 1 0 1 )  1 _assert
#else
pbclr
dpbOn
cpbOn
: l0031 ( a b c d ) { a @ 1 == b @ 1 == && c @ 1 == || d @ 1 == && } { "1" ps  } { "0" ps  } ifElse ; prefixable
l0031 ( 1 0 0 0 )  
l0031 ( 0 1 0 0 )  
l0031 ( 0 0 1 0 )  
l0031 ( 0 0 0 1 )  
l0031 ( 0 0 0 0 )  
l0031 ( 0 1 1 0 )  
l0031 ( 1 0 1 0 )  
l0031 ( 1 0 0 1 ) 
l0031 ( 1 1 1 1 )  
l0031 ( 0 1 0 0 )  
l0031 ( 0 1 1 1 )  
l0031 ( 0 0 1 1 )  
l0031 ( 1 1 0 0 )  
l0031 ( 1 1 0 1 )  
cpbOff 
dpbOff
C_Syntax
pbAssert ( " 0 0 0 0 0 0 0 0 1 0 1 1 0 1" ) ; //pause 
dpbOff
//pwi l0031 

#endif

cOn
dpbOn 
void tl ( n ) 
{
    if ( n == 1 ) oPrintf ( "\nn = %d", n ) ;
    else 
    {
        if ( n == 2 ) oPrintf ( "\nn = %d", n ) ;
        else 
        {
            if ( n == 3 ) oPrintf ( "\nn = %d", n ) ;
            else 
            {
                if ( n == 4 ) oPrintf ( "\nn = %d", n ) ;
                else 
                {
                    if ( n == 5 ) oPrintf ( "\nn = %d", n ) ;
                    else 
                    {
                        if ( n == 6 ) oPrintf ( "\nn = %d", n ) ;
                    }
                }
            }
        }
    }
}
pbclr
cpbOn
tl ( 1 ) ; tl ( 2 ) ; tl ( 3 ) ; tl ( 4 ) ; tl (5) ; tl(6) ;
cpbOff 
dpbOff
cOff
C_Syntax
pbAssert ( "\nn = 1\nn = 2\nn = 3\nn = 4\nn = 5\nn = 6" ) //pause 
cOff 
2 + 7 assertStkChk sp // stack checking


